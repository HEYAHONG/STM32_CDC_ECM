
stm32f072_ecm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012860  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000a254  08012920  08012920  00022920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801cb74  0801cb74  00030114  2**0
                  CONTENTS
  4 .ARM          00000000  0801cb74  0801cb74  00030114  2**0
                  CONTENTS
  5 .preinit_array 00000000  0801cb74  0801cb74  00030114  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801cb74  0801cb74  0002cb74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801cb78  0801cb78  0002cb78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000114  20000000  0801cb7c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000038dc  20000114  0801cc90  00030114  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200039f0  0801cc90  000339f0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00030114  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c6b5  00000000  00000000  0003013c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006234  00000000  00000000  0005c7f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001438  00000000  00000000  00062a28  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001220  00000000  00000000  00063e60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001d9c0  00000000  00000000  00065080  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00018245  00000000  00000000  00082a40  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00083e07  00000000  00000000  0009ac85  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011ea8c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004644  00000000  00000000  0011eb08  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000114 	.word	0x20000114
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08012908 	.word	0x08012908

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000118 	.word	0x20000118
 8000104:	08012908 	.word	0x08012908

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <strlen>:
 800011c:	2300      	movs	r3, #0
 800011e:	5cc2      	ldrb	r2, [r0, r3]
 8000120:	3301      	adds	r3, #1
 8000122:	2a00      	cmp	r2, #0
 8000124:	d1fb      	bne.n	800011e <strlen+0x2>
 8000126:	1e58      	subs	r0, r3, #1
 8000128:	4770      	bx	lr
	...

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800041c:	f000 f924 	bl	8000668 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000420:	f000 f809 	bl	8000436 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000424:	f000 f85c 	bl	80004e0 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000428:	f010 f94a 	bl	80106c0 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  ecm_main_init();
 800042c:	f010 f890 	bl	8010550 <ecm_main_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ecm_main_loop();
 8000430:	f010 f8ca 	bl	80105c8 <ecm_main_loop>
 8000434:	e7fc      	b.n	8000430 <main+0x18>

08000436 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000436:	b590      	push	{r4, r7, lr}
 8000438:	b099      	sub	sp, #100	; 0x64
 800043a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800043c:	242c      	movs	r4, #44	; 0x2c
 800043e:	193b      	adds	r3, r7, r4
 8000440:	0018      	movs	r0, r3
 8000442:	2334      	movs	r3, #52	; 0x34
 8000444:	001a      	movs	r2, r3
 8000446:	2100      	movs	r1, #0
 8000448:	f011 fe0e 	bl	8012068 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800044c:	231c      	movs	r3, #28
 800044e:	18fb      	adds	r3, r7, r3
 8000450:	0018      	movs	r0, r3
 8000452:	2310      	movs	r3, #16
 8000454:	001a      	movs	r2, r3
 8000456:	2100      	movs	r1, #0
 8000458:	f011 fe06 	bl	8012068 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800045c:	003b      	movs	r3, r7
 800045e:	0018      	movs	r0, r3
 8000460:	231c      	movs	r3, #28
 8000462:	001a      	movs	r2, r3
 8000464:	2100      	movs	r1, #0
 8000466:	f011 fdff 	bl	8012068 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 800046a:	193b      	adds	r3, r7, r4
 800046c:	2220      	movs	r2, #32
 800046e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000470:	193b      	adds	r3, r7, r4
 8000472:	2201      	movs	r2, #1
 8000474:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000476:	193b      	adds	r3, r7, r4
 8000478:	2200      	movs	r2, #0
 800047a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800047c:	193b      	adds	r3, r7, r4
 800047e:	0018      	movs	r0, r3
 8000480:	f001 fbcc 	bl	8001c1c <HAL_RCC_OscConfig>
 8000484:	1e03      	subs	r3, r0, #0
 8000486:	d001      	beq.n	800048c <SystemClock_Config+0x56>
  {
    Error_Handler();
 8000488:	f000 f842 	bl	8000510 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800048c:	211c      	movs	r1, #28
 800048e:	187b      	adds	r3, r7, r1
 8000490:	2207      	movs	r2, #7
 8000492:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8000494:	187b      	adds	r3, r7, r1
 8000496:	2203      	movs	r2, #3
 8000498:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800049a:	187b      	adds	r3, r7, r1
 800049c:	2200      	movs	r2, #0
 800049e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004a0:	187b      	adds	r3, r7, r1
 80004a2:	2200      	movs	r2, #0
 80004a4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80004a6:	187b      	adds	r3, r7, r1
 80004a8:	2101      	movs	r1, #1
 80004aa:	0018      	movs	r0, r3
 80004ac:	f001 ff3c 	bl	8002328 <HAL_RCC_ClockConfig>
 80004b0:	1e03      	subs	r3, r0, #0
 80004b2:	d001      	beq.n	80004b8 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80004b4:	f000 f82c 	bl	8000510 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80004b8:	003b      	movs	r3, r7
 80004ba:	2280      	movs	r2, #128	; 0x80
 80004bc:	0292      	lsls	r2, r2, #10
 80004be:	601a      	str	r2, [r3, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80004c0:	003b      	movs	r3, r7
 80004c2:	2200      	movs	r2, #0
 80004c4:	619a      	str	r2, [r3, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004c6:	003b      	movs	r3, r7
 80004c8:	0018      	movs	r0, r3
 80004ca:	f002 f885 	bl	80025d8 <HAL_RCCEx_PeriphCLKConfig>
 80004ce:	1e03      	subs	r3, r0, #0
 80004d0:	d001      	beq.n	80004d6 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80004d2:	f000 f81d 	bl	8000510 <Error_Handler>
  }
}
 80004d6:	46c0      	nop			; (mov r8, r8)
 80004d8:	46bd      	mov	sp, r7
 80004da:	b019      	add	sp, #100	; 0x64
 80004dc:	bd90      	pop	{r4, r7, pc}
	...

080004e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004e6:	4b09      	ldr	r3, [pc, #36]	; (800050c <MX_GPIO_Init+0x2c>)
 80004e8:	695a      	ldr	r2, [r3, #20]
 80004ea:	4b08      	ldr	r3, [pc, #32]	; (800050c <MX_GPIO_Init+0x2c>)
 80004ec:	2180      	movs	r1, #128	; 0x80
 80004ee:	0289      	lsls	r1, r1, #10
 80004f0:	430a      	orrs	r2, r1
 80004f2:	615a      	str	r2, [r3, #20]
 80004f4:	4b05      	ldr	r3, [pc, #20]	; (800050c <MX_GPIO_Init+0x2c>)
 80004f6:	695a      	ldr	r2, [r3, #20]
 80004f8:	2380      	movs	r3, #128	; 0x80
 80004fa:	029b      	lsls	r3, r3, #10
 80004fc:	4013      	ands	r3, r2
 80004fe:	607b      	str	r3, [r7, #4]
 8000500:	687b      	ldr	r3, [r7, #4]

}
 8000502:	46c0      	nop			; (mov r8, r8)
 8000504:	46bd      	mov	sp, r7
 8000506:	b002      	add	sp, #8
 8000508:	bd80      	pop	{r7, pc}
 800050a:	46c0      	nop			; (mov r8, r8)
 800050c:	40021000 	.word	0x40021000

08000510 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000514:	46c0      	nop			; (mov r8, r8)
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}
	...

0800051c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000522:	4b0f      	ldr	r3, [pc, #60]	; (8000560 <HAL_MspInit+0x44>)
 8000524:	699a      	ldr	r2, [r3, #24]
 8000526:	4b0e      	ldr	r3, [pc, #56]	; (8000560 <HAL_MspInit+0x44>)
 8000528:	2101      	movs	r1, #1
 800052a:	430a      	orrs	r2, r1
 800052c:	619a      	str	r2, [r3, #24]
 800052e:	4b0c      	ldr	r3, [pc, #48]	; (8000560 <HAL_MspInit+0x44>)
 8000530:	699b      	ldr	r3, [r3, #24]
 8000532:	2201      	movs	r2, #1
 8000534:	4013      	ands	r3, r2
 8000536:	607b      	str	r3, [r7, #4]
 8000538:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800053a:	4b09      	ldr	r3, [pc, #36]	; (8000560 <HAL_MspInit+0x44>)
 800053c:	69da      	ldr	r2, [r3, #28]
 800053e:	4b08      	ldr	r3, [pc, #32]	; (8000560 <HAL_MspInit+0x44>)
 8000540:	2180      	movs	r1, #128	; 0x80
 8000542:	0549      	lsls	r1, r1, #21
 8000544:	430a      	orrs	r2, r1
 8000546:	61da      	str	r2, [r3, #28]
 8000548:	4b05      	ldr	r3, [pc, #20]	; (8000560 <HAL_MspInit+0x44>)
 800054a:	69da      	ldr	r2, [r3, #28]
 800054c:	2380      	movs	r3, #128	; 0x80
 800054e:	055b      	lsls	r3, r3, #21
 8000550:	4013      	ands	r3, r2
 8000552:	603b      	str	r3, [r7, #0]
 8000554:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000556:	46c0      	nop			; (mov r8, r8)
 8000558:	46bd      	mov	sp, r7
 800055a:	b002      	add	sp, #8
 800055c:	bd80      	pop	{r7, pc}
 800055e:	46c0      	nop			; (mov r8, r8)
 8000560:	40021000 	.word	0x40021000

08000564 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000568:	46c0      	nop			; (mov r8, r8)
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}

0800056e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800056e:	b580      	push	{r7, lr}
 8000570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000572:	e7fe      	b.n	8000572 <HardFault_Handler+0x4>

08000574 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000578:	46c0      	nop			; (mov r8, r8)
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}

0800057e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800057e:	b580      	push	{r7, lr}
 8000580:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000582:	46c0      	nop			; (mov r8, r8)
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}

08000588 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800058c:	f000 f8b4 	bl	80006f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000590:	46c0      	nop			; (mov r8, r8)
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
	...

08000598 <USB_IRQHandler>:

/**
  * @brief This function handles USB global interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800059c:	4b03      	ldr	r3, [pc, #12]	; (80005ac <USB_IRQHandler+0x14>)
 800059e:	0018      	movs	r0, r3
 80005a0:	f000 fc26 	bl	8000df0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 80005a4:	46c0      	nop			; (mov r8, r8)
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	46c0      	nop			; (mov r8, r8)
 80005ac:	20003778 	.word	0x20003778

080005b0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80005b8:	4b11      	ldr	r3, [pc, #68]	; (8000600 <_sbrk+0x50>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d102      	bne.n	80005c6 <_sbrk+0x16>
		heap_end = &end;
 80005c0:	4b0f      	ldr	r3, [pc, #60]	; (8000600 <_sbrk+0x50>)
 80005c2:	4a10      	ldr	r2, [pc, #64]	; (8000604 <_sbrk+0x54>)
 80005c4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80005c6:	4b0e      	ldr	r3, [pc, #56]	; (8000600 <_sbrk+0x50>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80005cc:	4b0c      	ldr	r3, [pc, #48]	; (8000600 <_sbrk+0x50>)
 80005ce:	681a      	ldr	r2, [r3, #0]
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	18d3      	adds	r3, r2, r3
 80005d4:	466a      	mov	r2, sp
 80005d6:	4293      	cmp	r3, r2
 80005d8:	d907      	bls.n	80005ea <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80005da:	f011 fd03 	bl	8011fe4 <__errno>
 80005de:	0003      	movs	r3, r0
 80005e0:	220c      	movs	r2, #12
 80005e2:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80005e4:	2301      	movs	r3, #1
 80005e6:	425b      	negs	r3, r3
 80005e8:	e006      	b.n	80005f8 <_sbrk+0x48>
	}

	heap_end += incr;
 80005ea:	4b05      	ldr	r3, [pc, #20]	; (8000600 <_sbrk+0x50>)
 80005ec:	681a      	ldr	r2, [r3, #0]
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	18d2      	adds	r2, r2, r3
 80005f2:	4b03      	ldr	r3, [pc, #12]	; (8000600 <_sbrk+0x50>)
 80005f4:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 80005f6:	68fb      	ldr	r3, [r7, #12]
}
 80005f8:	0018      	movs	r0, r3
 80005fa:	46bd      	mov	sp, r7
 80005fc:	b004      	add	sp, #16
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	20000130 	.word	0x20000130
 8000604:	200039f0 	.word	0x200039f0

08000608 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800060c:	46c0      	nop			; (mov r8, r8)
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
	...

08000614 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000614:	480d      	ldr	r0, [pc, #52]	; (800064c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000616:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000618:	480d      	ldr	r0, [pc, #52]	; (8000650 <LoopForever+0x6>)
  ldr r1, =_edata
 800061a:	490e      	ldr	r1, [pc, #56]	; (8000654 <LoopForever+0xa>)
  ldr r2, =_sidata
 800061c:	4a0e      	ldr	r2, [pc, #56]	; (8000658 <LoopForever+0xe>)
  movs r3, #0
 800061e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000620:	e002      	b.n	8000628 <LoopCopyDataInit>

08000622 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000622:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000624:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000626:	3304      	adds	r3, #4

08000628 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000628:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800062a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800062c:	d3f9      	bcc.n	8000622 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800062e:	4a0b      	ldr	r2, [pc, #44]	; (800065c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000630:	4c0b      	ldr	r4, [pc, #44]	; (8000660 <LoopForever+0x16>)
  movs r3, #0
 8000632:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000634:	e001      	b.n	800063a <LoopFillZerobss>

08000636 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000636:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000638:	3204      	adds	r2, #4

0800063a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800063a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800063c:	d3fb      	bcc.n	8000636 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800063e:	f7ff ffe3 	bl	8000608 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000642:	f011 fcd5 	bl	8011ff0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000646:	f7ff fee7 	bl	8000418 <main>

0800064a <LoopForever>:

LoopForever:
    b LoopForever
 800064a:	e7fe      	b.n	800064a <LoopForever>
  ldr   r0, =_estack
 800064c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000650:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000654:	20000114 	.word	0x20000114
  ldr r2, =_sidata
 8000658:	0801cb7c 	.word	0x0801cb7c
  ldr r2, =_sbss
 800065c:	20000114 	.word	0x20000114
  ldr r4, =_ebss
 8000660:	200039f0 	.word	0x200039f0

08000664 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000664:	e7fe      	b.n	8000664 <ADC1_COMP_IRQHandler>
	...

08000668 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800066c:	4b07      	ldr	r3, [pc, #28]	; (800068c <HAL_Init+0x24>)
 800066e:	681a      	ldr	r2, [r3, #0]
 8000670:	4b06      	ldr	r3, [pc, #24]	; (800068c <HAL_Init+0x24>)
 8000672:	2110      	movs	r1, #16
 8000674:	430a      	orrs	r2, r1
 8000676:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000678:	2000      	movs	r0, #0
 800067a:	f000 f809 	bl	8000690 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800067e:	f7ff ff4d 	bl	800051c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000682:	2300      	movs	r3, #0
}
 8000684:	0018      	movs	r0, r3
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	46c0      	nop			; (mov r8, r8)
 800068c:	40022000 	.word	0x40022000

08000690 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000690:	b590      	push	{r4, r7, lr}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000698:	4b14      	ldr	r3, [pc, #80]	; (80006ec <HAL_InitTick+0x5c>)
 800069a:	681c      	ldr	r4, [r3, #0]
 800069c:	4b14      	ldr	r3, [pc, #80]	; (80006f0 <HAL_InitTick+0x60>)
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	0019      	movs	r1, r3
 80006a2:	23fa      	movs	r3, #250	; 0xfa
 80006a4:	0098      	lsls	r0, r3, #2
 80006a6:	f7ff fd41 	bl	800012c <__udivsi3>
 80006aa:	0003      	movs	r3, r0
 80006ac:	0019      	movs	r1, r3
 80006ae:	0020      	movs	r0, r4
 80006b0:	f7ff fd3c 	bl	800012c <__udivsi3>
 80006b4:	0003      	movs	r3, r0
 80006b6:	0018      	movs	r0, r3
 80006b8:	f000 f90b 	bl	80008d2 <HAL_SYSTICK_Config>
 80006bc:	1e03      	subs	r3, r0, #0
 80006be:	d001      	beq.n	80006c4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80006c0:	2301      	movs	r3, #1
 80006c2:	e00f      	b.n	80006e4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	2b03      	cmp	r3, #3
 80006c8:	d80b      	bhi.n	80006e2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006ca:	6879      	ldr	r1, [r7, #4]
 80006cc:	2301      	movs	r3, #1
 80006ce:	425b      	negs	r3, r3
 80006d0:	2200      	movs	r2, #0
 80006d2:	0018      	movs	r0, r3
 80006d4:	f000 f8d8 	bl	8000888 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006d8:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <HAL_InitTick+0x64>)
 80006da:	687a      	ldr	r2, [r7, #4]
 80006dc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80006de:	2300      	movs	r3, #0
 80006e0:	e000      	b.n	80006e4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80006e2:	2301      	movs	r3, #1
}
 80006e4:	0018      	movs	r0, r3
 80006e6:	46bd      	mov	sp, r7
 80006e8:	b003      	add	sp, #12
 80006ea:	bd90      	pop	{r4, r7, pc}
 80006ec:	20000000 	.word	0x20000000
 80006f0:	20000008 	.word	0x20000008
 80006f4:	20000004 	.word	0x20000004

080006f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006fc:	4b05      	ldr	r3, [pc, #20]	; (8000714 <HAL_IncTick+0x1c>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	001a      	movs	r2, r3
 8000702:	4b05      	ldr	r3, [pc, #20]	; (8000718 <HAL_IncTick+0x20>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	18d2      	adds	r2, r2, r3
 8000708:	4b03      	ldr	r3, [pc, #12]	; (8000718 <HAL_IncTick+0x20>)
 800070a:	601a      	str	r2, [r3, #0]
}
 800070c:	46c0      	nop			; (mov r8, r8)
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	46c0      	nop			; (mov r8, r8)
 8000714:	20000008 	.word	0x20000008
 8000718:	20002b9c 	.word	0x20002b9c

0800071c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  return uwTick;
 8000720:	4b02      	ldr	r3, [pc, #8]	; (800072c <HAL_GetTick+0x10>)
 8000722:	681b      	ldr	r3, [r3, #0]
}
 8000724:	0018      	movs	r0, r3
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	46c0      	nop			; (mov r8, r8)
 800072c:	20002b9c 	.word	0x20002b9c

08000730 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
 8000736:	0002      	movs	r2, r0
 8000738:	1dfb      	adds	r3, r7, #7
 800073a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800073c:	1dfb      	adds	r3, r7, #7
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	2b7f      	cmp	r3, #127	; 0x7f
 8000742:	d809      	bhi.n	8000758 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000744:	1dfb      	adds	r3, r7, #7
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	001a      	movs	r2, r3
 800074a:	231f      	movs	r3, #31
 800074c:	401a      	ands	r2, r3
 800074e:	4b04      	ldr	r3, [pc, #16]	; (8000760 <__NVIC_EnableIRQ+0x30>)
 8000750:	2101      	movs	r1, #1
 8000752:	4091      	lsls	r1, r2
 8000754:	000a      	movs	r2, r1
 8000756:	601a      	str	r2, [r3, #0]
  }
}
 8000758:	46c0      	nop			; (mov r8, r8)
 800075a:	46bd      	mov	sp, r7
 800075c:	b002      	add	sp, #8
 800075e:	bd80      	pop	{r7, pc}
 8000760:	e000e100 	.word	0xe000e100

08000764 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000764:	b590      	push	{r4, r7, lr}
 8000766:	b083      	sub	sp, #12
 8000768:	af00      	add	r7, sp, #0
 800076a:	0002      	movs	r2, r0
 800076c:	6039      	str	r1, [r7, #0]
 800076e:	1dfb      	adds	r3, r7, #7
 8000770:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000772:	1dfb      	adds	r3, r7, #7
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	2b7f      	cmp	r3, #127	; 0x7f
 8000778:	d828      	bhi.n	80007cc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800077a:	4a2f      	ldr	r2, [pc, #188]	; (8000838 <__NVIC_SetPriority+0xd4>)
 800077c:	1dfb      	adds	r3, r7, #7
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	b25b      	sxtb	r3, r3
 8000782:	089b      	lsrs	r3, r3, #2
 8000784:	33c0      	adds	r3, #192	; 0xc0
 8000786:	009b      	lsls	r3, r3, #2
 8000788:	589b      	ldr	r3, [r3, r2]
 800078a:	1dfa      	adds	r2, r7, #7
 800078c:	7812      	ldrb	r2, [r2, #0]
 800078e:	0011      	movs	r1, r2
 8000790:	2203      	movs	r2, #3
 8000792:	400a      	ands	r2, r1
 8000794:	00d2      	lsls	r2, r2, #3
 8000796:	21ff      	movs	r1, #255	; 0xff
 8000798:	4091      	lsls	r1, r2
 800079a:	000a      	movs	r2, r1
 800079c:	43d2      	mvns	r2, r2
 800079e:	401a      	ands	r2, r3
 80007a0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80007a2:	683b      	ldr	r3, [r7, #0]
 80007a4:	019b      	lsls	r3, r3, #6
 80007a6:	22ff      	movs	r2, #255	; 0xff
 80007a8:	401a      	ands	r2, r3
 80007aa:	1dfb      	adds	r3, r7, #7
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	0018      	movs	r0, r3
 80007b0:	2303      	movs	r3, #3
 80007b2:	4003      	ands	r3, r0
 80007b4:	00db      	lsls	r3, r3, #3
 80007b6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007b8:	481f      	ldr	r0, [pc, #124]	; (8000838 <__NVIC_SetPriority+0xd4>)
 80007ba:	1dfb      	adds	r3, r7, #7
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	b25b      	sxtb	r3, r3
 80007c0:	089b      	lsrs	r3, r3, #2
 80007c2:	430a      	orrs	r2, r1
 80007c4:	33c0      	adds	r3, #192	; 0xc0
 80007c6:	009b      	lsls	r3, r3, #2
 80007c8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80007ca:	e031      	b.n	8000830 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007cc:	4a1b      	ldr	r2, [pc, #108]	; (800083c <__NVIC_SetPriority+0xd8>)
 80007ce:	1dfb      	adds	r3, r7, #7
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	0019      	movs	r1, r3
 80007d4:	230f      	movs	r3, #15
 80007d6:	400b      	ands	r3, r1
 80007d8:	3b08      	subs	r3, #8
 80007da:	089b      	lsrs	r3, r3, #2
 80007dc:	3306      	adds	r3, #6
 80007de:	009b      	lsls	r3, r3, #2
 80007e0:	18d3      	adds	r3, r2, r3
 80007e2:	3304      	adds	r3, #4
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	1dfa      	adds	r2, r7, #7
 80007e8:	7812      	ldrb	r2, [r2, #0]
 80007ea:	0011      	movs	r1, r2
 80007ec:	2203      	movs	r2, #3
 80007ee:	400a      	ands	r2, r1
 80007f0:	00d2      	lsls	r2, r2, #3
 80007f2:	21ff      	movs	r1, #255	; 0xff
 80007f4:	4091      	lsls	r1, r2
 80007f6:	000a      	movs	r2, r1
 80007f8:	43d2      	mvns	r2, r2
 80007fa:	401a      	ands	r2, r3
 80007fc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	019b      	lsls	r3, r3, #6
 8000802:	22ff      	movs	r2, #255	; 0xff
 8000804:	401a      	ands	r2, r3
 8000806:	1dfb      	adds	r3, r7, #7
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	0018      	movs	r0, r3
 800080c:	2303      	movs	r3, #3
 800080e:	4003      	ands	r3, r0
 8000810:	00db      	lsls	r3, r3, #3
 8000812:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000814:	4809      	ldr	r0, [pc, #36]	; (800083c <__NVIC_SetPriority+0xd8>)
 8000816:	1dfb      	adds	r3, r7, #7
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	001c      	movs	r4, r3
 800081c:	230f      	movs	r3, #15
 800081e:	4023      	ands	r3, r4
 8000820:	3b08      	subs	r3, #8
 8000822:	089b      	lsrs	r3, r3, #2
 8000824:	430a      	orrs	r2, r1
 8000826:	3306      	adds	r3, #6
 8000828:	009b      	lsls	r3, r3, #2
 800082a:	18c3      	adds	r3, r0, r3
 800082c:	3304      	adds	r3, #4
 800082e:	601a      	str	r2, [r3, #0]
}
 8000830:	46c0      	nop			; (mov r8, r8)
 8000832:	46bd      	mov	sp, r7
 8000834:	b003      	add	sp, #12
 8000836:	bd90      	pop	{r4, r7, pc}
 8000838:	e000e100 	.word	0xe000e100
 800083c:	e000ed00 	.word	0xe000ed00

08000840 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	3b01      	subs	r3, #1
 800084c:	4a0c      	ldr	r2, [pc, #48]	; (8000880 <SysTick_Config+0x40>)
 800084e:	4293      	cmp	r3, r2
 8000850:	d901      	bls.n	8000856 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000852:	2301      	movs	r3, #1
 8000854:	e010      	b.n	8000878 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000856:	4b0b      	ldr	r3, [pc, #44]	; (8000884 <SysTick_Config+0x44>)
 8000858:	687a      	ldr	r2, [r7, #4]
 800085a:	3a01      	subs	r2, #1
 800085c:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800085e:	2301      	movs	r3, #1
 8000860:	425b      	negs	r3, r3
 8000862:	2103      	movs	r1, #3
 8000864:	0018      	movs	r0, r3
 8000866:	f7ff ff7d 	bl	8000764 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800086a:	4b06      	ldr	r3, [pc, #24]	; (8000884 <SysTick_Config+0x44>)
 800086c:	2200      	movs	r2, #0
 800086e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000870:	4b04      	ldr	r3, [pc, #16]	; (8000884 <SysTick_Config+0x44>)
 8000872:	2207      	movs	r2, #7
 8000874:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000876:	2300      	movs	r3, #0
}
 8000878:	0018      	movs	r0, r3
 800087a:	46bd      	mov	sp, r7
 800087c:	b002      	add	sp, #8
 800087e:	bd80      	pop	{r7, pc}
 8000880:	00ffffff 	.word	0x00ffffff
 8000884:	e000e010 	.word	0xe000e010

08000888 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000888:	b580      	push	{r7, lr}
 800088a:	b084      	sub	sp, #16
 800088c:	af00      	add	r7, sp, #0
 800088e:	60b9      	str	r1, [r7, #8]
 8000890:	607a      	str	r2, [r7, #4]
 8000892:	210f      	movs	r1, #15
 8000894:	187b      	adds	r3, r7, r1
 8000896:	1c02      	adds	r2, r0, #0
 8000898:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800089a:	68ba      	ldr	r2, [r7, #8]
 800089c:	187b      	adds	r3, r7, r1
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	b25b      	sxtb	r3, r3
 80008a2:	0011      	movs	r1, r2
 80008a4:	0018      	movs	r0, r3
 80008a6:	f7ff ff5d 	bl	8000764 <__NVIC_SetPriority>
}
 80008aa:	46c0      	nop			; (mov r8, r8)
 80008ac:	46bd      	mov	sp, r7
 80008ae:	b004      	add	sp, #16
 80008b0:	bd80      	pop	{r7, pc}

080008b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008b2:	b580      	push	{r7, lr}
 80008b4:	b082      	sub	sp, #8
 80008b6:	af00      	add	r7, sp, #0
 80008b8:	0002      	movs	r2, r0
 80008ba:	1dfb      	adds	r3, r7, #7
 80008bc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008be:	1dfb      	adds	r3, r7, #7
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	b25b      	sxtb	r3, r3
 80008c4:	0018      	movs	r0, r3
 80008c6:	f7ff ff33 	bl	8000730 <__NVIC_EnableIRQ>
}
 80008ca:	46c0      	nop			; (mov r8, r8)
 80008cc:	46bd      	mov	sp, r7
 80008ce:	b002      	add	sp, #8
 80008d0:	bd80      	pop	{r7, pc}

080008d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008d2:	b580      	push	{r7, lr}
 80008d4:	b082      	sub	sp, #8
 80008d6:	af00      	add	r7, sp, #0
 80008d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	0018      	movs	r0, r3
 80008de:	f7ff ffaf 	bl	8000840 <SysTick_Config>
 80008e2:	0003      	movs	r3, r0
}
 80008e4:	0018      	movs	r0, r3
 80008e6:	46bd      	mov	sp, r7
 80008e8:	b002      	add	sp, #8
 80008ea:	bd80      	pop	{r7, pc}

080008ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b086      	sub	sp, #24
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
 80008f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008f6:	2300      	movs	r3, #0
 80008f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008fa:	e155      	b.n	8000ba8 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	2101      	movs	r1, #1
 8000902:	697a      	ldr	r2, [r7, #20]
 8000904:	4091      	lsls	r1, r2
 8000906:	000a      	movs	r2, r1
 8000908:	4013      	ands	r3, r2
 800090a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	2b00      	cmp	r3, #0
 8000910:	d100      	bne.n	8000914 <HAL_GPIO_Init+0x28>
 8000912:	e146      	b.n	8000ba2 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	685b      	ldr	r3, [r3, #4]
 8000918:	2b02      	cmp	r3, #2
 800091a:	d003      	beq.n	8000924 <HAL_GPIO_Init+0x38>
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	685b      	ldr	r3, [r3, #4]
 8000920:	2b12      	cmp	r3, #18
 8000922:	d123      	bne.n	800096c <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000924:	697b      	ldr	r3, [r7, #20]
 8000926:	08da      	lsrs	r2, r3, #3
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	3208      	adds	r2, #8
 800092c:	0092      	lsls	r2, r2, #2
 800092e:	58d3      	ldr	r3, [r2, r3]
 8000930:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000932:	697b      	ldr	r3, [r7, #20]
 8000934:	2207      	movs	r2, #7
 8000936:	4013      	ands	r3, r2
 8000938:	009b      	lsls	r3, r3, #2
 800093a:	220f      	movs	r2, #15
 800093c:	409a      	lsls	r2, r3
 800093e:	0013      	movs	r3, r2
 8000940:	43da      	mvns	r2, r3
 8000942:	693b      	ldr	r3, [r7, #16]
 8000944:	4013      	ands	r3, r2
 8000946:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	691a      	ldr	r2, [r3, #16]
 800094c:	697b      	ldr	r3, [r7, #20]
 800094e:	2107      	movs	r1, #7
 8000950:	400b      	ands	r3, r1
 8000952:	009b      	lsls	r3, r3, #2
 8000954:	409a      	lsls	r2, r3
 8000956:	0013      	movs	r3, r2
 8000958:	693a      	ldr	r2, [r7, #16]
 800095a:	4313      	orrs	r3, r2
 800095c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800095e:	697b      	ldr	r3, [r7, #20]
 8000960:	08da      	lsrs	r2, r3, #3
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	3208      	adds	r2, #8
 8000966:	0092      	lsls	r2, r2, #2
 8000968:	6939      	ldr	r1, [r7, #16]
 800096a:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000972:	697b      	ldr	r3, [r7, #20]
 8000974:	005b      	lsls	r3, r3, #1
 8000976:	2203      	movs	r2, #3
 8000978:	409a      	lsls	r2, r3
 800097a:	0013      	movs	r3, r2
 800097c:	43da      	mvns	r2, r3
 800097e:	693b      	ldr	r3, [r7, #16]
 8000980:	4013      	ands	r3, r2
 8000982:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	685b      	ldr	r3, [r3, #4]
 8000988:	2203      	movs	r2, #3
 800098a:	401a      	ands	r2, r3
 800098c:	697b      	ldr	r3, [r7, #20]
 800098e:	005b      	lsls	r3, r3, #1
 8000990:	409a      	lsls	r2, r3
 8000992:	0013      	movs	r3, r2
 8000994:	693a      	ldr	r2, [r7, #16]
 8000996:	4313      	orrs	r3, r2
 8000998:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	693a      	ldr	r2, [r7, #16]
 800099e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	685b      	ldr	r3, [r3, #4]
 80009a4:	2b01      	cmp	r3, #1
 80009a6:	d00b      	beq.n	80009c0 <HAL_GPIO_Init+0xd4>
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	685b      	ldr	r3, [r3, #4]
 80009ac:	2b02      	cmp	r3, #2
 80009ae:	d007      	beq.n	80009c0 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009b4:	2b11      	cmp	r3, #17
 80009b6:	d003      	beq.n	80009c0 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	685b      	ldr	r3, [r3, #4]
 80009bc:	2b12      	cmp	r3, #18
 80009be:	d130      	bne.n	8000a22 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	689b      	ldr	r3, [r3, #8]
 80009c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80009c6:	697b      	ldr	r3, [r7, #20]
 80009c8:	005b      	lsls	r3, r3, #1
 80009ca:	2203      	movs	r2, #3
 80009cc:	409a      	lsls	r2, r3
 80009ce:	0013      	movs	r3, r2
 80009d0:	43da      	mvns	r2, r3
 80009d2:	693b      	ldr	r3, [r7, #16]
 80009d4:	4013      	ands	r3, r2
 80009d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	68da      	ldr	r2, [r3, #12]
 80009dc:	697b      	ldr	r3, [r7, #20]
 80009de:	005b      	lsls	r3, r3, #1
 80009e0:	409a      	lsls	r2, r3
 80009e2:	0013      	movs	r3, r2
 80009e4:	693a      	ldr	r2, [r7, #16]
 80009e6:	4313      	orrs	r3, r2
 80009e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	693a      	ldr	r2, [r7, #16]
 80009ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	685b      	ldr	r3, [r3, #4]
 80009f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80009f6:	2201      	movs	r2, #1
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	409a      	lsls	r2, r3
 80009fc:	0013      	movs	r3, r2
 80009fe:	43da      	mvns	r2, r3
 8000a00:	693b      	ldr	r3, [r7, #16]
 8000a02:	4013      	ands	r3, r2
 8000a04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	685b      	ldr	r3, [r3, #4]
 8000a0a:	091b      	lsrs	r3, r3, #4
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	401a      	ands	r2, r3
 8000a10:	697b      	ldr	r3, [r7, #20]
 8000a12:	409a      	lsls	r2, r3
 8000a14:	0013      	movs	r3, r2
 8000a16:	693a      	ldr	r2, [r7, #16]
 8000a18:	4313      	orrs	r3, r2
 8000a1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	693a      	ldr	r2, [r7, #16]
 8000a20:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	68db      	ldr	r3, [r3, #12]
 8000a26:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	005b      	lsls	r3, r3, #1
 8000a2c:	2203      	movs	r2, #3
 8000a2e:	409a      	lsls	r2, r3
 8000a30:	0013      	movs	r3, r2
 8000a32:	43da      	mvns	r2, r3
 8000a34:	693b      	ldr	r3, [r7, #16]
 8000a36:	4013      	ands	r3, r2
 8000a38:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	689a      	ldr	r2, [r3, #8]
 8000a3e:	697b      	ldr	r3, [r7, #20]
 8000a40:	005b      	lsls	r3, r3, #1
 8000a42:	409a      	lsls	r2, r3
 8000a44:	0013      	movs	r3, r2
 8000a46:	693a      	ldr	r2, [r7, #16]
 8000a48:	4313      	orrs	r3, r2
 8000a4a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	693a      	ldr	r2, [r7, #16]
 8000a50:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	685a      	ldr	r2, [r3, #4]
 8000a56:	2380      	movs	r3, #128	; 0x80
 8000a58:	055b      	lsls	r3, r3, #21
 8000a5a:	4013      	ands	r3, r2
 8000a5c:	d100      	bne.n	8000a60 <HAL_GPIO_Init+0x174>
 8000a5e:	e0a0      	b.n	8000ba2 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a60:	4b57      	ldr	r3, [pc, #348]	; (8000bc0 <HAL_GPIO_Init+0x2d4>)
 8000a62:	699a      	ldr	r2, [r3, #24]
 8000a64:	4b56      	ldr	r3, [pc, #344]	; (8000bc0 <HAL_GPIO_Init+0x2d4>)
 8000a66:	2101      	movs	r1, #1
 8000a68:	430a      	orrs	r2, r1
 8000a6a:	619a      	str	r2, [r3, #24]
 8000a6c:	4b54      	ldr	r3, [pc, #336]	; (8000bc0 <HAL_GPIO_Init+0x2d4>)
 8000a6e:	699b      	ldr	r3, [r3, #24]
 8000a70:	2201      	movs	r2, #1
 8000a72:	4013      	ands	r3, r2
 8000a74:	60bb      	str	r3, [r7, #8]
 8000a76:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000a78:	4a52      	ldr	r2, [pc, #328]	; (8000bc4 <HAL_GPIO_Init+0x2d8>)
 8000a7a:	697b      	ldr	r3, [r7, #20]
 8000a7c:	089b      	lsrs	r3, r3, #2
 8000a7e:	3302      	adds	r3, #2
 8000a80:	009b      	lsls	r3, r3, #2
 8000a82:	589b      	ldr	r3, [r3, r2]
 8000a84:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a86:	697b      	ldr	r3, [r7, #20]
 8000a88:	2203      	movs	r2, #3
 8000a8a:	4013      	ands	r3, r2
 8000a8c:	009b      	lsls	r3, r3, #2
 8000a8e:	220f      	movs	r2, #15
 8000a90:	409a      	lsls	r2, r3
 8000a92:	0013      	movs	r3, r2
 8000a94:	43da      	mvns	r2, r3
 8000a96:	693b      	ldr	r3, [r7, #16]
 8000a98:	4013      	ands	r3, r2
 8000a9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a9c:	687a      	ldr	r2, [r7, #4]
 8000a9e:	2390      	movs	r3, #144	; 0x90
 8000aa0:	05db      	lsls	r3, r3, #23
 8000aa2:	429a      	cmp	r2, r3
 8000aa4:	d019      	beq.n	8000ada <HAL_GPIO_Init+0x1ee>
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	4a47      	ldr	r2, [pc, #284]	; (8000bc8 <HAL_GPIO_Init+0x2dc>)
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d013      	beq.n	8000ad6 <HAL_GPIO_Init+0x1ea>
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	4a46      	ldr	r2, [pc, #280]	; (8000bcc <HAL_GPIO_Init+0x2e0>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d00d      	beq.n	8000ad2 <HAL_GPIO_Init+0x1e6>
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	4a45      	ldr	r2, [pc, #276]	; (8000bd0 <HAL_GPIO_Init+0x2e4>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d007      	beq.n	8000ace <HAL_GPIO_Init+0x1e2>
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	4a44      	ldr	r2, [pc, #272]	; (8000bd4 <HAL_GPIO_Init+0x2e8>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d101      	bne.n	8000aca <HAL_GPIO_Init+0x1de>
 8000ac6:	2304      	movs	r3, #4
 8000ac8:	e008      	b.n	8000adc <HAL_GPIO_Init+0x1f0>
 8000aca:	2305      	movs	r3, #5
 8000acc:	e006      	b.n	8000adc <HAL_GPIO_Init+0x1f0>
 8000ace:	2303      	movs	r3, #3
 8000ad0:	e004      	b.n	8000adc <HAL_GPIO_Init+0x1f0>
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	e002      	b.n	8000adc <HAL_GPIO_Init+0x1f0>
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	e000      	b.n	8000adc <HAL_GPIO_Init+0x1f0>
 8000ada:	2300      	movs	r3, #0
 8000adc:	697a      	ldr	r2, [r7, #20]
 8000ade:	2103      	movs	r1, #3
 8000ae0:	400a      	ands	r2, r1
 8000ae2:	0092      	lsls	r2, r2, #2
 8000ae4:	4093      	lsls	r3, r2
 8000ae6:	693a      	ldr	r2, [r7, #16]
 8000ae8:	4313      	orrs	r3, r2
 8000aea:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000aec:	4935      	ldr	r1, [pc, #212]	; (8000bc4 <HAL_GPIO_Init+0x2d8>)
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	089b      	lsrs	r3, r3, #2
 8000af2:	3302      	adds	r3, #2
 8000af4:	009b      	lsls	r3, r3, #2
 8000af6:	693a      	ldr	r2, [r7, #16]
 8000af8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000afa:	4b37      	ldr	r3, [pc, #220]	; (8000bd8 <HAL_GPIO_Init+0x2ec>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	43da      	mvns	r2, r3
 8000b04:	693b      	ldr	r3, [r7, #16]
 8000b06:	4013      	ands	r3, r2
 8000b08:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	685a      	ldr	r2, [r3, #4]
 8000b0e:	2380      	movs	r3, #128	; 0x80
 8000b10:	025b      	lsls	r3, r3, #9
 8000b12:	4013      	ands	r3, r2
 8000b14:	d003      	beq.n	8000b1e <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8000b16:	693a      	ldr	r2, [r7, #16]
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	4313      	orrs	r3, r2
 8000b1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000b1e:	4b2e      	ldr	r3, [pc, #184]	; (8000bd8 <HAL_GPIO_Init+0x2ec>)
 8000b20:	693a      	ldr	r2, [r7, #16]
 8000b22:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000b24:	4b2c      	ldr	r3, [pc, #176]	; (8000bd8 <HAL_GPIO_Init+0x2ec>)
 8000b26:	685b      	ldr	r3, [r3, #4]
 8000b28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	43da      	mvns	r2, r3
 8000b2e:	693b      	ldr	r3, [r7, #16]
 8000b30:	4013      	ands	r3, r2
 8000b32:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	685a      	ldr	r2, [r3, #4]
 8000b38:	2380      	movs	r3, #128	; 0x80
 8000b3a:	029b      	lsls	r3, r3, #10
 8000b3c:	4013      	ands	r3, r2
 8000b3e:	d003      	beq.n	8000b48 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8000b40:	693a      	ldr	r2, [r7, #16]
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	4313      	orrs	r3, r2
 8000b46:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000b48:	4b23      	ldr	r3, [pc, #140]	; (8000bd8 <HAL_GPIO_Init+0x2ec>)
 8000b4a:	693a      	ldr	r2, [r7, #16]
 8000b4c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b4e:	4b22      	ldr	r3, [pc, #136]	; (8000bd8 <HAL_GPIO_Init+0x2ec>)
 8000b50:	689b      	ldr	r3, [r3, #8]
 8000b52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	43da      	mvns	r2, r3
 8000b58:	693b      	ldr	r3, [r7, #16]
 8000b5a:	4013      	ands	r3, r2
 8000b5c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	685a      	ldr	r2, [r3, #4]
 8000b62:	2380      	movs	r3, #128	; 0x80
 8000b64:	035b      	lsls	r3, r3, #13
 8000b66:	4013      	ands	r3, r2
 8000b68:	d003      	beq.n	8000b72 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000b6a:	693a      	ldr	r2, [r7, #16]
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	4313      	orrs	r3, r2
 8000b70:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000b72:	4b19      	ldr	r3, [pc, #100]	; (8000bd8 <HAL_GPIO_Init+0x2ec>)
 8000b74:	693a      	ldr	r2, [r7, #16]
 8000b76:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000b78:	4b17      	ldr	r3, [pc, #92]	; (8000bd8 <HAL_GPIO_Init+0x2ec>)
 8000b7a:	68db      	ldr	r3, [r3, #12]
 8000b7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	43da      	mvns	r2, r3
 8000b82:	693b      	ldr	r3, [r7, #16]
 8000b84:	4013      	ands	r3, r2
 8000b86:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	685a      	ldr	r2, [r3, #4]
 8000b8c:	2380      	movs	r3, #128	; 0x80
 8000b8e:	039b      	lsls	r3, r3, #14
 8000b90:	4013      	ands	r3, r2
 8000b92:	d003      	beq.n	8000b9c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000b94:	693a      	ldr	r2, [r7, #16]
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000b9c:	4b0e      	ldr	r3, [pc, #56]	; (8000bd8 <HAL_GPIO_Init+0x2ec>)
 8000b9e:	693a      	ldr	r2, [r7, #16]
 8000ba0:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	681a      	ldr	r2, [r3, #0]
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	40da      	lsrs	r2, r3
 8000bb0:	1e13      	subs	r3, r2, #0
 8000bb2:	d000      	beq.n	8000bb6 <HAL_GPIO_Init+0x2ca>
 8000bb4:	e6a2      	b.n	80008fc <HAL_GPIO_Init+0x10>
  } 
}
 8000bb6:	46c0      	nop			; (mov r8, r8)
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	b006      	add	sp, #24
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	46c0      	nop			; (mov r8, r8)
 8000bc0:	40021000 	.word	0x40021000
 8000bc4:	40010000 	.word	0x40010000
 8000bc8:	48000400 	.word	0x48000400
 8000bcc:	48000800 	.word	0x48000800
 8000bd0:	48000c00 	.word	0x48000c00
 8000bd4:	48001000 	.word	0x48001000
 8000bd8:	40010400 	.word	0x40010400

08000bdc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000bdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bde:	b08b      	sub	sp, #44	; 0x2c
 8000be0:	af06      	add	r7, sp, #24
 8000be2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d101      	bne.n	8000bee <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000bea:	2301      	movs	r3, #1
 8000bec:	e0d4      	b.n	8000d98 <HAL_PCD_Init+0x1bc>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	4a6b      	ldr	r2, [pc, #428]	; (8000da0 <HAL_PCD_Init+0x1c4>)
 8000bf2:	5c9b      	ldrb	r3, [r3, r2]
 8000bf4:	b2db      	uxtb	r3, r3
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d108      	bne.n	8000c0c <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000bfa:	687a      	ldr	r2, [r7, #4]
 8000bfc:	238a      	movs	r3, #138	; 0x8a
 8000bfe:	009b      	lsls	r3, r3, #2
 8000c00:	2100      	movs	r1, #0
 8000c02:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	0018      	movs	r0, r3
 8000c08:	f00f fd8a 	bl	8010720 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	4a64      	ldr	r2, [pc, #400]	; (8000da0 <HAL_PCD_Init+0x1c4>)
 8000c10:	2103      	movs	r1, #3
 8000c12:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	0018      	movs	r0, r3
 8000c1a:	f001 fdf7 	bl	800280c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c1e:	230f      	movs	r3, #15
 8000c20:	18fb      	adds	r3, r7, r3
 8000c22:	2200      	movs	r2, #0
 8000c24:	701a      	strb	r2, [r3, #0]
 8000c26:	e043      	b.n	8000cb0 <HAL_PCD_Init+0xd4>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000c28:	200f      	movs	r0, #15
 8000c2a:	183b      	adds	r3, r7, r0
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	687a      	ldr	r2, [r7, #4]
 8000c30:	2129      	movs	r1, #41	; 0x29
 8000c32:	015b      	lsls	r3, r3, #5
 8000c34:	18d3      	adds	r3, r2, r3
 8000c36:	185b      	adds	r3, r3, r1
 8000c38:	2201      	movs	r2, #1
 8000c3a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000c3c:	183b      	adds	r3, r7, r0
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	687a      	ldr	r2, [r7, #4]
 8000c42:	2128      	movs	r1, #40	; 0x28
 8000c44:	015b      	lsls	r3, r3, #5
 8000c46:	18d3      	adds	r3, r2, r3
 8000c48:	185b      	adds	r3, r3, r1
 8000c4a:	183a      	adds	r2, r7, r0
 8000c4c:	7812      	ldrb	r2, [r2, #0]
 8000c4e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000c50:	183b      	adds	r3, r7, r0
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	183a      	adds	r2, r7, r0
 8000c56:	7812      	ldrb	r2, [r2, #0]
 8000c58:	b291      	uxth	r1, r2
 8000c5a:	687a      	ldr	r2, [r7, #4]
 8000c5c:	015b      	lsls	r3, r3, #5
 8000c5e:	18d3      	adds	r3, r2, r3
 8000c60:	3336      	adds	r3, #54	; 0x36
 8000c62:	1c0a      	adds	r2, r1, #0
 8000c64:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000c66:	183b      	adds	r3, r7, r0
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	687a      	ldr	r2, [r7, #4]
 8000c6c:	212b      	movs	r1, #43	; 0x2b
 8000c6e:	015b      	lsls	r3, r3, #5
 8000c70:	18d3      	adds	r3, r2, r3
 8000c72:	185b      	adds	r3, r3, r1
 8000c74:	2200      	movs	r2, #0
 8000c76:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000c78:	183b      	adds	r3, r7, r0
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	687a      	ldr	r2, [r7, #4]
 8000c7e:	015b      	lsls	r3, r3, #5
 8000c80:	18d3      	adds	r3, r2, r3
 8000c82:	3338      	adds	r3, #56	; 0x38
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000c88:	183b      	adds	r3, r7, r0
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	687a      	ldr	r2, [r7, #4]
 8000c8e:	015b      	lsls	r3, r3, #5
 8000c90:	18d3      	adds	r3, r2, r3
 8000c92:	333c      	adds	r3, #60	; 0x3c
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000c98:	183b      	adds	r3, r7, r0
 8000c9a:	781a      	ldrb	r2, [r3, #0]
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	3202      	adds	r2, #2
 8000ca0:	0152      	lsls	r2, r2, #5
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	50d1      	str	r1, [r2, r3]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ca6:	183b      	adds	r3, r7, r0
 8000ca8:	781a      	ldrb	r2, [r3, #0]
 8000caa:	183b      	adds	r3, r7, r0
 8000cac:	3201      	adds	r2, #1
 8000cae:	701a      	strb	r2, [r3, #0]
 8000cb0:	230f      	movs	r3, #15
 8000cb2:	18fb      	adds	r3, r7, r3
 8000cb4:	781a      	ldrb	r2, [r3, #0]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	429a      	cmp	r2, r3
 8000cbc:	d3b4      	bcc.n	8000c28 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000cbe:	230f      	movs	r3, #15
 8000cc0:	18fb      	adds	r3, r7, r3
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	701a      	strb	r2, [r3, #0]
 8000cc6:	e03f      	b.n	8000d48 <HAL_PCD_Init+0x16c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000cc8:	200f      	movs	r0, #15
 8000cca:	183b      	adds	r3, r7, r0
 8000ccc:	781a      	ldrb	r2, [r3, #0]
 8000cce:	6879      	ldr	r1, [r7, #4]
 8000cd0:	232a      	movs	r3, #42	; 0x2a
 8000cd2:	33ff      	adds	r3, #255	; 0xff
 8000cd4:	0152      	lsls	r2, r2, #5
 8000cd6:	188a      	adds	r2, r1, r2
 8000cd8:	18d3      	adds	r3, r2, r3
 8000cda:	2200      	movs	r2, #0
 8000cdc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000cde:	183b      	adds	r3, r7, r0
 8000ce0:	781a      	ldrb	r2, [r3, #0]
 8000ce2:	6879      	ldr	r1, [r7, #4]
 8000ce4:	2394      	movs	r3, #148	; 0x94
 8000ce6:	005b      	lsls	r3, r3, #1
 8000ce8:	0152      	lsls	r2, r2, #5
 8000cea:	188a      	adds	r2, r1, r2
 8000cec:	18d3      	adds	r3, r2, r3
 8000cee:	183a      	adds	r2, r7, r0
 8000cf0:	7812      	ldrb	r2, [r2, #0]
 8000cf2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000cf4:	183b      	adds	r3, r7, r0
 8000cf6:	781a      	ldrb	r2, [r3, #0]
 8000cf8:	6879      	ldr	r1, [r7, #4]
 8000cfa:	232c      	movs	r3, #44	; 0x2c
 8000cfc:	33ff      	adds	r3, #255	; 0xff
 8000cfe:	0152      	lsls	r2, r2, #5
 8000d00:	188a      	adds	r2, r1, r2
 8000d02:	18d3      	adds	r3, r2, r3
 8000d04:	2200      	movs	r2, #0
 8000d06:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000d08:	183b      	adds	r3, r7, r0
 8000d0a:	781a      	ldrb	r2, [r3, #0]
 8000d0c:	6879      	ldr	r1, [r7, #4]
 8000d0e:	239c      	movs	r3, #156	; 0x9c
 8000d10:	005b      	lsls	r3, r3, #1
 8000d12:	0152      	lsls	r2, r2, #5
 8000d14:	188a      	adds	r2, r1, r2
 8000d16:	18d3      	adds	r3, r2, r3
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000d1c:	183b      	adds	r3, r7, r0
 8000d1e:	781a      	ldrb	r2, [r3, #0]
 8000d20:	6879      	ldr	r1, [r7, #4]
 8000d22:	239e      	movs	r3, #158	; 0x9e
 8000d24:	005b      	lsls	r3, r3, #1
 8000d26:	0152      	lsls	r2, r2, #5
 8000d28:	188a      	adds	r2, r1, r2
 8000d2a:	18d3      	adds	r3, r2, r3
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000d30:	183b      	adds	r3, r7, r0
 8000d32:	781a      	ldrb	r2, [r3, #0]
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	320a      	adds	r2, #10
 8000d38:	0152      	lsls	r2, r2, #5
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	50d1      	str	r1, [r2, r3]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d3e:	183b      	adds	r3, r7, r0
 8000d40:	781a      	ldrb	r2, [r3, #0]
 8000d42:	183b      	adds	r3, r7, r0
 8000d44:	3201      	adds	r2, #1
 8000d46:	701a      	strb	r2, [r3, #0]
 8000d48:	230f      	movs	r3, #15
 8000d4a:	18fb      	adds	r3, r7, r3
 8000d4c:	781a      	ldrb	r2, [r3, #0]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	429a      	cmp	r2, r3
 8000d54:	d3b8      	bcc.n	8000cc8 <HAL_PCD_Init+0xec>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	6818      	ldr	r0, [r3, #0]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	466a      	mov	r2, sp
 8000d5e:	0011      	movs	r1, r2
 8000d60:	001a      	movs	r2, r3
 8000d62:	3210      	adds	r2, #16
 8000d64:	ca70      	ldmia	r2!, {r4, r5, r6}
 8000d66:	c170      	stmia	r1!, {r4, r5, r6}
 8000d68:	ca30      	ldmia	r2!, {r4, r5}
 8000d6a:	c130      	stmia	r1!, {r4, r5}
 8000d6c:	6859      	ldr	r1, [r3, #4]
 8000d6e:	689a      	ldr	r2, [r3, #8]
 8000d70:	68db      	ldr	r3, [r3, #12]
 8000d72:	f001 fd6b 	bl	800284c <USB_DevInit>

  hpcd->USB_Address = 0U;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	2224      	movs	r2, #36	; 0x24
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4a07      	ldr	r2, [pc, #28]	; (8000da0 <HAL_PCD_Init+0x1c4>)
 8000d82:	2101      	movs	r1, #1
 8000d84:	5499      	strb	r1, [r3, r2]
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	69db      	ldr	r3, [r3, #28]
 8000d8a:	2b01      	cmp	r3, #1
 8000d8c:	d103      	bne.n	8000d96 <HAL_PCD_Init+0x1ba>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	0018      	movs	r0, r3
 8000d92:	f000 ff0d 	bl	8001bb0 <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 8000d96:	2300      	movs	r3, #0
}
 8000d98:	0018      	movs	r0, r3
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	b005      	add	sp, #20
 8000d9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000da0:	00000229 	.word	0x00000229

08000da4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000dac:	687a      	ldr	r2, [r7, #4]
 8000dae:	238a      	movs	r3, #138	; 0x8a
 8000db0:	009b      	lsls	r3, r3, #2
 8000db2:	5cd3      	ldrb	r3, [r2, r3]
 8000db4:	2b01      	cmp	r3, #1
 8000db6:	d101      	bne.n	8000dbc <HAL_PCD_Start+0x18>
 8000db8:	2302      	movs	r3, #2
 8000dba:	e014      	b.n	8000de6 <HAL_PCD_Start+0x42>
 8000dbc:	687a      	ldr	r2, [r7, #4]
 8000dbe:	238a      	movs	r3, #138	; 0x8a
 8000dc0:	009b      	lsls	r3, r3, #2
 8000dc2:	2101      	movs	r1, #1
 8000dc4:	54d1      	strb	r1, [r2, r3]
  (void)USB_DevConnect(hpcd->Instance);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	0018      	movs	r0, r3
 8000dcc:	f002 fd96 	bl	80038fc <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	0018      	movs	r0, r3
 8000dd6:	f001 fcff 	bl	80027d8 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8000dda:	687a      	ldr	r2, [r7, #4]
 8000ddc:	238a      	movs	r3, #138	; 0x8a
 8000dde:	009b      	lsls	r3, r3, #2
 8000de0:	2100      	movs	r1, #0
 8000de2:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8000de4:	2300      	movs	r3, #0
}
 8000de6:	0018      	movs	r0, r3
 8000de8:	46bd      	mov	sp, r7
 8000dea:	b002      	add	sp, #8
 8000dec:	bd80      	pop	{r7, pc}
	...

08000df0 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	0018      	movs	r0, r3
 8000dfe:	f002 fd93 	bl	8003928 <USB_ReadInterrupts>
 8000e02:	0002      	movs	r2, r0
 8000e04:	2380      	movs	r3, #128	; 0x80
 8000e06:	021b      	lsls	r3, r3, #8
 8000e08:	401a      	ands	r2, r3
 8000e0a:	2380      	movs	r3, #128	; 0x80
 8000e0c:	021b      	lsls	r3, r3, #8
 8000e0e:	429a      	cmp	r2, r3
 8000e10:	d103      	bne.n	8000e1a <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	0018      	movs	r0, r3
 8000e16:	f000 fbaf 	bl	8001578 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	0018      	movs	r0, r3
 8000e20:	f002 fd82 	bl	8003928 <USB_ReadInterrupts>
 8000e24:	0002      	movs	r2, r0
 8000e26:	2380      	movs	r3, #128	; 0x80
 8000e28:	00db      	lsls	r3, r3, #3
 8000e2a:	401a      	ands	r2, r3
 8000e2c:	2380      	movs	r3, #128	; 0x80
 8000e2e:	00db      	lsls	r3, r3, #3
 8000e30:	429a      	cmp	r2, r3
 8000e32:	d114      	bne.n	8000e5e <HAL_PCD_IRQHandler+0x6e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	2244      	movs	r2, #68	; 0x44
 8000e3a:	5a9b      	ldrh	r3, [r3, r2]
 8000e3c:	b29a      	uxth	r2, r3
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	49a8      	ldr	r1, [pc, #672]	; (80010e4 <HAL_PCD_IRQHandler+0x2f4>)
 8000e44:	400a      	ands	r2, r1
 8000e46:	b291      	uxth	r1, r2
 8000e48:	2244      	movs	r2, #68	; 0x44
 8000e4a:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	0018      	movs	r0, r3
 8000e50:	f00f fd08 	bl	8010864 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2100      	movs	r1, #0
 8000e58:	0018      	movs	r0, r3
 8000e5a:	f000 f951 	bl	8001100 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	0018      	movs	r0, r3
 8000e64:	f002 fd60 	bl	8003928 <USB_ReadInterrupts>
 8000e68:	0002      	movs	r2, r0
 8000e6a:	2380      	movs	r3, #128	; 0x80
 8000e6c:	01db      	lsls	r3, r3, #7
 8000e6e:	401a      	ands	r2, r3
 8000e70:	2380      	movs	r3, #128	; 0x80
 8000e72:	01db      	lsls	r3, r3, #7
 8000e74:	429a      	cmp	r2, r3
 8000e76:	d10b      	bne.n	8000e90 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	2244      	movs	r2, #68	; 0x44
 8000e7e:	5a9b      	ldrh	r3, [r3, r2]
 8000e80:	b29a      	uxth	r2, r3
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4998      	ldr	r1, [pc, #608]	; (80010e8 <HAL_PCD_IRQHandler+0x2f8>)
 8000e88:	400a      	ands	r2, r1
 8000e8a:	b291      	uxth	r1, r2
 8000e8c:	2244      	movs	r2, #68	; 0x44
 8000e8e:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	0018      	movs	r0, r3
 8000e96:	f002 fd47 	bl	8003928 <USB_ReadInterrupts>
 8000e9a:	0002      	movs	r2, r0
 8000e9c:	2380      	movs	r3, #128	; 0x80
 8000e9e:	019b      	lsls	r3, r3, #6
 8000ea0:	401a      	ands	r2, r3
 8000ea2:	2380      	movs	r3, #128	; 0x80
 8000ea4:	019b      	lsls	r3, r3, #6
 8000ea6:	429a      	cmp	r2, r3
 8000ea8:	d10b      	bne.n	8000ec2 <HAL_PCD_IRQHandler+0xd2>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	2244      	movs	r2, #68	; 0x44
 8000eb0:	5a9b      	ldrh	r3, [r3, r2]
 8000eb2:	b29a      	uxth	r2, r3
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	498c      	ldr	r1, [pc, #560]	; (80010ec <HAL_PCD_IRQHandler+0x2fc>)
 8000eba:	400a      	ands	r2, r1
 8000ebc:	b291      	uxth	r1, r2
 8000ebe:	2244      	movs	r2, #68	; 0x44
 8000ec0:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	0018      	movs	r0, r3
 8000ec8:	f002 fd2e 	bl	8003928 <USB_ReadInterrupts>
 8000ecc:	0002      	movs	r2, r0
 8000ece:	2380      	movs	r3, #128	; 0x80
 8000ed0:	015b      	lsls	r3, r3, #5
 8000ed2:	401a      	ands	r2, r3
 8000ed4:	2380      	movs	r3, #128	; 0x80
 8000ed6:	015b      	lsls	r3, r3, #5
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	d137      	bne.n	8000f4c <HAL_PCD_IRQHandler+0x15c>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	2240      	movs	r2, #64	; 0x40
 8000ee2:	5a9b      	ldrh	r3, [r3, r2]
 8000ee4:	b29a      	uxth	r2, r3
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	2104      	movs	r1, #4
 8000eec:	438a      	bics	r2, r1
 8000eee:	b291      	uxth	r1, r2
 8000ef0:	2240      	movs	r2, #64	; 0x40
 8000ef2:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	2240      	movs	r2, #64	; 0x40
 8000efa:	5a9b      	ldrh	r3, [r3, r2]
 8000efc:	b29a      	uxth	r2, r3
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	2108      	movs	r1, #8
 8000f04:	438a      	bics	r2, r1
 8000f06:	b291      	uxth	r1, r2
 8000f08:	2240      	movs	r2, #64	; 0x40
 8000f0a:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 8000f0c:	687a      	ldr	r2, [r7, #4]
 8000f0e:	2398      	movs	r3, #152	; 0x98
 8000f10:	009b      	lsls	r3, r3, #2
 8000f12:	5cd3      	ldrb	r3, [r2, r3]
 8000f14:	2b01      	cmp	r3, #1
 8000f16:	d109      	bne.n	8000f2c <HAL_PCD_IRQHandler+0x13c>
    {
      hpcd->LPM_State = LPM_L0;
 8000f18:	687a      	ldr	r2, [r7, #4]
 8000f1a:	2398      	movs	r3, #152	; 0x98
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	2100      	movs	r1, #0
 8000f20:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2100      	movs	r1, #0
 8000f26:	0018      	movs	r0, r3
 8000f28:	f000 fe6c 	bl	8001c04 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	0018      	movs	r0, r3
 8000f30:	f00f fcb7 	bl	80108a2 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	2244      	movs	r2, #68	; 0x44
 8000f3a:	5a9b      	ldrh	r3, [r3, r2]
 8000f3c:	b29a      	uxth	r2, r3
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	496b      	ldr	r1, [pc, #428]	; (80010f0 <HAL_PCD_IRQHandler+0x300>)
 8000f44:	400a      	ands	r2, r1
 8000f46:	b291      	uxth	r1, r2
 8000f48:	2244      	movs	r2, #68	; 0x44
 8000f4a:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	0018      	movs	r0, r3
 8000f52:	f002 fce9 	bl	8003928 <USB_ReadInterrupts>
 8000f56:	0002      	movs	r2, r0
 8000f58:	2380      	movs	r3, #128	; 0x80
 8000f5a:	011b      	lsls	r3, r3, #4
 8000f5c:	401a      	ands	r2, r3
 8000f5e:	2380      	movs	r3, #128	; 0x80
 8000f60:	011b      	lsls	r3, r3, #4
 8000f62:	429a      	cmp	r2, r3
 8000f64:	d134      	bne.n	8000fd0 <HAL_PCD_IRQHandler+0x1e0>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	2240      	movs	r2, #64	; 0x40
 8000f6c:	5a9b      	ldrh	r3, [r3, r2]
 8000f6e:	b29a      	uxth	r2, r3
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	2108      	movs	r1, #8
 8000f76:	430a      	orrs	r2, r1
 8000f78:	b291      	uxth	r1, r2
 8000f7a:	2240      	movs	r2, #64	; 0x40
 8000f7c:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	2244      	movs	r2, #68	; 0x44
 8000f84:	5a9b      	ldrh	r3, [r3, r2]
 8000f86:	b29a      	uxth	r2, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4959      	ldr	r1, [pc, #356]	; (80010f4 <HAL_PCD_IRQHandler+0x304>)
 8000f8e:	400a      	ands	r2, r1
 8000f90:	b291      	uxth	r1, r2
 8000f92:	2244      	movs	r2, #68	; 0x44
 8000f94:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	2240      	movs	r2, #64	; 0x40
 8000f9c:	5a9b      	ldrh	r3, [r3, r2]
 8000f9e:	b29a      	uxth	r2, r3
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	2104      	movs	r1, #4
 8000fa6:	430a      	orrs	r2, r1
 8000fa8:	b291      	uxth	r1, r2
 8000faa:	2240      	movs	r2, #64	; 0x40
 8000fac:	5299      	strh	r1, [r3, r2]

    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP) == 0U)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	0018      	movs	r0, r3
 8000fb4:	f002 fcb8 	bl	8003928 <USB_ReadInterrupts>
 8000fb8:	0002      	movs	r2, r0
 8000fba:	2380      	movs	r3, #128	; 0x80
 8000fbc:	015b      	lsls	r3, r3, #5
 8000fbe:	401a      	ands	r2, r3
 8000fc0:	2380      	movs	r3, #128	; 0x80
 8000fc2:	015b      	lsls	r3, r3, #5
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	d003      	beq.n	8000fd0 <HAL_PCD_IRQHandler+0x1e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	0018      	movs	r0, r3
 8000fcc:	f00f fc61 	bl	8010892 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	0018      	movs	r0, r3
 8000fd6:	f002 fca7 	bl	8003928 <USB_ReadInterrupts>
 8000fda:	0002      	movs	r2, r0
 8000fdc:	2380      	movs	r3, #128	; 0x80
 8000fde:	4013      	ands	r3, r2
 8000fe0:	2b80      	cmp	r3, #128	; 0x80
 8000fe2:	d145      	bne.n	8001070 <HAL_PCD_IRQHandler+0x280>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	2244      	movs	r2, #68	; 0x44
 8000fea:	5a9b      	ldrh	r3, [r3, r2]
 8000fec:	b29a      	uxth	r2, r3
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	2180      	movs	r1, #128	; 0x80
 8000ff4:	438a      	bics	r2, r1
 8000ff6:	b291      	uxth	r1, r2
 8000ff8:	2244      	movs	r2, #68	; 0x44
 8000ffa:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 8000ffc:	687a      	ldr	r2, [r7, #4]
 8000ffe:	2398      	movs	r3, #152	; 0x98
 8001000:	009b      	lsls	r3, r3, #2
 8001002:	5cd3      	ldrb	r3, [r2, r3]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d12f      	bne.n	8001068 <HAL_PCD_IRQHandler+0x278>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	2240      	movs	r2, #64	; 0x40
 800100e:	5a9b      	ldrh	r3, [r3, r2]
 8001010:	b29a      	uxth	r2, r3
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	2104      	movs	r1, #4
 8001018:	430a      	orrs	r2, r1
 800101a:	b291      	uxth	r1, r2
 800101c:	2240      	movs	r2, #64	; 0x40
 800101e:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	2240      	movs	r2, #64	; 0x40
 8001026:	5a9b      	ldrh	r3, [r3, r2]
 8001028:	b29a      	uxth	r2, r3
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	2108      	movs	r1, #8
 8001030:	430a      	orrs	r2, r1
 8001032:	b291      	uxth	r1, r2
 8001034:	2240      	movs	r2, #64	; 0x40
 8001036:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8001038:	687a      	ldr	r2, [r7, #4]
 800103a:	2398      	movs	r3, #152	; 0x98
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	2101      	movs	r1, #1
 8001040:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	2254      	movs	r2, #84	; 0x54
 8001048:	5a9b      	ldrh	r3, [r3, r2]
 800104a:	b29b      	uxth	r3, r3
 800104c:	089b      	lsrs	r3, r3, #2
 800104e:	223c      	movs	r2, #60	; 0x3c
 8001050:	4013      	ands	r3, r2
 8001052:	0019      	movs	r1, r3
 8001054:	687a      	ldr	r2, [r7, #4]
 8001056:	2399      	movs	r3, #153	; 0x99
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2101      	movs	r1, #1
 8001060:	0018      	movs	r0, r3
 8001062:	f000 fdcf 	bl	8001c04 <HAL_PCDEx_LPM_Callback>
 8001066:	e003      	b.n	8001070 <HAL_PCD_IRQHandler+0x280>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	0018      	movs	r0, r3
 800106c:	f00f fc11 	bl	8010892 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	0018      	movs	r0, r3
 8001076:	f002 fc57 	bl	8003928 <USB_ReadInterrupts>
 800107a:	0002      	movs	r2, r0
 800107c:	2380      	movs	r3, #128	; 0x80
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	401a      	ands	r2, r3
 8001082:	2380      	movs	r3, #128	; 0x80
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	429a      	cmp	r2, r3
 8001088:	d10f      	bne.n	80010aa <HAL_PCD_IRQHandler+0x2ba>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	2244      	movs	r2, #68	; 0x44
 8001090:	5a9b      	ldrh	r3, [r3, r2]
 8001092:	b29a      	uxth	r2, r3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4917      	ldr	r1, [pc, #92]	; (80010f8 <HAL_PCD_IRQHandler+0x308>)
 800109a:	400a      	ands	r2, r1
 800109c:	b291      	uxth	r1, r2
 800109e:	2244      	movs	r2, #68	; 0x44
 80010a0:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	0018      	movs	r0, r3
 80010a6:	f00f fbce 	bl	8010846 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	0018      	movs	r0, r3
 80010b0:	f002 fc3a 	bl	8003928 <USB_ReadInterrupts>
 80010b4:	0002      	movs	r2, r0
 80010b6:	2380      	movs	r3, #128	; 0x80
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	401a      	ands	r2, r3
 80010bc:	2380      	movs	r3, #128	; 0x80
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	429a      	cmp	r2, r3
 80010c2:	d10b      	bne.n	80010dc <HAL_PCD_IRQHandler+0x2ec>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	2244      	movs	r2, #68	; 0x44
 80010ca:	5a9b      	ldrh	r3, [r3, r2]
 80010cc:	b29a      	uxth	r2, r3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	490a      	ldr	r1, [pc, #40]	; (80010fc <HAL_PCD_IRQHandler+0x30c>)
 80010d4:	400a      	ands	r2, r1
 80010d6:	b291      	uxth	r1, r2
 80010d8:	2244      	movs	r2, #68	; 0x44
 80010da:	5299      	strh	r1, [r3, r2]
  }
}
 80010dc:	46c0      	nop			; (mov r8, r8)
 80010de:	46bd      	mov	sp, r7
 80010e0:	b002      	add	sp, #8
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	fffffbff 	.word	0xfffffbff
 80010e8:	ffffbfff 	.word	0xffffbfff
 80010ec:	ffffdfff 	.word	0xffffdfff
 80010f0:	ffffefff 	.word	0xffffefff
 80010f4:	fffff7ff 	.word	0xfffff7ff
 80010f8:	fffffdff 	.word	0xfffffdff
 80010fc:	fffffeff 	.word	0xfffffeff

08001100 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	000a      	movs	r2, r1
 800110a:	1cfb      	adds	r3, r7, #3
 800110c:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 800110e:	687a      	ldr	r2, [r7, #4]
 8001110:	238a      	movs	r3, #138	; 0x8a
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	5cd3      	ldrb	r3, [r2, r3]
 8001116:	2b01      	cmp	r3, #1
 8001118:	d101      	bne.n	800111e <HAL_PCD_SetAddress+0x1e>
 800111a:	2302      	movs	r3, #2
 800111c:	e017      	b.n	800114e <HAL_PCD_SetAddress+0x4e>
 800111e:	687a      	ldr	r2, [r7, #4]
 8001120:	238a      	movs	r3, #138	; 0x8a
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	2101      	movs	r1, #1
 8001126:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	1cfa      	adds	r2, r7, #3
 800112c:	2124      	movs	r1, #36	; 0x24
 800112e:	7812      	ldrb	r2, [r2, #0]
 8001130:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	1cfb      	adds	r3, r7, #3
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	0019      	movs	r1, r3
 800113c:	0010      	movs	r0, r2
 800113e:	f002 fbc9 	bl	80038d4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001142:	687a      	ldr	r2, [r7, #4]
 8001144:	238a      	movs	r3, #138	; 0x8a
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	2100      	movs	r1, #0
 800114a:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 800114c:	2300      	movs	r3, #0
}
 800114e:	0018      	movs	r0, r3
 8001150:	46bd      	mov	sp, r7
 8001152:	b002      	add	sp, #8
 8001154:	bd80      	pop	{r7, pc}

08001156 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001156:	b590      	push	{r4, r7, lr}
 8001158:	b085      	sub	sp, #20
 800115a:	af00      	add	r7, sp, #0
 800115c:	6078      	str	r0, [r7, #4]
 800115e:	000c      	movs	r4, r1
 8001160:	0010      	movs	r0, r2
 8001162:	0019      	movs	r1, r3
 8001164:	1cfb      	adds	r3, r7, #3
 8001166:	1c22      	adds	r2, r4, #0
 8001168:	701a      	strb	r2, [r3, #0]
 800116a:	003b      	movs	r3, r7
 800116c:	1c02      	adds	r2, r0, #0
 800116e:	801a      	strh	r2, [r3, #0]
 8001170:	1cbb      	adds	r3, r7, #2
 8001172:	1c0a      	adds	r2, r1, #0
 8001174:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001176:	230b      	movs	r3, #11
 8001178:	18fb      	adds	r3, r7, r3
 800117a:	2200      	movs	r2, #0
 800117c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800117e:	1cfb      	adds	r3, r7, #3
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	b25b      	sxtb	r3, r3
 8001184:	2b00      	cmp	r3, #0
 8001186:	da0c      	bge.n	80011a2 <HAL_PCD_EP_Open+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001188:	1cfb      	adds	r3, r7, #3
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	2207      	movs	r2, #7
 800118e:	4013      	ands	r3, r2
 8001190:	015b      	lsls	r3, r3, #5
 8001192:	3328      	adds	r3, #40	; 0x28
 8001194:	687a      	ldr	r2, [r7, #4]
 8001196:	18d3      	adds	r3, r2, r3
 8001198:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	2201      	movs	r2, #1
 800119e:	705a      	strb	r2, [r3, #1]
 80011a0:	e00c      	b.n	80011bc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80011a2:	1cfb      	adds	r3, r7, #3
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	2207      	movs	r2, #7
 80011a8:	4013      	ands	r3, r2
 80011aa:	015b      	lsls	r3, r3, #5
 80011ac:	3329      	adds	r3, #41	; 0x29
 80011ae:	33ff      	adds	r3, #255	; 0xff
 80011b0:	687a      	ldr	r2, [r7, #4]
 80011b2:	18d3      	adds	r3, r2, r3
 80011b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	2200      	movs	r2, #0
 80011ba:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80011bc:	1cfb      	adds	r3, r7, #3
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	2207      	movs	r2, #7
 80011c2:	4013      	ands	r3, r2
 80011c4:	b2da      	uxtb	r2, r3
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80011ca:	003b      	movs	r3, r7
 80011cc:	881a      	ldrh	r2, [r3, #0]
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	1cba      	adds	r2, r7, #2
 80011d6:	7812      	ldrb	r2, [r2, #0]
 80011d8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	785b      	ldrb	r3, [r3, #1]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d004      	beq.n	80011ec <HAL_PCD_EP_Open+0x96>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	b29a      	uxth	r2, r3
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80011ec:	1cbb      	adds	r3, r7, #2
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	2b02      	cmp	r3, #2
 80011f2:	d102      	bne.n	80011fa <HAL_PCD_EP_Open+0xa4>
  {
    ep->data_pid_start = 0U;
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	2200      	movs	r2, #0
 80011f8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80011fa:	687a      	ldr	r2, [r7, #4]
 80011fc:	238a      	movs	r3, #138	; 0x8a
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	5cd3      	ldrb	r3, [r2, r3]
 8001202:	2b01      	cmp	r3, #1
 8001204:	d101      	bne.n	800120a <HAL_PCD_EP_Open+0xb4>
 8001206:	2302      	movs	r3, #2
 8001208:	e013      	b.n	8001232 <HAL_PCD_EP_Open+0xdc>
 800120a:	687a      	ldr	r2, [r7, #4]
 800120c:	238a      	movs	r3, #138	; 0x8a
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	2101      	movs	r1, #1
 8001212:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	68fa      	ldr	r2, [r7, #12]
 800121a:	0011      	movs	r1, r2
 800121c:	0018      	movs	r0, r3
 800121e:	f001 fb45 	bl	80028ac <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001222:	687a      	ldr	r2, [r7, #4]
 8001224:	238a      	movs	r3, #138	; 0x8a
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	2100      	movs	r1, #0
 800122a:	54d1      	strb	r1, [r2, r3]

  return ret;
 800122c:	230b      	movs	r3, #11
 800122e:	18fb      	adds	r3, r7, r3
 8001230:	781b      	ldrb	r3, [r3, #0]
}
 8001232:	0018      	movs	r0, r3
 8001234:	46bd      	mov	sp, r7
 8001236:	b005      	add	sp, #20
 8001238:	bd90      	pop	{r4, r7, pc}

0800123a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800123a:	b580      	push	{r7, lr}
 800123c:	b084      	sub	sp, #16
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
 8001242:	000a      	movs	r2, r1
 8001244:	1cfb      	adds	r3, r7, #3
 8001246:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001248:	1cfb      	adds	r3, r7, #3
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	b25b      	sxtb	r3, r3
 800124e:	2b00      	cmp	r3, #0
 8001250:	da0c      	bge.n	800126c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001252:	1cfb      	adds	r3, r7, #3
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	2207      	movs	r2, #7
 8001258:	4013      	ands	r3, r2
 800125a:	015b      	lsls	r3, r3, #5
 800125c:	3328      	adds	r3, #40	; 0x28
 800125e:	687a      	ldr	r2, [r7, #4]
 8001260:	18d3      	adds	r3, r2, r3
 8001262:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	2201      	movs	r2, #1
 8001268:	705a      	strb	r2, [r3, #1]
 800126a:	e00c      	b.n	8001286 <HAL_PCD_EP_Close+0x4c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800126c:	1cfb      	adds	r3, r7, #3
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	2207      	movs	r2, #7
 8001272:	4013      	ands	r3, r2
 8001274:	015b      	lsls	r3, r3, #5
 8001276:	3329      	adds	r3, #41	; 0x29
 8001278:	33ff      	adds	r3, #255	; 0xff
 800127a:	687a      	ldr	r2, [r7, #4]
 800127c:	18d3      	adds	r3, r2, r3
 800127e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	2200      	movs	r2, #0
 8001284:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001286:	1cfb      	adds	r3, r7, #3
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	2207      	movs	r2, #7
 800128c:	4013      	ands	r3, r2
 800128e:	b2da      	uxtb	r2, r3
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001294:	687a      	ldr	r2, [r7, #4]
 8001296:	238a      	movs	r3, #138	; 0x8a
 8001298:	009b      	lsls	r3, r3, #2
 800129a:	5cd3      	ldrb	r3, [r2, r3]
 800129c:	2b01      	cmp	r3, #1
 800129e:	d101      	bne.n	80012a4 <HAL_PCD_EP_Close+0x6a>
 80012a0:	2302      	movs	r3, #2
 80012a2:	e011      	b.n	80012c8 <HAL_PCD_EP_Close+0x8e>
 80012a4:	687a      	ldr	r2, [r7, #4]
 80012a6:	238a      	movs	r3, #138	; 0x8a
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	2101      	movs	r1, #1
 80012ac:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	68fa      	ldr	r2, [r7, #12]
 80012b4:	0011      	movs	r1, r2
 80012b6:	0018      	movs	r0, r3
 80012b8:	f001 fdf0 	bl	8002e9c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80012bc:	687a      	ldr	r2, [r7, #4]
 80012be:	238a      	movs	r3, #138	; 0x8a
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	2100      	movs	r1, #0
 80012c4:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 80012c6:	2300      	movs	r3, #0
}
 80012c8:	0018      	movs	r0, r3
 80012ca:	46bd      	mov	sp, r7
 80012cc:	b004      	add	sp, #16
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b086      	sub	sp, #24
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	60f8      	str	r0, [r7, #12]
 80012d8:	607a      	str	r2, [r7, #4]
 80012da:	603b      	str	r3, [r7, #0]
 80012dc:	200b      	movs	r0, #11
 80012de:	183b      	adds	r3, r7, r0
 80012e0:	1c0a      	adds	r2, r1, #0
 80012e2:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80012e4:	0001      	movs	r1, r0
 80012e6:	187b      	adds	r3, r7, r1
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	2207      	movs	r2, #7
 80012ec:	4013      	ands	r3, r2
 80012ee:	015b      	lsls	r3, r3, #5
 80012f0:	3329      	adds	r3, #41	; 0x29
 80012f2:	33ff      	adds	r3, #255	; 0xff
 80012f4:	68fa      	ldr	r2, [r7, #12]
 80012f6:	18d3      	adds	r3, r2, r3
 80012f8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	687a      	ldr	r2, [r7, #4]
 80012fe:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	683a      	ldr	r2, [r7, #0]
 8001304:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	2200      	movs	r2, #0
 800130a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	2200      	movs	r2, #0
 8001310:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001312:	187b      	adds	r3, r7, r1
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	2207      	movs	r2, #7
 8001318:	4013      	ands	r3, r2
 800131a:	b2da      	uxtb	r2, r3
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001320:	187b      	adds	r3, r7, r1
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	2207      	movs	r2, #7
 8001326:	4013      	ands	r3, r2
 8001328:	d107      	bne.n	800133a <HAL_PCD_EP_Receive+0x6a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	697a      	ldr	r2, [r7, #20]
 8001330:	0011      	movs	r1, r2
 8001332:	0018      	movs	r0, r3
 8001334:	f001 ff28 	bl	8003188 <USB_EPStartXfer>
 8001338:	e006      	b.n	8001348 <HAL_PCD_EP_Receive+0x78>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	697a      	ldr	r2, [r7, #20]
 8001340:	0011      	movs	r1, r2
 8001342:	0018      	movs	r0, r3
 8001344:	f001 ff20 	bl	8003188 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001348:	2300      	movs	r3, #0
}
 800134a:	0018      	movs	r0, r3
 800134c:	46bd      	mov	sp, r7
 800134e:	b006      	add	sp, #24
 8001350:	bd80      	pop	{r7, pc}

08001352 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001352:	b580      	push	{r7, lr}
 8001354:	b082      	sub	sp, #8
 8001356:	af00      	add	r7, sp, #0
 8001358:	6078      	str	r0, [r7, #4]
 800135a:	000a      	movs	r2, r1
 800135c:	1cfb      	adds	r3, r7, #3
 800135e:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001360:	1cfb      	adds	r3, r7, #3
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	2207      	movs	r2, #7
 8001366:	4013      	ands	r3, r2
 8001368:	687a      	ldr	r2, [r7, #4]
 800136a:	330a      	adds	r3, #10
 800136c:	015b      	lsls	r3, r3, #5
 800136e:	18d3      	adds	r3, r2, r3
 8001370:	3304      	adds	r3, #4
 8001372:	681b      	ldr	r3, [r3, #0]
}
 8001374:	0018      	movs	r0, r3
 8001376:	46bd      	mov	sp, r7
 8001378:	b002      	add	sp, #8
 800137a:	bd80      	pop	{r7, pc}

0800137c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b086      	sub	sp, #24
 8001380:	af00      	add	r7, sp, #0
 8001382:	60f8      	str	r0, [r7, #12]
 8001384:	607a      	str	r2, [r7, #4]
 8001386:	603b      	str	r3, [r7, #0]
 8001388:	200b      	movs	r0, #11
 800138a:	183b      	adds	r3, r7, r0
 800138c:	1c0a      	adds	r2, r1, #0
 800138e:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001390:	0001      	movs	r1, r0
 8001392:	187b      	adds	r3, r7, r1
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	2207      	movs	r2, #7
 8001398:	4013      	ands	r3, r2
 800139a:	015b      	lsls	r3, r3, #5
 800139c:	3328      	adds	r3, #40	; 0x28
 800139e:	68fa      	ldr	r2, [r7, #12]
 80013a0:	18d3      	adds	r3, r2, r3
 80013a2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	687a      	ldr	r2, [r7, #4]
 80013a8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	683a      	ldr	r2, [r7, #0]
 80013ae:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	2200      	movs	r2, #0
 80013b4:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	2201      	movs	r2, #1
 80013ba:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80013bc:	187b      	adds	r3, r7, r1
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	2207      	movs	r2, #7
 80013c2:	4013      	ands	r3, r2
 80013c4:	b2da      	uxtb	r2, r3
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80013ca:	187b      	adds	r3, r7, r1
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	2207      	movs	r2, #7
 80013d0:	4013      	ands	r3, r2
 80013d2:	d107      	bne.n	80013e4 <HAL_PCD_EP_Transmit+0x68>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	697a      	ldr	r2, [r7, #20]
 80013da:	0011      	movs	r1, r2
 80013dc:	0018      	movs	r0, r3
 80013de:	f001 fed3 	bl	8003188 <USB_EPStartXfer>
 80013e2:	e006      	b.n	80013f2 <HAL_PCD_EP_Transmit+0x76>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	697a      	ldr	r2, [r7, #20]
 80013ea:	0011      	movs	r1, r2
 80013ec:	0018      	movs	r0, r3
 80013ee:	f001 fecb 	bl	8003188 <USB_EPStartXfer>
  }

  return HAL_OK;
 80013f2:	2300      	movs	r3, #0
}
 80013f4:	0018      	movs	r0, r3
 80013f6:	46bd      	mov	sp, r7
 80013f8:	b006      	add	sp, #24
 80013fa:	bd80      	pop	{r7, pc}

080013fc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	000a      	movs	r2, r1
 8001406:	1cfb      	adds	r3, r7, #3
 8001408:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800140a:	1cfb      	adds	r3, r7, #3
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	2207      	movs	r2, #7
 8001410:	401a      	ands	r2, r3
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	429a      	cmp	r2, r3
 8001418:	d901      	bls.n	800141e <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	e050      	b.n	80014c0 <HAL_PCD_EP_SetStall+0xc4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800141e:	1cfb      	adds	r3, r7, #3
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	b25b      	sxtb	r3, r3
 8001424:	2b00      	cmp	r3, #0
 8001426:	da0c      	bge.n	8001442 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001428:	1cfb      	adds	r3, r7, #3
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	2207      	movs	r2, #7
 800142e:	4013      	ands	r3, r2
 8001430:	015b      	lsls	r3, r3, #5
 8001432:	3328      	adds	r3, #40	; 0x28
 8001434:	687a      	ldr	r2, [r7, #4]
 8001436:	18d3      	adds	r3, r2, r3
 8001438:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	2201      	movs	r2, #1
 800143e:	705a      	strb	r2, [r3, #1]
 8001440:	e00a      	b.n	8001458 <HAL_PCD_EP_SetStall+0x5c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001442:	1cfb      	adds	r3, r7, #3
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	015b      	lsls	r3, r3, #5
 8001448:	3329      	adds	r3, #41	; 0x29
 800144a:	33ff      	adds	r3, #255	; 0xff
 800144c:	687a      	ldr	r2, [r7, #4]
 800144e:	18d3      	adds	r3, r2, r3
 8001450:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	2200      	movs	r2, #0
 8001456:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	2201      	movs	r2, #1
 800145c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800145e:	1cfb      	adds	r3, r7, #3
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	2207      	movs	r2, #7
 8001464:	4013      	ands	r3, r2
 8001466:	b2da      	uxtb	r2, r3
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800146c:	687a      	ldr	r2, [r7, #4]
 800146e:	238a      	movs	r3, #138	; 0x8a
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	5cd3      	ldrb	r3, [r2, r3]
 8001474:	2b01      	cmp	r3, #1
 8001476:	d101      	bne.n	800147c <HAL_PCD_EP_SetStall+0x80>
 8001478:	2302      	movs	r3, #2
 800147a:	e021      	b.n	80014c0 <HAL_PCD_EP_SetStall+0xc4>
 800147c:	687a      	ldr	r2, [r7, #4]
 800147e:	238a      	movs	r3, #138	; 0x8a
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	2101      	movs	r1, #1
 8001484:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	68fa      	ldr	r2, [r7, #12]
 800148c:	0011      	movs	r1, r2
 800148e:	0018      	movs	r0, r3
 8001490:	f002 f94c 	bl	800372c <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001494:	1cfb      	adds	r3, r7, #3
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	2207      	movs	r2, #7
 800149a:	4013      	ands	r3, r2
 800149c:	d10a      	bne.n	80014b4 <HAL_PCD_EP_SetStall+0xb8>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	218c      	movs	r1, #140	; 0x8c
 80014a6:	0089      	lsls	r1, r1, #2
 80014a8:	468c      	mov	ip, r1
 80014aa:	4463      	add	r3, ip
 80014ac:	0019      	movs	r1, r3
 80014ae:	0010      	movs	r0, r2
 80014b0:	f002 fa48 	bl	8003944 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80014b4:	687a      	ldr	r2, [r7, #4]
 80014b6:	238a      	movs	r3, #138	; 0x8a
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	2100      	movs	r1, #0
 80014bc:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80014be:	2300      	movs	r3, #0
}
 80014c0:	0018      	movs	r0, r3
 80014c2:	46bd      	mov	sp, r7
 80014c4:	b004      	add	sp, #16
 80014c6:	bd80      	pop	{r7, pc}

080014c8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	000a      	movs	r2, r1
 80014d2:	1cfb      	adds	r3, r7, #3
 80014d4:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80014d6:	1cfb      	adds	r3, r7, #3
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	220f      	movs	r2, #15
 80014dc:	401a      	ands	r2, r3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	429a      	cmp	r2, r3
 80014e4:	d901      	bls.n	80014ea <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e042      	b.n	8001570 <HAL_PCD_EP_ClrStall+0xa8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80014ea:	1cfb      	adds	r3, r7, #3
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	b25b      	sxtb	r3, r3
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	da0c      	bge.n	800150e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80014f4:	1cfb      	adds	r3, r7, #3
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	2207      	movs	r2, #7
 80014fa:	4013      	ands	r3, r2
 80014fc:	015b      	lsls	r3, r3, #5
 80014fe:	3328      	adds	r3, #40	; 0x28
 8001500:	687a      	ldr	r2, [r7, #4]
 8001502:	18d3      	adds	r3, r2, r3
 8001504:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	2201      	movs	r2, #1
 800150a:	705a      	strb	r2, [r3, #1]
 800150c:	e00c      	b.n	8001528 <HAL_PCD_EP_ClrStall+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800150e:	1cfb      	adds	r3, r7, #3
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	2207      	movs	r2, #7
 8001514:	4013      	ands	r3, r2
 8001516:	015b      	lsls	r3, r3, #5
 8001518:	3329      	adds	r3, #41	; 0x29
 800151a:	33ff      	adds	r3, #255	; 0xff
 800151c:	687a      	ldr	r2, [r7, #4]
 800151e:	18d3      	adds	r3, r2, r3
 8001520:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	2200      	movs	r2, #0
 8001526:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	2200      	movs	r2, #0
 800152c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800152e:	1cfb      	adds	r3, r7, #3
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	2207      	movs	r2, #7
 8001534:	4013      	ands	r3, r2
 8001536:	b2da      	uxtb	r2, r3
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800153c:	687a      	ldr	r2, [r7, #4]
 800153e:	238a      	movs	r3, #138	; 0x8a
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	5cd3      	ldrb	r3, [r2, r3]
 8001544:	2b01      	cmp	r3, #1
 8001546:	d101      	bne.n	800154c <HAL_PCD_EP_ClrStall+0x84>
 8001548:	2302      	movs	r3, #2
 800154a:	e011      	b.n	8001570 <HAL_PCD_EP_ClrStall+0xa8>
 800154c:	687a      	ldr	r2, [r7, #4]
 800154e:	238a      	movs	r3, #138	; 0x8a
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	2101      	movs	r1, #1
 8001554:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	68fa      	ldr	r2, [r7, #12]
 800155c:	0011      	movs	r1, r2
 800155e:	0018      	movs	r0, r3
 8001560:	f002 f926 	bl	80037b0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001564:	687a      	ldr	r2, [r7, #4]
 8001566:	238a      	movs	r3, #138	; 0x8a
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	2100      	movs	r1, #0
 800156c:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800156e:	2300      	movs	r3, #0
}
 8001570:	0018      	movs	r0, r3
 8001572:	46bd      	mov	sp, r7
 8001574:	b004      	add	sp, #16
 8001576:	bd80      	pop	{r7, pc}

08001578 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001578:	b590      	push	{r4, r7, lr}
 800157a:	b089      	sub	sp, #36	; 0x24
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001580:	e2b3      	b.n	8001aea <PCD_EP_ISR_Handler+0x572>
  {
    wIstr = hpcd->Instance->ISTR;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	2016      	movs	r0, #22
 8001588:	183b      	adds	r3, r7, r0
 800158a:	2144      	movs	r1, #68	; 0x44
 800158c:	5a52      	ldrh	r2, [r2, r1]
 800158e:	801a      	strh	r2, [r3, #0]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001590:	183b      	adds	r3, r7, r0
 8001592:	881b      	ldrh	r3, [r3, #0]
 8001594:	b2da      	uxtb	r2, r3
 8001596:	2015      	movs	r0, #21
 8001598:	183b      	adds	r3, r7, r0
 800159a:	210f      	movs	r1, #15
 800159c:	400a      	ands	r2, r1
 800159e:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 80015a0:	183b      	adds	r3, r7, r0
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d000      	beq.n	80015aa <PCD_EP_ISR_Handler+0x32>
 80015a8:	e141      	b.n	800182e <PCD_EP_ISR_Handler+0x2b6>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80015aa:	2316      	movs	r3, #22
 80015ac:	18fb      	adds	r3, r7, r3
 80015ae:	881b      	ldrh	r3, [r3, #0]
 80015b0:	2210      	movs	r2, #16
 80015b2:	4013      	ands	r3, r2
 80015b4:	d14e      	bne.n	8001654 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	881b      	ldrh	r3, [r3, #0]
 80015bc:	b29b      	uxth	r3, r3
 80015be:	4aca      	ldr	r2, [pc, #808]	; (80018e8 <PCD_EP_ISR_Handler+0x370>)
 80015c0:	4013      	ands	r3, r2
 80015c2:	b29c      	uxth	r4, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4ac8      	ldr	r2, [pc, #800]	; (80018ec <PCD_EP_ISR_Handler+0x374>)
 80015ca:	4322      	orrs	r2, r4
 80015cc:	b292      	uxth	r2, r2
 80015ce:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	3328      	adds	r3, #40	; 0x28
 80015d4:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	2250      	movs	r2, #80	; 0x50
 80015dc:	5a9b      	ldrh	r3, [r3, r2]
 80015de:	b29b      	uxth	r3, r3
 80015e0:	001a      	movs	r2, r3
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	00db      	lsls	r3, r3, #3
 80015e8:	18d2      	adds	r2, r2, r3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	18d3      	adds	r3, r2, r3
 80015f0:	4abf      	ldr	r2, [pc, #764]	; (80018f0 <PCD_EP_ISR_Handler+0x378>)
 80015f2:	4694      	mov	ip, r2
 80015f4:	4463      	add	r3, ip
 80015f6:	881b      	ldrh	r3, [r3, #0]
 80015f8:	059b      	lsls	r3, r3, #22
 80015fa:	0d9a      	lsrs	r2, r3, #22
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	695a      	ldr	r2, [r3, #20]
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	69db      	ldr	r3, [r3, #28]
 8001608:	18d2      	adds	r2, r2, r3
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2100      	movs	r1, #0
 8001612:	0018      	movs	r0, r3
 8001614:	f00f f8fc 	bl	8010810 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2224      	movs	r2, #36	; 0x24
 800161c:	5c9b      	ldrb	r3, [r3, r2]
 800161e:	b2db      	uxtb	r3, r3
 8001620:	2b00      	cmp	r3, #0
 8001622:	d100      	bne.n	8001626 <PCD_EP_ISR_Handler+0xae>
 8001624:	e261      	b.n	8001aea <PCD_EP_ISR_Handler+0x572>
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	699b      	ldr	r3, [r3, #24]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d000      	beq.n	8001630 <PCD_EP_ISR_Handler+0xb8>
 800162e:	e25c      	b.n	8001aea <PCD_EP_ISR_Handler+0x572>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2224      	movs	r2, #36	; 0x24
 8001634:	5c9b      	ldrb	r3, [r3, r2]
 8001636:	b2db      	uxtb	r3, r3
 8001638:	2280      	movs	r2, #128	; 0x80
 800163a:	4252      	negs	r2, r2
 800163c:	4313      	orrs	r3, r2
 800163e:	b2da      	uxtb	r2, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	b291      	uxth	r1, r2
 8001646:	224c      	movs	r2, #76	; 0x4c
 8001648:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2224      	movs	r2, #36	; 0x24
 800164e:	2100      	movs	r1, #0
 8001650:	5499      	strb	r1, [r3, r2]
 8001652:	e24a      	b.n	8001aea <PCD_EP_ISR_Handler+0x572>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	3329      	adds	r3, #41	; 0x29
 8001658:	33ff      	adds	r3, #255	; 0xff
 800165a:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	2112      	movs	r1, #18
 8001662:	187b      	adds	r3, r7, r1
 8001664:	8812      	ldrh	r2, [r2, #0]
 8001666:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001668:	187b      	adds	r3, r7, r1
 800166a:	881a      	ldrh	r2, [r3, #0]
 800166c:	2380      	movs	r3, #128	; 0x80
 800166e:	011b      	lsls	r3, r3, #4
 8001670:	4013      	ands	r3, r2
 8001672:	d033      	beq.n	80016dc <PCD_EP_ISR_Handler+0x164>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	2250      	movs	r2, #80	; 0x50
 800167a:	5a9b      	ldrh	r3, [r3, r2]
 800167c:	b29b      	uxth	r3, r3
 800167e:	001a      	movs	r2, r3
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	00db      	lsls	r3, r3, #3
 8001686:	18d2      	adds	r2, r2, r3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	18d3      	adds	r3, r2, r3
 800168e:	4a99      	ldr	r2, [pc, #612]	; (80018f4 <PCD_EP_ISR_Handler+0x37c>)
 8001690:	4694      	mov	ip, r2
 8001692:	4463      	add	r3, ip
 8001694:	881b      	ldrh	r3, [r3, #0]
 8001696:	059b      	lsls	r3, r3, #22
 8001698:	0d9a      	lsrs	r2, r3, #22
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6818      	ldr	r0, [r3, #0]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	228c      	movs	r2, #140	; 0x8c
 80016a6:	0092      	lsls	r2, r2, #2
 80016a8:	1899      	adds	r1, r3, r2
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80016b2:	b29b      	uxth	r3, r3
 80016b4:	f002 f993 	bl	80039de <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	881b      	ldrh	r3, [r3, #0]
 80016be:	b29b      	uxth	r3, r3
 80016c0:	4a8d      	ldr	r2, [pc, #564]	; (80018f8 <PCD_EP_ISR_Handler+0x380>)
 80016c2:	4013      	ands	r3, r2
 80016c4:	b29c      	uxth	r4, r3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	2280      	movs	r2, #128	; 0x80
 80016cc:	4322      	orrs	r2, r4
 80016ce:	b292      	uxth	r2, r2
 80016d0:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	0018      	movs	r0, r3
 80016d6:	f00f f869 	bl	80107ac <HAL_PCD_SetupStageCallback>
 80016da:	e206      	b.n	8001aea <PCD_EP_ISR_Handler+0x572>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80016dc:	2312      	movs	r3, #18
 80016de:	18fb      	adds	r3, r7, r3
 80016e0:	2200      	movs	r2, #0
 80016e2:	5e9b      	ldrsh	r3, [r3, r2]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	db00      	blt.n	80016ea <PCD_EP_ISR_Handler+0x172>
 80016e8:	e1ff      	b.n	8001aea <PCD_EP_ISR_Handler+0x572>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	881b      	ldrh	r3, [r3, #0]
 80016f0:	b29b      	uxth	r3, r3
 80016f2:	4a81      	ldr	r2, [pc, #516]	; (80018f8 <PCD_EP_ISR_Handler+0x380>)
 80016f4:	4013      	ands	r3, r2
 80016f6:	b29c      	uxth	r4, r3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2280      	movs	r2, #128	; 0x80
 80016fe:	4322      	orrs	r2, r4
 8001700:	b292      	uxth	r2, r2
 8001702:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2250      	movs	r2, #80	; 0x50
 800170a:	5a9b      	ldrh	r3, [r3, r2]
 800170c:	b29b      	uxth	r3, r3
 800170e:	001a      	movs	r2, r3
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	00db      	lsls	r3, r3, #3
 8001716:	18d2      	adds	r2, r2, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	18d3      	adds	r3, r2, r3
 800171e:	4a75      	ldr	r2, [pc, #468]	; (80018f4 <PCD_EP_ISR_Handler+0x37c>)
 8001720:	4694      	mov	ip, r2
 8001722:	4463      	add	r3, ip
 8001724:	881b      	ldrh	r3, [r3, #0]
 8001726:	059b      	lsls	r3, r3, #22
 8001728:	0d9a      	lsrs	r2, r3, #22
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	69db      	ldr	r3, [r3, #28]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d01a      	beq.n	800176c <PCD_EP_ISR_Handler+0x1f4>
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	695b      	ldr	r3, [r3, #20]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d016      	beq.n	800176c <PCD_EP_ISR_Handler+0x1f4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6818      	ldr	r0, [r3, #0]
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	6959      	ldr	r1, [r3, #20]
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800174e:	b29b      	uxth	r3, r3
 8001750:	f002 f945 	bl	80039de <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	695a      	ldr	r2, [r3, #20]
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	69db      	ldr	r3, [r3, #28]
 800175c:	18d2      	adds	r2, r2, r3
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2100      	movs	r1, #0
 8001766:	0018      	movs	r0, r3
 8001768:	f00f f835 	bl	80107d6 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	001c      	movs	r4, r3
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	2250      	movs	r2, #80	; 0x50
 8001778:	5a9b      	ldrh	r3, [r3, r2]
 800177a:	b29b      	uxth	r3, r3
 800177c:	18e4      	adds	r4, r4, r3
 800177e:	4b5d      	ldr	r3, [pc, #372]	; (80018f4 <PCD_EP_ISR_Handler+0x37c>)
 8001780:	18e3      	adds	r3, r4, r3
 8001782:	60bb      	str	r3, [r7, #8]
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	691b      	ldr	r3, [r3, #16]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d10e      	bne.n	80017aa <PCD_EP_ISR_Handler+0x232>
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	881b      	ldrh	r3, [r3, #0]
 8001790:	4a5a      	ldr	r2, [pc, #360]	; (80018fc <PCD_EP_ISR_Handler+0x384>)
 8001792:	4013      	ands	r3, r2
 8001794:	b29a      	uxth	r2, r3
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	801a      	strh	r2, [r3, #0]
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	881b      	ldrh	r3, [r3, #0]
 800179e:	4a53      	ldr	r2, [pc, #332]	; (80018ec <PCD_EP_ISR_Handler+0x374>)
 80017a0:	4313      	orrs	r3, r2
 80017a2:	b29a      	uxth	r2, r3
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	801a      	strh	r2, [r3, #0]
 80017a8:	e02b      	b.n	8001802 <PCD_EP_ISR_Handler+0x28a>
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	691b      	ldr	r3, [r3, #16]
 80017ae:	2b3e      	cmp	r3, #62	; 0x3e
 80017b0:	d812      	bhi.n	80017d8 <PCD_EP_ISR_Handler+0x260>
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	691b      	ldr	r3, [r3, #16]
 80017b6:	085b      	lsrs	r3, r3, #1
 80017b8:	61bb      	str	r3, [r7, #24]
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	691b      	ldr	r3, [r3, #16]
 80017be:	2201      	movs	r2, #1
 80017c0:	4013      	ands	r3, r2
 80017c2:	d002      	beq.n	80017ca <PCD_EP_ISR_Handler+0x252>
 80017c4:	69bb      	ldr	r3, [r7, #24]
 80017c6:	3301      	adds	r3, #1
 80017c8:	61bb      	str	r3, [r7, #24]
 80017ca:	69bb      	ldr	r3, [r7, #24]
 80017cc:	b29b      	uxth	r3, r3
 80017ce:	029b      	lsls	r3, r3, #10
 80017d0:	b29a      	uxth	r2, r3
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	801a      	strh	r2, [r3, #0]
 80017d6:	e014      	b.n	8001802 <PCD_EP_ISR_Handler+0x28a>
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	691b      	ldr	r3, [r3, #16]
 80017dc:	095b      	lsrs	r3, r3, #5
 80017de:	61bb      	str	r3, [r7, #24]
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	691b      	ldr	r3, [r3, #16]
 80017e4:	221f      	movs	r2, #31
 80017e6:	4013      	ands	r3, r2
 80017e8:	d102      	bne.n	80017f0 <PCD_EP_ISR_Handler+0x278>
 80017ea:	69bb      	ldr	r3, [r7, #24]
 80017ec:	3b01      	subs	r3, #1
 80017ee:	61bb      	str	r3, [r7, #24]
 80017f0:	69bb      	ldr	r3, [r7, #24]
 80017f2:	b29b      	uxth	r3, r3
 80017f4:	029b      	lsls	r3, r3, #10
 80017f6:	b29b      	uxth	r3, r3
 80017f8:	4a3c      	ldr	r2, [pc, #240]	; (80018ec <PCD_EP_ISR_Handler+0x374>)
 80017fa:	4313      	orrs	r3, r2
 80017fc:	b29a      	uxth	r2, r3
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	881b      	ldrh	r3, [r3, #0]
 8001808:	b29b      	uxth	r3, r3
 800180a:	4a3d      	ldr	r2, [pc, #244]	; (8001900 <PCD_EP_ISR_Handler+0x388>)
 800180c:	4013      	ands	r3, r2
 800180e:	b29c      	uxth	r4, r3
 8001810:	2380      	movs	r3, #128	; 0x80
 8001812:	015b      	lsls	r3, r3, #5
 8001814:	4063      	eors	r3, r4
 8001816:	b29c      	uxth	r4, r3
 8001818:	2380      	movs	r3, #128	; 0x80
 800181a:	019b      	lsls	r3, r3, #6
 800181c:	4063      	eors	r3, r4
 800181e:	b29c      	uxth	r4, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a37      	ldr	r2, [pc, #220]	; (8001904 <PCD_EP_ISR_Handler+0x38c>)
 8001826:	4322      	orrs	r2, r4
 8001828:	b292      	uxth	r2, r2
 800182a:	801a      	strh	r2, [r3, #0]
 800182c:	e15d      	b.n	8001aea <PCD_EP_ISR_Handler+0x572>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	001a      	movs	r2, r3
 8001834:	2315      	movs	r3, #21
 8001836:	18fb      	adds	r3, r7, r3
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	18d2      	adds	r2, r2, r3
 800183e:	2112      	movs	r1, #18
 8001840:	187b      	adds	r3, r7, r1
 8001842:	8812      	ldrh	r2, [r2, #0]
 8001844:	801a      	strh	r2, [r3, #0]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001846:	187b      	adds	r3, r7, r1
 8001848:	2200      	movs	r2, #0
 800184a:	5e9b      	ldrsh	r3, [r3, r2]
 800184c:	2b00      	cmp	r3, #0
 800184e:	db00      	blt.n	8001852 <PCD_EP_ISR_Handler+0x2da>
 8001850:	e0f5      	b.n	8001a3e <PCD_EP_ISR_Handler+0x4c6>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	001a      	movs	r2, r3
 8001858:	2115      	movs	r1, #21
 800185a:	187b      	adds	r3, r7, r1
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	18d3      	adds	r3, r2, r3
 8001862:	881b      	ldrh	r3, [r3, #0]
 8001864:	b29b      	uxth	r3, r3
 8001866:	4a24      	ldr	r2, [pc, #144]	; (80018f8 <PCD_EP_ISR_Handler+0x380>)
 8001868:	4013      	ands	r3, r2
 800186a:	b29c      	uxth	r4, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	001a      	movs	r2, r3
 8001872:	187b      	adds	r3, r7, r1
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	18d3      	adds	r3, r2, r3
 800187a:	2280      	movs	r2, #128	; 0x80
 800187c:	4322      	orrs	r2, r4
 800187e:	b292      	uxth	r2, r2
 8001880:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001882:	187b      	adds	r3, r7, r1
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	015b      	lsls	r3, r3, #5
 8001888:	3329      	adds	r3, #41	; 0x29
 800188a:	33ff      	adds	r3, #255	; 0xff
 800188c:	687a      	ldr	r2, [r7, #4]
 800188e:	18d3      	adds	r3, r2, r3
 8001890:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	7b1b      	ldrb	r3, [r3, #12]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d136      	bne.n	8001908 <PCD_EP_ISR_Handler+0x390>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2250      	movs	r2, #80	; 0x50
 80018a0:	5a9b      	ldrh	r3, [r3, r2]
 80018a2:	b29b      	uxth	r3, r3
 80018a4:	001a      	movs	r2, r3
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	00db      	lsls	r3, r3, #3
 80018ac:	18d2      	adds	r2, r2, r3
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	18d3      	adds	r3, r2, r3
 80018b4:	4a0f      	ldr	r2, [pc, #60]	; (80018f4 <PCD_EP_ISR_Handler+0x37c>)
 80018b6:	4694      	mov	ip, r2
 80018b8:	4463      	add	r3, ip
 80018ba:	881a      	ldrh	r2, [r3, #0]
 80018bc:	211e      	movs	r1, #30
 80018be:	187b      	adds	r3, r7, r1
 80018c0:	0592      	lsls	r2, r2, #22
 80018c2:	0d92      	lsrs	r2, r2, #22
 80018c4:	801a      	strh	r2, [r3, #0]
          if (count != 0U)
 80018c6:	187b      	adds	r3, r7, r1
 80018c8:	881b      	ldrh	r3, [r3, #0]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d100      	bne.n	80018d0 <PCD_EP_ISR_Handler+0x358>
 80018ce:	e08b      	b.n	80019e8 <PCD_EP_ISR_Handler+0x470>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6818      	ldr	r0, [r3, #0]
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	6959      	ldr	r1, [r3, #20]
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	88da      	ldrh	r2, [r3, #6]
 80018dc:	231e      	movs	r3, #30
 80018de:	18fb      	adds	r3, r7, r3
 80018e0:	881b      	ldrh	r3, [r3, #0]
 80018e2:	f002 f87c 	bl	80039de <USB_ReadPMA>
 80018e6:	e07f      	b.n	80019e8 <PCD_EP_ISR_Handler+0x470>
 80018e8:	ffff8f0f 	.word	0xffff8f0f
 80018ec:	ffff8000 	.word	0xffff8000
 80018f0:	00000402 	.word	0x00000402
 80018f4:	00000406 	.word	0x00000406
 80018f8:	00000f8f 	.word	0x00000f8f
 80018fc:	ffff83ff 	.word	0xffff83ff
 8001900:	ffffbf8f 	.word	0xffffbf8f
 8001904:	ffff8080 	.word	0xffff8080
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	001a      	movs	r2, r3
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	18d3      	adds	r3, r2, r3
 8001916:	881b      	ldrh	r3, [r3, #0]
 8001918:	b29b      	uxth	r3, r3
 800191a:	001a      	movs	r2, r3
 800191c:	2380      	movs	r3, #128	; 0x80
 800191e:	01db      	lsls	r3, r3, #7
 8001920:	4013      	ands	r3, r2
 8001922:	d025      	beq.n	8001970 <PCD_EP_ISR_Handler+0x3f8>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2250      	movs	r2, #80	; 0x50
 800192a:	5a9b      	ldrh	r3, [r3, r2]
 800192c:	b29b      	uxth	r3, r3
 800192e:	001a      	movs	r2, r3
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	00db      	lsls	r3, r3, #3
 8001936:	18d2      	adds	r2, r2, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	18d3      	adds	r3, r2, r3
 800193e:	4a72      	ldr	r2, [pc, #456]	; (8001b08 <PCD_EP_ISR_Handler+0x590>)
 8001940:	4694      	mov	ip, r2
 8001942:	4463      	add	r3, ip
 8001944:	881a      	ldrh	r2, [r3, #0]
 8001946:	211e      	movs	r1, #30
 8001948:	187b      	adds	r3, r7, r1
 800194a:	0592      	lsls	r2, r2, #22
 800194c:	0d92      	lsrs	r2, r2, #22
 800194e:	801a      	strh	r2, [r3, #0]
            if (count != 0U)
 8001950:	187b      	adds	r3, r7, r1
 8001952:	881b      	ldrh	r3, [r3, #0]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d030      	beq.n	80019ba <PCD_EP_ISR_Handler+0x442>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6818      	ldr	r0, [r3, #0]
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	6959      	ldr	r1, [r3, #20]
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	891a      	ldrh	r2, [r3, #8]
 8001964:	231e      	movs	r3, #30
 8001966:	18fb      	adds	r3, r7, r3
 8001968:	881b      	ldrh	r3, [r3, #0]
 800196a:	f002 f838 	bl	80039de <USB_ReadPMA>
 800196e:	e024      	b.n	80019ba <PCD_EP_ISR_Handler+0x442>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	2250      	movs	r2, #80	; 0x50
 8001976:	5a9b      	ldrh	r3, [r3, r2]
 8001978:	b29b      	uxth	r3, r3
 800197a:	001a      	movs	r2, r3
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	00db      	lsls	r3, r3, #3
 8001982:	18d2      	adds	r2, r2, r3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	18d3      	adds	r3, r2, r3
 800198a:	4a60      	ldr	r2, [pc, #384]	; (8001b0c <PCD_EP_ISR_Handler+0x594>)
 800198c:	4694      	mov	ip, r2
 800198e:	4463      	add	r3, ip
 8001990:	881a      	ldrh	r2, [r3, #0]
 8001992:	211e      	movs	r1, #30
 8001994:	187b      	adds	r3, r7, r1
 8001996:	0592      	lsls	r2, r2, #22
 8001998:	0d92      	lsrs	r2, r2, #22
 800199a:	801a      	strh	r2, [r3, #0]
            if (count != 0U)
 800199c:	187b      	adds	r3, r7, r1
 800199e:	881b      	ldrh	r3, [r3, #0]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d00a      	beq.n	80019ba <PCD_EP_ISR_Handler+0x442>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6818      	ldr	r0, [r3, #0]
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	6959      	ldr	r1, [r3, #20]
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	895a      	ldrh	r2, [r3, #10]
 80019b0:	231e      	movs	r3, #30
 80019b2:	18fb      	adds	r3, r7, r3
 80019b4:	881b      	ldrh	r3, [r3, #0]
 80019b6:	f002 f812 	bl	80039de <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	001a      	movs	r2, r3
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	18d3      	adds	r3, r2, r3
 80019c8:	881b      	ldrh	r3, [r3, #0]
 80019ca:	b29b      	uxth	r3, r3
 80019cc:	4a50      	ldr	r2, [pc, #320]	; (8001b10 <PCD_EP_ISR_Handler+0x598>)
 80019ce:	4013      	ands	r3, r2
 80019d0:	b29c      	uxth	r4, r3
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	001a      	movs	r2, r3
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	18d3      	adds	r3, r2, r3
 80019e0:	4a4c      	ldr	r2, [pc, #304]	; (8001b14 <PCD_EP_ISR_Handler+0x59c>)
 80019e2:	4322      	orrs	r2, r4
 80019e4:	b292      	uxth	r2, r2
 80019e6:	801a      	strh	r2, [r3, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	69da      	ldr	r2, [r3, #28]
 80019ec:	211e      	movs	r1, #30
 80019ee:	187b      	adds	r3, r7, r1
 80019f0:	881b      	ldrh	r3, [r3, #0]
 80019f2:	18d2      	adds	r2, r2, r3
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	695a      	ldr	r2, [r3, #20]
 80019fc:	187b      	adds	r3, r7, r1
 80019fe:	881b      	ldrh	r3, [r3, #0]
 8001a00:	18d2      	adds	r2, r2, r3
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	699b      	ldr	r3, [r3, #24]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d006      	beq.n	8001a1c <PCD_EP_ISR_Handler+0x4a4>
 8001a0e:	231e      	movs	r3, #30
 8001a10:	18fb      	adds	r3, r7, r3
 8001a12:	881a      	ldrh	r2, [r3, #0]
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	691b      	ldr	r3, [r3, #16]
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d207      	bcs.n	8001a2c <PCD_EP_ISR_Handler+0x4b4>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	781a      	ldrb	r2, [r3, #0]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	0011      	movs	r1, r2
 8001a24:	0018      	movs	r0, r3
 8001a26:	f00e fed6 	bl	80107d6 <HAL_PCD_DataOutStageCallback>
 8001a2a:	e008      	b.n	8001a3e <PCD_EP_ISR_Handler+0x4c6>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	7819      	ldrb	r1, [r3, #0]
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	695a      	ldr	r2, [r3, #20]
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	699b      	ldr	r3, [r3, #24]
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f7ff fc49 	bl	80012d0 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001a3e:	2312      	movs	r3, #18
 8001a40:	18fb      	adds	r3, r7, r3
 8001a42:	881b      	ldrh	r3, [r3, #0]
 8001a44:	2280      	movs	r2, #128	; 0x80
 8001a46:	4013      	ands	r3, r2
 8001a48:	d04f      	beq.n	8001aea <PCD_EP_ISR_Handler+0x572>
      {
        ep = &hpcd->IN_ep[epindex];
 8001a4a:	2115      	movs	r1, #21
 8001a4c:	187b      	adds	r3, r7, r1
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	015b      	lsls	r3, r3, #5
 8001a52:	3328      	adds	r3, #40	; 0x28
 8001a54:	687a      	ldr	r2, [r7, #4]
 8001a56:	18d3      	adds	r3, r2, r3
 8001a58:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	001a      	movs	r2, r3
 8001a60:	187b      	adds	r3, r7, r1
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	18d3      	adds	r3, r2, r3
 8001a68:	881b      	ldrh	r3, [r3, #0]
 8001a6a:	b29b      	uxth	r3, r3
 8001a6c:	4a2a      	ldr	r2, [pc, #168]	; (8001b18 <PCD_EP_ISR_Handler+0x5a0>)
 8001a6e:	4013      	ands	r3, r2
 8001a70:	b29c      	uxth	r4, r3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	001a      	movs	r2, r3
 8001a78:	187b      	adds	r3, r7, r1
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	18d3      	adds	r3, r2, r3
 8001a80:	4a26      	ldr	r2, [pc, #152]	; (8001b1c <PCD_EP_ISR_Handler+0x5a4>)
 8001a82:	4322      	orrs	r2, r4
 8001a84:	b292      	uxth	r2, r2
 8001a86:	801a      	strh	r2, [r3, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	2250      	movs	r2, #80	; 0x50
 8001a8e:	5a9b      	ldrh	r3, [r3, r2]
 8001a90:	b29b      	uxth	r3, r3
 8001a92:	001a      	movs	r2, r3
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	00db      	lsls	r3, r3, #3
 8001a9a:	18d2      	adds	r2, r2, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	18d3      	adds	r3, r2, r3
 8001aa2:	4a19      	ldr	r2, [pc, #100]	; (8001b08 <PCD_EP_ISR_Handler+0x590>)
 8001aa4:	4694      	mov	ip, r2
 8001aa6:	4463      	add	r3, ip
 8001aa8:	881b      	ldrh	r3, [r3, #0]
 8001aaa:	059b      	lsls	r3, r3, #22
 8001aac:	0d9a      	lsrs	r2, r3, #22
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	695a      	ldr	r2, [r3, #20]
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	69db      	ldr	r3, [r3, #28]
 8001aba:	18d2      	adds	r2, r2, r3
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	699b      	ldr	r3, [r3, #24]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d107      	bne.n	8001ad8 <PCD_EP_ISR_Handler+0x560>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	781a      	ldrb	r2, [r3, #0]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	0011      	movs	r1, r2
 8001ad0:	0018      	movs	r0, r3
 8001ad2:	f00e fe9d 	bl	8010810 <HAL_PCD_DataInStageCallback>
 8001ad6:	e008      	b.n	8001aea <PCD_EP_ISR_Handler+0x572>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	7819      	ldrb	r1, [r3, #0]
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	695a      	ldr	r2, [r3, #20]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	699b      	ldr	r3, [r3, #24]
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f7ff fc49 	bl	800137c <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	2244      	movs	r2, #68	; 0x44
 8001af0:	5a9b      	ldrh	r3, [r3, r2]
 8001af2:	b29b      	uxth	r3, r3
 8001af4:	b21b      	sxth	r3, r3
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	da00      	bge.n	8001afc <PCD_EP_ISR_Handler+0x584>
 8001afa:	e542      	b.n	8001582 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 8001afc:	2300      	movs	r3, #0
}
 8001afe:	0018      	movs	r0, r3
 8001b00:	46bd      	mov	sp, r7
 8001b02:	b009      	add	sp, #36	; 0x24
 8001b04:	bd90      	pop	{r4, r7, pc}
 8001b06:	46c0      	nop			; (mov r8, r8)
 8001b08:	00000402 	.word	0x00000402
 8001b0c:	00000406 	.word	0x00000406
 8001b10:	ffff8f8f 	.word	0xffff8f8f
 8001b14:	ffff80c0 	.word	0xffff80c0
 8001b18:	ffff8f0f 	.word	0xffff8f0f
 8001b1c:	ffff8000 	.word	0xffff8000

08001b20 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8001b20:	b590      	push	{r4, r7, lr}
 8001b22:	b087      	sub	sp, #28
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	60f8      	str	r0, [r7, #12]
 8001b28:	0008      	movs	r0, r1
 8001b2a:	0011      	movs	r1, r2
 8001b2c:	607b      	str	r3, [r7, #4]
 8001b2e:	240a      	movs	r4, #10
 8001b30:	193b      	adds	r3, r7, r4
 8001b32:	1c02      	adds	r2, r0, #0
 8001b34:	801a      	strh	r2, [r3, #0]
 8001b36:	2308      	movs	r3, #8
 8001b38:	18fb      	adds	r3, r7, r3
 8001b3a:	1c0a      	adds	r2, r1, #0
 8001b3c:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8001b3e:	193b      	adds	r3, r7, r4
 8001b40:	881b      	ldrh	r3, [r3, #0]
 8001b42:	2280      	movs	r2, #128	; 0x80
 8001b44:	4013      	ands	r3, r2
 8001b46:	b29b      	uxth	r3, r3
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d00a      	beq.n	8001b62 <HAL_PCDEx_PMAConfig+0x42>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b4c:	230a      	movs	r3, #10
 8001b4e:	18fb      	adds	r3, r7, r3
 8001b50:	881b      	ldrh	r3, [r3, #0]
 8001b52:	2207      	movs	r2, #7
 8001b54:	4013      	ands	r3, r2
 8001b56:	015b      	lsls	r3, r3, #5
 8001b58:	3328      	adds	r3, #40	; 0x28
 8001b5a:	68fa      	ldr	r2, [r7, #12]
 8001b5c:	18d3      	adds	r3, r2, r3
 8001b5e:	617b      	str	r3, [r7, #20]
 8001b60:	e008      	b.n	8001b74 <HAL_PCDEx_PMAConfig+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001b62:	230a      	movs	r3, #10
 8001b64:	18fb      	adds	r3, r7, r3
 8001b66:	881b      	ldrh	r3, [r3, #0]
 8001b68:	015b      	lsls	r3, r3, #5
 8001b6a:	3329      	adds	r3, #41	; 0x29
 8001b6c:	33ff      	adds	r3, #255	; 0xff
 8001b6e:	68fa      	ldr	r2, [r7, #12]
 8001b70:	18d3      	adds	r3, r2, r3
 8001b72:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8001b74:	2308      	movs	r3, #8
 8001b76:	18fb      	adds	r3, r7, r3
 8001b78:	881b      	ldrh	r3, [r3, #0]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d107      	bne.n	8001b8e <HAL_PCDEx_PMAConfig+0x6e>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	2200      	movs	r2, #0
 8001b82:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	b29a      	uxth	r2, r3
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	80da      	strh	r2, [r3, #6]
 8001b8c:	e00b      	b.n	8001ba6 <HAL_PCDEx_PMAConfig+0x86>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	2201      	movs	r2, #1
 8001b92:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	b29a      	uxth	r2, r3
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	0c1b      	lsrs	r3, r3, #16
 8001ba0:	b29a      	uxth	r2, r3
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8001ba6:	2300      	movs	r3, #0
}
 8001ba8:	0018      	movs	r0, r3
 8001baa:	46bd      	mov	sp, r7
 8001bac:	b007      	add	sp, #28
 8001bae:	bd90      	pop	{r4, r7, pc}

08001bb0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	239a      	movs	r3, #154	; 0x9a
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	2101      	movs	r1, #1
 8001bc6:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	2398      	movs	r3, #152	; 0x98
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	2100      	movs	r1, #0
 8001bd0:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	2254      	movs	r2, #84	; 0x54
 8001bd6:	5a9b      	ldrh	r3, [r3, r2]
 8001bd8:	b29b      	uxth	r3, r3
 8001bda:	2201      	movs	r2, #1
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	b299      	uxth	r1, r3
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	2254      	movs	r2, #84	; 0x54
 8001be4:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	2254      	movs	r2, #84	; 0x54
 8001bea:	5a9b      	ldrh	r3, [r3, r2]
 8001bec:	b29b      	uxth	r3, r3
 8001bee:	2202      	movs	r2, #2
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	b299      	uxth	r1, r3
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	2254      	movs	r2, #84	; 0x54
 8001bf8:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8001bfa:	2300      	movs	r3, #0
}
 8001bfc:	0018      	movs	r0, r3
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	b004      	add	sp, #16
 8001c02:	bd80      	pop	{r7, pc}

08001c04 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	000a      	movs	r2, r1
 8001c0e:	1cfb      	adds	r3, r7, #3
 8001c10:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8001c12:	46c0      	nop			; (mov r8, r8)
 8001c14:	46bd      	mov	sp, r7
 8001c16:	b002      	add	sp, #8
 8001c18:	bd80      	pop	{r7, pc}
	...

08001c1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b088      	sub	sp, #32
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d102      	bne.n	8001c30 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	f000 fb76 	bl	800231c <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	2201      	movs	r2, #1
 8001c36:	4013      	ands	r3, r2
 8001c38:	d100      	bne.n	8001c3c <HAL_RCC_OscConfig+0x20>
 8001c3a:	e08e      	b.n	8001d5a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001c3c:	4bc5      	ldr	r3, [pc, #788]	; (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	220c      	movs	r2, #12
 8001c42:	4013      	ands	r3, r2
 8001c44:	2b04      	cmp	r3, #4
 8001c46:	d00e      	beq.n	8001c66 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c48:	4bc2      	ldr	r3, [pc, #776]	; (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	220c      	movs	r2, #12
 8001c4e:	4013      	ands	r3, r2
 8001c50:	2b08      	cmp	r3, #8
 8001c52:	d117      	bne.n	8001c84 <HAL_RCC_OscConfig+0x68>
 8001c54:	4bbf      	ldr	r3, [pc, #764]	; (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001c56:	685a      	ldr	r2, [r3, #4]
 8001c58:	23c0      	movs	r3, #192	; 0xc0
 8001c5a:	025b      	lsls	r3, r3, #9
 8001c5c:	401a      	ands	r2, r3
 8001c5e:	2380      	movs	r3, #128	; 0x80
 8001c60:	025b      	lsls	r3, r3, #9
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d10e      	bne.n	8001c84 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c66:	4bbb      	ldr	r3, [pc, #748]	; (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	2380      	movs	r3, #128	; 0x80
 8001c6c:	029b      	lsls	r3, r3, #10
 8001c6e:	4013      	ands	r3, r2
 8001c70:	d100      	bne.n	8001c74 <HAL_RCC_OscConfig+0x58>
 8001c72:	e071      	b.n	8001d58 <HAL_RCC_OscConfig+0x13c>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d000      	beq.n	8001c7e <HAL_RCC_OscConfig+0x62>
 8001c7c:	e06c      	b.n	8001d58 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	f000 fb4c 	bl	800231c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d107      	bne.n	8001c9c <HAL_RCC_OscConfig+0x80>
 8001c8c:	4bb1      	ldr	r3, [pc, #708]	; (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	4bb0      	ldr	r3, [pc, #704]	; (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001c92:	2180      	movs	r1, #128	; 0x80
 8001c94:	0249      	lsls	r1, r1, #9
 8001c96:	430a      	orrs	r2, r1
 8001c98:	601a      	str	r2, [r3, #0]
 8001c9a:	e02f      	b.n	8001cfc <HAL_RCC_OscConfig+0xe0>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d10c      	bne.n	8001cbe <HAL_RCC_OscConfig+0xa2>
 8001ca4:	4bab      	ldr	r3, [pc, #684]	; (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	4baa      	ldr	r3, [pc, #680]	; (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001caa:	49ab      	ldr	r1, [pc, #684]	; (8001f58 <HAL_RCC_OscConfig+0x33c>)
 8001cac:	400a      	ands	r2, r1
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	4ba8      	ldr	r3, [pc, #672]	; (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	4ba7      	ldr	r3, [pc, #668]	; (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001cb6:	49a9      	ldr	r1, [pc, #676]	; (8001f5c <HAL_RCC_OscConfig+0x340>)
 8001cb8:	400a      	ands	r2, r1
 8001cba:	601a      	str	r2, [r3, #0]
 8001cbc:	e01e      	b.n	8001cfc <HAL_RCC_OscConfig+0xe0>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	2b05      	cmp	r3, #5
 8001cc4:	d10e      	bne.n	8001ce4 <HAL_RCC_OscConfig+0xc8>
 8001cc6:	4ba3      	ldr	r3, [pc, #652]	; (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	4ba2      	ldr	r3, [pc, #648]	; (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001ccc:	2180      	movs	r1, #128	; 0x80
 8001cce:	02c9      	lsls	r1, r1, #11
 8001cd0:	430a      	orrs	r2, r1
 8001cd2:	601a      	str	r2, [r3, #0]
 8001cd4:	4b9f      	ldr	r3, [pc, #636]	; (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	4b9e      	ldr	r3, [pc, #632]	; (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001cda:	2180      	movs	r1, #128	; 0x80
 8001cdc:	0249      	lsls	r1, r1, #9
 8001cde:	430a      	orrs	r2, r1
 8001ce0:	601a      	str	r2, [r3, #0]
 8001ce2:	e00b      	b.n	8001cfc <HAL_RCC_OscConfig+0xe0>
 8001ce4:	4b9b      	ldr	r3, [pc, #620]	; (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	4b9a      	ldr	r3, [pc, #616]	; (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001cea:	499b      	ldr	r1, [pc, #620]	; (8001f58 <HAL_RCC_OscConfig+0x33c>)
 8001cec:	400a      	ands	r2, r1
 8001cee:	601a      	str	r2, [r3, #0]
 8001cf0:	4b98      	ldr	r3, [pc, #608]	; (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	4b97      	ldr	r3, [pc, #604]	; (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001cf6:	4999      	ldr	r1, [pc, #612]	; (8001f5c <HAL_RCC_OscConfig+0x340>)
 8001cf8:	400a      	ands	r2, r1
 8001cfa:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d014      	beq.n	8001d2e <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d04:	f7fe fd0a 	bl	800071c <HAL_GetTick>
 8001d08:	0003      	movs	r3, r0
 8001d0a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d0c:	e008      	b.n	8001d20 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d0e:	f7fe fd05 	bl	800071c <HAL_GetTick>
 8001d12:	0002      	movs	r2, r0
 8001d14:	69bb      	ldr	r3, [r7, #24]
 8001d16:	1ad3      	subs	r3, r2, r3
 8001d18:	2b64      	cmp	r3, #100	; 0x64
 8001d1a:	d901      	bls.n	8001d20 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	e2fd      	b.n	800231c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d20:	4b8c      	ldr	r3, [pc, #560]	; (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	2380      	movs	r3, #128	; 0x80
 8001d26:	029b      	lsls	r3, r3, #10
 8001d28:	4013      	ands	r3, r2
 8001d2a:	d0f0      	beq.n	8001d0e <HAL_RCC_OscConfig+0xf2>
 8001d2c:	e015      	b.n	8001d5a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d2e:	f7fe fcf5 	bl	800071c <HAL_GetTick>
 8001d32:	0003      	movs	r3, r0
 8001d34:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d36:	e008      	b.n	8001d4a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d38:	f7fe fcf0 	bl	800071c <HAL_GetTick>
 8001d3c:	0002      	movs	r2, r0
 8001d3e:	69bb      	ldr	r3, [r7, #24]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	2b64      	cmp	r3, #100	; 0x64
 8001d44:	d901      	bls.n	8001d4a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e2e8      	b.n	800231c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d4a:	4b82      	ldr	r3, [pc, #520]	; (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	2380      	movs	r3, #128	; 0x80
 8001d50:	029b      	lsls	r3, r3, #10
 8001d52:	4013      	ands	r3, r2
 8001d54:	d1f0      	bne.n	8001d38 <HAL_RCC_OscConfig+0x11c>
 8001d56:	e000      	b.n	8001d5a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d58:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	2202      	movs	r2, #2
 8001d60:	4013      	ands	r3, r2
 8001d62:	d100      	bne.n	8001d66 <HAL_RCC_OscConfig+0x14a>
 8001d64:	e06c      	b.n	8001e40 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001d66:	4b7b      	ldr	r3, [pc, #492]	; (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	220c      	movs	r2, #12
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	d00e      	beq.n	8001d8e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001d70:	4b78      	ldr	r3, [pc, #480]	; (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	220c      	movs	r2, #12
 8001d76:	4013      	ands	r3, r2
 8001d78:	2b08      	cmp	r3, #8
 8001d7a:	d11f      	bne.n	8001dbc <HAL_RCC_OscConfig+0x1a0>
 8001d7c:	4b75      	ldr	r3, [pc, #468]	; (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001d7e:	685a      	ldr	r2, [r3, #4]
 8001d80:	23c0      	movs	r3, #192	; 0xc0
 8001d82:	025b      	lsls	r3, r3, #9
 8001d84:	401a      	ands	r2, r3
 8001d86:	2380      	movs	r3, #128	; 0x80
 8001d88:	021b      	lsls	r3, r3, #8
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d116      	bne.n	8001dbc <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d8e:	4b71      	ldr	r3, [pc, #452]	; (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	2202      	movs	r2, #2
 8001d94:	4013      	ands	r3, r2
 8001d96:	d005      	beq.n	8001da4 <HAL_RCC_OscConfig+0x188>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d001      	beq.n	8001da4 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e2bb      	b.n	800231c <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001da4:	4b6b      	ldr	r3, [pc, #428]	; (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	22f8      	movs	r2, #248	; 0xf8
 8001daa:	4393      	bics	r3, r2
 8001dac:	0019      	movs	r1, r3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	691b      	ldr	r3, [r3, #16]
 8001db2:	00da      	lsls	r2, r3, #3
 8001db4:	4b67      	ldr	r3, [pc, #412]	; (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001db6:	430a      	orrs	r2, r1
 8001db8:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dba:	e041      	b.n	8001e40 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d024      	beq.n	8001e0e <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dc4:	4b63      	ldr	r3, [pc, #396]	; (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	4b62      	ldr	r3, [pc, #392]	; (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001dca:	2101      	movs	r1, #1
 8001dcc:	430a      	orrs	r2, r1
 8001dce:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd0:	f7fe fca4 	bl	800071c <HAL_GetTick>
 8001dd4:	0003      	movs	r3, r0
 8001dd6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dd8:	e008      	b.n	8001dec <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dda:	f7fe fc9f 	bl	800071c <HAL_GetTick>
 8001dde:	0002      	movs	r2, r0
 8001de0:	69bb      	ldr	r3, [r7, #24]
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	d901      	bls.n	8001dec <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001de8:	2303      	movs	r3, #3
 8001dea:	e297      	b.n	800231c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dec:	4b59      	ldr	r3, [pc, #356]	; (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2202      	movs	r2, #2
 8001df2:	4013      	ands	r3, r2
 8001df4:	d0f1      	beq.n	8001dda <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001df6:	4b57      	ldr	r3, [pc, #348]	; (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	22f8      	movs	r2, #248	; 0xf8
 8001dfc:	4393      	bics	r3, r2
 8001dfe:	0019      	movs	r1, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	691b      	ldr	r3, [r3, #16]
 8001e04:	00da      	lsls	r2, r3, #3
 8001e06:	4b53      	ldr	r3, [pc, #332]	; (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001e08:	430a      	orrs	r2, r1
 8001e0a:	601a      	str	r2, [r3, #0]
 8001e0c:	e018      	b.n	8001e40 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e0e:	4b51      	ldr	r3, [pc, #324]	; (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	4b50      	ldr	r3, [pc, #320]	; (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001e14:	2101      	movs	r1, #1
 8001e16:	438a      	bics	r2, r1
 8001e18:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e1a:	f7fe fc7f 	bl	800071c <HAL_GetTick>
 8001e1e:	0003      	movs	r3, r0
 8001e20:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e22:	e008      	b.n	8001e36 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e24:	f7fe fc7a 	bl	800071c <HAL_GetTick>
 8001e28:	0002      	movs	r2, r0
 8001e2a:	69bb      	ldr	r3, [r7, #24]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e272      	b.n	800231c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e36:	4b47      	ldr	r3, [pc, #284]	; (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	2202      	movs	r2, #2
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	d1f1      	bne.n	8001e24 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2208      	movs	r2, #8
 8001e46:	4013      	ands	r3, r2
 8001e48:	d036      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	69db      	ldr	r3, [r3, #28]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d019      	beq.n	8001e86 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e52:	4b40      	ldr	r3, [pc, #256]	; (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001e54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e56:	4b3f      	ldr	r3, [pc, #252]	; (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001e58:	2101      	movs	r1, #1
 8001e5a:	430a      	orrs	r2, r1
 8001e5c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e5e:	f7fe fc5d 	bl	800071c <HAL_GetTick>
 8001e62:	0003      	movs	r3, r0
 8001e64:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e66:	e008      	b.n	8001e7a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e68:	f7fe fc58 	bl	800071c <HAL_GetTick>
 8001e6c:	0002      	movs	r2, r0
 8001e6e:	69bb      	ldr	r3, [r7, #24]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d901      	bls.n	8001e7a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e250      	b.n	800231c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e7a:	4b36      	ldr	r3, [pc, #216]	; (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7e:	2202      	movs	r2, #2
 8001e80:	4013      	ands	r3, r2
 8001e82:	d0f1      	beq.n	8001e68 <HAL_RCC_OscConfig+0x24c>
 8001e84:	e018      	b.n	8001eb8 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e86:	4b33      	ldr	r3, [pc, #204]	; (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001e88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e8a:	4b32      	ldr	r3, [pc, #200]	; (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001e8c:	2101      	movs	r1, #1
 8001e8e:	438a      	bics	r2, r1
 8001e90:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e92:	f7fe fc43 	bl	800071c <HAL_GetTick>
 8001e96:	0003      	movs	r3, r0
 8001e98:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e9a:	e008      	b.n	8001eae <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e9c:	f7fe fc3e 	bl	800071c <HAL_GetTick>
 8001ea0:	0002      	movs	r2, r0
 8001ea2:	69bb      	ldr	r3, [r7, #24]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d901      	bls.n	8001eae <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e236      	b.n	800231c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eae:	4b29      	ldr	r3, [pc, #164]	; (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb2:	2202      	movs	r2, #2
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	d1f1      	bne.n	8001e9c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	2204      	movs	r2, #4
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	d100      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x2a8>
 8001ec2:	e0b5      	b.n	8002030 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ec4:	231f      	movs	r3, #31
 8001ec6:	18fb      	adds	r3, r7, r3
 8001ec8:	2200      	movs	r2, #0
 8001eca:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ecc:	4b21      	ldr	r3, [pc, #132]	; (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001ece:	69da      	ldr	r2, [r3, #28]
 8001ed0:	2380      	movs	r3, #128	; 0x80
 8001ed2:	055b      	lsls	r3, r3, #21
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	d111      	bne.n	8001efc <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ed8:	4b1e      	ldr	r3, [pc, #120]	; (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001eda:	69da      	ldr	r2, [r3, #28]
 8001edc:	4b1d      	ldr	r3, [pc, #116]	; (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001ede:	2180      	movs	r1, #128	; 0x80
 8001ee0:	0549      	lsls	r1, r1, #21
 8001ee2:	430a      	orrs	r2, r1
 8001ee4:	61da      	str	r2, [r3, #28]
 8001ee6:	4b1b      	ldr	r3, [pc, #108]	; (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001ee8:	69da      	ldr	r2, [r3, #28]
 8001eea:	2380      	movs	r3, #128	; 0x80
 8001eec:	055b      	lsls	r3, r3, #21
 8001eee:	4013      	ands	r3, r2
 8001ef0:	60fb      	str	r3, [r7, #12]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001ef4:	231f      	movs	r3, #31
 8001ef6:	18fb      	adds	r3, r7, r3
 8001ef8:	2201      	movs	r2, #1
 8001efa:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001efc:	4b18      	ldr	r3, [pc, #96]	; (8001f60 <HAL_RCC_OscConfig+0x344>)
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	2380      	movs	r3, #128	; 0x80
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	4013      	ands	r3, r2
 8001f06:	d11a      	bne.n	8001f3e <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f08:	4b15      	ldr	r3, [pc, #84]	; (8001f60 <HAL_RCC_OscConfig+0x344>)
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	4b14      	ldr	r3, [pc, #80]	; (8001f60 <HAL_RCC_OscConfig+0x344>)
 8001f0e:	2180      	movs	r1, #128	; 0x80
 8001f10:	0049      	lsls	r1, r1, #1
 8001f12:	430a      	orrs	r2, r1
 8001f14:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f16:	f7fe fc01 	bl	800071c <HAL_GetTick>
 8001f1a:	0003      	movs	r3, r0
 8001f1c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f1e:	e008      	b.n	8001f32 <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f20:	f7fe fbfc 	bl	800071c <HAL_GetTick>
 8001f24:	0002      	movs	r2, r0
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	2b64      	cmp	r3, #100	; 0x64
 8001f2c:	d901      	bls.n	8001f32 <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	e1f4      	b.n	800231c <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f32:	4b0b      	ldr	r3, [pc, #44]	; (8001f60 <HAL_RCC_OscConfig+0x344>)
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	2380      	movs	r3, #128	; 0x80
 8001f38:	005b      	lsls	r3, r3, #1
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	d0f0      	beq.n	8001f20 <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d10e      	bne.n	8001f64 <HAL_RCC_OscConfig+0x348>
 8001f46:	4b03      	ldr	r3, [pc, #12]	; (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001f48:	6a1a      	ldr	r2, [r3, #32]
 8001f4a:	4b02      	ldr	r3, [pc, #8]	; (8001f54 <HAL_RCC_OscConfig+0x338>)
 8001f4c:	2101      	movs	r1, #1
 8001f4e:	430a      	orrs	r2, r1
 8001f50:	621a      	str	r2, [r3, #32]
 8001f52:	e035      	b.n	8001fc0 <HAL_RCC_OscConfig+0x3a4>
 8001f54:	40021000 	.word	0x40021000
 8001f58:	fffeffff 	.word	0xfffeffff
 8001f5c:	fffbffff 	.word	0xfffbffff
 8001f60:	40007000 	.word	0x40007000
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d10c      	bne.n	8001f86 <HAL_RCC_OscConfig+0x36a>
 8001f6c:	4bca      	ldr	r3, [pc, #808]	; (8002298 <HAL_RCC_OscConfig+0x67c>)
 8001f6e:	6a1a      	ldr	r2, [r3, #32]
 8001f70:	4bc9      	ldr	r3, [pc, #804]	; (8002298 <HAL_RCC_OscConfig+0x67c>)
 8001f72:	2101      	movs	r1, #1
 8001f74:	438a      	bics	r2, r1
 8001f76:	621a      	str	r2, [r3, #32]
 8001f78:	4bc7      	ldr	r3, [pc, #796]	; (8002298 <HAL_RCC_OscConfig+0x67c>)
 8001f7a:	6a1a      	ldr	r2, [r3, #32]
 8001f7c:	4bc6      	ldr	r3, [pc, #792]	; (8002298 <HAL_RCC_OscConfig+0x67c>)
 8001f7e:	2104      	movs	r1, #4
 8001f80:	438a      	bics	r2, r1
 8001f82:	621a      	str	r2, [r3, #32]
 8001f84:	e01c      	b.n	8001fc0 <HAL_RCC_OscConfig+0x3a4>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	2b05      	cmp	r3, #5
 8001f8c:	d10c      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x38c>
 8001f8e:	4bc2      	ldr	r3, [pc, #776]	; (8002298 <HAL_RCC_OscConfig+0x67c>)
 8001f90:	6a1a      	ldr	r2, [r3, #32]
 8001f92:	4bc1      	ldr	r3, [pc, #772]	; (8002298 <HAL_RCC_OscConfig+0x67c>)
 8001f94:	2104      	movs	r1, #4
 8001f96:	430a      	orrs	r2, r1
 8001f98:	621a      	str	r2, [r3, #32]
 8001f9a:	4bbf      	ldr	r3, [pc, #764]	; (8002298 <HAL_RCC_OscConfig+0x67c>)
 8001f9c:	6a1a      	ldr	r2, [r3, #32]
 8001f9e:	4bbe      	ldr	r3, [pc, #760]	; (8002298 <HAL_RCC_OscConfig+0x67c>)
 8001fa0:	2101      	movs	r1, #1
 8001fa2:	430a      	orrs	r2, r1
 8001fa4:	621a      	str	r2, [r3, #32]
 8001fa6:	e00b      	b.n	8001fc0 <HAL_RCC_OscConfig+0x3a4>
 8001fa8:	4bbb      	ldr	r3, [pc, #748]	; (8002298 <HAL_RCC_OscConfig+0x67c>)
 8001faa:	6a1a      	ldr	r2, [r3, #32]
 8001fac:	4bba      	ldr	r3, [pc, #744]	; (8002298 <HAL_RCC_OscConfig+0x67c>)
 8001fae:	2101      	movs	r1, #1
 8001fb0:	438a      	bics	r2, r1
 8001fb2:	621a      	str	r2, [r3, #32]
 8001fb4:	4bb8      	ldr	r3, [pc, #736]	; (8002298 <HAL_RCC_OscConfig+0x67c>)
 8001fb6:	6a1a      	ldr	r2, [r3, #32]
 8001fb8:	4bb7      	ldr	r3, [pc, #732]	; (8002298 <HAL_RCC_OscConfig+0x67c>)
 8001fba:	2104      	movs	r1, #4
 8001fbc:	438a      	bics	r2, r1
 8001fbe:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d014      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fc8:	f7fe fba8 	bl	800071c <HAL_GetTick>
 8001fcc:	0003      	movs	r3, r0
 8001fce:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fd0:	e009      	b.n	8001fe6 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fd2:	f7fe fba3 	bl	800071c <HAL_GetTick>
 8001fd6:	0002      	movs	r2, r0
 8001fd8:	69bb      	ldr	r3, [r7, #24]
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	4aaf      	ldr	r2, [pc, #700]	; (800229c <HAL_RCC_OscConfig+0x680>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d901      	bls.n	8001fe6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e19a      	b.n	800231c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fe6:	4bac      	ldr	r3, [pc, #688]	; (8002298 <HAL_RCC_OscConfig+0x67c>)
 8001fe8:	6a1b      	ldr	r3, [r3, #32]
 8001fea:	2202      	movs	r2, #2
 8001fec:	4013      	ands	r3, r2
 8001fee:	d0f0      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x3b6>
 8001ff0:	e013      	b.n	800201a <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ff2:	f7fe fb93 	bl	800071c <HAL_GetTick>
 8001ff6:	0003      	movs	r3, r0
 8001ff8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ffa:	e009      	b.n	8002010 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ffc:	f7fe fb8e 	bl	800071c <HAL_GetTick>
 8002000:	0002      	movs	r2, r0
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	4aa5      	ldr	r2, [pc, #660]	; (800229c <HAL_RCC_OscConfig+0x680>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d901      	bls.n	8002010 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800200c:	2303      	movs	r3, #3
 800200e:	e185      	b.n	800231c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002010:	4ba1      	ldr	r3, [pc, #644]	; (8002298 <HAL_RCC_OscConfig+0x67c>)
 8002012:	6a1b      	ldr	r3, [r3, #32]
 8002014:	2202      	movs	r2, #2
 8002016:	4013      	ands	r3, r2
 8002018:	d1f0      	bne.n	8001ffc <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800201a:	231f      	movs	r3, #31
 800201c:	18fb      	adds	r3, r7, r3
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	2b01      	cmp	r3, #1
 8002022:	d105      	bne.n	8002030 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002024:	4b9c      	ldr	r3, [pc, #624]	; (8002298 <HAL_RCC_OscConfig+0x67c>)
 8002026:	69da      	ldr	r2, [r3, #28]
 8002028:	4b9b      	ldr	r3, [pc, #620]	; (8002298 <HAL_RCC_OscConfig+0x67c>)
 800202a:	499d      	ldr	r1, [pc, #628]	; (80022a0 <HAL_RCC_OscConfig+0x684>)
 800202c:	400a      	ands	r2, r1
 800202e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	2210      	movs	r2, #16
 8002036:	4013      	ands	r3, r2
 8002038:	d063      	beq.n	8002102 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	695b      	ldr	r3, [r3, #20]
 800203e:	2b01      	cmp	r3, #1
 8002040:	d12a      	bne.n	8002098 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002042:	4b95      	ldr	r3, [pc, #596]	; (8002298 <HAL_RCC_OscConfig+0x67c>)
 8002044:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002046:	4b94      	ldr	r3, [pc, #592]	; (8002298 <HAL_RCC_OscConfig+0x67c>)
 8002048:	2104      	movs	r1, #4
 800204a:	430a      	orrs	r2, r1
 800204c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800204e:	4b92      	ldr	r3, [pc, #584]	; (8002298 <HAL_RCC_OscConfig+0x67c>)
 8002050:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002052:	4b91      	ldr	r3, [pc, #580]	; (8002298 <HAL_RCC_OscConfig+0x67c>)
 8002054:	2101      	movs	r1, #1
 8002056:	430a      	orrs	r2, r1
 8002058:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800205a:	f7fe fb5f 	bl	800071c <HAL_GetTick>
 800205e:	0003      	movs	r3, r0
 8002060:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002062:	e008      	b.n	8002076 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002064:	f7fe fb5a 	bl	800071c <HAL_GetTick>
 8002068:	0002      	movs	r2, r0
 800206a:	69bb      	ldr	r3, [r7, #24]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	2b02      	cmp	r3, #2
 8002070:	d901      	bls.n	8002076 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e152      	b.n	800231c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002076:	4b88      	ldr	r3, [pc, #544]	; (8002298 <HAL_RCC_OscConfig+0x67c>)
 8002078:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800207a:	2202      	movs	r2, #2
 800207c:	4013      	ands	r3, r2
 800207e:	d0f1      	beq.n	8002064 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002080:	4b85      	ldr	r3, [pc, #532]	; (8002298 <HAL_RCC_OscConfig+0x67c>)
 8002082:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002084:	22f8      	movs	r2, #248	; 0xf8
 8002086:	4393      	bics	r3, r2
 8002088:	0019      	movs	r1, r3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	699b      	ldr	r3, [r3, #24]
 800208e:	00da      	lsls	r2, r3, #3
 8002090:	4b81      	ldr	r3, [pc, #516]	; (8002298 <HAL_RCC_OscConfig+0x67c>)
 8002092:	430a      	orrs	r2, r1
 8002094:	635a      	str	r2, [r3, #52]	; 0x34
 8002096:	e034      	b.n	8002102 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	695b      	ldr	r3, [r3, #20]
 800209c:	3305      	adds	r3, #5
 800209e:	d111      	bne.n	80020c4 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80020a0:	4b7d      	ldr	r3, [pc, #500]	; (8002298 <HAL_RCC_OscConfig+0x67c>)
 80020a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020a4:	4b7c      	ldr	r3, [pc, #496]	; (8002298 <HAL_RCC_OscConfig+0x67c>)
 80020a6:	2104      	movs	r1, #4
 80020a8:	438a      	bics	r2, r1
 80020aa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80020ac:	4b7a      	ldr	r3, [pc, #488]	; (8002298 <HAL_RCC_OscConfig+0x67c>)
 80020ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020b0:	22f8      	movs	r2, #248	; 0xf8
 80020b2:	4393      	bics	r3, r2
 80020b4:	0019      	movs	r1, r3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	699b      	ldr	r3, [r3, #24]
 80020ba:	00da      	lsls	r2, r3, #3
 80020bc:	4b76      	ldr	r3, [pc, #472]	; (8002298 <HAL_RCC_OscConfig+0x67c>)
 80020be:	430a      	orrs	r2, r1
 80020c0:	635a      	str	r2, [r3, #52]	; 0x34
 80020c2:	e01e      	b.n	8002102 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80020c4:	4b74      	ldr	r3, [pc, #464]	; (8002298 <HAL_RCC_OscConfig+0x67c>)
 80020c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020c8:	4b73      	ldr	r3, [pc, #460]	; (8002298 <HAL_RCC_OscConfig+0x67c>)
 80020ca:	2104      	movs	r1, #4
 80020cc:	430a      	orrs	r2, r1
 80020ce:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80020d0:	4b71      	ldr	r3, [pc, #452]	; (8002298 <HAL_RCC_OscConfig+0x67c>)
 80020d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020d4:	4b70      	ldr	r3, [pc, #448]	; (8002298 <HAL_RCC_OscConfig+0x67c>)
 80020d6:	2101      	movs	r1, #1
 80020d8:	438a      	bics	r2, r1
 80020da:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020dc:	f7fe fb1e 	bl	800071c <HAL_GetTick>
 80020e0:	0003      	movs	r3, r0
 80020e2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80020e4:	e008      	b.n	80020f8 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80020e6:	f7fe fb19 	bl	800071c <HAL_GetTick>
 80020ea:	0002      	movs	r2, r0
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	2b02      	cmp	r3, #2
 80020f2:	d901      	bls.n	80020f8 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80020f4:	2303      	movs	r3, #3
 80020f6:	e111      	b.n	800231c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80020f8:	4b67      	ldr	r3, [pc, #412]	; (8002298 <HAL_RCC_OscConfig+0x67c>)
 80020fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020fc:	2202      	movs	r2, #2
 80020fe:	4013      	ands	r3, r2
 8002100:	d1f1      	bne.n	80020e6 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	2220      	movs	r2, #32
 8002108:	4013      	ands	r3, r2
 800210a:	d05c      	beq.n	80021c6 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800210c:	4b62      	ldr	r3, [pc, #392]	; (8002298 <HAL_RCC_OscConfig+0x67c>)
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	220c      	movs	r2, #12
 8002112:	4013      	ands	r3, r2
 8002114:	2b0c      	cmp	r3, #12
 8002116:	d00e      	beq.n	8002136 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002118:	4b5f      	ldr	r3, [pc, #380]	; (8002298 <HAL_RCC_OscConfig+0x67c>)
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	220c      	movs	r2, #12
 800211e:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002120:	2b08      	cmp	r3, #8
 8002122:	d114      	bne.n	800214e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002124:	4b5c      	ldr	r3, [pc, #368]	; (8002298 <HAL_RCC_OscConfig+0x67c>)
 8002126:	685a      	ldr	r2, [r3, #4]
 8002128:	23c0      	movs	r3, #192	; 0xc0
 800212a:	025b      	lsls	r3, r3, #9
 800212c:	401a      	ands	r2, r3
 800212e:	23c0      	movs	r3, #192	; 0xc0
 8002130:	025b      	lsls	r3, r3, #9
 8002132:	429a      	cmp	r2, r3
 8002134:	d10b      	bne.n	800214e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002136:	4b58      	ldr	r3, [pc, #352]	; (8002298 <HAL_RCC_OscConfig+0x67c>)
 8002138:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800213a:	2380      	movs	r3, #128	; 0x80
 800213c:	025b      	lsls	r3, r3, #9
 800213e:	4013      	ands	r3, r2
 8002140:	d040      	beq.n	80021c4 <HAL_RCC_OscConfig+0x5a8>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6a1b      	ldr	r3, [r3, #32]
 8002146:	2b01      	cmp	r3, #1
 8002148:	d03c      	beq.n	80021c4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e0e6      	b.n	800231c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6a1b      	ldr	r3, [r3, #32]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d01b      	beq.n	800218e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002156:	4b50      	ldr	r3, [pc, #320]	; (8002298 <HAL_RCC_OscConfig+0x67c>)
 8002158:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800215a:	4b4f      	ldr	r3, [pc, #316]	; (8002298 <HAL_RCC_OscConfig+0x67c>)
 800215c:	2180      	movs	r1, #128	; 0x80
 800215e:	0249      	lsls	r1, r1, #9
 8002160:	430a      	orrs	r2, r1
 8002162:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002164:	f7fe fada 	bl	800071c <HAL_GetTick>
 8002168:	0003      	movs	r3, r0
 800216a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800216c:	e008      	b.n	8002180 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800216e:	f7fe fad5 	bl	800071c <HAL_GetTick>
 8002172:	0002      	movs	r2, r0
 8002174:	69bb      	ldr	r3, [r7, #24]
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	2b02      	cmp	r3, #2
 800217a:	d901      	bls.n	8002180 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 800217c:	2303      	movs	r3, #3
 800217e:	e0cd      	b.n	800231c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002180:	4b45      	ldr	r3, [pc, #276]	; (8002298 <HAL_RCC_OscConfig+0x67c>)
 8002182:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002184:	2380      	movs	r3, #128	; 0x80
 8002186:	025b      	lsls	r3, r3, #9
 8002188:	4013      	ands	r3, r2
 800218a:	d0f0      	beq.n	800216e <HAL_RCC_OscConfig+0x552>
 800218c:	e01b      	b.n	80021c6 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800218e:	4b42      	ldr	r3, [pc, #264]	; (8002298 <HAL_RCC_OscConfig+0x67c>)
 8002190:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002192:	4b41      	ldr	r3, [pc, #260]	; (8002298 <HAL_RCC_OscConfig+0x67c>)
 8002194:	4943      	ldr	r1, [pc, #268]	; (80022a4 <HAL_RCC_OscConfig+0x688>)
 8002196:	400a      	ands	r2, r1
 8002198:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800219a:	f7fe fabf 	bl	800071c <HAL_GetTick>
 800219e:	0003      	movs	r3, r0
 80021a0:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80021a2:	e008      	b.n	80021b6 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021a4:	f7fe faba 	bl	800071c <HAL_GetTick>
 80021a8:	0002      	movs	r2, r0
 80021aa:	69bb      	ldr	r3, [r7, #24]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d901      	bls.n	80021b6 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e0b2      	b.n	800231c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80021b6:	4b38      	ldr	r3, [pc, #224]	; (8002298 <HAL_RCC_OscConfig+0x67c>)
 80021b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021ba:	2380      	movs	r3, #128	; 0x80
 80021bc:	025b      	lsls	r3, r3, #9
 80021be:	4013      	ands	r3, r2
 80021c0:	d1f0      	bne.n	80021a4 <HAL_RCC_OscConfig+0x588>
 80021c2:	e000      	b.n	80021c6 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80021c4:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d100      	bne.n	80021d0 <HAL_RCC_OscConfig+0x5b4>
 80021ce:	e0a4      	b.n	800231a <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021d0:	4b31      	ldr	r3, [pc, #196]	; (8002298 <HAL_RCC_OscConfig+0x67c>)
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	220c      	movs	r2, #12
 80021d6:	4013      	ands	r3, r2
 80021d8:	2b08      	cmp	r3, #8
 80021da:	d100      	bne.n	80021de <HAL_RCC_OscConfig+0x5c2>
 80021dc:	e078      	b.n	80022d0 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d14c      	bne.n	8002280 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021e6:	4b2c      	ldr	r3, [pc, #176]	; (8002298 <HAL_RCC_OscConfig+0x67c>)
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	4b2b      	ldr	r3, [pc, #172]	; (8002298 <HAL_RCC_OscConfig+0x67c>)
 80021ec:	492e      	ldr	r1, [pc, #184]	; (80022a8 <HAL_RCC_OscConfig+0x68c>)
 80021ee:	400a      	ands	r2, r1
 80021f0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f2:	f7fe fa93 	bl	800071c <HAL_GetTick>
 80021f6:	0003      	movs	r3, r0
 80021f8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021fa:	e008      	b.n	800220e <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021fc:	f7fe fa8e 	bl	800071c <HAL_GetTick>
 8002200:	0002      	movs	r2, r0
 8002202:	69bb      	ldr	r3, [r7, #24]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	2b02      	cmp	r3, #2
 8002208:	d901      	bls.n	800220e <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e086      	b.n	800231c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800220e:	4b22      	ldr	r3, [pc, #136]	; (8002298 <HAL_RCC_OscConfig+0x67c>)
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	2380      	movs	r3, #128	; 0x80
 8002214:	049b      	lsls	r3, r3, #18
 8002216:	4013      	ands	r3, r2
 8002218:	d1f0      	bne.n	80021fc <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800221a:	4b1f      	ldr	r3, [pc, #124]	; (8002298 <HAL_RCC_OscConfig+0x67c>)
 800221c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800221e:	220f      	movs	r2, #15
 8002220:	4393      	bics	r3, r2
 8002222:	0019      	movs	r1, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002228:	4b1b      	ldr	r3, [pc, #108]	; (8002298 <HAL_RCC_OscConfig+0x67c>)
 800222a:	430a      	orrs	r2, r1
 800222c:	62da      	str	r2, [r3, #44]	; 0x2c
 800222e:	4b1a      	ldr	r3, [pc, #104]	; (8002298 <HAL_RCC_OscConfig+0x67c>)
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	4a1e      	ldr	r2, [pc, #120]	; (80022ac <HAL_RCC_OscConfig+0x690>)
 8002234:	4013      	ands	r3, r2
 8002236:	0019      	movs	r1, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002240:	431a      	orrs	r2, r3
 8002242:	4b15      	ldr	r3, [pc, #84]	; (8002298 <HAL_RCC_OscConfig+0x67c>)
 8002244:	430a      	orrs	r2, r1
 8002246:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002248:	4b13      	ldr	r3, [pc, #76]	; (8002298 <HAL_RCC_OscConfig+0x67c>)
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	4b12      	ldr	r3, [pc, #72]	; (8002298 <HAL_RCC_OscConfig+0x67c>)
 800224e:	2180      	movs	r1, #128	; 0x80
 8002250:	0449      	lsls	r1, r1, #17
 8002252:	430a      	orrs	r2, r1
 8002254:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002256:	f7fe fa61 	bl	800071c <HAL_GetTick>
 800225a:	0003      	movs	r3, r0
 800225c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800225e:	e008      	b.n	8002272 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002260:	f7fe fa5c 	bl	800071c <HAL_GetTick>
 8002264:	0002      	movs	r2, r0
 8002266:	69bb      	ldr	r3, [r7, #24]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b02      	cmp	r3, #2
 800226c:	d901      	bls.n	8002272 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e054      	b.n	800231c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002272:	4b09      	ldr	r3, [pc, #36]	; (8002298 <HAL_RCC_OscConfig+0x67c>)
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	2380      	movs	r3, #128	; 0x80
 8002278:	049b      	lsls	r3, r3, #18
 800227a:	4013      	ands	r3, r2
 800227c:	d0f0      	beq.n	8002260 <HAL_RCC_OscConfig+0x644>
 800227e:	e04c      	b.n	800231a <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002280:	4b05      	ldr	r3, [pc, #20]	; (8002298 <HAL_RCC_OscConfig+0x67c>)
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	4b04      	ldr	r3, [pc, #16]	; (8002298 <HAL_RCC_OscConfig+0x67c>)
 8002286:	4908      	ldr	r1, [pc, #32]	; (80022a8 <HAL_RCC_OscConfig+0x68c>)
 8002288:	400a      	ands	r2, r1
 800228a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800228c:	f7fe fa46 	bl	800071c <HAL_GetTick>
 8002290:	0003      	movs	r3, r0
 8002292:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002294:	e015      	b.n	80022c2 <HAL_RCC_OscConfig+0x6a6>
 8002296:	46c0      	nop			; (mov r8, r8)
 8002298:	40021000 	.word	0x40021000
 800229c:	00001388 	.word	0x00001388
 80022a0:	efffffff 	.word	0xefffffff
 80022a4:	fffeffff 	.word	0xfffeffff
 80022a8:	feffffff 	.word	0xfeffffff
 80022ac:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022b0:	f7fe fa34 	bl	800071c <HAL_GetTick>
 80022b4:	0002      	movs	r2, r0
 80022b6:	69bb      	ldr	r3, [r7, #24]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d901      	bls.n	80022c2 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e02c      	b.n	800231c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022c2:	4b18      	ldr	r3, [pc, #96]	; (8002324 <HAL_RCC_OscConfig+0x708>)
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	2380      	movs	r3, #128	; 0x80
 80022c8:	049b      	lsls	r3, r3, #18
 80022ca:	4013      	ands	r3, r2
 80022cc:	d1f0      	bne.n	80022b0 <HAL_RCC_OscConfig+0x694>
 80022ce:	e024      	b.n	800231a <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d101      	bne.n	80022dc <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e01f      	b.n	800231c <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80022dc:	4b11      	ldr	r3, [pc, #68]	; (8002324 <HAL_RCC_OscConfig+0x708>)
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80022e2:	4b10      	ldr	r3, [pc, #64]	; (8002324 <HAL_RCC_OscConfig+0x708>)
 80022e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e6:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80022e8:	697a      	ldr	r2, [r7, #20]
 80022ea:	23c0      	movs	r3, #192	; 0xc0
 80022ec:	025b      	lsls	r3, r3, #9
 80022ee:	401a      	ands	r2, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d10e      	bne.n	8002316 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	220f      	movs	r2, #15
 80022fc:	401a      	ands	r2, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002302:	429a      	cmp	r2, r3
 8002304:	d107      	bne.n	8002316 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002306:	697a      	ldr	r2, [r7, #20]
 8002308:	23f0      	movs	r3, #240	; 0xf0
 800230a:	039b      	lsls	r3, r3, #14
 800230c:	401a      	ands	r2, r3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002312:	429a      	cmp	r2, r3
 8002314:	d001      	beq.n	800231a <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e000      	b.n	800231c <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800231a:	2300      	movs	r3, #0
}
 800231c:	0018      	movs	r0, r3
 800231e:	46bd      	mov	sp, r7
 8002320:	b008      	add	sp, #32
 8002322:	bd80      	pop	{r7, pc}
 8002324:	40021000 	.word	0x40021000

08002328 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d101      	bne.n	800233c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e0bf      	b.n	80024bc <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800233c:	4b61      	ldr	r3, [pc, #388]	; (80024c4 <HAL_RCC_ClockConfig+0x19c>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2201      	movs	r2, #1
 8002342:	4013      	ands	r3, r2
 8002344:	683a      	ldr	r2, [r7, #0]
 8002346:	429a      	cmp	r2, r3
 8002348:	d911      	bls.n	800236e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800234a:	4b5e      	ldr	r3, [pc, #376]	; (80024c4 <HAL_RCC_ClockConfig+0x19c>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	2201      	movs	r2, #1
 8002350:	4393      	bics	r3, r2
 8002352:	0019      	movs	r1, r3
 8002354:	4b5b      	ldr	r3, [pc, #364]	; (80024c4 <HAL_RCC_ClockConfig+0x19c>)
 8002356:	683a      	ldr	r2, [r7, #0]
 8002358:	430a      	orrs	r2, r1
 800235a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800235c:	4b59      	ldr	r3, [pc, #356]	; (80024c4 <HAL_RCC_ClockConfig+0x19c>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	2201      	movs	r2, #1
 8002362:	4013      	ands	r3, r2
 8002364:	683a      	ldr	r2, [r7, #0]
 8002366:	429a      	cmp	r2, r3
 8002368:	d001      	beq.n	800236e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e0a6      	b.n	80024bc <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	2202      	movs	r2, #2
 8002374:	4013      	ands	r3, r2
 8002376:	d015      	beq.n	80023a4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	2204      	movs	r2, #4
 800237e:	4013      	ands	r3, r2
 8002380:	d006      	beq.n	8002390 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002382:	4b51      	ldr	r3, [pc, #324]	; (80024c8 <HAL_RCC_ClockConfig+0x1a0>)
 8002384:	685a      	ldr	r2, [r3, #4]
 8002386:	4b50      	ldr	r3, [pc, #320]	; (80024c8 <HAL_RCC_ClockConfig+0x1a0>)
 8002388:	21e0      	movs	r1, #224	; 0xe0
 800238a:	00c9      	lsls	r1, r1, #3
 800238c:	430a      	orrs	r2, r1
 800238e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002390:	4b4d      	ldr	r3, [pc, #308]	; (80024c8 <HAL_RCC_ClockConfig+0x1a0>)
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	22f0      	movs	r2, #240	; 0xf0
 8002396:	4393      	bics	r3, r2
 8002398:	0019      	movs	r1, r3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	689a      	ldr	r2, [r3, #8]
 800239e:	4b4a      	ldr	r3, [pc, #296]	; (80024c8 <HAL_RCC_ClockConfig+0x1a0>)
 80023a0:	430a      	orrs	r2, r1
 80023a2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	2201      	movs	r2, #1
 80023aa:	4013      	ands	r3, r2
 80023ac:	d04c      	beq.n	8002448 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d107      	bne.n	80023c6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023b6:	4b44      	ldr	r3, [pc, #272]	; (80024c8 <HAL_RCC_ClockConfig+0x1a0>)
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	2380      	movs	r3, #128	; 0x80
 80023bc:	029b      	lsls	r3, r3, #10
 80023be:	4013      	ands	r3, r2
 80023c0:	d120      	bne.n	8002404 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e07a      	b.n	80024bc <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d107      	bne.n	80023de <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023ce:	4b3e      	ldr	r3, [pc, #248]	; (80024c8 <HAL_RCC_ClockConfig+0x1a0>)
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	2380      	movs	r3, #128	; 0x80
 80023d4:	049b      	lsls	r3, r3, #18
 80023d6:	4013      	ands	r3, r2
 80023d8:	d114      	bne.n	8002404 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e06e      	b.n	80024bc <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	2b03      	cmp	r3, #3
 80023e4:	d107      	bne.n	80023f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80023e6:	4b38      	ldr	r3, [pc, #224]	; (80024c8 <HAL_RCC_ClockConfig+0x1a0>)
 80023e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023ea:	2380      	movs	r3, #128	; 0x80
 80023ec:	025b      	lsls	r3, r3, #9
 80023ee:	4013      	ands	r3, r2
 80023f0:	d108      	bne.n	8002404 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e062      	b.n	80024bc <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023f6:	4b34      	ldr	r3, [pc, #208]	; (80024c8 <HAL_RCC_ClockConfig+0x1a0>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	2202      	movs	r2, #2
 80023fc:	4013      	ands	r3, r2
 80023fe:	d101      	bne.n	8002404 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e05b      	b.n	80024bc <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002404:	4b30      	ldr	r3, [pc, #192]	; (80024c8 <HAL_RCC_ClockConfig+0x1a0>)
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	2203      	movs	r2, #3
 800240a:	4393      	bics	r3, r2
 800240c:	0019      	movs	r1, r3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685a      	ldr	r2, [r3, #4]
 8002412:	4b2d      	ldr	r3, [pc, #180]	; (80024c8 <HAL_RCC_ClockConfig+0x1a0>)
 8002414:	430a      	orrs	r2, r1
 8002416:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002418:	f7fe f980 	bl	800071c <HAL_GetTick>
 800241c:	0003      	movs	r3, r0
 800241e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002420:	e009      	b.n	8002436 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002422:	f7fe f97b 	bl	800071c <HAL_GetTick>
 8002426:	0002      	movs	r2, r0
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	4a27      	ldr	r2, [pc, #156]	; (80024cc <HAL_RCC_ClockConfig+0x1a4>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d901      	bls.n	8002436 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e042      	b.n	80024bc <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002436:	4b24      	ldr	r3, [pc, #144]	; (80024c8 <HAL_RCC_ClockConfig+0x1a0>)
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	220c      	movs	r2, #12
 800243c:	401a      	ands	r2, r3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	429a      	cmp	r2, r3
 8002446:	d1ec      	bne.n	8002422 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002448:	4b1e      	ldr	r3, [pc, #120]	; (80024c4 <HAL_RCC_ClockConfig+0x19c>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	2201      	movs	r2, #1
 800244e:	4013      	ands	r3, r2
 8002450:	683a      	ldr	r2, [r7, #0]
 8002452:	429a      	cmp	r2, r3
 8002454:	d211      	bcs.n	800247a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002456:	4b1b      	ldr	r3, [pc, #108]	; (80024c4 <HAL_RCC_ClockConfig+0x19c>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	2201      	movs	r2, #1
 800245c:	4393      	bics	r3, r2
 800245e:	0019      	movs	r1, r3
 8002460:	4b18      	ldr	r3, [pc, #96]	; (80024c4 <HAL_RCC_ClockConfig+0x19c>)
 8002462:	683a      	ldr	r2, [r7, #0]
 8002464:	430a      	orrs	r2, r1
 8002466:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002468:	4b16      	ldr	r3, [pc, #88]	; (80024c4 <HAL_RCC_ClockConfig+0x19c>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	2201      	movs	r2, #1
 800246e:	4013      	ands	r3, r2
 8002470:	683a      	ldr	r2, [r7, #0]
 8002472:	429a      	cmp	r2, r3
 8002474:	d001      	beq.n	800247a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e020      	b.n	80024bc <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	2204      	movs	r2, #4
 8002480:	4013      	ands	r3, r2
 8002482:	d009      	beq.n	8002498 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002484:	4b10      	ldr	r3, [pc, #64]	; (80024c8 <HAL_RCC_ClockConfig+0x1a0>)
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	4a11      	ldr	r2, [pc, #68]	; (80024d0 <HAL_RCC_ClockConfig+0x1a8>)
 800248a:	4013      	ands	r3, r2
 800248c:	0019      	movs	r1, r3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	68da      	ldr	r2, [r3, #12]
 8002492:	4b0d      	ldr	r3, [pc, #52]	; (80024c8 <HAL_RCC_ClockConfig+0x1a0>)
 8002494:	430a      	orrs	r2, r1
 8002496:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002498:	f000 f820 	bl	80024dc <HAL_RCC_GetSysClockFreq>
 800249c:	0001      	movs	r1, r0
 800249e:	4b0a      	ldr	r3, [pc, #40]	; (80024c8 <HAL_RCC_ClockConfig+0x1a0>)
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	091b      	lsrs	r3, r3, #4
 80024a4:	220f      	movs	r2, #15
 80024a6:	4013      	ands	r3, r2
 80024a8:	4a0a      	ldr	r2, [pc, #40]	; (80024d4 <HAL_RCC_ClockConfig+0x1ac>)
 80024aa:	5cd3      	ldrb	r3, [r2, r3]
 80024ac:	000a      	movs	r2, r1
 80024ae:	40da      	lsrs	r2, r3
 80024b0:	4b09      	ldr	r3, [pc, #36]	; (80024d8 <HAL_RCC_ClockConfig+0x1b0>)
 80024b2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80024b4:	2000      	movs	r0, #0
 80024b6:	f7fe f8eb 	bl	8000690 <HAL_InitTick>
  
  return HAL_OK;
 80024ba:	2300      	movs	r3, #0
}
 80024bc:	0018      	movs	r0, r3
 80024be:	46bd      	mov	sp, r7
 80024c0:	b004      	add	sp, #16
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	40022000 	.word	0x40022000
 80024c8:	40021000 	.word	0x40021000
 80024cc:	00001388 	.word	0x00001388
 80024d0:	fffff8ff 	.word	0xfffff8ff
 80024d4:	08012a88 	.word	0x08012a88
 80024d8:	20000000 	.word	0x20000000

080024dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024dc:	b590      	push	{r4, r7, lr}
 80024de:	b08f      	sub	sp, #60	; 0x3c
 80024e0:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80024e2:	2314      	movs	r3, #20
 80024e4:	18fb      	adds	r3, r7, r3
 80024e6:	4a37      	ldr	r2, [pc, #220]	; (80025c4 <HAL_RCC_GetSysClockFreq+0xe8>)
 80024e8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80024ea:	c313      	stmia	r3!, {r0, r1, r4}
 80024ec:	6812      	ldr	r2, [r2, #0]
 80024ee:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80024f0:	1d3b      	adds	r3, r7, #4
 80024f2:	4a35      	ldr	r2, [pc, #212]	; (80025c8 <HAL_RCC_GetSysClockFreq+0xec>)
 80024f4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80024f6:	c313      	stmia	r3!, {r0, r1, r4}
 80024f8:	6812      	ldr	r2, [r2, #0]
 80024fa:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80024fc:	2300      	movs	r3, #0
 80024fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002500:	2300      	movs	r3, #0
 8002502:	62bb      	str	r3, [r7, #40]	; 0x28
 8002504:	2300      	movs	r3, #0
 8002506:	637b      	str	r3, [r7, #52]	; 0x34
 8002508:	2300      	movs	r3, #0
 800250a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 800250c:	2300      	movs	r3, #0
 800250e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002510:	4b2e      	ldr	r3, [pc, #184]	; (80025cc <HAL_RCC_GetSysClockFreq+0xf0>)
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002518:	220c      	movs	r2, #12
 800251a:	4013      	ands	r3, r2
 800251c:	2b08      	cmp	r3, #8
 800251e:	d006      	beq.n	800252e <HAL_RCC_GetSysClockFreq+0x52>
 8002520:	2b0c      	cmp	r3, #12
 8002522:	d043      	beq.n	80025ac <HAL_RCC_GetSysClockFreq+0xd0>
 8002524:	2b04      	cmp	r3, #4
 8002526:	d144      	bne.n	80025b2 <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002528:	4b29      	ldr	r3, [pc, #164]	; (80025d0 <HAL_RCC_GetSysClockFreq+0xf4>)
 800252a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800252c:	e044      	b.n	80025b8 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800252e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002530:	0c9b      	lsrs	r3, r3, #18
 8002532:	220f      	movs	r2, #15
 8002534:	4013      	ands	r3, r2
 8002536:	2214      	movs	r2, #20
 8002538:	18ba      	adds	r2, r7, r2
 800253a:	5cd3      	ldrb	r3, [r2, r3]
 800253c:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800253e:	4b23      	ldr	r3, [pc, #140]	; (80025cc <HAL_RCC_GetSysClockFreq+0xf0>)
 8002540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002542:	220f      	movs	r2, #15
 8002544:	4013      	ands	r3, r2
 8002546:	1d3a      	adds	r2, r7, #4
 8002548:	5cd3      	ldrb	r3, [r2, r3]
 800254a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800254c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800254e:	23c0      	movs	r3, #192	; 0xc0
 8002550:	025b      	lsls	r3, r3, #9
 8002552:	401a      	ands	r2, r3
 8002554:	2380      	movs	r3, #128	; 0x80
 8002556:	025b      	lsls	r3, r3, #9
 8002558:	429a      	cmp	r2, r3
 800255a:	d109      	bne.n	8002570 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800255c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800255e:	481c      	ldr	r0, [pc, #112]	; (80025d0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002560:	f7fd fde4 	bl	800012c <__udivsi3>
 8002564:	0003      	movs	r3, r0
 8002566:	001a      	movs	r2, r3
 8002568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256a:	4353      	muls	r3, r2
 800256c:	637b      	str	r3, [r7, #52]	; 0x34
 800256e:	e01a      	b.n	80025a6 <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002570:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002572:	23c0      	movs	r3, #192	; 0xc0
 8002574:	025b      	lsls	r3, r3, #9
 8002576:	401a      	ands	r2, r3
 8002578:	23c0      	movs	r3, #192	; 0xc0
 800257a:	025b      	lsls	r3, r3, #9
 800257c:	429a      	cmp	r2, r3
 800257e:	d109      	bne.n	8002594 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002580:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002582:	4814      	ldr	r0, [pc, #80]	; (80025d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002584:	f7fd fdd2 	bl	800012c <__udivsi3>
 8002588:	0003      	movs	r3, r0
 800258a:	001a      	movs	r2, r3
 800258c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258e:	4353      	muls	r3, r2
 8002590:	637b      	str	r3, [r7, #52]	; 0x34
 8002592:	e008      	b.n	80025a6 <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002594:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002596:	480e      	ldr	r0, [pc, #56]	; (80025d0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002598:	f7fd fdc8 	bl	800012c <__udivsi3>
 800259c:	0003      	movs	r3, r0
 800259e:	001a      	movs	r2, r3
 80025a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a2:	4353      	muls	r3, r2
 80025a4:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80025a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025a8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80025aa:	e005      	b.n	80025b8 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80025ac:	4b09      	ldr	r3, [pc, #36]	; (80025d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80025ae:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80025b0:	e002      	b.n	80025b8 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80025b2:	4b07      	ldr	r3, [pc, #28]	; (80025d0 <HAL_RCC_GetSysClockFreq+0xf4>)
 80025b4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80025b6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80025b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80025ba:	0018      	movs	r0, r3
 80025bc:	46bd      	mov	sp, r7
 80025be:	b00f      	add	sp, #60	; 0x3c
 80025c0:	bd90      	pop	{r4, r7, pc}
 80025c2:	46c0      	nop			; (mov r8, r8)
 80025c4:	08012920 	.word	0x08012920
 80025c8:	08012930 	.word	0x08012930
 80025cc:	40021000 	.word	0x40021000
 80025d0:	007a1200 	.word	0x007a1200
 80025d4:	02dc6c00 	.word	0x02dc6c00

080025d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b086      	sub	sp, #24
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80025e0:	2300      	movs	r3, #0
 80025e2:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80025e4:	2300      	movs	r3, #0
 80025e6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	2380      	movs	r3, #128	; 0x80
 80025ee:	025b      	lsls	r3, r3, #9
 80025f0:	4013      	ands	r3, r2
 80025f2:	d100      	bne.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80025f4:	e08f      	b.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80025f6:	2317      	movs	r3, #23
 80025f8:	18fb      	adds	r3, r7, r3
 80025fa:	2200      	movs	r2, #0
 80025fc:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025fe:	4b6f      	ldr	r3, [pc, #444]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002600:	69da      	ldr	r2, [r3, #28]
 8002602:	2380      	movs	r3, #128	; 0x80
 8002604:	055b      	lsls	r3, r3, #21
 8002606:	4013      	ands	r3, r2
 8002608:	d111      	bne.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800260a:	4b6c      	ldr	r3, [pc, #432]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800260c:	69da      	ldr	r2, [r3, #28]
 800260e:	4b6b      	ldr	r3, [pc, #428]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002610:	2180      	movs	r1, #128	; 0x80
 8002612:	0549      	lsls	r1, r1, #21
 8002614:	430a      	orrs	r2, r1
 8002616:	61da      	str	r2, [r3, #28]
 8002618:	4b68      	ldr	r3, [pc, #416]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800261a:	69da      	ldr	r2, [r3, #28]
 800261c:	2380      	movs	r3, #128	; 0x80
 800261e:	055b      	lsls	r3, r3, #21
 8002620:	4013      	ands	r3, r2
 8002622:	60bb      	str	r3, [r7, #8]
 8002624:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002626:	2317      	movs	r3, #23
 8002628:	18fb      	adds	r3, r7, r3
 800262a:	2201      	movs	r2, #1
 800262c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800262e:	4b64      	ldr	r3, [pc, #400]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	2380      	movs	r3, #128	; 0x80
 8002634:	005b      	lsls	r3, r3, #1
 8002636:	4013      	ands	r3, r2
 8002638:	d11a      	bne.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800263a:	4b61      	ldr	r3, [pc, #388]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	4b60      	ldr	r3, [pc, #384]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002640:	2180      	movs	r1, #128	; 0x80
 8002642:	0049      	lsls	r1, r1, #1
 8002644:	430a      	orrs	r2, r1
 8002646:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002648:	f7fe f868 	bl	800071c <HAL_GetTick>
 800264c:	0003      	movs	r3, r0
 800264e:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002650:	e008      	b.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002652:	f7fe f863 	bl	800071c <HAL_GetTick>
 8002656:	0002      	movs	r2, r0
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	2b64      	cmp	r3, #100	; 0x64
 800265e:	d901      	bls.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8002660:	2303      	movs	r3, #3
 8002662:	e0a6      	b.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x1da>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002664:	4b56      	ldr	r3, [pc, #344]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	2380      	movs	r3, #128	; 0x80
 800266a:	005b      	lsls	r3, r3, #1
 800266c:	4013      	ands	r3, r2
 800266e:	d0f0      	beq.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002670:	4b52      	ldr	r3, [pc, #328]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002672:	6a1a      	ldr	r2, [r3, #32]
 8002674:	23c0      	movs	r3, #192	; 0xc0
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	4013      	ands	r3, r2
 800267a:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d034      	beq.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x114>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685a      	ldr	r2, [r3, #4]
 8002686:	23c0      	movs	r3, #192	; 0xc0
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	4013      	ands	r3, r2
 800268c:	68fa      	ldr	r2, [r7, #12]
 800268e:	429a      	cmp	r2, r3
 8002690:	d02c      	beq.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002692:	4b4a      	ldr	r3, [pc, #296]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002694:	6a1b      	ldr	r3, [r3, #32]
 8002696:	4a4b      	ldr	r2, [pc, #300]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8002698:	4013      	ands	r3, r2
 800269a:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800269c:	4b47      	ldr	r3, [pc, #284]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800269e:	6a1a      	ldr	r2, [r3, #32]
 80026a0:	4b46      	ldr	r3, [pc, #280]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80026a2:	2180      	movs	r1, #128	; 0x80
 80026a4:	0249      	lsls	r1, r1, #9
 80026a6:	430a      	orrs	r2, r1
 80026a8:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80026aa:	4b44      	ldr	r3, [pc, #272]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80026ac:	6a1a      	ldr	r2, [r3, #32]
 80026ae:	4b43      	ldr	r3, [pc, #268]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80026b0:	4945      	ldr	r1, [pc, #276]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80026b2:	400a      	ands	r2, r1
 80026b4:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80026b6:	4b41      	ldr	r3, [pc, #260]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80026b8:	68fa      	ldr	r2, [r7, #12]
 80026ba:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2201      	movs	r2, #1
 80026c0:	4013      	ands	r3, r2
 80026c2:	d013      	beq.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026c4:	f7fe f82a 	bl	800071c <HAL_GetTick>
 80026c8:	0003      	movs	r3, r0
 80026ca:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026cc:	e009      	b.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026ce:	f7fe f825 	bl	800071c <HAL_GetTick>
 80026d2:	0002      	movs	r2, r0
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	4a3c      	ldr	r2, [pc, #240]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d901      	bls.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e067      	b.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x1da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026e2:	4b36      	ldr	r3, [pc, #216]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80026e4:	6a1b      	ldr	r3, [r3, #32]
 80026e6:	2202      	movs	r2, #2
 80026e8:	4013      	ands	r3, r2
 80026ea:	d0f0      	beq.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026ec:	4b33      	ldr	r3, [pc, #204]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80026ee:	6a1b      	ldr	r3, [r3, #32]
 80026f0:	4a34      	ldr	r2, [pc, #208]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80026f2:	4013      	ands	r3, r2
 80026f4:	0019      	movs	r1, r3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	685a      	ldr	r2, [r3, #4]
 80026fa:	4b30      	ldr	r3, [pc, #192]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80026fc:	430a      	orrs	r2, r1
 80026fe:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002700:	2317      	movs	r3, #23
 8002702:	18fb      	adds	r3, r7, r3
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	2b01      	cmp	r3, #1
 8002708:	d105      	bne.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800270a:	4b2c      	ldr	r3, [pc, #176]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800270c:	69da      	ldr	r2, [r3, #28]
 800270e:	4b2b      	ldr	r3, [pc, #172]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002710:	492f      	ldr	r1, [pc, #188]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002712:	400a      	ands	r2, r1
 8002714:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	2201      	movs	r2, #1
 800271c:	4013      	ands	r3, r2
 800271e:	d009      	beq.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002720:	4b26      	ldr	r3, [pc, #152]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002724:	2203      	movs	r2, #3
 8002726:	4393      	bics	r3, r2
 8002728:	0019      	movs	r1, r3
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	689a      	ldr	r2, [r3, #8]
 800272e:	4b23      	ldr	r3, [pc, #140]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002730:	430a      	orrs	r2, r1
 8002732:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	2202      	movs	r2, #2
 800273a:	4013      	ands	r3, r2
 800273c:	d009      	beq.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800273e:	4b1f      	ldr	r3, [pc, #124]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002742:	4a24      	ldr	r2, [pc, #144]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002744:	4013      	ands	r3, r2
 8002746:	0019      	movs	r1, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	68da      	ldr	r2, [r3, #12]
 800274c:	4b1b      	ldr	r3, [pc, #108]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800274e:	430a      	orrs	r2, r1
 8002750:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2220      	movs	r2, #32
 8002758:	4013      	ands	r3, r2
 800275a:	d009      	beq.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800275c:	4b17      	ldr	r3, [pc, #92]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800275e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002760:	2210      	movs	r2, #16
 8002762:	4393      	bics	r3, r2
 8002764:	0019      	movs	r1, r3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	691a      	ldr	r2, [r3, #16]
 800276a:	4b14      	ldr	r3, [pc, #80]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800276c:	430a      	orrs	r2, r1
 800276e:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	2380      	movs	r3, #128	; 0x80
 8002776:	029b      	lsls	r3, r3, #10
 8002778:	4013      	ands	r3, r2
 800277a:	d009      	beq.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800277c:	4b0f      	ldr	r3, [pc, #60]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800277e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002780:	2280      	movs	r2, #128	; 0x80
 8002782:	4393      	bics	r3, r2
 8002784:	0019      	movs	r1, r3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	699a      	ldr	r2, [r3, #24]
 800278a:	4b0c      	ldr	r3, [pc, #48]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800278c:	430a      	orrs	r2, r1
 800278e:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	2380      	movs	r3, #128	; 0x80
 8002796:	00db      	lsls	r3, r3, #3
 8002798:	4013      	ands	r3, r2
 800279a:	d009      	beq.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800279c:	4b07      	ldr	r3, [pc, #28]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800279e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a0:	2240      	movs	r2, #64	; 0x40
 80027a2:	4393      	bics	r3, r2
 80027a4:	0019      	movs	r1, r3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	695a      	ldr	r2, [r3, #20]
 80027aa:	4b04      	ldr	r3, [pc, #16]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80027ac:	430a      	orrs	r2, r1
 80027ae:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80027b0:	2300      	movs	r3, #0
}
 80027b2:	0018      	movs	r0, r3
 80027b4:	46bd      	mov	sp, r7
 80027b6:	b006      	add	sp, #24
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	46c0      	nop			; (mov r8, r8)
 80027bc:	40021000 	.word	0x40021000
 80027c0:	40007000 	.word	0x40007000
 80027c4:	fffffcff 	.word	0xfffffcff
 80027c8:	fffeffff 	.word	0xfffeffff
 80027cc:	00001388 	.word	0x00001388
 80027d0:	efffffff 	.word	0xefffffff
 80027d4:	fffcffff 	.word	0xfffcffff

080027d8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80027e0:	210e      	movs	r1, #14
 80027e2:	187b      	adds	r3, r7, r1
 80027e4:	4a08      	ldr	r2, [pc, #32]	; (8002808 <USB_EnableGlobalInt+0x30>)
 80027e6:	801a      	strh	r2, [r3, #0]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2240      	movs	r2, #64	; 0x40
 80027ec:	5a9b      	ldrh	r3, [r3, r2]
 80027ee:	b29a      	uxth	r2, r3
 80027f0:	187b      	adds	r3, r7, r1
 80027f2:	881b      	ldrh	r3, [r3, #0]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	b299      	uxth	r1, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2240      	movs	r2, #64	; 0x40
 80027fc:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80027fe:	2300      	movs	r3, #0
}
 8002800:	0018      	movs	r0, r3
 8002802:	46bd      	mov	sp, r7
 8002804:	b004      	add	sp, #16
 8002806:	bd80      	pop	{r7, pc}
 8002808:	ffffbf80 	.word	0xffffbf80

0800280c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b084      	sub	sp, #16
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002814:	210e      	movs	r1, #14
 8002816:	187b      	adds	r3, r7, r1
 8002818:	4a0b      	ldr	r2, [pc, #44]	; (8002848 <USB_DisableGlobalInt+0x3c>)
 800281a:	801a      	strh	r2, [r3, #0]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2240      	movs	r2, #64	; 0x40
 8002820:	5a9b      	ldrh	r3, [r3, r2]
 8002822:	b29b      	uxth	r3, r3
 8002824:	b21b      	sxth	r3, r3
 8002826:	187a      	adds	r2, r7, r1
 8002828:	2100      	movs	r1, #0
 800282a:	5e52      	ldrsh	r2, [r2, r1]
 800282c:	43d2      	mvns	r2, r2
 800282e:	b212      	sxth	r2, r2
 8002830:	4013      	ands	r3, r2
 8002832:	b21b      	sxth	r3, r3
 8002834:	b299      	uxth	r1, r3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2240      	movs	r2, #64	; 0x40
 800283a:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800283c:	2300      	movs	r3, #0
}
 800283e:	0018      	movs	r0, r3
 8002840:	46bd      	mov	sp, r7
 8002842:	b004      	add	sp, #16
 8002844:	bd80      	pop	{r7, pc}
 8002846:	46c0      	nop			; (mov r8, r8)
 8002848:	ffffbf80 	.word	0xffffbf80

0800284c <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800284c:	b084      	sub	sp, #16
 800284e:	b590      	push	{r4, r7, lr}
 8002850:	46c6      	mov	lr, r8
 8002852:	b500      	push	{lr}
 8002854:	b082      	sub	sp, #8
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
 800285a:	2004      	movs	r0, #4
 800285c:	2410      	movs	r4, #16
 800285e:	46a4      	mov	ip, r4
 8002860:	2408      	movs	r4, #8
 8002862:	46a0      	mov	r8, r4
 8002864:	44b8      	add	r8, r7
 8002866:	44c4      	add	ip, r8
 8002868:	4460      	add	r0, ip
 800286a:	6001      	str	r1, [r0, #0]
 800286c:	6042      	str	r2, [r0, #4]
 800286e:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2240      	movs	r2, #64	; 0x40
 8002874:	2101      	movs	r1, #1
 8002876:	5299      	strh	r1, [r3, r2]

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2240      	movs	r2, #64	; 0x40
 800287c:	2100      	movs	r1, #0
 800287e:	5299      	strh	r1, [r3, r2]

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2244      	movs	r2, #68	; 0x44
 8002884:	2100      	movs	r1, #0
 8002886:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2250      	movs	r2, #80	; 0x50
 800288c:	2100      	movs	r1, #0
 800288e:	5299      	strh	r1, [r3, r2]

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	0018      	movs	r0, r3
 8002894:	f7ff ffa0 	bl	80027d8 <USB_EnableGlobalInt>

  return HAL_OK;
 8002898:	2300      	movs	r3, #0
}
 800289a:	0018      	movs	r0, r3
 800289c:	46bd      	mov	sp, r7
 800289e:	b002      	add	sp, #8
 80028a0:	bc04      	pop	{r2}
 80028a2:	4690      	mov	r8, r2
 80028a4:	bc90      	pop	{r4, r7}
 80028a6:	bc08      	pop	{r3}
 80028a8:	b004      	add	sp, #16
 80028aa:	4718      	bx	r3

080028ac <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80028ac:	b590      	push	{r4, r7, lr}
 80028ae:	b087      	sub	sp, #28
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80028b6:	2317      	movs	r3, #23
 80028b8:	18fb      	adds	r3, r7, r3
 80028ba:	2200      	movs	r2, #0
 80028bc:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	18d3      	adds	r3, r2, r3
 80028c8:	881b      	ldrh	r3, [r3, #0]
 80028ca:	b29a      	uxth	r2, r3
 80028cc:	2314      	movs	r3, #20
 80028ce:	18fb      	adds	r3, r7, r3
 80028d0:	49b2      	ldr	r1, [pc, #712]	; (8002b9c <USB_ActivateEndpoint+0x2f0>)
 80028d2:	400a      	ands	r2, r1
 80028d4:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	78db      	ldrb	r3, [r3, #3]
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d020      	beq.n	8002920 <USB_ActivateEndpoint+0x74>
 80028de:	dc02      	bgt.n	80028e6 <USB_ActivateEndpoint+0x3a>
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d005      	beq.n	80028f0 <USB_ActivateEndpoint+0x44>
 80028e4:	e025      	b.n	8002932 <USB_ActivateEndpoint+0x86>
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d00b      	beq.n	8002902 <USB_ActivateEndpoint+0x56>
 80028ea:	2b03      	cmp	r3, #3
 80028ec:	d00f      	beq.n	800290e <USB_ActivateEndpoint+0x62>
 80028ee:	e020      	b.n	8002932 <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80028f0:	2214      	movs	r2, #20
 80028f2:	18bb      	adds	r3, r7, r2
 80028f4:	18ba      	adds	r2, r7, r2
 80028f6:	8812      	ldrh	r2, [r2, #0]
 80028f8:	2180      	movs	r1, #128	; 0x80
 80028fa:	0089      	lsls	r1, r1, #2
 80028fc:	430a      	orrs	r2, r1
 80028fe:	801a      	strh	r2, [r3, #0]
      break;
 8002900:	e01c      	b.n	800293c <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 8002902:	2214      	movs	r2, #20
 8002904:	18bb      	adds	r3, r7, r2
 8002906:	18ba      	adds	r2, r7, r2
 8002908:	8812      	ldrh	r2, [r2, #0]
 800290a:	801a      	strh	r2, [r3, #0]
      break;
 800290c:	e016      	b.n	800293c <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800290e:	2214      	movs	r2, #20
 8002910:	18bb      	adds	r3, r7, r2
 8002912:	18ba      	adds	r2, r7, r2
 8002914:	8812      	ldrh	r2, [r2, #0]
 8002916:	21c0      	movs	r1, #192	; 0xc0
 8002918:	00c9      	lsls	r1, r1, #3
 800291a:	430a      	orrs	r2, r1
 800291c:	801a      	strh	r2, [r3, #0]
      break;
 800291e:	e00d      	b.n	800293c <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8002920:	2214      	movs	r2, #20
 8002922:	18bb      	adds	r3, r7, r2
 8002924:	18ba      	adds	r2, r7, r2
 8002926:	8812      	ldrh	r2, [r2, #0]
 8002928:	2180      	movs	r1, #128	; 0x80
 800292a:	00c9      	lsls	r1, r1, #3
 800292c:	430a      	orrs	r2, r1
 800292e:	801a      	strh	r2, [r3, #0]
      break;
 8002930:	e004      	b.n	800293c <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 8002932:	2317      	movs	r3, #23
 8002934:	18fb      	adds	r3, r7, r3
 8002936:	2201      	movs	r2, #1
 8002938:	701a      	strb	r2, [r3, #0]
      break;
 800293a:	46c0      	nop			; (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	18d3      	adds	r3, r2, r3
 8002946:	2214      	movs	r2, #20
 8002948:	18ba      	adds	r2, r7, r2
 800294a:	8812      	ldrh	r2, [r2, #0]
 800294c:	4994      	ldr	r1, [pc, #592]	; (8002ba0 <USB_ActivateEndpoint+0x2f4>)
 800294e:	430a      	orrs	r2, r1
 8002950:	b292      	uxth	r2, r2
 8002952:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	18d3      	adds	r3, r2, r3
 800295e:	881b      	ldrh	r3, [r3, #0]
 8002960:	b29b      	uxth	r3, r3
 8002962:	b21b      	sxth	r3, r3
 8002964:	4a8f      	ldr	r2, [pc, #572]	; (8002ba4 <USB_ActivateEndpoint+0x2f8>)
 8002966:	4013      	ands	r3, r2
 8002968:	b21a      	sxth	r2, r3
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	b21b      	sxth	r3, r3
 8002970:	4313      	orrs	r3, r2
 8002972:	b21b      	sxth	r3, r3
 8002974:	b29c      	uxth	r4, r3
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	18d3      	adds	r3, r2, r3
 8002980:	4a87      	ldr	r2, [pc, #540]	; (8002ba0 <USB_ActivateEndpoint+0x2f4>)
 8002982:	4322      	orrs	r2, r4
 8002984:	b292      	uxth	r2, r2
 8002986:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	7b1b      	ldrb	r3, [r3, #12]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d000      	beq.n	8002992 <USB_ActivateEndpoint+0xe6>
 8002990:	e11a      	b.n	8002bc8 <USB_ActivateEndpoint+0x31c>
  {
    if (ep->is_in != 0U)
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	785b      	ldrb	r3, [r3, #1]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d062      	beq.n	8002a60 <USB_ActivateEndpoint+0x1b4>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800299a:	687c      	ldr	r4, [r7, #4]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2250      	movs	r2, #80	; 0x50
 80029a0:	5a9b      	ldrh	r3, [r3, r2]
 80029a2:	b29b      	uxth	r3, r3
 80029a4:	18e4      	adds	r4, r4, r3
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	00db      	lsls	r3, r3, #3
 80029ac:	18e3      	adds	r3, r4, r3
 80029ae:	2280      	movs	r2, #128	; 0x80
 80029b0:	00d2      	lsls	r2, r2, #3
 80029b2:	4694      	mov	ip, r2
 80029b4:	4463      	add	r3, ip
 80029b6:	001c      	movs	r4, r3
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	88db      	ldrh	r3, [r3, #6]
 80029bc:	085b      	lsrs	r3, r3, #1
 80029be:	b29b      	uxth	r3, r3
 80029c0:	18db      	adds	r3, r3, r3
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	18d3      	adds	r3, r2, r3
 80029d0:	881b      	ldrh	r3, [r3, #0]
 80029d2:	b29c      	uxth	r4, r3
 80029d4:	0022      	movs	r2, r4
 80029d6:	2340      	movs	r3, #64	; 0x40
 80029d8:	4013      	ands	r3, r2
 80029da:	d012      	beq.n	8002a02 <USB_ActivateEndpoint+0x156>
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	18d3      	adds	r3, r2, r3
 80029e6:	881b      	ldrh	r3, [r3, #0]
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	4a6e      	ldr	r2, [pc, #440]	; (8002ba4 <USB_ActivateEndpoint+0x2f8>)
 80029ec:	4013      	ands	r3, r2
 80029ee:	b29c      	uxth	r4, r3
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	18d3      	adds	r3, r2, r3
 80029fa:	4a6b      	ldr	r2, [pc, #428]	; (8002ba8 <USB_ActivateEndpoint+0x2fc>)
 80029fc:	4322      	orrs	r2, r4
 80029fe:	b292      	uxth	r2, r2
 8002a00:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	78db      	ldrb	r3, [r3, #3]
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d016      	beq.n	8002a38 <USB_ActivateEndpoint+0x18c>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	18d3      	adds	r3, r2, r3
 8002a14:	881b      	ldrh	r3, [r3, #0]
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	4a64      	ldr	r2, [pc, #400]	; (8002bac <USB_ActivateEndpoint+0x300>)
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	b29c      	uxth	r4, r3
 8002a1e:	2320      	movs	r3, #32
 8002a20:	4063      	eors	r3, r4
 8002a22:	b29c      	uxth	r4, r3
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	18d3      	adds	r3, r2, r3
 8002a2e:	4a5c      	ldr	r2, [pc, #368]	; (8002ba0 <USB_ActivateEndpoint+0x2f4>)
 8002a30:	4322      	orrs	r2, r4
 8002a32:	b292      	uxth	r2, r2
 8002a34:	801a      	strh	r2, [r3, #0]
 8002a36:	e21a      	b.n	8002e6e <USB_ActivateEndpoint+0x5c2>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	18d3      	adds	r3, r2, r3
 8002a42:	881b      	ldrh	r3, [r3, #0]
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	4a59      	ldr	r2, [pc, #356]	; (8002bac <USB_ActivateEndpoint+0x300>)
 8002a48:	4013      	ands	r3, r2
 8002a4a:	b29c      	uxth	r4, r3
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	18d3      	adds	r3, r2, r3
 8002a56:	4a52      	ldr	r2, [pc, #328]	; (8002ba0 <USB_ActivateEndpoint+0x2f4>)
 8002a58:	4322      	orrs	r2, r4
 8002a5a:	b292      	uxth	r2, r2
 8002a5c:	801a      	strh	r2, [r3, #0]
 8002a5e:	e206      	b.n	8002e6e <USB_ActivateEndpoint+0x5c2>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002a60:	687c      	ldr	r4, [r7, #4]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2250      	movs	r2, #80	; 0x50
 8002a66:	5a9b      	ldrh	r3, [r3, r2]
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	18e4      	adds	r4, r4, r3
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	00db      	lsls	r3, r3, #3
 8002a72:	18e3      	adds	r3, r4, r3
 8002a74:	4a4e      	ldr	r2, [pc, #312]	; (8002bb0 <USB_ActivateEndpoint+0x304>)
 8002a76:	4694      	mov	ip, r2
 8002a78:	4463      	add	r3, ip
 8002a7a:	001c      	movs	r4, r3
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	88db      	ldrh	r3, [r3, #6]
 8002a80:	085b      	lsrs	r3, r3, #1
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	18db      	adds	r3, r3, r3
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002a8a:	687c      	ldr	r4, [r7, #4]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2250      	movs	r2, #80	; 0x50
 8002a90:	5a9b      	ldrh	r3, [r3, r2]
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	18e4      	adds	r4, r4, r3
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	00db      	lsls	r3, r3, #3
 8002a9c:	18e3      	adds	r3, r4, r3
 8002a9e:	4a45      	ldr	r2, [pc, #276]	; (8002bb4 <USB_ActivateEndpoint+0x308>)
 8002aa0:	4694      	mov	ip, r2
 8002aa2:	4463      	add	r3, ip
 8002aa4:	60fb      	str	r3, [r7, #12]
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	691b      	ldr	r3, [r3, #16]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d10e      	bne.n	8002acc <USB_ActivateEndpoint+0x220>
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	881b      	ldrh	r3, [r3, #0]
 8002ab2:	4a41      	ldr	r2, [pc, #260]	; (8002bb8 <USB_ActivateEndpoint+0x30c>)
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	b29a      	uxth	r2, r3
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	801a      	strh	r2, [r3, #0]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	881b      	ldrh	r3, [r3, #0]
 8002ac0:	4a3e      	ldr	r2, [pc, #248]	; (8002bbc <USB_ActivateEndpoint+0x310>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	b29a      	uxth	r2, r3
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	801a      	strh	r2, [r3, #0]
 8002aca:	e02b      	b.n	8002b24 <USB_ActivateEndpoint+0x278>
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	691b      	ldr	r3, [r3, #16]
 8002ad0:	2b3e      	cmp	r3, #62	; 0x3e
 8002ad2:	d812      	bhi.n	8002afa <USB_ActivateEndpoint+0x24e>
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	691b      	ldr	r3, [r3, #16]
 8002ad8:	085b      	lsrs	r3, r3, #1
 8002ada:	613b      	str	r3, [r7, #16]
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	691b      	ldr	r3, [r3, #16]
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	d002      	beq.n	8002aec <USB_ActivateEndpoint+0x240>
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	3301      	adds	r3, #1
 8002aea:	613b      	str	r3, [r7, #16]
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	b29b      	uxth	r3, r3
 8002af0:	029b      	lsls	r3, r3, #10
 8002af2:	b29a      	uxth	r2, r3
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	801a      	strh	r2, [r3, #0]
 8002af8:	e014      	b.n	8002b24 <USB_ActivateEndpoint+0x278>
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	691b      	ldr	r3, [r3, #16]
 8002afe:	095b      	lsrs	r3, r3, #5
 8002b00:	613b      	str	r3, [r7, #16]
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	221f      	movs	r2, #31
 8002b08:	4013      	ands	r3, r2
 8002b0a:	d102      	bne.n	8002b12 <USB_ActivateEndpoint+0x266>
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	3b01      	subs	r3, #1
 8002b10:	613b      	str	r3, [r7, #16]
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	029b      	lsls	r3, r3, #10
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	4a28      	ldr	r2, [pc, #160]	; (8002bbc <USB_ActivateEndpoint+0x310>)
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	b29a      	uxth	r2, r3
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	781b      	ldrb	r3, [r3, #0]
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	18d3      	adds	r3, r2, r3
 8002b2e:	881b      	ldrh	r3, [r3, #0]
 8002b30:	b29c      	uxth	r4, r3
 8002b32:	0022      	movs	r2, r4
 8002b34:	2380      	movs	r3, #128	; 0x80
 8002b36:	01db      	lsls	r3, r3, #7
 8002b38:	4013      	ands	r3, r2
 8002b3a:	d012      	beq.n	8002b62 <USB_ActivateEndpoint+0x2b6>
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	18d3      	adds	r3, r2, r3
 8002b46:	881b      	ldrh	r3, [r3, #0]
 8002b48:	b29b      	uxth	r3, r3
 8002b4a:	4a16      	ldr	r2, [pc, #88]	; (8002ba4 <USB_ActivateEndpoint+0x2f8>)
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	b29c      	uxth	r4, r3
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	18d3      	adds	r3, r2, r3
 8002b5a:	4a19      	ldr	r2, [pc, #100]	; (8002bc0 <USB_ActivateEndpoint+0x314>)
 8002b5c:	4322      	orrs	r2, r4
 8002b5e:	b292      	uxth	r2, r2
 8002b60:	801a      	strh	r2, [r3, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	18d3      	adds	r3, r2, r3
 8002b6c:	881b      	ldrh	r3, [r3, #0]
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	4a14      	ldr	r2, [pc, #80]	; (8002bc4 <USB_ActivateEndpoint+0x318>)
 8002b72:	4013      	ands	r3, r2
 8002b74:	b29c      	uxth	r4, r3
 8002b76:	2380      	movs	r3, #128	; 0x80
 8002b78:	015b      	lsls	r3, r3, #5
 8002b7a:	4063      	eors	r3, r4
 8002b7c:	b29c      	uxth	r4, r3
 8002b7e:	2380      	movs	r3, #128	; 0x80
 8002b80:	019b      	lsls	r3, r3, #6
 8002b82:	4063      	eors	r3, r4
 8002b84:	b29c      	uxth	r4, r3
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	18d3      	adds	r3, r2, r3
 8002b90:	4a03      	ldr	r2, [pc, #12]	; (8002ba0 <USB_ActivateEndpoint+0x2f4>)
 8002b92:	4322      	orrs	r2, r4
 8002b94:	b292      	uxth	r2, r2
 8002b96:	801a      	strh	r2, [r3, #0]
 8002b98:	e169      	b.n	8002e6e <USB_ActivateEndpoint+0x5c2>
 8002b9a:	46c0      	nop			; (mov r8, r8)
 8002b9c:	ffff898f 	.word	0xffff898f
 8002ba0:	ffff8080 	.word	0xffff8080
 8002ba4:	ffff8f8f 	.word	0xffff8f8f
 8002ba8:	ffff80c0 	.word	0xffff80c0
 8002bac:	ffff8fbf 	.word	0xffff8fbf
 8002bb0:	00000404 	.word	0x00000404
 8002bb4:	00000406 	.word	0x00000406
 8002bb8:	ffff83ff 	.word	0xffff83ff
 8002bbc:	ffff8000 	.word	0xffff8000
 8002bc0:	ffffc080 	.word	0xffffc080
 8002bc4:	ffffbf8f 	.word	0xffffbf8f
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	18d3      	adds	r3, r2, r3
 8002bd2:	881b      	ldrh	r3, [r3, #0]
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	4aa9      	ldr	r2, [pc, #676]	; (8002e7c <USB_ActivateEndpoint+0x5d0>)
 8002bd8:	4013      	ands	r3, r2
 8002bda:	b29c      	uxth	r4, r3
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	18d3      	adds	r3, r2, r3
 8002be6:	4aa6      	ldr	r2, [pc, #664]	; (8002e80 <USB_ActivateEndpoint+0x5d4>)
 8002be8:	4322      	orrs	r2, r4
 8002bea:	b292      	uxth	r2, r2
 8002bec:	801a      	strh	r2, [r3, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8002bee:	687c      	ldr	r4, [r7, #4]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2250      	movs	r2, #80	; 0x50
 8002bf4:	5a9b      	ldrh	r3, [r3, r2]
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	18e4      	adds	r4, r4, r3
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	00db      	lsls	r3, r3, #3
 8002c00:	18e3      	adds	r3, r4, r3
 8002c02:	2280      	movs	r2, #128	; 0x80
 8002c04:	00d2      	lsls	r2, r2, #3
 8002c06:	4694      	mov	ip, r2
 8002c08:	4463      	add	r3, ip
 8002c0a:	001c      	movs	r4, r3
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	891b      	ldrh	r3, [r3, #8]
 8002c10:	085b      	lsrs	r3, r3, #1
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	18db      	adds	r3, r3, r3
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	8023      	strh	r3, [r4, #0]
 8002c1a:	687c      	ldr	r4, [r7, #4]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2250      	movs	r2, #80	; 0x50
 8002c20:	5a9b      	ldrh	r3, [r3, r2]
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	18e4      	adds	r4, r4, r3
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	781b      	ldrb	r3, [r3, #0]
 8002c2a:	00db      	lsls	r3, r3, #3
 8002c2c:	18e3      	adds	r3, r4, r3
 8002c2e:	4a95      	ldr	r2, [pc, #596]	; (8002e84 <USB_ActivateEndpoint+0x5d8>)
 8002c30:	4694      	mov	ip, r2
 8002c32:	4463      	add	r3, ip
 8002c34:	001c      	movs	r4, r3
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	895b      	ldrh	r3, [r3, #10]
 8002c3a:	085b      	lsrs	r3, r3, #1
 8002c3c:	b29b      	uxth	r3, r3
 8002c3e:	18db      	adds	r3, r3, r3
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	785b      	ldrb	r3, [r3, #1]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d000      	beq.n	8002c4e <USB_ActivateEndpoint+0x3a2>
 8002c4c:	e07e      	b.n	8002d4c <USB_ActivateEndpoint+0x4a0>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	18d3      	adds	r3, r2, r3
 8002c58:	881b      	ldrh	r3, [r3, #0]
 8002c5a:	b29c      	uxth	r4, r3
 8002c5c:	0022      	movs	r2, r4
 8002c5e:	2380      	movs	r3, #128	; 0x80
 8002c60:	01db      	lsls	r3, r3, #7
 8002c62:	4013      	ands	r3, r2
 8002c64:	d012      	beq.n	8002c8c <USB_ActivateEndpoint+0x3e0>
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	18d3      	adds	r3, r2, r3
 8002c70:	881b      	ldrh	r3, [r3, #0]
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	4a81      	ldr	r2, [pc, #516]	; (8002e7c <USB_ActivateEndpoint+0x5d0>)
 8002c76:	4013      	ands	r3, r2
 8002c78:	b29c      	uxth	r4, r3
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	18d3      	adds	r3, r2, r3
 8002c84:	4a80      	ldr	r2, [pc, #512]	; (8002e88 <USB_ActivateEndpoint+0x5dc>)
 8002c86:	4322      	orrs	r2, r4
 8002c88:	b292      	uxth	r2, r2
 8002c8a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	18d3      	adds	r3, r2, r3
 8002c96:	881b      	ldrh	r3, [r3, #0]
 8002c98:	b29c      	uxth	r4, r3
 8002c9a:	0022      	movs	r2, r4
 8002c9c:	2340      	movs	r3, #64	; 0x40
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	d012      	beq.n	8002cc8 <USB_ActivateEndpoint+0x41c>
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	18d3      	adds	r3, r2, r3
 8002cac:	881b      	ldrh	r3, [r3, #0]
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	4a72      	ldr	r2, [pc, #456]	; (8002e7c <USB_ActivateEndpoint+0x5d0>)
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	b29c      	uxth	r4, r3
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	18d3      	adds	r3, r2, r3
 8002cc0:	4a72      	ldr	r2, [pc, #456]	; (8002e8c <USB_ActivateEndpoint+0x5e0>)
 8002cc2:	4322      	orrs	r2, r4
 8002cc4:	b292      	uxth	r2, r2
 8002cc6:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	18d3      	adds	r3, r2, r3
 8002cd2:	881b      	ldrh	r3, [r3, #0]
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	4a69      	ldr	r2, [pc, #420]	; (8002e7c <USB_ActivateEndpoint+0x5d0>)
 8002cd8:	4013      	ands	r3, r2
 8002cda:	b29c      	uxth	r4, r3
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	18d3      	adds	r3, r2, r3
 8002ce6:	4a69      	ldr	r2, [pc, #420]	; (8002e8c <USB_ActivateEndpoint+0x5e0>)
 8002ce8:	4322      	orrs	r2, r4
 8002cea:	b292      	uxth	r2, r2
 8002cec:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	18d3      	adds	r3, r2, r3
 8002cf8:	881b      	ldrh	r3, [r3, #0]
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	4a64      	ldr	r2, [pc, #400]	; (8002e90 <USB_ActivateEndpoint+0x5e4>)
 8002cfe:	4013      	ands	r3, r2
 8002d00:	b29c      	uxth	r4, r3
 8002d02:	2380      	movs	r3, #128	; 0x80
 8002d04:	015b      	lsls	r3, r3, #5
 8002d06:	4063      	eors	r3, r4
 8002d08:	b29c      	uxth	r4, r3
 8002d0a:	2380      	movs	r3, #128	; 0x80
 8002d0c:	019b      	lsls	r3, r3, #6
 8002d0e:	4063      	eors	r3, r4
 8002d10:	b29c      	uxth	r4, r3
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	18d3      	adds	r3, r2, r3
 8002d1c:	4a5d      	ldr	r2, [pc, #372]	; (8002e94 <USB_ActivateEndpoint+0x5e8>)
 8002d1e:	4322      	orrs	r2, r4
 8002d20:	b292      	uxth	r2, r2
 8002d22:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	781b      	ldrb	r3, [r3, #0]
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	18d3      	adds	r3, r2, r3
 8002d2e:	881b      	ldrh	r3, [r3, #0]
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	4a59      	ldr	r2, [pc, #356]	; (8002e98 <USB_ActivateEndpoint+0x5ec>)
 8002d34:	4013      	ands	r3, r2
 8002d36:	b29c      	uxth	r4, r3
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	781b      	ldrb	r3, [r3, #0]
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	18d3      	adds	r3, r2, r3
 8002d42:	4a54      	ldr	r2, [pc, #336]	; (8002e94 <USB_ActivateEndpoint+0x5e8>)
 8002d44:	4322      	orrs	r2, r4
 8002d46:	b292      	uxth	r2, r2
 8002d48:	801a      	strh	r2, [r3, #0]
 8002d4a:	e090      	b.n	8002e6e <USB_ActivateEndpoint+0x5c2>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002d4c:	687a      	ldr	r2, [r7, #4]
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	18d3      	adds	r3, r2, r3
 8002d56:	881b      	ldrh	r3, [r3, #0]
 8002d58:	b29c      	uxth	r4, r3
 8002d5a:	0022      	movs	r2, r4
 8002d5c:	2380      	movs	r3, #128	; 0x80
 8002d5e:	01db      	lsls	r3, r3, #7
 8002d60:	4013      	ands	r3, r2
 8002d62:	d012      	beq.n	8002d8a <USB_ActivateEndpoint+0x4de>
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	18d3      	adds	r3, r2, r3
 8002d6e:	881b      	ldrh	r3, [r3, #0]
 8002d70:	b29b      	uxth	r3, r3
 8002d72:	4a42      	ldr	r2, [pc, #264]	; (8002e7c <USB_ActivateEndpoint+0x5d0>)
 8002d74:	4013      	ands	r3, r2
 8002d76:	b29c      	uxth	r4, r3
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	781b      	ldrb	r3, [r3, #0]
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	18d3      	adds	r3, r2, r3
 8002d82:	4a41      	ldr	r2, [pc, #260]	; (8002e88 <USB_ActivateEndpoint+0x5dc>)
 8002d84:	4322      	orrs	r2, r4
 8002d86:	b292      	uxth	r2, r2
 8002d88:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	18d3      	adds	r3, r2, r3
 8002d94:	881b      	ldrh	r3, [r3, #0]
 8002d96:	b29c      	uxth	r4, r3
 8002d98:	0022      	movs	r2, r4
 8002d9a:	2340      	movs	r3, #64	; 0x40
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	d012      	beq.n	8002dc6 <USB_ActivateEndpoint+0x51a>
 8002da0:	687a      	ldr	r2, [r7, #4]
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	781b      	ldrb	r3, [r3, #0]
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	18d3      	adds	r3, r2, r3
 8002daa:	881b      	ldrh	r3, [r3, #0]
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	4a33      	ldr	r2, [pc, #204]	; (8002e7c <USB_ActivateEndpoint+0x5d0>)
 8002db0:	4013      	ands	r3, r2
 8002db2:	b29c      	uxth	r4, r3
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	18d3      	adds	r3, r2, r3
 8002dbe:	4a33      	ldr	r2, [pc, #204]	; (8002e8c <USB_ActivateEndpoint+0x5e0>)
 8002dc0:	4322      	orrs	r2, r4
 8002dc2:	b292      	uxth	r2, r2
 8002dc4:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	18d3      	adds	r3, r2, r3
 8002dd0:	881b      	ldrh	r3, [r3, #0]
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	4a29      	ldr	r2, [pc, #164]	; (8002e7c <USB_ActivateEndpoint+0x5d0>)
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	b29c      	uxth	r4, r3
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	18d3      	adds	r3, r2, r3
 8002de4:	4a28      	ldr	r2, [pc, #160]	; (8002e88 <USB_ActivateEndpoint+0x5dc>)
 8002de6:	4322      	orrs	r2, r4
 8002de8:	b292      	uxth	r2, r2
 8002dea:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	78db      	ldrb	r3, [r3, #3]
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d016      	beq.n	8002e22 <USB_ActivateEndpoint+0x576>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	781b      	ldrb	r3, [r3, #0]
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	18d3      	adds	r3, r2, r3
 8002dfe:	881b      	ldrh	r3, [r3, #0]
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	4a25      	ldr	r2, [pc, #148]	; (8002e98 <USB_ActivateEndpoint+0x5ec>)
 8002e04:	4013      	ands	r3, r2
 8002e06:	b29c      	uxth	r4, r3
 8002e08:	2320      	movs	r3, #32
 8002e0a:	4063      	eors	r3, r4
 8002e0c:	b29c      	uxth	r4, r3
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	18d3      	adds	r3, r2, r3
 8002e18:	4a1e      	ldr	r2, [pc, #120]	; (8002e94 <USB_ActivateEndpoint+0x5e8>)
 8002e1a:	4322      	orrs	r2, r4
 8002e1c:	b292      	uxth	r2, r2
 8002e1e:	801a      	strh	r2, [r3, #0]
 8002e20:	e012      	b.n	8002e48 <USB_ActivateEndpoint+0x59c>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	18d3      	adds	r3, r2, r3
 8002e2c:	881b      	ldrh	r3, [r3, #0]
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	4a19      	ldr	r2, [pc, #100]	; (8002e98 <USB_ActivateEndpoint+0x5ec>)
 8002e32:	4013      	ands	r3, r2
 8002e34:	b29c      	uxth	r4, r3
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	18d3      	adds	r3, r2, r3
 8002e40:	4a14      	ldr	r2, [pc, #80]	; (8002e94 <USB_ActivateEndpoint+0x5e8>)
 8002e42:	4322      	orrs	r2, r4
 8002e44:	b292      	uxth	r2, r2
 8002e46:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	18d3      	adds	r3, r2, r3
 8002e52:	881b      	ldrh	r3, [r3, #0]
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	4a0e      	ldr	r2, [pc, #56]	; (8002e90 <USB_ActivateEndpoint+0x5e4>)
 8002e58:	4013      	ands	r3, r2
 8002e5a:	b29c      	uxth	r4, r3
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	18d3      	adds	r3, r2, r3
 8002e66:	4a0b      	ldr	r2, [pc, #44]	; (8002e94 <USB_ActivateEndpoint+0x5e8>)
 8002e68:	4322      	orrs	r2, r4
 8002e6a:	b292      	uxth	r2, r2
 8002e6c:	801a      	strh	r2, [r3, #0]
    }
  }

  return ret;
 8002e6e:	2317      	movs	r3, #23
 8002e70:	18fb      	adds	r3, r7, r3
 8002e72:	781b      	ldrb	r3, [r3, #0]
}
 8002e74:	0018      	movs	r0, r3
 8002e76:	46bd      	mov	sp, r7
 8002e78:	b007      	add	sp, #28
 8002e7a:	bd90      	pop	{r4, r7, pc}
 8002e7c:	ffff8f8f 	.word	0xffff8f8f
 8002e80:	ffff8180 	.word	0xffff8180
 8002e84:	00000404 	.word	0x00000404
 8002e88:	ffffc080 	.word	0xffffc080
 8002e8c:	ffff80c0 	.word	0xffff80c0
 8002e90:	ffffbf8f 	.word	0xffffbf8f
 8002e94:	ffff8080 	.word	0xffff8080
 8002e98:	ffff8fbf 	.word	0xffff8fbf

08002e9c <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002e9c:	b590      	push	{r4, r7, lr}
 8002e9e:	b083      	sub	sp, #12
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	7b1b      	ldrb	r3, [r3, #12]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d168      	bne.n	8002f80 <USB_DeactivateEndpoint+0xe4>
  {
    if (ep->is_in != 0U)
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	785b      	ldrb	r3, [r3, #1]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d031      	beq.n	8002f1a <USB_DeactivateEndpoint+0x7e>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	18d3      	adds	r3, r2, r3
 8002ec0:	881b      	ldrh	r3, [r3, #0]
 8002ec2:	b29c      	uxth	r4, r3
 8002ec4:	0022      	movs	r2, r4
 8002ec6:	2340      	movs	r3, #64	; 0x40
 8002ec8:	4013      	ands	r3, r2
 8002eca:	d012      	beq.n	8002ef2 <USB_DeactivateEndpoint+0x56>
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	18d3      	adds	r3, r2, r3
 8002ed6:	881b      	ldrh	r3, [r3, #0]
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	4aa5      	ldr	r2, [pc, #660]	; (8003170 <USB_DeactivateEndpoint+0x2d4>)
 8002edc:	4013      	ands	r3, r2
 8002ede:	b29c      	uxth	r4, r3
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	18d3      	adds	r3, r2, r3
 8002eea:	4aa2      	ldr	r2, [pc, #648]	; (8003174 <USB_DeactivateEndpoint+0x2d8>)
 8002eec:	4322      	orrs	r2, r4
 8002eee:	b292      	uxth	r2, r2
 8002ef0:	801a      	strh	r2, [r3, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	18d3      	adds	r3, r2, r3
 8002efc:	881b      	ldrh	r3, [r3, #0]
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	4a9d      	ldr	r2, [pc, #628]	; (8003178 <USB_DeactivateEndpoint+0x2dc>)
 8002f02:	4013      	ands	r3, r2
 8002f04:	b29c      	uxth	r4, r3
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	18d3      	adds	r3, r2, r3
 8002f10:	4a9a      	ldr	r2, [pc, #616]	; (800317c <USB_DeactivateEndpoint+0x2e0>)
 8002f12:	4322      	orrs	r2, r4
 8002f14:	b292      	uxth	r2, r2
 8002f16:	801a      	strh	r2, [r3, #0]
 8002f18:	e124      	b.n	8003164 <USB_DeactivateEndpoint+0x2c8>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	18d3      	adds	r3, r2, r3
 8002f24:	881b      	ldrh	r3, [r3, #0]
 8002f26:	b29c      	uxth	r4, r3
 8002f28:	0022      	movs	r2, r4
 8002f2a:	2380      	movs	r3, #128	; 0x80
 8002f2c:	01db      	lsls	r3, r3, #7
 8002f2e:	4013      	ands	r3, r2
 8002f30:	d012      	beq.n	8002f58 <USB_DeactivateEndpoint+0xbc>
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	781b      	ldrb	r3, [r3, #0]
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	18d3      	adds	r3, r2, r3
 8002f3c:	881b      	ldrh	r3, [r3, #0]
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	4a8b      	ldr	r2, [pc, #556]	; (8003170 <USB_DeactivateEndpoint+0x2d4>)
 8002f42:	4013      	ands	r3, r2
 8002f44:	b29c      	uxth	r4, r3
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	18d3      	adds	r3, r2, r3
 8002f50:	4a8b      	ldr	r2, [pc, #556]	; (8003180 <USB_DeactivateEndpoint+0x2e4>)
 8002f52:	4322      	orrs	r2, r4
 8002f54:	b292      	uxth	r2, r2
 8002f56:	801a      	strh	r2, [r3, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	781b      	ldrb	r3, [r3, #0]
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	18d3      	adds	r3, r2, r3
 8002f62:	881b      	ldrh	r3, [r3, #0]
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	4a87      	ldr	r2, [pc, #540]	; (8003184 <USB_DeactivateEndpoint+0x2e8>)
 8002f68:	4013      	ands	r3, r2
 8002f6a:	b29c      	uxth	r4, r3
 8002f6c:	687a      	ldr	r2, [r7, #4]
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	781b      	ldrb	r3, [r3, #0]
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	18d3      	adds	r3, r2, r3
 8002f76:	4a81      	ldr	r2, [pc, #516]	; (800317c <USB_DeactivateEndpoint+0x2e0>)
 8002f78:	4322      	orrs	r2, r4
 8002f7a:	b292      	uxth	r2, r2
 8002f7c:	801a      	strh	r2, [r3, #0]
 8002f7e:	e0f1      	b.n	8003164 <USB_DeactivateEndpoint+0x2c8>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	785b      	ldrb	r3, [r3, #1]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d000      	beq.n	8002f8a <USB_DeactivateEndpoint+0xee>
 8002f88:	e076      	b.n	8003078 <USB_DeactivateEndpoint+0x1dc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	18d3      	adds	r3, r2, r3
 8002f94:	881b      	ldrh	r3, [r3, #0]
 8002f96:	b29c      	uxth	r4, r3
 8002f98:	0022      	movs	r2, r4
 8002f9a:	2380      	movs	r3, #128	; 0x80
 8002f9c:	01db      	lsls	r3, r3, #7
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	d012      	beq.n	8002fc8 <USB_DeactivateEndpoint+0x12c>
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	18d3      	adds	r3, r2, r3
 8002fac:	881b      	ldrh	r3, [r3, #0]
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	4a6f      	ldr	r2, [pc, #444]	; (8003170 <USB_DeactivateEndpoint+0x2d4>)
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	b29c      	uxth	r4, r3
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	781b      	ldrb	r3, [r3, #0]
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	18d3      	adds	r3, r2, r3
 8002fc0:	4a6f      	ldr	r2, [pc, #444]	; (8003180 <USB_DeactivateEndpoint+0x2e4>)
 8002fc2:	4322      	orrs	r2, r4
 8002fc4:	b292      	uxth	r2, r2
 8002fc6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	18d3      	adds	r3, r2, r3
 8002fd2:	881b      	ldrh	r3, [r3, #0]
 8002fd4:	b29c      	uxth	r4, r3
 8002fd6:	0022      	movs	r2, r4
 8002fd8:	2340      	movs	r3, #64	; 0x40
 8002fda:	4013      	ands	r3, r2
 8002fdc:	d012      	beq.n	8003004 <USB_DeactivateEndpoint+0x168>
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	18d3      	adds	r3, r2, r3
 8002fe8:	881b      	ldrh	r3, [r3, #0]
 8002fea:	b29b      	uxth	r3, r3
 8002fec:	4a60      	ldr	r2, [pc, #384]	; (8003170 <USB_DeactivateEndpoint+0x2d4>)
 8002fee:	4013      	ands	r3, r2
 8002ff0:	b29c      	uxth	r4, r3
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	18d3      	adds	r3, r2, r3
 8002ffc:	4a5d      	ldr	r2, [pc, #372]	; (8003174 <USB_DeactivateEndpoint+0x2d8>)
 8002ffe:	4322      	orrs	r2, r4
 8003000:	b292      	uxth	r2, r2
 8003002:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8003004:	687a      	ldr	r2, [r7, #4]
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	18d3      	adds	r3, r2, r3
 800300e:	881b      	ldrh	r3, [r3, #0]
 8003010:	b29b      	uxth	r3, r3
 8003012:	4a57      	ldr	r2, [pc, #348]	; (8003170 <USB_DeactivateEndpoint+0x2d4>)
 8003014:	4013      	ands	r3, r2
 8003016:	b29c      	uxth	r4, r3
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	781b      	ldrb	r3, [r3, #0]
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	18d3      	adds	r3, r2, r3
 8003022:	4a54      	ldr	r2, [pc, #336]	; (8003174 <USB_DeactivateEndpoint+0x2d8>)
 8003024:	4322      	orrs	r2, r4
 8003026:	b292      	uxth	r2, r2
 8003028:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	18d3      	adds	r3, r2, r3
 8003034:	881b      	ldrh	r3, [r3, #0]
 8003036:	b29b      	uxth	r3, r3
 8003038:	4a52      	ldr	r2, [pc, #328]	; (8003184 <USB_DeactivateEndpoint+0x2e8>)
 800303a:	4013      	ands	r3, r2
 800303c:	b29c      	uxth	r4, r3
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	18d3      	adds	r3, r2, r3
 8003048:	4a4c      	ldr	r2, [pc, #304]	; (800317c <USB_DeactivateEndpoint+0x2e0>)
 800304a:	4322      	orrs	r2, r4
 800304c:	b292      	uxth	r2, r2
 800304e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	18d3      	adds	r3, r2, r3
 800305a:	881b      	ldrh	r3, [r3, #0]
 800305c:	b29b      	uxth	r3, r3
 800305e:	4a46      	ldr	r2, [pc, #280]	; (8003178 <USB_DeactivateEndpoint+0x2dc>)
 8003060:	4013      	ands	r3, r2
 8003062:	b29c      	uxth	r4, r3
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	18d3      	adds	r3, r2, r3
 800306e:	4a43      	ldr	r2, [pc, #268]	; (800317c <USB_DeactivateEndpoint+0x2e0>)
 8003070:	4322      	orrs	r2, r4
 8003072:	b292      	uxth	r2, r2
 8003074:	801a      	strh	r2, [r3, #0]
 8003076:	e075      	b.n	8003164 <USB_DeactivateEndpoint+0x2c8>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	781b      	ldrb	r3, [r3, #0]
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	18d3      	adds	r3, r2, r3
 8003082:	881b      	ldrh	r3, [r3, #0]
 8003084:	b29c      	uxth	r4, r3
 8003086:	0022      	movs	r2, r4
 8003088:	2380      	movs	r3, #128	; 0x80
 800308a:	01db      	lsls	r3, r3, #7
 800308c:	4013      	ands	r3, r2
 800308e:	d012      	beq.n	80030b6 <USB_DeactivateEndpoint+0x21a>
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	781b      	ldrb	r3, [r3, #0]
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	18d3      	adds	r3, r2, r3
 800309a:	881b      	ldrh	r3, [r3, #0]
 800309c:	b29b      	uxth	r3, r3
 800309e:	4a34      	ldr	r2, [pc, #208]	; (8003170 <USB_DeactivateEndpoint+0x2d4>)
 80030a0:	4013      	ands	r3, r2
 80030a2:	b29c      	uxth	r4, r3
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	781b      	ldrb	r3, [r3, #0]
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	18d3      	adds	r3, r2, r3
 80030ae:	4a34      	ldr	r2, [pc, #208]	; (8003180 <USB_DeactivateEndpoint+0x2e4>)
 80030b0:	4322      	orrs	r2, r4
 80030b2:	b292      	uxth	r2, r2
 80030b4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	18d3      	adds	r3, r2, r3
 80030c0:	881b      	ldrh	r3, [r3, #0]
 80030c2:	b29c      	uxth	r4, r3
 80030c4:	0022      	movs	r2, r4
 80030c6:	2340      	movs	r3, #64	; 0x40
 80030c8:	4013      	ands	r3, r2
 80030ca:	d012      	beq.n	80030f2 <USB_DeactivateEndpoint+0x256>
 80030cc:	687a      	ldr	r2, [r7, #4]
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	781b      	ldrb	r3, [r3, #0]
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	18d3      	adds	r3, r2, r3
 80030d6:	881b      	ldrh	r3, [r3, #0]
 80030d8:	b29b      	uxth	r3, r3
 80030da:	4a25      	ldr	r2, [pc, #148]	; (8003170 <USB_DeactivateEndpoint+0x2d4>)
 80030dc:	4013      	ands	r3, r2
 80030de:	b29c      	uxth	r4, r3
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	18d3      	adds	r3, r2, r3
 80030ea:	4a22      	ldr	r2, [pc, #136]	; (8003174 <USB_DeactivateEndpoint+0x2d8>)
 80030ec:	4322      	orrs	r2, r4
 80030ee:	b292      	uxth	r2, r2
 80030f0:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	18d3      	adds	r3, r2, r3
 80030fc:	881b      	ldrh	r3, [r3, #0]
 80030fe:	b29b      	uxth	r3, r3
 8003100:	4a1b      	ldr	r2, [pc, #108]	; (8003170 <USB_DeactivateEndpoint+0x2d4>)
 8003102:	4013      	ands	r3, r2
 8003104:	b29c      	uxth	r4, r3
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	18d3      	adds	r3, r2, r3
 8003110:	4a1b      	ldr	r2, [pc, #108]	; (8003180 <USB_DeactivateEndpoint+0x2e4>)
 8003112:	4322      	orrs	r2, r4
 8003114:	b292      	uxth	r2, r2
 8003116:	801a      	strh	r2, [r3, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	18d3      	adds	r3, r2, r3
 8003122:	881b      	ldrh	r3, [r3, #0]
 8003124:	b29b      	uxth	r3, r3
 8003126:	4a14      	ldr	r2, [pc, #80]	; (8003178 <USB_DeactivateEndpoint+0x2dc>)
 8003128:	4013      	ands	r3, r2
 800312a:	b29c      	uxth	r4, r3
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	18d3      	adds	r3, r2, r3
 8003136:	4a11      	ldr	r2, [pc, #68]	; (800317c <USB_DeactivateEndpoint+0x2e0>)
 8003138:	4322      	orrs	r2, r4
 800313a:	b292      	uxth	r2, r2
 800313c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	18d3      	adds	r3, r2, r3
 8003148:	881b      	ldrh	r3, [r3, #0]
 800314a:	b29b      	uxth	r3, r3
 800314c:	4a0d      	ldr	r2, [pc, #52]	; (8003184 <USB_DeactivateEndpoint+0x2e8>)
 800314e:	4013      	ands	r3, r2
 8003150:	b29c      	uxth	r4, r3
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	18d3      	adds	r3, r2, r3
 800315c:	4a07      	ldr	r2, [pc, #28]	; (800317c <USB_DeactivateEndpoint+0x2e0>)
 800315e:	4322      	orrs	r2, r4
 8003160:	b292      	uxth	r2, r2
 8003162:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8003164:	2300      	movs	r3, #0
}
 8003166:	0018      	movs	r0, r3
 8003168:	46bd      	mov	sp, r7
 800316a:	b003      	add	sp, #12
 800316c:	bd90      	pop	{r4, r7, pc}
 800316e:	46c0      	nop			; (mov r8, r8)
 8003170:	ffff8f8f 	.word	0xffff8f8f
 8003174:	ffff80c0 	.word	0xffff80c0
 8003178:	ffff8fbf 	.word	0xffff8fbf
 800317c:	ffff8080 	.word	0xffff8080
 8003180:	ffffc080 	.word	0xffffc080
 8003184:	ffffbf8f 	.word	0xffffbf8f

08003188 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003188:	b590      	push	{r4, r7, lr}
 800318a:	b095      	sub	sp, #84	; 0x54
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	785b      	ldrb	r3, [r3, #1]
 8003196:	2b01      	cmp	r3, #1
 8003198:	d000      	beq.n	800319c <USB_EPStartXfer+0x14>
 800319a:	e163      	b.n	8003464 <USB_EPStartXfer+0x2dc>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	699a      	ldr	r2, [r3, #24]
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	691b      	ldr	r3, [r3, #16]
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d909      	bls.n	80031bc <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	691b      	ldr	r3, [r3, #16]
 80031ac:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len -= len;
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	699a      	ldr	r2, [r3, #24]
 80031b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031b4:	1ad2      	subs	r2, r2, r3
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	619a      	str	r2, [r3, #24]
 80031ba:	e005      	b.n	80031c8 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	699b      	ldr	r3, [r3, #24]
 80031c0:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len = 0U;
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	2200      	movs	r2, #0
 80031c6:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	7b1b      	ldrb	r3, [r3, #12]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d11b      	bne.n	8003208 <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	6959      	ldr	r1, [r3, #20]
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	88da      	ldrh	r2, [r3, #6]
 80031d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031da:	b29b      	uxth	r3, r3
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f000 fbbb 	bl	8003958 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80031e2:	687c      	ldr	r4, [r7, #4]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2250      	movs	r2, #80	; 0x50
 80031e8:	5a9b      	ldrh	r3, [r3, r2]
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	18e4      	adds	r4, r4, r3
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	781b      	ldrb	r3, [r3, #0]
 80031f2:	00db      	lsls	r3, r3, #3
 80031f4:	18e3      	adds	r3, r4, r3
 80031f6:	4acc      	ldr	r2, [pc, #816]	; (8003528 <USB_EPStartXfer+0x3a0>)
 80031f8:	4694      	mov	ip, r2
 80031fa:	4463      	add	r3, ip
 80031fc:	60fb      	str	r3, [r7, #12]
 80031fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003200:	b29a      	uxth	r2, r3
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	801a      	strh	r2, [r3, #0]
 8003206:	e113      	b.n	8003430 <USB_EPStartXfer+0x2a8>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003208:	687a      	ldr	r2, [r7, #4]
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	781b      	ldrb	r3, [r3, #0]
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	18d3      	adds	r3, r2, r3
 8003212:	881b      	ldrh	r3, [r3, #0]
 8003214:	b29b      	uxth	r3, r3
 8003216:	001a      	movs	r2, r3
 8003218:	2340      	movs	r3, #64	; 0x40
 800321a:	4013      	ands	r3, r2
 800321c:	d067      	beq.n	80032ee <USB_EPStartXfer+0x166>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800321e:	687c      	ldr	r4, [r7, #4]
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	785b      	ldrb	r3, [r3, #1]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d147      	bne.n	80032b8 <USB_EPStartXfer+0x130>
 8003228:	687c      	ldr	r4, [r7, #4]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2250      	movs	r2, #80	; 0x50
 800322e:	5a9b      	ldrh	r3, [r3, r2]
 8003230:	b29b      	uxth	r3, r3
 8003232:	18e4      	adds	r4, r4, r3
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	00db      	lsls	r3, r3, #3
 800323a:	18e3      	adds	r3, r4, r3
 800323c:	4abb      	ldr	r2, [pc, #748]	; (800352c <USB_EPStartXfer+0x3a4>)
 800323e:	4694      	mov	ip, r2
 8003240:	4463      	add	r3, ip
 8003242:	613b      	str	r3, [r7, #16]
 8003244:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003246:	2b00      	cmp	r3, #0
 8003248:	d10e      	bne.n	8003268 <USB_EPStartXfer+0xe0>
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	881b      	ldrh	r3, [r3, #0]
 800324e:	4ab8      	ldr	r2, [pc, #736]	; (8003530 <USB_EPStartXfer+0x3a8>)
 8003250:	4013      	ands	r3, r2
 8003252:	b29a      	uxth	r2, r3
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	801a      	strh	r2, [r3, #0]
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	881b      	ldrh	r3, [r3, #0]
 800325c:	4ab5      	ldr	r2, [pc, #724]	; (8003534 <USB_EPStartXfer+0x3ac>)
 800325e:	4313      	orrs	r3, r2
 8003260:	b29a      	uxth	r2, r3
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	801a      	strh	r2, [r3, #0]
 8003266:	e03c      	b.n	80032e2 <USB_EPStartXfer+0x15a>
 8003268:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800326a:	2b3e      	cmp	r3, #62	; 0x3e
 800326c:	d810      	bhi.n	8003290 <USB_EPStartXfer+0x108>
 800326e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003270:	085b      	lsrs	r3, r3, #1
 8003272:	647b      	str	r3, [r7, #68]	; 0x44
 8003274:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003276:	2201      	movs	r2, #1
 8003278:	4013      	ands	r3, r2
 800327a:	d002      	beq.n	8003282 <USB_EPStartXfer+0xfa>
 800327c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800327e:	3301      	adds	r3, #1
 8003280:	647b      	str	r3, [r7, #68]	; 0x44
 8003282:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003284:	b29b      	uxth	r3, r3
 8003286:	029b      	lsls	r3, r3, #10
 8003288:	b29a      	uxth	r2, r3
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	801a      	strh	r2, [r3, #0]
 800328e:	e028      	b.n	80032e2 <USB_EPStartXfer+0x15a>
 8003290:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003292:	095b      	lsrs	r3, r3, #5
 8003294:	647b      	str	r3, [r7, #68]	; 0x44
 8003296:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003298:	221f      	movs	r2, #31
 800329a:	4013      	ands	r3, r2
 800329c:	d102      	bne.n	80032a4 <USB_EPStartXfer+0x11c>
 800329e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032a0:	3b01      	subs	r3, #1
 80032a2:	647b      	str	r3, [r7, #68]	; 0x44
 80032a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	029b      	lsls	r3, r3, #10
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	4aa1      	ldr	r2, [pc, #644]	; (8003534 <USB_EPStartXfer+0x3ac>)
 80032ae:	4313      	orrs	r3, r2
 80032b0:	b29a      	uxth	r2, r3
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	801a      	strh	r2, [r3, #0]
 80032b6:	e014      	b.n	80032e2 <USB_EPStartXfer+0x15a>
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	785b      	ldrb	r3, [r3, #1]
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d110      	bne.n	80032e2 <USB_EPStartXfer+0x15a>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2250      	movs	r2, #80	; 0x50
 80032c4:	5a9b      	ldrh	r3, [r3, r2]
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	18e4      	adds	r4, r4, r3
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	00db      	lsls	r3, r3, #3
 80032d0:	18e3      	adds	r3, r4, r3
 80032d2:	4a96      	ldr	r2, [pc, #600]	; (800352c <USB_EPStartXfer+0x3a4>)
 80032d4:	4694      	mov	ip, r2
 80032d6:	4463      	add	r3, ip
 80032d8:	617b      	str	r3, [r7, #20]
 80032da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032dc:	b29a      	uxth	r2, r3
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 80032e2:	234e      	movs	r3, #78	; 0x4e
 80032e4:	18fb      	adds	r3, r7, r3
 80032e6:	683a      	ldr	r2, [r7, #0]
 80032e8:	8952      	ldrh	r2, [r2, #10]
 80032ea:	801a      	strh	r2, [r3, #0]
 80032ec:	e066      	b.n	80033bc <USB_EPStartXfer+0x234>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	785b      	ldrb	r3, [r3, #1]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d147      	bne.n	8003386 <USB_EPStartXfer+0x1fe>
 80032f6:	687c      	ldr	r4, [r7, #4]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2250      	movs	r2, #80	; 0x50
 80032fc:	5a9b      	ldrh	r3, [r3, r2]
 80032fe:	b29b      	uxth	r3, r3
 8003300:	18e4      	adds	r4, r4, r3
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	00db      	lsls	r3, r3, #3
 8003308:	18e3      	adds	r3, r4, r3
 800330a:	4a87      	ldr	r2, [pc, #540]	; (8003528 <USB_EPStartXfer+0x3a0>)
 800330c:	4694      	mov	ip, r2
 800330e:	4463      	add	r3, ip
 8003310:	61bb      	str	r3, [r7, #24]
 8003312:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003314:	2b00      	cmp	r3, #0
 8003316:	d10e      	bne.n	8003336 <USB_EPStartXfer+0x1ae>
 8003318:	69bb      	ldr	r3, [r7, #24]
 800331a:	881b      	ldrh	r3, [r3, #0]
 800331c:	4a84      	ldr	r2, [pc, #528]	; (8003530 <USB_EPStartXfer+0x3a8>)
 800331e:	4013      	ands	r3, r2
 8003320:	b29a      	uxth	r2, r3
 8003322:	69bb      	ldr	r3, [r7, #24]
 8003324:	801a      	strh	r2, [r3, #0]
 8003326:	69bb      	ldr	r3, [r7, #24]
 8003328:	881b      	ldrh	r3, [r3, #0]
 800332a:	4a82      	ldr	r2, [pc, #520]	; (8003534 <USB_EPStartXfer+0x3ac>)
 800332c:	4313      	orrs	r3, r2
 800332e:	b29a      	uxth	r2, r3
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	801a      	strh	r2, [r3, #0]
 8003334:	e03d      	b.n	80033b2 <USB_EPStartXfer+0x22a>
 8003336:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003338:	2b3e      	cmp	r3, #62	; 0x3e
 800333a:	d810      	bhi.n	800335e <USB_EPStartXfer+0x1d6>
 800333c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800333e:	085b      	lsrs	r3, r3, #1
 8003340:	643b      	str	r3, [r7, #64]	; 0x40
 8003342:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003344:	2201      	movs	r2, #1
 8003346:	4013      	ands	r3, r2
 8003348:	d002      	beq.n	8003350 <USB_EPStartXfer+0x1c8>
 800334a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800334c:	3301      	adds	r3, #1
 800334e:	643b      	str	r3, [r7, #64]	; 0x40
 8003350:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003352:	b29b      	uxth	r3, r3
 8003354:	029b      	lsls	r3, r3, #10
 8003356:	b29a      	uxth	r2, r3
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	801a      	strh	r2, [r3, #0]
 800335c:	e029      	b.n	80033b2 <USB_EPStartXfer+0x22a>
 800335e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003360:	095b      	lsrs	r3, r3, #5
 8003362:	643b      	str	r3, [r7, #64]	; 0x40
 8003364:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003366:	221f      	movs	r2, #31
 8003368:	4013      	ands	r3, r2
 800336a:	d102      	bne.n	8003372 <USB_EPStartXfer+0x1ea>
 800336c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800336e:	3b01      	subs	r3, #1
 8003370:	643b      	str	r3, [r7, #64]	; 0x40
 8003372:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003374:	b29b      	uxth	r3, r3
 8003376:	029b      	lsls	r3, r3, #10
 8003378:	b29b      	uxth	r3, r3
 800337a:	4a6e      	ldr	r2, [pc, #440]	; (8003534 <USB_EPStartXfer+0x3ac>)
 800337c:	4313      	orrs	r3, r2
 800337e:	b29a      	uxth	r2, r3
 8003380:	69bb      	ldr	r3, [r7, #24]
 8003382:	801a      	strh	r2, [r3, #0]
 8003384:	e015      	b.n	80033b2 <USB_EPStartXfer+0x22a>
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	785b      	ldrb	r3, [r3, #1]
 800338a:	2b01      	cmp	r3, #1
 800338c:	d111      	bne.n	80033b2 <USB_EPStartXfer+0x22a>
 800338e:	687c      	ldr	r4, [r7, #4]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2250      	movs	r2, #80	; 0x50
 8003394:	5a9b      	ldrh	r3, [r3, r2]
 8003396:	b29b      	uxth	r3, r3
 8003398:	18e4      	adds	r4, r4, r3
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	00db      	lsls	r3, r3, #3
 80033a0:	18e3      	adds	r3, r4, r3
 80033a2:	4a61      	ldr	r2, [pc, #388]	; (8003528 <USB_EPStartXfer+0x3a0>)
 80033a4:	4694      	mov	ip, r2
 80033a6:	4463      	add	r3, ip
 80033a8:	61fb      	str	r3, [r7, #28]
 80033aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033ac:	b29a      	uxth	r2, r3
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr0;
 80033b2:	234e      	movs	r3, #78	; 0x4e
 80033b4:	18fb      	adds	r3, r7, r3
 80033b6:	683a      	ldr	r2, [r7, #0]
 80033b8:	8912      	ldrh	r2, [r2, #8]
 80033ba:	801a      	strh	r2, [r3, #0]
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	6959      	ldr	r1, [r3, #20]
 80033c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033c2:	b29c      	uxth	r4, r3
 80033c4:	234e      	movs	r3, #78	; 0x4e
 80033c6:	18fb      	adds	r3, r7, r3
 80033c8:	881a      	ldrh	r2, [r3, #0]
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	0023      	movs	r3, r4
 80033ce:	f000 fac3 	bl	8003958 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	785b      	ldrb	r3, [r3, #1]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d113      	bne.n	8003402 <USB_EPStartXfer+0x27a>
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	18d3      	adds	r3, r2, r3
 80033e4:	881b      	ldrh	r3, [r3, #0]
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	4a53      	ldr	r2, [pc, #332]	; (8003538 <USB_EPStartXfer+0x3b0>)
 80033ea:	4013      	ands	r3, r2
 80033ec:	b29c      	uxth	r4, r3
 80033ee:	687a      	ldr	r2, [r7, #4]
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	18d3      	adds	r3, r2, r3
 80033f8:	4a50      	ldr	r2, [pc, #320]	; (800353c <USB_EPStartXfer+0x3b4>)
 80033fa:	4322      	orrs	r2, r4
 80033fc:	b292      	uxth	r2, r2
 80033fe:	801a      	strh	r2, [r3, #0]
 8003400:	e016      	b.n	8003430 <USB_EPStartXfer+0x2a8>
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	785b      	ldrb	r3, [r3, #1]
 8003406:	2b01      	cmp	r3, #1
 8003408:	d112      	bne.n	8003430 <USB_EPStartXfer+0x2a8>
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	781b      	ldrb	r3, [r3, #0]
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	18d3      	adds	r3, r2, r3
 8003414:	881b      	ldrh	r3, [r3, #0]
 8003416:	b29b      	uxth	r3, r3
 8003418:	4a47      	ldr	r2, [pc, #284]	; (8003538 <USB_EPStartXfer+0x3b0>)
 800341a:	4013      	ands	r3, r2
 800341c:	b29c      	uxth	r4, r3
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	781b      	ldrb	r3, [r3, #0]
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	18d3      	adds	r3, r2, r3
 8003428:	4a45      	ldr	r2, [pc, #276]	; (8003540 <USB_EPStartXfer+0x3b8>)
 800342a:	4322      	orrs	r2, r4
 800342c:	b292      	uxth	r2, r2
 800342e:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8003430:	687a      	ldr	r2, [r7, #4]
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	781b      	ldrb	r3, [r3, #0]
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	18d3      	adds	r3, r2, r3
 800343a:	881b      	ldrh	r3, [r3, #0]
 800343c:	b29b      	uxth	r3, r3
 800343e:	4a41      	ldr	r2, [pc, #260]	; (8003544 <USB_EPStartXfer+0x3bc>)
 8003440:	4013      	ands	r3, r2
 8003442:	b29c      	uxth	r4, r3
 8003444:	2310      	movs	r3, #16
 8003446:	4063      	eors	r3, r4
 8003448:	b29c      	uxth	r4, r3
 800344a:	2320      	movs	r3, #32
 800344c:	4063      	eors	r3, r4
 800344e:	b29c      	uxth	r4, r3
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	781b      	ldrb	r3, [r3, #0]
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	18d3      	adds	r3, r2, r3
 800345a:	4a3b      	ldr	r2, [pc, #236]	; (8003548 <USB_EPStartXfer+0x3c0>)
 800345c:	4322      	orrs	r2, r4
 800345e:	b292      	uxth	r2, r2
 8003460:	801a      	strh	r2, [r3, #0]
 8003462:	e152      	b.n	800370a <USB_EPStartXfer+0x582>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	699a      	ldr	r2, [r3, #24]
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	691b      	ldr	r3, [r3, #16]
 800346c:	429a      	cmp	r2, r3
 800346e:	d909      	bls.n	8003484 <USB_EPStartXfer+0x2fc>
    {
      len = ep->maxpacket;
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	691b      	ldr	r3, [r3, #16]
 8003474:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len -= len;
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	699a      	ldr	r2, [r3, #24]
 800347a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800347c:	1ad2      	subs	r2, r2, r3
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	619a      	str	r2, [r3, #24]
 8003482:	e005      	b.n	8003490 <USB_EPStartXfer+0x308>
    }
    else
    {
      len = ep->xfer_len;
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	699b      	ldr	r3, [r3, #24]
 8003488:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len = 0U;
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	2200      	movs	r2, #0
 800348e:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	7b1b      	ldrb	r3, [r3, #12]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d159      	bne.n	800354c <USB_EPStartXfer+0x3c4>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8003498:	687c      	ldr	r4, [r7, #4]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2250      	movs	r2, #80	; 0x50
 800349e:	5a9b      	ldrh	r3, [r3, r2]
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	18e4      	adds	r4, r4, r3
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	00db      	lsls	r3, r3, #3
 80034aa:	18e3      	adds	r3, r4, r3
 80034ac:	4a1f      	ldr	r2, [pc, #124]	; (800352c <USB_EPStartXfer+0x3a4>)
 80034ae:	4694      	mov	ip, r2
 80034b0:	4463      	add	r3, ip
 80034b2:	623b      	str	r3, [r7, #32]
 80034b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d10e      	bne.n	80034d8 <USB_EPStartXfer+0x350>
 80034ba:	6a3b      	ldr	r3, [r7, #32]
 80034bc:	881b      	ldrh	r3, [r3, #0]
 80034be:	4a1c      	ldr	r2, [pc, #112]	; (8003530 <USB_EPStartXfer+0x3a8>)
 80034c0:	4013      	ands	r3, r2
 80034c2:	b29a      	uxth	r2, r3
 80034c4:	6a3b      	ldr	r3, [r7, #32]
 80034c6:	801a      	strh	r2, [r3, #0]
 80034c8:	6a3b      	ldr	r3, [r7, #32]
 80034ca:	881b      	ldrh	r3, [r3, #0]
 80034cc:	4a19      	ldr	r2, [pc, #100]	; (8003534 <USB_EPStartXfer+0x3ac>)
 80034ce:	4313      	orrs	r3, r2
 80034d0:	b29a      	uxth	r2, r3
 80034d2:	6a3b      	ldr	r3, [r7, #32]
 80034d4:	801a      	strh	r2, [r3, #0]
 80034d6:	e0fd      	b.n	80036d4 <USB_EPStartXfer+0x54c>
 80034d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034da:	2b3e      	cmp	r3, #62	; 0x3e
 80034dc:	d810      	bhi.n	8003500 <USB_EPStartXfer+0x378>
 80034de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034e0:	085b      	lsrs	r3, r3, #1
 80034e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034e6:	2201      	movs	r2, #1
 80034e8:	4013      	ands	r3, r2
 80034ea:	d002      	beq.n	80034f2 <USB_EPStartXfer+0x36a>
 80034ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034ee:	3301      	adds	r3, #1
 80034f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	029b      	lsls	r3, r3, #10
 80034f8:	b29a      	uxth	r2, r3
 80034fa:	6a3b      	ldr	r3, [r7, #32]
 80034fc:	801a      	strh	r2, [r3, #0]
 80034fe:	e0e9      	b.n	80036d4 <USB_EPStartXfer+0x54c>
 8003500:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003502:	095b      	lsrs	r3, r3, #5
 8003504:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003506:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003508:	221f      	movs	r2, #31
 800350a:	4013      	ands	r3, r2
 800350c:	d102      	bne.n	8003514 <USB_EPStartXfer+0x38c>
 800350e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003510:	3b01      	subs	r3, #1
 8003512:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003514:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003516:	b29b      	uxth	r3, r3
 8003518:	029b      	lsls	r3, r3, #10
 800351a:	b29b      	uxth	r3, r3
 800351c:	4a05      	ldr	r2, [pc, #20]	; (8003534 <USB_EPStartXfer+0x3ac>)
 800351e:	4313      	orrs	r3, r2
 8003520:	b29a      	uxth	r2, r3
 8003522:	6a3b      	ldr	r3, [r7, #32]
 8003524:	801a      	strh	r2, [r3, #0]
 8003526:	e0d5      	b.n	80036d4 <USB_EPStartXfer+0x54c>
 8003528:	00000402 	.word	0x00000402
 800352c:	00000406 	.word	0x00000406
 8003530:	ffff83ff 	.word	0xffff83ff
 8003534:	ffff8000 	.word	0xffff8000
 8003538:	ffff8f8f 	.word	0xffff8f8f
 800353c:	ffff80c0 	.word	0xffff80c0
 8003540:	ffffc080 	.word	0xffffc080
 8003544:	ffff8fbf 	.word	0xffff8fbf
 8003548:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	785b      	ldrb	r3, [r3, #1]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d147      	bne.n	80035e4 <USB_EPStartXfer+0x45c>
 8003554:	687c      	ldr	r4, [r7, #4]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2250      	movs	r2, #80	; 0x50
 800355a:	5a9b      	ldrh	r3, [r3, r2]
 800355c:	b29b      	uxth	r3, r3
 800355e:	18e4      	adds	r4, r4, r3
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	781b      	ldrb	r3, [r3, #0]
 8003564:	00db      	lsls	r3, r3, #3
 8003566:	18e3      	adds	r3, r4, r3
 8003568:	4a6a      	ldr	r2, [pc, #424]	; (8003714 <USB_EPStartXfer+0x58c>)
 800356a:	4694      	mov	ip, r2
 800356c:	4463      	add	r3, ip
 800356e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003570:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003572:	2b00      	cmp	r3, #0
 8003574:	d10e      	bne.n	8003594 <USB_EPStartXfer+0x40c>
 8003576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003578:	881b      	ldrh	r3, [r3, #0]
 800357a:	4a67      	ldr	r2, [pc, #412]	; (8003718 <USB_EPStartXfer+0x590>)
 800357c:	4013      	ands	r3, r2
 800357e:	b29a      	uxth	r2, r3
 8003580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003582:	801a      	strh	r2, [r3, #0]
 8003584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003586:	881b      	ldrh	r3, [r3, #0]
 8003588:	4a64      	ldr	r2, [pc, #400]	; (800371c <USB_EPStartXfer+0x594>)
 800358a:	4313      	orrs	r3, r2
 800358c:	b29a      	uxth	r2, r3
 800358e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003590:	801a      	strh	r2, [r3, #0]
 8003592:	e03d      	b.n	8003610 <USB_EPStartXfer+0x488>
 8003594:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003596:	2b3e      	cmp	r3, #62	; 0x3e
 8003598:	d810      	bhi.n	80035bc <USB_EPStartXfer+0x434>
 800359a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800359c:	085b      	lsrs	r3, r3, #1
 800359e:	63bb      	str	r3, [r7, #56]	; 0x38
 80035a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035a2:	2201      	movs	r2, #1
 80035a4:	4013      	ands	r3, r2
 80035a6:	d002      	beq.n	80035ae <USB_EPStartXfer+0x426>
 80035a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035aa:	3301      	adds	r3, #1
 80035ac:	63bb      	str	r3, [r7, #56]	; 0x38
 80035ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	029b      	lsls	r3, r3, #10
 80035b4:	b29a      	uxth	r2, r3
 80035b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035b8:	801a      	strh	r2, [r3, #0]
 80035ba:	e029      	b.n	8003610 <USB_EPStartXfer+0x488>
 80035bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035be:	095b      	lsrs	r3, r3, #5
 80035c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80035c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035c4:	221f      	movs	r2, #31
 80035c6:	4013      	ands	r3, r2
 80035c8:	d102      	bne.n	80035d0 <USB_EPStartXfer+0x448>
 80035ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035cc:	3b01      	subs	r3, #1
 80035ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80035d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	029b      	lsls	r3, r3, #10
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	4a50      	ldr	r2, [pc, #320]	; (800371c <USB_EPStartXfer+0x594>)
 80035da:	4313      	orrs	r3, r2
 80035dc:	b29a      	uxth	r2, r3
 80035de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035e0:	801a      	strh	r2, [r3, #0]
 80035e2:	e015      	b.n	8003610 <USB_EPStartXfer+0x488>
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	785b      	ldrb	r3, [r3, #1]
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d111      	bne.n	8003610 <USB_EPStartXfer+0x488>
 80035ec:	687c      	ldr	r4, [r7, #4]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2250      	movs	r2, #80	; 0x50
 80035f2:	5a9b      	ldrh	r3, [r3, r2]
 80035f4:	b29b      	uxth	r3, r3
 80035f6:	18e4      	adds	r4, r4, r3
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	00db      	lsls	r3, r3, #3
 80035fe:	18e3      	adds	r3, r4, r3
 8003600:	4a44      	ldr	r2, [pc, #272]	; (8003714 <USB_EPStartXfer+0x58c>)
 8003602:	4694      	mov	ip, r2
 8003604:	4463      	add	r3, ip
 8003606:	633b      	str	r3, [r7, #48]	; 0x30
 8003608:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800360a:	b29a      	uxth	r2, r3
 800360c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800360e:	801a      	strh	r2, [r3, #0]
 8003610:	687c      	ldr	r4, [r7, #4]
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	785b      	ldrb	r3, [r3, #1]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d147      	bne.n	80036aa <USB_EPStartXfer+0x522>
 800361a:	687c      	ldr	r4, [r7, #4]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2250      	movs	r2, #80	; 0x50
 8003620:	5a9b      	ldrh	r3, [r3, r2]
 8003622:	b29b      	uxth	r3, r3
 8003624:	18e4      	adds	r4, r4, r3
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	781b      	ldrb	r3, [r3, #0]
 800362a:	00db      	lsls	r3, r3, #3
 800362c:	18e3      	adds	r3, r4, r3
 800362e:	4a3c      	ldr	r2, [pc, #240]	; (8003720 <USB_EPStartXfer+0x598>)
 8003630:	4694      	mov	ip, r2
 8003632:	4463      	add	r3, ip
 8003634:	627b      	str	r3, [r7, #36]	; 0x24
 8003636:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003638:	2b00      	cmp	r3, #0
 800363a:	d10e      	bne.n	800365a <USB_EPStartXfer+0x4d2>
 800363c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363e:	881b      	ldrh	r3, [r3, #0]
 8003640:	4a35      	ldr	r2, [pc, #212]	; (8003718 <USB_EPStartXfer+0x590>)
 8003642:	4013      	ands	r3, r2
 8003644:	b29a      	uxth	r2, r3
 8003646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003648:	801a      	strh	r2, [r3, #0]
 800364a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364c:	881b      	ldrh	r3, [r3, #0]
 800364e:	4a33      	ldr	r2, [pc, #204]	; (800371c <USB_EPStartXfer+0x594>)
 8003650:	4313      	orrs	r3, r2
 8003652:	b29a      	uxth	r2, r3
 8003654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003656:	801a      	strh	r2, [r3, #0]
 8003658:	e03c      	b.n	80036d4 <USB_EPStartXfer+0x54c>
 800365a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800365c:	2b3e      	cmp	r3, #62	; 0x3e
 800365e:	d810      	bhi.n	8003682 <USB_EPStartXfer+0x4fa>
 8003660:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003662:	085b      	lsrs	r3, r3, #1
 8003664:	637b      	str	r3, [r7, #52]	; 0x34
 8003666:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003668:	2201      	movs	r2, #1
 800366a:	4013      	ands	r3, r2
 800366c:	d002      	beq.n	8003674 <USB_EPStartXfer+0x4ec>
 800366e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003670:	3301      	adds	r3, #1
 8003672:	637b      	str	r3, [r7, #52]	; 0x34
 8003674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003676:	b29b      	uxth	r3, r3
 8003678:	029b      	lsls	r3, r3, #10
 800367a:	b29a      	uxth	r2, r3
 800367c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367e:	801a      	strh	r2, [r3, #0]
 8003680:	e028      	b.n	80036d4 <USB_EPStartXfer+0x54c>
 8003682:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003684:	095b      	lsrs	r3, r3, #5
 8003686:	637b      	str	r3, [r7, #52]	; 0x34
 8003688:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800368a:	221f      	movs	r2, #31
 800368c:	4013      	ands	r3, r2
 800368e:	d102      	bne.n	8003696 <USB_EPStartXfer+0x50e>
 8003690:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003692:	3b01      	subs	r3, #1
 8003694:	637b      	str	r3, [r7, #52]	; 0x34
 8003696:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003698:	b29b      	uxth	r3, r3
 800369a:	029b      	lsls	r3, r3, #10
 800369c:	b29b      	uxth	r3, r3
 800369e:	4a1f      	ldr	r2, [pc, #124]	; (800371c <USB_EPStartXfer+0x594>)
 80036a0:	4313      	orrs	r3, r2
 80036a2:	b29a      	uxth	r2, r3
 80036a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a6:	801a      	strh	r2, [r3, #0]
 80036a8:	e014      	b.n	80036d4 <USB_EPStartXfer+0x54c>
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	785b      	ldrb	r3, [r3, #1]
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d110      	bne.n	80036d4 <USB_EPStartXfer+0x54c>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2250      	movs	r2, #80	; 0x50
 80036b6:	5a9b      	ldrh	r3, [r3, r2]
 80036b8:	b29b      	uxth	r3, r3
 80036ba:	18e4      	adds	r4, r4, r3
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	781b      	ldrb	r3, [r3, #0]
 80036c0:	00db      	lsls	r3, r3, #3
 80036c2:	18e3      	adds	r3, r4, r3
 80036c4:	4a16      	ldr	r2, [pc, #88]	; (8003720 <USB_EPStartXfer+0x598>)
 80036c6:	4694      	mov	ip, r2
 80036c8:	4463      	add	r3, ip
 80036ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80036cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036ce:	b29a      	uxth	r2, r3
 80036d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036d2:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	781b      	ldrb	r3, [r3, #0]
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	18d3      	adds	r3, r2, r3
 80036de:	881b      	ldrh	r3, [r3, #0]
 80036e0:	b29b      	uxth	r3, r3
 80036e2:	4a10      	ldr	r2, [pc, #64]	; (8003724 <USB_EPStartXfer+0x59c>)
 80036e4:	4013      	ands	r3, r2
 80036e6:	b29c      	uxth	r4, r3
 80036e8:	2380      	movs	r3, #128	; 0x80
 80036ea:	015b      	lsls	r3, r3, #5
 80036ec:	4063      	eors	r3, r4
 80036ee:	b29c      	uxth	r4, r3
 80036f0:	2380      	movs	r3, #128	; 0x80
 80036f2:	019b      	lsls	r3, r3, #6
 80036f4:	4063      	eors	r3, r4
 80036f6:	b29c      	uxth	r4, r3
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	781b      	ldrb	r3, [r3, #0]
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	18d3      	adds	r3, r2, r3
 8003702:	4a09      	ldr	r2, [pc, #36]	; (8003728 <USB_EPStartXfer+0x5a0>)
 8003704:	4322      	orrs	r2, r4
 8003706:	b292      	uxth	r2, r2
 8003708:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 800370a:	2300      	movs	r3, #0
}
 800370c:	0018      	movs	r0, r3
 800370e:	46bd      	mov	sp, r7
 8003710:	b015      	add	sp, #84	; 0x54
 8003712:	bd90      	pop	{r4, r7, pc}
 8003714:	00000402 	.word	0x00000402
 8003718:	ffff83ff 	.word	0xffff83ff
 800371c:	ffff8000 	.word	0xffff8000
 8003720:	00000406 	.word	0x00000406
 8003724:	ffffbf8f 	.word	0xffffbf8f
 8003728:	ffff8080 	.word	0xffff8080

0800372c <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800372c:	b590      	push	{r4, r7, lr}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	785b      	ldrb	r3, [r3, #1]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d016      	beq.n	800376c <USB_EPSetStall+0x40>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	18d3      	adds	r3, r2, r3
 8003748:	881b      	ldrh	r3, [r3, #0]
 800374a:	b29b      	uxth	r3, r3
 800374c:	4a15      	ldr	r2, [pc, #84]	; (80037a4 <USB_EPSetStall+0x78>)
 800374e:	4013      	ands	r3, r2
 8003750:	b29c      	uxth	r4, r3
 8003752:	2310      	movs	r3, #16
 8003754:	4063      	eors	r3, r4
 8003756:	b29c      	uxth	r4, r3
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	781b      	ldrb	r3, [r3, #0]
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	18d3      	adds	r3, r2, r3
 8003762:	4a11      	ldr	r2, [pc, #68]	; (80037a8 <USB_EPSetStall+0x7c>)
 8003764:	4322      	orrs	r2, r4
 8003766:	b292      	uxth	r2, r2
 8003768:	801a      	strh	r2, [r3, #0]
 800376a:	e016      	b.n	800379a <USB_EPSetStall+0x6e>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	18d3      	adds	r3, r2, r3
 8003776:	881b      	ldrh	r3, [r3, #0]
 8003778:	b29b      	uxth	r3, r3
 800377a:	4a0c      	ldr	r2, [pc, #48]	; (80037ac <USB_EPSetStall+0x80>)
 800377c:	4013      	ands	r3, r2
 800377e:	b29c      	uxth	r4, r3
 8003780:	2380      	movs	r3, #128	; 0x80
 8003782:	015b      	lsls	r3, r3, #5
 8003784:	4063      	eors	r3, r4
 8003786:	b29c      	uxth	r4, r3
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	18d3      	adds	r3, r2, r3
 8003792:	4a05      	ldr	r2, [pc, #20]	; (80037a8 <USB_EPSetStall+0x7c>)
 8003794:	4322      	orrs	r2, r4
 8003796:	b292      	uxth	r2, r2
 8003798:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 800379a:	2300      	movs	r3, #0
}
 800379c:	0018      	movs	r0, r3
 800379e:	46bd      	mov	sp, r7
 80037a0:	b003      	add	sp, #12
 80037a2:	bd90      	pop	{r4, r7, pc}
 80037a4:	ffff8fbf 	.word	0xffff8fbf
 80037a8:	ffff8080 	.word	0xffff8080
 80037ac:	ffffbf8f 	.word	0xffffbf8f

080037b0 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80037b0:	b590      	push	{r4, r7, lr}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	7b1b      	ldrb	r3, [r3, #12]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d000      	beq.n	80037c4 <USB_EPClearStall+0x14>
 80037c2:	e076      	b.n	80038b2 <USB_EPClearStall+0x102>
  {
    if (ep->is_in != 0U)
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	785b      	ldrb	r3, [r3, #1]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d038      	beq.n	800383e <USB_EPClearStall+0x8e>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80037cc:	687a      	ldr	r2, [r7, #4]
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	18d3      	adds	r3, r2, r3
 80037d6:	881b      	ldrh	r3, [r3, #0]
 80037d8:	b29c      	uxth	r4, r3
 80037da:	0022      	movs	r2, r4
 80037dc:	2340      	movs	r3, #64	; 0x40
 80037de:	4013      	ands	r3, r2
 80037e0:	d012      	beq.n	8003808 <USB_EPClearStall+0x58>
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	781b      	ldrb	r3, [r3, #0]
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	18d3      	adds	r3, r2, r3
 80037ec:	881b      	ldrh	r3, [r3, #0]
 80037ee:	b29b      	uxth	r3, r3
 80037f0:	4a32      	ldr	r2, [pc, #200]	; (80038bc <USB_EPClearStall+0x10c>)
 80037f2:	4013      	ands	r3, r2
 80037f4:	b29c      	uxth	r4, r3
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	781b      	ldrb	r3, [r3, #0]
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	18d3      	adds	r3, r2, r3
 8003800:	4a2f      	ldr	r2, [pc, #188]	; (80038c0 <USB_EPClearStall+0x110>)
 8003802:	4322      	orrs	r2, r4
 8003804:	b292      	uxth	r2, r2
 8003806:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	78db      	ldrb	r3, [r3, #3]
 800380c:	2b01      	cmp	r3, #1
 800380e:	d050      	beq.n	80038b2 <USB_EPClearStall+0x102>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	781b      	ldrb	r3, [r3, #0]
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	18d3      	adds	r3, r2, r3
 800381a:	881b      	ldrh	r3, [r3, #0]
 800381c:	b29b      	uxth	r3, r3
 800381e:	4a29      	ldr	r2, [pc, #164]	; (80038c4 <USB_EPClearStall+0x114>)
 8003820:	4013      	ands	r3, r2
 8003822:	b29c      	uxth	r4, r3
 8003824:	2320      	movs	r3, #32
 8003826:	4063      	eors	r3, r4
 8003828:	b29c      	uxth	r4, r3
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	781b      	ldrb	r3, [r3, #0]
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	18d3      	adds	r3, r2, r3
 8003834:	4a24      	ldr	r2, [pc, #144]	; (80038c8 <USB_EPClearStall+0x118>)
 8003836:	4322      	orrs	r2, r4
 8003838:	b292      	uxth	r2, r2
 800383a:	801a      	strh	r2, [r3, #0]
 800383c:	e039      	b.n	80038b2 <USB_EPClearStall+0x102>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	781b      	ldrb	r3, [r3, #0]
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	18d3      	adds	r3, r2, r3
 8003848:	881b      	ldrh	r3, [r3, #0]
 800384a:	b29c      	uxth	r4, r3
 800384c:	0022      	movs	r2, r4
 800384e:	2380      	movs	r3, #128	; 0x80
 8003850:	01db      	lsls	r3, r3, #7
 8003852:	4013      	ands	r3, r2
 8003854:	d012      	beq.n	800387c <USB_EPClearStall+0xcc>
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	781b      	ldrb	r3, [r3, #0]
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	18d3      	adds	r3, r2, r3
 8003860:	881b      	ldrh	r3, [r3, #0]
 8003862:	b29b      	uxth	r3, r3
 8003864:	4a15      	ldr	r2, [pc, #84]	; (80038bc <USB_EPClearStall+0x10c>)
 8003866:	4013      	ands	r3, r2
 8003868:	b29c      	uxth	r4, r3
 800386a:	687a      	ldr	r2, [r7, #4]
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	781b      	ldrb	r3, [r3, #0]
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	18d3      	adds	r3, r2, r3
 8003874:	4a15      	ldr	r2, [pc, #84]	; (80038cc <USB_EPClearStall+0x11c>)
 8003876:	4322      	orrs	r2, r4
 8003878:	b292      	uxth	r2, r2
 800387a:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	781b      	ldrb	r3, [r3, #0]
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	18d3      	adds	r3, r2, r3
 8003886:	881b      	ldrh	r3, [r3, #0]
 8003888:	b29b      	uxth	r3, r3
 800388a:	4a11      	ldr	r2, [pc, #68]	; (80038d0 <USB_EPClearStall+0x120>)
 800388c:	4013      	ands	r3, r2
 800388e:	b29c      	uxth	r4, r3
 8003890:	2380      	movs	r3, #128	; 0x80
 8003892:	015b      	lsls	r3, r3, #5
 8003894:	4063      	eors	r3, r4
 8003896:	b29c      	uxth	r4, r3
 8003898:	2380      	movs	r3, #128	; 0x80
 800389a:	019b      	lsls	r3, r3, #6
 800389c:	4063      	eors	r3, r4
 800389e:	b29c      	uxth	r4, r3
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	18d3      	adds	r3, r2, r3
 80038aa:	4a07      	ldr	r2, [pc, #28]	; (80038c8 <USB_EPClearStall+0x118>)
 80038ac:	4322      	orrs	r2, r4
 80038ae:	b292      	uxth	r2, r2
 80038b0:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 80038b2:	2300      	movs	r3, #0
}
 80038b4:	0018      	movs	r0, r3
 80038b6:	46bd      	mov	sp, r7
 80038b8:	b003      	add	sp, #12
 80038ba:	bd90      	pop	{r4, r7, pc}
 80038bc:	ffff8f8f 	.word	0xffff8f8f
 80038c0:	ffff80c0 	.word	0xffff80c0
 80038c4:	ffff8fbf 	.word	0xffff8fbf
 80038c8:	ffff8080 	.word	0xffff8080
 80038cc:	ffffc080 	.word	0xffffc080
 80038d0:	ffffbf8f 	.word	0xffffbf8f

080038d4 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b082      	sub	sp, #8
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	000a      	movs	r2, r1
 80038de:	1cfb      	adds	r3, r7, #3
 80038e0:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 80038e2:	1cfb      	adds	r3, r7, #3
 80038e4:	781b      	ldrb	r3, [r3, #0]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d103      	bne.n	80038f2 <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	224c      	movs	r2, #76	; 0x4c
 80038ee:	2180      	movs	r1, #128	; 0x80
 80038f0:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 80038f2:	2300      	movs	r3, #0
}
 80038f4:	0018      	movs	r0, r3
 80038f6:	46bd      	mov	sp, r7
 80038f8:	b002      	add	sp, #8
 80038fa:	bd80      	pop	{r7, pc}

080038fc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2258      	movs	r2, #88	; 0x58
 8003908:	5a9b      	ldrh	r3, [r3, r2]
 800390a:	b29b      	uxth	r3, r3
 800390c:	4a05      	ldr	r2, [pc, #20]	; (8003924 <USB_DevConnect+0x28>)
 800390e:	4313      	orrs	r3, r2
 8003910:	b299      	uxth	r1, r3
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2258      	movs	r2, #88	; 0x58
 8003916:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8003918:	2300      	movs	r3, #0
}
 800391a:	0018      	movs	r0, r3
 800391c:	46bd      	mov	sp, r7
 800391e:	b002      	add	sp, #8
 8003920:	bd80      	pop	{r7, pc}
 8003922:	46c0      	nop			; (mov r8, r8)
 8003924:	ffff8000 	.word	0xffff8000

08003928 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b084      	sub	sp, #16
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2244      	movs	r2, #68	; 0x44
 8003934:	5a9b      	ldrh	r3, [r3, r2]
 8003936:	b29b      	uxth	r3, r3
 8003938:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800393a:	68fb      	ldr	r3, [r7, #12]
}
 800393c:	0018      	movs	r0, r3
 800393e:	46bd      	mov	sp, r7
 8003940:	b004      	add	sp, #16
 8003942:	bd80      	pop	{r7, pc}

08003944 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b082      	sub	sp, #8
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800394e:	2300      	movs	r3, #0
}
 8003950:	0018      	movs	r0, r3
 8003952:	46bd      	mov	sp, r7
 8003954:	b002      	add	sp, #8
 8003956:	bd80      	pop	{r7, pc}

08003958 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b08c      	sub	sp, #48	; 0x30
 800395c:	af00      	add	r7, sp, #0
 800395e:	60f8      	str	r0, [r7, #12]
 8003960:	60b9      	str	r1, [r7, #8]
 8003962:	0019      	movs	r1, r3
 8003964:	1dbb      	adds	r3, r7, #6
 8003966:	801a      	strh	r2, [r3, #0]
 8003968:	1d3b      	adds	r3, r7, #4
 800396a:	1c0a      	adds	r2, r1, #0
 800396c:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800396e:	1d3b      	adds	r3, r7, #4
 8003970:	881b      	ldrh	r3, [r3, #0]
 8003972:	3301      	adds	r3, #1
 8003974:	085b      	lsrs	r3, r3, #1
 8003976:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003980:	1dbb      	adds	r3, r7, #6
 8003982:	881a      	ldrh	r2, [r3, #0]
 8003984:	69fb      	ldr	r3, [r7, #28]
 8003986:	18d3      	adds	r3, r2, r3
 8003988:	2280      	movs	r2, #128	; 0x80
 800398a:	00d2      	lsls	r2, r2, #3
 800398c:	4694      	mov	ip, r2
 800398e:	4463      	add	r3, ip
 8003990:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8003992:	6a3b      	ldr	r3, [r7, #32]
 8003994:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003996:	e01b      	b.n	80039d0 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8003998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800399e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a0:	3301      	adds	r3, #1
 80039a2:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80039a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a6:	781b      	ldrb	r3, [r3, #0]
 80039a8:	b29b      	uxth	r3, r3
 80039aa:	021b      	lsls	r3, r3, #8
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	001a      	movs	r2, r3
 80039b0:	69bb      	ldr	r3, [r7, #24]
 80039b2:	4313      	orrs	r3, r2
 80039b4:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	b29a      	uxth	r2, r3
 80039ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039bc:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80039be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039c0:	3302      	adds	r3, #2
 80039c2:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 80039c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c6:	3301      	adds	r3, #1
 80039c8:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80039ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039cc:	3b01      	subs	r3, #1
 80039ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d1e0      	bne.n	8003998 <USB_WritePMA+0x40>
  }
}
 80039d6:	46c0      	nop			; (mov r8, r8)
 80039d8:	46bd      	mov	sp, r7
 80039da:	b00c      	add	sp, #48	; 0x30
 80039dc:	bd80      	pop	{r7, pc}

080039de <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80039de:	b580      	push	{r7, lr}
 80039e0:	b08a      	sub	sp, #40	; 0x28
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	60f8      	str	r0, [r7, #12]
 80039e6:	60b9      	str	r1, [r7, #8]
 80039e8:	0019      	movs	r1, r3
 80039ea:	1dbb      	adds	r3, r7, #6
 80039ec:	801a      	strh	r2, [r3, #0]
 80039ee:	1d3b      	adds	r3, r7, #4
 80039f0:	1c0a      	adds	r2, r1, #0
 80039f2:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80039f4:	1d3b      	adds	r3, r7, #4
 80039f6:	881b      	ldrh	r3, [r3, #0]
 80039f8:	085b      	lsrs	r3, r3, #1
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003a06:	1dbb      	adds	r3, r7, #6
 8003a08:	881a      	ldrh	r2, [r3, #0]
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	18d3      	adds	r3, r2, r3
 8003a0e:	2280      	movs	r2, #128	; 0x80
 8003a10:	00d2      	lsls	r2, r2, #3
 8003a12:	4694      	mov	ip, r2
 8003a14:	4463      	add	r3, ip
 8003a16:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8003a18:	69bb      	ldr	r3, [r7, #24]
 8003a1a:	627b      	str	r3, [r7, #36]	; 0x24
 8003a1c:	e018      	b.n	8003a50 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8003a1e:	6a3b      	ldr	r3, [r7, #32]
 8003a20:	881b      	ldrh	r3, [r3, #0]
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8003a26:	6a3b      	ldr	r3, [r7, #32]
 8003a28:	3302      	adds	r3, #2
 8003a2a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	b2da      	uxtb	r2, r3
 8003a30:	69fb      	ldr	r3, [r7, #28]
 8003a32:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8003a34:	69fb      	ldr	r3, [r7, #28]
 8003a36:	3301      	adds	r3, #1
 8003a38:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	0a1b      	lsrs	r3, r3, #8
 8003a3e:	b2da      	uxtb	r2, r3
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	3301      	adds	r3, #1
 8003a48:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8003a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4c:	3b01      	subs	r3, #1
 8003a4e:	627b      	str	r3, [r7, #36]	; 0x24
 8003a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d1e3      	bne.n	8003a1e <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8003a56:	1d3b      	adds	r3, r7, #4
 8003a58:	881b      	ldrh	r3, [r3, #0]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d007      	beq.n	8003a74 <USB_ReadPMA+0x96>
  {
    temp = *pdwVal;
 8003a64:	6a3b      	ldr	r3, [r7, #32]
 8003a66:	881b      	ldrh	r3, [r3, #0]
 8003a68:	b29b      	uxth	r3, r3
 8003a6a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	b2da      	uxtb	r2, r3
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	701a      	strb	r2, [r3, #0]
  }
}
 8003a74:	46c0      	nop			; (mov r8, r8)
 8003a76:	46bd      	mov	sp, r7
 8003a78:	b00a      	add	sp, #40	; 0x28
 8003a7a:	bd80      	pop	{r7, pc}

08003a7c <get_ip>:
static dhcp_config_t *config = NULL;

char magic_cookie[] = {0x63,0x82,0x53,0x63};

static uint32_t get_ip(const uint8_t *pnt)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b084      	sub	sp, #16
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  uint32_t result;
  memcpy(&result, pnt, sizeof(result));
 8003a84:	6879      	ldr	r1, [r7, #4]
 8003a86:	230c      	movs	r3, #12
 8003a88:	18fb      	adds	r3, r7, r3
 8003a8a:	2204      	movs	r2, #4
 8003a8c:	0018      	movs	r0, r3
 8003a8e:	f00e fae2 	bl	8012056 <memcpy>
  return result;
 8003a92:	68fb      	ldr	r3, [r7, #12]
}
 8003a94:	0018      	movs	r0, r3
 8003a96:	46bd      	mov	sp, r7
 8003a98:	b004      	add	sp, #16
 8003a9a:	bd80      	pop	{r7, pc}

08003a9c <set_ip>:

static void set_ip(uint8_t *pnt, uint32_t value)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b082      	sub	sp, #8
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	6039      	str	r1, [r7, #0]
  memcpy(pnt, &value, sizeof(value));
 8003aa6:	0039      	movs	r1, r7
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2204      	movs	r2, #4
 8003aac:	0018      	movs	r0, r3
 8003aae:	f00e fad2 	bl	8012056 <memcpy>
}
 8003ab2:	46c0      	nop			; (mov r8, r8)
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	b002      	add	sp, #8
 8003ab8:	bd80      	pop	{r7, pc}
	...

08003abc <entry_by_ip>:

static dhcp_entry_t *entry_by_ip(uint32_t ip)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b084      	sub	sp, #16
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
	int i;
	for (i = 0; i < config->num_entry; i++)
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	60fb      	str	r3, [r7, #12]
 8003ac8:	e01d      	b.n	8003b06 <entry_by_ip+0x4a>
		if (get_ip(config->entries[i].addr) == ip)
 8003aca:	4b14      	ldr	r3, [pc, #80]	; (8003b1c <entry_by_ip+0x60>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	6959      	ldr	r1, [r3, #20]
 8003ad0:	68fa      	ldr	r2, [r7, #12]
 8003ad2:	0013      	movs	r3, r2
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	189b      	adds	r3, r3, r2
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	18cb      	adds	r3, r1, r3
 8003adc:	3306      	adds	r3, #6
 8003ade:	0018      	movs	r0, r3
 8003ae0:	f7ff ffcc 	bl	8003a7c <get_ip>
 8003ae4:	0002      	movs	r2, r0
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d109      	bne.n	8003b00 <entry_by_ip+0x44>
			return &config->entries[i];
 8003aec:	4b0b      	ldr	r3, [pc, #44]	; (8003b1c <entry_by_ip+0x60>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	6959      	ldr	r1, [r3, #20]
 8003af2:	68fa      	ldr	r2, [r7, #12]
 8003af4:	0013      	movs	r3, r2
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	189b      	adds	r3, r3, r2
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	18cb      	adds	r3, r1, r3
 8003afe:	e009      	b.n	8003b14 <entry_by_ip+0x58>
	for (i = 0; i < config->num_entry; i++)
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	3301      	adds	r3, #1
 8003b04:	60fb      	str	r3, [r7, #12]
 8003b06:	4b05      	ldr	r3, [pc, #20]	; (8003b1c <entry_by_ip+0x60>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	691b      	ldr	r3, [r3, #16]
 8003b0c:	68fa      	ldr	r2, [r7, #12]
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	dbdb      	blt.n	8003aca <entry_by_ip+0xe>
	return NULL;
 8003b12:	2300      	movs	r3, #0
}
 8003b14:	0018      	movs	r0, r3
 8003b16:	46bd      	mov	sp, r7
 8003b18:	b004      	add	sp, #16
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	20000138 	.word	0x20000138

08003b20 <entry_by_mac>:

static dhcp_entry_t *entry_by_mac(uint8_t *mac)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b084      	sub	sp, #16
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
	int i;
	for (i = 0; i < config->num_entry; i++)
 8003b28:	2300      	movs	r3, #0
 8003b2a:	60fb      	str	r3, [r7, #12]
 8003b2c:	e01d      	b.n	8003b6a <entry_by_mac+0x4a>
		if (memcmp(config->entries[i].mac, mac, 6) == 0)
 8003b2e:	4b14      	ldr	r3, [pc, #80]	; (8003b80 <entry_by_mac+0x60>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	6959      	ldr	r1, [r3, #20]
 8003b34:	68fa      	ldr	r2, [r7, #12]
 8003b36:	0013      	movs	r3, r2
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	189b      	adds	r3, r3, r2
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	18cb      	adds	r3, r1, r3
 8003b40:	0018      	movs	r0, r3
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2206      	movs	r2, #6
 8003b46:	0019      	movs	r1, r3
 8003b48:	f00e fa76 	bl	8012038 <memcmp>
 8003b4c:	1e03      	subs	r3, r0, #0
 8003b4e:	d109      	bne.n	8003b64 <entry_by_mac+0x44>
			return &config->entries[i];
 8003b50:	4b0b      	ldr	r3, [pc, #44]	; (8003b80 <entry_by_mac+0x60>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	6959      	ldr	r1, [r3, #20]
 8003b56:	68fa      	ldr	r2, [r7, #12]
 8003b58:	0013      	movs	r3, r2
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	189b      	adds	r3, r3, r2
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	18cb      	adds	r3, r1, r3
 8003b62:	e009      	b.n	8003b78 <entry_by_mac+0x58>
	for (i = 0; i < config->num_entry; i++)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	3301      	adds	r3, #1
 8003b68:	60fb      	str	r3, [r7, #12]
 8003b6a:	4b05      	ldr	r3, [pc, #20]	; (8003b80 <entry_by_mac+0x60>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	691b      	ldr	r3, [r3, #16]
 8003b70:	68fa      	ldr	r2, [r7, #12]
 8003b72:	429a      	cmp	r2, r3
 8003b74:	dbdb      	blt.n	8003b2e <entry_by_mac+0xe>
	return NULL;
 8003b76:	2300      	movs	r3, #0
}
 8003b78:	0018      	movs	r0, r3
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	b004      	add	sp, #16
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	20000138 	.word	0x20000138

08003b84 <is_vacant>:

static __inline bool is_vacant(dhcp_entry_t *entry)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b082      	sub	sp, #8
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
	return memcmp("\0\0\0\0\0", entry->mac, 6) == 0;
 8003b8c:	6879      	ldr	r1, [r7, #4]
 8003b8e:	4b06      	ldr	r3, [pc, #24]	; (8003ba8 <is_vacant+0x24>)
 8003b90:	2206      	movs	r2, #6
 8003b92:	0018      	movs	r0, r3
 8003b94:	f00e fa50 	bl	8012038 <memcmp>
 8003b98:	0003      	movs	r3, r0
 8003b9a:	425a      	negs	r2, r3
 8003b9c:	4153      	adcs	r3, r2
 8003b9e:	b2db      	uxtb	r3, r3
}
 8003ba0:	0018      	movs	r0, r3
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	b002      	add	sp, #8
 8003ba6:	bd80      	pop	{r7, pc}
 8003ba8:	08012940 	.word	0x08012940

08003bac <vacant_address>:

static dhcp_entry_t *vacant_address()
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b082      	sub	sp, #8
 8003bb0:	af00      	add	r7, sp, #0
	int i;
	for (i = 0; i < config->num_entry; i++)
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	607b      	str	r3, [r7, #4]
 8003bb6:	e01a      	b.n	8003bee <vacant_address+0x42>
		if (is_vacant(config->entries + i))
 8003bb8:	4b12      	ldr	r3, [pc, #72]	; (8003c04 <vacant_address+0x58>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	6959      	ldr	r1, [r3, #20]
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	0013      	movs	r3, r2
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	189b      	adds	r3, r3, r2
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	18cb      	adds	r3, r1, r3
 8003bca:	0018      	movs	r0, r3
 8003bcc:	f7ff ffda 	bl	8003b84 <is_vacant>
 8003bd0:	1e03      	subs	r3, r0, #0
 8003bd2:	d009      	beq.n	8003be8 <vacant_address+0x3c>
			return config->entries + i;
 8003bd4:	4b0b      	ldr	r3, [pc, #44]	; (8003c04 <vacant_address+0x58>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	6959      	ldr	r1, [r3, #20]
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	0013      	movs	r3, r2
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	189b      	adds	r3, r3, r2
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	18cb      	adds	r3, r1, r3
 8003be6:	e009      	b.n	8003bfc <vacant_address+0x50>
	for (i = 0; i < config->num_entry; i++)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	3301      	adds	r3, #1
 8003bec:	607b      	str	r3, [r7, #4]
 8003bee:	4b05      	ldr	r3, [pc, #20]	; (8003c04 <vacant_address+0x58>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	691b      	ldr	r3, [r3, #16]
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	dbde      	blt.n	8003bb8 <vacant_address+0xc>
	return NULL;
 8003bfa:	2300      	movs	r3, #0
}
 8003bfc:	0018      	movs	r0, r3
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	b002      	add	sp, #8
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	20000138 	.word	0x20000138

08003c08 <free_entry>:

static __inline void free_entry(dhcp_entry_t *entry)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b082      	sub	sp, #8
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
	memset(entry->mac, 0, 6);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2206      	movs	r2, #6
 8003c14:	2100      	movs	r1, #0
 8003c16:	0018      	movs	r0, r3
 8003c18:	f00e fa26 	bl	8012068 <memset>
}
 8003c1c:	46c0      	nop			; (mov r8, r8)
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	b002      	add	sp, #8
 8003c22:	bd80      	pop	{r7, pc}

08003c24 <find_dhcp_option>:

uint8_t *find_dhcp_option(uint8_t *attrs, int size, uint8_t attr)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b086      	sub	sp, #24
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	60f8      	str	r0, [r7, #12]
 8003c2c:	60b9      	str	r1, [r7, #8]
 8003c2e:	1dfb      	adds	r3, r7, #7
 8003c30:	701a      	strb	r2, [r3, #0]
	int i = 0;
 8003c32:	2300      	movs	r3, #0
 8003c34:	617b      	str	r3, [r7, #20]
	while ((i + 1) < size)
 8003c36:	e01d      	b.n	8003c74 <find_dhcp_option+0x50>
	{
		int next = i + attrs[i + 1] + 2;
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	3301      	adds	r3, #1
 8003c3c:	68fa      	ldr	r2, [r7, #12]
 8003c3e:	18d3      	adds	r3, r2, r3
 8003c40:	781b      	ldrb	r3, [r3, #0]
 8003c42:	001a      	movs	r2, r3
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	18d3      	adds	r3, r2, r3
 8003c48:	3302      	adds	r3, #2
 8003c4a:	613b      	str	r3, [r7, #16]
		if (next > size) return NULL;
 8003c4c:	693a      	ldr	r2, [r7, #16]
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	429a      	cmp	r2, r3
 8003c52:	dd01      	ble.n	8003c58 <find_dhcp_option+0x34>
 8003c54:	2300      	movs	r3, #0
 8003c56:	e013      	b.n	8003c80 <find_dhcp_option+0x5c>
		if (attrs[i] == attr)
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	68fa      	ldr	r2, [r7, #12]
 8003c5c:	18d3      	adds	r3, r2, r3
 8003c5e:	781b      	ldrb	r3, [r3, #0]
 8003c60:	1dfa      	adds	r2, r7, #7
 8003c62:	7812      	ldrb	r2, [r2, #0]
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d103      	bne.n	8003c70 <find_dhcp_option+0x4c>
			return attrs + i;
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	68fa      	ldr	r2, [r7, #12]
 8003c6c:	18d3      	adds	r3, r2, r3
 8003c6e:	e007      	b.n	8003c80 <find_dhcp_option+0x5c>
		i = next;
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	617b      	str	r3, [r7, #20]
	while ((i + 1) < size)
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	3301      	adds	r3, #1
 8003c78:	68ba      	ldr	r2, [r7, #8]
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	dcdc      	bgt.n	8003c38 <find_dhcp_option+0x14>
	}
	return NULL;
 8003c7e:	2300      	movs	r3, #0
}
 8003c80:	0018      	movs	r0, r3
 8003c82:	46bd      	mov	sp, r7
 8003c84:	b006      	add	sp, #24
 8003c86:	bd80      	pop	{r7, pc}

08003c88 <fill_options>:
	uint32_t dns,
	int lease_time,
	uint32_t serverid,
	uint32_t router,
	uint32_t subnet)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b086      	sub	sp, #24
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	607a      	str	r2, [r7, #4]
 8003c92:	603b      	str	r3, [r7, #0]
 8003c94:	200b      	movs	r0, #11
 8003c96:	183b      	adds	r3, r7, r0
 8003c98:	1c0a      	adds	r2, r1, #0
 8003c9a:	701a      	strb	r2, [r3, #0]
	uint8_t *ptr = (uint8_t *)dest;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	617b      	str	r3, [r7, #20]
	/* ACK message type */
	*ptr++ = 53;
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	1c5a      	adds	r2, r3, #1
 8003ca4:	617a      	str	r2, [r7, #20]
 8003ca6:	2235      	movs	r2, #53	; 0x35
 8003ca8:	701a      	strb	r2, [r3, #0]
	*ptr++ = 1;
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	1c5a      	adds	r2, r3, #1
 8003cae:	617a      	str	r2, [r7, #20]
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	701a      	strb	r2, [r3, #0]
	*ptr++ = msg_type;
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	1c5a      	adds	r2, r3, #1
 8003cb8:	617a      	str	r2, [r7, #20]
 8003cba:	183a      	adds	r2, r7, r0
 8003cbc:	7812      	ldrb	r2, [r2, #0]
 8003cbe:	701a      	strb	r2, [r3, #0]

	/* dhcp server identifier */
	*ptr++ = DHCP_SERVERID;
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	1c5a      	adds	r2, r3, #1
 8003cc4:	617a      	str	r2, [r7, #20]
 8003cc6:	2236      	movs	r2, #54	; 0x36
 8003cc8:	701a      	strb	r2, [r3, #0]
	*ptr++ = 4;
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	1c5a      	adds	r2, r3, #1
 8003cce:	617a      	str	r2, [r7, #20]
 8003cd0:	2204      	movs	r2, #4
 8003cd2:	701a      	strb	r2, [r3, #0]
	set_ip(ptr, serverid);
 8003cd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	0011      	movs	r1, r2
 8003cda:	0018      	movs	r0, r3
 8003cdc:	f7ff fede 	bl	8003a9c <set_ip>
	ptr += 4;
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	3304      	adds	r3, #4
 8003ce4:	617b      	str	r3, [r7, #20]

	/* lease time */
	*ptr++ = DHCP_LEASETIME;
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	1c5a      	adds	r2, r3, #1
 8003cea:	617a      	str	r2, [r7, #20]
 8003cec:	2233      	movs	r2, #51	; 0x33
 8003cee:	701a      	strb	r2, [r3, #0]
	*ptr++ = 4;
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	1c5a      	adds	r2, r3, #1
 8003cf4:	617a      	str	r2, [r7, #20]
 8003cf6:	2204      	movs	r2, #4
 8003cf8:	701a      	strb	r2, [r3, #0]
	*ptr++ = (lease_time >> 24) & 0xFF;
 8003cfa:	6a3b      	ldr	r3, [r7, #32]
 8003cfc:	0e19      	lsrs	r1, r3, #24
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	1c5a      	adds	r2, r3, #1
 8003d02:	617a      	str	r2, [r7, #20]
 8003d04:	b2ca      	uxtb	r2, r1
 8003d06:	701a      	strb	r2, [r3, #0]
	*ptr++ = (lease_time >> 16) & 0xFF;
 8003d08:	6a3b      	ldr	r3, [r7, #32]
 8003d0a:	1419      	asrs	r1, r3, #16
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	1c5a      	adds	r2, r3, #1
 8003d10:	617a      	str	r2, [r7, #20]
 8003d12:	b2ca      	uxtb	r2, r1
 8003d14:	701a      	strb	r2, [r3, #0]
	*ptr++ = (lease_time >> 8) & 0xFF;
 8003d16:	6a3b      	ldr	r3, [r7, #32]
 8003d18:	1219      	asrs	r1, r3, #8
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	1c5a      	adds	r2, r3, #1
 8003d1e:	617a      	str	r2, [r7, #20]
 8003d20:	b2ca      	uxtb	r2, r1
 8003d22:	701a      	strb	r2, [r3, #0]
	*ptr++ = (lease_time >> 0) & 0xFF;
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	1c5a      	adds	r2, r3, #1
 8003d28:	617a      	str	r2, [r7, #20]
 8003d2a:	6a3a      	ldr	r2, [r7, #32]
 8003d2c:	b2d2      	uxtb	r2, r2
 8003d2e:	701a      	strb	r2, [r3, #0]

	/* subnet mask */
	*ptr++ = DHCP_SUBNETMASK;
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	1c5a      	adds	r2, r3, #1
 8003d34:	617a      	str	r2, [r7, #20]
 8003d36:	2201      	movs	r2, #1
 8003d38:	701a      	strb	r2, [r3, #0]
	*ptr++ = 4;
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	1c5a      	adds	r2, r3, #1
 8003d3e:	617a      	str	r2, [r7, #20]
 8003d40:	2204      	movs	r2, #4
 8003d42:	701a      	strb	r2, [r3, #0]
	set_ip(ptr, subnet);
 8003d44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	0011      	movs	r1, r2
 8003d4a:	0018      	movs	r0, r3
 8003d4c:	f7ff fea6 	bl	8003a9c <set_ip>
	ptr += 4;
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	3304      	adds	r3, #4
 8003d54:	617b      	str	r3, [r7, #20]

	/* router */
	if (router != 0)
 8003d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d012      	beq.n	8003d82 <fill_options+0xfa>
	{
		*ptr++ = DHCP_ROUTER;
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	1c5a      	adds	r2, r3, #1
 8003d60:	617a      	str	r2, [r7, #20]
 8003d62:	2203      	movs	r2, #3
 8003d64:	701a      	strb	r2, [r3, #0]
		*ptr++ = 4;
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	1c5a      	adds	r2, r3, #1
 8003d6a:	617a      	str	r2, [r7, #20]
 8003d6c:	2204      	movs	r2, #4
 8003d6e:	701a      	strb	r2, [r3, #0]
		set_ip(ptr, router);
 8003d70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	0011      	movs	r1, r2
 8003d76:	0018      	movs	r0, r3
 8003d78:	f7ff fe90 	bl	8003a9c <set_ip>
		ptr += 4;
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	3304      	adds	r3, #4
 8003d80:	617b      	str	r3, [r7, #20]
	}

	/* domain name */
	if (domain != NULL)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d01a      	beq.n	8003dbe <fill_options+0x136>
	{
		int len = strlen(domain);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	0018      	movs	r0, r3
 8003d8c:	f7fc f9c6 	bl	800011c <strlen>
 8003d90:	0003      	movs	r3, r0
 8003d92:	613b      	str	r3, [r7, #16]
		*ptr++ = DHCP_DNSDOMAIN;
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	1c5a      	adds	r2, r3, #1
 8003d98:	617a      	str	r2, [r7, #20]
 8003d9a:	220f      	movs	r2, #15
 8003d9c:	701a      	strb	r2, [r3, #0]
		*ptr++ = len;
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	1c5a      	adds	r2, r3, #1
 8003da2:	617a      	str	r2, [r7, #20]
 8003da4:	693a      	ldr	r2, [r7, #16]
 8003da6:	b2d2      	uxtb	r2, r2
 8003da8:	701a      	strb	r2, [r3, #0]
		memcpy(ptr, domain, len);
 8003daa:	693a      	ldr	r2, [r7, #16]
 8003dac:	6879      	ldr	r1, [r7, #4]
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	0018      	movs	r0, r3
 8003db2:	f00e f950 	bl	8012056 <memcpy>
		ptr += len;
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	697a      	ldr	r2, [r7, #20]
 8003dba:	18d3      	adds	r3, r2, r3
 8003dbc:	617b      	str	r3, [r7, #20]
	}

	/* domain name server (DNS) */
	if (dns != 0)
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d012      	beq.n	8003dea <fill_options+0x162>
	{
		*ptr++ = DHCP_DNSSERVER;
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	1c5a      	adds	r2, r3, #1
 8003dc8:	617a      	str	r2, [r7, #20]
 8003dca:	2206      	movs	r2, #6
 8003dcc:	701a      	strb	r2, [r3, #0]
		*ptr++ = 4;
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	1c5a      	adds	r2, r3, #1
 8003dd2:	617a      	str	r2, [r7, #20]
 8003dd4:	2204      	movs	r2, #4
 8003dd6:	701a      	strb	r2, [r3, #0]
		set_ip(ptr, dns);
 8003dd8:	683a      	ldr	r2, [r7, #0]
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	0011      	movs	r1, r2
 8003dde:	0018      	movs	r0, r3
 8003de0:	f7ff fe5c 	bl	8003a9c <set_ip>
		ptr += 4;
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	3304      	adds	r3, #4
 8003de8:	617b      	str	r3, [r7, #20]
	}

	/* end */
	*ptr++ = DHCP_END;
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	1c5a      	adds	r2, r3, #1
 8003dee:	617a      	str	r2, [r7, #20]
 8003df0:	22ff      	movs	r2, #255	; 0xff
 8003df2:	701a      	strb	r2, [r3, #0]
	return ptr - (uint8_t *)dest;
 8003df4:	697a      	ldr	r2, [r7, #20]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	1ad3      	subs	r3, r2, r3
}
 8003dfa:	0018      	movs	r0, r3
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	b006      	add	sp, #24
 8003e00:	bd80      	pop	{r7, pc}
	...

08003e04 <udp_recv_proc>:

static void udp_recv_proc(void *arg, struct udp_pcb *upcb, struct pbuf *p, struct ip_addr *addr, u16_t port)
{
 8003e04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e06:	46c6      	mov	lr, r8
 8003e08:	b500      	push	{lr}
 8003e0a:	b08e      	sub	sp, #56	; 0x38
 8003e0c:	af04      	add	r7, sp, #16
 8003e0e:	6178      	str	r0, [r7, #20]
 8003e10:	6139      	str	r1, [r7, #16]
 8003e12:	60fa      	str	r2, [r7, #12]
 8003e14:	60bb      	str	r3, [r7, #8]
	uint8_t *ptr;
	dhcp_entry_t *entry;
	struct pbuf *pp;

	int n = p->len;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	895b      	ldrh	r3, [r3, #10]
 8003e1a:	623b      	str	r3, [r7, #32]
	if (n > sizeof(dhcp_data)) n = sizeof(dhcp_data);
 8003e1c:	6a3a      	ldr	r2, [r7, #32]
 8003e1e:	2381      	movs	r3, #129	; 0x81
 8003e20:	009b      	lsls	r3, r3, #2
 8003e22:	429a      	cmp	r2, r3
 8003e24:	d902      	bls.n	8003e2c <udp_recv_proc+0x28>
 8003e26:	2381      	movs	r3, #129	; 0x81
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	623b      	str	r3, [r7, #32]
	memcpy(&dhcp_data, p->payload, n);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	6859      	ldr	r1, [r3, #4]
 8003e30:	6a3a      	ldr	r2, [r7, #32]
 8003e32:	4baa      	ldr	r3, [pc, #680]	; (80040dc <udp_recv_proc+0x2d8>)
 8003e34:	0018      	movs	r0, r3
 8003e36:	f00e f90e 	bl	8012056 <memcpy>
	switch (dhcp_data.dp_options[2])
 8003e3a:	4ba8      	ldr	r3, [pc, #672]	; (80040dc <udp_recv_proc+0x2d8>)
 8003e3c:	22f2      	movs	r2, #242	; 0xf2
 8003e3e:	5c9b      	ldrb	r3, [r3, r2]
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d003      	beq.n	8003e4c <udp_recv_proc+0x48>
 8003e44:	2b03      	cmp	r3, #3
 8003e46:	d100      	bne.n	8003e4a <udp_recv_proc+0x46>
 8003e48:	e081      	b.n	8003f4e <udp_recv_proc+0x14a>
			udp_sendto(upcb, pp, IP_ADDR_BROADCAST, port);
			pbuf_free(pp);
			break;

		default:
				break;
 8003e4a:	e13d      	b.n	80040c8 <udp_recv_proc+0x2c4>
			entry = entry_by_mac(dhcp_data.dp_chaddr);
 8003e4c:	4ba4      	ldr	r3, [pc, #656]	; (80040e0 <udp_recv_proc+0x2dc>)
 8003e4e:	0018      	movs	r0, r3
 8003e50:	f7ff fe66 	bl	8003b20 <entry_by_mac>
 8003e54:	0003      	movs	r3, r0
 8003e56:	627b      	str	r3, [r7, #36]	; 0x24
			if (entry == NULL) entry = vacant_address();
 8003e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d103      	bne.n	8003e66 <udp_recv_proc+0x62>
 8003e5e:	f7ff fea5 	bl	8003bac <vacant_address>
 8003e62:	0003      	movs	r3, r0
 8003e64:	627b      	str	r3, [r7, #36]	; 0x24
			if (entry == NULL) break;
 8003e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d100      	bne.n	8003e6e <udp_recv_proc+0x6a>
 8003e6c:	e11f      	b.n	80040ae <udp_recv_proc+0x2aa>
			dhcp_data.dp_op = 2; /* reply */
 8003e6e:	4b9b      	ldr	r3, [pc, #620]	; (80040dc <udp_recv_proc+0x2d8>)
 8003e70:	2202      	movs	r2, #2
 8003e72:	701a      	strb	r2, [r3, #0]
			dhcp_data.dp_secs = 0;
 8003e74:	4b99      	ldr	r3, [pc, #612]	; (80040dc <udp_recv_proc+0x2d8>)
 8003e76:	2200      	movs	r2, #0
 8003e78:	811a      	strh	r2, [r3, #8]
			dhcp_data.dp_flags = 0;
 8003e7a:	4b98      	ldr	r3, [pc, #608]	; (80040dc <udp_recv_proc+0x2d8>)
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	815a      	strh	r2, [r3, #10]
			set_ip(dhcp_data.dp_yiaddr, get_ip(entry->addr));
 8003e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e82:	3306      	adds	r3, #6
 8003e84:	0018      	movs	r0, r3
 8003e86:	f7ff fdf9 	bl	8003a7c <get_ip>
 8003e8a:	0002      	movs	r2, r0
 8003e8c:	4b95      	ldr	r3, [pc, #596]	; (80040e4 <udp_recv_proc+0x2e0>)
 8003e8e:	0011      	movs	r1, r2
 8003e90:	0018      	movs	r0, r3
 8003e92:	f7ff fe03 	bl	8003a9c <set_ip>
			memcpy(dhcp_data.dp_magic, magic_cookie, 4);
 8003e96:	4b94      	ldr	r3, [pc, #592]	; (80040e8 <udp_recv_proc+0x2e4>)
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	4b90      	ldr	r3, [pc, #576]	; (80040dc <udp_recv_proc+0x2d8>)
 8003e9c:	21ec      	movs	r1, #236	; 0xec
 8003e9e:	505a      	str	r2, [r3, r1]
			memset(dhcp_data.dp_options, 0, sizeof(dhcp_data.dp_options));
 8003ea0:	2314      	movs	r3, #20
 8003ea2:	33ff      	adds	r3, #255	; 0xff
 8003ea4:	001a      	movs	r2, r3
 8003ea6:	4b91      	ldr	r3, [pc, #580]	; (80040ec <udp_recv_proc+0x2e8>)
 8003ea8:	2100      	movs	r1, #0
 8003eaa:	0018      	movs	r0, r3
 8003eac:	f00e f8dc 	bl	8012068 <memset>
				config->domain,
 8003eb0:	4b8f      	ldr	r3, [pc, #572]	; (80040f0 <udp_recv_proc+0x2ec>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
			fill_options(dhcp_data.dp_options,
 8003eb4:	68dc      	ldr	r4, [r3, #12]
				get_ip(config->dns),
 8003eb6:	4b8e      	ldr	r3, [pc, #568]	; (80040f0 <udp_recv_proc+0x2ec>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	3306      	adds	r3, #6
			fill_options(dhcp_data.dp_options,
 8003ebc:	0018      	movs	r0, r3
 8003ebe:	f7ff fddd 	bl	8003a7c <get_ip>
 8003ec2:	6078      	str	r0, [r7, #4]
				entry->lease, 
 8003ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec6:	691b      	ldr	r3, [r3, #16]
			fill_options(dhcp_data.dp_options,
 8003ec8:	001d      	movs	r5, r3
				get_ip(config->addr),
 8003eca:	4b89      	ldr	r3, [pc, #548]	; (80040f0 <udp_recv_proc+0x2ec>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
			fill_options(dhcp_data.dp_options,
 8003ece:	0018      	movs	r0, r3
 8003ed0:	f7ff fdd4 	bl	8003a7c <get_ip>
 8003ed4:	0006      	movs	r6, r0
				get_ip(config->addr), 
 8003ed6:	4b86      	ldr	r3, [pc, #536]	; (80040f0 <udp_recv_proc+0x2ec>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
			fill_options(dhcp_data.dp_options,
 8003eda:	0018      	movs	r0, r3
 8003edc:	f7ff fdce 	bl	8003a7c <get_ip>
 8003ee0:	4680      	mov	r8, r0
				get_ip(entry->subnet));
 8003ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee4:	330a      	adds	r3, #10
			fill_options(dhcp_data.dp_options,
 8003ee6:	0018      	movs	r0, r3
 8003ee8:	f7ff fdc8 	bl	8003a7c <get_ip>
 8003eec:	0003      	movs	r3, r0
 8003eee:	487f      	ldr	r0, [pc, #508]	; (80040ec <udp_recv_proc+0x2e8>)
 8003ef0:	9303      	str	r3, [sp, #12]
 8003ef2:	4642      	mov	r2, r8
 8003ef4:	9202      	str	r2, [sp, #8]
 8003ef6:	9601      	str	r6, [sp, #4]
 8003ef8:	9500      	str	r5, [sp, #0]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	0022      	movs	r2, r4
 8003efe:	2102      	movs	r1, #2
 8003f00:	f7ff fec2 	bl	8003c88 <fill_options>
			pp = pbuf_alloc(PBUF_TRANSPORT, sizeof(dhcp_data), PBUF_POOL);
 8003f04:	2381      	movs	r3, #129	; 0x81
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	2203      	movs	r2, #3
 8003f0a:	0019      	movs	r1, r3
 8003f0c:	2000      	movs	r0, #0
 8003f0e:	f002 fcb5 	bl	800687c <pbuf_alloc>
 8003f12:	0003      	movs	r3, r0
 8003f14:	61bb      	str	r3, [r7, #24]
			if (pp == NULL) break;
 8003f16:	69bb      	ldr	r3, [r7, #24]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d100      	bne.n	8003f1e <udp_recv_proc+0x11a>
 8003f1c:	e0c9      	b.n	80040b2 <udp_recv_proc+0x2ae>
			memcpy(pp->payload, &dhcp_data, sizeof(dhcp_data));
 8003f1e:	69bb      	ldr	r3, [r7, #24]
 8003f20:	6858      	ldr	r0, [r3, #4]
 8003f22:	2381      	movs	r3, #129	; 0x81
 8003f24:	009a      	lsls	r2, r3, #2
 8003f26:	4b6d      	ldr	r3, [pc, #436]	; (80040dc <udp_recv_proc+0x2d8>)
 8003f28:	0019      	movs	r1, r3
 8003f2a:	f00e f894 	bl	8012056 <memcpy>
			udp_sendto(upcb, pp, IP_ADDR_BROADCAST, port);
 8003f2e:	2338      	movs	r3, #56	; 0x38
 8003f30:	2208      	movs	r2, #8
 8003f32:	4694      	mov	ip, r2
 8003f34:	44bc      	add	ip, r7
 8003f36:	4463      	add	r3, ip
 8003f38:	881b      	ldrh	r3, [r3, #0]
 8003f3a:	4a6e      	ldr	r2, [pc, #440]	; (80040f4 <udp_recv_proc+0x2f0>)
 8003f3c:	69b9      	ldr	r1, [r7, #24]
 8003f3e:	6938      	ldr	r0, [r7, #16]
 8003f40:	f008 ff50 	bl	800cde4 <udp_sendto>
			pbuf_free(pp);
 8003f44:	69bb      	ldr	r3, [r7, #24]
 8003f46:	0018      	movs	r0, r3
 8003f48:	f002 ff24 	bl	8006d94 <pbuf_free>
			break;
 8003f4c:	e0bc      	b.n	80040c8 <udp_recv_proc+0x2c4>
			ptr = find_dhcp_option(dhcp_data.dp_options, sizeof(dhcp_data.dp_options), DHCP_IPADDRESS);
 8003f4e:	2314      	movs	r3, #20
 8003f50:	33ff      	adds	r3, #255	; 0xff
 8003f52:	0019      	movs	r1, r3
 8003f54:	4b65      	ldr	r3, [pc, #404]	; (80040ec <udp_recv_proc+0x2e8>)
 8003f56:	2232      	movs	r2, #50	; 0x32
 8003f58:	0018      	movs	r0, r3
 8003f5a:	f7ff fe63 	bl	8003c24 <find_dhcp_option>
 8003f5e:	0003      	movs	r3, r0
 8003f60:	61fb      	str	r3, [r7, #28]
			if (ptr == NULL) break;
 8003f62:	69fb      	ldr	r3, [r7, #28]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d100      	bne.n	8003f6a <udp_recv_proc+0x166>
 8003f68:	e0a5      	b.n	80040b6 <udp_recv_proc+0x2b2>
			if (ptr[1] != 4) break;
 8003f6a:	69fb      	ldr	r3, [r7, #28]
 8003f6c:	3301      	adds	r3, #1
 8003f6e:	781b      	ldrb	r3, [r3, #0]
 8003f70:	2b04      	cmp	r3, #4
 8003f72:	d000      	beq.n	8003f76 <udp_recv_proc+0x172>
 8003f74:	e0a1      	b.n	80040ba <udp_recv_proc+0x2b6>
			ptr += 2;
 8003f76:	69fb      	ldr	r3, [r7, #28]
 8003f78:	3302      	adds	r3, #2
 8003f7a:	61fb      	str	r3, [r7, #28]
			entry = entry_by_mac(dhcp_data.dp_chaddr);
 8003f7c:	4b58      	ldr	r3, [pc, #352]	; (80040e0 <udp_recv_proc+0x2dc>)
 8003f7e:	0018      	movs	r0, r3
 8003f80:	f7ff fdce 	bl	8003b20 <entry_by_mac>
 8003f84:	0003      	movs	r3, r0
 8003f86:	627b      	str	r3, [r7, #36]	; 0x24
			if (entry != NULL) free_entry(entry);
 8003f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d003      	beq.n	8003f96 <udp_recv_proc+0x192>
 8003f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f90:	0018      	movs	r0, r3
 8003f92:	f7ff fe39 	bl	8003c08 <free_entry>
			entry = entry_by_ip(get_ip(ptr));
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	0018      	movs	r0, r3
 8003f9a:	f7ff fd6f 	bl	8003a7c <get_ip>
 8003f9e:	0003      	movs	r3, r0
 8003fa0:	0018      	movs	r0, r3
 8003fa2:	f7ff fd8b 	bl	8003abc <entry_by_ip>
 8003fa6:	0003      	movs	r3, r0
 8003fa8:	627b      	str	r3, [r7, #36]	; 0x24
			if (entry == NULL) break;
 8003faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d100      	bne.n	8003fb2 <udp_recv_proc+0x1ae>
 8003fb0:	e085      	b.n	80040be <udp_recv_proc+0x2ba>
			if (!is_vacant(entry)) break;
 8003fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb4:	0018      	movs	r0, r3
 8003fb6:	f7ff fde5 	bl	8003b84 <is_vacant>
 8003fba:	0003      	movs	r3, r0
 8003fbc:	001a      	movs	r2, r3
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	4053      	eors	r3, r2
 8003fc2:	b2db      	uxtb	r3, r3
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d000      	beq.n	8003fca <udp_recv_proc+0x1c6>
 8003fc8:	e07b      	b.n	80040c2 <udp_recv_proc+0x2be>
			memcpy(dhcp_data.dp_yiaddr, ptr, 4);
 8003fca:	4b44      	ldr	r3, [pc, #272]	; (80040dc <udp_recv_proc+0x2d8>)
 8003fcc:	69fa      	ldr	r2, [r7, #28]
 8003fce:	3310      	adds	r3, #16
 8003fd0:	0011      	movs	r1, r2
 8003fd2:	2204      	movs	r2, #4
 8003fd4:	0018      	movs	r0, r3
 8003fd6:	f00e f83e 	bl	8012056 <memcpy>
			dhcp_data.dp_op = 2; /* reply */
 8003fda:	4b40      	ldr	r3, [pc, #256]	; (80040dc <udp_recv_proc+0x2d8>)
 8003fdc:	2202      	movs	r2, #2
 8003fde:	701a      	strb	r2, [r3, #0]
			dhcp_data.dp_secs = 0;
 8003fe0:	4b3e      	ldr	r3, [pc, #248]	; (80040dc <udp_recv_proc+0x2d8>)
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	811a      	strh	r2, [r3, #8]
			dhcp_data.dp_flags = 0;
 8003fe6:	4b3d      	ldr	r3, [pc, #244]	; (80040dc <udp_recv_proc+0x2d8>)
 8003fe8:	2200      	movs	r2, #0
 8003fea:	815a      	strh	r2, [r3, #10]
			memcpy(dhcp_data.dp_magic, magic_cookie, 4);
 8003fec:	4b3e      	ldr	r3, [pc, #248]	; (80040e8 <udp_recv_proc+0x2e4>)
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	4b3a      	ldr	r3, [pc, #232]	; (80040dc <udp_recv_proc+0x2d8>)
 8003ff2:	21ec      	movs	r1, #236	; 0xec
 8003ff4:	505a      	str	r2, [r3, r1]
			memset(dhcp_data.dp_options, 0, sizeof(dhcp_data.dp_options));
 8003ff6:	2314      	movs	r3, #20
 8003ff8:	33ff      	adds	r3, #255	; 0xff
 8003ffa:	001a      	movs	r2, r3
 8003ffc:	4b3b      	ldr	r3, [pc, #236]	; (80040ec <udp_recv_proc+0x2e8>)
 8003ffe:	2100      	movs	r1, #0
 8004000:	0018      	movs	r0, r3
 8004002:	f00e f831 	bl	8012068 <memset>
				config->domain,
 8004006:	4b3a      	ldr	r3, [pc, #232]	; (80040f0 <udp_recv_proc+0x2ec>)
 8004008:	681b      	ldr	r3, [r3, #0]
			fill_options(dhcp_data.dp_options,
 800400a:	68dc      	ldr	r4, [r3, #12]
				get_ip(config->dns),
 800400c:	4b38      	ldr	r3, [pc, #224]	; (80040f0 <udp_recv_proc+0x2ec>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	3306      	adds	r3, #6
			fill_options(dhcp_data.dp_options,
 8004012:	0018      	movs	r0, r3
 8004014:	f7ff fd32 	bl	8003a7c <get_ip>
 8004018:	6078      	str	r0, [r7, #4]
				entry->lease, 
 800401a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401c:	691b      	ldr	r3, [r3, #16]
			fill_options(dhcp_data.dp_options,
 800401e:	001d      	movs	r5, r3
				get_ip(config->addr),
 8004020:	4b33      	ldr	r3, [pc, #204]	; (80040f0 <udp_recv_proc+0x2ec>)
 8004022:	681b      	ldr	r3, [r3, #0]
			fill_options(dhcp_data.dp_options,
 8004024:	0018      	movs	r0, r3
 8004026:	f7ff fd29 	bl	8003a7c <get_ip>
 800402a:	0006      	movs	r6, r0
				get_ip(config->addr), 
 800402c:	4b30      	ldr	r3, [pc, #192]	; (80040f0 <udp_recv_proc+0x2ec>)
 800402e:	681b      	ldr	r3, [r3, #0]
			fill_options(dhcp_data.dp_options,
 8004030:	0018      	movs	r0, r3
 8004032:	f7ff fd23 	bl	8003a7c <get_ip>
 8004036:	4680      	mov	r8, r0
				get_ip(entry->subnet));
 8004038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403a:	330a      	adds	r3, #10
			fill_options(dhcp_data.dp_options,
 800403c:	0018      	movs	r0, r3
 800403e:	f7ff fd1d 	bl	8003a7c <get_ip>
 8004042:	0003      	movs	r3, r0
 8004044:	4829      	ldr	r0, [pc, #164]	; (80040ec <udp_recv_proc+0x2e8>)
 8004046:	9303      	str	r3, [sp, #12]
 8004048:	4642      	mov	r2, r8
 800404a:	9202      	str	r2, [sp, #8]
 800404c:	9601      	str	r6, [sp, #4]
 800404e:	9500      	str	r5, [sp, #0]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	0022      	movs	r2, r4
 8004054:	2105      	movs	r1, #5
 8004056:	f7ff fe17 	bl	8003c88 <fill_options>
			pp = pbuf_alloc(PBUF_TRANSPORT, sizeof(dhcp_data), PBUF_POOL);
 800405a:	2381      	movs	r3, #129	; 0x81
 800405c:	009b      	lsls	r3, r3, #2
 800405e:	2203      	movs	r2, #3
 8004060:	0019      	movs	r1, r3
 8004062:	2000      	movs	r0, #0
 8004064:	f002 fc0a 	bl	800687c <pbuf_alloc>
 8004068:	0003      	movs	r3, r0
 800406a:	61bb      	str	r3, [r7, #24]
			if (pp == NULL) break;
 800406c:	69bb      	ldr	r3, [r7, #24]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d029      	beq.n	80040c6 <udp_recv_proc+0x2c2>
			memcpy(entry->mac, dhcp_data.dp_chaddr, 6);
 8004072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004074:	491a      	ldr	r1, [pc, #104]	; (80040e0 <udp_recv_proc+0x2dc>)
 8004076:	2206      	movs	r2, #6
 8004078:	0018      	movs	r0, r3
 800407a:	f00d ffec 	bl	8012056 <memcpy>
			memcpy(pp->payload, &dhcp_data, sizeof(dhcp_data));
 800407e:	69bb      	ldr	r3, [r7, #24]
 8004080:	6858      	ldr	r0, [r3, #4]
 8004082:	2381      	movs	r3, #129	; 0x81
 8004084:	009a      	lsls	r2, r3, #2
 8004086:	4b15      	ldr	r3, [pc, #84]	; (80040dc <udp_recv_proc+0x2d8>)
 8004088:	0019      	movs	r1, r3
 800408a:	f00d ffe4 	bl	8012056 <memcpy>
			udp_sendto(upcb, pp, IP_ADDR_BROADCAST, port);
 800408e:	2338      	movs	r3, #56	; 0x38
 8004090:	2208      	movs	r2, #8
 8004092:	4694      	mov	ip, r2
 8004094:	44bc      	add	ip, r7
 8004096:	4463      	add	r3, ip
 8004098:	881b      	ldrh	r3, [r3, #0]
 800409a:	4a16      	ldr	r2, [pc, #88]	; (80040f4 <udp_recv_proc+0x2f0>)
 800409c:	69b9      	ldr	r1, [r7, #24]
 800409e:	6938      	ldr	r0, [r7, #16]
 80040a0:	f008 fea0 	bl	800cde4 <udp_sendto>
			pbuf_free(pp);
 80040a4:	69bb      	ldr	r3, [r7, #24]
 80040a6:	0018      	movs	r0, r3
 80040a8:	f002 fe74 	bl	8006d94 <pbuf_free>
			break;
 80040ac:	e00c      	b.n	80040c8 <udp_recv_proc+0x2c4>
			if (entry == NULL) break;
 80040ae:	46c0      	nop			; (mov r8, r8)
 80040b0:	e00a      	b.n	80040c8 <udp_recv_proc+0x2c4>
			if (pp == NULL) break;
 80040b2:	46c0      	nop			; (mov r8, r8)
 80040b4:	e008      	b.n	80040c8 <udp_recv_proc+0x2c4>
			if (ptr == NULL) break;
 80040b6:	46c0      	nop			; (mov r8, r8)
 80040b8:	e006      	b.n	80040c8 <udp_recv_proc+0x2c4>
			if (ptr[1] != 4) break;
 80040ba:	46c0      	nop			; (mov r8, r8)
 80040bc:	e004      	b.n	80040c8 <udp_recv_proc+0x2c4>
			if (entry == NULL) break;
 80040be:	46c0      	nop			; (mov r8, r8)
 80040c0:	e002      	b.n	80040c8 <udp_recv_proc+0x2c4>
			if (!is_vacant(entry)) break;
 80040c2:	46c0      	nop			; (mov r8, r8)
 80040c4:	e000      	b.n	80040c8 <udp_recv_proc+0x2c4>
			if (pp == NULL) break;
 80040c6:	46c0      	nop			; (mov r8, r8)
	}
	pbuf_free(p);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	0018      	movs	r0, r3
 80040cc:	f002 fe62 	bl	8006d94 <pbuf_free>
}
 80040d0:	46c0      	nop			; (mov r8, r8)
 80040d2:	46bd      	mov	sp, r7
 80040d4:	b00a      	add	sp, #40	; 0x28
 80040d6:	bc04      	pop	{r2}
 80040d8:	4690      	mov	r8, r2
 80040da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040dc:	20002ba0 	.word	0x20002ba0
 80040e0:	20002bbc 	.word	0x20002bbc
 80040e4:	20002bb0 	.word	0x20002bb0
 80040e8:	2000000c 	.word	0x2000000c
 80040ec:	20002c90 	.word	0x20002c90
 80040f0:	20000138 	.word	0x20000138
 80040f4:	0801ca4c 	.word	0x0801ca4c

080040f8 <dhserv_init>:

err_t dhserv_init(dhcp_config_t *c)
{
 80040f8:	b5b0      	push	{r4, r5, r7, lr}
 80040fa:	b084      	sub	sp, #16
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
	err_t err;
	udp_init();
 8004100:	f008 fc8e 	bl	800ca20 <udp_init>
	dhserv_free();
 8004104:	f000 f83c 	bl	8004180 <dhserv_free>
	pcb = udp_new();
 8004108:	f009 f868 	bl	800d1dc <udp_new>
 800410c:	0002      	movs	r2, r0
 800410e:	4b18      	ldr	r3, [pc, #96]	; (8004170 <dhserv_init+0x78>)
 8004110:	601a      	str	r2, [r3, #0]
	if (pcb == NULL)
 8004112:	4b17      	ldr	r3, [pc, #92]	; (8004170 <dhserv_init+0x78>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d102      	bne.n	8004120 <dhserv_init+0x28>
		return ERR_MEM;
 800411a:	2301      	movs	r3, #1
 800411c:	425b      	negs	r3, r3
 800411e:	e022      	b.n	8004166 <dhserv_init+0x6e>
	err = udp_bind(pcb, IP_ADDR_ANY, c->port);
 8004120:	4b13      	ldr	r3, [pc, #76]	; (8004170 <dhserv_init+0x78>)
 8004122:	6818      	ldr	r0, [r3, #0]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	889a      	ldrh	r2, [r3, #4]
 8004128:	250f      	movs	r5, #15
 800412a:	197c      	adds	r4, r7, r5
 800412c:	4b11      	ldr	r3, [pc, #68]	; (8004174 <dhserv_init+0x7c>)
 800412e:	0019      	movs	r1, r3
 8004130:	f008 ffa6 	bl	800d080 <udp_bind>
 8004134:	0003      	movs	r3, r0
 8004136:	7023      	strb	r3, [r4, #0]
	if (err != ERR_OK)
 8004138:	197b      	adds	r3, r7, r5
 800413a:	781b      	ldrb	r3, [r3, #0]
 800413c:	b25b      	sxtb	r3, r3
 800413e:	2b00      	cmp	r3, #0
 8004140:	d006      	beq.n	8004150 <dhserv_init+0x58>
	{
		dhserv_free();
 8004142:	f000 f81d 	bl	8004180 <dhserv_free>
		return err;
 8004146:	230f      	movs	r3, #15
 8004148:	18fb      	adds	r3, r7, r3
 800414a:	781b      	ldrb	r3, [r3, #0]
 800414c:	b25b      	sxtb	r3, r3
 800414e:	e00a      	b.n	8004166 <dhserv_init+0x6e>
	}
	udp_recv(pcb, udp_recv_proc, NULL);
 8004150:	4b07      	ldr	r3, [pc, #28]	; (8004170 <dhserv_init+0x78>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4908      	ldr	r1, [pc, #32]	; (8004178 <dhserv_init+0x80>)
 8004156:	2200      	movs	r2, #0
 8004158:	0018      	movs	r0, r3
 800415a:	f008 fffd 	bl	800d158 <udp_recv>
	config = c;
 800415e:	4b07      	ldr	r3, [pc, #28]	; (800417c <dhserv_init+0x84>)
 8004160:	687a      	ldr	r2, [r7, #4]
 8004162:	601a      	str	r2, [r3, #0]
	return ERR_OK;
 8004164:	2300      	movs	r3, #0
}
 8004166:	0018      	movs	r0, r3
 8004168:	46bd      	mov	sp, r7
 800416a:	b004      	add	sp, #16
 800416c:	bdb0      	pop	{r4, r5, r7, pc}
 800416e:	46c0      	nop			; (mov r8, r8)
 8004170:	20000134 	.word	0x20000134
 8004174:	0801ca48 	.word	0x0801ca48
 8004178:	08003e05 	.word	0x08003e05
 800417c:	20000138 	.word	0x20000138

08004180 <dhserv_free>:

void dhserv_free(void)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	af00      	add	r7, sp, #0
	if (pcb == NULL) return;
 8004184:	4b07      	ldr	r3, [pc, #28]	; (80041a4 <dhserv_free+0x24>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d008      	beq.n	800419e <dhserv_free+0x1e>
	udp_remove(pcb);
 800418c:	4b05      	ldr	r3, [pc, #20]	; (80041a4 <dhserv_free+0x24>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	0018      	movs	r0, r3
 8004192:	f008 fff1 	bl	800d178 <udp_remove>
	pcb = NULL;
 8004196:	4b03      	ldr	r3, [pc, #12]	; (80041a4 <dhserv_free+0x24>)
 8004198:	2200      	movs	r2, #0
 800419a:	601a      	str	r2, [r3, #0]
 800419c:	e000      	b.n	80041a0 <dhserv_free+0x20>
	if (pcb == NULL) return;
 800419e:	46c0      	nop			; (mov r8, r8)
}
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}
 80041a4:	20000134 	.word	0x20000134

080041a8 <get_uint16>:
	uint16_t type;
	uint16_t Class;
} dns_query_t;

static uint16_t get_uint16(const uint8_t *pnt)
{
 80041a8:	b590      	push	{r4, r7, lr}
 80041aa:	b085      	sub	sp, #20
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  uint16_t result;
  memcpy(&result, pnt, sizeof(result));
 80041b0:	6879      	ldr	r1, [r7, #4]
 80041b2:	240e      	movs	r4, #14
 80041b4:	193b      	adds	r3, r7, r4
 80041b6:	2202      	movs	r2, #2
 80041b8:	0018      	movs	r0, r3
 80041ba:	f00d ff4c 	bl	8012056 <memcpy>
  return result;
 80041be:	193b      	adds	r3, r7, r4
 80041c0:	881b      	ldrh	r3, [r3, #0]
}
 80041c2:	0018      	movs	r0, r3
 80041c4:	46bd      	mov	sp, r7
 80041c6:	b005      	add	sp, #20
 80041c8:	bd90      	pop	{r4, r7, pc}

080041ca <parse_next_query>:

static int parse_next_query(void *data, int size, dns_query_t *query)
{
 80041ca:	b590      	push	{r4, r7, lr}
 80041cc:	b089      	sub	sp, #36	; 0x24
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	60f8      	str	r0, [r7, #12]
 80041d2:	60b9      	str	r1, [r7, #8]
 80041d4:	607a      	str	r2, [r7, #4]
	int len;
	int lables;
	uint8_t *ptr;

	len = 0;
 80041d6:	2300      	movs	r3, #0
 80041d8:	61fb      	str	r3, [r7, #28]
	lables = 0;
 80041da:	2300      	movs	r3, #0
 80041dc:	61bb      	str	r3, [r7, #24]
	ptr = (uint8_t *)data;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	617b      	str	r3, [r7, #20]

	while (true)
	{
		uint8_t lable_len;
		if (size <= 0) return -1;
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	dc02      	bgt.n	80041ee <parse_next_query+0x24>
 80041e8:	2301      	movs	r3, #1
 80041ea:	425b      	negs	r3, r3
 80041ec:	e075      	b.n	80042da <parse_next_query+0x110>
		lable_len = *ptr++;
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	1c5a      	adds	r2, r3, #1
 80041f2:	617a      	str	r2, [r7, #20]
 80041f4:	2113      	movs	r1, #19
 80041f6:	187a      	adds	r2, r7, r1
 80041f8:	781b      	ldrb	r3, [r3, #0]
 80041fa:	7013      	strb	r3, [r2, #0]
		size--;
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	3b01      	subs	r3, #1
 8004200:	60bb      	str	r3, [r7, #8]
		if (lable_len == 0) break;
 8004202:	187b      	adds	r3, r7, r1
 8004204:	781b      	ldrb	r3, [r3, #0]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d040      	beq.n	800428c <parse_next_query+0xc2>
		if (lables > 0)
 800420a:	69bb      	ldr	r3, [r7, #24]
 800420c:	2b00      	cmp	r3, #0
 800420e:	dd0b      	ble.n	8004228 <parse_next_query+0x5e>
		{
			if (len == DNS_MAX_HOST_NAME_LEN) return -2;
 8004210:	69fb      	ldr	r3, [r7, #28]
 8004212:	2b80      	cmp	r3, #128	; 0x80
 8004214:	d102      	bne.n	800421c <parse_next_query+0x52>
 8004216:	2302      	movs	r3, #2
 8004218:	425b      	negs	r3, r3
 800421a:	e05e      	b.n	80042da <parse_next_query+0x110>
			query->name[len++] = '.';
 800421c:	69fb      	ldr	r3, [r7, #28]
 800421e:	1c5a      	adds	r2, r3, #1
 8004220:	61fa      	str	r2, [r7, #28]
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	212e      	movs	r1, #46	; 0x2e
 8004226:	54d1      	strb	r1, [r2, r3]
		}
		if (lable_len > size) return -1;
 8004228:	2313      	movs	r3, #19
 800422a:	18fb      	adds	r3, r7, r3
 800422c:	781b      	ldrb	r3, [r3, #0]
 800422e:	68ba      	ldr	r2, [r7, #8]
 8004230:	429a      	cmp	r2, r3
 8004232:	da02      	bge.n	800423a <parse_next_query+0x70>
 8004234:	2301      	movs	r3, #1
 8004236:	425b      	negs	r3, r3
 8004238:	e04f      	b.n	80042da <parse_next_query+0x110>
		if (len + lable_len >= DNS_MAX_HOST_NAME_LEN) return -2;
 800423a:	2313      	movs	r3, #19
 800423c:	18fb      	adds	r3, r7, r3
 800423e:	781a      	ldrb	r2, [r3, #0]
 8004240:	69fb      	ldr	r3, [r7, #28]
 8004242:	18d3      	adds	r3, r2, r3
 8004244:	2b7f      	cmp	r3, #127	; 0x7f
 8004246:	dd02      	ble.n	800424e <parse_next_query+0x84>
 8004248:	2302      	movs	r3, #2
 800424a:	425b      	negs	r3, r3
 800424c:	e045      	b.n	80042da <parse_next_query+0x110>
		memcpy(&query->name[len], ptr, lable_len);
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	18d0      	adds	r0, r2, r3
 8004254:	2113      	movs	r1, #19
 8004256:	000c      	movs	r4, r1
 8004258:	187b      	adds	r3, r7, r1
 800425a:	781a      	ldrb	r2, [r3, #0]
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	0019      	movs	r1, r3
 8004260:	f00d fef9 	bl	8012056 <memcpy>
		len += lable_len;
 8004264:	0021      	movs	r1, r4
 8004266:	187b      	adds	r3, r7, r1
 8004268:	781b      	ldrb	r3, [r3, #0]
 800426a:	69fa      	ldr	r2, [r7, #28]
 800426c:	18d3      	adds	r3, r2, r3
 800426e:	61fb      	str	r3, [r7, #28]
		ptr += lable_len;
 8004270:	187b      	adds	r3, r7, r1
 8004272:	781b      	ldrb	r3, [r3, #0]
 8004274:	697a      	ldr	r2, [r7, #20]
 8004276:	18d3      	adds	r3, r2, r3
 8004278:	617b      	str	r3, [r7, #20]
		size -= lable_len;
 800427a:	187b      	adds	r3, r7, r1
 800427c:	781b      	ldrb	r3, [r3, #0]
 800427e:	68ba      	ldr	r2, [r7, #8]
 8004280:	1ad3      	subs	r3, r2, r3
 8004282:	60bb      	str	r3, [r7, #8]
		lables++;
 8004284:	69bb      	ldr	r3, [r7, #24]
 8004286:	3301      	adds	r3, #1
 8004288:	61bb      	str	r3, [r7, #24]
	{
 800428a:	e7aa      	b.n	80041e2 <parse_next_query+0x18>
		if (lable_len == 0) break;
 800428c:	46c0      	nop			; (mov r8, r8)
	}

	if (size < 4) return -1;
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	2b03      	cmp	r3, #3
 8004292:	dc02      	bgt.n	800429a <parse_next_query+0xd0>
 8004294:	2301      	movs	r3, #1
 8004296:	425b      	negs	r3, r3
 8004298:	e01f      	b.n	80042da <parse_next_query+0x110>
	query->name[len] = 0;
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	18d3      	adds	r3, r2, r3
 80042a0:	2200      	movs	r2, #0
 80042a2:	701a      	strb	r2, [r3, #0]
	query->type = get_uint16(ptr);
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	0018      	movs	r0, r3
 80042a8:	f7ff ff7e 	bl	80041a8 <get_uint16>
 80042ac:	0003      	movs	r3, r0
 80042ae:	0019      	movs	r1, r3
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2280      	movs	r2, #128	; 0x80
 80042b4:	5299      	strh	r1, [r3, r2]
	ptr += 2;
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	3302      	adds	r3, #2
 80042ba:	617b      	str	r3, [r7, #20]
	query->Class = get_uint16(ptr);
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	0018      	movs	r0, r3
 80042c0:	f7ff ff72 	bl	80041a8 <get_uint16>
 80042c4:	0003      	movs	r3, r0
 80042c6:	0019      	movs	r1, r3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2282      	movs	r2, #130	; 0x82
 80042cc:	5299      	strh	r1, [r3, r2]
	ptr += 2;
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	3302      	adds	r3, #2
 80042d2:	617b      	str	r3, [r7, #20]
	return ptr - (uint8_t *)data;
 80042d4:	697a      	ldr	r2, [r7, #20]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	1ad3      	subs	r3, r2, r3
}
 80042da:	0018      	movs	r0, r3
 80042dc:	46bd      	mov	sp, r7
 80042de:	b009      	add	sp, #36	; 0x24
 80042e0:	bd90      	pop	{r4, r7, pc}
	...

080042e4 <udp_recv_proc>:

static void udp_recv_proc(void *arg, struct udp_pcb *upcb, struct pbuf *p, struct ip_addr *addr, u16_t port)
{
 80042e4:	b590      	push	{r4, r7, lr}
 80042e6:	b08b      	sub	sp, #44	; 0x2c
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	60f8      	str	r0, [r7, #12]
 80042ec:	60b9      	str	r1, [r7, #8]
 80042ee:	607a      	str	r2, [r7, #4]
 80042f0:	603b      	str	r3, [r7, #0]
	static dns_query_t query;
	struct pbuf *out;
	ip_addr_t host_addr;
	dns_answer_t *answer;

	if (p->len <= sizeof(dns_header_t)) goto error;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	895b      	ldrh	r3, [r3, #10]
 80042f6:	2b0c      	cmp	r3, #12
 80042f8:	d800      	bhi.n	80042fc <udp_recv_proc+0x18>
 80042fa:	e142      	b.n	8004582 <udp_recv_proc+0x29e>
	header = (dns_header_t *)p->payload;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	627b      	str	r3, [r7, #36]	; 0x24
	if (header->flags.qr != 0) goto error;
 8004302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004304:	789b      	ldrb	r3, [r3, #2]
 8004306:	227f      	movs	r2, #127	; 0x7f
 8004308:	4393      	bics	r3, r2
 800430a:	b2db      	uxtb	r3, r3
 800430c:	2b00      	cmp	r3, #0
 800430e:	d000      	beq.n	8004312 <udp_recv_proc+0x2e>
 8004310:	e139      	b.n	8004586 <udp_recv_proc+0x2a2>
	if (ntohs(header->n_record[0]) != 1) goto error;
 8004312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004314:	791a      	ldrb	r2, [r3, #4]
 8004316:	795b      	ldrb	r3, [r3, #5]
 8004318:	021b      	lsls	r3, r3, #8
 800431a:	4313      	orrs	r3, r2
 800431c:	b29b      	uxth	r3, r3
 800431e:	0018      	movs	r0, r3
 8004320:	f001 fd06 	bl	8005d30 <lwip_ntohs>
 8004324:	0003      	movs	r3, r0
 8004326:	2b01      	cmp	r3, #1
 8004328:	d000      	beq.n	800432c <udp_recv_proc+0x48>
 800432a:	e12e      	b.n	800458a <udp_recv_proc+0x2a6>

	len = parse_next_query(header + 1, p->len - sizeof(dns_header_t), &query);
 800432c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432e:	330c      	adds	r3, #12
 8004330:	0018      	movs	r0, r3
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	895b      	ldrh	r3, [r3, #10]
 8004336:	3b0c      	subs	r3, #12
 8004338:	0019      	movs	r1, r3
 800433a:	4b9b      	ldr	r3, [pc, #620]	; (80045a8 <udp_recv_proc+0x2c4>)
 800433c:	001a      	movs	r2, r3
 800433e:	f7ff ff44 	bl	80041ca <parse_next_query>
 8004342:	0003      	movs	r3, r0
 8004344:	623b      	str	r3, [r7, #32]
	if (len < 0) goto error;
 8004346:	6a3b      	ldr	r3, [r7, #32]
 8004348:	2b00      	cmp	r3, #0
 800434a:	da00      	bge.n	800434e <udp_recv_proc+0x6a>
 800434c:	e11f      	b.n	800458e <udp_recv_proc+0x2aa>
	if (!query_proc(query.name, &host_addr)) goto error;
 800434e:	4b97      	ldr	r3, [pc, #604]	; (80045ac <udp_recv_proc+0x2c8>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	2214      	movs	r2, #20
 8004354:	18b9      	adds	r1, r7, r2
 8004356:	4a94      	ldr	r2, [pc, #592]	; (80045a8 <udp_recv_proc+0x2c4>)
 8004358:	0010      	movs	r0, r2
 800435a:	4798      	blx	r3
 800435c:	0003      	movs	r3, r0
 800435e:	001a      	movs	r2, r3
 8004360:	2301      	movs	r3, #1
 8004362:	4053      	eors	r3, r2
 8004364:	b2db      	uxtb	r3, r3
 8004366:	2b00      	cmp	r3, #0
 8004368:	d000      	beq.n	800436c <udp_recv_proc+0x88>
 800436a:	e112      	b.n	8004592 <udp_recv_proc+0x2ae>

	len += sizeof(dns_header_t);
 800436c:	6a3b      	ldr	r3, [r7, #32]
 800436e:	330c      	adds	r3, #12
 8004370:	623b      	str	r3, [r7, #32]
	out = pbuf_alloc(PBUF_TRANSPORT, len + 16, PBUF_POOL);
 8004372:	6a3b      	ldr	r3, [r7, #32]
 8004374:	b29b      	uxth	r3, r3
 8004376:	3310      	adds	r3, #16
 8004378:	b29b      	uxth	r3, r3
 800437a:	2203      	movs	r2, #3
 800437c:	0019      	movs	r1, r3
 800437e:	2000      	movs	r0, #0
 8004380:	f002 fa7c 	bl	800687c <pbuf_alloc>
 8004384:	0003      	movs	r3, r0
 8004386:	61fb      	str	r3, [r7, #28]
	if (out == NULL) goto error;
 8004388:	69fb      	ldr	r3, [r7, #28]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d100      	bne.n	8004390 <udp_recv_proc+0xac>
 800438e:	e102      	b.n	8004596 <udp_recv_proc+0x2b2>

	memcpy(out->payload, p->payload, len);
 8004390:	69fb      	ldr	r3, [r7, #28]
 8004392:	6858      	ldr	r0, [r3, #4]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	6a3a      	ldr	r2, [r7, #32]
 800439a:	0019      	movs	r1, r3
 800439c:	f00d fe5b 	bl	8012056 <memcpy>
	header = (dns_header_t *)out->payload;
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	627b      	str	r3, [r7, #36]	; 0x24
	header->flags.qr = 1;
 80043a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a8:	789a      	ldrb	r2, [r3, #2]
 80043aa:	2180      	movs	r1, #128	; 0x80
 80043ac:	4249      	negs	r1, r1
 80043ae:	430a      	orrs	r2, r1
 80043b0:	709a      	strb	r2, [r3, #2]
	header->n_record[1] = htons(1);
 80043b2:	2001      	movs	r0, #1
 80043b4:	f001 fca6 	bl	8005d04 <lwip_htons>
 80043b8:	0003      	movs	r3, r0
 80043ba:	001a      	movs	r2, r3
 80043bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043be:	21ff      	movs	r1, #255	; 0xff
 80043c0:	4011      	ands	r1, r2
 80043c2:	000c      	movs	r4, r1
 80043c4:	7999      	ldrb	r1, [r3, #6]
 80043c6:	2000      	movs	r0, #0
 80043c8:	4001      	ands	r1, r0
 80043ca:	1c08      	adds	r0, r1, #0
 80043cc:	1c21      	adds	r1, r4, #0
 80043ce:	4301      	orrs	r1, r0
 80043d0:	7199      	strb	r1, [r3, #6]
 80043d2:	0a12      	lsrs	r2, r2, #8
 80043d4:	b290      	uxth	r0, r2
 80043d6:	79da      	ldrb	r2, [r3, #7]
 80043d8:	2100      	movs	r1, #0
 80043da:	400a      	ands	r2, r1
 80043dc:	1c11      	adds	r1, r2, #0
 80043de:	1c02      	adds	r2, r0, #0
 80043e0:	430a      	orrs	r2, r1
 80043e2:	71da      	strb	r2, [r3, #7]
	answer = (struct dns_answer *)((uint8_t *)out->payload + len);
 80043e4:	69fb      	ldr	r3, [r7, #28]
 80043e6:	685a      	ldr	r2, [r3, #4]
 80043e8:	6a3b      	ldr	r3, [r7, #32]
 80043ea:	18d3      	adds	r3, r2, r3
 80043ec:	61bb      	str	r3, [r7, #24]
	answer->name = htons(0xC00C);
 80043ee:	4b70      	ldr	r3, [pc, #448]	; (80045b0 <udp_recv_proc+0x2cc>)
 80043f0:	0018      	movs	r0, r3
 80043f2:	f001 fc87 	bl	8005d04 <lwip_htons>
 80043f6:	0003      	movs	r3, r0
 80043f8:	001a      	movs	r2, r3
 80043fa:	69bb      	ldr	r3, [r7, #24]
 80043fc:	21ff      	movs	r1, #255	; 0xff
 80043fe:	4011      	ands	r1, r2
 8004400:	000c      	movs	r4, r1
 8004402:	7819      	ldrb	r1, [r3, #0]
 8004404:	2000      	movs	r0, #0
 8004406:	4001      	ands	r1, r0
 8004408:	1c08      	adds	r0, r1, #0
 800440a:	1c21      	adds	r1, r4, #0
 800440c:	4301      	orrs	r1, r0
 800440e:	7019      	strb	r1, [r3, #0]
 8004410:	0a12      	lsrs	r2, r2, #8
 8004412:	b290      	uxth	r0, r2
 8004414:	785a      	ldrb	r2, [r3, #1]
 8004416:	2100      	movs	r1, #0
 8004418:	400a      	ands	r2, r1
 800441a:	1c11      	adds	r1, r2, #0
 800441c:	1c02      	adds	r2, r0, #0
 800441e:	430a      	orrs	r2, r1
 8004420:	705a      	strb	r2, [r3, #1]
	answer->type = htons(1);
 8004422:	2001      	movs	r0, #1
 8004424:	f001 fc6e 	bl	8005d04 <lwip_htons>
 8004428:	0003      	movs	r3, r0
 800442a:	001a      	movs	r2, r3
 800442c:	69bb      	ldr	r3, [r7, #24]
 800442e:	21ff      	movs	r1, #255	; 0xff
 8004430:	4011      	ands	r1, r2
 8004432:	000c      	movs	r4, r1
 8004434:	7899      	ldrb	r1, [r3, #2]
 8004436:	2000      	movs	r0, #0
 8004438:	4001      	ands	r1, r0
 800443a:	1c08      	adds	r0, r1, #0
 800443c:	1c21      	adds	r1, r4, #0
 800443e:	4301      	orrs	r1, r0
 8004440:	7099      	strb	r1, [r3, #2]
 8004442:	0a12      	lsrs	r2, r2, #8
 8004444:	b290      	uxth	r0, r2
 8004446:	78da      	ldrb	r2, [r3, #3]
 8004448:	2100      	movs	r1, #0
 800444a:	400a      	ands	r2, r1
 800444c:	1c11      	adds	r1, r2, #0
 800444e:	1c02      	adds	r2, r0, #0
 8004450:	430a      	orrs	r2, r1
 8004452:	70da      	strb	r2, [r3, #3]
	answer->Class = htons(1);
 8004454:	2001      	movs	r0, #1
 8004456:	f001 fc55 	bl	8005d04 <lwip_htons>
 800445a:	0003      	movs	r3, r0
 800445c:	001a      	movs	r2, r3
 800445e:	69bb      	ldr	r3, [r7, #24]
 8004460:	21ff      	movs	r1, #255	; 0xff
 8004462:	4011      	ands	r1, r2
 8004464:	000c      	movs	r4, r1
 8004466:	7919      	ldrb	r1, [r3, #4]
 8004468:	2000      	movs	r0, #0
 800446a:	4001      	ands	r1, r0
 800446c:	1c08      	adds	r0, r1, #0
 800446e:	1c21      	adds	r1, r4, #0
 8004470:	4301      	orrs	r1, r0
 8004472:	7119      	strb	r1, [r3, #4]
 8004474:	0a12      	lsrs	r2, r2, #8
 8004476:	b290      	uxth	r0, r2
 8004478:	795a      	ldrb	r2, [r3, #5]
 800447a:	2100      	movs	r1, #0
 800447c:	400a      	ands	r2, r1
 800447e:	1c11      	adds	r1, r2, #0
 8004480:	1c02      	adds	r2, r0, #0
 8004482:	430a      	orrs	r2, r1
 8004484:	715a      	strb	r2, [r3, #5]
	answer->ttl = htonl(32);
 8004486:	2020      	movs	r0, #32
 8004488:	f001 fc62 	bl	8005d50 <lwip_htonl>
 800448c:	0002      	movs	r2, r0
 800448e:	69bb      	ldr	r3, [r7, #24]
 8004490:	3306      	adds	r3, #6
 8004492:	21ff      	movs	r1, #255	; 0xff
 8004494:	4011      	ands	r1, r2
 8004496:	000c      	movs	r4, r1
 8004498:	7819      	ldrb	r1, [r3, #0]
 800449a:	2000      	movs	r0, #0
 800449c:	4001      	ands	r1, r0
 800449e:	1c08      	adds	r0, r1, #0
 80044a0:	1c21      	adds	r1, r4, #0
 80044a2:	4301      	orrs	r1, r0
 80044a4:	7019      	strb	r1, [r3, #0]
 80044a6:	0a11      	lsrs	r1, r2, #8
 80044a8:	20ff      	movs	r0, #255	; 0xff
 80044aa:	4001      	ands	r1, r0
 80044ac:	000c      	movs	r4, r1
 80044ae:	7859      	ldrb	r1, [r3, #1]
 80044b0:	2000      	movs	r0, #0
 80044b2:	4001      	ands	r1, r0
 80044b4:	1c08      	adds	r0, r1, #0
 80044b6:	1c21      	adds	r1, r4, #0
 80044b8:	4301      	orrs	r1, r0
 80044ba:	7059      	strb	r1, [r3, #1]
 80044bc:	0c11      	lsrs	r1, r2, #16
 80044be:	20ff      	movs	r0, #255	; 0xff
 80044c0:	4001      	ands	r1, r0
 80044c2:	000c      	movs	r4, r1
 80044c4:	7899      	ldrb	r1, [r3, #2]
 80044c6:	2000      	movs	r0, #0
 80044c8:	4001      	ands	r1, r0
 80044ca:	1c08      	adds	r0, r1, #0
 80044cc:	1c21      	adds	r1, r4, #0
 80044ce:	4301      	orrs	r1, r0
 80044d0:	7099      	strb	r1, [r3, #2]
 80044d2:	0e10      	lsrs	r0, r2, #24
 80044d4:	78da      	ldrb	r2, [r3, #3]
 80044d6:	2100      	movs	r1, #0
 80044d8:	400a      	ands	r2, r1
 80044da:	1c11      	adds	r1, r2, #0
 80044dc:	1c02      	adds	r2, r0, #0
 80044de:	430a      	orrs	r2, r1
 80044e0:	70da      	strb	r2, [r3, #3]
	answer->len = htons(4);
 80044e2:	2004      	movs	r0, #4
 80044e4:	f001 fc0e 	bl	8005d04 <lwip_htons>
 80044e8:	0003      	movs	r3, r0
 80044ea:	001a      	movs	r2, r3
 80044ec:	69bb      	ldr	r3, [r7, #24]
 80044ee:	21ff      	movs	r1, #255	; 0xff
 80044f0:	4011      	ands	r1, r2
 80044f2:	000c      	movs	r4, r1
 80044f4:	7a99      	ldrb	r1, [r3, #10]
 80044f6:	2000      	movs	r0, #0
 80044f8:	4001      	ands	r1, r0
 80044fa:	1c08      	adds	r0, r1, #0
 80044fc:	1c21      	adds	r1, r4, #0
 80044fe:	4301      	orrs	r1, r0
 8004500:	7299      	strb	r1, [r3, #10]
 8004502:	0a12      	lsrs	r2, r2, #8
 8004504:	b290      	uxth	r0, r2
 8004506:	7ada      	ldrb	r2, [r3, #11]
 8004508:	2100      	movs	r1, #0
 800450a:	400a      	ands	r2, r1
 800450c:	1c11      	adds	r1, r2, #0
 800450e:	1c02      	adds	r2, r0, #0
 8004510:	430a      	orrs	r2, r1
 8004512:	72da      	strb	r2, [r3, #11]
	answer->addr = host_addr.addr;
 8004514:	697a      	ldr	r2, [r7, #20]
 8004516:	69bb      	ldr	r3, [r7, #24]
 8004518:	21ff      	movs	r1, #255	; 0xff
 800451a:	4011      	ands	r1, r2
 800451c:	000c      	movs	r4, r1
 800451e:	7b19      	ldrb	r1, [r3, #12]
 8004520:	2000      	movs	r0, #0
 8004522:	4001      	ands	r1, r0
 8004524:	1c08      	adds	r0, r1, #0
 8004526:	1c21      	adds	r1, r4, #0
 8004528:	4301      	orrs	r1, r0
 800452a:	7319      	strb	r1, [r3, #12]
 800452c:	0a11      	lsrs	r1, r2, #8
 800452e:	20ff      	movs	r0, #255	; 0xff
 8004530:	4001      	ands	r1, r0
 8004532:	000c      	movs	r4, r1
 8004534:	7b59      	ldrb	r1, [r3, #13]
 8004536:	2000      	movs	r0, #0
 8004538:	4001      	ands	r1, r0
 800453a:	1c08      	adds	r0, r1, #0
 800453c:	1c21      	adds	r1, r4, #0
 800453e:	4301      	orrs	r1, r0
 8004540:	7359      	strb	r1, [r3, #13]
 8004542:	0c11      	lsrs	r1, r2, #16
 8004544:	20ff      	movs	r0, #255	; 0xff
 8004546:	4001      	ands	r1, r0
 8004548:	000c      	movs	r4, r1
 800454a:	7b99      	ldrb	r1, [r3, #14]
 800454c:	2000      	movs	r0, #0
 800454e:	4001      	ands	r1, r0
 8004550:	1c08      	adds	r0, r1, #0
 8004552:	1c21      	adds	r1, r4, #0
 8004554:	4301      	orrs	r1, r0
 8004556:	7399      	strb	r1, [r3, #14]
 8004558:	0e10      	lsrs	r0, r2, #24
 800455a:	7bda      	ldrb	r2, [r3, #15]
 800455c:	2100      	movs	r1, #0
 800455e:	400a      	ands	r2, r1
 8004560:	1c11      	adds	r1, r2, #0
 8004562:	1c02      	adds	r2, r0, #0
 8004564:	430a      	orrs	r2, r1
 8004566:	73da      	strb	r2, [r3, #15]
	
	udp_sendto(upcb, out, addr, port);
 8004568:	2338      	movs	r3, #56	; 0x38
 800456a:	18fb      	adds	r3, r7, r3
 800456c:	881b      	ldrh	r3, [r3, #0]
 800456e:	683a      	ldr	r2, [r7, #0]
 8004570:	69f9      	ldr	r1, [r7, #28]
 8004572:	68b8      	ldr	r0, [r7, #8]
 8004574:	f008 fc36 	bl	800cde4 <udp_sendto>
	pbuf_free(out);
 8004578:	69fb      	ldr	r3, [r7, #28]
 800457a:	0018      	movs	r0, r3
 800457c:	f002 fc0a 	bl	8006d94 <pbuf_free>
 8004580:	e00a      	b.n	8004598 <udp_recv_proc+0x2b4>
	if (p->len <= sizeof(dns_header_t)) goto error;
 8004582:	46c0      	nop			; (mov r8, r8)
 8004584:	e008      	b.n	8004598 <udp_recv_proc+0x2b4>
	if (header->flags.qr != 0) goto error;
 8004586:	46c0      	nop			; (mov r8, r8)
 8004588:	e006      	b.n	8004598 <udp_recv_proc+0x2b4>
	if (ntohs(header->n_record[0]) != 1) goto error;
 800458a:	46c0      	nop			; (mov r8, r8)
 800458c:	e004      	b.n	8004598 <udp_recv_proc+0x2b4>
	if (len < 0) goto error;
 800458e:	46c0      	nop			; (mov r8, r8)
 8004590:	e002      	b.n	8004598 <udp_recv_proc+0x2b4>
	if (!query_proc(query.name, &host_addr)) goto error;
 8004592:	46c0      	nop			; (mov r8, r8)
 8004594:	e000      	b.n	8004598 <udp_recv_proc+0x2b4>
	if (out == NULL) goto error;
 8004596:	46c0      	nop			; (mov r8, r8)

error:
	pbuf_free(p);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	0018      	movs	r0, r3
 800459c:	f002 fbfa 	bl	8006d94 <pbuf_free>
}
 80045a0:	46c0      	nop			; (mov r8, r8)
 80045a2:	46bd      	mov	sp, r7
 80045a4:	b00b      	add	sp, #44	; 0x2c
 80045a6:	bd90      	pop	{r4, r7, pc}
 80045a8:	20000144 	.word	0x20000144
 80045ac:	20000140 	.word	0x20000140
 80045b0:	0000c00c 	.word	0x0000c00c

080045b4 <dnserv_init>:

err_t dnserv_init(ip_addr_t *bind, uint16_t port, dns_query_proc_t qp)
{
 80045b4:	b5b0      	push	{r4, r5, r7, lr}
 80045b6:	b086      	sub	sp, #24
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	60f8      	str	r0, [r7, #12]
 80045bc:	607a      	str	r2, [r7, #4]
 80045be:	230a      	movs	r3, #10
 80045c0:	18fb      	adds	r3, r7, r3
 80045c2:	1c0a      	adds	r2, r1, #0
 80045c4:	801a      	strh	r2, [r3, #0]
	err_t err;
	udp_init();
 80045c6:	f008 fa2b 	bl	800ca20 <udp_init>
	dnserv_free();
 80045ca:	f000 f83b 	bl	8004644 <dnserv_free>
	pcb = udp_new();
 80045ce:	f008 fe05 	bl	800d1dc <udp_new>
 80045d2:	0002      	movs	r2, r0
 80045d4:	4b18      	ldr	r3, [pc, #96]	; (8004638 <dnserv_init+0x84>)
 80045d6:	601a      	str	r2, [r3, #0]
	if (pcb == NULL)
 80045d8:	4b17      	ldr	r3, [pc, #92]	; (8004638 <dnserv_init+0x84>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d102      	bne.n	80045e6 <dnserv_init+0x32>
		return ERR_MEM;
 80045e0:	2301      	movs	r3, #1
 80045e2:	425b      	negs	r3, r3
 80045e4:	e023      	b.n	800462e <dnserv_init+0x7a>
	err = udp_bind(pcb, bind, port);
 80045e6:	4b14      	ldr	r3, [pc, #80]	; (8004638 <dnserv_init+0x84>)
 80045e8:	6818      	ldr	r0, [r3, #0]
 80045ea:	2517      	movs	r5, #23
 80045ec:	197c      	adds	r4, r7, r5
 80045ee:	230a      	movs	r3, #10
 80045f0:	18fb      	adds	r3, r7, r3
 80045f2:	881a      	ldrh	r2, [r3, #0]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	0019      	movs	r1, r3
 80045f8:	f008 fd42 	bl	800d080 <udp_bind>
 80045fc:	0003      	movs	r3, r0
 80045fe:	7023      	strb	r3, [r4, #0]
	if (err != ERR_OK)
 8004600:	197b      	adds	r3, r7, r5
 8004602:	781b      	ldrb	r3, [r3, #0]
 8004604:	b25b      	sxtb	r3, r3
 8004606:	2b00      	cmp	r3, #0
 8004608:	d006      	beq.n	8004618 <dnserv_init+0x64>
	{
		dnserv_free();
 800460a:	f000 f81b 	bl	8004644 <dnserv_free>
		return err;
 800460e:	2317      	movs	r3, #23
 8004610:	18fb      	adds	r3, r7, r3
 8004612:	781b      	ldrb	r3, [r3, #0]
 8004614:	b25b      	sxtb	r3, r3
 8004616:	e00a      	b.n	800462e <dnserv_init+0x7a>
	}
	udp_recv(pcb, udp_recv_proc, NULL);
 8004618:	4b07      	ldr	r3, [pc, #28]	; (8004638 <dnserv_init+0x84>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4907      	ldr	r1, [pc, #28]	; (800463c <dnserv_init+0x88>)
 800461e:	2200      	movs	r2, #0
 8004620:	0018      	movs	r0, r3
 8004622:	f008 fd99 	bl	800d158 <udp_recv>
	query_proc = qp;
 8004626:	4b06      	ldr	r3, [pc, #24]	; (8004640 <dnserv_init+0x8c>)
 8004628:	687a      	ldr	r2, [r7, #4]
 800462a:	601a      	str	r2, [r3, #0]
	return ERR_OK;
 800462c:	2300      	movs	r3, #0
}
 800462e:	0018      	movs	r0, r3
 8004630:	46bd      	mov	sp, r7
 8004632:	b006      	add	sp, #24
 8004634:	bdb0      	pop	{r4, r5, r7, pc}
 8004636:	46c0      	nop			; (mov r8, r8)
 8004638:	2000013c 	.word	0x2000013c
 800463c:	080042e5 	.word	0x080042e5
 8004640:	20000140 	.word	0x20000140

08004644 <dnserv_free>:

void dnserv_free()
{
 8004644:	b580      	push	{r7, lr}
 8004646:	af00      	add	r7, sp, #0
	if (pcb == NULL) return;
 8004648:	4b07      	ldr	r3, [pc, #28]	; (8004668 <dnserv_free+0x24>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d008      	beq.n	8004662 <dnserv_free+0x1e>
	udp_remove(pcb);
 8004650:	4b05      	ldr	r3, [pc, #20]	; (8004668 <dnserv_free+0x24>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	0018      	movs	r0, r3
 8004656:	f008 fd8f 	bl	800d178 <udp_remove>
	pcb = NULL;
 800465a:	4b03      	ldr	r3, [pc, #12]	; (8004668 <dnserv_free+0x24>)
 800465c:	2200      	movs	r2, #0
 800465e:	601a      	str	r2, [r3, #0]
 8004660:	e000      	b.n	8004664 <dnserv_free+0x20>
	if (pcb == NULL) return;
 8004662:	46c0      	nop			; (mov r8, r8)
}
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}
 8004668:	2000013c 	.word	0x2000013c

0800466c <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b084      	sub	sp, #16
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
 8004674:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d002      	beq.n	8004682 <fs_open+0x16>
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d102      	bne.n	8004688 <fs_open+0x1c>
     return ERR_ARG;
 8004682:	230e      	movs	r3, #14
 8004684:	425b      	negs	r3, r3
 8004686:	e028      	b.n	80046da <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 8004688:	4b16      	ldr	r3, [pc, #88]	; (80046e4 <fs_open+0x78>)
 800468a:	60fb      	str	r3, [r7, #12]
 800468c:	e020      	b.n	80046d0 <fs_open+0x64>
    if (!strcmp(name, (char *)f->name)) {
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	685a      	ldr	r2, [r3, #4]
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	0011      	movs	r1, r2
 8004696:	0018      	movs	r0, r3
 8004698:	f7fb fd36 	bl	8000108 <strcmp>
 800469c:	1e03      	subs	r3, r0, #0
 800469e:	d114      	bne.n	80046ca <fs_open+0x5e>
      file->data = (const char *)f->data;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	689a      	ldr	r2, [r3, #8]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	68da      	ldr	r2, [r3, #12]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	68da      	ldr	r2, [r3, #12]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2200      	movs	r2, #0
 80046bc:	60da      	str	r2, [r3, #12]
      file->http_header_included = f->http_header_included;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	7c1a      	ldrb	r2, [r3, #16]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 80046c6:	2300      	movs	r3, #0
 80046c8:	e007      	b.n	80046da <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	60fb      	str	r3, [r7, #12]
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d1db      	bne.n	800468e <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 80046d6:	2306      	movs	r3, #6
 80046d8:	425b      	negs	r3, r3
}
 80046da:	0018      	movs	r0, r3
 80046dc:	46bd      	mov	sp, r7
 80046de:	b004      	add	sp, #16
 80046e0:	bd80      	pop	{r7, pc}
 80046e2:	46c0      	nop			; (mov r8, r8)
 80046e4:	0801c950 	.word	0x0801c950

080046e8 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b082      	sub	sp, #8
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 80046f0:	46c0      	nop			; (mov r8, r8)
 80046f2:	46bd      	mov	sp, r7
 80046f4:	b002      	add	sp, #8
 80046f6:	bd80      	pop	{r7, pc}

080046f8 <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b082      	sub	sp, #8
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	685a      	ldr	r2, [r3, #4]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	1ad3      	subs	r3, r2, r3
}
 800470a:	0018      	movs	r0, r3
 800470c:	46bd      	mov	sp, r7
 800470e:	b002      	add	sp, #8
 8004710:	bd80      	pop	{r7, pc}

08004712 <strnstr>:

#if LWIP_HTTPD_STRNSTR_PRIVATE
/** Like strstr but does not need 'buffer' to be NULL-terminated */
char*
strnstr(const char* buffer, const char* token, size_t n)
{
 8004712:	b580      	push	{r7, lr}
 8004714:	b086      	sub	sp, #24
 8004716:	af00      	add	r7, sp, #0
 8004718:	60f8      	str	r0, [r7, #12]
 800471a:	60b9      	str	r1, [r7, #8]
 800471c:	607a      	str	r2, [r7, #4]
  const char* p;
  int tokenlen = (int)strlen(token);
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	0018      	movs	r0, r3
 8004722:	f7fb fcfb 	bl	800011c <strlen>
 8004726:	0003      	movs	r3, r0
 8004728:	613b      	str	r3, [r7, #16]
  if (tokenlen == 0) {
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d101      	bne.n	8004734 <strnstr+0x22>
    return (char *)buffer;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	e022      	b.n	800477a <strnstr+0x68>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	617b      	str	r3, [r7, #20]
 8004738:	e012      	b.n	8004760 <strnstr+0x4e>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	781a      	ldrb	r2, [r3, #0]
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	781b      	ldrb	r3, [r3, #0]
 8004742:	429a      	cmp	r2, r3
 8004744:	d109      	bne.n	800475a <strnstr+0x48>
 8004746:	693a      	ldr	r2, [r7, #16]
 8004748:	68b9      	ldr	r1, [r7, #8]
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	0018      	movs	r0, r3
 800474e:	f00d fcd3 	bl	80120f8 <strncmp>
 8004752:	1e03      	subs	r3, r0, #0
 8004754:	d101      	bne.n	800475a <strnstr+0x48>
      return (char *)p;
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	e00f      	b.n	800477a <strnstr+0x68>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	3301      	adds	r3, #1
 800475e:	617b      	str	r3, [r7, #20]
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	781b      	ldrb	r3, [r3, #0]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d007      	beq.n	8004778 <strnstr+0x66>
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	697a      	ldr	r2, [r7, #20]
 800476c:	18d2      	adds	r2, r2, r3
 800476e:	68f9      	ldr	r1, [r7, #12]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	18cb      	adds	r3, r1, r3
 8004774:	429a      	cmp	r2, r3
 8004776:	d9e0      	bls.n	800473a <strnstr+0x28>
    }
  }
  return NULL;
 8004778:	2300      	movs	r3, #0
} 
 800477a:	0018      	movs	r0, r3
 800477c:	46bd      	mov	sp, r7
 800477e:	b006      	add	sp, #24
 8004780:	bd80      	pop	{r7, pc}

08004782 <http_ssi_state_alloc>:

#if LWIP_HTTPD_SSI
/** Allocate as struct http_ssi_state. */
static struct http_ssi_state*
http_ssi_state_alloc(void)
{
 8004782:	b580      	push	{r7, lr}
 8004784:	b082      	sub	sp, #8
 8004786:	af00      	add	r7, sp, #0
  struct http_ssi_state *ret = HTTP_ALLOC_SSI_STATE();
 8004788:	20dc      	movs	r0, #220	; 0xdc
 800478a:	f001 fd1b 	bl	80061c4 <mem_malloc>
 800478e:	0003      	movs	r3, r0
 8004790:	607b      	str	r3, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(1);
    ret = HTTP_ALLOC_SSI_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d005      	beq.n	80047a4 <http_ssi_state_alloc+0x22>
    memset(ret, 0, sizeof(struct http_ssi_state));
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	22dc      	movs	r2, #220	; 0xdc
 800479c:	2100      	movs	r1, #0
 800479e:	0018      	movs	r0, r3
 80047a0:	f00d fc62 	bl	8012068 <memset>
  }
  return ret;
 80047a4:	687b      	ldr	r3, [r7, #4]
}
 80047a6:	0018      	movs	r0, r3
 80047a8:	46bd      	mov	sp, r7
 80047aa:	b002      	add	sp, #8
 80047ac:	bd80      	pop	{r7, pc}

080047ae <http_ssi_state_free>:

/** Free a struct http_ssi_state. */
static void
http_ssi_state_free(struct http_ssi_state *ssi)
{
 80047ae:	b580      	push	{r7, lr}
 80047b0:	b082      	sub	sp, #8
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	6078      	str	r0, [r7, #4]
  if (ssi != NULL) {
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d003      	beq.n	80047c4 <http_ssi_state_free+0x16>
#if HTTPD_USE_MEM_POOL
    memp_free(MEMP_HTTPD_SSI_STATE, ssi);
#else /* HTTPD_USE_MEM_POOL */
    mem_free(ssi);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	0018      	movs	r0, r3
 80047c0:	f001 fba2 	bl	8005f08 <mem_free>
#endif /* HTTPD_USE_MEM_POOL */
  }
}
 80047c4:	46c0      	nop			; (mov r8, r8)
 80047c6:	46bd      	mov	sp, r7
 80047c8:	b002      	add	sp, #8
 80047ca:	bd80      	pop	{r7, pc}

080047cc <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state* hs)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b082      	sub	sp, #8
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	22b0      	movs	r2, #176	; 0xb0
 80047d8:	2100      	movs	r1, #0
 80047da:	0018      	movs	r0, r3
 80047dc:	f00d fc44 	bl	8012068 <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 80047e0:	46c0      	nop			; (mov r8, r8)
 80047e2:	46bd      	mov	sp, r7
 80047e4:	b002      	add	sp, #8
 80047e6:	bd80      	pop	{r7, pc}

080047e8 <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state*
http_state_alloc(void)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b082      	sub	sp, #8
 80047ec:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 80047ee:	20b0      	movs	r0, #176	; 0xb0
 80047f0:	f001 fce8 	bl	80061c4 <mem_malloc>
 80047f4:	0003      	movs	r3, r0
 80047f6:	607b      	str	r3, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d003      	beq.n	8004806 <http_state_alloc+0x1e>
    http_state_init(ret);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	0018      	movs	r0, r3
 8004802:	f7ff ffe3 	bl	80047cc <http_state_init>
      LWIP_ASSERT("last != NULL", last != NULL);
      last->next = ret;
    }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  }
  return ret;
 8004806:	687b      	ldr	r3, [r7, #4]
}
 8004808:	0018      	movs	r0, r3
 800480a:	46bd      	mov	sp, r7
 800480c:	b002      	add	sp, #8
 800480e:	bd80      	pop	{r7, pc}

08004810 <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b082      	sub	sp, #8
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  if(hs->handle) {
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	695b      	ldr	r3, [r3, #20]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d007      	beq.n	8004830 <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed/100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
      ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	695b      	ldr	r3, [r3, #20]
 8004824:	0018      	movs	r0, r3
 8004826:	f7ff ff5f 	bl	80046e8 <fs_close>
    hs->handle = NULL;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2200      	movs	r2, #0
 800482e:	615a      	str	r2, [r3, #20]
    mem_free(hs->buf);
    hs->buf = NULL;
  }
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */
#if LWIP_HTTPD_SSI
  if (hs->ssi) {
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004834:	2b00      	cmp	r3, #0
 8004836:	d007      	beq.n	8004848 <http_state_eof+0x38>
    http_ssi_state_free(hs->ssi);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800483c:	0018      	movs	r0, r3
 800483e:	f7ff ffb6 	bl	80047ae <http_ssi_state_free>
    hs->ssi = NULL;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2200      	movs	r2, #0
 8004846:	62da      	str	r2, [r3, #44]	; 0x2c
  }
#endif /* LWIP_HTTPD_SSI */
}
 8004848:	46c0      	nop			; (mov r8, r8)
 800484a:	46bd      	mov	sp, r7
 800484c:	b002      	add	sp, #8
 800484e:	bd80      	pop	{r7, pc}

08004850 <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b082      	sub	sp, #8
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d007      	beq.n	800486e <http_state_free+0x1e>
    http_state_eof(hs);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	0018      	movs	r0, r3
 8004862:	f7ff ffd5 	bl	8004810 <http_state_eof>
    }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
#if HTTPD_USE_MEM_POOL
    memp_free(MEMP_HTTPD_STATE, hs);
#else /* HTTPD_USE_MEM_POOL */
    mem_free(hs);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	0018      	movs	r0, r3
 800486a:	f001 fb4d 	bl	8005f08 <mem_free>
#endif /* HTTPD_USE_MEM_POOL */
  }
}
 800486e:	46c0      	nop			; (mov r8, r8)
 8004870:	46bd      	mov	sp, r7
 8004872:	b002      	add	sp, #8
 8004874:	bd80      	pop	{r7, pc}

08004876 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct tcp_pcb *pcb, const void* ptr, u16_t *length, u8_t apiflags)
{
 8004876:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004878:	b087      	sub	sp, #28
 800487a:	af00      	add	r7, sp, #0
 800487c:	60f8      	str	r0, [r7, #12]
 800487e:	60b9      	str	r1, [r7, #8]
 8004880:	607a      	str	r2, [r7, #4]
 8004882:	001a      	movs	r2, r3
 8004884:	1cfb      	adds	r3, r7, #3
 8004886:	701a      	strb	r2, [r3, #0]
   u16_t len;
   err_t err;
   LWIP_ASSERT("length != NULL", length != NULL);
   len = *length;
 8004888:	2116      	movs	r1, #22
 800488a:	187b      	adds	r3, r7, r1
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	8812      	ldrh	r2, [r2, #0]
 8004890:	801a      	strh	r2, [r3, #0]
   if (len == 0) {
 8004892:	187b      	adds	r3, r7, r1
 8004894:	881b      	ldrh	r3, [r3, #0]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d101      	bne.n	800489e <http_write+0x28>
     return ERR_OK;
 800489a:	2300      	movs	r3, #0
 800489c:	e03b      	b.n	8004916 <http_write+0xa0>
   }
   do {
     LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying go send %d bytes\n", len));
     err = tcp_write(pcb, ptr, len, apiflags);
 800489e:	2615      	movs	r6, #21
 80048a0:	19bc      	adds	r4, r7, r6
 80048a2:	1cfb      	adds	r3, r7, #3
 80048a4:	781d      	ldrb	r5, [r3, #0]
 80048a6:	2316      	movs	r3, #22
 80048a8:	18fb      	adds	r3, r7, r3
 80048aa:	881a      	ldrh	r2, [r3, #0]
 80048ac:	68b9      	ldr	r1, [r7, #8]
 80048ae:	68f8      	ldr	r0, [r7, #12]
 80048b0:	002b      	movs	r3, r5
 80048b2:	f006 fd65 	bl	800b380 <tcp_write>
 80048b6:	0003      	movs	r3, r0
 80048b8:	7023      	strb	r3, [r4, #0]
     if (err == ERR_MEM) {
 80048ba:	19bb      	adds	r3, r7, r6
 80048bc:	781b      	ldrb	r3, [r3, #0]
 80048be:	b25b      	sxtb	r3, r3
 80048c0:	3301      	adds	r3, #1
 80048c2:	d114      	bne.n	80048ee <http_write+0x78>
       if ((tcp_sndbuf(pcb) == 0) ||
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2266      	movs	r2, #102	; 0x66
 80048c8:	5a9b      	ldrh	r3, [r3, r2]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d004      	beq.n	80048d8 <http_write+0x62>
           (tcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2268      	movs	r2, #104	; 0x68
 80048d2:	5a9b      	ldrh	r3, [r3, r2]
       if ((tcp_sndbuf(pcb) == 0) ||
 80048d4:	2b07      	cmp	r3, #7
 80048d6:	d904      	bls.n	80048e2 <http_write+0x6c>
         /* no need to try smaller sizes */
         len = 1;
 80048d8:	2316      	movs	r3, #22
 80048da:	18fb      	adds	r3, r7, r3
 80048dc:	2201      	movs	r2, #1
 80048de:	801a      	strh	r2, [r3, #0]
 80048e0:	e005      	b.n	80048ee <http_write+0x78>
       } else {
         len /= 2;
 80048e2:	2216      	movs	r2, #22
 80048e4:	18bb      	adds	r3, r7, r2
 80048e6:	18ba      	adds	r2, r7, r2
 80048e8:	8812      	ldrh	r2, [r2, #0]
 80048ea:	0852      	lsrs	r2, r2, #1
 80048ec:	801a      	strh	r2, [r3, #0]
       }
       LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, 
                   ("Send failed, trying less (%d bytes)\n", len));
     }
   } while ((err == ERR_MEM) && (len > 1));
 80048ee:	2315      	movs	r3, #21
 80048f0:	18fb      	adds	r3, r7, r3
 80048f2:	781b      	ldrb	r3, [r3, #0]
 80048f4:	b25b      	sxtb	r3, r3
 80048f6:	3301      	adds	r3, #1
 80048f8:	d104      	bne.n	8004904 <http_write+0x8e>
 80048fa:	2316      	movs	r3, #22
 80048fc:	18fb      	adds	r3, r7, r3
 80048fe:	881b      	ldrh	r3, [r3, #0]
 8004900:	2b01      	cmp	r3, #1
 8004902:	d8cc      	bhi.n	800489e <http_write+0x28>
     LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
   } else {
     LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
   }

   *length = len;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2216      	movs	r2, #22
 8004908:	18ba      	adds	r2, r7, r2
 800490a:	8812      	ldrh	r2, [r2, #0]
 800490c:	801a      	strh	r2, [r3, #0]
   return err;
 800490e:	2315      	movs	r3, #21
 8004910:	18fb      	adds	r3, r7, r3
 8004912:	781b      	ldrb	r3, [r3, #0]
 8004914:	b25b      	sxtb	r3, r3
}
 8004916:	0018      	movs	r0, r3
 8004918:	46bd      	mov	sp, r7
 800491a:	b007      	add	sp, #28
 800491c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004920 <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct tcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 8004920:	b5b0      	push	{r4, r5, r7, lr}
 8004922:	b086      	sub	sp, #24
 8004924:	af00      	add	r7, sp, #0
 8004926:	60f8      	str	r0, [r7, #12]
 8004928:	60b9      	str	r1, [r7, #8]
 800492a:	1dfb      	adds	r3, r7, #7
 800492c:	701a      	strb	r2, [r3, #0]
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  tcp_arg(pcb, NULL);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2100      	movs	r1, #0
 8004932:	0018      	movs	r0, r3
 8004934:	f003 fd6b 	bl	800840e <tcp_arg>
  tcp_recv(pcb, NULL);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2100      	movs	r1, #0
 800493c:	0018      	movs	r0, r3
 800493e:	f003 fd72 	bl	8008426 <tcp_recv>
  tcp_err(pcb, NULL);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2100      	movs	r1, #0
 8004946:	0018      	movs	r0, r3
 8004948:	f003 fd86 	bl	8008458 <tcp_err>
  tcp_poll(pcb, NULL, 0);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2200      	movs	r2, #0
 8004950:	2100      	movs	r1, #0
 8004952:	0018      	movs	r0, r3
 8004954:	f003 fd99 	bl	800848a <tcp_poll>
  tcp_sent(pcb, NULL);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2100      	movs	r1, #0
 800495c:	0018      	movs	r0, r3
 800495e:	f003 fd6f 	bl	8008440 <tcp_sent>
  if (hs != NULL) {
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d003      	beq.n	8004970 <http_close_or_abort_conn+0x50>
    http_state_free(hs);
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	0018      	movs	r0, r3
 800496c:	f7ff ff70 	bl	8004850 <http_state_free>
  }

  if (abort_conn) {
 8004970:	1dfb      	adds	r3, r7, #7
 8004972:	781b      	ldrb	r3, [r3, #0]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d005      	beq.n	8004984 <http_close_or_abort_conn+0x64>
    tcp_abort(pcb);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	0018      	movs	r0, r3
 800497c:	f002 fe76 	bl	800766c <tcp_abort>
    return ERR_OK;
 8004980:	2300      	movs	r3, #0
 8004982:	e016      	b.n	80049b2 <http_close_or_abort_conn+0x92>
  }
  err = tcp_close(pcb);
 8004984:	2517      	movs	r5, #23
 8004986:	197c      	adds	r4, r7, r5
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	0018      	movs	r0, r3
 800498c:	f002 fde4 	bl	8007558 <tcp_close>
 8004990:	0003      	movs	r3, r0
 8004992:	7023      	strb	r3, [r4, #0]
  if (err != ERR_OK) {
 8004994:	197b      	adds	r3, r7, r5
 8004996:	781b      	ldrb	r3, [r3, #0]
 8004998:	b25b      	sxtb	r3, r3
 800499a:	2b00      	cmp	r3, #0
 800499c:	d005      	beq.n	80049aa <http_close_or_abort_conn+0x8a>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void*)pcb));
    /* error closing, try again later in poll */
    tcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800499e:	4907      	ldr	r1, [pc, #28]	; (80049bc <http_close_or_abort_conn+0x9c>)
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2204      	movs	r2, #4
 80049a4:	0018      	movs	r0, r3
 80049a6:	f003 fd70 	bl	800848a <tcp_poll>
  }
  return err;
 80049aa:	2317      	movs	r3, #23
 80049ac:	18fb      	adds	r3, r7, r3
 80049ae:	781b      	ldrb	r3, [r3, #0]
 80049b0:	b25b      	sxtb	r3, r3
}
 80049b2:	0018      	movs	r0, r3
 80049b4:	46bd      	mov	sp, r7
 80049b6:	b006      	add	sp, #24
 80049b8:	bdb0      	pop	{r4, r5, r7, pc}
 80049ba:	46c0      	nop			; (mov r8, r8)
 80049bc:	08005a37 	.word	0x08005a37

080049c0 <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct tcp_pcb *pcb, struct http_state *hs)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b082      	sub	sp, #8
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	6039      	str	r1, [r7, #0]
   return http_close_or_abort_conn(pcb, hs, 0);
 80049ca:	6839      	ldr	r1, [r7, #0]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2200      	movs	r2, #0
 80049d0:	0018      	movs	r0, r3
 80049d2:	f7ff ffa5 	bl	8004920 <http_close_or_abort_conn>
 80049d6:	0003      	movs	r3, r0
}
 80049d8:	0018      	movs	r0, r3
 80049da:	46bd      	mov	sp, r7
 80049dc:	b002      	add	sp, #8
 80049de:	bd80      	pop	{r7, pc}

080049e0 <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct tcp_pcb *pcb, struct http_state *hs)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b082      	sub	sp, #8
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	6039      	str	r1, [r7, #0]
    http_state_init(hs);
    hs->keepalive = 1;
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 80049ea:	683a      	ldr	r2, [r7, #0]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	0011      	movs	r1, r2
 80049f0:	0018      	movs	r0, r3
 80049f2:	f7ff ffe5 	bl	80049c0 <http_close_conn>
  }
}
 80049f6:	46c0      	nop			; (mov r8, r8)
 80049f8:	46bd      	mov	sp, r7
 80049fa:	b002      	add	sp, #8
 80049fc:	bd80      	pop	{r7, pc}

080049fe <extract_uri_parameters>:
 * @param params pointer to the NULL-terminated parameter string from the URI
 * @return number of parameters extracted
 */
static int
extract_uri_parameters(struct http_state *hs, char *params)
{
 80049fe:	b580      	push	{r7, lr}
 8004a00:	b086      	sub	sp, #24
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	6078      	str	r0, [r7, #4]
 8004a06:	6039      	str	r1, [r7, #0]
  char *pair;
  char *equals;
  int loop;

  /* If we have no parameters at all, return immediately. */
  if(!params || (params[0] == '\0')) {
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d003      	beq.n	8004a16 <extract_uri_parameters+0x18>
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	781b      	ldrb	r3, [r3, #0]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d101      	bne.n	8004a1a <extract_uri_parameters+0x1c>
      return(0);
 8004a16:	2300      	movs	r3, #0
 8004a18:	e051      	b.n	8004abe <extract_uri_parameters+0xc0>
  }

  /* Get a pointer to our first parameter */
  pair = params;
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	617b      	str	r3, [r7, #20]

  /* Parse up to LWIP_HTTPD_MAX_CGI_PARAMETERS from the passed string and ignore the
   * remainder (if any) */
  for(loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8004a1e:	2300      	movs	r3, #0
 8004a20:	613b      	str	r3, [r7, #16]
 8004a22:	e045      	b.n	8004ab0 <extract_uri_parameters+0xb2>

    /* Save the name of the parameter */
    hs->params[loop] = pair;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	693a      	ldr	r2, [r7, #16]
 8004a28:	320c      	adds	r2, #12
 8004a2a:	0092      	lsls	r2, r2, #2
 8004a2c:	6979      	ldr	r1, [r7, #20]
 8004a2e:	50d1      	str	r1, [r2, r3]

    /* Remember the start of this name=value pair */
    equals = pair;
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	60fb      	str	r3, [r7, #12]

    /* Find the start of the next name=value pair and replace the delimiter
     * with a 0 to terminate the previous pair string. */
    pair = strchr(pair, '&');
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	2126      	movs	r1, #38	; 0x26
 8004a38:	0018      	movs	r0, r3
 8004a3a:	f00d fb4f 	bl	80120dc <strchr>
 8004a3e:	0003      	movs	r3, r0
 8004a40:	617b      	str	r3, [r7, #20]
    if(pair) {
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d006      	beq.n	8004a56 <extract_uri_parameters+0x58>
      *pair = '\0';
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	701a      	strb	r2, [r3, #0]
      pair++;
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	3301      	adds	r3, #1
 8004a52:	617b      	str	r3, [r7, #20]
 8004a54:	e00e      	b.n	8004a74 <extract_uri_parameters+0x76>
    } else {
       /* We didn't find a new parameter so find the end of the URI and
        * replace the space with a '\0' */
        pair = strchr(equals, ' ');
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2120      	movs	r1, #32
 8004a5a:	0018      	movs	r0, r3
 8004a5c:	f00d fb3e 	bl	80120dc <strchr>
 8004a60:	0003      	movs	r3, r0
 8004a62:	617b      	str	r3, [r7, #20]
        if(pair) {
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d002      	beq.n	8004a70 <extract_uri_parameters+0x72>
            *pair = '\0';
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	701a      	strb	r2, [r3, #0]
        }

        /* Revert to NULL so that we exit the loop as expected. */
        pair = NULL;
 8004a70:	2300      	movs	r3, #0
 8004a72:	617b      	str	r3, [r7, #20]
    }

    /* Now find the '=' in the previous pair, replace it with '\0' and save
     * the parameter value string. */
    equals = strchr(equals, '=');
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	213d      	movs	r1, #61	; 0x3d
 8004a78:	0018      	movs	r0, r3
 8004a7a:	f00d fb2f 	bl	80120dc <strchr>
 8004a7e:	0003      	movs	r3, r0
 8004a80:	60fb      	str	r3, [r7, #12]
    if(equals) {
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d00a      	beq.n	8004a9e <extract_uri_parameters+0xa0>
      *equals = '\0';
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	701a      	strb	r2, [r3, #0]
      hs->param_vals[loop] = equals + 1;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	1c59      	adds	r1, r3, #1
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	693a      	ldr	r2, [r7, #16]
 8004a96:	321c      	adds	r2, #28
 8004a98:	0092      	lsls	r2, r2, #2
 8004a9a:	50d1      	str	r1, [r2, r3]
 8004a9c:	e005      	b.n	8004aaa <extract_uri_parameters+0xac>
    } else {
      hs->param_vals[loop] = NULL;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	693a      	ldr	r2, [r7, #16]
 8004aa2:	321c      	adds	r2, #28
 8004aa4:	0092      	lsls	r2, r2, #2
 8004aa6:	2100      	movs	r1, #0
 8004aa8:	50d1      	str	r1, [r2, r3]
  for(loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	3301      	adds	r3, #1
 8004aae:	613b      	str	r3, [r7, #16]
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	2b0f      	cmp	r3, #15
 8004ab4:	dc02      	bgt.n	8004abc <extract_uri_parameters+0xbe>
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d1b3      	bne.n	8004a24 <extract_uri_parameters+0x26>
    }
  }

  return loop;
 8004abc:	693b      	ldr	r3, [r7, #16]
}
 8004abe:	0018      	movs	r0, r3
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	b006      	add	sp, #24
 8004ac4:	bd80      	pop	{r7, pc}
	...

08004ac8 <get_tag_insert>:
 *
 * @param hs http connection state
 */
static void
get_tag_insert(struct http_state *hs)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b086      	sub	sp, #24
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  int loop;
  size_t len;
  struct http_ssi_state *ssi;
  LWIP_ASSERT("hs != NULL", hs != NULL);
  ssi = hs->ssi;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad4:	613b      	str	r3, [r7, #16]
#if LWIP_HTTPD_SSI_MULTIPART
  u16_t current_tag_part = ssi->tag_part;
  ssi->tag_part = HTTPD_LAST_TAG_PART;
#endif /* LWIP_HTTPD_SSI_MULTIPART */

  if(g_pfnSSIHandler && g_ppcTags && g_iNumTags) {
 8004ad6:	4b39      	ldr	r3, [pc, #228]	; (8004bbc <get_tag_insert+0xf4>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d02d      	beq.n	8004b3a <get_tag_insert+0x72>
 8004ade:	4b38      	ldr	r3, [pc, #224]	; (8004bc0 <get_tag_insert+0xf8>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d029      	beq.n	8004b3a <get_tag_insert+0x72>
 8004ae6:	4b37      	ldr	r3, [pc, #220]	; (8004bc4 <get_tag_insert+0xfc>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d025      	beq.n	8004b3a <get_tag_insert+0x72>

    /* Find this tag in the list we have been provided. */
    for(loop = 0; loop < g_iNumTags; loop++) {
 8004aee:	2300      	movs	r3, #0
 8004af0:	617b      	str	r3, [r7, #20]
 8004af2:	e01d      	b.n	8004b30 <get_tag_insert+0x68>
      if(strcmp(ssi->tag_name, g_ppcTags[loop]) == 0) {
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	3311      	adds	r3, #17
 8004af8:	0018      	movs	r0, r3
 8004afa:	4b31      	ldr	r3, [pc, #196]	; (8004bc0 <get_tag_insert+0xf8>)
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	009b      	lsls	r3, r3, #2
 8004b02:	18d3      	adds	r3, r2, r3
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	0019      	movs	r1, r3
 8004b08:	f7fb fafe 	bl	8000108 <strcmp>
 8004b0c:	1e03      	subs	r3, r0, #0
 8004b0e:	d10c      	bne.n	8004b2a <get_tag_insert+0x62>
        ssi->tag_insert_len = g_pfnSSIHandler(loop, ssi->tag_insert,
 8004b10:	4b2a      	ldr	r3, [pc, #168]	; (8004bbc <get_tag_insert+0xf4>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	693a      	ldr	r2, [r7, #16]
 8004b16:	321a      	adds	r2, #26
 8004b18:	0011      	movs	r1, r2
 8004b1a:	6978      	ldr	r0, [r7, #20]
 8004b1c:	22c0      	movs	r2, #192	; 0xc0
 8004b1e:	4798      	blx	r3
 8004b20:	0003      	movs	r3, r0
 8004b22:	001a      	movs	r2, r3
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	81da      	strh	r2, [r3, #14]
#endif /* LWIP_HTTPD_SSI_MULTIPART */
#if LWIP_HTTPD_FILE_STATE
           , hs->handle->state
#endif /* LWIP_HTTPD_FILE_STATE */
           );
        return;
 8004b28:	e044      	b.n	8004bb4 <get_tag_insert+0xec>
    for(loop = 0; loop < g_iNumTags; loop++) {
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	3301      	adds	r3, #1
 8004b2e:	617b      	str	r3, [r7, #20]
 8004b30:	4b24      	ldr	r3, [pc, #144]	; (8004bc4 <get_tag_insert+0xfc>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	697a      	ldr	r2, [r7, #20]
 8004b36:	429a      	cmp	r2, r3
 8004b38:	dbdc      	blt.n	8004af4 <get_tag_insert+0x2c>
   * marker. */
#define UNKNOWN_TAG1_TEXT "<b>***UNKNOWN TAG "
#define UNKNOWN_TAG1_LEN  18
#define UNKNOWN_TAG2_TEXT "***</b>"
#define UNKNOWN_TAG2_LEN  7
  len = LWIP_MIN(strlen(ssi->tag_name),
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	3311      	adds	r3, #17
 8004b3e:	0018      	movs	r0, r3
 8004b40:	f7fb faec 	bl	800011c <strlen>
 8004b44:	0003      	movs	r3, r0
 8004b46:	2ba6      	cmp	r3, #166	; 0xa6
 8004b48:	d806      	bhi.n	8004b58 <get_tag_insert+0x90>
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	3311      	adds	r3, #17
 8004b4e:	0018      	movs	r0, r3
 8004b50:	f7fb fae4 	bl	800011c <strlen>
 8004b54:	0003      	movs	r3, r0
 8004b56:	e000      	b.n	8004b5a <get_tag_insert+0x92>
 8004b58:	23a7      	movs	r3, #167	; 0xa7
 8004b5a:	60fb      	str	r3, [r7, #12]
    LWIP_HTTPD_MAX_TAG_INSERT_LEN - (UNKNOWN_TAG1_LEN + UNKNOWN_TAG2_LEN));
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	331a      	adds	r3, #26
 8004b60:	4919      	ldr	r1, [pc, #100]	; (8004bc8 <get_tag_insert+0x100>)
 8004b62:	2212      	movs	r2, #18
 8004b64:	0018      	movs	r0, r3
 8004b66:	f00d fa76 	bl	8012056 <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	332c      	adds	r3, #44	; 0x2c
 8004b6e:	0018      	movs	r0, r3
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	3311      	adds	r3, #17
 8004b74:	68fa      	ldr	r2, [r7, #12]
 8004b76:	0019      	movs	r1, r3
 8004b78:	f00d fa6d 	bl	8012056 <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	3312      	adds	r3, #18
 8004b80:	3318      	adds	r3, #24
 8004b82:	693a      	ldr	r2, [r7, #16]
 8004b84:	18d3      	adds	r3, r2, r3
 8004b86:	3302      	adds	r3, #2
 8004b88:	4910      	ldr	r1, [pc, #64]	; (8004bcc <get_tag_insert+0x104>)
 8004b8a:	2207      	movs	r2, #7
 8004b8c:	0018      	movs	r0, r3
 8004b8e:	f00d fa62 	bl	8012056 <memcpy>
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	3319      	adds	r3, #25
 8004b96:	693a      	ldr	r2, [r7, #16]
 8004b98:	18d3      	adds	r3, r2, r3
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	769a      	strb	r2, [r3, #26]

  len = strlen(ssi->tag_insert);
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	331a      	adds	r3, #26
 8004ba2:	0018      	movs	r0, r3
 8004ba4:	f7fb faba 	bl	800011c <strlen>
 8004ba8:	0003      	movs	r3, r0
 8004baa:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
  ssi->tag_insert_len = (u16_t)len;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	b29a      	uxth	r2, r3
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	81da      	strh	r2, [r3, #14]
}
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	b006      	add	sp, #24
 8004bb8:	bd80      	pop	{r7, pc}
 8004bba:	46c0      	nop			; (mov r8, r8)
 8004bbc:	200005c8 	.word	0x200005c8
 8004bc0:	200005d0 	.word	0x200005d0
 8004bc4:	200005cc 	.word	0x200005cc
 8004bc8:	080129b4 	.word	0x080129b4
 8004bcc:	080129c8 	.word	0x080129c8

08004bd0 <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct tcp_pcb *pcb, struct http_state *hs)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b082      	sub	sp, #8
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	6039      	str	r1, [r7, #0]
#if LWIP_HTTPD_DYNAMIC_FILE_READ
  int count;
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	695b      	ldr	r3, [r3, #20]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d107      	bne.n	8004bf2 <http_check_eof+0x22>
    /* No - close the connection. */
    http_eof(pcb, hs);
 8004be2:	683a      	ldr	r2, [r7, #0]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	0011      	movs	r1, r2
 8004be8:	0018      	movs	r0, r3
 8004bea:	f7ff fef9 	bl	80049e0 <http_eof>
    return 0;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	e00f      	b.n	8004c12 <http_check_eof+0x42>
  }
  if (fs_bytes_left(hs->handle) <= 0) {
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	695b      	ldr	r3, [r3, #20]
 8004bf6:	0018      	movs	r0, r3
 8004bf8:	f7ff fd7e 	bl	80046f8 <fs_bytes_left>
 8004bfc:	1e03      	subs	r3, r0, #0
 8004bfe:	dc07      	bgt.n	8004c10 <http_check_eof+0x40>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 8004c00:	683a      	ldr	r2, [r7, #0]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	0011      	movs	r1, r2
 8004c06:	0018      	movs	r0, r3
 8004c08:	f7ff feea 	bl	80049e0 <http_eof>
    return 0;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	e000      	b.n	8004c12 <http_check_eof+0x42>
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 8004c10:	2301      	movs	r3, #1
}
 8004c12:	0018      	movs	r0, r3
 8004c14:	46bd      	mov	sp, r7
 8004c16:	b002      	add	sp, #8
 8004c18:	bd80      	pop	{r7, pc}

08004c1a <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct tcp_pcb *pcb, struct http_state *hs)
{
 8004c1a:	b5b0      	push	{r4, r5, r7, lr}
 8004c1c:	b084      	sub	sp, #16
 8004c1e:	af00      	add	r7, sp, #0
 8004c20:	6078      	str	r0, [r7, #4]
 8004c22:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u16_t mss;
  u8_t data_to_send = 0;
 8004c24:	230f      	movs	r3, #15
 8004c26:	18fb      	adds	r3, r7, r3
 8004c28:	2200      	movs	r2, #0
 8004c2a:	701a      	strb	r2, [r3, #0]
  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */

  /* We cannot send more data than space available in the send
     buffer. */
  if (tcp_sndbuf(pcb) < hs->left) {
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2266      	movs	r2, #102	; 0x66
 8004c30:	5a9b      	ldrh	r3, [r3, r2]
 8004c32:	001a      	movs	r2, r3
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d206      	bcs.n	8004c4a <http_send_data_nonssi+0x30>
    len = tcp_sndbuf(pcb);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2266      	movs	r2, #102	; 0x66
 8004c40:	5a9a      	ldrh	r2, [r3, r2]
 8004c42:	2308      	movs	r3, #8
 8004c44:	18fb      	adds	r3, r7, r3
 8004c46:	801a      	strh	r2, [r3, #0]
 8004c48:	e005      	b.n	8004c56 <http_send_data_nonssi+0x3c>
  } else {
    len = (u16_t)hs->left;
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c4e:	b29a      	uxth	r2, r3
 8004c50:	2308      	movs	r3, #8
 8004c52:	18fb      	adds	r3, r7, r3
 8004c54:	801a      	strh	r2, [r3, #0]
    LWIP_ASSERT("hs->left did not fit into u16_t!", (len == hs->left));
  }
  mss = tcp_mss(pcb);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	7f9b      	ldrb	r3, [r3, #30]
 8004c5a:	001a      	movs	r2, r3
 8004c5c:	2308      	movs	r3, #8
 8004c5e:	4013      	ands	r3, r2
 8004c60:	d004      	beq.n	8004c6c <http_send_data_nonssi+0x52>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c66:	3b0c      	subs	r3, #12
 8004c68:	b29b      	uxth	r3, r3
 8004c6a:	e001      	b.n	8004c70 <http_send_data_nonssi+0x56>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c70:	210c      	movs	r1, #12
 8004c72:	187a      	adds	r2, r7, r1
 8004c74:	8013      	strh	r3, [r2, #0]
  if (len > (2 * mss)) {
 8004c76:	2308      	movs	r3, #8
 8004c78:	18fb      	adds	r3, r7, r3
 8004c7a:	881b      	ldrh	r3, [r3, #0]
 8004c7c:	001a      	movs	r2, r3
 8004c7e:	187b      	adds	r3, r7, r1
 8004c80:	881b      	ldrh	r3, [r3, #0]
 8004c82:	005b      	lsls	r3, r3, #1
 8004c84:	429a      	cmp	r2, r3
 8004c86:	dd07      	ble.n	8004c98 <http_send_data_nonssi+0x7e>
    len = 2 * mss;
 8004c88:	230c      	movs	r3, #12
 8004c8a:	18fb      	adds	r3, r7, r3
 8004c8c:	881b      	ldrh	r3, [r3, #0]
 8004c8e:	18db      	adds	r3, r3, r3
 8004c90:	b29a      	uxth	r2, r3
 8004c92:	2308      	movs	r3, #8
 8004c94:	18fb      	adds	r3, r7, r3
 8004c96:	801a      	strh	r2, [r3, #0]
  }

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	6999      	ldr	r1, [r3, #24]
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca0:	1e5a      	subs	r2, r3, #1
 8004ca2:	4193      	sbcs	r3, r2
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	250b      	movs	r5, #11
 8004ca8:	197c      	adds	r4, r7, r5
 8004caa:	2208      	movs	r2, #8
 8004cac:	18ba      	adds	r2, r7, r2
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f7ff fde1 	bl	8004876 <http_write>
 8004cb4:	0003      	movs	r3, r0
 8004cb6:	7023      	strb	r3, [r4, #0]
  if (err == ERR_OK) {
 8004cb8:	197b      	adds	r3, r7, r5
 8004cba:	781b      	ldrb	r3, [r3, #0]
 8004cbc:	b25b      	sxtb	r3, r3
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d112      	bne.n	8004ce8 <http_send_data_nonssi+0xce>
    data_to_send = 1;
 8004cc2:	230f      	movs	r3, #15
 8004cc4:	18fb      	adds	r3, r7, r3
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	701a      	strb	r2, [r3, #0]
    hs->file += len;
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	699b      	ldr	r3, [r3, #24]
 8004cce:	2108      	movs	r1, #8
 8004cd0:	187a      	adds	r2, r7, r1
 8004cd2:	8812      	ldrh	r2, [r2, #0]
 8004cd4:	189a      	adds	r2, r3, r2
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cde:	187a      	adds	r2, r7, r1
 8004ce0:	8812      	ldrh	r2, [r2, #0]
 8004ce2:	1a9a      	subs	r2, r3, r2
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	625a      	str	r2, [r3, #36]	; 0x24
  }

  return data_to_send;
 8004ce8:	230f      	movs	r3, #15
 8004cea:	18fb      	adds	r3, r7, r3
 8004cec:	781b      	ldrb	r3, [r3, #0]
}
 8004cee:	0018      	movs	r0, r3
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	b004      	add	sp, #16
 8004cf4:	bdb0      	pop	{r4, r5, r7, pc}
	...

08004cf8 <http_send_data_ssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_ssi(struct tcp_pcb *pcb, struct http_state *hs)
{
 8004cf8:	b5b0      	push	{r4, r5, r7, lr}
 8004cfa:	b086      	sub	sp, #24
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	6039      	str	r1, [r7, #0]
  err_t err = ERR_OK;
 8004d02:	2317      	movs	r3, #23
 8004d04:	18fb      	adds	r3, r7, r3
 8004d06:	2200      	movs	r2, #0
 8004d08:	701a      	strb	r2, [r3, #0]
  u16_t len;
  u16_t mss;
  u8_t data_to_send = 0;
 8004d0a:	2316      	movs	r3, #22
 8004d0c:	18fb      	adds	r3, r7, r3
 8004d0e:	2200      	movs	r2, #0
 8004d10:	701a      	strb	r2, [r3, #0]

  struct http_ssi_state *ssi = hs->ssi;
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d16:	613b      	str	r3, [r7, #16]
   * them with insert strings. We need to be careful here since a tag may
   * straddle the boundary of two blocks read from the file and we may also
   * have to split the insert string between two tcp_write operations. */

  /* How much data could we send? */
  len = tcp_sndbuf(pcb);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2266      	movs	r2, #102	; 0x66
 8004d1c:	5a9a      	ldrh	r2, [r3, r2]
 8004d1e:	230c      	movs	r3, #12
 8004d20:	18fb      	adds	r3, r7, r3
 8004d22:	801a      	strh	r2, [r3, #0]

  /* Do we have remaining data to send before parsing more? */
  if(ssi->parsed > hs->file) {
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	699b      	ldr	r3, [r3, #24]
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d800      	bhi.n	8004d32 <http_send_data_ssi+0x3a>
 8004d30:	e2ce      	b.n	80052d0 <http_send_data_ssi+0x5d8>
    /* We cannot send more data than space available in the send
       buffer. */
    if (tcp_sndbuf(pcb) < (ssi->parsed - hs->file)) {
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2266      	movs	r2, #102	; 0x66
 8004d36:	5a9b      	ldrh	r3, [r3, r2]
 8004d38:	001a      	movs	r2, r3
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	0019      	movs	r1, r3
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	699b      	ldr	r3, [r3, #24]
 8004d44:	1acb      	subs	r3, r1, r3
 8004d46:	429a      	cmp	r2, r3
 8004d48:	da06      	bge.n	8004d58 <http_send_data_ssi+0x60>
      len = tcp_sndbuf(pcb);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2266      	movs	r2, #102	; 0x66
 8004d4e:	5a9a      	ldrh	r2, [r3, r2]
 8004d50:	230c      	movs	r3, #12
 8004d52:	18fb      	adds	r3, r7, r3
 8004d54:	801a      	strh	r2, [r3, #0]
 8004d56:	e009      	b.n	8004d6c <http_send_data_ssi+0x74>
    } else {
      LWIP_ASSERT("Data size does not fit into u16_t!",
                  (ssi->parsed - hs->file) <= 0xffff);
      len = (u16_t)(ssi->parsed - hs->file);
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	001a      	movs	r2, r3
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	699b      	ldr	r3, [r3, #24]
 8004d62:	1ad3      	subs	r3, r2, r3
 8004d64:	b29a      	uxth	r2, r3
 8004d66:	230c      	movs	r3, #12
 8004d68:	18fb      	adds	r3, r7, r3
 8004d6a:	801a      	strh	r2, [r3, #0]
    }
    mss = tcp_mss(pcb);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	7f9b      	ldrb	r3, [r3, #30]
 8004d70:	001a      	movs	r2, r3
 8004d72:	2308      	movs	r3, #8
 8004d74:	4013      	ands	r3, r2
 8004d76:	d004      	beq.n	8004d82 <http_send_data_ssi+0x8a>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d7c:	3b0c      	subs	r3, #12
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	e001      	b.n	8004d86 <http_send_data_ssi+0x8e>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d86:	210e      	movs	r1, #14
 8004d88:	187a      	adds	r2, r7, r1
 8004d8a:	8013      	strh	r3, [r2, #0]
    if(len > (2 * mss)) {
 8004d8c:	230c      	movs	r3, #12
 8004d8e:	18fb      	adds	r3, r7, r3
 8004d90:	881b      	ldrh	r3, [r3, #0]
 8004d92:	001a      	movs	r2, r3
 8004d94:	187b      	adds	r3, r7, r1
 8004d96:	881b      	ldrh	r3, [r3, #0]
 8004d98:	005b      	lsls	r3, r3, #1
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	dd07      	ble.n	8004dae <http_send_data_ssi+0xb6>
      len = 2 * mss;
 8004d9e:	230e      	movs	r3, #14
 8004da0:	18fb      	adds	r3, r7, r3
 8004da2:	881b      	ldrh	r3, [r3, #0]
 8004da4:	18db      	adds	r3, r3, r3
 8004da6:	b29a      	uxth	r2, r3
 8004da8:	230c      	movs	r3, #12
 8004daa:	18fb      	adds	r3, r7, r3
 8004dac:	801a      	strh	r2, [r3, #0]
    }

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	6999      	ldr	r1, [r3, #24]
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004db6:	1e5a      	subs	r2, r3, #1
 8004db8:	4193      	sbcs	r3, r2
 8004dba:	b2db      	uxtb	r3, r3
 8004dbc:	2517      	movs	r5, #23
 8004dbe:	197c      	adds	r4, r7, r5
 8004dc0:	220c      	movs	r2, #12
 8004dc2:	18ba      	adds	r2, r7, r2
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	f7ff fd56 	bl	8004876 <http_write>
 8004dca:	0003      	movs	r3, r0
 8004dcc:	7023      	strb	r3, [r4, #0]
    if (err == ERR_OK) {
 8004dce:	197b      	adds	r3, r7, r5
 8004dd0:	781b      	ldrb	r3, [r3, #0]
 8004dd2:	b25b      	sxtb	r3, r3
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d112      	bne.n	8004dfe <http_send_data_ssi+0x106>
      data_to_send = 1;
 8004dd8:	2316      	movs	r3, #22
 8004dda:	18fb      	adds	r3, r7, r3
 8004ddc:	2201      	movs	r2, #1
 8004dde:	701a      	strb	r2, [r3, #0]
      hs->file += len;
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	699b      	ldr	r3, [r3, #24]
 8004de4:	210c      	movs	r1, #12
 8004de6:	187a      	adds	r2, r7, r1
 8004de8:	8812      	ldrh	r2, [r2, #0]
 8004dea:	189a      	adds	r2, r3, r2
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	619a      	str	r2, [r3, #24]
      hs->left -= len;
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df4:	187a      	adds	r2, r7, r1
 8004df6:	8812      	ldrh	r2, [r2, #0]
 8004df8:	1a9a      	subs	r2, r3, r2
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* If the send buffer is full, return now. */
    if(tcp_sndbuf(pcb) == 0) {
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2266      	movs	r2, #102	; 0x66
 8004e02:	5a9b      	ldrh	r3, [r3, r2]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d000      	beq.n	8004e0a <http_send_data_ssi+0x112>
 8004e08:	e262      	b.n	80052d0 <http_send_data_ssi+0x5d8>
      return data_to_send;
 8004e0a:	2316      	movs	r3, #22
 8004e0c:	18fb      	adds	r3, r7, r3
 8004e0e:	781b      	ldrb	r3, [r3, #0]
 8004e10:	e2e8      	b.n	80053e4 <http_send_data_ssi+0x6ec>

  /* We have sent all the data that was already parsed so continue parsing
   * the buffer contents looking for SSI tags. */
  while((ssi->parse_left) && (err == ERR_OK)) {
    /* @todo: somewhere in this loop, 'len' should grow again... */
    if (len == 0) {
 8004e12:	230c      	movs	r3, #12
 8004e14:	18fb      	adds	r3, r7, r3
 8004e16:	881b      	ldrh	r3, [r3, #0]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d103      	bne.n	8004e24 <http_send_data_ssi+0x12c>
      return data_to_send;
 8004e1c:	2316      	movs	r3, #22
 8004e1e:	18fb      	adds	r3, r7, r3
 8004e20:	781b      	ldrb	r3, [r3, #0]
 8004e22:	e2df      	b.n	80053e4 <http_send_data_ssi+0x6ec>
    }
    switch(ssi->tag_state) {
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	22db      	movs	r2, #219	; 0xdb
 8004e28:	5c9b      	ldrb	r3, [r3, r2]
 8004e2a:	2117      	movs	r1, #23
 8004e2c:	187a      	adds	r2, r7, r1
 8004e2e:	1879      	adds	r1, r7, r1
 8004e30:	7809      	ldrb	r1, [r1, #0]
 8004e32:	7011      	strb	r1, [r2, #0]
 8004e34:	2116      	movs	r1, #22
 8004e36:	187a      	adds	r2, r7, r1
 8004e38:	1879      	adds	r1, r7, r1
 8004e3a:	7809      	ldrb	r1, [r1, #0]
 8004e3c:	7011      	strb	r1, [r2, #0]
 8004e3e:	2b04      	cmp	r3, #4
 8004e40:	d900      	bls.n	8004e44 <http_send_data_ssi+0x14c>
 8004e42:	e245      	b.n	80052d0 <http_send_data_ssi+0x5d8>
 8004e44:	009a      	lsls	r2, r3, #2
 8004e46:	4bd4      	ldr	r3, [pc, #848]	; (8005198 <http_send_data_ssi+0x4a0>)
 8004e48:	18d3      	adds	r3, r2, r3
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	469f      	mov	pc, r3
      case TAG_NONE:
        /* We are not currently processing an SSI tag so scan for the
         * start of the lead-in marker. */
        if(*ssi->parsed == g_pcTagLeadIn[0]) {
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	781a      	ldrb	r2, [r3, #0]
 8004e54:	4bd1      	ldr	r3, [pc, #836]	; (800519c <http_send_data_ssi+0x4a4>)
 8004e56:	781b      	ldrb	r3, [r3, #0]
 8004e58:	429a      	cmp	r2, r3
 8004e5a:	d106      	bne.n	8004e6a <http_send_data_ssi+0x172>
          /* We found what could be the lead-in for a new tag so change
           * state appropriately. */
          ssi->tag_state = TAG_LEADIN;
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	22db      	movs	r2, #219	; 0xdb
 8004e60:	2101      	movs	r1, #1
 8004e62:	5499      	strb	r1, [r3, r2]
          ssi->tag_index = 1;
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	2201      	movs	r2, #1
 8004e68:	819a      	strh	r2, [r3, #12]
          ssi->tag_started = ssi->parsed;
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG */
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	1e5a      	subs	r2, r3, #1
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	609a      	str	r2, [r3, #8]
        ssi->parsed++;
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	1c5a      	adds	r2, r3, #1
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	601a      	str	r2, [r3, #0]
 8004e7e:	2217      	movs	r2, #23
 8004e80:	18bb      	adds	r3, r7, r2
 8004e82:	18ba      	adds	r2, r7, r2
 8004e84:	7812      	ldrb	r2, [r2, #0]
 8004e86:	701a      	strb	r2, [r3, #0]
 8004e88:	2216      	movs	r2, #22
 8004e8a:	18bb      	adds	r3, r7, r2
 8004e8c:	18ba      	adds	r2, r7, r2
 8004e8e:	7812      	ldrb	r2, [r2, #0]
 8004e90:	701a      	strb	r2, [r3, #0]
        break;
 8004e92:	e21d      	b.n	80052d0 <http_send_data_ssi+0x5d8>
      case TAG_LEADIN:
        /* We are processing the lead-in marker, looking for the start of
         * the tag name. */

        /* Have we reached the end of the leadin? */
        if(ssi->tag_index == LEN_TAG_LEAD_IN) {
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	899b      	ldrh	r3, [r3, #12]
 8004e98:	2b05      	cmp	r3, #5
 8004e9a:	d107      	bne.n	8004eac <http_send_data_ssi+0x1b4>
          ssi->tag_index = 0;
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	819a      	strh	r2, [r3, #12]
          ssi->tag_state = TAG_FOUND;
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	22db      	movs	r2, #219	; 0xdb
 8004ea6:	2102      	movs	r1, #2
 8004ea8:	5499      	strb	r1, [r3, r2]
 8004eaa:	e01e      	b.n	8004eea <http_send_data_ssi+0x1f2>
        } else {
          /* Have we found the next character we expect for the tag leadin? */
          if(*ssi->parsed == g_pcTagLeadIn[ssi->tag_index]) {
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	781a      	ldrb	r2, [r3, #0]
 8004eb2:	4bba      	ldr	r3, [pc, #744]	; (800519c <http_send_data_ssi+0x4a4>)
 8004eb4:	6939      	ldr	r1, [r7, #16]
 8004eb6:	8989      	ldrh	r1, [r1, #12]
 8004eb8:	185b      	adds	r3, r3, r1
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d106      	bne.n	8004ece <http_send_data_ssi+0x1d6>
            /* Yes - move to the next one unless we have found the complete
             * leadin, in which case we start looking for the tag itself */
            ssi->tag_index++;
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	899b      	ldrh	r3, [r3, #12]
 8004ec4:	3301      	adds	r3, #1
 8004ec6:	b29a      	uxth	r2, r3
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	819a      	strh	r2, [r3, #12]
 8004ecc:	e003      	b.n	8004ed6 <http_send_data_ssi+0x1de>
          } else {
            /* We found an unexpected character so this is not a tag. Move
             * back to idle state. */
            ssi->tag_state = TAG_NONE;
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	22db      	movs	r2, #219	; 0xdb
 8004ed2:	2100      	movs	r1, #0
 8004ed4:	5499      	strb	r1, [r3, r2]
          }

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	1e5a      	subs	r2, r3, #1
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	1c5a      	adds	r2, r3, #1
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	601a      	str	r2, [r3, #0]
 8004eea:	2217      	movs	r2, #23
 8004eec:	18bb      	adds	r3, r7, r2
 8004eee:	18ba      	adds	r2, r7, r2
 8004ef0:	7812      	ldrb	r2, [r2, #0]
 8004ef2:	701a      	strb	r2, [r3, #0]
 8004ef4:	2216      	movs	r2, #22
 8004ef6:	18bb      	adds	r3, r7, r2
 8004ef8:	18ba      	adds	r2, r7, r2
 8004efa:	7812      	ldrb	r2, [r2, #0]
 8004efc:	701a      	strb	r2, [r3, #0]
        }
        break;
 8004efe:	e1e7      	b.n	80052d0 <http_send_data_ssi+0x5d8>
        /* We are reading the tag name, looking for the start of the
         * lead-out marker and removing any whitespace found. */

        /* Remove leading whitespace between the tag leading and the first
         * tag name character. */
        if((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	899b      	ldrh	r3, [r3, #12]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d128      	bne.n	8004f5a <http_send_data_ssi+0x262>
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	781b      	ldrb	r3, [r3, #0]
 8004f0e:	2b20      	cmp	r3, #32
 8004f10:	d00e      	beq.n	8004f30 <http_send_data_ssi+0x238>
           (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	781b      	ldrb	r3, [r3, #0]
        if((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8004f18:	2b09      	cmp	r3, #9
 8004f1a:	d009      	beq.n	8004f30 <http_send_data_ssi+0x238>
           (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	781b      	ldrb	r3, [r3, #0]
 8004f22:	2b0a      	cmp	r3, #10
 8004f24:	d004      	beq.n	8004f30 <http_send_data_ssi+0x238>
           (*ssi->parsed == '\r'))) {
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	781b      	ldrb	r3, [r3, #0]
           (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8004f2c:	2b0d      	cmp	r3, #13
 8004f2e:	d114      	bne.n	8004f5a <http_send_data_ssi+0x262>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	1e5a      	subs	r2, r3, #1
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	1c5a      	adds	r2, r3, #1
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	601a      	str	r2, [r3, #0]
 8004f44:	2217      	movs	r2, #23
 8004f46:	18bb      	adds	r3, r7, r2
 8004f48:	18ba      	adds	r2, r7, r2
 8004f4a:	7812      	ldrb	r2, [r2, #0]
 8004f4c:	701a      	strb	r2, [r3, #0]
 8004f4e:	2216      	movs	r2, #22
 8004f50:	18bb      	adds	r3, r7, r2
 8004f52:	18ba      	adds	r2, r7, r2
 8004f54:	7812      	ldrb	r2, [r2, #0]
 8004f56:	701a      	strb	r2, [r3, #0]
          break;
 8004f58:	e1ba      	b.n	80052d0 <http_send_data_ssi+0x5d8>
        }

        /* Have we found the end of the tag name? This is signalled by
         * us finding the first leadout character or whitespace */
        if((*ssi->parsed == g_pcTagLeadOut[0]) ||
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	781a      	ldrb	r2, [r3, #0]
 8004f60:	4b8f      	ldr	r3, [pc, #572]	; (80051a0 <http_send_data_ssi+0x4a8>)
 8004f62:	781b      	ldrb	r3, [r3, #0]
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d013      	beq.n	8004f90 <http_send_data_ssi+0x298>
           (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	781b      	ldrb	r3, [r3, #0]
        if((*ssi->parsed == g_pcTagLeadOut[0]) ||
 8004f6e:	2b20      	cmp	r3, #32
 8004f70:	d00e      	beq.n	8004f90 <http_send_data_ssi+0x298>
           (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	781b      	ldrb	r3, [r3, #0]
 8004f78:	2b09      	cmp	r3, #9
 8004f7a:	d009      	beq.n	8004f90 <http_send_data_ssi+0x298>
           (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	781b      	ldrb	r3, [r3, #0]
           (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 8004f82:	2b0a      	cmp	r3, #10
 8004f84:	d004      	beq.n	8004f90 <http_send_data_ssi+0x298>
           (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	781b      	ldrb	r3, [r3, #0]
 8004f8c:	2b0d      	cmp	r3, #13
 8004f8e:	d127      	bne.n	8004fe0 <http_send_data_ssi+0x2e8>

          if(ssi->tag_index == 0) {
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	899b      	ldrh	r3, [r3, #12]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d104      	bne.n	8004fa2 <http_send_data_ssi+0x2aa>
            /* We read a zero length tag so ignore it. */
            ssi->tag_state = TAG_NONE;
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	22db      	movs	r2, #219	; 0xdb
 8004f9c:	2100      	movs	r1, #0
 8004f9e:	5499      	strb	r1, [r3, r2]
          if(ssi->tag_index == 0) {
 8004fa0:	e034      	b.n	800500c <http_send_data_ssi+0x314>
          } else {
            /* We read a non-empty tag so go ahead and look for the
             * leadout string. */
            ssi->tag_state = TAG_LEADOUT;
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	22db      	movs	r2, #219	; 0xdb
 8004fa6:	2103      	movs	r1, #3
 8004fa8:	5499      	strb	r1, [r3, r2]
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
            ssi->tag_name_len = (u8_t)ssi->tag_index;
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	899b      	ldrh	r3, [r3, #12]
 8004fae:	b2da      	uxtb	r2, r3
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	741a      	strb	r2, [r3, #16]
            ssi->tag_name[ssi->tag_index] = '\0';
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	899b      	ldrh	r3, [r3, #12]
 8004fb8:	001a      	movs	r2, r3
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	189b      	adds	r3, r3, r2
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	745a      	strb	r2, [r3, #17]
            if(*ssi->parsed == g_pcTagLeadOut[0]) {
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	781a      	ldrb	r2, [r3, #0]
 8004fc8:	4b75      	ldr	r3, [pc, #468]	; (80051a0 <http_send_data_ssi+0x4a8>)
 8004fca:	781b      	ldrb	r3, [r3, #0]
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d103      	bne.n	8004fd8 <http_send_data_ssi+0x2e0>
              ssi->tag_index = 1;
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	819a      	strh	r2, [r3, #12]
          if(ssi->tag_index == 0) {
 8004fd6:	e019      	b.n	800500c <http_send_data_ssi+0x314>
            } else {
              ssi->tag_index = 0;
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	819a      	strh	r2, [r3, #12]
          if(ssi->tag_index == 0) {
 8004fde:	e015      	b.n	800500c <http_send_data_ssi+0x314>
            }
          }
        } else {
          /* This character is part of the tag name so save it */
          if(ssi->tag_index < LWIP_HTTPD_MAX_TAG_NAME_LEN) {
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	899b      	ldrh	r3, [r3, #12]
 8004fe4:	2b07      	cmp	r3, #7
 8004fe6:	d80d      	bhi.n	8005004 <http_send_data_ssi+0x30c>
            ssi->tag_name[ssi->tag_index++] = *ssi->parsed;
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	899b      	ldrh	r3, [r3, #12]
 8004ff0:	1c59      	adds	r1, r3, #1
 8004ff2:	b288      	uxth	r0, r1
 8004ff4:	6939      	ldr	r1, [r7, #16]
 8004ff6:	8188      	strh	r0, [r1, #12]
 8004ff8:	0019      	movs	r1, r3
 8004ffa:	7812      	ldrb	r2, [r2, #0]
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	185b      	adds	r3, r3, r1
 8005000:	745a      	strb	r2, [r3, #17]
 8005002:	e003      	b.n	800500c <http_send_data_ssi+0x314>
          } else {
            /* The tag was too long so ignore it. */
            ssi->tag_state = TAG_NONE;
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	22db      	movs	r2, #219	; 0xdb
 8005008:	2100      	movs	r1, #0
 800500a:	5499      	strb	r1, [r3, r2]
          }
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	1e5a      	subs	r2, r3, #1
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	609a      	str	r2, [r3, #8]
        ssi->parsed++;
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	1c5a      	adds	r2, r3, #1
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	601a      	str	r2, [r3, #0]
 8005020:	2217      	movs	r2, #23
 8005022:	18bb      	adds	r3, r7, r2
 8005024:	18ba      	adds	r2, r7, r2
 8005026:	7812      	ldrb	r2, [r2, #0]
 8005028:	701a      	strb	r2, [r3, #0]
 800502a:	2216      	movs	r2, #22
 800502c:	18bb      	adds	r3, r7, r2
 800502e:	18ba      	adds	r2, r7, r2
 8005030:	7812      	ldrb	r2, [r2, #0]
 8005032:	701a      	strb	r2, [r3, #0]

        break;
 8005034:	e14c      	b.n	80052d0 <http_send_data_ssi+0x5d8>

      /* We are looking for the end of the lead-out marker. */
      case TAG_LEADOUT:
        /* Remove leading whitespace between the tag leading and the first
         * tag leadout character. */
        if((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	899b      	ldrh	r3, [r3, #12]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d128      	bne.n	8005090 <http_send_data_ssi+0x398>
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	781b      	ldrb	r3, [r3, #0]
 8005044:	2b20      	cmp	r3, #32
 8005046:	d00e      	beq.n	8005066 <http_send_data_ssi+0x36e>
           (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	781b      	ldrb	r3, [r3, #0]
        if((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 800504e:	2b09      	cmp	r3, #9
 8005050:	d009      	beq.n	8005066 <http_send_data_ssi+0x36e>
           (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	781b      	ldrb	r3, [r3, #0]
 8005058:	2b0a      	cmp	r3, #10
 800505a:	d004      	beq.n	8005066 <http_send_data_ssi+0x36e>
           (*ssi->parsed == '\r'))) {
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	781b      	ldrb	r3, [r3, #0]
           (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8005062:	2b0d      	cmp	r3, #13
 8005064:	d114      	bne.n	8005090 <http_send_data_ssi+0x398>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	1e5a      	subs	r2, r3, #1
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	1c5a      	adds	r2, r3, #1
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	601a      	str	r2, [r3, #0]
 800507a:	2217      	movs	r2, #23
 800507c:	18bb      	adds	r3, r7, r2
 800507e:	18ba      	adds	r2, r7, r2
 8005080:	7812      	ldrb	r2, [r2, #0]
 8005082:	701a      	strb	r2, [r3, #0]
 8005084:	2216      	movs	r2, #22
 8005086:	18bb      	adds	r3, r7, r2
 8005088:	18ba      	adds	r2, r7, r2
 800508a:	7812      	ldrb	r2, [r2, #0]
 800508c:	701a      	strb	r2, [r3, #0]
          break;
 800508e:	e11f      	b.n	80052d0 <http_send_data_ssi+0x5d8>
        }

        /* Have we found the next character we expect for the tag leadout? */
        if(*ssi->parsed == g_pcTagLeadOut[ssi->tag_index]) {
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	781a      	ldrb	r2, [r3, #0]
 8005096:	4b42      	ldr	r3, [pc, #264]	; (80051a0 <http_send_data_ssi+0x4a8>)
 8005098:	6939      	ldr	r1, [r7, #16]
 800509a:	8989      	ldrh	r1, [r1, #12]
 800509c:	185b      	adds	r3, r3, r1
 800509e:	781b      	ldrb	r3, [r3, #0]
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d16a      	bne.n	800517a <http_send_data_ssi+0x482>
          /* Yes - move to the next one unless we have found the complete
           * leadout, in which case we need to call the client to process
           * the tag. */

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	1e5a      	subs	r2, r3, #1
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	1c5a      	adds	r2, r3, #1
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	601a      	str	r2, [r3, #0]

          if(ssi->tag_index == (LEN_TAG_LEAD_OUT - 1)) {
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	899b      	ldrh	r3, [r3, #12]
 80050bc:	2b02      	cmp	r3, #2
 80050be:	d155      	bne.n	800516c <http_send_data_ssi+0x474>
            /* Call the client to ask for the insert string for the
             * tag we just found. */
#if LWIP_HTTPD_SSI_MULTIPART
            ssi->tag_part = 0; /* start with tag part 0 */
#endif /* LWIP_HTTPD_SSI_MULTIPART */
            get_tag_insert(hs);
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	0018      	movs	r0, r3
 80050c4:	f7ff fd00 	bl	8004ac8 <get_tag_insert>

            /* Next time through, we are going to be sending data
             * immediately, either the end of the block we start
             * sending here or the insert string. */
            ssi->tag_index = 0;
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	2200      	movs	r2, #0
 80050cc:	819a      	strh	r2, [r3, #12]
            ssi->tag_state = TAG_SENDING;
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	22db      	movs	r2, #219	; 0xdb
 80050d2:	2104      	movs	r1, #4
 80050d4:	5499      	strb	r1, [r3, r2]
            ssi->tag_end = ssi->parsed;
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	605a      	str	r2, [r3, #4]
            ssi->parsed = ssi->tag_started;
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/

            /* If there is any unsent data in the buffer prior to the
             * tag, we need to send it now. */
            if (ssi->tag_end > hs->file) {
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	685a      	ldr	r2, [r3, #4]
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	699b      	ldr	r3, [r3, #24]
 80050e6:	429a      	cmp	r2, r3
 80050e8:	d800      	bhi.n	80050ec <http_send_data_ssi+0x3f4>
 80050ea:	e0f1      	b.n	80052d0 <http_send_data_ssi+0x5d8>
              /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
              if(len > ssi->tag_end - hs->file) {
 80050ec:	230c      	movs	r3, #12
 80050ee:	18fb      	adds	r3, r7, r3
 80050f0:	881b      	ldrh	r3, [r3, #0]
 80050f2:	001a      	movs	r2, r3
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	0019      	movs	r1, r3
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	699b      	ldr	r3, [r3, #24]
 80050fe:	1acb      	subs	r3, r1, r3
 8005100:	429a      	cmp	r2, r3
 8005102:	dd09      	ble.n	8005118 <http_send_data_ssi+0x420>
                len = (u16_t)(ssi->tag_end - hs->file);
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	001a      	movs	r2, r3
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	699b      	ldr	r3, [r3, #24]
 800510e:	1ad3      	subs	r3, r2, r3
 8005110:	b29a      	uxth	r2, r3
 8005112:	230c      	movs	r3, #12
 8005114:	18fb      	adds	r3, r7, r3
 8005116:	801a      	strh	r2, [r3, #0]
                /* we would include the tag in sending */
                len = (u16_t)(ssi->tag_started - hs->file);
              }
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/

              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	6999      	ldr	r1, [r3, #24]
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005120:	1e5a      	subs	r2, r3, #1
 8005122:	4193      	sbcs	r3, r2
 8005124:	b2db      	uxtb	r3, r3
 8005126:	2517      	movs	r5, #23
 8005128:	197c      	adds	r4, r7, r5
 800512a:	220c      	movs	r2, #12
 800512c:	18ba      	adds	r2, r7, r2
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f7ff fba1 	bl	8004876 <http_write>
 8005134:	0003      	movs	r3, r0
 8005136:	7023      	strb	r3, [r4, #0]
              if (err == ERR_OK) {
 8005138:	197b      	adds	r3, r7, r5
 800513a:	781b      	ldrb	r3, [r3, #0]
 800513c:	b25b      	sxtb	r3, r3
 800513e:	2b00      	cmp	r3, #0
 8005140:	d000      	beq.n	8005144 <http_send_data_ssi+0x44c>
 8005142:	e0c5      	b.n	80052d0 <http_send_data_ssi+0x5d8>
                data_to_send = 1;
 8005144:	2316      	movs	r3, #22
 8005146:	18fb      	adds	r3, r7, r3
 8005148:	2201      	movs	r2, #1
 800514a:	701a      	strb	r2, [r3, #0]
                if(ssi->tag_started <= hs->file) {
                  /* pretend to have sent the tag, too */
                  len += ssi->tag_end - ssi->tag_started;
                }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
                hs->file += len;
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	699b      	ldr	r3, [r3, #24]
 8005150:	210c      	movs	r1, #12
 8005152:	187a      	adds	r2, r7, r1
 8005154:	8812      	ldrh	r2, [r2, #0]
 8005156:	189a      	adds	r2, r3, r2
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	619a      	str	r2, [r3, #24]
                hs->left -= len;
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005160:	187a      	adds	r2, r7, r1
 8005162:	8812      	ldrh	r2, [r2, #0]
 8005164:	1a9a      	subs	r2, r3, r2
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	625a      	str	r2, [r3, #36]	; 0x24
 800516a:	e0b1      	b.n	80052d0 <http_send_data_ssi+0x5d8>
              }
            }
          } else {
            ssi->tag_index++;
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	899b      	ldrh	r3, [r3, #12]
 8005170:	3301      	adds	r3, #1
 8005172:	b29a      	uxth	r2, r3
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	819a      	strh	r2, [r3, #12]
 8005178:	e0aa      	b.n	80052d0 <http_send_data_ssi+0x5d8>
          }
        } else {
          /* We found an unexpected character so this is not a tag. Move
           * back to idle state. */
          ssi->parse_left--;
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	1e5a      	subs	r2, r3, #1
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	1c5a      	adds	r2, r3, #1
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	601a      	str	r2, [r3, #0]
          ssi->tag_state = TAG_NONE;
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	22db      	movs	r2, #219	; 0xdb
 8005192:	2100      	movs	r1, #0
 8005194:	5499      	strb	r1, [r3, r2]
        }
        break;
 8005196:	e09b      	b.n	80052d0 <http_send_data_ssi+0x5d8>
 8005198:	0801c99c 	.word	0x0801c99c
 800519c:	080129a8 	.word	0x080129a8
 80051a0:	080129b0 	.word	0x080129b0
       * from the file prior to the insert point or the insert string itself.
       */
      case TAG_SENDING:
        /* Do we have any remaining file data to send from the buffer prior
         * to the tag? */
        if(ssi->tag_end > hs->file) {
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	685a      	ldr	r2, [r3, #4]
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	699b      	ldr	r3, [r3, #24]
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d949      	bls.n	8005244 <http_send_data_ssi+0x54c>
          /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
          if(len > ssi->tag_end - hs->file) {
 80051b0:	230c      	movs	r3, #12
 80051b2:	18fb      	adds	r3, r7, r3
 80051b4:	881b      	ldrh	r3, [r3, #0]
 80051b6:	001a      	movs	r2, r3
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	0019      	movs	r1, r3
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	699b      	ldr	r3, [r3, #24]
 80051c2:	1acb      	subs	r3, r1, r3
 80051c4:	429a      	cmp	r2, r3
 80051c6:	dd09      	ble.n	80051dc <http_send_data_ssi+0x4e4>
            len = (u16_t)(ssi->tag_end - hs->file);
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	001a      	movs	r2, r3
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	699b      	ldr	r3, [r3, #24]
 80051d2:	1ad3      	subs	r3, r2, r3
 80051d4:	b29a      	uxth	r2, r3
 80051d6:	230c      	movs	r3, #12
 80051d8:	18fb      	adds	r3, r7, r3
 80051da:	801a      	strh	r2, [r3, #0]
          if (len > ssi->tag_started - hs->file) {
            /* we would include the tag in sending */
            len = (u16_t)(ssi->tag_started - hs->file);
          }
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
          if (len != 0) {
 80051dc:	230c      	movs	r3, #12
 80051de:	18fb      	adds	r3, r7, r3
 80051e0:	881b      	ldrh	r3, [r3, #0]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d010      	beq.n	8005208 <http_send_data_ssi+0x510>
            err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	6999      	ldr	r1, [r3, #24]
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ee:	1e5a      	subs	r2, r3, #1
 80051f0:	4193      	sbcs	r3, r2
 80051f2:	b2db      	uxtb	r3, r3
 80051f4:	2217      	movs	r2, #23
 80051f6:	18bc      	adds	r4, r7, r2
 80051f8:	220c      	movs	r2, #12
 80051fa:	18ba      	adds	r2, r7, r2
 80051fc:	6878      	ldr	r0, [r7, #4]
 80051fe:	f7ff fb3a 	bl	8004876 <http_write>
 8005202:	0003      	movs	r3, r0
 8005204:	7023      	strb	r3, [r4, #0]
 8005206:	e003      	b.n	8005210 <http_send_data_ssi+0x518>
          } else {
            err = ERR_OK;
 8005208:	2317      	movs	r3, #23
 800520a:	18fb      	adds	r3, r7, r3
 800520c:	2200      	movs	r2, #0
 800520e:	701a      	strb	r2, [r3, #0]
          }
          if (err == ERR_OK) {
 8005210:	2317      	movs	r3, #23
 8005212:	18fb      	adds	r3, r7, r3
 8005214:	781b      	ldrb	r3, [r3, #0]
 8005216:	b25b      	sxtb	r3, r3
 8005218:	2b00      	cmp	r3, #0
 800521a:	d159      	bne.n	80052d0 <http_send_data_ssi+0x5d8>
            data_to_send = 1;
 800521c:	2316      	movs	r3, #22
 800521e:	18fb      	adds	r3, r7, r3
 8005220:	2201      	movs	r2, #1
 8005222:	701a      	strb	r2, [r3, #0]
            if(ssi->tag_started <= hs->file) {
              /* pretend to have sent the tag, too */
              len += ssi->tag_end - ssi->tag_started;
            }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            hs->file += len;
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	699b      	ldr	r3, [r3, #24]
 8005228:	210c      	movs	r1, #12
 800522a:	187a      	adds	r2, r7, r1
 800522c:	8812      	ldrh	r2, [r2, #0]
 800522e:	189a      	adds	r2, r3, r2
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	619a      	str	r2, [r3, #24]
            hs->left -= len;
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005238:	187a      	adds	r2, r7, r1
 800523a:	8812      	ldrh	r2, [r2, #0]
 800523c:	1a9a      	subs	r2, r3, r2
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	625a      	str	r2, [r3, #36]	; 0x24
 8005242:	e045      	b.n	80052d0 <http_send_data_ssi+0x5d8>
            }
          }
#endif /* LWIP_HTTPD_SSI_MULTIPART */

          /* Do we still have insert data left to send? */
          if(ssi->tag_index < ssi->tag_insert_len) {
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	899a      	ldrh	r2, [r3, #12]
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	89db      	ldrh	r3, [r3, #14]
 800524c:	429a      	cmp	r2, r3
 800524e:	d237      	bcs.n	80052c0 <http_send_data_ssi+0x5c8>
            /* We are sending the insert string itself. How much of the
             * insert can we send? */
            if(len > (ssi->tag_insert_len - ssi->tag_index)) {
 8005250:	230c      	movs	r3, #12
 8005252:	18fb      	adds	r3, r7, r3
 8005254:	881b      	ldrh	r3, [r3, #0]
 8005256:	001a      	movs	r2, r3
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	89db      	ldrh	r3, [r3, #14]
 800525c:	0019      	movs	r1, r3
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	899b      	ldrh	r3, [r3, #12]
 8005262:	1acb      	subs	r3, r1, r3
 8005264:	429a      	cmp	r2, r3
 8005266:	dd08      	ble.n	800527a <http_send_data_ssi+0x582>
              len = (ssi->tag_insert_len - ssi->tag_index);
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	89da      	ldrh	r2, [r3, #14]
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	899b      	ldrh	r3, [r3, #12]
 8005270:	1ad3      	subs	r3, r2, r3
 8005272:	b29a      	uxth	r2, r3
 8005274:	230c      	movs	r3, #12
 8005276:	18fb      	adds	r3, r7, r3
 8005278:	801a      	strh	r2, [r3, #0]

            /* Note that we set the copy flag here since we only have a
             * single tag insert buffer per connection. If we don't do
             * this, insert corruption can occur if more than one insert
             * is processed before we call tcp_output. */
            err = http_write(pcb, &(ssi->tag_insert[ssi->tag_index]), &len,
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	899b      	ldrh	r3, [r3, #12]
 800527e:	3318      	adds	r3, #24
 8005280:	693a      	ldr	r2, [r7, #16]
 8005282:	18d3      	adds	r3, r2, r3
 8005284:	1c99      	adds	r1, r3, #2
 8005286:	2517      	movs	r5, #23
 8005288:	197c      	adds	r4, r7, r5
 800528a:	230c      	movs	r3, #12
 800528c:	18fa      	adds	r2, r7, r3
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	2301      	movs	r3, #1
 8005292:	f7ff faf0 	bl	8004876 <http_write>
 8005296:	0003      	movs	r3, r0
 8005298:	7023      	strb	r3, [r4, #0]
                             HTTP_IS_TAG_VOLATILE(hs));
            if (err == ERR_OK) {
 800529a:	197b      	adds	r3, r7, r5
 800529c:	781b      	ldrb	r3, [r3, #0]
 800529e:	b25b      	sxtb	r3, r3
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d114      	bne.n	80052ce <http_send_data_ssi+0x5d6>
              data_to_send = 1;
 80052a4:	2316      	movs	r3, #22
 80052a6:	18fb      	adds	r3, r7, r3
 80052a8:	2201      	movs	r2, #1
 80052aa:	701a      	strb	r2, [r3, #0]
              ssi->tag_index += len;
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	899a      	ldrh	r2, [r3, #12]
 80052b0:	230c      	movs	r3, #12
 80052b2:	18fb      	adds	r3, r7, r3
 80052b4:	881b      	ldrh	r3, [r3, #0]
 80052b6:	18d3      	adds	r3, r2, r3
 80052b8:	b29a      	uxth	r2, r3
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	819a      	strh	r2, [r3, #12]
 80052be:	e006      	b.n	80052ce <http_send_data_ssi+0x5d6>
#endif /* LWIP_HTTPD_SSI_MULTIPART */
            {
              /* We have sent all the insert data so go back to looking for
               * a new tag. */
              LWIP_DEBUGF(HTTPD_DEBUG, ("Everything sent.\n"));
              ssi->tag_index = 0;
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	2200      	movs	r2, #0
 80052c4:	819a      	strh	r2, [r3, #12]
              ssi->tag_state = TAG_NONE;
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	22db      	movs	r2, #219	; 0xdb
 80052ca:	2100      	movs	r1, #0
 80052cc:	5499      	strb	r1, [r3, r2]
#if !LWIP_HTTPD_SSI_INCLUDE_TAG
              ssi->parsed = ssi->tag_end;
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            }
          }
          break;
 80052ce:	46c0      	nop			; (mov r8, r8)
  while((ssi->parse_left) && (err == ERR_OK)) {
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d006      	beq.n	80052e6 <http_send_data_ssi+0x5ee>
 80052d8:	2317      	movs	r3, #23
 80052da:	18fb      	adds	r3, r7, r3
 80052dc:	781b      	ldrb	r3, [r3, #0]
 80052de:	b25b      	sxtb	r3, r3
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d100      	bne.n	80052e6 <http_send_data_ssi+0x5ee>
 80052e4:	e595      	b.n	8004e12 <http_send_data_ssi+0x11a>
  }

  /* If we drop out of the end of the for loop, this implies we must have
   * file data to send so send it now. In TAG_SENDING state, we've already
   * handled this so skip the send if that's the case. */
  if((ssi->tag_state != TAG_SENDING) && (ssi->parsed > hs->file)) {
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	22db      	movs	r2, #219	; 0xdb
 80052ea:	5c9b      	ldrb	r3, [r3, r2]
 80052ec:	2b04      	cmp	r3, #4
 80052ee:	d100      	bne.n	80052f2 <http_send_data_ssi+0x5fa>
 80052f0:	e075      	b.n	80053de <http_send_data_ssi+0x6e6>
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	699b      	ldr	r3, [r3, #24]
 80052fa:	429a      	cmp	r2, r3
 80052fc:	d800      	bhi.n	8005300 <http_send_data_ssi+0x608>
 80052fe:	e06e      	b.n	80053de <http_send_data_ssi+0x6e6>
    /* We cannot send more data than space available in the send
       buffer. */
    if (tcp_sndbuf(pcb) < (ssi->parsed - hs->file)) {
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2266      	movs	r2, #102	; 0x66
 8005304:	5a9b      	ldrh	r3, [r3, r2]
 8005306:	001a      	movs	r2, r3
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	0019      	movs	r1, r3
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	699b      	ldr	r3, [r3, #24]
 8005312:	1acb      	subs	r3, r1, r3
 8005314:	429a      	cmp	r2, r3
 8005316:	da06      	bge.n	8005326 <http_send_data_ssi+0x62e>
      len = tcp_sndbuf(pcb);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2266      	movs	r2, #102	; 0x66
 800531c:	5a9a      	ldrh	r2, [r3, r2]
 800531e:	230c      	movs	r3, #12
 8005320:	18fb      	adds	r3, r7, r3
 8005322:	801a      	strh	r2, [r3, #0]
 8005324:	e009      	b.n	800533a <http_send_data_ssi+0x642>
    } else {
      LWIP_ASSERT("Data size does not fit into u16_t!",
                  (ssi->parsed - hs->file) <= 0xffff);
      len = (u16_t)(ssi->parsed - hs->file);
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	001a      	movs	r2, r3
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	699b      	ldr	r3, [r3, #24]
 8005330:	1ad3      	subs	r3, r2, r3
 8005332:	b29a      	uxth	r2, r3
 8005334:	230c      	movs	r3, #12
 8005336:	18fb      	adds	r3, r7, r3
 8005338:	801a      	strh	r2, [r3, #0]
    }
    if(len > (2 * tcp_mss(pcb))) {
 800533a:	230c      	movs	r3, #12
 800533c:	18fb      	adds	r3, r7, r3
 800533e:	881b      	ldrh	r3, [r3, #0]
 8005340:	001a      	movs	r2, r3
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	7f9b      	ldrb	r3, [r3, #30]
 8005346:	0019      	movs	r1, r3
 8005348:	2308      	movs	r3, #8
 800534a:	400b      	ands	r3, r1
 800534c:	d004      	beq.n	8005358 <http_send_data_ssi+0x660>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005352:	3b0c      	subs	r3, #12
 8005354:	005b      	lsls	r3, r3, #1
 8005356:	e002      	b.n	800535e <http_send_data_ssi+0x666>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800535c:	005b      	lsls	r3, r3, #1
 800535e:	4293      	cmp	r3, r2
 8005360:	da15      	bge.n	800538e <http_send_data_ssi+0x696>
      len = 2 * tcp_mss(pcb);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	7f9b      	ldrb	r3, [r3, #30]
 8005366:	001a      	movs	r2, r3
 8005368:	2308      	movs	r3, #8
 800536a:	4013      	ands	r3, r2
 800536c:	d008      	beq.n	8005380 <http_send_data_ssi+0x688>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005372:	4a1e      	ldr	r2, [pc, #120]	; (80053ec <http_send_data_ssi+0x6f4>)
 8005374:	4694      	mov	ip, r2
 8005376:	4463      	add	r3, ip
 8005378:	b29b      	uxth	r3, r3
 800537a:	18db      	adds	r3, r3, r3
 800537c:	b29b      	uxth	r3, r3
 800537e:	e003      	b.n	8005388 <http_send_data_ssi+0x690>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005384:	18db      	adds	r3, r3, r3
 8005386:	b29b      	uxth	r3, r3
 8005388:	220c      	movs	r2, #12
 800538a:	18ba      	adds	r2, r7, r2
 800538c:	8013      	strh	r3, [r2, #0]
    }

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	6999      	ldr	r1, [r3, #24]
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005396:	1e5a      	subs	r2, r3, #1
 8005398:	4193      	sbcs	r3, r2
 800539a:	b2db      	uxtb	r3, r3
 800539c:	2517      	movs	r5, #23
 800539e:	197c      	adds	r4, r7, r5
 80053a0:	220c      	movs	r2, #12
 80053a2:	18ba      	adds	r2, r7, r2
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	f7ff fa66 	bl	8004876 <http_write>
 80053aa:	0003      	movs	r3, r0
 80053ac:	7023      	strb	r3, [r4, #0]
    if (err == ERR_OK) {
 80053ae:	197b      	adds	r3, r7, r5
 80053b0:	781b      	ldrb	r3, [r3, #0]
 80053b2:	b25b      	sxtb	r3, r3
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d112      	bne.n	80053de <http_send_data_ssi+0x6e6>
      data_to_send = 1;
 80053b8:	2316      	movs	r3, #22
 80053ba:	18fb      	adds	r3, r7, r3
 80053bc:	2201      	movs	r2, #1
 80053be:	701a      	strb	r2, [r3, #0]
      hs->file += len;
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	699b      	ldr	r3, [r3, #24]
 80053c4:	210c      	movs	r1, #12
 80053c6:	187a      	adds	r2, r7, r1
 80053c8:	8812      	ldrh	r2, [r2, #0]
 80053ca:	189a      	adds	r2, r3, r2
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	619a      	str	r2, [r3, #24]
      hs->left -= len;
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d4:	187a      	adds	r2, r7, r1
 80053d6:	8812      	ldrh	r2, [r2, #0]
 80053d8:	1a9a      	subs	r2, r3, r2
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }
  return data_to_send;
 80053de:	2316      	movs	r3, #22
 80053e0:	18fb      	adds	r3, r7, r3
 80053e2:	781b      	ldrb	r3, [r3, #0]
}
 80053e4:	0018      	movs	r0, r3
 80053e6:	46bd      	mov	sp, r7
 80053e8:	b006      	add	sp, #24
 80053ea:	bdb0      	pop	{r4, r5, r7, pc}
 80053ec:	00007ff4 	.word	0x00007ff4

080053f0 <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct tcp_pcb *pcb, struct http_state *hs)
{
 80053f0:	b590      	push	{r4, r7, lr}
 80053f2:	b085      	sub	sp, #20
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
 80053f8:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 80053fa:	230f      	movs	r3, #15
 80053fc:	18fb      	adds	r3, r7, r3
 80053fe:	2200      	movs	r2, #0
 8005400:	701a      	strb	r2, [r3, #0]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d101      	bne.n	800540c <http_send+0x1c>
    return 0;
 8005408:	2300      	movs	r3, #0
 800540a:	e03c      	b.n	8005486 <http_send+0x96>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005410:	2b00      	cmp	r3, #0
 8005412:	d109      	bne.n	8005428 <http_send+0x38>
    if (!http_check_eof(pcb, hs)) {
 8005414:	683a      	ldr	r2, [r7, #0]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	0011      	movs	r1, r2
 800541a:	0018      	movs	r0, r3
 800541c:	f7ff fbd8 	bl	8004bd0 <http_check_eof>
 8005420:	1e03      	subs	r3, r0, #0
 8005422:	d101      	bne.n	8005428 <http_send+0x38>
      return 0;
 8005424:	2300      	movs	r3, #0
 8005426:	e02e      	b.n	8005486 <http_send+0x96>
    }
  }

#if LWIP_HTTPD_SSI
  if(hs->ssi) {
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800542c:	2b00      	cmp	r3, #0
 800542e:	d00a      	beq.n	8005446 <http_send+0x56>
    data_to_send = http_send_data_ssi(pcb, hs);
 8005430:	230f      	movs	r3, #15
 8005432:	18fc      	adds	r4, r7, r3
 8005434:	683a      	ldr	r2, [r7, #0]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	0011      	movs	r1, r2
 800543a:	0018      	movs	r0, r3
 800543c:	f7ff fc5c 	bl	8004cf8 <http_send_data_ssi>
 8005440:	0003      	movs	r3, r0
 8005442:	7023      	strb	r3, [r4, #0]
 8005444:	e009      	b.n	800545a <http_send+0x6a>
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 8005446:	230f      	movs	r3, #15
 8005448:	18fc      	adds	r4, r7, r3
 800544a:	683a      	ldr	r2, [r7, #0]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	0011      	movs	r1, r2
 8005450:	0018      	movs	r0, r3
 8005452:	f7ff fbe2 	bl	8004c1a <http_send_data_nonssi>
 8005456:	0003      	movs	r3, r0
 8005458:	7023      	strb	r3, [r4, #0]
  }

  if((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545e:	2b00      	cmp	r3, #0
 8005460:	d10e      	bne.n	8005480 <http_send+0x90>
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	695b      	ldr	r3, [r3, #20]
 8005466:	0018      	movs	r0, r3
 8005468:	f7ff f946 	bl	80046f8 <fs_bytes_left>
 800546c:	1e03      	subs	r3, r0, #0
 800546e:	dc07      	bgt.n	8005480 <http_send+0x90>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 8005470:	683a      	ldr	r2, [r7, #0]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	0011      	movs	r1, r2
 8005476:	0018      	movs	r0, r3
 8005478:	f7ff fab2 	bl	80049e0 <http_eof>
    return 0;
 800547c:	2300      	movs	r3, #0
 800547e:	e002      	b.n	8005486 <http_send+0x96>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 8005480:	230f      	movs	r3, #15
 8005482:	18fb      	adds	r3, r7, r3
 8005484:	781b      	ldrb	r3, [r3, #0]
}
 8005486:	0018      	movs	r0, r3
 8005488:	46bd      	mov	sp, r7
 800548a:	b005      	add	sp, #20
 800548c:	bd90      	pop	{r4, r7, pc}
	...

08005490 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 8005490:	b5b0      	push	{r4, r5, r7, lr}
 8005492:	b084      	sub	sp, #16
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	4a20      	ldr	r2, [pc, #128]	; (8005520 <http_get_404_file+0x90>)
 800549e:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 80054a0:	687a      	ldr	r2, [r7, #4]
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	250f      	movs	r5, #15
 80054a8:	197c      	adds	r4, r7, r5
 80054aa:	0019      	movs	r1, r3
 80054ac:	0010      	movs	r0, r2
 80054ae:	f7ff f8dd 	bl	800466c <fs_open>
 80054b2:	0003      	movs	r3, r0
 80054b4:	7023      	strb	r3, [r4, #0]
  if (err != ERR_OK) {
 80054b6:	197b      	adds	r3, r7, r5
 80054b8:	781b      	ldrb	r3, [r3, #0]
 80054ba:	b25b      	sxtb	r3, r3
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d02a      	beq.n	8005516 <http_get_404_file+0x86>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	4a18      	ldr	r2, [pc, #96]	; (8005524 <http_get_404_file+0x94>)
 80054c4:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 80054c6:	687a      	ldr	r2, [r7, #4]
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	250f      	movs	r5, #15
 80054ce:	197c      	adds	r4, r7, r5
 80054d0:	0019      	movs	r1, r3
 80054d2:	0010      	movs	r0, r2
 80054d4:	f7ff f8ca 	bl	800466c <fs_open>
 80054d8:	0003      	movs	r3, r0
 80054da:	7023      	strb	r3, [r4, #0]
    if (err != ERR_OK) {
 80054dc:	197b      	adds	r3, r7, r5
 80054de:	781b      	ldrb	r3, [r3, #0]
 80054e0:	b25b      	sxtb	r3, r3
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d017      	beq.n	8005516 <http_get_404_file+0x86>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	4a0f      	ldr	r2, [pc, #60]	; (8005528 <http_get_404_file+0x98>)
 80054ea:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 80054ec:	687a      	ldr	r2, [r7, #4]
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	250f      	movs	r5, #15
 80054f4:	197c      	adds	r4, r7, r5
 80054f6:	0019      	movs	r1, r3
 80054f8:	0010      	movs	r0, r2
 80054fa:	f7ff f8b7 	bl	800466c <fs_open>
 80054fe:	0003      	movs	r3, r0
 8005500:	7023      	strb	r3, [r4, #0]
      if (err != ERR_OK) {
 8005502:	197b      	adds	r3, r7, r5
 8005504:	781b      	ldrb	r3, [r3, #0]
 8005506:	b25b      	sxtb	r3, r3
 8005508:	2b00      	cmp	r3, #0
 800550a:	d004      	beq.n	8005516 <http_get_404_file+0x86>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	2200      	movs	r2, #0
 8005510:	601a      	str	r2, [r3, #0]
        return NULL;
 8005512:	2300      	movs	r3, #0
 8005514:	e000      	b.n	8005518 <http_get_404_file+0x88>
      }
    }
  }

  return &hs->file_handle;
 8005516:	687b      	ldr	r3, [r7, #4]
}
 8005518:	0018      	movs	r0, r3
 800551a:	46bd      	mov	sp, r7
 800551c:	b004      	add	sp, #16
 800551e:	bdb0      	pop	{r4, r5, r7, pc}
 8005520:	080129d0 	.word	0x080129d0
 8005524:	080129dc 	.word	0x080129dc
 8005528:	080129e8 	.word	0x080129e8

0800552c <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf **inp, struct http_state *hs, struct tcp_pcb *pcb)
{
 800552c:	b590      	push	{r4, r7, lr}
 800552e:	b08f      	sub	sp, #60	; 0x3c
 8005530:	af00      	add	r7, sp, #0
 8005532:	60f8      	str	r0, [r7, #12]
 8005534:	60b9      	str	r1, [r7, #8]
 8005536:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = *inp;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	627b      	str	r3, [r7, #36]	; 0x24

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
  LWIP_ASSERT("hs != NULL", hs != NULL);

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	695b      	ldr	r3, [r3, #20]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d103      	bne.n	800554e <http_parse_request+0x22>
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	699b      	ldr	r3, [r3, #24]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d002      	beq.n	8005554 <http_parse_request+0x28>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 800554e:	2308      	movs	r3, #8
 8005550:	425b      	negs	r3, r3
 8005552:	e0c8      	b.n	80056e6 <http_parse_request+0x1ba>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	6a1b      	ldr	r3, [r3, #32]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d103      	bne.n	8005564 <http_parse_request+0x38>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005560:	621a      	str	r2, [r3, #32]
 8005562:	e006      	b.n	8005572 <http_parse_request+0x46>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	6a1b      	ldr	r3, [r3, #32]
 8005568:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800556a:	0011      	movs	r1, r2
 800556c:	0018      	movs	r0, r3
 800556e:	f001 fcb0 	bl	8006ed2 <pbuf_cat>
  }

  if (hs->req->next != NULL) {
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	6a1b      	ldr	r3, [r3, #32]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d016      	beq.n	80055aa <http_parse_request+0x7e>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	6a1b      	ldr	r3, [r3, #32]
 8005580:	891b      	ldrh	r3, [r3, #8]
 8005582:	2232      	movs	r2, #50	; 0x32
 8005584:	18ba      	adds	r2, r7, r2
 8005586:	b299      	uxth	r1, r3
 8005588:	4859      	ldr	r0, [pc, #356]	; (80056f0 <http_parse_request+0x1c4>)
 800558a:	4281      	cmp	r1, r0
 800558c:	d900      	bls.n	8005590 <http_parse_request+0x64>
 800558e:	4b58      	ldr	r3, [pc, #352]	; (80056f0 <http_parse_request+0x1c4>)
 8005590:	8013      	strh	r3, [r2, #0]
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	6a18      	ldr	r0, [r3, #32]
 8005596:	2332      	movs	r3, #50	; 0x32
 8005598:	18fb      	adds	r3, r7, r3
 800559a:	881a      	ldrh	r2, [r3, #0]
 800559c:	4955      	ldr	r1, [pc, #340]	; (80056f4 <http_parse_request+0x1c8>)
 800559e:	2300      	movs	r3, #0
 80055a0:	f001 fd84 	bl	80070ac <pbuf_copy_partial>
    data = httpd_req_buf;
 80055a4:	4b53      	ldr	r3, [pc, #332]	; (80056f4 <http_parse_request+0x1c8>)
 80055a6:	637b      	str	r3, [r7, #52]	; 0x34
 80055a8:	e007      	b.n	80055ba <http_parse_request+0x8e>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 80055aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	637b      	str	r3, [r7, #52]	; 0x34
    data_len = p->len;
 80055b0:	2332      	movs	r3, #50	; 0x32
 80055b2:	18fb      	adds	r3, r7, r3
 80055b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055b6:	8952      	ldrh	r2, [r2, #10]
 80055b8:	801a      	strh	r2, [r3, #0]
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 80055ba:	2332      	movs	r3, #50	; 0x32
 80055bc:	18fb      	adds	r3, r7, r3
 80055be:	881b      	ldrh	r3, [r3, #0]
 80055c0:	2b06      	cmp	r3, #6
 80055c2:	d800      	bhi.n	80055c6 <http_parse_request+0x9a>
 80055c4:	e075      	b.n	80056b2 <http_parse_request+0x186>
    /* wait for CRLF before parsing anything */
    crlf = strnstr(data, CRLF, data_len);
 80055c6:	2332      	movs	r3, #50	; 0x32
 80055c8:	18fb      	adds	r3, r7, r3
 80055ca:	881a      	ldrh	r2, [r3, #0]
 80055cc:	494a      	ldr	r1, [pc, #296]	; (80056f8 <http_parse_request+0x1cc>)
 80055ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055d0:	0018      	movs	r0, r3
 80055d2:	f7ff f89e 	bl	8004712 <strnstr>
 80055d6:	0003      	movs	r3, r0
 80055d8:	623b      	str	r3, [r7, #32]
    if (crlf != NULL) {
 80055da:	6a3b      	ldr	r3, [r7, #32]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d068      	beq.n	80056b2 <http_parse_request+0x186>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 80055e0:	2300      	movs	r3, #0
 80055e2:	62fb      	str	r3, [r7, #44]	; 0x2c
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 80055e4:	4945      	ldr	r1, [pc, #276]	; (80056fc <http_parse_request+0x1d0>)
 80055e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055e8:	2204      	movs	r2, #4
 80055ea:	0018      	movs	r0, r3
 80055ec:	f00c fd84 	bl	80120f8 <strncmp>
 80055f0:	1e03      	subs	r3, r0, #0
 80055f2:	d11d      	bne.n	8005630 <http_parse_request+0x104>
        sp1 = data + 3;
 80055f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055f6:	3303      	adds	r3, #3
 80055f8:	61fb      	str	r3, [r7, #28]
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
          data));
        return http_find_error_file(hs, 501);
      }
      /* if we come here, method is OK, parse URI */
      left_len = data_len - ((sp1 +1) - data);
 80055fa:	69fb      	ldr	r3, [r7, #28]
 80055fc:	3301      	adds	r3, #1
 80055fe:	001a      	movs	r2, r3
 8005600:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005602:	1ad3      	subs	r3, r2, r3
 8005604:	b29a      	uxth	r2, r3
 8005606:	241a      	movs	r4, #26
 8005608:	193b      	adds	r3, r7, r4
 800560a:	2132      	movs	r1, #50	; 0x32
 800560c:	1879      	adds	r1, r7, r1
 800560e:	8809      	ldrh	r1, [r1, #0]
 8005610:	1a8a      	subs	r2, r1, r2
 8005612:	801a      	strh	r2, [r3, #0]
      sp2 = strnstr(sp1 + 1, " ", left_len);
 8005614:	69fb      	ldr	r3, [r7, #28]
 8005616:	1c58      	adds	r0, r3, #1
 8005618:	193b      	adds	r3, r7, r4
 800561a:	881a      	ldrh	r2, [r3, #0]
 800561c:	4b38      	ldr	r3, [pc, #224]	; (8005700 <http_parse_request+0x1d4>)
 800561e:	0019      	movs	r1, r3
 8005620:	f7ff f877 	bl	8004712 <strnstr>
 8005624:	0003      	movs	r3, r0
 8005626:	62bb      	str	r3, [r7, #40]	; 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 8005628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800562a:	2b00      	cmp	r3, #0
 800562c:	d114      	bne.n	8005658 <http_parse_request+0x12c>
 800562e:	e006      	b.n	800563e <http_parse_request+0x112>
        data[4] = 0;
 8005630:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005632:	3304      	adds	r3, #4
 8005634:	2200      	movs	r2, #0
 8005636:	701a      	strb	r2, [r3, #0]
        return http_find_error_file(hs, 501);
 8005638:	230e      	movs	r3, #14
 800563a:	425b      	negs	r3, r3
 800563c:	e053      	b.n	80056e6 <http_parse_request+0x1ba>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = strnstr(sp1 + 1, CRLF, left_len);
 800563e:	69fb      	ldr	r3, [r7, #28]
 8005640:	1c58      	adds	r0, r3, #1
 8005642:	231a      	movs	r3, #26
 8005644:	18fb      	adds	r3, r7, r3
 8005646:	881a      	ldrh	r2, [r3, #0]
 8005648:	4b2b      	ldr	r3, [pc, #172]	; (80056f8 <http_parse_request+0x1cc>)
 800564a:	0019      	movs	r1, r3
 800564c:	f7ff f861 	bl	8004712 <strnstr>
 8005650:	0003      	movs	r3, r0
 8005652:	62bb      	str	r3, [r7, #40]	; 0x28
        is_09 = 1;
 8005654:	2301      	movs	r3, #1
 8005656:	62fb      	str	r3, [r7, #44]	; 0x2c
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = sp2 - (sp1 + 1);
 8005658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800565a:	69fa      	ldr	r2, [r7, #28]
 800565c:	3201      	adds	r2, #1
 800565e:	1a9a      	subs	r2, r3, r2
 8005660:	2318      	movs	r3, #24
 8005662:	18fb      	adds	r3, r7, r3
 8005664:	801a      	strh	r2, [r3, #0]
      if ((sp2 != 0) && (sp2 > sp1)) {
 8005666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005668:	2b00      	cmp	r3, #0
 800566a:	d022      	beq.n	80056b2 <http_parse_request+0x186>
 800566c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800566e:	69fb      	ldr	r3, [r7, #28]
 8005670:	429a      	cmp	r2, r3
 8005672:	d91e      	bls.n	80056b2 <http_parse_request+0x186>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (strnstr(data, CRLF CRLF, data_len) != NULL) {
 8005674:	2332      	movs	r3, #50	; 0x32
 8005676:	18fb      	adds	r3, r7, r3
 8005678:	881a      	ldrh	r2, [r3, #0]
 800567a:	4922      	ldr	r1, [pc, #136]	; (8005704 <http_parse_request+0x1d8>)
 800567c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800567e:	0018      	movs	r0, r3
 8005680:	f7ff f847 	bl	8004712 <strnstr>
 8005684:	1e03      	subs	r3, r0, #0
 8005686:	d014      	beq.n	80056b2 <http_parse_request+0x186>
          char *uri = sp1 + 1;
 8005688:	69fb      	ldr	r3, [r7, #28]
 800568a:	3301      	adds	r3, #1
 800568c:	617b      	str	r3, [r7, #20]
          if (!is_09 && strnstr(data, HTTP11_CONNECTIONKEEPALIVE, data_len)) {
            hs->keepalive = 1;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 800568e:	69fb      	ldr	r3, [r7, #28]
 8005690:	2200      	movs	r2, #0
 8005692:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 8005694:	2318      	movs	r3, #24
 8005696:	18fb      	adds	r3, r7, r3
 8005698:	881b      	ldrh	r3, [r3, #0]
 800569a:	697a      	ldr	r2, [r7, #20]
 800569c:	18d3      	adds	r3, r2, r3
 800569e:	2200      	movs	r2, #0
 80056a0:	701a      	strb	r2, [r3, #0]
            }
            return err;
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 80056a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056a4:	6979      	ldr	r1, [r7, #20]
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	0018      	movs	r0, r3
 80056aa:	f000 f82d 	bl	8005708 <http_find_file>
 80056ae:	0003      	movs	r3, r0
 80056b0:	e019      	b.n	80056e6 <http_parse_request+0x1ba>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	6a1b      	ldr	r3, [r3, #32]
 80056b6:	0018      	movs	r0, r3
 80056b8:	f001 fbde 	bl	8006e78 <pbuf_clen>
 80056bc:	0003      	movs	r3, r0
 80056be:	001a      	movs	r2, r3
 80056c0:	2312      	movs	r3, #18
 80056c2:	18fb      	adds	r3, r7, r3
 80056c4:	801a      	strh	r2, [r3, #0]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	6a1b      	ldr	r3, [r3, #32]
 80056ca:	891b      	ldrh	r3, [r3, #8]
 80056cc:	4a08      	ldr	r2, [pc, #32]	; (80056f0 <http_parse_request+0x1c4>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d807      	bhi.n	80056e2 <http_parse_request+0x1b6>
 80056d2:	2312      	movs	r3, #18
 80056d4:	18fb      	adds	r3, r7, r3
 80056d6:	881b      	ldrh	r3, [r3, #0]
 80056d8:	2b05      	cmp	r3, #5
 80056da:	d802      	bhi.n	80056e2 <http_parse_request+0x1b6>
    (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 80056dc:	2305      	movs	r3, #5
 80056de:	425b      	negs	r3, r3
 80056e0:	e001      	b.n	80056e6 <http_parse_request+0x1ba>
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 80056e2:	230e      	movs	r3, #14
 80056e4:	425b      	negs	r3, r3
  }
}
 80056e6:	0018      	movs	r0, r3
 80056e8:	46bd      	mov	sp, r7
 80056ea:	b00f      	add	sp, #60	; 0x3c
 80056ec:	bd90      	pop	{r4, r7, pc}
 80056ee:	46c0      	nop			; (mov r8, r8)
 80056f0:	000003ff 	.word	0x000003ff
 80056f4:	200001c8 	.word	0x200001c8
 80056f8:	080129f4 	.word	0x080129f4
 80056fc:	080129f8 	.word	0x080129f8
 8005700:	08012a00 	.word	0x08012a00
 8005704:	08012a04 	.word	0x08012a04

08005708 <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 8005708:	b5b0      	push	{r4, r5, r7, lr}
 800570a:	b08c      	sub	sp, #48	; 0x30
 800570c:	af02      	add	r7, sp, #8
 800570e:	60f8      	str	r0, [r7, #12]
 8005710:	60b9      	str	r1, [r7, #8]
 8005712:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 8005714:	2300      	movs	r3, #0
 8005716:	623b      	str	r3, [r7, #32]
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 8005718:	2317      	movs	r3, #23
 800571a:	18fb      	adds	r3, r7, r3
 800571c:	2200      	movs	r2, #0
 800571e:	701a      	strb	r2, [r3, #0]

  /* Have we been asked for the default root file? */
  if((uri[0] == '/') &&  (uri[1] == 0)) {
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	781b      	ldrb	r3, [r3, #0]
 8005724:	2b2f      	cmp	r3, #47	; 0x2f
 8005726:	d141      	bne.n	80057ac <http_find_file+0xa4>
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	3301      	adds	r3, #1
 800572c:	781b      	ldrb	r3, [r3, #0]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d13c      	bne.n	80057ac <http_find_file+0xa4>
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 8005732:	2300      	movs	r3, #0
 8005734:	627b      	str	r3, [r7, #36]	; 0x24
 8005736:	e024      	b.n	8005782 <http_find_file+0x7a>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", g_psDefaultFilenames[loop].name));
      err = fs_open(&hs->file_handle, (char *)g_psDefaultFilenames[loop].name);
 8005738:	68f8      	ldr	r0, [r7, #12]
 800573a:	4b65      	ldr	r3, [pc, #404]	; (80058d0 <http_find_file+0x1c8>)
 800573c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800573e:	00d2      	lsls	r2, r2, #3
 8005740:	58d3      	ldr	r3, [r2, r3]
 8005742:	2516      	movs	r5, #22
 8005744:	197c      	adds	r4, r7, r5
 8005746:	0019      	movs	r1, r3
 8005748:	f7fe ff90 	bl	800466c <fs_open>
 800574c:	0003      	movs	r3, r0
 800574e:	7023      	strb	r3, [r4, #0]
      uri = (char *)g_psDefaultFilenames[loop].name;
 8005750:	4b5f      	ldr	r3, [pc, #380]	; (80058d0 <http_find_file+0x1c8>)
 8005752:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005754:	00d2      	lsls	r2, r2, #3
 8005756:	58d3      	ldr	r3, [r2, r3]
 8005758:	60bb      	str	r3, [r7, #8]
      if(err == ERR_OK) {
 800575a:	197b      	adds	r3, r7, r5
 800575c:	781b      	ldrb	r3, [r3, #0]
 800575e:	b25b      	sxtb	r3, r3
 8005760:	2b00      	cmp	r3, #0
 8005762:	d10b      	bne.n	800577c <http_find_file+0x74>
        file = &hs->file_handle;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	623b      	str	r3, [r7, #32]
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = g_psDefaultFilenames[loop].shtml;
 8005768:	2317      	movs	r3, #23
 800576a:	18fb      	adds	r3, r7, r3
 800576c:	4958      	ldr	r1, [pc, #352]	; (80058d0 <http_find_file+0x1c8>)
 800576e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005770:	00d2      	lsls	r2, r2, #3
 8005772:	188a      	adds	r2, r1, r2
 8005774:	3204      	adds	r2, #4
 8005776:	7812      	ldrb	r2, [r2, #0]
 8005778:	701a      	strb	r2, [r3, #0]
#endif /* LWIP_HTTPD_SSI */
        break;
 800577a:	e005      	b.n	8005788 <http_find_file+0x80>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800577c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800577e:	3301      	adds	r3, #1
 8005780:	627b      	str	r3, [r7, #36]	; 0x24
 8005782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005784:	2b04      	cmp	r3, #4
 8005786:	d9d7      	bls.n	8005738 <http_find_file+0x30>
      }
    }
    if (file == NULL) {
 8005788:	6a3b      	ldr	r3, [r7, #32]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d000      	beq.n	8005790 <http_find_file+0x88>
 800578e:	e08f      	b.n	80058b0 <http_find_file+0x1a8>
      /* None of the default filenames exist so send back a 404 page */
      file = http_get_404_file(hs, &uri);
 8005790:	2308      	movs	r3, #8
 8005792:	18fa      	adds	r2, r7, r3
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	0011      	movs	r1, r2
 8005798:	0018      	movs	r0, r3
 800579a:	f7ff fe79 	bl	8005490 <http_get_404_file>
 800579e:	0003      	movs	r3, r0
 80057a0:	623b      	str	r3, [r7, #32]
#if LWIP_HTTPD_SSI
      tag_check = 0;
 80057a2:	2317      	movs	r3, #23
 80057a4:	18fb      	adds	r3, r7, r3
 80057a6:	2200      	movs	r2, #0
 80057a8:	701a      	strb	r2, [r3, #0]
    if (file == NULL) {
 80057aa:	e081      	b.n	80058b0 <http_find_file+0x1a8>
#endif /* LWIP_HTTPD_SSI */
    }
  } else {
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	213f      	movs	r1, #63	; 0x3f
 80057b0:	0018      	movs	r0, r3
 80057b2:	f00c fc93 	bl	80120dc <strchr>
 80057b6:	0003      	movs	r3, r0
 80057b8:	61fb      	str	r3, [r7, #28]
    if (params != NULL) {
 80057ba:	69fb      	ldr	r3, [r7, #28]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d005      	beq.n	80057cc <http_find_file+0xc4>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 80057c0:	69fb      	ldr	r3, [r7, #28]
 80057c2:	2200      	movs	r2, #0
 80057c4:	701a      	strb	r2, [r3, #0]
      params++;
 80057c6:	69fb      	ldr	r3, [r7, #28]
 80057c8:	3301      	adds	r3, #1
 80057ca:	61fb      	str	r3, [r7, #28]
    }

#if LWIP_HTTPD_CGI
    /* Does the base URI we have isolated correspond to a CGI handler? */
    if (g_iNumCGIs && g_pCGIs) {
 80057cc:	4b41      	ldr	r3, [pc, #260]	; (80058d4 <http_find_file+0x1cc>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d033      	beq.n	800583c <http_find_file+0x134>
 80057d4:	4b40      	ldr	r3, [pc, #256]	; (80058d8 <http_find_file+0x1d0>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d02f      	beq.n	800583c <http_find_file+0x134>
      for (i = 0; i < g_iNumCGIs; i++) {
 80057dc:	2300      	movs	r3, #0
 80057de:	61bb      	str	r3, [r7, #24]
 80057e0:	e027      	b.n	8005832 <http_find_file+0x12a>
        if (strcmp(uri, g_pCGIs[i].pcCGIName) == 0) {
 80057e2:	68b8      	ldr	r0, [r7, #8]
 80057e4:	4b3c      	ldr	r3, [pc, #240]	; (80058d8 <http_find_file+0x1d0>)
 80057e6:	681a      	ldr	r2, [r3, #0]
 80057e8:	69bb      	ldr	r3, [r7, #24]
 80057ea:	00db      	lsls	r3, r3, #3
 80057ec:	18d3      	adds	r3, r2, r3
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	0019      	movs	r1, r3
 80057f2:	f7fa fc89 	bl	8000108 <strcmp>
 80057f6:	1e03      	subs	r3, r0, #0
 80057f8:	d118      	bne.n	800582c <http_find_file+0x124>
          /*
           * We found a CGI that handles this URI so extract the
           * parameters and call the handler.
           */
           count = extract_uri_parameters(hs, params);
 80057fa:	69fa      	ldr	r2, [r7, #28]
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	0011      	movs	r1, r2
 8005800:	0018      	movs	r0, r3
 8005802:	f7ff f8fc 	bl	80049fe <extract_uri_parameters>
 8005806:	0003      	movs	r3, r0
 8005808:	613b      	str	r3, [r7, #16]
           uri = g_pCGIs[i].pfnCGIHandler(i, count, hs->params,
 800580a:	4b33      	ldr	r3, [pc, #204]	; (80058d8 <http_find_file+0x1d0>)
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	69bb      	ldr	r3, [r7, #24]
 8005810:	00db      	lsls	r3, r3, #3
 8005812:	18d3      	adds	r3, r2, r3
 8005814:	685c      	ldr	r4, [r3, #4]
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	3330      	adds	r3, #48	; 0x30
 800581a:	001a      	movs	r2, r3
                                          hs->param_vals);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	3370      	adds	r3, #112	; 0x70
           uri = g_pCGIs[i].pfnCGIHandler(i, count, hs->params,
 8005820:	6939      	ldr	r1, [r7, #16]
 8005822:	69b8      	ldr	r0, [r7, #24]
 8005824:	47a0      	blx	r4
 8005826:	0003      	movs	r3, r0
 8005828:	60bb      	str	r3, [r7, #8]
           break;
 800582a:	e007      	b.n	800583c <http_find_file+0x134>
      for (i = 0; i < g_iNumCGIs; i++) {
 800582c:	69bb      	ldr	r3, [r7, #24]
 800582e:	3301      	adds	r3, #1
 8005830:	61bb      	str	r3, [r7, #24]
 8005832:	4b28      	ldr	r3, [pc, #160]	; (80058d4 <http_find_file+0x1cc>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	69ba      	ldr	r2, [r7, #24]
 8005838:	429a      	cmp	r2, r3
 800583a:	dbd2      	blt.n	80057e2 <http_find_file+0xda>
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	68ba      	ldr	r2, [r7, #8]
 8005840:	2516      	movs	r5, #22
 8005842:	197c      	adds	r4, r7, r5
 8005844:	0011      	movs	r1, r2
 8005846:	0018      	movs	r0, r3
 8005848:	f7fe ff10 	bl	800466c <fs_open>
 800584c:	0003      	movs	r3, r0
 800584e:	7023      	strb	r3, [r4, #0]
    if (err == ERR_OK) {
 8005850:	197b      	adds	r3, r7, r5
 8005852:	781b      	ldrb	r3, [r3, #0]
 8005854:	b25b      	sxtb	r3, r3
 8005856:	2b00      	cmp	r3, #0
 8005858:	d102      	bne.n	8005860 <http_find_file+0x158>
       file = &hs->file_handle;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	623b      	str	r3, [r7, #32]
 800585e:	e008      	b.n	8005872 <http_find_file+0x16a>
    } else {
      file = http_get_404_file(hs, &uri);
 8005860:	2308      	movs	r3, #8
 8005862:	18fa      	adds	r2, r7, r3
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	0011      	movs	r1, r2
 8005868:	0018      	movs	r0, r3
 800586a:	f7ff fe11 	bl	8005490 <http_get_404_file>
 800586e:	0003      	movs	r3, r0
 8005870:	623b      	str	r3, [r7, #32]
    }
#if LWIP_HTTPD_SSI
    if (file != NULL) {
 8005872:	6a3b      	ldr	r3, [r7, #32]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d01b      	beq.n	80058b0 <http_find_file+0x1a8>
      /* See if we have been asked for an shtml file and, if so,
         enable tag checking. */
      tag_check = 0;
 8005878:	2317      	movs	r3, #23
 800587a:	18fb      	adds	r3, r7, r3
 800587c:	2200      	movs	r2, #0
 800587e:	701a      	strb	r2, [r3, #0]
      for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 8005880:	2300      	movs	r3, #0
 8005882:	627b      	str	r3, [r7, #36]	; 0x24
 8005884:	e011      	b.n	80058aa <http_find_file+0x1a2>
        if (strstr(uri, g_pcSSIExtensions[loop])) {
 8005886:	68b8      	ldr	r0, [r7, #8]
 8005888:	4b14      	ldr	r3, [pc, #80]	; (80058dc <http_find_file+0x1d4>)
 800588a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800588c:	0092      	lsls	r2, r2, #2
 800588e:	58d3      	ldr	r3, [r2, r3]
 8005890:	0019      	movs	r1, r3
 8005892:	f00c fc42 	bl	801211a <strstr>
 8005896:	1e03      	subs	r3, r0, #0
 8005898:	d004      	beq.n	80058a4 <http_find_file+0x19c>
          tag_check = 1;
 800589a:	2317      	movs	r3, #23
 800589c:	18fb      	adds	r3, r7, r3
 800589e:	2201      	movs	r2, #1
 80058a0:	701a      	strb	r2, [r3, #0]
          break;
 80058a2:	e005      	b.n	80058b0 <http_find_file+0x1a8>
      for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 80058a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a6:	3301      	adds	r3, #1
 80058a8:	627b      	str	r3, [r7, #36]	; 0x24
 80058aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ac:	2b03      	cmp	r3, #3
 80058ae:	d9ea      	bls.n	8005886 <http_find_file+0x17e>
        }
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  return http_init_file(hs, file, is_09, uri, tag_check);
 80058b0:	68bc      	ldr	r4, [r7, #8]
 80058b2:	687a      	ldr	r2, [r7, #4]
 80058b4:	6a39      	ldr	r1, [r7, #32]
 80058b6:	68f8      	ldr	r0, [r7, #12]
 80058b8:	2317      	movs	r3, #23
 80058ba:	18fb      	adds	r3, r7, r3
 80058bc:	781b      	ldrb	r3, [r3, #0]
 80058be:	9300      	str	r3, [sp, #0]
 80058c0:	0023      	movs	r3, r4
 80058c2:	f000 f80d 	bl	80058e0 <http_init_file>
 80058c6:	0003      	movs	r3, r0
}
 80058c8:	0018      	movs	r0, r3
 80058ca:	46bd      	mov	sp, r7
 80058cc:	b00a      	add	sp, #40	; 0x28
 80058ce:	bdb0      	pop	{r4, r5, r7, pc}
 80058d0:	0801c974 	.word	0x0801c974
 80058d4:	20002da4 	.word	0x20002da4
 80058d8:	20002da8 	.word	0x20002da8
 80058dc:	0801c964 	.word	0x0801c964

080058e0 <http_init_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri, u8_t tag_check)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b088      	sub	sp, #32
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	60f8      	str	r0, [r7, #12]
 80058e8:	60b9      	str	r1, [r7, #8]
 80058ea:	607a      	str	r2, [r7, #4]
 80058ec:	603b      	str	r3, [r7, #0]
  if (file != NULL) {
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d05b      	beq.n	80059ac <http_init_file+0xcc>
    /* file opened, initialise struct http_state */
#if LWIP_HTTPD_SSI
    if (tag_check) {
 80058f4:	2328      	movs	r3, #40	; 0x28
 80058f6:	18fb      	adds	r3, r7, r3
 80058f8:	781b      	ldrb	r3, [r3, #0]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d01d      	beq.n	800593a <http_init_file+0x5a>
      struct http_ssi_state *ssi = http_ssi_state_alloc();
 80058fe:	f7fe ff40 	bl	8004782 <http_ssi_state_alloc>
 8005902:	0003      	movs	r3, r0
 8005904:	61fb      	str	r3, [r7, #28]
      if (ssi != NULL) {
 8005906:	69fb      	ldr	r3, [r7, #28]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d016      	beq.n	800593a <http_init_file+0x5a>
        ssi->tag_index = 0;
 800590c:	69fb      	ldr	r3, [r7, #28]
 800590e:	2200      	movs	r2, #0
 8005910:	819a      	strh	r2, [r3, #12]
        ssi->tag_state = TAG_NONE;
 8005912:	69fb      	ldr	r3, [r7, #28]
 8005914:	22db      	movs	r2, #219	; 0xdb
 8005916:	2100      	movs	r1, #0
 8005918:	5499      	strb	r1, [r3, r2]
        ssi->parsed = file->data;
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	681a      	ldr	r2, [r3, #0]
 800591e:	69fb      	ldr	r3, [r7, #28]
 8005920:	601a      	str	r2, [r3, #0]
        ssi->parse_left = file->len;
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	001a      	movs	r2, r3
 8005928:	69fb      	ldr	r3, [r7, #28]
 800592a:	609a      	str	r2, [r3, #8]
        ssi->tag_end = file->data;
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	681a      	ldr	r2, [r3, #0]
 8005930:	69fb      	ldr	r3, [r7, #28]
 8005932:	605a      	str	r2, [r3, #4]
        hs->ssi = ssi;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	69fa      	ldr	r2, [r7, #28]
 8005938:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	68ba      	ldr	r2, [r7, #8]
 800593e:	615a      	str	r2, [r3, #20]
    hs->file = (char*)file->data;
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
    hs->left = file->len;
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	001a      	movs	r2, r3
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	625a      	str	r2, [r3, #36]	; 0x24
    hs->retries = 0;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2228      	movs	r2, #40	; 0x28
 8005956:	2100      	movs	r1, #0
 8005958:	5499      	strb	r1, [r3, r2]
#endif /* LWIP_HTTPD_TIMING */
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system", hs->handle->http_header_included);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (hs->handle->http_header_included && is_09) {
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	695b      	ldr	r3, [r3, #20]
 800595e:	7c1b      	ldrb	r3, [r3, #16]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d030      	beq.n	80059c6 <http_init_file+0xe6>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d02d      	beq.n	80059c6 <http_init_file+0xe6>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = strnstr(hs->file, CRLF CRLF, hs->left);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	6998      	ldr	r0, [r3, #24]
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005972:	4b17      	ldr	r3, [pc, #92]	; (80059d0 <http_init_file+0xf0>)
 8005974:	0019      	movs	r1, r3
 8005976:	f7fe fecc 	bl	8004712 <strnstr>
 800597a:	0003      	movs	r3, r0
 800597c:	61bb      	str	r3, [r7, #24]
      if (file_start != NULL) {
 800597e:	69bb      	ldr	r3, [r7, #24]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d020      	beq.n	80059c6 <http_init_file+0xe6>
        size_t diff = file_start + 4 - hs->file;
 8005984:	69bb      	ldr	r3, [r7, #24]
 8005986:	3304      	adds	r3, #4
 8005988:	001a      	movs	r2, r3
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	699b      	ldr	r3, [r3, #24]
 800598e:	1ad3      	subs	r3, r2, r3
 8005990:	617b      	str	r3, [r7, #20]
        hs->file += diff;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	699a      	ldr	r2, [r3, #24]
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	18d2      	adds	r2, r2, r3
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	1ad2      	subs	r2, r2, r3
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	625a      	str	r2, [r3, #36]	; 0x24
 80059aa:	e00c      	b.n	80059c6 <http_init_file+0xe6>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	2200      	movs	r2, #0
 80059b0:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2200      	movs	r2, #0
 80059b6:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2200      	movs	r2, #0
 80059bc:	625a      	str	r2, [r3, #36]	; 0x24
    hs->retries = 0;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2228      	movs	r2, #40	; 0x28
 80059c2:	2100      	movs	r1, #0
 80059c4:	5499      	strb	r1, [r3, r2]
    get_http_headers(hs, (char*)uri);
  }
#else /* LWIP_HTTPD_DYNAMIC_HEADERS */
  LWIP_UNUSED_ARG(uri);
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
  return ERR_OK;
 80059c6:	2300      	movs	r3, #0
}
 80059c8:	0018      	movs	r0, r3
 80059ca:	46bd      	mov	sp, r7
 80059cc:	b008      	add	sp, #32
 80059ce:	bd80      	pop	{r7, pc}
 80059d0:	08012a04 	.word	0x08012a04

080059d4 <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b084      	sub	sp, #16
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
 80059dc:	000a      	movs	r2, r1
 80059de:	1cfb      	adds	r3, r7, #3
 80059e0:	701a      	strb	r2, [r3, #0]
  struct http_state *hs = (struct http_state *)arg;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d003      	beq.n	80059f4 <http_err+0x20>
    http_state_free(hs);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	0018      	movs	r0, r3
 80059f0:	f7fe ff2e 	bl	8004850 <http_state_free>
  }
}
 80059f4:	46c0      	nop			; (mov r8, r8)
 80059f6:	46bd      	mov	sp, r7
 80059f8:	b004      	add	sp, #16
 80059fa:	bd80      	pop	{r7, pc}

080059fc <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b086      	sub	sp, #24
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	60f8      	str	r0, [r7, #12]
 8005a04:	60b9      	str	r1, [r7, #8]
 8005a06:	1dbb      	adds	r3, r7, #6
 8005a08:	801a      	strh	r2, [r3, #0]
  struct http_state *hs = (struct http_state *)arg;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void*)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d101      	bne.n	8005a18 <http_sent+0x1c>
    return ERR_OK;
 8005a14:	2300      	movs	r3, #0
 8005a16:	e00a      	b.n	8005a2e <http_sent+0x32>
  }

  hs->retries = 0;
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	2228      	movs	r2, #40	; 0x28
 8005a1c:	2100      	movs	r1, #0
 8005a1e:	5499      	strb	r1, [r3, r2]

  http_send(pcb, hs);
 8005a20:	697a      	ldr	r2, [r7, #20]
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	0011      	movs	r1, r2
 8005a26:	0018      	movs	r0, r3
 8005a28:	f7ff fce2 	bl	80053f0 <http_send>

  return ERR_OK;
 8005a2c:	2300      	movs	r3, #0
}
 8005a2e:	0018      	movs	r0, r3
 8005a30:	46bd      	mov	sp, r7
 8005a32:	b006      	add	sp, #24
 8005a34:	bd80      	pop	{r7, pc}

08005a36 <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct tcp_pcb *pcb)
{
 8005a36:	b590      	push	{r4, r7, lr}
 8005a38:	b085      	sub	sp, #20
 8005a3a:	af00      	add	r7, sp, #0
 8005a3c:	6078      	str	r0, [r7, #4]
 8005a3e:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
    (void*)pcb, (void*)hs, tcp_debug_state_str(pcb->state)));

  if (hs == NULL) {
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d10a      	bne.n	8005a60 <http_poll+0x2a>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 8005a4a:	230b      	movs	r3, #11
 8005a4c:	18fc      	adds	r4, r7, r3
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	2100      	movs	r1, #0
 8005a52:	0018      	movs	r0, r3
 8005a54:	f7fe ffb4 	bl	80049c0 <http_close_conn>
 8005a58:	0003      	movs	r3, r0
 8005a5a:	7023      	strb	r3, [r4, #0]
    if (closed == ERR_MEM) {
       tcp_abort(pcb);
       return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	e028      	b.n	8005ab2 <http_poll+0x7c>
  } else {
    hs->retries++;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2228      	movs	r2, #40	; 0x28
 8005a64:	5c9b      	ldrb	r3, [r3, r2]
 8005a66:	3301      	adds	r3, #1
 8005a68:	b2d9      	uxtb	r1, r3
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2228      	movs	r2, #40	; 0x28
 8005a6e:	5499      	strb	r1, [r3, r2]
    if (hs->retries == HTTPD_MAX_RETRIES) {
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2228      	movs	r2, #40	; 0x28
 8005a74:	5c9b      	ldrb	r3, [r3, r2]
 8005a76:	2b04      	cmp	r3, #4
 8005a78:	d107      	bne.n	8005a8a <http_poll+0x54>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 8005a7a:	68fa      	ldr	r2, [r7, #12]
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	0011      	movs	r1, r2
 8005a80:	0018      	movs	r0, r3
 8005a82:	f7fe ff9d 	bl	80049c0 <http_close_conn>
      return ERR_OK;
 8005a86:	2300      	movs	r3, #0
 8005a88:	e013      	b.n	8005ab2 <http_poll+0x7c>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if(hs && (hs->handle)) {
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d00f      	beq.n	8005ab0 <http_poll+0x7a>
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	695b      	ldr	r3, [r3, #20]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d00b      	beq.n	8005ab0 <http_poll+0x7a>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if(http_send(pcb, hs)) {
 8005a98:	68fa      	ldr	r2, [r7, #12]
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	0011      	movs	r1, r2
 8005a9e:	0018      	movs	r0, r3
 8005aa0:	f7ff fca6 	bl	80053f0 <http_send>
 8005aa4:	1e03      	subs	r3, r0, #0
 8005aa6:	d003      	beq.n	8005ab0 <http_poll+0x7a>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        tcp_output(pcb);
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	0018      	movs	r0, r3
 8005aac:	f006 f8ac 	bl	800bc08 <tcp_output>
      }
    }
  }

  return ERR_OK;
 8005ab0:	2300      	movs	r3, #0
}
 8005ab2:	0018      	movs	r0, r3
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	b005      	add	sp, #20
 8005ab8:	bd90      	pop	{r4, r7, pc}

08005aba <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8005aba:	b590      	push	{r4, r7, lr}
 8005abc:	b087      	sub	sp, #28
 8005abe:	af00      	add	r7, sp, #0
 8005ac0:	60f8      	str	r0, [r7, #12]
 8005ac2:	60b9      	str	r1, [r7, #8]
 8005ac4:	607a      	str	r2, [r7, #4]
 8005ac6:	001a      	movs	r2, r3
 8005ac8:	1cfb      	adds	r3, r7, #3
 8005aca:	701a      	strb	r2, [r3, #0]
  err_t parsed = ERR_ABRT;
 8005acc:	2317      	movs	r3, #23
 8005ace:	18fb      	adds	r3, r7, r3
 8005ad0:	22f6      	movs	r2, #246	; 0xf6
 8005ad2:	701a      	strb	r2, [r3, #0]
  struct http_state *hs = (struct http_state *)arg;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	613b      	str	r3, [r7, #16]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void*)pcb,
    (void*)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 8005ad8:	1cfb      	adds	r3, r7, #3
 8005ada:	781b      	ldrb	r3, [r3, #0]
 8005adc:	b25b      	sxtb	r3, r3
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d105      	bne.n	8005aee <http_recv+0x34>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d002      	beq.n	8005aee <http_recv+0x34>
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d115      	bne.n	8005b1a <http_recv+0x60>
    /* error or closed by other side? */
    if (p != NULL) {
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d00a      	beq.n	8005b0a <http_recv+0x50>
      /* Inform TCP that we have taken the data. */
      tcp_recved(pcb, p->tot_len);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	891a      	ldrh	r2, [r3, #8]
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	0011      	movs	r1, r2
 8005afc:	0018      	movs	r0, r3
 8005afe:	f001 ff15 	bl	800792c <tcp_recved>
      pbuf_free(p);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	0018      	movs	r0, r3
 8005b06:	f001 f945 	bl	8006d94 <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 8005b0a:	693a      	ldr	r2, [r7, #16]
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	0011      	movs	r1, r2
 8005b10:	0018      	movs	r0, r3
 8005b12:	f7fe ff55 	bl	80049c0 <http_close_conn>
    return ERR_OK;
 8005b16:	2300      	movs	r3, #0
 8005b18:	e040      	b.n	8005b9c <http_recv+0xe2>
     hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    tcp_recved(pcb, p->tot_len);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	891a      	ldrh	r2, [r3, #8]
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	0011      	movs	r1, r2
 8005b22:	0018      	movs	r0, r3
 8005b24:	f001 ff02 	bl	800792c <tcp_recved>
    }
    return ERR_OK;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	695b      	ldr	r3, [r3, #20]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d109      	bne.n	8005b44 <http_recv+0x8a>
      parsed = http_parse_request(&p, hs, pcb);
 8005b30:	2317      	movs	r3, #23
 8005b32:	18fc      	adds	r4, r7, r3
 8005b34:	68ba      	ldr	r2, [r7, #8]
 8005b36:	6939      	ldr	r1, [r7, #16]
 8005b38:	1d3b      	adds	r3, r7, #4
 8005b3a:	0018      	movs	r0, r3
 8005b3c:	f7ff fcf6 	bl	800552c <http_parse_request>
 8005b40:	0003      	movs	r3, r0
 8005b42:	7023      	strb	r3, [r4, #0]
        || parsed == ERR_INPROGRESS ||parsed == ERR_ARG || parsed == ERR_USE);
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
    }
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
    if (parsed != ERR_INPROGRESS) {
 8005b44:	2317      	movs	r3, #23
 8005b46:	18fb      	adds	r3, r7, r3
 8005b48:	781b      	ldrb	r3, [r3, #0]
 8005b4a:	b25b      	sxtb	r3, r3
 8005b4c:	3305      	adds	r3, #5
 8005b4e:	d00b      	beq.n	8005b68 <http_recv+0xae>
      /* request fully parsed or error */
      if (hs->req != NULL) {
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	6a1b      	ldr	r3, [r3, #32]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d007      	beq.n	8005b68 <http_recv+0xae>
        pbuf_free(hs->req);
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	6a1b      	ldr	r3, [r3, #32]
 8005b5c:	0018      	movs	r0, r3
 8005b5e:	f001 f919 	bl	8006d94 <pbuf_free>
        hs->req = NULL;
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	2200      	movs	r2, #0
 8005b66:	621a      	str	r2, [r3, #32]
    if (p != NULL) {
      /* pbuf not passed to application, free it now */
      pbuf_free(p);
    }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
    if (parsed == ERR_OK) {
 8005b68:	2317      	movs	r3, #23
 8005b6a:	18fb      	adds	r3, r7, r3
 8005b6c:	781b      	ldrb	r3, [r3, #0]
 8005b6e:	b25b      	sxtb	r3, r3
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d106      	bne.n	8005b82 <http_recv+0xc8>
#if LWIP_HTTPD_SUPPORT_POST
      if (hs->post_content_len_left == 0)
#endif /* LWIP_HTTPD_SUPPORT_POST */
      {
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", hs->file, hs->left));
        http_send(pcb, hs);
 8005b74:	693a      	ldr	r2, [r7, #16]
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	0011      	movs	r1, r2
 8005b7a:	0018      	movs	r0, r3
 8005b7c:	f7ff fc38 	bl	80053f0 <http_send>
 8005b80:	e00b      	b.n	8005b9a <http_recv+0xe0>
      }
    } else if (parsed == ERR_ARG) {
 8005b82:	2317      	movs	r3, #23
 8005b84:	18fb      	adds	r3, r7, r3
 8005b86:	781b      	ldrb	r3, [r3, #0]
 8005b88:	b25b      	sxtb	r3, r3
 8005b8a:	330e      	adds	r3, #14
 8005b8c:	d105      	bne.n	8005b9a <http_recv+0xe0>
      /* @todo: close on ERR_USE? */
      http_close_conn(pcb, hs);
 8005b8e:	693a      	ldr	r2, [r7, #16]
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	0011      	movs	r1, r2
 8005b94:	0018      	movs	r0, r3
 8005b96:	f7fe ff13 	bl	80049c0 <http_close_conn>
    }
  }
  return ERR_OK;
 8005b9a:	2300      	movs	r3, #0
}
 8005b9c:	0018      	movs	r0, r3
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	b007      	add	sp, #28
 8005ba2:	bd90      	pop	{r4, r7, pc}

08005ba4 <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b086      	sub	sp, #24
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	60f8      	str	r0, [r7, #12]
 8005bac:	60b9      	str	r1, [r7, #8]
 8005bae:	1dfb      	adds	r3, r7, #7
 8005bb0:	701a      	strb	r2, [r3, #0]
  struct http_state *hs;
  struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen*)arg;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void*)pcb, arg));

  /* Decrease the listen backlog counter */
  tcp_accepted(lpcb);
  /* Set priority */
  tcp_setprio(pcb, HTTPD_TCP_PRIO);
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	2101      	movs	r1, #1
 8005bba:	0018      	movs	r0, r3
 8005bbc:	f002 faa2 	bl	8008104 <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 8005bc0:	f7fe fe12 	bl	80047e8 <http_state_alloc>
 8005bc4:	0003      	movs	r3, r0
 8005bc6:	613b      	str	r3, [r7, #16]
  if (hs == NULL) {
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d102      	bne.n	8005bd4 <http_accept+0x30>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	425b      	negs	r3, r3
 8005bd2:	e021      	b.n	8005c18 <http_accept+0x74>
  }
  hs->pcb = pcb;
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	68ba      	ldr	r2, [r7, #8]
 8005bd8:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  tcp_arg(pcb, hs);
 8005bda:	693a      	ldr	r2, [r7, #16]
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	0011      	movs	r1, r2
 8005be0:	0018      	movs	r0, r3
 8005be2:	f002 fc14 	bl	800840e <tcp_arg>

  /* Set up the various callback functions */
  tcp_recv(pcb, http_recv);
 8005be6:	4a0e      	ldr	r2, [pc, #56]	; (8005c20 <http_accept+0x7c>)
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	0011      	movs	r1, r2
 8005bec:	0018      	movs	r0, r3
 8005bee:	f002 fc1a 	bl	8008426 <tcp_recv>
  tcp_err(pcb, http_err);
 8005bf2:	4a0c      	ldr	r2, [pc, #48]	; (8005c24 <http_accept+0x80>)
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	0011      	movs	r1, r2
 8005bf8:	0018      	movs	r0, r3
 8005bfa:	f002 fc2d 	bl	8008458 <tcp_err>
  tcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8005bfe:	490a      	ldr	r1, [pc, #40]	; (8005c28 <http_accept+0x84>)
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	2204      	movs	r2, #4
 8005c04:	0018      	movs	r0, r3
 8005c06:	f002 fc40 	bl	800848a <tcp_poll>
  tcp_sent(pcb, http_sent);
 8005c0a:	4a08      	ldr	r2, [pc, #32]	; (8005c2c <http_accept+0x88>)
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	0011      	movs	r1, r2
 8005c10:	0018      	movs	r0, r3
 8005c12:	f002 fc15 	bl	8008440 <tcp_sent>

  return ERR_OK;
 8005c16:	2300      	movs	r3, #0
}
 8005c18:	0018      	movs	r0, r3
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	b006      	add	sp, #24
 8005c1e:	bd80      	pop	{r7, pc}
 8005c20:	08005abb 	.word	0x08005abb
 8005c24:	080059d5 	.word	0x080059d5
 8005c28:	08005a37 	.word	0x08005a37
 8005c2c:	080059fd 	.word	0x080059fd

08005c30 <httpd_init_addr>:
/**
 * Initialize the httpd with the specified local address.
 */
static void
httpd_init_addr(ip_addr_t *local_addr)
{
 8005c30:	b590      	push	{r4, r7, lr}
 8005c32:	b085      	sub	sp, #20
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;
  err_t err;

  pcb = tcp_new();
 8005c38:	f002 fbe0 	bl	80083fc <tcp_new>
 8005c3c:	0003      	movs	r3, r0
 8005c3e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
  tcp_setprio(pcb, HTTPD_TCP_PRIO);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2101      	movs	r1, #1
 8005c44:	0018      	movs	r0, r3
 8005c46:	f002 fa5d 	bl	8008104 <tcp_setprio>
  /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
  err = tcp_bind(pcb, local_addr, HTTPD_SERVER_PORT);
 8005c4a:	230b      	movs	r3, #11
 8005c4c:	18fc      	adds	r4, r7, r3
 8005c4e:	6879      	ldr	r1, [r7, #4]
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2250      	movs	r2, #80	; 0x50
 8005c54:	0018      	movs	r0, r3
 8005c56:	f001 fd17 	bl	8007688 <tcp_bind>
 8005c5a:	0003      	movs	r3, r0
 8005c5c:	7023      	strb	r3, [r4, #0]
  LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
  pcb = tcp_listen(pcb);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	21ff      	movs	r1, #255	; 0xff
 8005c62:	0018      	movs	r0, r3
 8005c64:	f001 fd94 	bl	8007790 <tcp_listen_with_backlog>
 8005c68:	0003      	movs	r3, r0
 8005c6a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
  /* initialize callback arg and accept callback */
  tcp_arg(pcb, pcb);
 8005c6c:	68fa      	ldr	r2, [r7, #12]
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	0011      	movs	r1, r2
 8005c72:	0018      	movs	r0, r3
 8005c74:	f002 fbcb 	bl	800840e <tcp_arg>
  tcp_accept(pcb, http_accept);
 8005c78:	4a04      	ldr	r2, [pc, #16]	; (8005c8c <httpd_init_addr+0x5c>)
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	0011      	movs	r1, r2
 8005c7e:	0018      	movs	r0, r3
 8005c80:	f002 fbf7 	bl	8008472 <tcp_accept>
}
 8005c84:	46c0      	nop			; (mov r8, r8)
 8005c86:	46bd      	mov	sp, r7
 8005c88:	b005      	add	sp, #20
 8005c8a:	bd90      	pop	{r4, r7, pc}
 8005c8c:	08005ba5 	.word	0x08005ba5

08005c90 <httpd_init>:
/**
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	af00      	add	r7, sp, #0
  LWIP_ASSERT("memp_sizes[MEMP_HTTPD_SSI_STATE] >= sizeof(http_ssi_state)",
     memp_sizes[MEMP_HTTPD_SSI_STATE] >= sizeof(http_ssi_state));
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  httpd_init_addr(IP_ADDR_ANY);
 8005c94:	4b03      	ldr	r3, [pc, #12]	; (8005ca4 <httpd_init+0x14>)
 8005c96:	0018      	movs	r0, r3
 8005c98:	f7ff ffca 	bl	8005c30 <httpd_init_addr>
}
 8005c9c:	46c0      	nop			; (mov r8, r8)
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}
 8005ca2:	46c0      	nop			; (mov r8, r8)
 8005ca4:	0801ca48 	.word	0x0801ca48

08005ca8 <http_set_ssi_handler>:
 * @param tags an array of SSI tag strings to search for in SSI-enabled files
 * @param num_tags number of tags in the 'tags' array
 */
void
http_set_ssi_handler(tSSIHandler ssi_handler, const char **tags, int num_tags)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b084      	sub	sp, #16
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	60f8      	str	r0, [r7, #12]
 8005cb0:	60b9      	str	r1, [r7, #8]
 8005cb2:	607a      	str	r2, [r7, #4]

  LWIP_ASSERT("no ssi_handler given", ssi_handler != NULL);
  LWIP_ASSERT("no tags given", tags != NULL);
  LWIP_ASSERT("invalid number of tags", num_tags > 0);

  g_pfnSSIHandler = ssi_handler;
 8005cb4:	4b06      	ldr	r3, [pc, #24]	; (8005cd0 <http_set_ssi_handler+0x28>)
 8005cb6:	68fa      	ldr	r2, [r7, #12]
 8005cb8:	601a      	str	r2, [r3, #0]
  g_ppcTags = tags;
 8005cba:	4b06      	ldr	r3, [pc, #24]	; (8005cd4 <http_set_ssi_handler+0x2c>)
 8005cbc:	68ba      	ldr	r2, [r7, #8]
 8005cbe:	601a      	str	r2, [r3, #0]
  g_iNumTags = num_tags;
 8005cc0:	4b05      	ldr	r3, [pc, #20]	; (8005cd8 <http_set_ssi_handler+0x30>)
 8005cc2:	687a      	ldr	r2, [r7, #4]
 8005cc4:	601a      	str	r2, [r3, #0]
}
 8005cc6:	46c0      	nop			; (mov r8, r8)
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	b004      	add	sp, #16
 8005ccc:	bd80      	pop	{r7, pc}
 8005cce:	46c0      	nop			; (mov r8, r8)
 8005cd0:	200005c8 	.word	0x200005c8
 8005cd4:	200005d0 	.word	0x200005d0
 8005cd8:	200005cc 	.word	0x200005cc

08005cdc <http_set_cgi_handlers>:
 * @param cgis an array of CGI filenames/handler functions
 * @param num_handlers number of elements in the 'cgis' array
 */
void
http_set_cgi_handlers(const tCGI *cgis, int num_handlers)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b082      	sub	sp, #8
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
 8005ce4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("no cgis given", cgis != NULL);
  LWIP_ASSERT("invalid number of handlers", num_handlers > 0);
  
  g_pCGIs = cgis;
 8005ce6:	4b05      	ldr	r3, [pc, #20]	; (8005cfc <http_set_cgi_handlers+0x20>)
 8005ce8:	687a      	ldr	r2, [r7, #4]
 8005cea:	601a      	str	r2, [r3, #0]
  g_iNumCGIs = num_handlers;
 8005cec:	4b04      	ldr	r3, [pc, #16]	; (8005d00 <http_set_cgi_handlers+0x24>)
 8005cee:	683a      	ldr	r2, [r7, #0]
 8005cf0:	601a      	str	r2, [r3, #0]
}
 8005cf2:	46c0      	nop			; (mov r8, r8)
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	b002      	add	sp, #8
 8005cf8:	bd80      	pop	{r7, pc}
 8005cfa:	46c0      	nop			; (mov r8, r8)
 8005cfc:	20002da8 	.word	0x20002da8
 8005d00:	20002da4 	.word	0x20002da4

08005d04 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b082      	sub	sp, #8
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	0002      	movs	r2, r0
 8005d0c:	1dbb      	adds	r3, r7, #6
 8005d0e:	801a      	strh	r2, [r3, #0]
  return ((n & 0xff) << 8) | ((n & 0xff00) >> 8);
 8005d10:	1dbb      	adds	r3, r7, #6
 8005d12:	881b      	ldrh	r3, [r3, #0]
 8005d14:	021b      	lsls	r3, r3, #8
 8005d16:	b21a      	sxth	r2, r3
 8005d18:	1dbb      	adds	r3, r7, #6
 8005d1a:	881b      	ldrh	r3, [r3, #0]
 8005d1c:	0a1b      	lsrs	r3, r3, #8
 8005d1e:	b29b      	uxth	r3, r3
 8005d20:	b21b      	sxth	r3, r3
 8005d22:	4313      	orrs	r3, r2
 8005d24:	b21b      	sxth	r3, r3
 8005d26:	b29b      	uxth	r3, r3
}
 8005d28:	0018      	movs	r0, r3
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	b002      	add	sp, #8
 8005d2e:	bd80      	pop	{r7, pc}

08005d30 <lwip_ntohs>:
 * @param n u16_t in network byte order
 * @return n in host byte order
 */
u16_t
lwip_ntohs(u16_t n)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b082      	sub	sp, #8
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	0002      	movs	r2, r0
 8005d38:	1dbb      	adds	r3, r7, #6
 8005d3a:	801a      	strh	r2, [r3, #0]
  return lwip_htons(n);
 8005d3c:	1dbb      	adds	r3, r7, #6
 8005d3e:	881b      	ldrh	r3, [r3, #0]
 8005d40:	0018      	movs	r0, r3
 8005d42:	f7ff ffdf 	bl	8005d04 <lwip_htons>
 8005d46:	0003      	movs	r3, r0
}
 8005d48:	0018      	movs	r0, r3
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	b002      	add	sp, #8
 8005d4e:	bd80      	pop	{r7, pc}

08005d50 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b082      	sub	sp, #8
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  return ((n & 0xff) << 24) |
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	061a      	lsls	r2, r3, #24
    ((n & 0xff00) << 8) |
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	0219      	lsls	r1, r3, #8
 8005d60:	23ff      	movs	r3, #255	; 0xff
 8005d62:	041b      	lsls	r3, r3, #16
 8005d64:	400b      	ands	r3, r1
  return ((n & 0xff) << 24) |
 8005d66:	431a      	orrs	r2, r3
    ((n & 0xff0000UL) >> 8) |
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	0a19      	lsrs	r1, r3, #8
 8005d6c:	23ff      	movs	r3, #255	; 0xff
 8005d6e:	021b      	lsls	r3, r3, #8
 8005d70:	400b      	ands	r3, r1
    ((n & 0xff00) << 8) |
 8005d72:	431a      	orrs	r2, r3
    ((n & 0xff000000UL) >> 24);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	0e1b      	lsrs	r3, r3, #24
    ((n & 0xff0000UL) >> 8) |
 8005d78:	4313      	orrs	r3, r2
}
 8005d7a:	0018      	movs	r0, r3
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	b002      	add	sp, #8
 8005d80:	bd80      	pop	{r7, pc}

08005d82 <lwip_ntohl>:
 * @param n u32_t in network byte order
 * @return n in host byte order
 */
u32_t
lwip_ntohl(u32_t n)
{
 8005d82:	b580      	push	{r7, lr}
 8005d84:	b082      	sub	sp, #8
 8005d86:	af00      	add	r7, sp, #0
 8005d88:	6078      	str	r0, [r7, #4]
  return lwip_htonl(n);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	0018      	movs	r0, r3
 8005d8e:	f7ff ffdf 	bl	8005d50 <lwip_htonl>
 8005d92:	0003      	movs	r3, r0
}
 8005d94:	0018      	movs	r0, r3
 8005d96:	46bd      	mov	sp, r7
 8005d98:	b002      	add	sp, #8
 8005d9a:	bd80      	pop	{r7, pc}

08005d9c <lwip_init>:
/**
 * Perform Sanity check of user-configurable values, and initialize all modules.
 */
void
lwip_init(void)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	af00      	add	r7, sp, #0
  /* Modules initialization */
  stats_init();
 8005da0:	f001 fa76 	bl	8007290 <stats_init>
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8005da4:	f000 f86c 	bl	8005e80 <mem_init>
  memp_init();
 8005da8:	f000 fb18 	bl	80063dc <memp_init>
  pbuf_init();
  netif_init();
 8005dac:	f000 fc6a 	bl	8006684 <netif_init>
#endif /* LWIP_ARP */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8005db0:	f006 fe36 	bl	800ca20 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8005db4:	f001 fa71 	bl	800729a <tcp_init>
#if LWIP_DNS
  dns_init();
#endif /* LWIP_DNS */

#if LWIP_TIMERS
  sys_timeouts_init();
 8005db8:	f006 fda2 	bl	800c900 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8005dbc:	46c0      	nop			; (mov r8, r8)
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}
	...

08005dc4 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b084      	sub	sp, #16
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);

  nmem = (struct mem *)(void *)&ram[mem->next];
 8005dcc:	4b29      	ldr	r3, [pc, #164]	; (8005e74 <plug_holes+0xb0>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	687a      	ldr	r2, [r7, #4]
 8005dd2:	8812      	ldrh	r2, [r2, #0]
 8005dd4:	189b      	adds	r3, r3, r2
 8005dd6:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8005dd8:	687a      	ldr	r2, [r7, #4]
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d01f      	beq.n	8005e20 <plug_holes+0x5c>
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	791b      	ldrb	r3, [r3, #4]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d11b      	bne.n	8005e20 <plug_holes+0x5c>
 8005de8:	4b23      	ldr	r3, [pc, #140]	; (8005e78 <plug_holes+0xb4>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	68fa      	ldr	r2, [r7, #12]
 8005dee:	429a      	cmp	r2, r3
 8005df0:	d016      	beq.n	8005e20 <plug_holes+0x5c>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8005df2:	4b22      	ldr	r3, [pc, #136]	; (8005e7c <plug_holes+0xb8>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	68fa      	ldr	r2, [r7, #12]
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	d102      	bne.n	8005e02 <plug_holes+0x3e>
      lfree = mem;
 8005dfc:	4b1f      	ldr	r3, [pc, #124]	; (8005e7c <plug_holes+0xb8>)
 8005dfe:	687a      	ldr	r2, [r7, #4]
 8005e00:	601a      	str	r2, [r3, #0]
    }
    mem->next = nmem->next;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	881a      	ldrh	r2, [r3, #0]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 8005e0a:	687a      	ldr	r2, [r7, #4]
 8005e0c:	4b19      	ldr	r3, [pc, #100]	; (8005e74 <plug_holes+0xb0>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	1ad1      	subs	r1, r2, r3
 8005e12:	4b18      	ldr	r3, [pc, #96]	; (8005e74 <plug_holes+0xb0>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	68fa      	ldr	r2, [r7, #12]
 8005e18:	8812      	ldrh	r2, [r2, #0]
 8005e1a:	189b      	adds	r3, r3, r2
 8005e1c:	b28a      	uxth	r2, r1
 8005e1e:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 8005e20:	4b14      	ldr	r3, [pc, #80]	; (8005e74 <plug_holes+0xb0>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	687a      	ldr	r2, [r7, #4]
 8005e26:	8852      	ldrh	r2, [r2, #2]
 8005e28:	189b      	adds	r3, r3, r2
 8005e2a:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8005e2c:	68ba      	ldr	r2, [r7, #8]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d01a      	beq.n	8005e6a <plug_holes+0xa6>
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	791b      	ldrb	r3, [r3, #4]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d116      	bne.n	8005e6a <plug_holes+0xa6>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8005e3c:	4b0f      	ldr	r3, [pc, #60]	; (8005e7c <plug_holes+0xb8>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	687a      	ldr	r2, [r7, #4]
 8005e42:	429a      	cmp	r2, r3
 8005e44:	d102      	bne.n	8005e4c <plug_holes+0x88>
      lfree = pmem;
 8005e46:	4b0d      	ldr	r3, [pc, #52]	; (8005e7c <plug_holes+0xb8>)
 8005e48:	68ba      	ldr	r2, [r7, #8]
 8005e4a:	601a      	str	r2, [r3, #0]
    }
    pmem->next = mem->next;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	881a      	ldrh	r2, [r3, #0]
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 8005e54:	68ba      	ldr	r2, [r7, #8]
 8005e56:	4b07      	ldr	r3, [pc, #28]	; (8005e74 <plug_holes+0xb0>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	1ad1      	subs	r1, r2, r3
 8005e5c:	4b05      	ldr	r3, [pc, #20]	; (8005e74 <plug_holes+0xb0>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	687a      	ldr	r2, [r7, #4]
 8005e62:	8812      	ldrh	r2, [r2, #0]
 8005e64:	189b      	adds	r3, r3, r2
 8005e66:	b28a      	uxth	r2, r1
 8005e68:	805a      	strh	r2, [r3, #2]
  }
}
 8005e6a:	46c0      	nop			; (mov r8, r8)
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	b004      	add	sp, #16
 8005e70:	bd80      	pop	{r7, pc}
 8005e72:	46c0      	nop			; (mov r8, r8)
 8005e74:	200005d4 	.word	0x200005d4
 8005e78:	200005d8 	.word	0x200005d8
 8005e7c:	200005dc 	.word	0x200005dc

08005e80 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b082      	sub	sp, #8
 8005e84:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8005e86:	4b1b      	ldr	r3, [pc, #108]	; (8005ef4 <mem_init+0x74>)
 8005e88:	3303      	adds	r3, #3
 8005e8a:	2203      	movs	r2, #3
 8005e8c:	4393      	bics	r3, r2
 8005e8e:	001a      	movs	r2, r3
 8005e90:	4b19      	ldr	r3, [pc, #100]	; (8005ef8 <mem_init+0x78>)
 8005e92:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8005e94:	4b18      	ldr	r3, [pc, #96]	; (8005ef8 <mem_init+0x78>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	22c8      	movs	r2, #200	; 0xc8
 8005e9e:	00d2      	lsls	r2, r2, #3
 8005ea0:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 8005eae:	4b12      	ldr	r3, [pc, #72]	; (8005ef8 <mem_init+0x78>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	22c8      	movs	r2, #200	; 0xc8
 8005eb4:	00d2      	lsls	r2, r2, #3
 8005eb6:	189a      	adds	r2, r3, r2
 8005eb8:	4b10      	ldr	r3, [pc, #64]	; (8005efc <mem_init+0x7c>)
 8005eba:	601a      	str	r2, [r3, #0]
  ram_end->used = 1;
 8005ebc:	4b0f      	ldr	r3, [pc, #60]	; (8005efc <mem_init+0x7c>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8005ec4:	4b0d      	ldr	r3, [pc, #52]	; (8005efc <mem_init+0x7c>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	22c8      	movs	r2, #200	; 0xc8
 8005eca:	00d2      	lsls	r2, r2, #3
 8005ecc:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8005ece:	4b0b      	ldr	r3, [pc, #44]	; (8005efc <mem_init+0x7c>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	22c8      	movs	r2, #200	; 0xc8
 8005ed4:	00d2      	lsls	r2, r2, #3
 8005ed6:	805a      	strh	r2, [r3, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8005ed8:	4b07      	ldr	r3, [pc, #28]	; (8005ef8 <mem_init+0x78>)
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	4b08      	ldr	r3, [pc, #32]	; (8005f00 <mem_init+0x80>)
 8005ede:	601a      	str	r2, [r3, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);
 8005ee0:	4b08      	ldr	r3, [pc, #32]	; (8005f04 <mem_init+0x84>)
 8005ee2:	22a8      	movs	r2, #168	; 0xa8
 8005ee4:	21c8      	movs	r1, #200	; 0xc8
 8005ee6:	00c9      	lsls	r1, r1, #3
 8005ee8:	5299      	strh	r1, [r3, r2]

  if(sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8005eea:	46c0      	nop			; (mov r8, r8)
 8005eec:	46bd      	mov	sp, r7
 8005eee:	b002      	add	sp, #8
 8005ef0:	bd80      	pop	{r7, pc}
 8005ef2:	46c0      	nop			; (mov r8, r8)
 8005ef4:	20002dac 	.word	0x20002dac
 8005ef8:	200005d4 	.word	0x200005d4
 8005efc:	200005d8 	.word	0x200005d8
 8005f00:	200005dc 	.word	0x200005dc
 8005f04:	2000340c 	.word	0x2000340c

08005f08 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b084      	sub	sp, #16
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d036      	beq.n	8005f84 <mem_free+0x7c>
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8005f16:	4b1d      	ldr	r3, [pc, #116]	; (8005f8c <mem_free+0x84>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	687a      	ldr	r2, [r7, #4]
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d304      	bcc.n	8005f2a <mem_free+0x22>
 8005f20:	4b1b      	ldr	r3, [pc, #108]	; (8005f90 <mem_free+0x88>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	687a      	ldr	r2, [r7, #4]
 8005f26:	429a      	cmp	r2, r3
 8005f28:	d308      	bcc.n	8005f3c <mem_free+0x34>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
    MEM_STATS_INC(illegal);
 8005f2a:	4b1a      	ldr	r3, [pc, #104]	; (8005f94 <mem_free+0x8c>)
 8005f2c:	22b0      	movs	r2, #176	; 0xb0
 8005f2e:	5a9b      	ldrh	r3, [r3, r2]
 8005f30:	3301      	adds	r3, #1
 8005f32:	b299      	uxth	r1, r3
 8005f34:	4b17      	ldr	r3, [pc, #92]	; (8005f94 <mem_free+0x8c>)
 8005f36:	22b0      	movs	r2, #176	; 0xb0
 8005f38:	5299      	strh	r1, [r3, r2]
    SYS_ARCH_UNPROTECT(lev);
    return;
 8005f3a:	e024      	b.n	8005f86 <mem_free+0x7e>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* Get the corresponding struct mem ... */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	3b08      	subs	r3, #8
 8005f40:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
  /* ... and is now unused. */
  mem->used = 0;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2200      	movs	r2, #0
 8005f46:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8005f48:	4b13      	ldr	r3, [pc, #76]	; (8005f98 <mem_free+0x90>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	68fa      	ldr	r2, [r7, #12]
 8005f4e:	429a      	cmp	r2, r3
 8005f50:	d202      	bcs.n	8005f58 <mem_free+0x50>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8005f52:	4b11      	ldr	r3, [pc, #68]	; (8005f98 <mem_free+0x90>)
 8005f54:	68fa      	ldr	r2, [r7, #12]
 8005f56:	601a      	str	r2, [r3, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));
 8005f58:	4b0e      	ldr	r3, [pc, #56]	; (8005f94 <mem_free+0x8c>)
 8005f5a:	22aa      	movs	r2, #170	; 0xaa
 8005f5c:	5a9a      	ldrh	r2, [r3, r2]
 8005f5e:	68f9      	ldr	r1, [r7, #12]
 8005f60:	4b0a      	ldr	r3, [pc, #40]	; (8005f8c <mem_free+0x84>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	1acb      	subs	r3, r1, r3
 8005f66:	b299      	uxth	r1, r3
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	881b      	ldrh	r3, [r3, #0]
 8005f6c:	1acb      	subs	r3, r1, r3
 8005f6e:	b29b      	uxth	r3, r3
 8005f70:	18d3      	adds	r3, r2, r3
 8005f72:	b299      	uxth	r1, r3
 8005f74:	4b07      	ldr	r3, [pc, #28]	; (8005f94 <mem_free+0x8c>)
 8005f76:	22aa      	movs	r2, #170	; 0xaa
 8005f78:	5299      	strh	r1, [r3, r2]

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	0018      	movs	r0, r3
 8005f7e:	f7ff ff21 	bl	8005dc4 <plug_holes>
 8005f82:	e000      	b.n	8005f86 <mem_free+0x7e>
    return;
 8005f84:	46c0      	nop			; (mov r8, r8)
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8005f86:	46bd      	mov	sp, r7
 8005f88:	b004      	add	sp, #16
 8005f8a:	bd80      	pop	{r7, pc}
 8005f8c:	200005d4 	.word	0x200005d4
 8005f90:	200005d8 	.word	0x200005d8
 8005f94:	2000340c 	.word	0x2000340c
 8005f98:	200005dc 	.word	0x200005dc

08005f9c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b086      	sub	sp, #24
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	000a      	movs	r2, r1
 8005fa6:	1cbb      	adds	r3, r7, #2
 8005fa8:	801a      	strh	r2, [r3, #0]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 8005faa:	1cbb      	adds	r3, r7, #2
 8005fac:	881b      	ldrh	r3, [r3, #0]
 8005fae:	3303      	adds	r3, #3
 8005fb0:	b29a      	uxth	r2, r3
 8005fb2:	1cbb      	adds	r3, r7, #2
 8005fb4:	2103      	movs	r1, #3
 8005fb6:	438a      	bics	r2, r1
 8005fb8:	801a      	strh	r2, [r3, #0]

  if(newsize < MIN_SIZE_ALIGNED) {
 8005fba:	1cbb      	adds	r3, r7, #2
 8005fbc:	881b      	ldrh	r3, [r3, #0]
 8005fbe:	2b0b      	cmp	r3, #11
 8005fc0:	d802      	bhi.n	8005fc8 <mem_trim+0x2c>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8005fc2:	1cbb      	adds	r3, r7, #2
 8005fc4:	220c      	movs	r2, #12
 8005fc6:	801a      	strh	r2, [r3, #0]
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 8005fc8:	1cbb      	adds	r3, r7, #2
 8005fca:	881a      	ldrh	r2, [r3, #0]
 8005fcc:	23c8      	movs	r3, #200	; 0xc8
 8005fce:	00db      	lsls	r3, r3, #3
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	d901      	bls.n	8005fd8 <mem_trim+0x3c>
    return NULL;
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	e0e8      	b.n	80061aa <mem_trim+0x20e>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8005fd8:	4b76      	ldr	r3, [pc, #472]	; (80061b4 <mem_trim+0x218>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	687a      	ldr	r2, [r7, #4]
 8005fde:	429a      	cmp	r2, r3
 8005fe0:	d304      	bcc.n	8005fec <mem_trim+0x50>
 8005fe2:	4b75      	ldr	r3, [pc, #468]	; (80061b8 <mem_trim+0x21c>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	687a      	ldr	r2, [r7, #4]
 8005fe8:	429a      	cmp	r2, r3
 8005fea:	d309      	bcc.n	8006000 <mem_trim+0x64>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
    MEM_STATS_INC(illegal);
 8005fec:	4b73      	ldr	r3, [pc, #460]	; (80061bc <mem_trim+0x220>)
 8005fee:	22b0      	movs	r2, #176	; 0xb0
 8005ff0:	5a9b      	ldrh	r3, [r3, r2]
 8005ff2:	3301      	adds	r3, #1
 8005ff4:	b299      	uxth	r1, r3
 8005ff6:	4b71      	ldr	r3, [pc, #452]	; (80061bc <mem_trim+0x220>)
 8005ff8:	22b0      	movs	r2, #176	; 0xb0
 8005ffa:	5299      	strh	r1, [r3, r2]
    SYS_ARCH_UNPROTECT(lev);
    return rmem;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	e0d4      	b.n	80061aa <mem_trim+0x20e>
  }
  /* Get the corresponding struct mem ... */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	3b08      	subs	r3, #8
 8006004:	617b      	str	r3, [r7, #20]
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 8006006:	697a      	ldr	r2, [r7, #20]
 8006008:	4b6a      	ldr	r3, [pc, #424]	; (80061b4 <mem_trim+0x218>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	1ad2      	subs	r2, r2, r3
 800600e:	2112      	movs	r1, #18
 8006010:	187b      	adds	r3, r7, r1
 8006012:	801a      	strh	r2, [r3, #0]

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	881a      	ldrh	r2, [r3, #0]
 8006018:	187b      	adds	r3, r7, r1
 800601a:	881b      	ldrh	r3, [r3, #0]
 800601c:	1ad3      	subs	r3, r2, r3
 800601e:	b29a      	uxth	r2, r3
 8006020:	2110      	movs	r1, #16
 8006022:	187b      	adds	r3, r7, r1
 8006024:	3a08      	subs	r2, #8
 8006026:	801a      	strh	r2, [r3, #0]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
  if (newsize > size) {
 8006028:	1cba      	adds	r2, r7, #2
 800602a:	187b      	adds	r3, r7, r1
 800602c:	8812      	ldrh	r2, [r2, #0]
 800602e:	881b      	ldrh	r3, [r3, #0]
 8006030:	429a      	cmp	r2, r3
 8006032:	d901      	bls.n	8006038 <mem_trim+0x9c>
    /* not supported */
    return NULL;
 8006034:	2300      	movs	r3, #0
 8006036:	e0b8      	b.n	80061aa <mem_trim+0x20e>
  }
  if (newsize == size) {
 8006038:	1cba      	adds	r2, r7, #2
 800603a:	2310      	movs	r3, #16
 800603c:	18fb      	adds	r3, r7, r3
 800603e:	8812      	ldrh	r2, [r2, #0]
 8006040:	881b      	ldrh	r3, [r3, #0]
 8006042:	429a      	cmp	r2, r3
 8006044:	d101      	bne.n	800604a <mem_trim+0xae>
    /* No change in size, simply return */
    return rmem;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	e0af      	b.n	80061aa <mem_trim+0x20e>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = (struct mem *)(void *)&ram[mem->next];
 800604a:	4b5a      	ldr	r3, [pc, #360]	; (80061b4 <mem_trim+0x218>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	697a      	ldr	r2, [r7, #20]
 8006050:	8812      	ldrh	r2, [r2, #0]
 8006052:	189b      	adds	r3, r3, r2
 8006054:	60fb      	str	r3, [r7, #12]
  if(mem2->used == 0) {
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	791b      	ldrb	r3, [r3, #4]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d153      	bne.n	8006106 <mem_trim+0x16a>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 800605e:	2308      	movs	r3, #8
 8006060:	18fb      	adds	r3, r7, r3
 8006062:	68fa      	ldr	r2, [r7, #12]
 8006064:	8812      	ldrh	r2, [r2, #0]
 8006066:	801a      	strh	r2, [r3, #0]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8006068:	2312      	movs	r3, #18
 800606a:	18fa      	adds	r2, r7, r3
 800606c:	1cbb      	adds	r3, r7, #2
 800606e:	8812      	ldrh	r2, [r2, #0]
 8006070:	881b      	ldrh	r3, [r3, #0]
 8006072:	18d3      	adds	r3, r2, r3
 8006074:	b29a      	uxth	r2, r3
 8006076:	230a      	movs	r3, #10
 8006078:	18fb      	adds	r3, r7, r3
 800607a:	3208      	adds	r2, #8
 800607c:	801a      	strh	r2, [r3, #0]
    if (lfree == mem2) {
 800607e:	4b50      	ldr	r3, [pc, #320]	; (80061c0 <mem_trim+0x224>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	68fa      	ldr	r2, [r7, #12]
 8006084:	429a      	cmp	r2, r3
 8006086:	d107      	bne.n	8006098 <mem_trim+0xfc>
      lfree = (struct mem *)(void *)&ram[ptr2];
 8006088:	4b4a      	ldr	r3, [pc, #296]	; (80061b4 <mem_trim+0x218>)
 800608a:	681a      	ldr	r2, [r3, #0]
 800608c:	230a      	movs	r3, #10
 800608e:	18fb      	adds	r3, r7, r3
 8006090:	881b      	ldrh	r3, [r3, #0]
 8006092:	18d2      	adds	r2, r2, r3
 8006094:	4b4a      	ldr	r3, [pc, #296]	; (80061c0 <mem_trim+0x224>)
 8006096:	601a      	str	r2, [r3, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8006098:	4b46      	ldr	r3, [pc, #280]	; (80061b4 <mem_trim+0x218>)
 800609a:	681a      	ldr	r2, [r3, #0]
 800609c:	210a      	movs	r1, #10
 800609e:	187b      	adds	r3, r7, r1
 80060a0:	881b      	ldrh	r3, [r3, #0]
 80060a2:	18d3      	adds	r3, r2, r3
 80060a4:	60fb      	str	r3, [r7, #12]
    mem2->used = 0;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2200      	movs	r2, #0
 80060aa:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2208      	movs	r2, #8
 80060b0:	18ba      	adds	r2, r7, r2
 80060b2:	8812      	ldrh	r2, [r2, #0]
 80060b4:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2212      	movs	r2, #18
 80060ba:	18ba      	adds	r2, r7, r2
 80060bc:	8812      	ldrh	r2, [r2, #0]
 80060be:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	187a      	adds	r2, r7, r1
 80060c4:	8812      	ldrh	r2, [r2, #0]
 80060c6:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	881a      	ldrh	r2, [r3, #0]
 80060cc:	23c8      	movs	r3, #200	; 0xc8
 80060ce:	00db      	lsls	r3, r3, #3
 80060d0:	429a      	cmp	r2, r3
 80060d2:	d008      	beq.n	80060e6 <mem_trim+0x14a>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 80060d4:	4b37      	ldr	r3, [pc, #220]	; (80061b4 <mem_trim+0x218>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	68fa      	ldr	r2, [r7, #12]
 80060da:	8812      	ldrh	r2, [r2, #0]
 80060dc:	189b      	adds	r3, r3, r2
 80060de:	220a      	movs	r2, #10
 80060e0:	18ba      	adds	r2, r7, r2
 80060e2:	8812      	ldrh	r2, [r2, #0]
 80060e4:	805a      	strh	r2, [r3, #2]
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
 80060e6:	4b35      	ldr	r3, [pc, #212]	; (80061bc <mem_trim+0x220>)
 80060e8:	22aa      	movs	r2, #170	; 0xaa
 80060ea:	5a9a      	ldrh	r2, [r3, r2]
 80060ec:	1cb9      	adds	r1, r7, #2
 80060ee:	2310      	movs	r3, #16
 80060f0:	18fb      	adds	r3, r7, r3
 80060f2:	8809      	ldrh	r1, [r1, #0]
 80060f4:	881b      	ldrh	r3, [r3, #0]
 80060f6:	1acb      	subs	r3, r1, r3
 80060f8:	b29b      	uxth	r3, r3
 80060fa:	18d3      	adds	r3, r2, r3
 80060fc:	b299      	uxth	r1, r3
 80060fe:	4b2f      	ldr	r3, [pc, #188]	; (80061bc <mem_trim+0x220>)
 8006100:	22aa      	movs	r2, #170	; 0xaa
 8006102:	5299      	strh	r1, [r3, r2]
 8006104:	e050      	b.n	80061a8 <mem_trim+0x20c>
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8006106:	1cbb      	adds	r3, r7, #2
 8006108:	881b      	ldrh	r3, [r3, #0]
 800610a:	3314      	adds	r3, #20
 800610c:	001a      	movs	r2, r3
 800610e:	2310      	movs	r3, #16
 8006110:	18fb      	adds	r3, r7, r3
 8006112:	881b      	ldrh	r3, [r3, #0]
 8006114:	429a      	cmp	r2, r3
 8006116:	d847      	bhi.n	80061a8 <mem_trim+0x20c>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8006118:	2312      	movs	r3, #18
 800611a:	18fa      	adds	r2, r7, r3
 800611c:	1cbb      	adds	r3, r7, #2
 800611e:	8812      	ldrh	r2, [r2, #0]
 8006120:	881b      	ldrh	r3, [r3, #0]
 8006122:	18d3      	adds	r3, r2, r3
 8006124:	b29a      	uxth	r2, r3
 8006126:	210a      	movs	r1, #10
 8006128:	187b      	adds	r3, r7, r1
 800612a:	3208      	adds	r2, #8
 800612c:	801a      	strh	r2, [r3, #0]
    mem2 = (struct mem *)(void *)&ram[ptr2];
 800612e:	4b21      	ldr	r3, [pc, #132]	; (80061b4 <mem_trim+0x218>)
 8006130:	681a      	ldr	r2, [r3, #0]
 8006132:	187b      	adds	r3, r7, r1
 8006134:	881b      	ldrh	r3, [r3, #0]
 8006136:	18d3      	adds	r3, r2, r3
 8006138:	60fb      	str	r3, [r7, #12]
    if (mem2 < lfree) {
 800613a:	4b21      	ldr	r3, [pc, #132]	; (80061c0 <mem_trim+0x224>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	68fa      	ldr	r2, [r7, #12]
 8006140:	429a      	cmp	r2, r3
 8006142:	d202      	bcs.n	800614a <mem_trim+0x1ae>
      lfree = mem2;
 8006144:	4b1e      	ldr	r3, [pc, #120]	; (80061c0 <mem_trim+0x224>)
 8006146:	68fa      	ldr	r2, [r7, #12]
 8006148:	601a      	str	r2, [r3, #0]
    }
    mem2->used = 0;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2200      	movs	r2, #0
 800614e:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	881a      	ldrh	r2, [r3, #0]
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	2212      	movs	r2, #18
 800615c:	18ba      	adds	r2, r7, r2
 800615e:	8812      	ldrh	r2, [r2, #0]
 8006160:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	220a      	movs	r2, #10
 8006166:	18ba      	adds	r2, r7, r2
 8006168:	8812      	ldrh	r2, [r2, #0]
 800616a:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	881a      	ldrh	r2, [r3, #0]
 8006170:	23c8      	movs	r3, #200	; 0xc8
 8006172:	00db      	lsls	r3, r3, #3
 8006174:	429a      	cmp	r2, r3
 8006176:	d008      	beq.n	800618a <mem_trim+0x1ee>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8006178:	4b0e      	ldr	r3, [pc, #56]	; (80061b4 <mem_trim+0x218>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	68fa      	ldr	r2, [r7, #12]
 800617e:	8812      	ldrh	r2, [r2, #0]
 8006180:	189b      	adds	r3, r3, r2
 8006182:	220a      	movs	r2, #10
 8006184:	18ba      	adds	r2, r7, r2
 8006186:	8812      	ldrh	r2, [r2, #0]
 8006188:	805a      	strh	r2, [r3, #2]
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
 800618a:	4b0c      	ldr	r3, [pc, #48]	; (80061bc <mem_trim+0x220>)
 800618c:	22aa      	movs	r2, #170	; 0xaa
 800618e:	5a9a      	ldrh	r2, [r3, r2]
 8006190:	1cb9      	adds	r1, r7, #2
 8006192:	2310      	movs	r3, #16
 8006194:	18fb      	adds	r3, r7, r3
 8006196:	8809      	ldrh	r1, [r1, #0]
 8006198:	881b      	ldrh	r3, [r3, #0]
 800619a:	1acb      	subs	r3, r1, r3
 800619c:	b29b      	uxth	r3, r3
 800619e:	18d3      	adds	r3, r2, r3
 80061a0:	b299      	uxth	r1, r3
 80061a2:	4b06      	ldr	r3, [pc, #24]	; (80061bc <mem_trim+0x220>)
 80061a4:	22aa      	movs	r2, #170	; 0xaa
 80061a6:	5299      	strh	r1, [r3, r2]
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 80061a8:	687b      	ldr	r3, [r7, #4]
}
 80061aa:	0018      	movs	r0, r3
 80061ac:	46bd      	mov	sp, r7
 80061ae:	b006      	add	sp, #24
 80061b0:	bd80      	pop	{r7, pc}
 80061b2:	46c0      	nop			; (mov r8, r8)
 80061b4:	200005d4 	.word	0x200005d4
 80061b8:	200005d8 	.word	0x200005d8
 80061bc:	2000340c 	.word	0x2000340c
 80061c0:	200005dc 	.word	0x200005dc

080061c4 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b088      	sub	sp, #32
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	0002      	movs	r2, r0
 80061cc:	1dbb      	adds	r3, r7, #6
 80061ce:	801a      	strh	r2, [r3, #0]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 80061d0:	1dbb      	adds	r3, r7, #6
 80061d2:	881b      	ldrh	r3, [r3, #0]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d101      	bne.n	80061dc <mem_malloc+0x18>
    return NULL;
 80061d8:	2300      	movs	r3, #0
 80061da:	e0f2      	b.n	80063c2 <mem_malloc+0x1fe>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 80061dc:	1dbb      	adds	r3, r7, #6
 80061de:	881b      	ldrh	r3, [r3, #0]
 80061e0:	3303      	adds	r3, #3
 80061e2:	b29a      	uxth	r2, r3
 80061e4:	1dbb      	adds	r3, r7, #6
 80061e6:	2103      	movs	r1, #3
 80061e8:	438a      	bics	r2, r1
 80061ea:	801a      	strh	r2, [r3, #0]

  if(size < MIN_SIZE_ALIGNED) {
 80061ec:	1dbb      	adds	r3, r7, #6
 80061ee:	881b      	ldrh	r3, [r3, #0]
 80061f0:	2b0b      	cmp	r3, #11
 80061f2:	d802      	bhi.n	80061fa <mem_malloc+0x36>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80061f4:	1dbb      	adds	r3, r7, #6
 80061f6:	220c      	movs	r2, #12
 80061f8:	801a      	strh	r2, [r3, #0]
  }

  if (size > MEM_SIZE_ALIGNED) {
 80061fa:	1dbb      	adds	r3, r7, #6
 80061fc:	881a      	ldrh	r2, [r3, #0]
 80061fe:	23c8      	movs	r3, #200	; 0xc8
 8006200:	00db      	lsls	r3, r3, #3
 8006202:	429a      	cmp	r2, r3
 8006204:	d901      	bls.n	800620a <mem_malloc+0x46>
    return NULL;
 8006206:	2300      	movs	r3, #0
 8006208:	e0db      	b.n	80063c2 <mem_malloc+0x1fe>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800620a:	4b70      	ldr	r3, [pc, #448]	; (80063cc <mem_malloc+0x208>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	001a      	movs	r2, r3
 8006210:	4b6f      	ldr	r3, [pc, #444]	; (80063d0 <mem_malloc+0x20c>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	1ad2      	subs	r2, r2, r3
 8006216:	231e      	movs	r3, #30
 8006218:	18fb      	adds	r3, r7, r3
 800621a:	801a      	strh	r2, [r3, #0]
 800621c:	e0bd      	b.n	800639a <mem_malloc+0x1d6>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 800621e:	4b6c      	ldr	r3, [pc, #432]	; (80063d0 <mem_malloc+0x20c>)
 8006220:	681a      	ldr	r2, [r3, #0]
 8006222:	231e      	movs	r3, #30
 8006224:	18fb      	adds	r3, r7, r3
 8006226:	881b      	ldrh	r3, [r3, #0]
 8006228:	18d3      	adds	r3, r2, r3
 800622a:	617b      	str	r3, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	791b      	ldrb	r3, [r3, #4]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d000      	beq.n	8006236 <mem_malloc+0x72>
 8006234:	e0a8      	b.n	8006388 <mem_malloc+0x1c4>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	881b      	ldrh	r3, [r3, #0]
 800623a:	001a      	movs	r2, r3
 800623c:	231e      	movs	r3, #30
 800623e:	18fb      	adds	r3, r7, r3
 8006240:	881b      	ldrh	r3, [r3, #0]
 8006242:	1ad3      	subs	r3, r2, r3
 8006244:	3b08      	subs	r3, #8
 8006246:	001a      	movs	r2, r3
 8006248:	1dbb      	adds	r3, r7, #6
 800624a:	881b      	ldrh	r3, [r3, #0]
      if ((!mem->used) &&
 800624c:	429a      	cmp	r2, r3
 800624e:	d200      	bcs.n	8006252 <mem_malloc+0x8e>
 8006250:	e09a      	b.n	8006388 <mem_malloc+0x1c4>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	881b      	ldrh	r3, [r3, #0]
 8006256:	001a      	movs	r2, r3
 8006258:	231e      	movs	r3, #30
 800625a:	18fb      	adds	r3, r7, r3
 800625c:	881b      	ldrh	r3, [r3, #0]
 800625e:	1ad3      	subs	r3, r2, r3
 8006260:	3b08      	subs	r3, #8
 8006262:	001a      	movs	r2, r3
 8006264:	1dbb      	adds	r3, r7, #6
 8006266:	881b      	ldrh	r3, [r3, #0]
 8006268:	3314      	adds	r3, #20
 800626a:	429a      	cmp	r2, r3
 800626c:	d34c      	bcc.n	8006308 <mem_malloc+0x144>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 800626e:	201e      	movs	r0, #30
 8006270:	183a      	adds	r2, r7, r0
 8006272:	1dbb      	adds	r3, r7, #6
 8006274:	8812      	ldrh	r2, [r2, #0]
 8006276:	881b      	ldrh	r3, [r3, #0]
 8006278:	18d3      	adds	r3, r2, r3
 800627a:	b29a      	uxth	r2, r3
 800627c:	2112      	movs	r1, #18
 800627e:	187b      	adds	r3, r7, r1
 8006280:	3208      	adds	r2, #8
 8006282:	801a      	strh	r2, [r3, #0]
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 8006284:	4b52      	ldr	r3, [pc, #328]	; (80063d0 <mem_malloc+0x20c>)
 8006286:	681a      	ldr	r2, [r3, #0]
 8006288:	187b      	adds	r3, r7, r1
 800628a:	881b      	ldrh	r3, [r3, #0]
 800628c:	18d3      	adds	r3, r2, r3
 800628e:	60fb      	str	r3, [r7, #12]
          mem2->used = 0;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2200      	movs	r2, #0
 8006294:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	881a      	ldrh	r2, [r3, #0]
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	183a      	adds	r2, r7, r0
 80062a2:	8812      	ldrh	r2, [r2, #0]
 80062a4:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	187a      	adds	r2, r7, r1
 80062aa:	8812      	ldrh	r2, [r2, #0]
 80062ac:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	2201      	movs	r2, #1
 80062b2:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	881a      	ldrh	r2, [r3, #0]
 80062b8:	23c8      	movs	r3, #200	; 0xc8
 80062ba:	00db      	lsls	r3, r3, #3
 80062bc:	429a      	cmp	r2, r3
 80062be:	d008      	beq.n	80062d2 <mem_malloc+0x10e>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 80062c0:	4b43      	ldr	r3, [pc, #268]	; (80063d0 <mem_malloc+0x20c>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	68fa      	ldr	r2, [r7, #12]
 80062c6:	8812      	ldrh	r2, [r2, #0]
 80062c8:	189b      	adds	r3, r3, r2
 80062ca:	2212      	movs	r2, #18
 80062cc:	18ba      	adds	r2, r7, r2
 80062ce:	8812      	ldrh	r2, [r2, #0]
 80062d0:	805a      	strh	r2, [r3, #2]
          }
          MEM_STATS_INC_USED(used, (size + SIZEOF_STRUCT_MEM));
 80062d2:	4b40      	ldr	r3, [pc, #256]	; (80063d4 <mem_malloc+0x210>)
 80062d4:	22aa      	movs	r2, #170	; 0xaa
 80062d6:	5a9a      	ldrh	r2, [r3, r2]
 80062d8:	1dbb      	adds	r3, r7, #6
 80062da:	881b      	ldrh	r3, [r3, #0]
 80062dc:	18d3      	adds	r3, r2, r3
 80062de:	b29b      	uxth	r3, r3
 80062e0:	3308      	adds	r3, #8
 80062e2:	b299      	uxth	r1, r3
 80062e4:	4b3b      	ldr	r3, [pc, #236]	; (80063d4 <mem_malloc+0x210>)
 80062e6:	22aa      	movs	r2, #170	; 0xaa
 80062e8:	5299      	strh	r1, [r3, r2]
 80062ea:	4b3a      	ldr	r3, [pc, #232]	; (80063d4 <mem_malloc+0x210>)
 80062ec:	22ac      	movs	r2, #172	; 0xac
 80062ee:	5a9a      	ldrh	r2, [r3, r2]
 80062f0:	4b38      	ldr	r3, [pc, #224]	; (80063d4 <mem_malloc+0x210>)
 80062f2:	21aa      	movs	r1, #170	; 0xaa
 80062f4:	5a5b      	ldrh	r3, [r3, r1]
 80062f6:	429a      	cmp	r2, r3
 80062f8:	d228      	bcs.n	800634c <mem_malloc+0x188>
 80062fa:	4b36      	ldr	r3, [pc, #216]	; (80063d4 <mem_malloc+0x210>)
 80062fc:	22aa      	movs	r2, #170	; 0xaa
 80062fe:	5a99      	ldrh	r1, [r3, r2]
 8006300:	4b34      	ldr	r3, [pc, #208]	; (80063d4 <mem_malloc+0x210>)
 8006302:	22ac      	movs	r2, #172	; 0xac
 8006304:	5299      	strh	r1, [r3, r2]
 8006306:	e021      	b.n	800634c <mem_malloc+0x188>
           * take care of this).
           * -> near fit or excact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	2201      	movs	r2, #1
 800630c:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
 800630e:	4b31      	ldr	r3, [pc, #196]	; (80063d4 <mem_malloc+0x210>)
 8006310:	22aa      	movs	r2, #170	; 0xaa
 8006312:	5a9a      	ldrh	r2, [r3, r2]
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	8819      	ldrh	r1, [r3, #0]
 8006318:	6978      	ldr	r0, [r7, #20]
 800631a:	4b2d      	ldr	r3, [pc, #180]	; (80063d0 <mem_malloc+0x20c>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	1ac3      	subs	r3, r0, r3
 8006320:	b29b      	uxth	r3, r3
 8006322:	1acb      	subs	r3, r1, r3
 8006324:	b29b      	uxth	r3, r3
 8006326:	18d3      	adds	r3, r2, r3
 8006328:	b299      	uxth	r1, r3
 800632a:	4b2a      	ldr	r3, [pc, #168]	; (80063d4 <mem_malloc+0x210>)
 800632c:	22aa      	movs	r2, #170	; 0xaa
 800632e:	5299      	strh	r1, [r3, r2]
 8006330:	4b28      	ldr	r3, [pc, #160]	; (80063d4 <mem_malloc+0x210>)
 8006332:	22ac      	movs	r2, #172	; 0xac
 8006334:	5a9a      	ldrh	r2, [r3, r2]
 8006336:	4b27      	ldr	r3, [pc, #156]	; (80063d4 <mem_malloc+0x210>)
 8006338:	21aa      	movs	r1, #170	; 0xaa
 800633a:	5a5b      	ldrh	r3, [r3, r1]
 800633c:	429a      	cmp	r2, r3
 800633e:	d205      	bcs.n	800634c <mem_malloc+0x188>
 8006340:	4b24      	ldr	r3, [pc, #144]	; (80063d4 <mem_malloc+0x210>)
 8006342:	22aa      	movs	r2, #170	; 0xaa
 8006344:	5a99      	ldrh	r1, [r3, r2]
 8006346:	4b23      	ldr	r3, [pc, #140]	; (80063d4 <mem_malloc+0x210>)
 8006348:	22ac      	movs	r2, #172	; 0xac
 800634a:	5299      	strh	r1, [r3, r2]
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800634c:	4b1f      	ldr	r3, [pc, #124]	; (80063cc <mem_malloc+0x208>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	697a      	ldr	r2, [r7, #20]
 8006352:	429a      	cmp	r2, r3
 8006354:	d115      	bne.n	8006382 <mem_malloc+0x1be>
          struct mem *cur = lfree;
 8006356:	4b1d      	ldr	r3, [pc, #116]	; (80063cc <mem_malloc+0x208>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800635c:	e005      	b.n	800636a <mem_malloc+0x1a6>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 800635e:	4b1c      	ldr	r3, [pc, #112]	; (80063d0 <mem_malloc+0x20c>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	69ba      	ldr	r2, [r7, #24]
 8006364:	8812      	ldrh	r2, [r2, #0]
 8006366:	189b      	adds	r3, r3, r2
 8006368:	61bb      	str	r3, [r7, #24]
          while (cur->used && cur != ram_end) {
 800636a:	69bb      	ldr	r3, [r7, #24]
 800636c:	791b      	ldrb	r3, [r3, #4]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d004      	beq.n	800637c <mem_malloc+0x1b8>
 8006372:	4b19      	ldr	r3, [pc, #100]	; (80063d8 <mem_malloc+0x214>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	69ba      	ldr	r2, [r7, #24]
 8006378:	429a      	cmp	r2, r3
 800637a:	d1f0      	bne.n	800635e <mem_malloc+0x19a>
          }
          lfree = cur;
 800637c:	4b13      	ldr	r3, [pc, #76]	; (80063cc <mem_malloc+0x208>)
 800637e:	69ba      	ldr	r2, [r7, #24]
 8006380:	601a      	str	r2, [r3, #0]
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	3308      	adds	r3, #8
 8006386:	e01c      	b.n	80063c2 <mem_malloc+0x1fe>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 8006388:	4b11      	ldr	r3, [pc, #68]	; (80063d0 <mem_malloc+0x20c>)
 800638a:	681a      	ldr	r2, [r3, #0]
 800638c:	211e      	movs	r1, #30
 800638e:	187b      	adds	r3, r7, r1
 8006390:	881b      	ldrh	r3, [r3, #0]
 8006392:	18d2      	adds	r2, r2, r3
 8006394:	187b      	adds	r3, r7, r1
 8006396:	8812      	ldrh	r2, [r2, #0]
 8006398:	801a      	strh	r2, [r3, #0]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800639a:	231e      	movs	r3, #30
 800639c:	18fb      	adds	r3, r7, r3
 800639e:	881a      	ldrh	r2, [r3, #0]
 80063a0:	1dbb      	adds	r3, r7, #6
 80063a2:	881b      	ldrh	r3, [r3, #0]
 80063a4:	21c8      	movs	r1, #200	; 0xc8
 80063a6:	00c9      	lsls	r1, r1, #3
 80063a8:	1acb      	subs	r3, r1, r3
 80063aa:	429a      	cmp	r2, r3
 80063ac:	da00      	bge.n	80063b0 <mem_malloc+0x1ec>
 80063ae:	e736      	b.n	800621e <mem_malloc+0x5a>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
    /* if we got interrupted by a mem_free, try again */
  } while(local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
 80063b0:	4b08      	ldr	r3, [pc, #32]	; (80063d4 <mem_malloc+0x210>)
 80063b2:	22ae      	movs	r2, #174	; 0xae
 80063b4:	5a9b      	ldrh	r3, [r3, r2]
 80063b6:	3301      	adds	r3, #1
 80063b8:	b299      	uxth	r1, r3
 80063ba:	4b06      	ldr	r3, [pc, #24]	; (80063d4 <mem_malloc+0x210>)
 80063bc:	22ae      	movs	r2, #174	; 0xae
 80063be:	5299      	strh	r1, [r3, r2]
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  return NULL;
 80063c0:	2300      	movs	r3, #0
}
 80063c2:	0018      	movs	r0, r3
 80063c4:	46bd      	mov	sp, r7
 80063c6:	b008      	add	sp, #32
 80063c8:	bd80      	pop	{r7, pc}
 80063ca:	46c0      	nop			; (mov r8, r8)
 80063cc:	200005dc 	.word	0x200005dc
 80063d0:	200005d4 	.word	0x200005d4
 80063d4:	2000340c 	.word	0x2000340c
 80063d8:	200005d8 	.word	0x200005d8

080063dc <memp_init>:
 * 
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80063dc:	b590      	push	{r4, r7, lr}
 80063de:	b083      	sub	sp, #12
 80063e0:	af00      	add	r7, sp, #0
  struct memp *memp;
  u16_t i, j;

  for (i = 0; i < MEMP_MAX; ++i) {
 80063e2:	1cbb      	adds	r3, r7, #2
 80063e4:	2200      	movs	r2, #0
 80063e6:	801a      	strh	r2, [r3, #0]
 80063e8:	e039      	b.n	800645e <memp_init+0x82>
    MEMP_STATS_AVAIL(used, i, 0);
 80063ea:	1cbb      	adds	r3, r7, #2
 80063ec:	881a      	ldrh	r2, [r3, #0]
 80063ee:	4940      	ldr	r1, [pc, #256]	; (80064f0 <memp_init+0x114>)
 80063f0:	20b4      	movs	r0, #180	; 0xb4
 80063f2:	0013      	movs	r3, r2
 80063f4:	009b      	lsls	r3, r3, #2
 80063f6:	189b      	adds	r3, r3, r2
 80063f8:	005b      	lsls	r3, r3, #1
 80063fa:	18cb      	adds	r3, r1, r3
 80063fc:	181b      	adds	r3, r3, r0
 80063fe:	2200      	movs	r2, #0
 8006400:	801a      	strh	r2, [r3, #0]
    MEMP_STATS_AVAIL(max, i, 0);
 8006402:	1cbb      	adds	r3, r7, #2
 8006404:	881a      	ldrh	r2, [r3, #0]
 8006406:	493a      	ldr	r1, [pc, #232]	; (80064f0 <memp_init+0x114>)
 8006408:	20b6      	movs	r0, #182	; 0xb6
 800640a:	0013      	movs	r3, r2
 800640c:	009b      	lsls	r3, r3, #2
 800640e:	189b      	adds	r3, r3, r2
 8006410:	005b      	lsls	r3, r3, #1
 8006412:	18cb      	adds	r3, r1, r3
 8006414:	181b      	adds	r3, r3, r0
 8006416:	2200      	movs	r2, #0
 8006418:	801a      	strh	r2, [r3, #0]
    MEMP_STATS_AVAIL(err, i, 0);
 800641a:	1cbb      	adds	r3, r7, #2
 800641c:	881a      	ldrh	r2, [r3, #0]
 800641e:	4934      	ldr	r1, [pc, #208]	; (80064f0 <memp_init+0x114>)
 8006420:	20b8      	movs	r0, #184	; 0xb8
 8006422:	0013      	movs	r3, r2
 8006424:	009b      	lsls	r3, r3, #2
 8006426:	189b      	adds	r3, r3, r2
 8006428:	005b      	lsls	r3, r3, #1
 800642a:	18cb      	adds	r3, r1, r3
 800642c:	181b      	adds	r3, r3, r0
 800642e:	2200      	movs	r2, #0
 8006430:	801a      	strh	r2, [r3, #0]
    MEMP_STATS_AVAIL(avail, i, memp_num[i]);
 8006432:	1cbb      	adds	r3, r7, #2
 8006434:	8819      	ldrh	r1, [r3, #0]
 8006436:	1cbb      	adds	r3, r7, #2
 8006438:	881a      	ldrh	r2, [r3, #0]
 800643a:	4b2e      	ldr	r3, [pc, #184]	; (80064f4 <memp_init+0x118>)
 800643c:	0049      	lsls	r1, r1, #1
 800643e:	5acc      	ldrh	r4, [r1, r3]
 8006440:	492b      	ldr	r1, [pc, #172]	; (80064f0 <memp_init+0x114>)
 8006442:	20b2      	movs	r0, #178	; 0xb2
 8006444:	0013      	movs	r3, r2
 8006446:	009b      	lsls	r3, r3, #2
 8006448:	189b      	adds	r3, r3, r2
 800644a:	005b      	lsls	r3, r3, #1
 800644c:	18cb      	adds	r3, r1, r3
 800644e:	181b      	adds	r3, r3, r0
 8006450:	1c22      	adds	r2, r4, #0
 8006452:	801a      	strh	r2, [r3, #0]
  for (i = 0; i < MEMP_MAX; ++i) {
 8006454:	1cbb      	adds	r3, r7, #2
 8006456:	1cba      	adds	r2, r7, #2
 8006458:	8812      	ldrh	r2, [r2, #0]
 800645a:	3201      	adds	r2, #1
 800645c:	801a      	strh	r2, [r3, #0]
 800645e:	1cbb      	adds	r3, r7, #2
 8006460:	881b      	ldrh	r3, [r3, #0]
 8006462:	2b09      	cmp	r3, #9
 8006464:	d9c1      	bls.n	80063ea <memp_init+0xe>
  }

#if !MEMP_SEPARATE_POOLS
  memp = (struct memp *)LWIP_MEM_ALIGN(memp_memory);
 8006466:	4b24      	ldr	r3, [pc, #144]	; (80064f8 <memp_init+0x11c>)
 8006468:	3303      	adds	r3, #3
 800646a:	2203      	movs	r2, #3
 800646c:	4393      	bics	r3, r2
 800646e:	607b      	str	r3, [r7, #4]
#endif /* !MEMP_SEPARATE_POOLS */
  /* for every pool: */
  for (i = 0; i < MEMP_MAX; ++i) {
 8006470:	1cbb      	adds	r3, r7, #2
 8006472:	2200      	movs	r2, #0
 8006474:	801a      	strh	r2, [r3, #0]
 8006476:	e032      	b.n	80064de <memp_init+0x102>
    memp_tab[i] = NULL;
 8006478:	1cbb      	adds	r3, r7, #2
 800647a:	881a      	ldrh	r2, [r3, #0]
 800647c:	4b1f      	ldr	r3, [pc, #124]	; (80064fc <memp_init+0x120>)
 800647e:	0092      	lsls	r2, r2, #2
 8006480:	2100      	movs	r1, #0
 8006482:	50d1      	str	r1, [r2, r3]
#if MEMP_SEPARATE_POOLS
    memp = (struct memp*)memp_bases[i];
#endif /* MEMP_SEPARATE_POOLS */
    /* create a linked list of memp elements */
    for (j = 0; j < memp_num[i]; ++j) {
 8006484:	003b      	movs	r3, r7
 8006486:	2200      	movs	r2, #0
 8006488:	801a      	strh	r2, [r3, #0]
 800648a:	e01a      	b.n	80064c2 <memp_init+0xe6>
      memp->next = memp_tab[i];
 800648c:	1cbb      	adds	r3, r7, #2
 800648e:	881a      	ldrh	r2, [r3, #0]
 8006490:	4b1a      	ldr	r3, [pc, #104]	; (80064fc <memp_init+0x120>)
 8006492:	0092      	lsls	r2, r2, #2
 8006494:	58d2      	ldr	r2, [r2, r3]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	601a      	str	r2, [r3, #0]
      memp_tab[i] = memp;
 800649a:	1cbb      	adds	r3, r7, #2
 800649c:	881a      	ldrh	r2, [r3, #0]
 800649e:	4b17      	ldr	r3, [pc, #92]	; (80064fc <memp_init+0x120>)
 80064a0:	0092      	lsls	r2, r2, #2
 80064a2:	6879      	ldr	r1, [r7, #4]
 80064a4:	50d1      	str	r1, [r2, r3]
      memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + memp_sizes[i]
 80064a6:	1cbb      	adds	r3, r7, #2
 80064a8:	881a      	ldrh	r2, [r3, #0]
 80064aa:	4b15      	ldr	r3, [pc, #84]	; (8006500 <memp_init+0x124>)
 80064ac:	0052      	lsls	r2, r2, #1
 80064ae:	5ad3      	ldrh	r3, [r2, r3]
 80064b0:	001a      	movs	r2, r3
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	189b      	adds	r3, r3, r2
 80064b6:	607b      	str	r3, [r7, #4]
    for (j = 0; j < memp_num[i]; ++j) {
 80064b8:	003b      	movs	r3, r7
 80064ba:	003a      	movs	r2, r7
 80064bc:	8812      	ldrh	r2, [r2, #0]
 80064be:	3201      	adds	r2, #1
 80064c0:	801a      	strh	r2, [r3, #0]
 80064c2:	1cbb      	adds	r3, r7, #2
 80064c4:	881a      	ldrh	r2, [r3, #0]
 80064c6:	4b0b      	ldr	r3, [pc, #44]	; (80064f4 <memp_init+0x118>)
 80064c8:	0052      	lsls	r2, r2, #1
 80064ca:	5ad3      	ldrh	r3, [r2, r3]
 80064cc:	003a      	movs	r2, r7
 80064ce:	8812      	ldrh	r2, [r2, #0]
 80064d0:	429a      	cmp	r2, r3
 80064d2:	d3db      	bcc.n	800648c <memp_init+0xb0>
  for (i = 0; i < MEMP_MAX; ++i) {
 80064d4:	1cbb      	adds	r3, r7, #2
 80064d6:	1cba      	adds	r2, r7, #2
 80064d8:	8812      	ldrh	r2, [r2, #0]
 80064da:	3201      	adds	r2, #1
 80064dc:	801a      	strh	r2, [r3, #0]
 80064de:	1cbb      	adds	r3, r7, #2
 80064e0:	881b      	ldrh	r3, [r3, #0]
 80064e2:	2b09      	cmp	r3, #9
 80064e4:	d9c8      	bls.n	8006478 <memp_init+0x9c>
#if MEMP_OVERFLOW_CHECK
  memp_overflow_init();
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK */
}
 80064e6:	46c0      	nop			; (mov r8, r8)
 80064e8:	46bd      	mov	sp, r7
 80064ea:	b003      	add	sp, #12
 80064ec:	bd90      	pop	{r4, r7, pc}
 80064ee:	46c0      	nop			; (mov r8, r8)
 80064f0:	2000340c 	.word	0x2000340c
 80064f4:	0801c9c4 	.word	0x0801c9c4
 80064f8:	20000608 	.word	0x20000608
 80064fc:	200005e0 	.word	0x200005e0
 8006500:	0801c9b0 	.word	0x0801c9b0

08006504 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
 8006504:	b590      	push	{r4, r7, lr}
 8006506:	b085      	sub	sp, #20
 8006508:	af00      	add	r7, sp, #0
 800650a:	0002      	movs	r2, r0
 800650c:	1dfb      	adds	r3, r7, #7
 800650e:	701a      	strb	r2, [r3, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);
 
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8006510:	1dfb      	adds	r3, r7, #7
 8006512:	781b      	ldrb	r3, [r3, #0]
 8006514:	2b09      	cmp	r3, #9
 8006516:	d901      	bls.n	800651c <memp_malloc+0x18>
 8006518:	2300      	movs	r3, #0
 800651a:	e070      	b.n	80065fe <memp_malloc+0xfa>
  SYS_ARCH_PROTECT(old_level);
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

  memp = memp_tab[type];
 800651c:	1dfb      	adds	r3, r7, #7
 800651e:	781a      	ldrb	r2, [r3, #0]
 8006520:	4b39      	ldr	r3, [pc, #228]	; (8006608 <memp_malloc+0x104>)
 8006522:	0092      	lsls	r2, r2, #2
 8006524:	58d3      	ldr	r3, [r2, r3]
 8006526:	60fb      	str	r3, [r7, #12]
  
  if (memp != NULL) {
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d04f      	beq.n	80065ce <memp_malloc+0xca>
    memp_tab[type] = memp->next;
 800652e:	1dfb      	adds	r3, r7, #7
 8006530:	781a      	ldrb	r2, [r3, #0]
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	6819      	ldr	r1, [r3, #0]
 8006536:	4b34      	ldr	r3, [pc, #208]	; (8006608 <memp_malloc+0x104>)
 8006538:	0092      	lsls	r2, r2, #2
 800653a:	50d1      	str	r1, [r2, r3]
#if MEMP_OVERFLOW_CHECK
    memp->next = NULL;
    memp->file = file;
    memp->line = line;
#endif /* MEMP_OVERFLOW_CHECK */
    MEMP_STATS_INC_USED(used, type);
 800653c:	1dfb      	adds	r3, r7, #7
 800653e:	781a      	ldrb	r2, [r3, #0]
 8006540:	4932      	ldr	r1, [pc, #200]	; (800660c <memp_malloc+0x108>)
 8006542:	20b4      	movs	r0, #180	; 0xb4
 8006544:	0013      	movs	r3, r2
 8006546:	009b      	lsls	r3, r3, #2
 8006548:	189b      	adds	r3, r3, r2
 800654a:	005b      	lsls	r3, r3, #1
 800654c:	18cb      	adds	r3, r1, r3
 800654e:	181b      	adds	r3, r3, r0
 8006550:	881b      	ldrh	r3, [r3, #0]
 8006552:	1dfa      	adds	r2, r7, #7
 8006554:	7812      	ldrb	r2, [r2, #0]
 8006556:	3301      	adds	r3, #1
 8006558:	b29c      	uxth	r4, r3
 800655a:	492c      	ldr	r1, [pc, #176]	; (800660c <memp_malloc+0x108>)
 800655c:	20b4      	movs	r0, #180	; 0xb4
 800655e:	0013      	movs	r3, r2
 8006560:	009b      	lsls	r3, r3, #2
 8006562:	189b      	adds	r3, r3, r2
 8006564:	005b      	lsls	r3, r3, #1
 8006566:	18cb      	adds	r3, r1, r3
 8006568:	181b      	adds	r3, r3, r0
 800656a:	1c22      	adds	r2, r4, #0
 800656c:	801a      	strh	r2, [r3, #0]
 800656e:	1dfb      	adds	r3, r7, #7
 8006570:	781a      	ldrb	r2, [r3, #0]
 8006572:	4926      	ldr	r1, [pc, #152]	; (800660c <memp_malloc+0x108>)
 8006574:	20b6      	movs	r0, #182	; 0xb6
 8006576:	0013      	movs	r3, r2
 8006578:	009b      	lsls	r3, r3, #2
 800657a:	189b      	adds	r3, r3, r2
 800657c:	005b      	lsls	r3, r3, #1
 800657e:	18cb      	adds	r3, r1, r3
 8006580:	181b      	adds	r3, r3, r0
 8006582:	8819      	ldrh	r1, [r3, #0]
 8006584:	1dfb      	adds	r3, r7, #7
 8006586:	781a      	ldrb	r2, [r3, #0]
 8006588:	4820      	ldr	r0, [pc, #128]	; (800660c <memp_malloc+0x108>)
 800658a:	24b4      	movs	r4, #180	; 0xb4
 800658c:	0013      	movs	r3, r2
 800658e:	009b      	lsls	r3, r3, #2
 8006590:	189b      	adds	r3, r3, r2
 8006592:	005b      	lsls	r3, r3, #1
 8006594:	18c3      	adds	r3, r0, r3
 8006596:	191b      	adds	r3, r3, r4
 8006598:	881b      	ldrh	r3, [r3, #0]
 800659a:	4299      	cmp	r1, r3
 800659c:	d22e      	bcs.n	80065fc <memp_malloc+0xf8>
 800659e:	1dfb      	adds	r3, r7, #7
 80065a0:	7819      	ldrb	r1, [r3, #0]
 80065a2:	1dfb      	adds	r3, r7, #7
 80065a4:	781a      	ldrb	r2, [r3, #0]
 80065a6:	4819      	ldr	r0, [pc, #100]	; (800660c <memp_malloc+0x108>)
 80065a8:	24b4      	movs	r4, #180	; 0xb4
 80065aa:	000b      	movs	r3, r1
 80065ac:	009b      	lsls	r3, r3, #2
 80065ae:	185b      	adds	r3, r3, r1
 80065b0:	005b      	lsls	r3, r3, #1
 80065b2:	18c3      	adds	r3, r0, r3
 80065b4:	191b      	adds	r3, r3, r4
 80065b6:	881c      	ldrh	r4, [r3, #0]
 80065b8:	4914      	ldr	r1, [pc, #80]	; (800660c <memp_malloc+0x108>)
 80065ba:	20b6      	movs	r0, #182	; 0xb6
 80065bc:	0013      	movs	r3, r2
 80065be:	009b      	lsls	r3, r3, #2
 80065c0:	189b      	adds	r3, r3, r2
 80065c2:	005b      	lsls	r3, r3, #1
 80065c4:	18cb      	adds	r3, r1, r3
 80065c6:	181b      	adds	r3, r3, r0
 80065c8:	1c22      	adds	r2, r4, #0
 80065ca:	801a      	strh	r2, [r3, #0]
 80065cc:	e016      	b.n	80065fc <memp_malloc+0xf8>
    LWIP_ASSERT("memp_malloc: memp properly aligned",
                ((mem_ptr_t)memp % MEM_ALIGNMENT) == 0);
    memp = (struct memp*)(void *)((u8_t*)memp + MEMP_SIZE);
  } else {
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", memp_desc[type]));
    MEMP_STATS_INC(err, type);
 80065ce:	1dfb      	adds	r3, r7, #7
 80065d0:	781a      	ldrb	r2, [r3, #0]
 80065d2:	490e      	ldr	r1, [pc, #56]	; (800660c <memp_malloc+0x108>)
 80065d4:	20b8      	movs	r0, #184	; 0xb8
 80065d6:	0013      	movs	r3, r2
 80065d8:	009b      	lsls	r3, r3, #2
 80065da:	189b      	adds	r3, r3, r2
 80065dc:	005b      	lsls	r3, r3, #1
 80065de:	18cb      	adds	r3, r1, r3
 80065e0:	181b      	adds	r3, r3, r0
 80065e2:	881b      	ldrh	r3, [r3, #0]
 80065e4:	3301      	adds	r3, #1
 80065e6:	b29c      	uxth	r4, r3
 80065e8:	4908      	ldr	r1, [pc, #32]	; (800660c <memp_malloc+0x108>)
 80065ea:	20b8      	movs	r0, #184	; 0xb8
 80065ec:	0013      	movs	r3, r2
 80065ee:	009b      	lsls	r3, r3, #2
 80065f0:	189b      	adds	r3, r3, r2
 80065f2:	005b      	lsls	r3, r3, #1
 80065f4:	18cb      	adds	r3, r1, r3
 80065f6:	181b      	adds	r3, r3, r0
 80065f8:	1c22      	adds	r2, r4, #0
 80065fa:	801a      	strh	r2, [r3, #0]
  }

  SYS_ARCH_UNPROTECT(old_level);

  return memp;
 80065fc:	68fb      	ldr	r3, [r7, #12]
}
 80065fe:	0018      	movs	r0, r3
 8006600:	46bd      	mov	sp, r7
 8006602:	b005      	add	sp, #20
 8006604:	bd90      	pop	{r4, r7, pc}
 8006606:	46c0      	nop			; (mov r8, r8)
 8006608:	200005e0 	.word	0x200005e0
 800660c:	2000340c 	.word	0x2000340c

08006610 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8006610:	b590      	push	{r4, r7, lr}
 8006612:	b085      	sub	sp, #20
 8006614:	af00      	add	r7, sp, #0
 8006616:	0002      	movs	r2, r0
 8006618:	6039      	str	r1, [r7, #0]
 800661a:	1dfb      	adds	r3, r7, #7
 800661c:	701a      	strb	r2, [r3, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  if (mem == NULL) {
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d026      	beq.n	8006672 <memp_free+0x62>
    return;
  }
  LWIP_ASSERT("memp_free: mem properly aligned",
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	60fb      	str	r3, [r7, #12]
  memp_overflow_check_element_overflow(memp, type);
  memp_overflow_check_element_underflow(memp, type);
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
#endif /* MEMP_OVERFLOW_CHECK */

  MEMP_STATS_DEC(used, type); 
 8006628:	1dfb      	adds	r3, r7, #7
 800662a:	781a      	ldrb	r2, [r3, #0]
 800662c:	4913      	ldr	r1, [pc, #76]	; (800667c <memp_free+0x6c>)
 800662e:	20b4      	movs	r0, #180	; 0xb4
 8006630:	0013      	movs	r3, r2
 8006632:	009b      	lsls	r3, r3, #2
 8006634:	189b      	adds	r3, r3, r2
 8006636:	005b      	lsls	r3, r3, #1
 8006638:	18cb      	adds	r3, r1, r3
 800663a:	181b      	adds	r3, r3, r0
 800663c:	881b      	ldrh	r3, [r3, #0]
 800663e:	3b01      	subs	r3, #1
 8006640:	b29c      	uxth	r4, r3
 8006642:	490e      	ldr	r1, [pc, #56]	; (800667c <memp_free+0x6c>)
 8006644:	20b4      	movs	r0, #180	; 0xb4
 8006646:	0013      	movs	r3, r2
 8006648:	009b      	lsls	r3, r3, #2
 800664a:	189b      	adds	r3, r3, r2
 800664c:	005b      	lsls	r3, r3, #1
 800664e:	18cb      	adds	r3, r1, r3
 8006650:	181b      	adds	r3, r3, r0
 8006652:	1c22      	adds	r2, r4, #0
 8006654:	801a      	strh	r2, [r3, #0]
  
  memp->next = memp_tab[type]; 
 8006656:	1dfb      	adds	r3, r7, #7
 8006658:	781a      	ldrb	r2, [r3, #0]
 800665a:	4b09      	ldr	r3, [pc, #36]	; (8006680 <memp_free+0x70>)
 800665c:	0092      	lsls	r2, r2, #2
 800665e:	58d2      	ldr	r2, [r2, r3]
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	601a      	str	r2, [r3, #0]
  memp_tab[type] = memp;
 8006664:	1dfb      	adds	r3, r7, #7
 8006666:	781a      	ldrb	r2, [r3, #0]
 8006668:	4b05      	ldr	r3, [pc, #20]	; (8006680 <memp_free+0x70>)
 800666a:	0092      	lsls	r2, r2, #2
 800666c:	68f9      	ldr	r1, [r7, #12]
 800666e:	50d1      	str	r1, [r2, r3]
 8006670:	e000      	b.n	8006674 <memp_free+0x64>
    return;
 8006672:	46c0      	nop			; (mov r8, r8)
#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity());
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
}
 8006674:	46bd      	mov	sp, r7
 8006676:	b005      	add	sp, #20
 8006678:	bd90      	pop	{r4, r7, pc}
 800667a:	46c0      	nop			; (mov r8, r8)
 800667c:	2000340c 	.word	0x2000340c
 8006680:	200005e0 	.word	0x200005e0

08006684 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	af00      	add	r7, sp, #0
  netif_add(&loop_netif, &loop_ipaddr, &loop_netmask, &loop_gw, NULL, netif_loopif_init, tcpip_input);
#endif /* NO_SYS */
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8006688:	46c0      	nop			; (mov r8, r8)
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}
	...

08006690 <netif_add>:
 * @return netif, or NULL if failed.
 */
struct netif *
netif_add(struct netif *netif, ip_addr_t *ipaddr, ip_addr_t *netmask,
  ip_addr_t *gw, void *state, netif_init_fn init, netif_input_fn input)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b084      	sub	sp, #16
 8006694:	af00      	add	r7, sp, #0
 8006696:	60f8      	str	r0, [r7, #12]
 8006698:	60b9      	str	r1, [r7, #8]
 800669a:	607a      	str	r2, [r7, #4]
 800669c:	603b      	str	r3, [r7, #0]

  LWIP_ASSERT("No init function given", init != NULL);

  /* reset new interface configuration state */
  ip_addr_set_zero(&netif->ip_addr);
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2200      	movs	r2, #0
 80066a2:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero(&netif->netmask);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	2200      	movs	r2, #0
 80066a8:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero(&netif->gw);
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	2200      	movs	r2, #0
 80066ae:	60da      	str	r2, [r3, #12]
  netif->flags = 0;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2229      	movs	r2, #41	; 0x29
 80066b4:	2100      	movs	r1, #0
 80066b6:	5499      	strb	r1, [r3, r2]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	69ba      	ldr	r2, [r7, #24]
 80066bc:	61da      	str	r2, [r3, #28]
  netif->num = netif_num++;
 80066be:	4b13      	ldr	r3, [pc, #76]	; (800670c <netif_add+0x7c>)
 80066c0:	781b      	ldrb	r3, [r3, #0]
 80066c2:	1c5a      	adds	r2, r3, #1
 80066c4:	b2d1      	uxtb	r1, r2
 80066c6:	4a11      	ldr	r2, [pc, #68]	; (800670c <netif_add+0x7c>)
 80066c8:	7011      	strb	r1, [r2, #0]
 80066ca:	68fa      	ldr	r2, [r7, #12]
 80066cc:	212c      	movs	r1, #44	; 0x2c
 80066ce:	5453      	strb	r3, [r2, r1]
  netif->input = input;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	6a3a      	ldr	r2, [r7, #32]
 80066d4:	611a      	str	r2, [r3, #16]
  NETIF_SET_HWADDRHINT(netif, NULL);
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

  netif_set_addr(netif, ipaddr, netmask, gw);
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	687a      	ldr	r2, [r7, #4]
 80066da:	68b9      	ldr	r1, [r7, #8]
 80066dc:	68f8      	ldr	r0, [r7, #12]
 80066de:	f000 f819 	bl	8006714 <netif_set_addr>

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80066e2:	68fa      	ldr	r2, [r7, #12]
 80066e4:	69fb      	ldr	r3, [r7, #28]
 80066e6:	0010      	movs	r0, r2
 80066e8:	4798      	blx	r3
 80066ea:	1e03      	subs	r3, r0, #0
 80066ec:	d001      	beq.n	80066f2 <netif_add+0x62>
    return NULL;
 80066ee:	2300      	movs	r3, #0
 80066f0:	e007      	b.n	8006702 <netif_add+0x72>
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80066f2:	4b07      	ldr	r3, [pc, #28]	; (8006710 <netif_add+0x80>)
 80066f4:	681a      	ldr	r2, [r3, #0]
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80066fa:	4b05      	ldr	r3, [pc, #20]	; (8006710 <netif_add+0x80>)
 80066fc:	68fa      	ldr	r2, [r7, #12]
 80066fe:	601a      	str	r2, [r3, #0]
  LWIP_DEBUGF(NETIF_DEBUG, (" netmask "));
  ip_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip_addr_debug_print(NETIF_DEBUG, gw);
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 8006700:	68fb      	ldr	r3, [r7, #12]
}
 8006702:	0018      	movs	r0, r3
 8006704:	46bd      	mov	sp, r7
 8006706:	b004      	add	sp, #16
 8006708:	bd80      	pop	{r7, pc}
 800670a:	46c0      	nop			; (mov r8, r8)
 800670c:	200026fb 	.word	0x200026fb
 8006710:	20003400 	.word	0x20003400

08006714 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, ip_addr_t *ipaddr, ip_addr_t *netmask,
    ip_addr_t *gw)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b084      	sub	sp, #16
 8006718:	af00      	add	r7, sp, #0
 800671a:	60f8      	str	r0, [r7, #12]
 800671c:	60b9      	str	r1, [r7, #8]
 800671e:	607a      	str	r2, [r7, #4]
 8006720:	603b      	str	r3, [r7, #0]
  netif_set_ipaddr(netif, ipaddr);
 8006722:	68ba      	ldr	r2, [r7, #8]
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	0011      	movs	r1, r2
 8006728:	0018      	movs	r0, r3
 800672a:	f000 f811 	bl	8006750 <netif_set_ipaddr>
  netif_set_netmask(netif, netmask);
 800672e:	687a      	ldr	r2, [r7, #4]
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	0011      	movs	r1, r2
 8006734:	0018      	movs	r0, r3
 8006736:	f000 f877 	bl	8006828 <netif_set_netmask>
  netif_set_gw(netif, gw);
 800673a:	683a      	ldr	r2, [r7, #0]
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	0011      	movs	r1, r2
 8006740:	0018      	movs	r0, r3
 8006742:	f000 f85f 	bl	8006804 <netif_set_gw>
}
 8006746:	46c0      	nop			; (mov r8, r8)
 8006748:	46bd      	mov	sp, r7
 800674a:	b004      	add	sp, #16
 800674c:	bd80      	pop	{r7, pc}
	...

08006750 <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, ip_addr_t *ipaddr)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b086      	sub	sp, #24
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
 8006758:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct tcp_pcb *pcb;
  struct tcp_pcb_listen *lpcb;

  /* address is actually being changed? */
  if (ipaddr && (ip_addr_cmp(ipaddr, &(netif->ip_addr))) == 0) {
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d03f      	beq.n	80067e0 <netif_set_ipaddr+0x90>
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	681a      	ldr	r2, [r3, #0]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	429a      	cmp	r2, r3
 800676a:	d039      	beq.n	80067e0 <netif_set_ipaddr+0x90>
    /* extern struct tcp_pcb *tcp_active_pcbs; defined by tcp.h */
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    pcb = tcp_active_pcbs;
 800676c:	4b23      	ldr	r3, [pc, #140]	; (80067fc <netif_set_ipaddr+0xac>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	617b      	str	r3, [r7, #20]
    while (pcb != NULL) {
 8006772:	e012      	b.n	800679a <netif_set_ipaddr+0x4a>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&(pcb->local_ip), &(netif->ip_addr))
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	681a      	ldr	r2, [r3, #0]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	429a      	cmp	r2, r3
 800677e:	d109      	bne.n	8006794 <netif_set_ipaddr+0x44>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && !ip_addr_islinklocal(&(pcb->local_ip))
#endif /* LWIP_AUTOIP */
        ) {
        /* this connection must be aborted */
        struct tcp_pcb *next = pcb->next;
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	68db      	ldr	r3, [r3, #12]
 8006784:	60fb      	str	r3, [r7, #12]
        LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
        tcp_abort(pcb);
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	0018      	movs	r0, r3
 800678a:	f000 ff6f 	bl	800766c <tcp_abort>
        pcb = next;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	617b      	str	r3, [r7, #20]
 8006792:	e002      	b.n	800679a <netif_set_ipaddr+0x4a>
      } else {
        pcb = pcb->next;
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	68db      	ldr	r3, [r3, #12]
 8006798:	617b      	str	r3, [r7, #20]
    while (pcb != NULL) {
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d1e9      	bne.n	8006774 <netif_set_ipaddr+0x24>
      }
    }
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80067a0:	4b17      	ldr	r3, [pc, #92]	; (8006800 <netif_set_ipaddr+0xb0>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	613b      	str	r3, [r7, #16]
 80067a6:	e018      	b.n	80067da <netif_set_ipaddr+0x8a>
      /* PCB bound to current local interface address? */
      if ((!(ip_addr_isany(&(lpcb->local_ip)))) &&
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d012      	beq.n	80067d4 <netif_set_ipaddr+0x84>
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d00e      	beq.n	80067d4 <netif_set_ipaddr+0x84>
          (ip_addr_cmp(&(lpcb->local_ip), &(netif->ip_addr)))) {
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	685b      	ldr	r3, [r3, #4]
      if ((!(ip_addr_isany(&(lpcb->local_ip)))) &&
 80067be:	429a      	cmp	r2, r3
 80067c0:	d108      	bne.n	80067d4 <netif_set_ipaddr+0x84>
        /* The PCB is listening to the old ipaddr and
         * is set to listen to the new one instead */
        ip_addr_set(&(lpcb->local_ip), ipaddr);
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d002      	beq.n	80067ce <netif_set_ipaddr+0x7e>
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	681a      	ldr	r2, [r3, #0]
 80067cc:	e000      	b.n	80067d0 <netif_set_ipaddr+0x80>
 80067ce:	2200      	movs	r2, #0
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	601a      	str	r2, [r3, #0]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	68db      	ldr	r3, [r3, #12]
 80067d8:	613b      	str	r3, [r7, #16]
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d1e3      	bne.n	80067a8 <netif_set_ipaddr+0x58>
  }
#endif
  snmp_delete_ipaddridx_tree(netif);
  snmp_delete_iprteidx_tree(0,netif);
  /* set new IP address to netif */
  ip_addr_set(&(netif->ip_addr), ipaddr);
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d002      	beq.n	80067ec <netif_set_ipaddr+0x9c>
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	681a      	ldr	r2, [r3, #0]
 80067ea:	e000      	b.n	80067ee <netif_set_ipaddr+0x9e>
 80067ec:	2200      	movs	r2, #0
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	605a      	str	r2, [r3, #4]
    netif->name[0], netif->name[1],
    ip4_addr1_16(&netif->ip_addr),
    ip4_addr2_16(&netif->ip_addr),
    ip4_addr3_16(&netif->ip_addr),
    ip4_addr4_16(&netif->ip_addr)));
}
 80067f2:	46c0      	nop			; (mov r8, r8)
 80067f4:	46bd      	mov	sp, r7
 80067f6:	b006      	add	sp, #24
 80067f8:	bd80      	pop	{r7, pc}
 80067fa:	46c0      	nop			; (mov r8, r8)
 80067fc:	20003528 	.word	0x20003528
 8006800:	20003530 	.word	0x20003530

08006804 <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, ip_addr_t *gw)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b082      	sub	sp, #8
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
 800680c:	6039      	str	r1, [r7, #0]
  ip_addr_set(&(netif->gw), gw);
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d002      	beq.n	800681a <netif_set_gw+0x16>
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	681a      	ldr	r2, [r3, #0]
 8006818:	e000      	b.n	800681c <netif_set_gw+0x18>
 800681a:	2200      	movs	r2, #0
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	60da      	str	r2, [r3, #12]
    netif->name[0], netif->name[1],
    ip4_addr1_16(&netif->gw),
    ip4_addr2_16(&netif->gw),
    ip4_addr3_16(&netif->gw),
    ip4_addr4_16(&netif->gw)));
}
 8006820:	46c0      	nop			; (mov r8, r8)
 8006822:	46bd      	mov	sp, r7
 8006824:	b002      	add	sp, #8
 8006826:	bd80      	pop	{r7, pc}

08006828 <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, ip_addr_t *netmask)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b082      	sub	sp, #8
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
 8006830:	6039      	str	r1, [r7, #0]
  snmp_delete_iprteidx_tree(0, netif);
  /* set new netmask to netif */
  ip_addr_set(&(netif->netmask), netmask);
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d002      	beq.n	800683e <netif_set_netmask+0x16>
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	681a      	ldr	r2, [r3, #0]
 800683c:	e000      	b.n	8006840 <netif_set_netmask+0x18>
 800683e:	2200      	movs	r2, #0
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	609a      	str	r2, [r3, #8]
    netif->name[0], netif->name[1],
    ip4_addr1_16(&netif->netmask),
    ip4_addr2_16(&netif->netmask),
    ip4_addr3_16(&netif->netmask),
    ip4_addr4_16(&netif->netmask)));
}
 8006844:	46c0      	nop			; (mov r8, r8)
 8006846:	46bd      	mov	sp, r7
 8006848:	b002      	add	sp, #8
 800684a:	bd80      	pop	{r7, pc}

0800684c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b082      	sub	sp, #8
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
    snmp_delete_iprteidx_tree(1, netif);
  } else {
    /* install default route */
    snmp_insert_iprteidx_tree(1, netif);
  }
  netif_default = netif;
 8006854:	4b03      	ldr	r3, [pc, #12]	; (8006864 <netif_set_default+0x18>)
 8006856:	687a      	ldr	r2, [r7, #4]
 8006858:	601a      	str	r2, [r3, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800685a:	46c0      	nop			; (mov r8, r8)
 800685c:	46bd      	mov	sp, r7
 800685e:	b002      	add	sp, #8
 8006860:	bd80      	pop	{r7, pc}
 8006862:	46c0      	nop			; (mov r8, r8)
 8006864:	20003404 	.word	0x20003404

08006868 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
  pbuf_free_ooseq_pending = 1;
 800686c:	4b02      	ldr	r3, [pc, #8]	; (8006878 <pbuf_pool_is_empty+0x10>)
 800686e:	2201      	movs	r2, #1
 8006870:	701a      	strb	r2, [r3, #0]
  if(!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8006872:	46c0      	nop			; (mov r8, r8)
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}
 8006878:	20003408 	.word	0x20003408

0800687c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800687c:	b590      	push	{r4, r7, lr}
 800687e:	b089      	sub	sp, #36	; 0x24
 8006880:	af00      	add	r7, sp, #0
 8006882:	0004      	movs	r4, r0
 8006884:	0008      	movs	r0, r1
 8006886:	0011      	movs	r1, r2
 8006888:	1dfb      	adds	r3, r7, #7
 800688a:	1c22      	adds	r2, r4, #0
 800688c:	701a      	strb	r2, [r3, #0]
 800688e:	1d3b      	adds	r3, r7, #4
 8006890:	1c02      	adds	r2, r0, #0
 8006892:	801a      	strh	r2, [r3, #0]
 8006894:	1dbb      	adds	r3, r7, #6
 8006896:	1c0a      	adds	r2, r1, #0
 8006898:	701a      	strb	r2, [r3, #0]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 800689a:	1dfb      	adds	r3, r7, #7
 800689c:	781b      	ldrb	r3, [r3, #0]
 800689e:	2b01      	cmp	r3, #1
 80068a0:	d00d      	beq.n	80068be <pbuf_alloc+0x42>
 80068a2:	dc02      	bgt.n	80068aa <pbuf_alloc+0x2e>
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d005      	beq.n	80068b4 <pbuf_alloc+0x38>
 80068a8:	e018      	b.n	80068dc <pbuf_alloc+0x60>
 80068aa:	2b02      	cmp	r3, #2
 80068ac:	d00c      	beq.n	80068c8 <pbuf_alloc+0x4c>
 80068ae:	2b03      	cmp	r3, #3
 80068b0:	d00f      	beq.n	80068d2 <pbuf_alloc+0x56>
 80068b2:	e013      	b.n	80068dc <pbuf_alloc+0x60>
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 80068b4:	2316      	movs	r3, #22
 80068b6:	18fb      	adds	r3, r7, r3
 80068b8:	2236      	movs	r2, #54	; 0x36
 80068ba:	801a      	strh	r2, [r3, #0]
    break;
 80068bc:	e010      	b.n	80068e0 <pbuf_alloc+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_HLEN + PBUF_IP_HLEN;
 80068be:	2316      	movs	r3, #22
 80068c0:	18fb      	adds	r3, r7, r3
 80068c2:	2222      	movs	r2, #34	; 0x22
 80068c4:	801a      	strh	r2, [r3, #0]
    break;
 80068c6:	e00b      	b.n	80068e0 <pbuf_alloc+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_HLEN;
 80068c8:	2316      	movs	r3, #22
 80068ca:	18fb      	adds	r3, r7, r3
 80068cc:	220e      	movs	r2, #14
 80068ce:	801a      	strh	r2, [r3, #0]
    break;
 80068d0:	e006      	b.n	80068e0 <pbuf_alloc+0x64>
  case PBUF_RAW:
    offset = 0;
 80068d2:	2316      	movs	r3, #22
 80068d4:	18fb      	adds	r3, r7, r3
 80068d6:	2200      	movs	r2, #0
 80068d8:	801a      	strh	r2, [r3, #0]
    break;
 80068da:	e001      	b.n	80068e0 <pbuf_alloc+0x64>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
    return NULL;
 80068dc:	2300      	movs	r3, #0
 80068de:	e0e9      	b.n	8006ab4 <pbuf_alloc+0x238>
  }

  switch (type) {
 80068e0:	1dbb      	adds	r3, r7, #6
 80068e2:	781b      	ldrb	r3, [r3, #0]
 80068e4:	2b02      	cmp	r3, #2
 80068e6:	dc06      	bgt.n	80068f6 <pbuf_alloc+0x7a>
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	db00      	blt.n	80068ee <pbuf_alloc+0x72>
 80068ec:	e0bc      	b.n	8006a68 <pbuf_alloc+0x1ec>
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d100      	bne.n	80068f4 <pbuf_alloc+0x78>
 80068f2:	e082      	b.n	80069fa <pbuf_alloc+0x17e>
 80068f4:	e0d5      	b.n	8006aa2 <pbuf_alloc+0x226>
 80068f6:	2b03      	cmp	r3, #3
 80068f8:	d000      	beq.n	80068fc <pbuf_alloc+0x80>
 80068fa:	e0d2      	b.n	8006aa2 <pbuf_alloc+0x226>
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80068fc:	2009      	movs	r0, #9
 80068fe:	f7ff fe01 	bl	8006504 <memp_malloc>
 8006902:	0003      	movs	r3, r0
 8006904:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 8006906:	69fb      	ldr	r3, [r7, #28]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d103      	bne.n	8006914 <pbuf_alloc+0x98>
      PBUF_POOL_IS_EMPTY();
 800690c:	f7ff ffac 	bl	8006868 <pbuf_pool_is_empty>
      return NULL;
 8006910:	2300      	movs	r3, #0
 8006912:	e0cf      	b.n	8006ab4 <pbuf_alloc+0x238>
    }
    p->type = type;
 8006914:	69fb      	ldr	r3, [r7, #28]
 8006916:	1dba      	adds	r2, r7, #6
 8006918:	7812      	ldrb	r2, [r2, #0]
 800691a:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
 800691c:	69fb      	ldr	r3, [r7, #28]
 800691e:	2200      	movs	r2, #0
 8006920:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 8006922:	2116      	movs	r1, #22
 8006924:	187b      	adds	r3, r7, r1
 8006926:	881b      	ldrh	r3, [r3, #0]
 8006928:	3310      	adds	r3, #16
 800692a:	69fa      	ldr	r2, [r7, #28]
 800692c:	18d3      	adds	r3, r2, r3
 800692e:	3303      	adds	r3, #3
 8006930:	2203      	movs	r2, #3
 8006932:	4393      	bics	r3, r2
 8006934:	001a      	movs	r2, r3
 8006936:	69fb      	ldr	r3, [r7, #28]
 8006938:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 800693a:	69fb      	ldr	r3, [r7, #28]
 800693c:	1d3a      	adds	r2, r7, #4
 800693e:	8812      	ldrh	r2, [r2, #0]
 8006940:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8006942:	187b      	adds	r3, r7, r1
 8006944:	881b      	ldrh	r3, [r3, #0]
 8006946:	3303      	adds	r3, #3
 8006948:	2203      	movs	r2, #3
 800694a:	4393      	bics	r3, r2
 800694c:	4a5b      	ldr	r2, [pc, #364]	; (8006abc <pbuf_alloc+0x240>)
 800694e:	1ad2      	subs	r2, r2, r3
 8006950:	1d3b      	adds	r3, r7, #4
 8006952:	881b      	ldrh	r3, [r3, #0]
 8006954:	429a      	cmp	r2, r3
 8006956:	dd00      	ble.n	800695a <pbuf_alloc+0xde>
 8006958:	001a      	movs	r2, r3
 800695a:	b292      	uxth	r2, r2
 800695c:	69fb      	ldr	r3, [r7, #28]
 800695e:	815a      	strh	r2, [r3, #10]
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 8006960:	69fb      	ldr	r3, [r7, #28]
 8006962:	2201      	movs	r2, #1
 8006964:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
 8006966:	69fb      	ldr	r3, [r7, #28]
 8006968:	61bb      	str	r3, [r7, #24]
    /* remaining length to be allocated */
    rem_len = length - p->len;
 800696a:	1d3b      	adds	r3, r7, #4
 800696c:	881b      	ldrh	r3, [r3, #0]
 800696e:	69fa      	ldr	r2, [r7, #28]
 8006970:	8952      	ldrh	r2, [r2, #10]
 8006972:	1a9b      	subs	r3, r3, r2
 8006974:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 8006976:	e03c      	b.n	80069f2 <pbuf_alloc+0x176>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8006978:	2009      	movs	r0, #9
 800697a:	f7ff fdc3 	bl	8006504 <memp_malloc>
 800697e:	0003      	movs	r3, r0
 8006980:	60fb      	str	r3, [r7, #12]
      if (q == NULL) {
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d107      	bne.n	8006998 <pbuf_alloc+0x11c>
        PBUF_POOL_IS_EMPTY();
 8006988:	f7ff ff6e 	bl	8006868 <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
 800698c:	69fb      	ldr	r3, [r7, #28]
 800698e:	0018      	movs	r0, r3
 8006990:	f000 fa00 	bl	8006d94 <pbuf_free>
        /* bail out unsuccesfully */
        return NULL;
 8006994:	2300      	movs	r3, #0
 8006996:	e08d      	b.n	8006ab4 <pbuf_alloc+0x238>
      }
      q->type = type;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	1dba      	adds	r2, r7, #6
 800699c:	7812      	ldrb	r2, [r2, #0]
 800699e:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	2200      	movs	r2, #0
 80069a4:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	2200      	movs	r2, #0
 80069aa:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
 80069ac:	69bb      	ldr	r3, [r7, #24]
 80069ae:	68fa      	ldr	r2, [r7, #12]
 80069b0:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
      q->tot_len = (u16_t)rem_len;
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	b29a      	uxth	r2, r3
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	b29b      	uxth	r3, r3
 80069be:	1c19      	adds	r1, r3, #0
 80069c0:	b28b      	uxth	r3, r1
 80069c2:	4a3e      	ldr	r2, [pc, #248]	; (8006abc <pbuf_alloc+0x240>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d901      	bls.n	80069cc <pbuf_alloc+0x150>
 80069c8:	4b3c      	ldr	r3, [pc, #240]	; (8006abc <pbuf_alloc+0x240>)
 80069ca:	1c19      	adds	r1, r3, #0
 80069cc:	b28a      	uxth	r2, r1
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	3310      	adds	r3, #16
 80069d6:	001a      	movs	r2, r3
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	2201      	movs	r2, #1
 80069e0:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	895b      	ldrh	r3, [r3, #10]
 80069e6:	001a      	movs	r2, r3
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	1a9b      	subs	r3, r3, r2
 80069ec:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	61bb      	str	r3, [r7, #24]
    while (rem_len > 0) {
 80069f2:	693b      	ldr	r3, [r7, #16]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	dcbf      	bgt.n	8006978 <pbuf_alloc+0xfc>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
 80069f8:	e055      	b.n	8006aa6 <pbuf_alloc+0x22a>
  case PBUF_RAM:
    /* If pbuf is to be allocated in RAM, allocate memory for it. */
    p = (struct pbuf*)mem_malloc(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length));
 80069fa:	2316      	movs	r3, #22
 80069fc:	18fb      	adds	r3, r7, r3
 80069fe:	881b      	ldrh	r3, [r3, #0]
 8006a00:	3313      	adds	r3, #19
 8006a02:	b29b      	uxth	r3, r3
 8006a04:	2203      	movs	r2, #3
 8006a06:	4393      	bics	r3, r2
 8006a08:	b29a      	uxth	r2, r3
 8006a0a:	1d3b      	adds	r3, r7, #4
 8006a0c:	881b      	ldrh	r3, [r3, #0]
 8006a0e:	3303      	adds	r3, #3
 8006a10:	b29b      	uxth	r3, r3
 8006a12:	2103      	movs	r1, #3
 8006a14:	438b      	bics	r3, r1
 8006a16:	b29b      	uxth	r3, r3
 8006a18:	18d3      	adds	r3, r2, r3
 8006a1a:	b29b      	uxth	r3, r3
 8006a1c:	0018      	movs	r0, r3
 8006a1e:	f7ff fbd1 	bl	80061c4 <mem_malloc>
 8006a22:	0003      	movs	r3, r0
 8006a24:	61fb      	str	r3, [r7, #28]
    if (p == NULL) {
 8006a26:	69fb      	ldr	r3, [r7, #28]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d101      	bne.n	8006a30 <pbuf_alloc+0x1b4>
      return NULL;
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	e041      	b.n	8006ab4 <pbuf_alloc+0x238>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 8006a30:	2316      	movs	r3, #22
 8006a32:	18fb      	adds	r3, r7, r3
 8006a34:	881b      	ldrh	r3, [r3, #0]
 8006a36:	3310      	adds	r3, #16
 8006a38:	69fa      	ldr	r2, [r7, #28]
 8006a3a:	18d3      	adds	r3, r2, r3
 8006a3c:	3303      	adds	r3, #3
 8006a3e:	2203      	movs	r2, #3
 8006a40:	4393      	bics	r3, r2
 8006a42:	001a      	movs	r2, r3
 8006a44:	69fb      	ldr	r3, [r7, #28]
 8006a46:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 8006a48:	69fb      	ldr	r3, [r7, #28]
 8006a4a:	1d3a      	adds	r2, r7, #4
 8006a4c:	8812      	ldrh	r2, [r2, #0]
 8006a4e:	811a      	strh	r2, [r3, #8]
 8006a50:	69fb      	ldr	r3, [r7, #28]
 8006a52:	891a      	ldrh	r2, [r3, #8]
 8006a54:	69fb      	ldr	r3, [r7, #28]
 8006a56:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 8006a58:	69fb      	ldr	r3, [r7, #28]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	601a      	str	r2, [r3, #0]
    p->type = type;
 8006a5e:	69fb      	ldr	r3, [r7, #28]
 8006a60:	1dba      	adds	r2, r7, #6
 8006a62:	7812      	ldrb	r2, [r2, #0]
 8006a64:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 8006a66:	e01e      	b.n	8006aa6 <pbuf_alloc+0x22a>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8006a68:	2008      	movs	r0, #8
 8006a6a:	f7ff fd4b 	bl	8006504 <memp_malloc>
 8006a6e:	0003      	movs	r3, r0
 8006a70:	61fb      	str	r3, [r7, #28]
    if (p == NULL) {
 8006a72:	69fb      	ldr	r3, [r7, #28]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d101      	bne.n	8006a7c <pbuf_alloc+0x200>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
 8006a78:	2300      	movs	r3, #0
 8006a7a:	e01b      	b.n	8006ab4 <pbuf_alloc+0x238>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 8006a7c:	69fb      	ldr	r3, [r7, #28]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 8006a82:	69fb      	ldr	r3, [r7, #28]
 8006a84:	1d3a      	adds	r2, r7, #4
 8006a86:	8812      	ldrh	r2, [r2, #0]
 8006a88:	811a      	strh	r2, [r3, #8]
 8006a8a:	69fb      	ldr	r3, [r7, #28]
 8006a8c:	891a      	ldrh	r2, [r3, #8]
 8006a8e:	69fb      	ldr	r3, [r7, #28]
 8006a90:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 8006a92:	69fb      	ldr	r3, [r7, #28]
 8006a94:	2200      	movs	r2, #0
 8006a96:	601a      	str	r2, [r3, #0]
    p->type = type;
 8006a98:	69fb      	ldr	r3, [r7, #28]
 8006a9a:	1dba      	adds	r2, r7, #6
 8006a9c:	7812      	ldrb	r2, [r2, #0]
 8006a9e:	731a      	strb	r2, [r3, #12]
    break;
 8006aa0:	e001      	b.n	8006aa6 <pbuf_alloc+0x22a>
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
    return NULL;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	e006      	b.n	8006ab4 <pbuf_alloc+0x238>
  }
  /* set reference count */
  p->ref = 1;
 8006aa6:	69fb      	ldr	r3, [r7, #28]
 8006aa8:	2201      	movs	r2, #1
 8006aaa:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
 8006aac:	69fb      	ldr	r3, [r7, #28]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8006ab2:	69fb      	ldr	r3, [r7, #28]
}
 8006ab4:	0018      	movs	r0, r3
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	b009      	add	sp, #36	; 0x24
 8006aba:	bd90      	pop	{r4, r7, pc}
 8006abc:	000005ec 	.word	0x000005ec

08006ac0 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8006ac0:	b590      	push	{r4, r7, lr}
 8006ac2:	b085      	sub	sp, #20
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	0004      	movs	r4, r0
 8006ac8:	0008      	movs	r0, r1
 8006aca:	0011      	movs	r1, r2
 8006acc:	603b      	str	r3, [r7, #0]
 8006ace:	1dfb      	adds	r3, r7, #7
 8006ad0:	1c22      	adds	r2, r4, #0
 8006ad2:	701a      	strb	r2, [r3, #0]
 8006ad4:	1d3b      	adds	r3, r7, #4
 8006ad6:	1c02      	adds	r2, r0, #0
 8006ad8:	801a      	strh	r2, [r3, #0]
 8006ada:	1dbb      	adds	r3, r7, #6
 8006adc:	1c0a      	adds	r2, r1, #0
 8006ade:	701a      	strb	r2, [r3, #0]
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
 8006ae0:	1dfb      	adds	r3, r7, #7
 8006ae2:	781b      	ldrb	r3, [r3, #0]
 8006ae4:	2b01      	cmp	r3, #1
 8006ae6:	d00d      	beq.n	8006b04 <pbuf_alloced_custom+0x44>
 8006ae8:	dc02      	bgt.n	8006af0 <pbuf_alloced_custom+0x30>
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d005      	beq.n	8006afa <pbuf_alloced_custom+0x3a>
 8006aee:	e018      	b.n	8006b22 <pbuf_alloced_custom+0x62>
 8006af0:	2b02      	cmp	r3, #2
 8006af2:	d00c      	beq.n	8006b0e <pbuf_alloced_custom+0x4e>
 8006af4:	2b03      	cmp	r3, #3
 8006af6:	d00f      	beq.n	8006b18 <pbuf_alloced_custom+0x58>
 8006af8:	e013      	b.n	8006b22 <pbuf_alloced_custom+0x62>
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8006afa:	230e      	movs	r3, #14
 8006afc:	18fb      	adds	r3, r7, r3
 8006afe:	2236      	movs	r2, #54	; 0x36
 8006b00:	801a      	strh	r2, [r3, #0]
    break;
 8006b02:	e010      	b.n	8006b26 <pbuf_alloced_custom+0x66>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8006b04:	230e      	movs	r3, #14
 8006b06:	18fb      	adds	r3, r7, r3
 8006b08:	2222      	movs	r2, #34	; 0x22
 8006b0a:	801a      	strh	r2, [r3, #0]
    break;
 8006b0c:	e00b      	b.n	8006b26 <pbuf_alloced_custom+0x66>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_HLEN;
 8006b0e:	230e      	movs	r3, #14
 8006b10:	18fb      	adds	r3, r7, r3
 8006b12:	220e      	movs	r2, #14
 8006b14:	801a      	strh	r2, [r3, #0]
    break;
 8006b16:	e006      	b.n	8006b26 <pbuf_alloced_custom+0x66>
  case PBUF_RAW:
    offset = 0;
 8006b18:	230e      	movs	r3, #14
 8006b1a:	18fb      	adds	r3, r7, r3
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	801a      	strh	r2, [r3, #0]
    break;
 8006b20:	e001      	b.n	8006b26 <pbuf_alloced_custom+0x66>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
    return NULL;
 8006b22:	2300      	movs	r3, #0
 8006b24:	e039      	b.n	8006b9a <pbuf_alloced_custom+0xda>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8006b26:	230e      	movs	r3, #14
 8006b28:	18fb      	adds	r3, r7, r3
 8006b2a:	881b      	ldrh	r3, [r3, #0]
 8006b2c:	3303      	adds	r3, #3
 8006b2e:	2203      	movs	r2, #3
 8006b30:	4393      	bics	r3, r2
 8006b32:	001a      	movs	r2, r3
 8006b34:	1d3b      	adds	r3, r7, #4
 8006b36:	881b      	ldrh	r3, [r3, #0]
 8006b38:	18d2      	adds	r2, r2, r3
 8006b3a:	2324      	movs	r3, #36	; 0x24
 8006b3c:	18fb      	adds	r3, r7, r3
 8006b3e:	881b      	ldrh	r3, [r3, #0]
 8006b40:	429a      	cmp	r2, r3
 8006b42:	dd01      	ble.n	8006b48 <pbuf_alloced_custom+0x88>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8006b44:	2300      	movs	r3, #0
 8006b46:	e028      	b.n	8006b9a <pbuf_alloced_custom+0xda>
  }

  p->pbuf.next = NULL;
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	601a      	str	r2, [r3, #0]
  if (payload_mem != NULL) {
 8006b4e:	6a3b      	ldr	r3, [r7, #32]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d00c      	beq.n	8006b6e <pbuf_alloced_custom+0xae>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8006b54:	230e      	movs	r3, #14
 8006b56:	18fb      	adds	r3, r7, r3
 8006b58:	881b      	ldrh	r3, [r3, #0]
 8006b5a:	3303      	adds	r3, #3
 8006b5c:	001a      	movs	r2, r3
 8006b5e:	2303      	movs	r3, #3
 8006b60:	439a      	bics	r2, r3
 8006b62:	0013      	movs	r3, r2
 8006b64:	6a3a      	ldr	r2, [r7, #32]
 8006b66:	18d2      	adds	r2, r2, r3
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	605a      	str	r2, [r3, #4]
 8006b6c:	e002      	b.n	8006b74 <pbuf_alloced_custom+0xb4>
  } else {
    p->pbuf.payload = NULL;
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	2200      	movs	r2, #0
 8006b72:	605a      	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	2202      	movs	r2, #2
 8006b78:	735a      	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	1d3a      	adds	r2, r7, #4
 8006b7e:	8812      	ldrh	r2, [r2, #0]
 8006b80:	811a      	strh	r2, [r3, #8]
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	891a      	ldrh	r2, [r3, #8]
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	815a      	strh	r2, [r3, #10]
  p->pbuf.type = type;
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	1dba      	adds	r2, r7, #6
 8006b8e:	7812      	ldrb	r2, [r2, #0]
 8006b90:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	2201      	movs	r2, #1
 8006b96:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 8006b98:	683b      	ldr	r3, [r7, #0]
}
 8006b9a:	0018      	movs	r0, r3
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	b005      	add	sp, #20
 8006ba0:	bd90      	pop	{r4, r7, pc}

08006ba2 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8006ba2:	b580      	push	{r7, lr}
 8006ba4:	b086      	sub	sp, #24
 8006ba6:	af00      	add	r7, sp, #0
 8006ba8:	6078      	str	r0, [r7, #4]
 8006baa:	000a      	movs	r2, r1
 8006bac:	1cbb      	adds	r3, r7, #2
 8006bae:	801a      	strh	r2, [r3, #0]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	7b1b      	ldrb	r3, [r3, #12]
 8006bb4:	2b03      	cmp	r3, #3
 8006bb6:	d001      	beq.n	8006bbc <pbuf_realloc+0x1a>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	7b1b      	ldrb	r3, [r3, #12]
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	891b      	ldrh	r3, [r3, #8]
 8006bc0:	1cba      	adds	r2, r7, #2
 8006bc2:	8812      	ldrh	r2, [r2, #0]
 8006bc4:	429a      	cmp	r2, r3
 8006bc6:	d25a      	bcs.n	8006c7e <pbuf_realloc+0xdc>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
 8006bc8:	1cbb      	adds	r3, r7, #2
 8006bca:	881b      	ldrh	r3, [r3, #0]
 8006bcc:	687a      	ldr	r2, [r7, #4]
 8006bce:	8912      	ldrh	r2, [r2, #8]
 8006bd0:	1a9b      	subs	r3, r3, r2
 8006bd2:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8006bd4:	2312      	movs	r3, #18
 8006bd6:	18fb      	adds	r3, r7, r3
 8006bd8:	1cba      	adds	r2, r7, #2
 8006bda:	8812      	ldrh	r2, [r2, #0]
 8006bdc:	801a      	strh	r2, [r3, #0]
  q = p;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8006be2:	e012      	b.n	8006c0a <pbuf_realloc+0x68>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 8006be4:	697b      	ldr	r3, [r7, #20]
 8006be6:	895a      	ldrh	r2, [r3, #10]
 8006be8:	2112      	movs	r1, #18
 8006bea:	187b      	adds	r3, r7, r1
 8006bec:	1879      	adds	r1, r7, r1
 8006bee:	8809      	ldrh	r1, [r1, #0]
 8006bf0:	1a8a      	subs	r2, r1, r2
 8006bf2:	801a      	strh	r2, [r3, #0]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
    q->tot_len += (u16_t)grow;
 8006bf4:	697b      	ldr	r3, [r7, #20]
 8006bf6:	891a      	ldrh	r2, [r3, #8]
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	b29b      	uxth	r3, r3
 8006bfc:	18d3      	adds	r3, r2, r3
 8006bfe:	b29a      	uxth	r2, r3
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	617b      	str	r3, [r7, #20]
  while (rem_len > q->len) {
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	895b      	ldrh	r3, [r3, #10]
 8006c0e:	2212      	movs	r2, #18
 8006c10:	18ba      	adds	r2, r7, r2
 8006c12:	8812      	ldrh	r2, [r2, #0]
 8006c14:	429a      	cmp	r2, r3
 8006c16:	d8e5      	bhi.n	8006be4 <pbuf_realloc+0x42>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)) {
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	7b1b      	ldrb	r3, [r3, #12]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d118      	bne.n	8006c52 <pbuf_realloc+0xb0>
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	895b      	ldrh	r3, [r3, #10]
 8006c24:	2212      	movs	r2, #18
 8006c26:	18ba      	adds	r2, r7, r2
 8006c28:	8812      	ldrh	r2, [r2, #0]
 8006c2a:	429a      	cmp	r2, r3
 8006c2c:	d011      	beq.n	8006c52 <pbuf_realloc+0xb0>
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 8006c2e:	697b      	ldr	r3, [r7, #20]
 8006c30:	685b      	ldr	r3, [r3, #4]
 8006c32:	001a      	movs	r2, r3
 8006c34:	697b      	ldr	r3, [r7, #20]
 8006c36:	1ad3      	subs	r3, r2, r3
 8006c38:	b29a      	uxth	r2, r3
 8006c3a:	2312      	movs	r3, #18
 8006c3c:	18fb      	adds	r3, r7, r3
 8006c3e:	881b      	ldrh	r3, [r3, #0]
 8006c40:	18d3      	adds	r3, r2, r3
 8006c42:	b29a      	uxth	r2, r3
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	0011      	movs	r1, r2
 8006c48:	0018      	movs	r0, r3
 8006c4a:	f7ff f9a7 	bl	8005f9c <mem_trim>
 8006c4e:	0003      	movs	r3, r0
 8006c50:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	2212      	movs	r2, #18
 8006c56:	18ba      	adds	r2, r7, r2
 8006c58:	8812      	ldrh	r2, [r2, #0]
 8006c5a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8006c5c:	697b      	ldr	r3, [r7, #20]
 8006c5e:	895a      	ldrh	r2, [r3, #10]
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d004      	beq.n	8006c76 <pbuf_realloc+0xd4>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8006c6c:	697b      	ldr	r3, [r7, #20]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	0018      	movs	r0, r3
 8006c72:	f000 f88f 	bl	8006d94 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8006c76:	697b      	ldr	r3, [r7, #20]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	601a      	str	r2, [r3, #0]
 8006c7c:	e000      	b.n	8006c80 <pbuf_realloc+0xde>
    return;
 8006c7e:	46c0      	nop			; (mov r8, r8)

}
 8006c80:	46bd      	mov	sp, r7
 8006c82:	b006      	add	sp, #24
 8006c84:	bd80      	pop	{r7, pc}

08006c86 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 8006c86:	b580      	push	{r7, lr}
 8006c88:	b084      	sub	sp, #16
 8006c8a:	af00      	add	r7, sp, #0
 8006c8c:	6078      	str	r0, [r7, #4]
 8006c8e:	000a      	movs	r2, r1
 8006c90:	1cbb      	adds	r3, r7, #2
 8006c92:	801a      	strh	r2, [r3, #0]
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
  if ((header_size_increment == 0) || (p == NULL)) {
 8006c94:	1cbb      	adds	r3, r7, #2
 8006c96:	2200      	movs	r2, #0
 8006c98:	5e9b      	ldrsh	r3, [r3, r2]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d002      	beq.n	8006ca4 <pbuf_header+0x1e>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d101      	bne.n	8006ca8 <pbuf_header+0x22>
    return 0;
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	e071      	b.n	8006d8c <pbuf_header+0x106>
  }
 
  if (header_size_increment < 0){
 8006ca8:	1cbb      	adds	r3, r7, #2
 8006caa:	2200      	movs	r2, #0
 8006cac:	5e9b      	ldrsh	r3, [r3, r2]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	da0d      	bge.n	8006cce <pbuf_header+0x48>
    increment_magnitude = -header_size_increment;
 8006cb2:	1cbb      	adds	r3, r7, #2
 8006cb4:	881a      	ldrh	r2, [r3, #0]
 8006cb6:	210e      	movs	r1, #14
 8006cb8:	187b      	adds	r3, r7, r1
 8006cba:	4252      	negs	r2, r2
 8006cbc:	801a      	strh	r2, [r3, #0]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	895b      	ldrh	r3, [r3, #10]
 8006cc2:	187a      	adds	r2, r7, r1
 8006cc4:	8812      	ldrh	r2, [r2, #0]
 8006cc6:	429a      	cmp	r2, r3
 8006cc8:	d906      	bls.n	8006cd8 <pbuf_header+0x52>
 8006cca:	2301      	movs	r3, #1
 8006ccc:	e05e      	b.n	8006d8c <pbuf_header+0x106>
  } else {
    increment_magnitude = header_size_increment;
 8006cce:	230e      	movs	r3, #14
 8006cd0:	18fb      	adds	r3, r7, r3
 8006cd2:	1cba      	adds	r2, r7, #2
 8006cd4:	8812      	ldrh	r2, [r2, #0]
 8006cd6:	801a      	strh	r2, [r3, #0]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	7b1a      	ldrb	r2, [r3, #12]
 8006cdc:	210c      	movs	r1, #12
 8006cde:	187b      	adds	r3, r7, r1
 8006ce0:	801a      	strh	r2, [r3, #0]
  /* remember current payload pointer */
  payload = p->payload;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	685b      	ldr	r3, [r3, #4]
 8006ce6:	60bb      	str	r3, [r7, #8]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 8006ce8:	187b      	adds	r3, r7, r1
 8006cea:	881b      	ldrh	r3, [r3, #0]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d004      	beq.n	8006cfa <pbuf_header+0x74>
 8006cf0:	230c      	movs	r3, #12
 8006cf2:	18fb      	adds	r3, r7, r3
 8006cf4:	881b      	ldrh	r3, [r3, #0]
 8006cf6:	2b03      	cmp	r3, #3
 8006cf8:	d113      	bne.n	8006d22 <pbuf_header+0x9c>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	685a      	ldr	r2, [r3, #4]
 8006cfe:	1cbb      	adds	r3, r7, #2
 8006d00:	2100      	movs	r1, #0
 8006d02:	5e5b      	ldrsh	r3, [r3, r1]
 8006d04:	425b      	negs	r3, r3
 8006d06:	18d2      	adds	r2, r2, r3
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	605a      	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	685a      	ldr	r2, [r3, #4]
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	3310      	adds	r3, #16
 8006d14:	429a      	cmp	r2, r3
 8006d16:	d228      	bcs.n	8006d6a <pbuf_header+0xe4>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)(p + 1)));
      /* restore old payload pointer */
      p->payload = payload;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	68ba      	ldr	r2, [r7, #8]
 8006d1c:	605a      	str	r2, [r3, #4]
      /* bail out unsuccesfully */
      return 1;
 8006d1e:	2301      	movs	r3, #1
 8006d20:	e034      	b.n	8006d8c <pbuf_header+0x106>
    }
  /* pbuf types refering to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 8006d22:	230c      	movs	r3, #12
 8006d24:	18fb      	adds	r3, r7, r3
 8006d26:	881b      	ldrh	r3, [r3, #0]
 8006d28:	2b02      	cmp	r3, #2
 8006d2a:	d004      	beq.n	8006d36 <pbuf_header+0xb0>
 8006d2c:	230c      	movs	r3, #12
 8006d2e:	18fb      	adds	r3, r7, r3
 8006d30:	881b      	ldrh	r3, [r3, #0]
 8006d32:	2b01      	cmp	r3, #1
 8006d34:	d117      	bne.n	8006d66 <pbuf_header+0xe0>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8006d36:	1cbb      	adds	r3, r7, #2
 8006d38:	2200      	movs	r2, #0
 8006d3a:	5e9b      	ldrsh	r3, [r3, r2]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	da10      	bge.n	8006d62 <pbuf_header+0xdc>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	895b      	ldrh	r3, [r3, #10]
 8006d44:	220e      	movs	r2, #14
 8006d46:	18ba      	adds	r2, r7, r2
 8006d48:	8812      	ldrh	r2, [r2, #0]
 8006d4a:	429a      	cmp	r2, r3
 8006d4c:	d809      	bhi.n	8006d62 <pbuf_header+0xdc>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	685a      	ldr	r2, [r3, #4]
 8006d52:	1cbb      	adds	r3, r7, #2
 8006d54:	2100      	movs	r1, #0
 8006d56:	5e5b      	ldrsh	r3, [r3, r1]
 8006d58:	425b      	negs	r3, r3
 8006d5a:	18d2      	adds	r2, r2, r3
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	605a      	str	r2, [r3, #4]
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8006d60:	e003      	b.n	8006d6a <pbuf_header+0xe4>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccesfully */
      return 1;
 8006d62:	2301      	movs	r3, #1
 8006d64:	e012      	b.n	8006d8c <pbuf_header+0x106>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
    return 1;
 8006d66:	2301      	movs	r3, #1
 8006d68:	e010      	b.n	8006d8c <pbuf_header+0x106>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	895a      	ldrh	r2, [r3, #10]
 8006d6e:	1cbb      	adds	r3, r7, #2
 8006d70:	881b      	ldrh	r3, [r3, #0]
 8006d72:	18d3      	adds	r3, r2, r3
 8006d74:	b29a      	uxth	r2, r3
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	891a      	ldrh	r2, [r3, #8]
 8006d7e:	1cbb      	adds	r3, r7, #2
 8006d80:	881b      	ldrh	r3, [r3, #0]
 8006d82:	18d3      	adds	r3, r2, r3
 8006d84:	b29a      	uxth	r2, r3
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 8006d8a:	2300      	movs	r3, #0
}
 8006d8c:	0018      	movs	r0, r3
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	b004      	add	sp, #16
 8006d92:	bd80      	pop	{r7, pc}

08006d94 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b086      	sub	sp, #24
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d101      	bne.n	8006da6 <pbuf_free+0x12>
    LWIP_ASSERT("p != NULL", p != NULL);
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8006da2:	2300      	movs	r3, #0
 8006da4:	e064      	b.n	8006e70 <pbuf_free+0xdc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	7b1b      	ldrb	r3, [r3, #12]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d001      	beq.n	8006db2 <pbuf_free+0x1e>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	7b1b      	ldrb	r3, [r3, #12]
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
 8006db2:	2317      	movs	r3, #23
 8006db4:	18fb      	adds	r3, r7, r3
 8006db6:	2200      	movs	r2, #0
 8006db8:	701a      	strb	r2, [r3, #0]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8006dba:	e053      	b.n	8006e64 <pbuf_free+0xd0>
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	89db      	ldrh	r3, [r3, #14]
 8006dc0:	3b01      	subs	r3, #1
 8006dc2:	b29a      	uxth	r2, r3
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	81da      	strh	r2, [r3, #14]
 8006dc8:	2114      	movs	r1, #20
 8006dca:	187b      	adds	r3, r7, r1
 8006dcc:	687a      	ldr	r2, [r7, #4]
 8006dce:	89d2      	ldrh	r2, [r2, #14]
 8006dd0:	801a      	strh	r2, [r3, #0]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8006dd2:	187b      	adds	r3, r7, r1
 8006dd4:	881b      	ldrh	r3, [r3, #0]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d13d      	bne.n	8006e56 <pbuf_free+0xc2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	7b1a      	ldrb	r2, [r3, #12]
 8006de4:	230e      	movs	r3, #14
 8006de6:	18fb      	adds	r3, r7, r3
 8006de8:	801a      	strh	r2, [r3, #0]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	7b5b      	ldrb	r3, [r3, #13]
 8006dee:	001a      	movs	r2, r3
 8006df0:	2302      	movs	r3, #2
 8006df2:	4013      	ands	r3, r2
 8006df4:	d007      	beq.n	8006e06 <pbuf_free+0x72>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
        pc->custom_free_function(p);
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	691b      	ldr	r3, [r3, #16]
 8006dfe:	687a      	ldr	r2, [r7, #4]
 8006e00:	0010      	movs	r0, r2
 8006e02:	4798      	blx	r3
 8006e04:	e01e      	b.n	8006e44 <pbuf_free+0xb0>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 8006e06:	230e      	movs	r3, #14
 8006e08:	18fb      	adds	r3, r7, r3
 8006e0a:	881b      	ldrh	r3, [r3, #0]
 8006e0c:	2b03      	cmp	r3, #3
 8006e0e:	d105      	bne.n	8006e1c <pbuf_free+0x88>
          memp_free(MEMP_PBUF_POOL, p);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	0019      	movs	r1, r3
 8006e14:	2009      	movs	r0, #9
 8006e16:	f7ff fbfb 	bl	8006610 <memp_free>
 8006e1a:	e013      	b.n	8006e44 <pbuf_free+0xb0>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 8006e1c:	230e      	movs	r3, #14
 8006e1e:	18fb      	adds	r3, r7, r3
 8006e20:	881b      	ldrh	r3, [r3, #0]
 8006e22:	2b01      	cmp	r3, #1
 8006e24:	d004      	beq.n	8006e30 <pbuf_free+0x9c>
 8006e26:	230e      	movs	r3, #14
 8006e28:	18fb      	adds	r3, r7, r3
 8006e2a:	881b      	ldrh	r3, [r3, #0]
 8006e2c:	2b02      	cmp	r3, #2
 8006e2e:	d105      	bne.n	8006e3c <pbuf_free+0xa8>
          memp_free(MEMP_PBUF, p);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	0019      	movs	r1, r3
 8006e34:	2008      	movs	r0, #8
 8006e36:	f7ff fbeb 	bl	8006610 <memp_free>
 8006e3a:	e003      	b.n	8006e44 <pbuf_free+0xb0>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	0018      	movs	r0, r3
 8006e40:	f7ff f862 	bl	8005f08 <mem_free>
        }
      }
      count++;
 8006e44:	2117      	movs	r1, #23
 8006e46:	187b      	adds	r3, r7, r1
 8006e48:	781a      	ldrb	r2, [r3, #0]
 8006e4a:	187b      	adds	r3, r7, r1
 8006e4c:	3201      	adds	r2, #1
 8006e4e:	701a      	strb	r2, [r3, #0]
      /* proceed to next pbuf */
      p = q;
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	607b      	str	r3, [r7, #4]
 8006e54:	e006      	b.n	8006e64 <pbuf_free+0xd0>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 8006e56:	2300      	movs	r3, #0
 8006e58:	607b      	str	r3, [r7, #4]
 8006e5a:	2217      	movs	r2, #23
 8006e5c:	18bb      	adds	r3, r7, r2
 8006e5e:	18ba      	adds	r2, r7, r2
 8006e60:	7812      	ldrb	r2, [r2, #0]
 8006e62:	701a      	strb	r2, [r3, #0]
  while (p != NULL) {
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d1a8      	bne.n	8006dbc <pbuf_free+0x28>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8006e6a:	2317      	movs	r3, #23
 8006e6c:	18fb      	adds	r3, r7, r3
 8006e6e:	781b      	ldrb	r3, [r3, #0]
}
 8006e70:	0018      	movs	r0, r3
 8006e72:	46bd      	mov	sp, r7
 8006e74:	b006      	add	sp, #24
 8006e76:	bd80      	pop	{r7, pc}

08006e78 <pbuf_clen>:
 * @return the number of pbufs in a chain
 */

u8_t
pbuf_clen(struct pbuf *p)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b084      	sub	sp, #16
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
  u8_t len;

  len = 0;
 8006e80:	230f      	movs	r3, #15
 8006e82:	18fb      	adds	r3, r7, r3
 8006e84:	2200      	movs	r2, #0
 8006e86:	701a      	strb	r2, [r3, #0]
  while (p != NULL) {
 8006e88:	e008      	b.n	8006e9c <pbuf_clen+0x24>
    ++len;
 8006e8a:	220f      	movs	r2, #15
 8006e8c:	18bb      	adds	r3, r7, r2
 8006e8e:	18ba      	adds	r2, r7, r2
 8006e90:	7812      	ldrb	r2, [r2, #0]
 8006e92:	3201      	adds	r2, #1
 8006e94:	701a      	strb	r2, [r3, #0]
    p = p->next;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d1f3      	bne.n	8006e8a <pbuf_clen+0x12>
  }
  return len;
 8006ea2:	230f      	movs	r3, #15
 8006ea4:	18fb      	adds	r3, r7, r3
 8006ea6:	781b      	ldrb	r3, [r3, #0]
}
 8006ea8:	0018      	movs	r0, r3
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	b004      	add	sp, #16
 8006eae:	bd80      	pop	{r7, pc}

08006eb0 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b082      	sub	sp, #8
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
  SYS_ARCH_DECL_PROTECT(old_level);
  /* pbuf given? */
  if (p != NULL) {
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d005      	beq.n	8006eca <pbuf_ref+0x1a>
    SYS_ARCH_PROTECT(old_level);
    ++(p->ref);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	89db      	ldrh	r3, [r3, #14]
 8006ec2:	3301      	adds	r3, #1
 8006ec4:	b29a      	uxth	r2, r3
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	81da      	strh	r2, [r3, #14]
    SYS_ARCH_UNPROTECT(old_level);
  }
}
 8006eca:	46c0      	nop			; (mov r8, r8)
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	b002      	add	sp, #8
 8006ed0:	bd80      	pop	{r7, pc}

08006ed2 <pbuf_cat>:
 * @see pbuf_chain()
 */

void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8006ed2:	b580      	push	{r7, lr}
 8006ed4:	b084      	sub	sp, #16
 8006ed6:	af00      	add	r7, sp, #0
 8006ed8:	6078      	str	r0, [r7, #4]
 8006eda:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d020      	beq.n	8006f24 <pbuf_cat+0x52>
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d01d      	beq.n	8006f24 <pbuf_cat+0x52>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	60fb      	str	r3, [r7, #12]
 8006eec:	e00a      	b.n	8006f04 <pbuf_cat+0x32>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	891a      	ldrh	r2, [r3, #8]
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	891b      	ldrh	r3, [r3, #8]
 8006ef6:	18d3      	adds	r3, r2, r3
 8006ef8:	b29a      	uxth	r2, r3
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	60fb      	str	r3, [r7, #12]
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d1f0      	bne.n	8006eee <pbuf_cat+0x1c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	891a      	ldrh	r2, [r3, #8]
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	891b      	ldrh	r3, [r3, #8]
 8006f14:	18d3      	adds	r3, r2, r3
 8006f16:	b29a      	uxth	r2, r3
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	683a      	ldr	r2, [r7, #0]
 8006f20:	601a      	str	r2, [r3, #0]
 8006f22:	e000      	b.n	8006f26 <pbuf_cat+0x54>
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8006f24:	46c0      	nop			; (mov r8, r8)
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8006f26:	46bd      	mov	sp, r7
 8006f28:	b004      	add	sp, #16
 8006f2a:	bd80      	pop	{r7, pc}

08006f2c <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b082      	sub	sp, #8
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
 8006f34:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8006f36:	683a      	ldr	r2, [r7, #0]
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	0011      	movs	r1, r2
 8006f3c:	0018      	movs	r0, r3
 8006f3e:	f7ff ffc8 	bl	8006ed2 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	0018      	movs	r0, r3
 8006f46:	f7ff ffb3 	bl	8006eb0 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8006f4a:	46c0      	nop			; (mov r8, r8)
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	b002      	add	sp, #8
 8006f50:	bd80      	pop	{r7, pc}

08006f52 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, struct pbuf *p_from)
{
 8006f52:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f54:	b085      	sub	sp, #20
 8006f56:	af00      	add	r7, sp, #0
 8006f58:	6078      	str	r0, [r7, #4]
 8006f5a:	6039      	str	r1, [r7, #0]
  u16_t offset_to=0, offset_from=0, len;
 8006f5c:	230e      	movs	r3, #14
 8006f5e:	18fb      	adds	r3, r7, r3
 8006f60:	2200      	movs	r2, #0
 8006f62:	801a      	strh	r2, [r3, #0]
 8006f64:	230c      	movs	r3, #12
 8006f66:	18fb      	adds	r3, r7, r3
 8006f68:	2200      	movs	r2, #0
 8006f6a:	801a      	strh	r2, [r3, #0]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (void*)p_to, (void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d008      	beq.n	8006f84 <pbuf_copy+0x32>
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d005      	beq.n	8006f84 <pbuf_copy+0x32>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	891a      	ldrh	r2, [r3, #8]
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	891b      	ldrh	r3, [r3, #8]
 8006f80:	429a      	cmp	r2, r3
 8006f82:	d202      	bcs.n	8006f8a <pbuf_copy+0x38>
 8006f84:	230e      	movs	r3, #14
 8006f86:	425b      	negs	r3, r3
 8006f88:	e08c      	b.n	80070a4 <pbuf_copy+0x152>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	895b      	ldrh	r3, [r3, #10]
 8006f8e:	001a      	movs	r2, r3
 8006f90:	230e      	movs	r3, #14
 8006f92:	18fb      	adds	r3, r7, r3
 8006f94:	881b      	ldrh	r3, [r3, #0]
 8006f96:	1ad2      	subs	r2, r2, r3
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	895b      	ldrh	r3, [r3, #10]
 8006f9c:	0019      	movs	r1, r3
 8006f9e:	230c      	movs	r3, #12
 8006fa0:	18fb      	adds	r3, r7, r3
 8006fa2:	881b      	ldrh	r3, [r3, #0]
 8006fa4:	1acb      	subs	r3, r1, r3
 8006fa6:	429a      	cmp	r2, r3
 8006fa8:	db09      	blt.n	8006fbe <pbuf_copy+0x6c>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	8959      	ldrh	r1, [r3, #10]
 8006fae:	230a      	movs	r3, #10
 8006fb0:	18fb      	adds	r3, r7, r3
 8006fb2:	220c      	movs	r2, #12
 8006fb4:	18ba      	adds	r2, r7, r2
 8006fb6:	8812      	ldrh	r2, [r2, #0]
 8006fb8:	1a8a      	subs	r2, r1, r2
 8006fba:	801a      	strh	r2, [r3, #0]
 8006fbc:	e008      	b.n	8006fd0 <pbuf_copy+0x7e>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	8959      	ldrh	r1, [r3, #10]
 8006fc2:	230a      	movs	r3, #10
 8006fc4:	18fb      	adds	r3, r7, r3
 8006fc6:	220e      	movs	r2, #14
 8006fc8:	18ba      	adds	r2, r7, r2
 8006fca:	8812      	ldrh	r2, [r2, #0]
 8006fcc:	1a8a      	subs	r2, r1, r2
 8006fce:	801a      	strh	r2, [r3, #0]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	685a      	ldr	r2, [r3, #4]
 8006fd4:	250e      	movs	r5, #14
 8006fd6:	197b      	adds	r3, r7, r5
 8006fd8:	881b      	ldrh	r3, [r3, #0]
 8006fda:	18d0      	adds	r0, r2, r3
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	685a      	ldr	r2, [r3, #4]
 8006fe0:	240c      	movs	r4, #12
 8006fe2:	193b      	adds	r3, r7, r4
 8006fe4:	881b      	ldrh	r3, [r3, #0]
 8006fe6:	18d1      	adds	r1, r2, r3
 8006fe8:	260a      	movs	r6, #10
 8006fea:	19bb      	adds	r3, r7, r6
 8006fec:	881b      	ldrh	r3, [r3, #0]
 8006fee:	001a      	movs	r2, r3
 8006ff0:	f00b f831 	bl	8012056 <memcpy>
    offset_to += len;
 8006ff4:	197b      	adds	r3, r7, r5
 8006ff6:	1979      	adds	r1, r7, r5
 8006ff8:	0030      	movs	r0, r6
 8006ffa:	183a      	adds	r2, r7, r0
 8006ffc:	8809      	ldrh	r1, [r1, #0]
 8006ffe:	8812      	ldrh	r2, [r2, #0]
 8007000:	188a      	adds	r2, r1, r2
 8007002:	801a      	strh	r2, [r3, #0]
    offset_from += len;
 8007004:	193b      	adds	r3, r7, r4
 8007006:	1939      	adds	r1, r7, r4
 8007008:	183a      	adds	r2, r7, r0
 800700a:	8809      	ldrh	r1, [r1, #0]
 800700c:	8812      	ldrh	r2, [r2, #0]
 800700e:	188a      	adds	r2, r1, r2
 8007010:	801a      	strh	r2, [r3, #0]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
    if (offset_from >= p_from->len) {
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	895b      	ldrh	r3, [r3, #10]
 8007016:	193a      	adds	r2, r7, r4
 8007018:	8812      	ldrh	r2, [r2, #0]
 800701a:	429a      	cmp	r2, r3
 800701c:	d306      	bcc.n	800702c <pbuf_copy+0xda>
      /* on to next p_from (if any) */
      offset_from = 0;
 800701e:	230c      	movs	r3, #12
 8007020:	18fb      	adds	r3, r7, r3
 8007022:	2200      	movs	r2, #0
 8007024:	801a      	strh	r2, [r3, #0]
      p_from = p_from->next;
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	895b      	ldrh	r3, [r3, #10]
 8007030:	220e      	movs	r2, #14
 8007032:	18ba      	adds	r2, r7, r2
 8007034:	8812      	ldrh	r2, [r2, #0]
 8007036:	429a      	cmp	r2, r3
 8007038:	d10f      	bne.n	800705a <pbuf_copy+0x108>
      /* on to next p_to (if any) */
      offset_to = 0;
 800703a:	230e      	movs	r3, #14
 800703c:	18fb      	adds	r3, r7, r3
 800703e:	2200      	movs	r2, #0
 8007040:	801a      	strh	r2, [r3, #0]
      p_to = p_to->next;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d105      	bne.n	800705a <pbuf_copy+0x108>
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d002      	beq.n	800705a <pbuf_copy+0x108>
 8007054:	230e      	movs	r3, #14
 8007056:	425b      	negs	r3, r3
 8007058:	e024      	b.n	80070a4 <pbuf_copy+0x152>
    }

    if((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d00c      	beq.n	800707a <pbuf_copy+0x128>
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	895a      	ldrh	r2, [r3, #10]
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	891b      	ldrh	r3, [r3, #8]
 8007068:	429a      	cmp	r2, r3
 800706a:	d106      	bne.n	800707a <pbuf_copy+0x128>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!\n",
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d002      	beq.n	800707a <pbuf_copy+0x128>
 8007074:	2306      	movs	r3, #6
 8007076:	425b      	negs	r3, r3
 8007078:	e014      	b.n	80070a4 <pbuf_copy+0x152>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d00c      	beq.n	800709a <pbuf_copy+0x148>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	895a      	ldrh	r2, [r3, #10]
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	891b      	ldrh	r3, [r3, #8]
 8007088:	429a      	cmp	r2, r3
 800708a:	d106      	bne.n	800709a <pbuf_copy+0x148>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!\n",
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d002      	beq.n	800709a <pbuf_copy+0x148>
 8007094:	2306      	movs	r3, #6
 8007096:	425b      	negs	r3, r3
 8007098:	e004      	b.n	80070a4 <pbuf_copy+0x152>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d000      	beq.n	80070a2 <pbuf_copy+0x150>
 80070a0:	e773      	b.n	8006f8a <pbuf_copy+0x38>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80070a2:	2300      	movs	r3, #0
}
 80070a4:	0018      	movs	r0, r3
 80070a6:	46bd      	mov	sp, r7
 80070a8:	b005      	add	sp, #20
 80070aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080070ac <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80070ac:	b5b0      	push	{r4, r5, r7, lr}
 80070ae:	b088      	sub	sp, #32
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	60f8      	str	r0, [r7, #12]
 80070b4:	60b9      	str	r1, [r7, #8]
 80070b6:	0019      	movs	r1, r3
 80070b8:	1dbb      	adds	r3, r7, #6
 80070ba:	801a      	strh	r2, [r3, #0]
 80070bc:	1d3b      	adds	r3, r7, #4
 80070be:	1c0a      	adds	r2, r1, #0
 80070c0:	801a      	strh	r2, [r3, #0]
  struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80070c2:	2316      	movs	r3, #22
 80070c4:	18fb      	adds	r3, r7, r3
 80070c6:	2200      	movs	r2, #0
 80070c8:	801a      	strh	r2, [r3, #0]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d101      	bne.n	80070d4 <pbuf_copy_partial+0x28>
 80070d0:	2300      	movs	r3, #0
 80070d2:	e06f      	b.n	80071b4 <pbuf_copy_partial+0x108>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d101      	bne.n	80070de <pbuf_copy_partial+0x32>
 80070da:	2300      	movs	r3, #0
 80070dc:	e06a      	b.n	80071b4 <pbuf_copy_partial+0x108>

  left = 0;
 80070de:	231a      	movs	r3, #26
 80070e0:	18fb      	adds	r3, r7, r3
 80070e2:	2200      	movs	r2, #0
 80070e4:	801a      	strh	r2, [r3, #0]

  if((buf == NULL) || (dataptr == NULL)) {
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d002      	beq.n	80070f2 <pbuf_copy_partial+0x46>
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d101      	bne.n	80070f6 <pbuf_copy_partial+0x4a>
    return 0;
 80070f2:	2300      	movs	r3, #0
 80070f4:	e05e      	b.n	80071b4 <pbuf_copy_partial+0x108>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for(p = buf; len != 0 && p != NULL; p = p->next) {
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	61fb      	str	r3, [r7, #28]
 80070fa:	e051      	b.n	80071a0 <pbuf_copy_partial+0xf4>
    if ((offset != 0) && (offset >= p->len)) {
 80070fc:	1d3b      	adds	r3, r7, #4
 80070fe:	881b      	ldrh	r3, [r3, #0]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d00d      	beq.n	8007120 <pbuf_copy_partial+0x74>
 8007104:	69fb      	ldr	r3, [r7, #28]
 8007106:	895b      	ldrh	r3, [r3, #10]
 8007108:	1d3a      	adds	r2, r7, #4
 800710a:	8812      	ldrh	r2, [r2, #0]
 800710c:	429a      	cmp	r2, r3
 800710e:	d307      	bcc.n	8007120 <pbuf_copy_partial+0x74>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
 8007110:	69fb      	ldr	r3, [r7, #28]
 8007112:	895a      	ldrh	r2, [r3, #10]
 8007114:	1d3b      	adds	r3, r7, #4
 8007116:	1d39      	adds	r1, r7, #4
 8007118:	8809      	ldrh	r1, [r1, #0]
 800711a:	1a8a      	subs	r2, r1, r2
 800711c:	801a      	strh	r2, [r3, #0]
 800711e:	e03c      	b.n	800719a <pbuf_copy_partial+0xee>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 8007120:	69fb      	ldr	r3, [r7, #28]
 8007122:	8959      	ldrh	r1, [r3, #10]
 8007124:	2018      	movs	r0, #24
 8007126:	183b      	adds	r3, r7, r0
 8007128:	1d3a      	adds	r2, r7, #4
 800712a:	8812      	ldrh	r2, [r2, #0]
 800712c:	1a8a      	subs	r2, r1, r2
 800712e:	801a      	strh	r2, [r3, #0]
      if (buf_copy_len > len)
 8007130:	183a      	adds	r2, r7, r0
 8007132:	1dbb      	adds	r3, r7, #6
 8007134:	8812      	ldrh	r2, [r2, #0]
 8007136:	881b      	ldrh	r3, [r3, #0]
 8007138:	429a      	cmp	r2, r3
 800713a:	d904      	bls.n	8007146 <pbuf_copy_partial+0x9a>
          buf_copy_len = len;
 800713c:	2318      	movs	r3, #24
 800713e:	18fb      	adds	r3, r7, r3
 8007140:	1dba      	adds	r2, r7, #6
 8007142:	8812      	ldrh	r2, [r2, #0]
 8007144:	801a      	strh	r2, [r3, #0]
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 8007146:	251a      	movs	r5, #26
 8007148:	197b      	adds	r3, r7, r5
 800714a:	881b      	ldrh	r3, [r3, #0]
 800714c:	68ba      	ldr	r2, [r7, #8]
 800714e:	18d0      	adds	r0, r2, r3
 8007150:	69fb      	ldr	r3, [r7, #28]
 8007152:	685a      	ldr	r2, [r3, #4]
 8007154:	1d3b      	adds	r3, r7, #4
 8007156:	881b      	ldrh	r3, [r3, #0]
 8007158:	18d1      	adds	r1, r2, r3
 800715a:	2418      	movs	r4, #24
 800715c:	193b      	adds	r3, r7, r4
 800715e:	881b      	ldrh	r3, [r3, #0]
 8007160:	001a      	movs	r2, r3
 8007162:	f00a ff78 	bl	8012056 <memcpy>
      copied_total += buf_copy_len;
 8007166:	2216      	movs	r2, #22
 8007168:	18bb      	adds	r3, r7, r2
 800716a:	18b9      	adds	r1, r7, r2
 800716c:	0020      	movs	r0, r4
 800716e:	183a      	adds	r2, r7, r0
 8007170:	8809      	ldrh	r1, [r1, #0]
 8007172:	8812      	ldrh	r2, [r2, #0]
 8007174:	188a      	adds	r2, r1, r2
 8007176:	801a      	strh	r2, [r3, #0]
      left += buf_copy_len;
 8007178:	197b      	adds	r3, r7, r5
 800717a:	1979      	adds	r1, r7, r5
 800717c:	183a      	adds	r2, r7, r0
 800717e:	8809      	ldrh	r1, [r1, #0]
 8007180:	8812      	ldrh	r2, [r2, #0]
 8007182:	188a      	adds	r2, r1, r2
 8007184:	801a      	strh	r2, [r3, #0]
      len -= buf_copy_len;
 8007186:	1dbb      	adds	r3, r7, #6
 8007188:	1db9      	adds	r1, r7, #6
 800718a:	183a      	adds	r2, r7, r0
 800718c:	8809      	ldrh	r1, [r1, #0]
 800718e:	8812      	ldrh	r2, [r2, #0]
 8007190:	1a8a      	subs	r2, r1, r2
 8007192:	801a      	strh	r2, [r3, #0]
      offset = 0;
 8007194:	1d3b      	adds	r3, r7, #4
 8007196:	2200      	movs	r2, #0
 8007198:	801a      	strh	r2, [r3, #0]
  for(p = buf; len != 0 && p != NULL; p = p->next) {
 800719a:	69fb      	ldr	r3, [r7, #28]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	61fb      	str	r3, [r7, #28]
 80071a0:	1dbb      	adds	r3, r7, #6
 80071a2:	881b      	ldrh	r3, [r3, #0]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d002      	beq.n	80071ae <pbuf_copy_partial+0x102>
 80071a8:	69fb      	ldr	r3, [r7, #28]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d1a6      	bne.n	80070fc <pbuf_copy_partial+0x50>
    }
  }
  return copied_total;
 80071ae:	2316      	movs	r3, #22
 80071b0:	18fb      	adds	r3, r7, r3
 80071b2:	881b      	ldrh	r3, [r3, #0]
}
 80071b4:	0018      	movs	r0, r3
 80071b6:	46bd      	mov	sp, r7
 80071b8:	b008      	add	sp, #32
 80071ba:	bdb0      	pop	{r4, r5, r7, pc}

080071bc <raw_input>:
 *           caller).
 *
 */
u8_t
raw_input(struct pbuf *p, struct netif *inp)
{
 80071bc:	b590      	push	{r4, r7, lr}
 80071be:	b089      	sub	sp, #36	; 0x24
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
 80071c4:	6039      	str	r1, [r7, #0]
  struct raw_pcb *pcb, *prev;
  struct ip_hdr *iphdr;
  s16_t proto;
  u8_t eaten = 0;
 80071c6:	2317      	movs	r3, #23
 80071c8:	18fb      	adds	r3, r7, r3
 80071ca:	2200      	movs	r2, #0
 80071cc:	701a      	strb	r2, [r3, #0]

  LWIP_UNUSED_ARG(inp);

  iphdr = (struct ip_hdr *)p->payload;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	685b      	ldr	r3, [r3, #4]
 80071d2:	613b      	str	r3, [r7, #16]
  proto = IPH_PROTO(iphdr);
 80071d4:	693b      	ldr	r3, [r7, #16]
 80071d6:	7a5a      	ldrb	r2, [r3, #9]
 80071d8:	230e      	movs	r3, #14
 80071da:	18fb      	adds	r3, r7, r3
 80071dc:	801a      	strh	r2, [r3, #0]

  prev = NULL;
 80071de:	2300      	movs	r3, #0
 80071e0:	61bb      	str	r3, [r7, #24]
  pcb = raw_pcbs;
 80071e2:	4b28      	ldr	r3, [pc, #160]	; (8007284 <raw_input+0xc8>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	61fb      	str	r3, [r7, #28]
  /* loop through all raw pcbs until the packet is eaten by one */
  /* this allows multiple pcbs to match against the packet by design */
  while ((eaten == 0) && (pcb != NULL)) {
 80071e8:	e03c      	b.n	8007264 <raw_input+0xa8>
    if ((pcb->protocol == proto) &&
 80071ea:	69fb      	ldr	r3, [r7, #28]
 80071ec:	7c1b      	ldrb	r3, [r3, #16]
 80071ee:	001a      	movs	r2, r3
 80071f0:	230e      	movs	r3, #14
 80071f2:	18fb      	adds	r3, r7, r3
 80071f4:	2100      	movs	r1, #0
 80071f6:	5e5b      	ldrsh	r3, [r3, r1]
 80071f8:	429a      	cmp	r2, r3
 80071fa:	d12e      	bne.n	800725a <raw_input+0x9e>
        (ip_addr_isany(&pcb->local_ip) ||
 80071fc:	69fb      	ldr	r3, [r7, #28]
    if ((pcb->protocol == proto) &&
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d009      	beq.n	8007216 <raw_input+0x5a>
        (ip_addr_isany(&pcb->local_ip) ||
 8007202:	69fb      	ldr	r3, [r7, #28]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d005      	beq.n	8007216 <raw_input+0x5a>
         ip_addr_cmp(&(pcb->local_ip), &current_iphdr_dest))) {
 800720a:	69fb      	ldr	r3, [r7, #28]
 800720c:	681a      	ldr	r2, [r3, #0]
 800720e:	4b1e      	ldr	r3, [pc, #120]	; (8007288 <raw_input+0xcc>)
 8007210:	681b      	ldr	r3, [r3, #0]
        (ip_addr_isany(&pcb->local_ip) ||
 8007212:	429a      	cmp	r2, r3
 8007214:	d121      	bne.n	800725a <raw_input+0x9e>
      /* broadcast filter? */
      if (ip_get_option(pcb, SOF_BROADCAST) || !ip_addr_isbroadcast(&current_iphdr_dest, inp))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        /* receive callback function available? */
        if (pcb->recv != NULL) {
 8007216:	69fb      	ldr	r3, [r7, #28]
 8007218:	695b      	ldr	r3, [r3, #20]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d01d      	beq.n	800725a <raw_input+0x9e>
          /* the receive callback function did not eat the packet? */
          if (pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr()) != 0) {
 800721e:	69fb      	ldr	r3, [r7, #28]
 8007220:	695c      	ldr	r4, [r3, #20]
 8007222:	69fb      	ldr	r3, [r7, #28]
 8007224:	6998      	ldr	r0, [r3, #24]
 8007226:	4b19      	ldr	r3, [pc, #100]	; (800728c <raw_input+0xd0>)
 8007228:	687a      	ldr	r2, [r7, #4]
 800722a:	69f9      	ldr	r1, [r7, #28]
 800722c:	47a0      	blx	r4
 800722e:	1e03      	subs	r3, r0, #0
 8007230:	d013      	beq.n	800725a <raw_input+0x9e>
            /* receive function ate the packet */
            p = NULL;
 8007232:	2300      	movs	r3, #0
 8007234:	607b      	str	r3, [r7, #4]
            eaten = 1;
 8007236:	2317      	movs	r3, #23
 8007238:	18fb      	adds	r3, r7, r3
 800723a:	2201      	movs	r2, #1
 800723c:	701a      	strb	r2, [r3, #0]
            if (prev != NULL) {
 800723e:	69bb      	ldr	r3, [r7, #24]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d00a      	beq.n	800725a <raw_input+0x9e>
            /* move the pcb to the front of raw_pcbs so that is
               found faster next time */
              prev->next = pcb->next;
 8007244:	69fb      	ldr	r3, [r7, #28]
 8007246:	68da      	ldr	r2, [r3, #12]
 8007248:	69bb      	ldr	r3, [r7, #24]
 800724a:	60da      	str	r2, [r3, #12]
              pcb->next = raw_pcbs;
 800724c:	4b0d      	ldr	r3, [pc, #52]	; (8007284 <raw_input+0xc8>)
 800724e:	681a      	ldr	r2, [r3, #0]
 8007250:	69fb      	ldr	r3, [r7, #28]
 8007252:	60da      	str	r2, [r3, #12]
              raw_pcbs = pcb;
 8007254:	4b0b      	ldr	r3, [pc, #44]	; (8007284 <raw_input+0xc8>)
 8007256:	69fa      	ldr	r2, [r7, #28]
 8007258:	601a      	str	r2, [r3, #0]
        }
        /* no receive callback function was set for this raw PCB */
      }
      /* drop the packet */
    }
    prev = pcb;
 800725a:	69fb      	ldr	r3, [r7, #28]
 800725c:	61bb      	str	r3, [r7, #24]
    pcb = pcb->next;
 800725e:	69fb      	ldr	r3, [r7, #28]
 8007260:	68db      	ldr	r3, [r3, #12]
 8007262:	61fb      	str	r3, [r7, #28]
  while ((eaten == 0) && (pcb != NULL)) {
 8007264:	2317      	movs	r3, #23
 8007266:	18fb      	adds	r3, r7, r3
 8007268:	781b      	ldrb	r3, [r3, #0]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d102      	bne.n	8007274 <raw_input+0xb8>
 800726e:	69fb      	ldr	r3, [r7, #28]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d1ba      	bne.n	80071ea <raw_input+0x2e>
  }
  return eaten;
 8007274:	2317      	movs	r3, #23
 8007276:	18fb      	adds	r3, r7, r3
 8007278:	781b      	ldrb	r3, [r3, #0]
}
 800727a:	0018      	movs	r0, r3
 800727c:	46bd      	mov	sp, r7
 800727e:	b009      	add	sp, #36	; 0x24
 8007280:	bd90      	pop	{r4, r7, pc}
 8007282:	46c0      	nop			; (mov r8, r8)
 8007284:	200026fc 	.word	0x200026fc
 8007288:	20003550 	.word	0x20003550
 800728c:	20003548 	.word	0x20003548

08007290 <stats_init>:
#include <string.h>

struct stats_ lwip_stats;

void stats_init(void)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	af00      	add	r7, sp, #0
#endif /* MEMP_STATS */
#if MEM_STATS
  lwip_stats.mem.name = "MEM";
#endif /* MEM_STATS */
#endif /* LWIP_DEBUG */
}
 8007294:	46c0      	nop			; (mov r8, r8)
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}

0800729a <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800729a:	b580      	push	{r7, lr}
 800729c:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 800729e:	46c0      	nop			; (mov r8, r8)
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}

080072a4 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80072a8:	f000 fe32 	bl	8007f10 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80072ac:	4b08      	ldr	r3, [pc, #32]	; (80072d0 <tcp_tmr+0x2c>)
 80072ae:	781b      	ldrb	r3, [r3, #0]
 80072b0:	3301      	adds	r3, #1
 80072b2:	b2da      	uxtb	r2, r3
 80072b4:	4b06      	ldr	r3, [pc, #24]	; (80072d0 <tcp_tmr+0x2c>)
 80072b6:	701a      	strb	r2, [r3, #0]
 80072b8:	4b05      	ldr	r3, [pc, #20]	; (80072d0 <tcp_tmr+0x2c>)
 80072ba:	781b      	ldrb	r3, [r3, #0]
 80072bc:	001a      	movs	r2, r3
 80072be:	2301      	movs	r3, #1
 80072c0:	4013      	ands	r3, r2
 80072c2:	d001      	beq.n	80072c8 <tcp_tmr+0x24>
    /* Call tcp_tmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 80072c4:	f000 fbb6 	bl	8007a34 <tcp_slowtmr>
  }
}
 80072c8:	46c0      	nop			; (mov r8, r8)
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}
 80072ce:	46c0      	nop			; (mov r8, r8)
 80072d0:	20002700 	.word	0x20002700

080072d4 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80072d4:	b5b0      	push	{r4, r5, r7, lr}
 80072d6:	b086      	sub	sp, #24
 80072d8:	af02      	add	r7, sp, #8
 80072da:	6078      	str	r0, [r7, #4]
 80072dc:	000a      	movs	r2, r1
 80072de:	1cfb      	adds	r3, r7, #3
 80072e0:	701a      	strb	r2, [r3, #0]
  err_t err;

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80072e2:	1cfb      	adds	r3, r7, #3
 80072e4:	781b      	ldrb	r3, [r3, #0]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d100      	bne.n	80072ec <tcp_close_shutdown+0x18>
 80072ea:	e068      	b.n	80073be <tcp_close_shutdown+0xea>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	7e1b      	ldrb	r3, [r3, #24]
 80072f0:	2b04      	cmp	r3, #4
 80072f2:	d003      	beq.n	80072fc <tcp_close_shutdown+0x28>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	7e1b      	ldrb	r3, [r3, #24]
 80072f8:	2b07      	cmp	r3, #7
 80072fa:	d160      	bne.n	80073be <tcp_close_shutdown+0xea>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND)) {
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007300:	2b00      	cmp	r3, #0
 8007302:	d104      	bne.n	800730e <tcp_close_shutdown+0x3a>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007308:	4a8b      	ldr	r2, [pc, #556]	; (8007538 <tcp_close_shutdown+0x264>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d057      	beq.n	80073be <tcp_close_shutdown+0xea>
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8007316:	687c      	ldr	r4, [r7, #4]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	1d1d      	adds	r5, r3, #4
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	8b5b      	ldrh	r3, [r3, #26]
 8007320:	687a      	ldr	r2, [r7, #4]
 8007322:	8b92      	ldrh	r2, [r2, #28]
 8007324:	9201      	str	r2, [sp, #4]
 8007326:	9300      	str	r3, [sp, #0]
 8007328:	002b      	movs	r3, r5
 800732a:	0022      	movs	r2, r4
 800732c:	f004 ff4a 	bl	800c1c4 <tcp_rst>
        pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	0018      	movs	r0, r3
 8007334:	f001 f8bd 	bl	80084b2 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8007338:	4b80      	ldr	r3, [pc, #512]	; (800753c <tcp_close_shutdown+0x268>)
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	687a      	ldr	r2, [r7, #4]
 800733e:	429a      	cmp	r2, r3
 8007340:	d105      	bne.n	800734e <tcp_close_shutdown+0x7a>
 8007342:	4b7e      	ldr	r3, [pc, #504]	; (800753c <tcp_close_shutdown+0x268>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	68da      	ldr	r2, [r3, #12]
 8007348:	4b7c      	ldr	r3, [pc, #496]	; (800753c <tcp_close_shutdown+0x268>)
 800734a:	601a      	str	r2, [r3, #0]
 800734c:	e019      	b.n	8007382 <tcp_close_shutdown+0xae>
 800734e:	4b7b      	ldr	r3, [pc, #492]	; (800753c <tcp_close_shutdown+0x268>)
 8007350:	681a      	ldr	r2, [r3, #0]
 8007352:	4b7b      	ldr	r3, [pc, #492]	; (8007540 <tcp_close_shutdown+0x26c>)
 8007354:	601a      	str	r2, [r3, #0]
 8007356:	e010      	b.n	800737a <tcp_close_shutdown+0xa6>
 8007358:	4b79      	ldr	r3, [pc, #484]	; (8007540 <tcp_close_shutdown+0x26c>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	68db      	ldr	r3, [r3, #12]
 800735e:	687a      	ldr	r2, [r7, #4]
 8007360:	429a      	cmp	r2, r3
 8007362:	d105      	bne.n	8007370 <tcp_close_shutdown+0x9c>
 8007364:	4b76      	ldr	r3, [pc, #472]	; (8007540 <tcp_close_shutdown+0x26c>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	687a      	ldr	r2, [r7, #4]
 800736a:	68d2      	ldr	r2, [r2, #12]
 800736c:	60da      	str	r2, [r3, #12]
 800736e:	e008      	b.n	8007382 <tcp_close_shutdown+0xae>
 8007370:	4b73      	ldr	r3, [pc, #460]	; (8007540 <tcp_close_shutdown+0x26c>)
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	68da      	ldr	r2, [r3, #12]
 8007376:	4b72      	ldr	r3, [pc, #456]	; (8007540 <tcp_close_shutdown+0x26c>)
 8007378:	601a      	str	r2, [r3, #0]
 800737a:	4b71      	ldr	r3, [pc, #452]	; (8007540 <tcp_close_shutdown+0x26c>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d1ea      	bne.n	8007358 <tcp_close_shutdown+0x84>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2200      	movs	r2, #0
 8007386:	60da      	str	r2, [r3, #12]
 8007388:	4b6e      	ldr	r3, [pc, #440]	; (8007544 <tcp_close_shutdown+0x270>)
 800738a:	2201      	movs	r2, #1
 800738c:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	7e1b      	ldrb	r3, [r3, #24]
 8007392:	2b04      	cmp	r3, #4
 8007394:	d10c      	bne.n	80073b0 <tcp_close_shutdown+0xdc>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	220a      	movs	r2, #10
 800739a:	761a      	strb	r2, [r3, #24]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800739c:	4b6a      	ldr	r3, [pc, #424]	; (8007548 <tcp_close_shutdown+0x274>)
 800739e:	681a      	ldr	r2, [r3, #0]
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	60da      	str	r2, [r3, #12]
 80073a4:	4b68      	ldr	r3, [pc, #416]	; (8007548 <tcp_close_shutdown+0x274>)
 80073a6:	687a      	ldr	r2, [r7, #4]
 80073a8:	601a      	str	r2, [r3, #0]
 80073aa:	f005 fa5f 	bl	800c86c <tcp_timer_needed>
 80073ae:	e004      	b.n	80073ba <tcp_close_shutdown+0xe6>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        memp_free(MEMP_TCP_PCB, pcb);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	0019      	movs	r1, r3
 80073b4:	2002      	movs	r0, #2
 80073b6:	f7ff f92b 	bl	8006610 <memp_free>
      }
      return ERR_OK;
 80073ba:	2300      	movs	r3, #0
 80073bc:	e0b8      	b.n	8007530 <tcp_close_shutdown+0x25c>
    }
  }

  switch (pcb->state) {
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	7e1b      	ldrb	r3, [r3, #24]
 80073c2:	2b07      	cmp	r3, #7
 80073c4:	d900      	bls.n	80073c8 <tcp_close_shutdown+0xf4>
 80073c6:	e096      	b.n	80074f6 <tcp_close_shutdown+0x222>
 80073c8:	009a      	lsls	r2, r3, #2
 80073ca:	4b60      	ldr	r3, [pc, #384]	; (800754c <tcp_close_shutdown+0x278>)
 80073cc:	18d3      	adds	r3, r2, r3
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	469f      	mov	pc, r3
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state 
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    err = ERR_OK;
 80073d2:	230f      	movs	r3, #15
 80073d4:	18fb      	adds	r3, r7, r3
 80073d6:	2200      	movs	r2, #0
 80073d8:	701a      	strb	r2, [r3, #0]
    if (pcb->local_port != 0) {
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	8b5b      	ldrh	r3, [r3, #26]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d027      	beq.n	8007432 <tcp_close_shutdown+0x15e>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 80073e2:	4b5b      	ldr	r3, [pc, #364]	; (8007550 <tcp_close_shutdown+0x27c>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	687a      	ldr	r2, [r7, #4]
 80073e8:	429a      	cmp	r2, r3
 80073ea:	d105      	bne.n	80073f8 <tcp_close_shutdown+0x124>
 80073ec:	4b58      	ldr	r3, [pc, #352]	; (8007550 <tcp_close_shutdown+0x27c>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	68da      	ldr	r2, [r3, #12]
 80073f2:	4b57      	ldr	r3, [pc, #348]	; (8007550 <tcp_close_shutdown+0x27c>)
 80073f4:	601a      	str	r2, [r3, #0]
 80073f6:	e019      	b.n	800742c <tcp_close_shutdown+0x158>
 80073f8:	4b55      	ldr	r3, [pc, #340]	; (8007550 <tcp_close_shutdown+0x27c>)
 80073fa:	681a      	ldr	r2, [r3, #0]
 80073fc:	4b50      	ldr	r3, [pc, #320]	; (8007540 <tcp_close_shutdown+0x26c>)
 80073fe:	601a      	str	r2, [r3, #0]
 8007400:	e010      	b.n	8007424 <tcp_close_shutdown+0x150>
 8007402:	4b4f      	ldr	r3, [pc, #316]	; (8007540 <tcp_close_shutdown+0x26c>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	68db      	ldr	r3, [r3, #12]
 8007408:	687a      	ldr	r2, [r7, #4]
 800740a:	429a      	cmp	r2, r3
 800740c:	d105      	bne.n	800741a <tcp_close_shutdown+0x146>
 800740e:	4b4c      	ldr	r3, [pc, #304]	; (8007540 <tcp_close_shutdown+0x26c>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	687a      	ldr	r2, [r7, #4]
 8007414:	68d2      	ldr	r2, [r2, #12]
 8007416:	60da      	str	r2, [r3, #12]
 8007418:	e008      	b.n	800742c <tcp_close_shutdown+0x158>
 800741a:	4b49      	ldr	r3, [pc, #292]	; (8007540 <tcp_close_shutdown+0x26c>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	68da      	ldr	r2, [r3, #12]
 8007420:	4b47      	ldr	r3, [pc, #284]	; (8007540 <tcp_close_shutdown+0x26c>)
 8007422:	601a      	str	r2, [r3, #0]
 8007424:	4b46      	ldr	r3, [pc, #280]	; (8007540 <tcp_close_shutdown+0x26c>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d1ea      	bne.n	8007402 <tcp_close_shutdown+0x12e>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2200      	movs	r2, #0
 8007430:	60da      	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	0019      	movs	r1, r3
 8007436:	2002      	movs	r0, #2
 8007438:	f7ff f8ea 	bl	8006610 <memp_free>
    pcb = NULL;
 800743c:	2300      	movs	r3, #0
 800743e:	607b      	str	r3, [r7, #4]
    break;
 8007440:	e065      	b.n	800750e <tcp_close_shutdown+0x23a>
  case LISTEN:
    err = ERR_OK;
 8007442:	230f      	movs	r3, #15
 8007444:	18fb      	adds	r3, r7, r3
 8007446:	2200      	movs	r2, #0
 8007448:	701a      	strb	r2, [r3, #0]
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800744a:	687a      	ldr	r2, [r7, #4]
 800744c:	4b41      	ldr	r3, [pc, #260]	; (8007554 <tcp_close_shutdown+0x280>)
 800744e:	0011      	movs	r1, r2
 8007450:	0018      	movs	r0, r3
 8007452:	f001 f86f 	bl	8008534 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	0019      	movs	r1, r3
 800745a:	2003      	movs	r0, #3
 800745c:	f7ff f8d8 	bl	8006610 <memp_free>
    pcb = NULL;
 8007460:	2300      	movs	r3, #0
 8007462:	607b      	str	r3, [r7, #4]
    break;
 8007464:	e053      	b.n	800750e <tcp_close_shutdown+0x23a>
  case SYN_SENT:
    err = ERR_OK;
 8007466:	230f      	movs	r3, #15
 8007468:	18fb      	adds	r3, r7, r3
 800746a:	2200      	movs	r2, #0
 800746c:	701a      	strb	r2, [r3, #0]
    TCP_PCB_REMOVE_ACTIVE(pcb);
 800746e:	687a      	ldr	r2, [r7, #4]
 8007470:	4b32      	ldr	r3, [pc, #200]	; (800753c <tcp_close_shutdown+0x268>)
 8007472:	0011      	movs	r1, r2
 8007474:	0018      	movs	r0, r3
 8007476:	f001 f85d 	bl	8008534 <tcp_pcb_remove>
 800747a:	4b32      	ldr	r3, [pc, #200]	; (8007544 <tcp_close_shutdown+0x270>)
 800747c:	2201      	movs	r2, #1
 800747e:	701a      	strb	r2, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	0019      	movs	r1, r3
 8007484:	2002      	movs	r0, #2
 8007486:	f7ff f8c3 	bl	8006610 <memp_free>
    pcb = NULL;
 800748a:	2300      	movs	r3, #0
 800748c:	607b      	str	r3, [r7, #4]
    snmp_inc_tcpattemptfails();
    break;
 800748e:	e03e      	b.n	800750e <tcp_close_shutdown+0x23a>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 8007490:	250f      	movs	r5, #15
 8007492:	197c      	adds	r4, r7, r5
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	0018      	movs	r0, r3
 8007498:	f003 fd55 	bl	800af46 <tcp_send_fin>
 800749c:	0003      	movs	r3, r0
 800749e:	7023      	strb	r3, [r4, #0]
    if (err == ERR_OK) {
 80074a0:	197b      	adds	r3, r7, r5
 80074a2:	781b      	ldrb	r3, [r3, #0]
 80074a4:	b25b      	sxtb	r3, r3
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d12c      	bne.n	8007504 <tcp_close_shutdown+0x230>
      snmp_inc_tcpattemptfails();
      pcb->state = FIN_WAIT_1;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2205      	movs	r2, #5
 80074ae:	761a      	strb	r2, [r3, #24]
    }
    break;
 80074b0:	e028      	b.n	8007504 <tcp_close_shutdown+0x230>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
 80074b2:	250f      	movs	r5, #15
 80074b4:	197c      	adds	r4, r7, r5
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	0018      	movs	r0, r3
 80074ba:	f003 fd44 	bl	800af46 <tcp_send_fin>
 80074be:	0003      	movs	r3, r0
 80074c0:	7023      	strb	r3, [r4, #0]
    if (err == ERR_OK) {
 80074c2:	197b      	adds	r3, r7, r5
 80074c4:	781b      	ldrb	r3, [r3, #0]
 80074c6:	b25b      	sxtb	r3, r3
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d11d      	bne.n	8007508 <tcp_close_shutdown+0x234>
      snmp_inc_tcpestabresets();
      pcb->state = FIN_WAIT_1;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2205      	movs	r2, #5
 80074d0:	761a      	strb	r2, [r3, #24]
    }
    break;
 80074d2:	e019      	b.n	8007508 <tcp_close_shutdown+0x234>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
 80074d4:	250f      	movs	r5, #15
 80074d6:	197c      	adds	r4, r7, r5
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	0018      	movs	r0, r3
 80074dc:	f003 fd33 	bl	800af46 <tcp_send_fin>
 80074e0:	0003      	movs	r3, r0
 80074e2:	7023      	strb	r3, [r4, #0]
    if (err == ERR_OK) {
 80074e4:	197b      	adds	r3, r7, r5
 80074e6:	781b      	ldrb	r3, [r3, #0]
 80074e8:	b25b      	sxtb	r3, r3
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d10e      	bne.n	800750c <tcp_close_shutdown+0x238>
      snmp_inc_tcpestabresets();
      pcb->state = LAST_ACK;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2209      	movs	r2, #9
 80074f2:	761a      	strb	r2, [r3, #24]
    }
    break;
 80074f4:	e00a      	b.n	800750c <tcp_close_shutdown+0x238>
  default:
    /* Has already been closed, do nothing. */
    err = ERR_OK;
 80074f6:	230f      	movs	r3, #15
 80074f8:	18fb      	adds	r3, r7, r3
 80074fa:	2200      	movs	r2, #0
 80074fc:	701a      	strb	r2, [r3, #0]
    pcb = NULL;
 80074fe:	2300      	movs	r3, #0
 8007500:	607b      	str	r3, [r7, #4]
    break;
 8007502:	e004      	b.n	800750e <tcp_close_shutdown+0x23a>
    break;
 8007504:	46c0      	nop			; (mov r8, r8)
 8007506:	e002      	b.n	800750e <tcp_close_shutdown+0x23a>
    break;
 8007508:	46c0      	nop			; (mov r8, r8)
 800750a:	e000      	b.n	800750e <tcp_close_shutdown+0x23a>
    break;
 800750c:	46c0      	nop			; (mov r8, r8)
  }

  if (pcb != NULL && err == ERR_OK) {
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d009      	beq.n	8007528 <tcp_close_shutdown+0x254>
 8007514:	230f      	movs	r3, #15
 8007516:	18fb      	adds	r3, r7, r3
 8007518:	781b      	ldrb	r3, [r3, #0]
 800751a:	b25b      	sxtb	r3, r3
 800751c:	2b00      	cmp	r3, #0
 800751e:	d103      	bne.n	8007528 <tcp_close_shutdown+0x254>
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    /* @todo: When implementing SO_LINGER, this must be changed somehow:
       If SOF_LINGER is set, the data should be sent and acked before close returns.
       This can only be valid for sequential APIs, not for the raw API. */
    tcp_output(pcb);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	0018      	movs	r0, r3
 8007524:	f004 fb70 	bl	800bc08 <tcp_output>
  }
  return err;
 8007528:	230f      	movs	r3, #15
 800752a:	18fb      	adds	r3, r7, r3
 800752c:	781b      	ldrb	r3, [r3, #0]
 800752e:	b25b      	sxtb	r3, r3
}
 8007530:	0018      	movs	r0, r3
 8007532:	46bd      	mov	sp, r7
 8007534:	b004      	add	sp, #16
 8007536:	bdb0      	pop	{r4, r5, r7, pc}
 8007538:	000016d0 	.word	0x000016d0
 800753c:	20003528 	.word	0x20003528
 8007540:	20003534 	.word	0x20003534
 8007544:	20003524 	.word	0x20003524
 8007548:	2000353c 	.word	0x2000353c
 800754c:	0801ca00 	.word	0x0801ca00
 8007550:	20003538 	.word	0x20003538
 8007554:	20003530 	.word	0x20003530

08007558 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b082      	sub	sp, #8
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
#if TCP_DEBUG
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);
#endif /* TCP_DEBUG */

  if (pcb->state != LISTEN) {
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	7e1b      	ldrb	r3, [r3, #24]
 8007564:	2b01      	cmp	r3, #1
 8007566:	d006      	beq.n	8007576 <tcp_close+0x1e>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	7f9b      	ldrb	r3, [r3, #30]
 800756c:	2210      	movs	r2, #16
 800756e:	4313      	orrs	r3, r2
 8007570:	b2da      	uxtb	r2, r3
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	779a      	strb	r2, [r3, #30]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2101      	movs	r1, #1
 800757a:	0018      	movs	r0, r3
 800757c:	f7ff feaa 	bl	80072d4 <tcp_close_shutdown>
 8007580:	0003      	movs	r3, r0
}
 8007582:	0018      	movs	r0, r3
 8007584:	46bd      	mov	sp, r7
 8007586:	b002      	add	sp, #8
 8007588:	bd80      	pop	{r7, pc}
	...

0800758c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800758c:	b5b0      	push	{r4, r5, r7, lr}
 800758e:	b088      	sub	sp, #32
 8007590:	af02      	add	r7, sp, #8
 8007592:	6078      	str	r0, [r7, #4]
 8007594:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	7e1b      	ldrb	r3, [r3, #24]
 800759a:	2b0a      	cmp	r3, #10
 800759c:	d10b      	bne.n	80075b6 <tcp_abandon+0x2a>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800759e:	687a      	ldr	r2, [r7, #4]
 80075a0:	4b2f      	ldr	r3, [pc, #188]	; (8007660 <tcp_abandon+0xd4>)
 80075a2:	0011      	movs	r1, r2
 80075a4:	0018      	movs	r0, r3
 80075a6:	f000 ffc5 	bl	8008534 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	0019      	movs	r1, r3
 80075ae:	2002      	movs	r0, #2
 80075b0:	f7ff f82e 	bl	8006610 <memp_free>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, pcb->local_port, pcb->remote_port);
    }
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(errf, errf_arg, ERR_ABRT);
  }
}
 80075b4:	e050      	b.n	8007658 <tcp_abandon+0xcc>
    seqno = pcb->snd_nxt;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075ba:	617b      	str	r3, [r7, #20]
    ackno = pcb->rcv_nxt;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075c0:	613b      	str	r3, [r7, #16]
    errf = pcb->errf;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	228c      	movs	r2, #140	; 0x8c
 80075c6:	589b      	ldr	r3, [r3, r2]
 80075c8:	60fb      	str	r3, [r7, #12]
    errf_arg = pcb->callback_arg;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	691b      	ldr	r3, [r3, #16]
 80075ce:	60bb      	str	r3, [r7, #8]
    TCP_PCB_REMOVE_ACTIVE(pcb);
 80075d0:	687a      	ldr	r2, [r7, #4]
 80075d2:	4b24      	ldr	r3, [pc, #144]	; (8007664 <tcp_abandon+0xd8>)
 80075d4:	0011      	movs	r1, r2
 80075d6:	0018      	movs	r0, r3
 80075d8:	f000 ffac 	bl	8008534 <tcp_pcb_remove>
 80075dc:	4b22      	ldr	r3, [pc, #136]	; (8007668 <tcp_abandon+0xdc>)
 80075de:	2201      	movs	r2, #1
 80075e0:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d004      	beq.n	80075f4 <tcp_abandon+0x68>
      tcp_segs_free(pcb->unacked);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075ee:	0018      	movs	r0, r3
 80075f0:	f000 fd5a 	bl	80080a8 <tcp_segs_free>
    if (pcb->unsent != NULL) {
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d004      	beq.n	8007606 <tcp_abandon+0x7a>
      tcp_segs_free(pcb->unsent);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007600:	0018      	movs	r0, r3
 8007602:	f000 fd51 	bl	80080a8 <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800760a:	2b00      	cmp	r3, #0
 800760c:	d004      	beq.n	8007618 <tcp_abandon+0x8c>
      tcp_segs_free(pcb->ooseq);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007612:	0018      	movs	r0, r3
 8007614:	f000 fd48 	bl	80080a8 <tcp_segs_free>
    if (reset) {
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d00e      	beq.n	800763c <tcp_abandon+0xb0>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, pcb->local_port, pcb->remote_port);
 800761e:	687c      	ldr	r4, [r7, #4]
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	1d1d      	adds	r5, r3, #4
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	8b5b      	ldrh	r3, [r3, #26]
 8007628:	687a      	ldr	r2, [r7, #4]
 800762a:	8b92      	ldrh	r2, [r2, #28]
 800762c:	6939      	ldr	r1, [r7, #16]
 800762e:	6978      	ldr	r0, [r7, #20]
 8007630:	9201      	str	r2, [sp, #4]
 8007632:	9300      	str	r3, [sp, #0]
 8007634:	002b      	movs	r3, r5
 8007636:	0022      	movs	r2, r4
 8007638:	f004 fdc4 	bl	800c1c4 <tcp_rst>
    memp_free(MEMP_TCP_PCB, pcb);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	0019      	movs	r1, r3
 8007640:	2002      	movs	r0, #2
 8007642:	f7fe ffe5 	bl	8006610 <memp_free>
    TCP_EVENT_ERR(errf, errf_arg, ERR_ABRT);
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d005      	beq.n	8007658 <tcp_abandon+0xcc>
 800764c:	230a      	movs	r3, #10
 800764e:	4259      	negs	r1, r3
 8007650:	68ba      	ldr	r2, [r7, #8]
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	0010      	movs	r0, r2
 8007656:	4798      	blx	r3
}
 8007658:	46c0      	nop			; (mov r8, r8)
 800765a:	46bd      	mov	sp, r7
 800765c:	b006      	add	sp, #24
 800765e:	bdb0      	pop	{r4, r5, r7, pc}
 8007660:	2000353c 	.word	0x2000353c
 8007664:	20003528 	.word	0x20003528
 8007668:	20003524 	.word	0x20003524

0800766c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b082      	sub	sp, #8
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2101      	movs	r1, #1
 8007678:	0018      	movs	r0, r3
 800767a:	f7ff ff87 	bl	800758c <tcp_abandon>
}
 800767e:	46c0      	nop			; (mov r8, r8)
 8007680:	46bd      	mov	sp, r7
 8007682:	b002      	add	sp, #8
 8007684:	bd80      	pop	{r7, pc}
	...

08007688 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, ip_addr_t *ipaddr, u16_t port)
{
 8007688:	b590      	push	{r4, r7, lr}
 800768a:	b089      	sub	sp, #36	; 0x24
 800768c:	af00      	add	r7, sp, #0
 800768e:	60f8      	str	r0, [r7, #12]
 8007690:	60b9      	str	r1, [r7, #8]
 8007692:	1dbb      	adds	r3, r7, #6
 8007694:	801a      	strh	r2, [r3, #0]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8007696:	2304      	movs	r3, #4
 8007698:	617b      	str	r3, [r7, #20]
  struct tcp_pcb *cpcb;

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	7e1b      	ldrb	r3, [r3, #24]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d002      	beq.n	80076a8 <tcp_bind+0x20>
 80076a2:	2306      	movs	r3, #6
 80076a4:	425b      	negs	r3, r3
 80076a6:	e05c      	b.n	8007762 <tcp_bind+0xda>
  if (ip_get_option(pcb, SOF_REUSEADDR)) {
    max_pcb_list = NUM_TCP_PCB_LISTS_NO_TIME_WAIT;
  }
#endif /* SO_REUSE */

  if (port == 0) {
 80076a8:	1dbb      	adds	r3, r7, #6
 80076aa:	881b      	ldrh	r3, [r3, #0]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d10b      	bne.n	80076c8 <tcp_bind+0x40>
    port = tcp_new_port();
 80076b0:	1dbc      	adds	r4, r7, #6
 80076b2:	f000 f96f 	bl	8007994 <tcp_new_port>
 80076b6:	0003      	movs	r3, r0
 80076b8:	8023      	strh	r3, [r4, #0]
    if (port == 0) {
 80076ba:	1dbb      	adds	r3, r7, #6
 80076bc:	881b      	ldrh	r3, [r3, #0]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d102      	bne.n	80076c8 <tcp_bind+0x40>
      return ERR_BUF;
 80076c2:	2302      	movs	r3, #2
 80076c4:	425b      	negs	r3, r3
 80076c6:	e04c      	b.n	8007762 <tcp_bind+0xda>
    }
  }

  /* Check if the address already is in use (on all lists) */
  for (i = 0; i < max_pcb_list; i++) {
 80076c8:	2300      	movs	r3, #0
 80076ca:	61fb      	str	r3, [r7, #28]
 80076cc:	e02c      	b.n	8007728 <tcp_bind+0xa0>
    for(cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80076ce:	4b27      	ldr	r3, [pc, #156]	; (800776c <tcp_bind+0xe4>)
 80076d0:	69fa      	ldr	r2, [r7, #28]
 80076d2:	0092      	lsls	r2, r2, #2
 80076d4:	58d3      	ldr	r3, [r2, r3]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	61bb      	str	r3, [r7, #24]
 80076da:	e01f      	b.n	800771c <tcp_bind+0x94>
      if (cpcb->local_port == port) {
 80076dc:	69bb      	ldr	r3, [r7, #24]
 80076de:	8b5b      	ldrh	r3, [r3, #26]
 80076e0:	1dba      	adds	r2, r7, #6
 80076e2:	8812      	ldrh	r2, [r2, #0]
 80076e4:	429a      	cmp	r2, r3
 80076e6:	d116      	bne.n	8007716 <tcp_bind+0x8e>
           tcp_connect. */
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          if (ip_addr_isany(&(cpcb->local_ip)) ||
 80076e8:	69bb      	ldr	r3, [r7, #24]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d010      	beq.n	8007710 <tcp_bind+0x88>
 80076ee:	69bb      	ldr	r3, [r7, #24]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d00c      	beq.n	8007710 <tcp_bind+0x88>
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d009      	beq.n	8007710 <tcp_bind+0x88>
              ip_addr_isany(ipaddr) ||
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d005      	beq.n	8007710 <tcp_bind+0x88>
              ip_addr_cmp(&(cpcb->local_ip), ipaddr)) {
 8007704:	69bb      	ldr	r3, [r7, #24]
 8007706:	681a      	ldr	r2, [r3, #0]
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	681b      	ldr	r3, [r3, #0]
              ip_addr_isany(ipaddr) ||
 800770c:	429a      	cmp	r2, r3
 800770e:	d102      	bne.n	8007716 <tcp_bind+0x8e>
            return ERR_USE;
 8007710:	2308      	movs	r3, #8
 8007712:	425b      	negs	r3, r3
 8007714:	e025      	b.n	8007762 <tcp_bind+0xda>
    for(cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8007716:	69bb      	ldr	r3, [r7, #24]
 8007718:	68db      	ldr	r3, [r3, #12]
 800771a:	61bb      	str	r3, [r7, #24]
 800771c:	69bb      	ldr	r3, [r7, #24]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d1dc      	bne.n	80076dc <tcp_bind+0x54>
  for (i = 0; i < max_pcb_list; i++) {
 8007722:	69fb      	ldr	r3, [r7, #28]
 8007724:	3301      	adds	r3, #1
 8007726:	61fb      	str	r3, [r7, #28]
 8007728:	69fa      	ldr	r2, [r7, #28]
 800772a:	697b      	ldr	r3, [r7, #20]
 800772c:	429a      	cmp	r2, r3
 800772e:	dbce      	blt.n	80076ce <tcp_bind+0x46>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)) {
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d007      	beq.n	8007746 <tcp_bind+0xbe>
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d003      	beq.n	8007746 <tcp_bind+0xbe>
    pcb->local_ip = *ipaddr;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	68ba      	ldr	r2, [r7, #8]
 8007742:	6812      	ldr	r2, [r2, #0]
 8007744:	601a      	str	r2, [r3, #0]
  }
  pcb->local_port = port;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	1dba      	adds	r2, r7, #6
 800774a:	8812      	ldrh	r2, [r2, #0]
 800774c:	835a      	strh	r2, [r3, #26]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800774e:	4b08      	ldr	r3, [pc, #32]	; (8007770 <tcp_bind+0xe8>)
 8007750:	681a      	ldr	r2, [r3, #0]
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	60da      	str	r2, [r3, #12]
 8007756:	4b06      	ldr	r3, [pc, #24]	; (8007770 <tcp_bind+0xe8>)
 8007758:	68fa      	ldr	r2, [r7, #12]
 800775a:	601a      	str	r2, [r3, #0]
 800775c:	f005 f886 	bl	800c86c <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8007760:	2300      	movs	r3, #0
}
 8007762:	0018      	movs	r0, r3
 8007764:	46bd      	mov	sp, r7
 8007766:	b009      	add	sp, #36	; 0x24
 8007768:	bd90      	pop	{r4, r7, pc}
 800776a:	46c0      	nop			; (mov r8, r8)
 800776c:	0801c9f0 	.word	0x0801c9f0
 8007770:	20003538 	.word	0x20003538

08007774 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b084      	sub	sp, #16
 8007778:	af00      	add	r7, sp, #0
 800777a:	60f8      	str	r0, [r7, #12]
 800777c:	60b9      	str	r1, [r7, #8]
 800777e:	1dfb      	adds	r3, r7, #7
 8007780:	701a      	strb	r2, [r3, #0]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(err);

  return ERR_ABRT;
 8007782:	230a      	movs	r3, #10
 8007784:	425b      	negs	r3, r3
}
 8007786:	0018      	movs	r0, r3
 8007788:	46bd      	mov	sp, r7
 800778a:	b004      	add	sp, #16
 800778c:	bd80      	pop	{r7, pc}
	...

08007790 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen(tpcb);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b084      	sub	sp, #16
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
 8007798:	000a      	movs	r2, r1
 800779a:	1cfb      	adds	r3, r7, #3
 800779c:	701a      	strb	r2, [r3, #0]
  struct tcp_pcb_listen *lpcb;

  LWIP_UNUSED_ARG(backlog);
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, return NULL);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	7e1b      	ldrb	r3, [r3, #24]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d001      	beq.n	80077aa <tcp_listen_with_backlog+0x1a>
 80077a6:	2300      	movs	r3, #0
 80077a8:	e073      	b.n	8007892 <tcp_listen_with_backlog+0x102>

  /* already listening? */
  if (pcb->state == LISTEN) {
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	7e1b      	ldrb	r3, [r3, #24]
 80077ae:	2b01      	cmp	r3, #1
 80077b0:	d101      	bne.n	80077b6 <tcp_listen_with_backlog+0x26>
    return pcb;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	e06d      	b.n	8007892 <tcp_listen_with_backlog+0x102>
        }
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 80077b6:	2003      	movs	r0, #3
 80077b8:	f7fe fea4 	bl	8006504 <memp_malloc>
 80077bc:	0003      	movs	r3, r0
 80077be:	60fb      	str	r3, [r7, #12]
  if (lpcb == NULL) {
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d101      	bne.n	80077ca <tcp_listen_with_backlog+0x3a>
    return NULL;
 80077c6:	2300      	movs	r3, #0
 80077c8:	e063      	b.n	8007892 <tcp_listen_with_backlog+0x102>
  }
  lpcb->callback_arg = pcb->callback_arg;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	691a      	ldr	r2, [r3, #16]
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	8b5a      	ldrh	r2, [r3, #26]
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	835a      	strh	r2, [r3, #26]
  lpcb->state = LISTEN;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	2201      	movs	r2, #1
 80077de:	761a      	strb	r2, [r3, #24]
  lpcb->prio = pcb->prio;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	7e5a      	ldrb	r2, [r3, #25]
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	765a      	strb	r2, [r3, #25]
  lpcb->so_options = pcb->so_options;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	7a1a      	ldrb	r2, [r3, #8]
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	721a      	strb	r2, [r3, #8]
  ip_set_option(lpcb, SOF_ACCEPTCONN);
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	7a1b      	ldrb	r3, [r3, #8]
 80077f4:	2202      	movs	r2, #2
 80077f6:	4313      	orrs	r3, r2
 80077f8:	b2da      	uxtb	r2, r3
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	7a9a      	ldrb	r2, [r3, #10]
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	729a      	strb	r2, [r3, #10]
  lpcb->tos = pcb->tos;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	7a5a      	ldrb	r2, [r3, #9]
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	725a      	strb	r2, [r3, #9]
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681a      	ldr	r2, [r3, #0]
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	8b5b      	ldrh	r3, [r3, #26]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d027      	beq.n	800786e <tcp_listen_with_backlog+0xde>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800781e:	4b1f      	ldr	r3, [pc, #124]	; (800789c <tcp_listen_with_backlog+0x10c>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	687a      	ldr	r2, [r7, #4]
 8007824:	429a      	cmp	r2, r3
 8007826:	d105      	bne.n	8007834 <tcp_listen_with_backlog+0xa4>
 8007828:	4b1c      	ldr	r3, [pc, #112]	; (800789c <tcp_listen_with_backlog+0x10c>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	68da      	ldr	r2, [r3, #12]
 800782e:	4b1b      	ldr	r3, [pc, #108]	; (800789c <tcp_listen_with_backlog+0x10c>)
 8007830:	601a      	str	r2, [r3, #0]
 8007832:	e019      	b.n	8007868 <tcp_listen_with_backlog+0xd8>
 8007834:	4b19      	ldr	r3, [pc, #100]	; (800789c <tcp_listen_with_backlog+0x10c>)
 8007836:	681a      	ldr	r2, [r3, #0]
 8007838:	4b19      	ldr	r3, [pc, #100]	; (80078a0 <tcp_listen_with_backlog+0x110>)
 800783a:	601a      	str	r2, [r3, #0]
 800783c:	e010      	b.n	8007860 <tcp_listen_with_backlog+0xd0>
 800783e:	4b18      	ldr	r3, [pc, #96]	; (80078a0 <tcp_listen_with_backlog+0x110>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	68db      	ldr	r3, [r3, #12]
 8007844:	687a      	ldr	r2, [r7, #4]
 8007846:	429a      	cmp	r2, r3
 8007848:	d105      	bne.n	8007856 <tcp_listen_with_backlog+0xc6>
 800784a:	4b15      	ldr	r3, [pc, #84]	; (80078a0 <tcp_listen_with_backlog+0x110>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	687a      	ldr	r2, [r7, #4]
 8007850:	68d2      	ldr	r2, [r2, #12]
 8007852:	60da      	str	r2, [r3, #12]
 8007854:	e008      	b.n	8007868 <tcp_listen_with_backlog+0xd8>
 8007856:	4b12      	ldr	r3, [pc, #72]	; (80078a0 <tcp_listen_with_backlog+0x110>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	68da      	ldr	r2, [r3, #12]
 800785c:	4b10      	ldr	r3, [pc, #64]	; (80078a0 <tcp_listen_with_backlog+0x110>)
 800785e:	601a      	str	r2, [r3, #0]
 8007860:	4b0f      	ldr	r3, [pc, #60]	; (80078a0 <tcp_listen_with_backlog+0x110>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d1ea      	bne.n	800783e <tcp_listen_with_backlog+0xae>
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2200      	movs	r2, #0
 800786c:	60da      	str	r2, [r3, #12]
  }
  memp_free(MEMP_TCP_PCB, pcb);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	0019      	movs	r1, r3
 8007872:	2002      	movs	r0, #2
 8007874:	f7fe fecc 	bl	8006610 <memp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	4a0a      	ldr	r2, [pc, #40]	; (80078a4 <tcp_listen_with_backlog+0x114>)
 800787c:	615a      	str	r2, [r3, #20]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  lpcb->backlog = (backlog ? backlog : 1);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800787e:	4b0a      	ldr	r3, [pc, #40]	; (80078a8 <tcp_listen_with_backlog+0x118>)
 8007880:	681a      	ldr	r2, [r3, #0]
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	60da      	str	r2, [r3, #12]
 8007886:	4b08      	ldr	r3, [pc, #32]	; (80078a8 <tcp_listen_with_backlog+0x118>)
 8007888:	68fa      	ldr	r2, [r7, #12]
 800788a:	601a      	str	r2, [r3, #0]
 800788c:	f004 ffee 	bl	800c86c <tcp_timer_needed>
  return (struct tcp_pcb *)lpcb;
 8007890:	68fb      	ldr	r3, [r7, #12]
}
 8007892:	0018      	movs	r0, r3
 8007894:	46bd      	mov	sp, r7
 8007896:	b004      	add	sp, #16
 8007898:	bd80      	pop	{r7, pc}
 800789a:	46c0      	nop			; (mov r8, r8)
 800789c:	20003538 	.word	0x20003538
 80078a0:	20003534 	.word	0x20003534
 80078a4:	08007775 	.word	0x08007775
 80078a8:	20003530 	.word	0x20003530

080078ac <tcp_update_rcv_ann_wnd>:
 *
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b084      	sub	sp, #16
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078b8:	687a      	ldr	r2, [r7, #4]
 80078ba:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 80078bc:	189b      	adds	r3, r3, r2
 80078be:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078c4:	687a      	ldr	r2, [r7, #4]
 80078c6:	8ed2      	ldrh	r2, [r2, #54]	; 0x36
 80078c8:	1c10      	adds	r0, r2, #0
 80078ca:	b282      	uxth	r2, r0
 80078cc:	4916      	ldr	r1, [pc, #88]	; (8007928 <tcp_update_rcv_ann_wnd+0x7c>)
 80078ce:	428a      	cmp	r2, r1
 80078d0:	d901      	bls.n	80078d6 <tcp_update_rcv_ann_wnd+0x2a>
 80078d2:	4a15      	ldr	r2, [pc, #84]	; (8007928 <tcp_update_rcv_ann_wnd+0x7c>)
 80078d4:	1c10      	adds	r0, r2, #0
 80078d6:	b282      	uxth	r2, r0
 80078d8:	189b      	adds	r3, r3, r2
 80078da:	68fa      	ldr	r2, [r7, #12]
 80078dc:	1ad3      	subs	r3, r2, r3
 80078de:	d408      	bmi.n	80078f2 <tcp_update_rcv_ann_wnd+0x46>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	85da      	strh	r2, [r3, #46]	; 0x2e
    return new_right_edge - pcb->rcv_ann_right_edge;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078ec:	68fa      	ldr	r2, [r7, #12]
 80078ee:	1ad3      	subs	r3, r2, r3
 80078f0:	e015      	b.n	800791e <tcp_update_rcv_ann_wnd+0x72>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078fa:	1ad3      	subs	r3, r2, r3
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	dd03      	ble.n	8007908 <tcp_update_rcv_ann_wnd+0x5c>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2200      	movs	r2, #0
 8007904:	85da      	strh	r2, [r3, #46]	; 0x2e
 8007906:	e009      	b.n	800791c <tcp_update_rcv_ann_wnd+0x70>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007910:	1ad3      	subs	r3, r2, r3
 8007912:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
      pcb->rcv_ann_wnd = (u16_t)new_rcv_ann_wnd;
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	b29a      	uxth	r2, r3
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	85da      	strh	r2, [r3, #46]	; 0x2e
    }
    return 0;
 800791c:	2300      	movs	r3, #0
  }
}
 800791e:	0018      	movs	r0, r3
 8007920:	46bd      	mov	sp, r7
 8007922:	b004      	add	sp, #16
 8007924:	bd80      	pop	{r7, pc}
 8007926:	46c0      	nop			; (mov r8, r8)
 8007928:	00000b68 	.word	0x00000b68

0800792c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b084      	sub	sp, #16
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
 8007934:	000a      	movs	r2, r1
 8007936:	1cbb      	adds	r3, r7, #2
 8007938:	801a      	strh	r2, [r3, #0]
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
    pcb->state != LISTEN);
  LWIP_ASSERT("tcp_recved: len would wrap rcv_wnd\n",
              len <= 0xffff - pcb->rcv_wnd );

  pcb->rcv_wnd += len;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800793e:	1cbb      	adds	r3, r7, #2
 8007940:	881b      	ldrh	r3, [r3, #0]
 8007942:	18d3      	adds	r3, r2, r3
 8007944:	b29a      	uxth	r2, r3
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	859a      	strh	r2, [r3, #44]	; 0x2c
  if (pcb->rcv_wnd > TCP_WND) {
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800794e:	4a0f      	ldr	r2, [pc, #60]	; (800798c <tcp_recved+0x60>)
 8007950:	4293      	cmp	r3, r2
 8007952:	d902      	bls.n	800795a <tcp_recved+0x2e>
    pcb->rcv_wnd = TCP_WND;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	4a0d      	ldr	r2, [pc, #52]	; (800798c <tcp_recved+0x60>)
 8007958:	859a      	strh	r2, [r3, #44]	; 0x2c
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	0018      	movs	r0, r3
 800795e:	f7ff ffa5 	bl	80078ac <tcp_update_rcv_ann_wnd>
 8007962:	0003      	movs	r3, r0
 8007964:	60fb      	str	r3, [r7, #12]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	4a09      	ldr	r2, [pc, #36]	; (8007990 <tcp_recved+0x64>)
 800796a:	4293      	cmp	r3, r2
 800796c:	dd0a      	ble.n	8007984 <tcp_recved+0x58>
    tcp_ack_now(pcb);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	7f9b      	ldrb	r3, [r3, #30]
 8007972:	2202      	movs	r2, #2
 8007974:	4313      	orrs	r3, r2
 8007976:	b2da      	uxtb	r2, r3
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	779a      	strb	r2, [r3, #30]
    tcp_output(pcb);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	0018      	movs	r0, r3
 8007980:	f004 f942 	bl	800bc08 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: recveived %"U16_F" bytes, wnd %"U16_F" (%"U16_F").\n",
         len, pcb->rcv_wnd, TCP_WND - pcb->rcv_wnd));
}
 8007984:	46c0      	nop			; (mov r8, r8)
 8007986:	46bd      	mov	sp, r7
 8007988:	b004      	add	sp, #16
 800798a:	bd80      	pop	{r7, pc}
 800798c:	000016d0 	.word	0x000016d0
 8007990:	000005b3 	.word	0x000005b3

08007994 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b082      	sub	sp, #8
 8007998:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800799a:	1d3b      	adds	r3, r7, #4
 800799c:	2200      	movs	r2, #0
 800799e:	801a      	strh	r2, [r3, #0]
  struct tcp_pcb *pcb;
  
again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 80079a0:	4b1f      	ldr	r3, [pc, #124]	; (8007a20 <tcp_new_port+0x8c>)
 80079a2:	881b      	ldrh	r3, [r3, #0]
 80079a4:	1c5a      	adds	r2, r3, #1
 80079a6:	b291      	uxth	r1, r2
 80079a8:	4a1d      	ldr	r2, [pc, #116]	; (8007a20 <tcp_new_port+0x8c>)
 80079aa:	8011      	strh	r1, [r2, #0]
 80079ac:	4a1d      	ldr	r2, [pc, #116]	; (8007a24 <tcp_new_port+0x90>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d102      	bne.n	80079b8 <tcp_new_port+0x24>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 80079b2:	4b1b      	ldr	r3, [pc, #108]	; (8007a20 <tcp_new_port+0x8c>)
 80079b4:	4a1c      	ldr	r2, [pc, #112]	; (8007a28 <tcp_new_port+0x94>)
 80079b6:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80079b8:	1dfb      	adds	r3, r7, #7
 80079ba:	2200      	movs	r2, #0
 80079bc:	701a      	strb	r2, [r3, #0]
 80079be:	e024      	b.n	8007a0a <tcp_new_port+0x76>
    for(pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80079c0:	1dfb      	adds	r3, r7, #7
 80079c2:	781a      	ldrb	r2, [r3, #0]
 80079c4:	4b19      	ldr	r3, [pc, #100]	; (8007a2c <tcp_new_port+0x98>)
 80079c6:	0092      	lsls	r2, r2, #2
 80079c8:	58d3      	ldr	r3, [r2, r3]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	603b      	str	r3, [r7, #0]
 80079ce:	e014      	b.n	80079fa <tcp_new_port+0x66>
      if (pcb->local_port == tcp_port) {
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	8b5a      	ldrh	r2, [r3, #26]
 80079d4:	4b12      	ldr	r3, [pc, #72]	; (8007a20 <tcp_new_port+0x8c>)
 80079d6:	881b      	ldrh	r3, [r3, #0]
 80079d8:	429a      	cmp	r2, r3
 80079da:	d10b      	bne.n	80079f4 <tcp_new_port+0x60>
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 80079dc:	1d3b      	adds	r3, r7, #4
 80079de:	1d3a      	adds	r2, r7, #4
 80079e0:	8812      	ldrh	r2, [r2, #0]
 80079e2:	3201      	adds	r2, #1
 80079e4:	801a      	strh	r2, [r3, #0]
 80079e6:	1d3b      	adds	r3, r7, #4
 80079e8:	881b      	ldrh	r3, [r3, #0]
 80079ea:	4a11      	ldr	r2, [pc, #68]	; (8007a30 <tcp_new_port+0x9c>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d9d7      	bls.n	80079a0 <tcp_new_port+0xc>
          return 0;
 80079f0:	2300      	movs	r3, #0
 80079f2:	e010      	b.n	8007a16 <tcp_new_port+0x82>
    for(pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	68db      	ldr	r3, [r3, #12]
 80079f8:	603b      	str	r3, [r7, #0]
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d1e7      	bne.n	80079d0 <tcp_new_port+0x3c>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8007a00:	1dfb      	adds	r3, r7, #7
 8007a02:	781a      	ldrb	r2, [r3, #0]
 8007a04:	1dfb      	adds	r3, r7, #7
 8007a06:	3201      	adds	r2, #1
 8007a08:	701a      	strb	r2, [r3, #0]
 8007a0a:	1dfb      	adds	r3, r7, #7
 8007a0c:	781b      	ldrb	r3, [r3, #0]
 8007a0e:	2b03      	cmp	r3, #3
 8007a10:	d9d6      	bls.n	80079c0 <tcp_new_port+0x2c>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8007a12:	4b03      	ldr	r3, [pc, #12]	; (8007a20 <tcp_new_port+0x8c>)
 8007a14:	881b      	ldrh	r3, [r3, #0]
}
 8007a16:	0018      	movs	r0, r3
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	b002      	add	sp, #8
 8007a1c:	bd80      	pop	{r7, pc}
 8007a1e:	46c0      	nop			; (mov r8, r8)
 8007a20:	20000010 	.word	0x20000010
 8007a24:	0000ffff 	.word	0x0000ffff
 8007a28:	ffffc000 	.word	0xffffc000
 8007a2c:	0801c9f0 	.word	0x0801c9f0
 8007a30:	00003fff 	.word	0x00003fff

08007a34 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8007a34:	b5b0      	push	{r4, r5, r7, lr}
 8007a36:	b08a      	sub	sp, #40	; 0x28
 8007a38:	af02      	add	r7, sp, #8
  u16_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8007a3a:	2315      	movs	r3, #21
 8007a3c:	18fb      	adds	r3, r7, r3
 8007a3e:	2200      	movs	r2, #0
 8007a40:	701a      	strb	r2, [r3, #0]

  ++tcp_ticks;
 8007a42:	4bc8      	ldr	r3, [pc, #800]	; (8007d64 <tcp_slowtmr+0x330>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	1c5a      	adds	r2, r3, #1
 8007a48:	4bc6      	ldr	r3, [pc, #792]	; (8007d64 <tcp_slowtmr+0x330>)
 8007a4a:	601a      	str	r2, [r3, #0]
  ++tcp_timer_ctr;
 8007a4c:	4bc6      	ldr	r3, [pc, #792]	; (8007d68 <tcp_slowtmr+0x334>)
 8007a4e:	781b      	ldrb	r3, [r3, #0]
 8007a50:	3301      	adds	r3, #1
 8007a52:	b2da      	uxtb	r2, r3
 8007a54:	4bc4      	ldr	r3, [pc, #784]	; (8007d68 <tcp_slowtmr+0x334>)
 8007a56:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8007a58:	2300      	movs	r3, #0
 8007a5a:	61bb      	str	r3, [r7, #24]
  pcb = tcp_active_pcbs;
 8007a5c:	4bc3      	ldr	r3, [pc, #780]	; (8007d6c <tcp_slowtmr+0x338>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	61fb      	str	r3, [r7, #28]
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8007a62:	e206      	b.n	8007e72 <tcp_slowtmr+0x43e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
    if (pcb->last_timer == tcp_timer_ctr) {
 8007a64:	69fb      	ldr	r3, [r7, #28]
 8007a66:	2221      	movs	r2, #33	; 0x21
 8007a68:	5c9a      	ldrb	r2, [r3, r2]
 8007a6a:	4bbf      	ldr	r3, [pc, #764]	; (8007d68 <tcp_slowtmr+0x334>)
 8007a6c:	781b      	ldrb	r3, [r3, #0]
 8007a6e:	429a      	cmp	r2, r3
 8007a70:	d103      	bne.n	8007a7a <tcp_slowtmr+0x46>
      /* skip this pcb, we have already processed it */
      pcb = pcb->next;
 8007a72:	69fb      	ldr	r3, [r7, #28]
 8007a74:	68db      	ldr	r3, [r3, #12]
 8007a76:	61fb      	str	r3, [r7, #28]
      continue;
 8007a78:	e1fb      	b.n	8007e72 <tcp_slowtmr+0x43e>
    }
    pcb->last_timer = tcp_timer_ctr;
 8007a7a:	4bbb      	ldr	r3, [pc, #748]	; (8007d68 <tcp_slowtmr+0x334>)
 8007a7c:	7819      	ldrb	r1, [r3, #0]
 8007a7e:	69fb      	ldr	r3, [r7, #28]
 8007a80:	2221      	movs	r2, #33	; 0x21
 8007a82:	5499      	strb	r1, [r3, r2]

    pcb_remove = 0;
 8007a84:	2317      	movs	r3, #23
 8007a86:	18fb      	adds	r3, r7, r3
 8007a88:	2200      	movs	r2, #0
 8007a8a:	701a      	strb	r2, [r3, #0]
    pcb_reset = 0;
 8007a8c:	2316      	movs	r3, #22
 8007a8e:	18fb      	adds	r3, r7, r3
 8007a90:	2200      	movs	r2, #0
 8007a92:	701a      	strb	r2, [r3, #0]

    if (pcb->state == SYN_SENT && pcb->nrtx == TCP_SYNMAXRTX) {
 8007a94:	69fb      	ldr	r3, [r7, #28]
 8007a96:	7e1b      	ldrb	r3, [r3, #24]
 8007a98:	2b02      	cmp	r3, #2
 8007a9a:	d10b      	bne.n	8007ab4 <tcp_slowtmr+0x80>
 8007a9c:	69fb      	ldr	r3, [r7, #28]
 8007a9e:	2246      	movs	r2, #70	; 0x46
 8007aa0:	5c9b      	ldrb	r3, [r3, r2]
 8007aa2:	2b06      	cmp	r3, #6
 8007aa4:	d106      	bne.n	8007ab4 <tcp_slowtmr+0x80>
      ++pcb_remove;
 8007aa6:	2217      	movs	r2, #23
 8007aa8:	18bb      	adds	r3, r7, r2
 8007aaa:	18ba      	adds	r2, r7, r2
 8007aac:	7812      	ldrb	r2, [r2, #0]
 8007aae:	3201      	adds	r2, #1
 8007ab0:	701a      	strb	r2, [r3, #0]
 8007ab2:	e0a1      	b.n	8007bf8 <tcp_slowtmr+0x1c4>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx == TCP_MAXRTX) {
 8007ab4:	69fb      	ldr	r3, [r7, #28]
 8007ab6:	2246      	movs	r2, #70	; 0x46
 8007ab8:	5c9b      	ldrb	r3, [r3, r2]
 8007aba:	2b0c      	cmp	r3, #12
 8007abc:	d106      	bne.n	8007acc <tcp_slowtmr+0x98>
      ++pcb_remove;
 8007abe:	2217      	movs	r2, #23
 8007ac0:	18bb      	adds	r3, r7, r2
 8007ac2:	18ba      	adds	r2, r7, r2
 8007ac4:	7812      	ldrb	r2, [r2, #0]
 8007ac6:	3201      	adds	r2, #1
 8007ac8:	701a      	strb	r2, [r3, #0]
 8007aca:	e095      	b.n	8007bf8 <tcp_slowtmr+0x1c4>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8007acc:	69fb      	ldr	r3, [r7, #28]
 8007ace:	2295      	movs	r2, #149	; 0x95
 8007ad0:	5c9b      	ldrb	r3, [r3, r2]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d029      	beq.n	8007b2a <tcp_slowtmr+0xf6>
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        pcb->persist_cnt++;
 8007ad6:	69fb      	ldr	r3, [r7, #28]
 8007ad8:	2294      	movs	r2, #148	; 0x94
 8007ada:	5c9b      	ldrb	r3, [r3, r2]
 8007adc:	3301      	adds	r3, #1
 8007ade:	b2d9      	uxtb	r1, r3
 8007ae0:	69fb      	ldr	r3, [r7, #28]
 8007ae2:	2294      	movs	r2, #148	; 0x94
 8007ae4:	5499      	strb	r1, [r3, r2]
        if (pcb->persist_cnt >= tcp_persist_backoff[pcb->persist_backoff-1]) {
 8007ae6:	69fb      	ldr	r3, [r7, #28]
 8007ae8:	2294      	movs	r2, #148	; 0x94
 8007aea:	5c9a      	ldrb	r2, [r3, r2]
 8007aec:	69fb      	ldr	r3, [r7, #28]
 8007aee:	2195      	movs	r1, #149	; 0x95
 8007af0:	5c5b      	ldrb	r3, [r3, r1]
 8007af2:	3b01      	subs	r3, #1
 8007af4:	499e      	ldr	r1, [pc, #632]	; (8007d70 <tcp_slowtmr+0x33c>)
 8007af6:	5ccb      	ldrb	r3, [r1, r3]
 8007af8:	429a      	cmp	r2, r3
 8007afa:	d200      	bcs.n	8007afe <tcp_slowtmr+0xca>
 8007afc:	e07c      	b.n	8007bf8 <tcp_slowtmr+0x1c4>
          pcb->persist_cnt = 0;
 8007afe:	69fb      	ldr	r3, [r7, #28]
 8007b00:	2294      	movs	r2, #148	; 0x94
 8007b02:	2100      	movs	r1, #0
 8007b04:	5499      	strb	r1, [r3, r2]
          if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8007b06:	69fb      	ldr	r3, [r7, #28]
 8007b08:	2295      	movs	r2, #149	; 0x95
 8007b0a:	5c9b      	ldrb	r3, [r3, r2]
 8007b0c:	2b06      	cmp	r3, #6
 8007b0e:	d807      	bhi.n	8007b20 <tcp_slowtmr+0xec>
            pcb->persist_backoff++;
 8007b10:	69fb      	ldr	r3, [r7, #28]
 8007b12:	2295      	movs	r2, #149	; 0x95
 8007b14:	5c9b      	ldrb	r3, [r3, r2]
 8007b16:	3301      	adds	r3, #1
 8007b18:	b2d9      	uxtb	r1, r3
 8007b1a:	69fb      	ldr	r3, [r7, #28]
 8007b1c:	2295      	movs	r2, #149	; 0x95
 8007b1e:	5499      	strb	r1, [r3, r2]
          }
          tcp_zero_window_probe(pcb);
 8007b20:	69fb      	ldr	r3, [r7, #28]
 8007b22:	0018      	movs	r0, r3
 8007b24:	f004 fdae 	bl	800c684 <tcp_zero_window_probe>
 8007b28:	e066      	b.n	8007bf8 <tcp_slowtmr+0x1c4>
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if(pcb->rtime >= 0) {
 8007b2a:	69fb      	ldr	r3, [r7, #28]
 8007b2c:	2234      	movs	r2, #52	; 0x34
 8007b2e:	5e9b      	ldrsh	r3, [r3, r2]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	db08      	blt.n	8007b46 <tcp_slowtmr+0x112>
          ++pcb->rtime;
 8007b34:	69fb      	ldr	r3, [r7, #28]
 8007b36:	2234      	movs	r2, #52	; 0x34
 8007b38:	5e9b      	ldrsh	r3, [r3, r2]
 8007b3a:	b29b      	uxth	r3, r3
 8007b3c:	3301      	adds	r3, #1
 8007b3e:	b29b      	uxth	r3, r3
 8007b40:	b21a      	sxth	r2, r3
 8007b42:	69fb      	ldr	r3, [r7, #28]
 8007b44:	869a      	strh	r2, [r3, #52]	; 0x34
        }

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 8007b46:	69fb      	ldr	r3, [r7, #28]
 8007b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d054      	beq.n	8007bf8 <tcp_slowtmr+0x1c4>
 8007b4e:	69fb      	ldr	r3, [r7, #28]
 8007b50:	2234      	movs	r2, #52	; 0x34
 8007b52:	5e9a      	ldrsh	r2, [r3, r2]
 8007b54:	69fb      	ldr	r3, [r7, #28]
 8007b56:	2144      	movs	r1, #68	; 0x44
 8007b58:	5e5b      	ldrsh	r3, [r3, r1]
 8007b5a:	429a      	cmp	r2, r3
 8007b5c:	db4c      	blt.n	8007bf8 <tcp_slowtmr+0x1c4>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
 8007b5e:	69fb      	ldr	r3, [r7, #28]
 8007b60:	7e1b      	ldrb	r3, [r3, #24]
 8007b62:	2b02      	cmp	r3, #2
 8007b64:	d014      	beq.n	8007b90 <tcp_slowtmr+0x15c>
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[pcb->nrtx];
 8007b66:	69fb      	ldr	r3, [r7, #28]
 8007b68:	2240      	movs	r2, #64	; 0x40
 8007b6a:	5e9b      	ldrsh	r3, [r3, r2]
 8007b6c:	10db      	asrs	r3, r3, #3
 8007b6e:	b21b      	sxth	r3, r3
 8007b70:	0019      	movs	r1, r3
 8007b72:	69fb      	ldr	r3, [r7, #28]
 8007b74:	2242      	movs	r2, #66	; 0x42
 8007b76:	5e9b      	ldrsh	r3, [r3, r2]
 8007b78:	18cb      	adds	r3, r1, r3
 8007b7a:	69fa      	ldr	r2, [r7, #28]
 8007b7c:	2146      	movs	r1, #70	; 0x46
 8007b7e:	5c52      	ldrb	r2, [r2, r1]
 8007b80:	0011      	movs	r1, r2
 8007b82:	4a7c      	ldr	r2, [pc, #496]	; (8007d74 <tcp_slowtmr+0x340>)
 8007b84:	5c52      	ldrb	r2, [r2, r1]
 8007b86:	4093      	lsls	r3, r2
 8007b88:	b219      	sxth	r1, r3
 8007b8a:	69fb      	ldr	r3, [r7, #28]
 8007b8c:	2244      	movs	r2, #68	; 0x44
 8007b8e:	5299      	strh	r1, [r3, r2]
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
 8007b90:	69fb      	ldr	r3, [r7, #28]
 8007b92:	2200      	movs	r2, #0
 8007b94:	869a      	strh	r2, [r3, #52]	; 0x34

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8007b96:	69fb      	ldr	r3, [r7, #28]
 8007b98:	2260      	movs	r2, #96	; 0x60
 8007b9a:	5a99      	ldrh	r1, [r3, r2]
 8007b9c:	69fb      	ldr	r3, [r7, #28]
 8007b9e:	224c      	movs	r2, #76	; 0x4c
 8007ba0:	5a9b      	ldrh	r3, [r3, r2]
 8007ba2:	220e      	movs	r2, #14
 8007ba4:	18ba      	adds	r2, r7, r2
 8007ba6:	1c1c      	adds	r4, r3, #0
 8007ba8:	1c0b      	adds	r3, r1, #0
 8007baa:	b298      	uxth	r0, r3
 8007bac:	b2a1      	uxth	r1, r4
 8007bae:	4288      	cmp	r0, r1
 8007bb0:	d900      	bls.n	8007bb4 <tcp_slowtmr+0x180>
 8007bb2:	1c23      	adds	r3, r4, #0
 8007bb4:	8013      	strh	r3, [r2, #0]
          pcb->ssthresh = eff_wnd >> 1;
 8007bb6:	230e      	movs	r3, #14
 8007bb8:	18fb      	adds	r3, r7, r3
 8007bba:	881b      	ldrh	r3, [r3, #0]
 8007bbc:	085b      	lsrs	r3, r3, #1
 8007bbe:	b299      	uxth	r1, r3
 8007bc0:	69fb      	ldr	r3, [r7, #28]
 8007bc2:	224e      	movs	r2, #78	; 0x4e
 8007bc4:	5299      	strh	r1, [r3, r2]
          if (pcb->ssthresh < (pcb->mss << 1)) {
 8007bc6:	69fb      	ldr	r3, [r7, #28]
 8007bc8:	224e      	movs	r2, #78	; 0x4e
 8007bca:	5a9b      	ldrh	r3, [r3, r2]
 8007bcc:	001a      	movs	r2, r3
 8007bce:	69fb      	ldr	r3, [r7, #28]
 8007bd0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007bd2:	005b      	lsls	r3, r3, #1
 8007bd4:	429a      	cmp	r2, r3
 8007bd6:	da06      	bge.n	8007be6 <tcp_slowtmr+0x1b2>
            pcb->ssthresh = (pcb->mss << 1);
 8007bd8:	69fb      	ldr	r3, [r7, #28]
 8007bda:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007bdc:	18db      	adds	r3, r3, r3
 8007bde:	b299      	uxth	r1, r3
 8007be0:	69fb      	ldr	r3, [r7, #28]
 8007be2:	224e      	movs	r2, #78	; 0x4e
 8007be4:	5299      	strh	r1, [r3, r2]
          }
          pcb->cwnd = pcb->mss;
 8007be6:	69fb      	ldr	r3, [r7, #28]
 8007be8:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
 8007bea:	69fb      	ldr	r3, [r7, #28]
 8007bec:	224c      	movs	r2, #76	; 0x4c
 8007bee:	5299      	strh	r1, [r3, r2]
                                       " ssthresh %"U16_F"\n",
                                       pcb->cwnd, pcb->ssthresh));
 
          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
 8007bf0:	69fb      	ldr	r3, [r7, #28]
 8007bf2:	0018      	movs	r0, r3
 8007bf4:	f004 fc0a 	bl	800c40c <tcp_rexmit_rto>
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8007bf8:	69fb      	ldr	r3, [r7, #28]
 8007bfa:	7e1b      	ldrb	r3, [r3, #24]
 8007bfc:	2b06      	cmp	r3, #6
 8007bfe:	d112      	bne.n	8007c26 <tcp_slowtmr+0x1f2>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8007c00:	69fb      	ldr	r3, [r7, #28]
 8007c02:	7f9b      	ldrb	r3, [r3, #30]
 8007c04:	001a      	movs	r2, r3
 8007c06:	2310      	movs	r3, #16
 8007c08:	4013      	ands	r3, r2
 8007c0a:	d00c      	beq.n	8007c26 <tcp_slowtmr+0x1f2>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007c0c:	4b55      	ldr	r3, [pc, #340]	; (8007d64 <tcp_slowtmr+0x330>)
 8007c0e:	681a      	ldr	r2, [r3, #0]
 8007c10:	69fb      	ldr	r3, [r7, #28]
 8007c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c14:	1ad3      	subs	r3, r2, r3
 8007c16:	2b28      	cmp	r3, #40	; 0x28
 8007c18:	d905      	bls.n	8007c26 <tcp_slowtmr+0x1f2>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8007c1a:	2217      	movs	r2, #23
 8007c1c:	18bb      	adds	r3, r7, r2
 8007c1e:	18ba      	adds	r2, r7, r2
 8007c20:	7812      	ldrb	r2, [r2, #0]
 8007c22:	3201      	adds	r2, #1
 8007c24:	701a      	strb	r2, [r3, #0]
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if(ip_get_option(pcb, SOF_KEEPALIVE) &&
 8007c26:	69fb      	ldr	r3, [r7, #28]
 8007c28:	7a1b      	ldrb	r3, [r3, #8]
 8007c2a:	001a      	movs	r2, r3
 8007c2c:	2308      	movs	r3, #8
 8007c2e:	4013      	ands	r3, r2
 8007c30:	d049      	beq.n	8007cc6 <tcp_slowtmr+0x292>
       ((pcb->state == ESTABLISHED) ||
 8007c32:	69fb      	ldr	r3, [r7, #28]
 8007c34:	7e1b      	ldrb	r3, [r3, #24]
    if(ip_get_option(pcb, SOF_KEEPALIVE) &&
 8007c36:	2b04      	cmp	r3, #4
 8007c38:	d003      	beq.n	8007c42 <tcp_slowtmr+0x20e>
        (pcb->state == CLOSE_WAIT))) {
 8007c3a:	69fb      	ldr	r3, [r7, #28]
 8007c3c:	7e1b      	ldrb	r3, [r3, #24]
       ((pcb->state == ESTABLISHED) ||
 8007c3e:	2b07      	cmp	r3, #7
 8007c40:	d141      	bne.n	8007cc6 <tcp_slowtmr+0x292>
      if((u32_t)(tcp_ticks - pcb->tmr) >
 8007c42:	4b48      	ldr	r3, [pc, #288]	; (8007d64 <tcp_slowtmr+0x330>)
 8007c44:	681a      	ldr	r2, [r3, #0]
 8007c46:	69fb      	ldr	r3, [r7, #28]
 8007c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c4a:	1ad4      	subs	r4, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 8007c4c:	69fb      	ldr	r3, [r7, #28]
 8007c4e:	2290      	movs	r2, #144	; 0x90
 8007c50:	589b      	ldr	r3, [r3, r2]
 8007c52:	4a49      	ldr	r2, [pc, #292]	; (8007d78 <tcp_slowtmr+0x344>)
 8007c54:	189a      	adds	r2, r3, r2
 8007c56:	23fa      	movs	r3, #250	; 0xfa
 8007c58:	0059      	lsls	r1, r3, #1
 8007c5a:	0010      	movs	r0, r2
 8007c5c:	f7f8 fa66 	bl	800012c <__udivsi3>
 8007c60:	0003      	movs	r3, r0
      if((u32_t)(tcp_ticks - pcb->tmr) >
 8007c62:	429c      	cmp	r4, r3
 8007c64:	d90c      	bls.n	8007c80 <tcp_slowtmr+0x24c>
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to %"U16_F".%"U16_F".%"U16_F".%"U16_F".\n",
                                ip4_addr1_16(&pcb->remote_ip), ip4_addr2_16(&pcb->remote_ip),
                                ip4_addr3_16(&pcb->remote_ip), ip4_addr4_16(&pcb->remote_ip)));
        
        ++pcb_remove;
 8007c66:	2217      	movs	r2, #23
 8007c68:	18bb      	adds	r3, r7, r2
 8007c6a:	18ba      	adds	r2, r7, r2
 8007c6c:	7812      	ldrb	r2, [r2, #0]
 8007c6e:	3201      	adds	r2, #1
 8007c70:	701a      	strb	r2, [r3, #0]
        ++pcb_reset;
 8007c72:	2216      	movs	r2, #22
 8007c74:	18bb      	adds	r3, r7, r2
 8007c76:	18ba      	adds	r2, r7, r2
 8007c78:	7812      	ldrb	r2, [r2, #0]
 8007c7a:	3201      	adds	r2, #1
 8007c7c:	701a      	strb	r2, [r3, #0]
 8007c7e:	e022      	b.n	8007cc6 <tcp_slowtmr+0x292>
      }
      else if((u32_t)(tcp_ticks - pcb->tmr) > 
 8007c80:	4b38      	ldr	r3, [pc, #224]	; (8007d64 <tcp_slowtmr+0x330>)
 8007c82:	681a      	ldr	r2, [r3, #0]
 8007c84:	69fb      	ldr	r3, [r7, #28]
 8007c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c88:	1ad4      	subs	r4, r2, r3
              (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8007c8a:	69fb      	ldr	r3, [r7, #28]
 8007c8c:	2290      	movs	r2, #144	; 0x90
 8007c8e:	589a      	ldr	r2, [r3, r2]
 8007c90:	69fb      	ldr	r3, [r7, #28]
 8007c92:	2196      	movs	r1, #150	; 0x96
 8007c94:	5c5b      	ldrb	r3, [r3, r1]
 8007c96:	0019      	movs	r1, r3
 8007c98:	4b38      	ldr	r3, [pc, #224]	; (8007d7c <tcp_slowtmr+0x348>)
 8007c9a:	434b      	muls	r3, r1
 8007c9c:	18d2      	adds	r2, r2, r3
              / TCP_SLOW_INTERVAL)
 8007c9e:	23fa      	movs	r3, #250	; 0xfa
 8007ca0:	0059      	lsls	r1, r3, #1
 8007ca2:	0010      	movs	r0, r2
 8007ca4:	f7f8 fa42 	bl	800012c <__udivsi3>
 8007ca8:	0003      	movs	r3, r0
      else if((u32_t)(tcp_ticks - pcb->tmr) > 
 8007caa:	429c      	cmp	r4, r3
 8007cac:	d90b      	bls.n	8007cc6 <tcp_slowtmr+0x292>
      {
        tcp_keepalive(pcb);
 8007cae:	69fb      	ldr	r3, [r7, #28]
 8007cb0:	0018      	movs	r0, r3
 8007cb2:	f004 fc8f 	bl	800c5d4 <tcp_keepalive>
        pcb->keep_cnt_sent++;
 8007cb6:	69fb      	ldr	r3, [r7, #28]
 8007cb8:	2296      	movs	r2, #150	; 0x96
 8007cba:	5c9b      	ldrb	r3, [r3, r2]
 8007cbc:	3301      	adds	r3, #1
 8007cbe:	b2d9      	uxtb	r1, r3
 8007cc0:	69fb      	ldr	r3, [r7, #28]
 8007cc2:	2296      	movs	r2, #150	; 0x96
 8007cc4:	5499      	strb	r1, [r3, r2]

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8007cc6:	69fb      	ldr	r3, [r7, #28]
 8007cc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d016      	beq.n	8007cfc <tcp_slowtmr+0x2c8>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 8007cce:	4b25      	ldr	r3, [pc, #148]	; (8007d64 <tcp_slowtmr+0x330>)
 8007cd0:	681a      	ldr	r2, [r3, #0]
 8007cd2:	69fb      	ldr	r3, [r7, #28]
 8007cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cd6:	1ad2      	subs	r2, r2, r3
 8007cd8:	69fb      	ldr	r3, [r7, #28]
 8007cda:	2144      	movs	r1, #68	; 0x44
 8007cdc:	5e5b      	ldrsh	r3, [r3, r1]
 8007cde:	0019      	movs	r1, r3
 8007ce0:	000b      	movs	r3, r1
 8007ce2:	005b      	lsls	r3, r3, #1
 8007ce4:	185b      	adds	r3, r3, r1
 8007ce6:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8007ce8:	429a      	cmp	r2, r3
 8007cea:	d307      	bcc.n	8007cfc <tcp_slowtmr+0x2c8>
      tcp_segs_free(pcb->ooseq);
 8007cec:	69fb      	ldr	r3, [r7, #28]
 8007cee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007cf0:	0018      	movs	r0, r3
 8007cf2:	f000 f9d9 	bl	80080a8 <tcp_segs_free>
      pcb->ooseq = NULL;
 8007cf6:	69fb      	ldr	r3, [r7, #28]
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	675a      	str	r2, [r3, #116]	; 0x74
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8007cfc:	69fb      	ldr	r3, [r7, #28]
 8007cfe:	7e1b      	ldrb	r3, [r3, #24]
 8007d00:	2b03      	cmp	r3, #3
 8007d02:	d10c      	bne.n	8007d1e <tcp_slowtmr+0x2ea>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007d04:	4b17      	ldr	r3, [pc, #92]	; (8007d64 <tcp_slowtmr+0x330>)
 8007d06:	681a      	ldr	r2, [r3, #0]
 8007d08:	69fb      	ldr	r3, [r7, #28]
 8007d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d0c:	1ad3      	subs	r3, r2, r3
 8007d0e:	2b28      	cmp	r3, #40	; 0x28
 8007d10:	d905      	bls.n	8007d1e <tcp_slowtmr+0x2ea>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8007d12:	2217      	movs	r2, #23
 8007d14:	18bb      	adds	r3, r7, r2
 8007d16:	18ba      	adds	r2, r7, r2
 8007d18:	7812      	ldrb	r2, [r2, #0]
 8007d1a:	3201      	adds	r2, #1
 8007d1c:	701a      	strb	r2, [r3, #0]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8007d1e:	69fb      	ldr	r3, [r7, #28]
 8007d20:	7e1b      	ldrb	r3, [r3, #24]
 8007d22:	2b09      	cmp	r3, #9
 8007d24:	d10c      	bne.n	8007d40 <tcp_slowtmr+0x30c>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8007d26:	4b0f      	ldr	r3, [pc, #60]	; (8007d64 <tcp_slowtmr+0x330>)
 8007d28:	681a      	ldr	r2, [r3, #0]
 8007d2a:	69fb      	ldr	r3, [r7, #28]
 8007d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d2e:	1ad3      	subs	r3, r2, r3
 8007d30:	2bf0      	cmp	r3, #240	; 0xf0
 8007d32:	d905      	bls.n	8007d40 <tcp_slowtmr+0x30c>
        ++pcb_remove;
 8007d34:	2217      	movs	r2, #23
 8007d36:	18bb      	adds	r3, r7, r2
 8007d38:	18ba      	adds	r2, r7, r2
 8007d3a:	7812      	ldrb	r2, [r2, #0]
 8007d3c:	3201      	adds	r2, #1
 8007d3e:	701a      	strb	r2, [r3, #0]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8007d40:	2317      	movs	r3, #23
 8007d42:	18fb      	adds	r3, r7, r3
 8007d44:	781b      	ldrb	r3, [r3, #0]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d056      	beq.n	8007df8 <tcp_slowtmr+0x3c4>
      struct tcp_pcb *pcb2;
      tcp_err_fn err_fn;
      void *err_arg;
      tcp_pcb_purge(pcb);
 8007d4a:	69fb      	ldr	r3, [r7, #28]
 8007d4c:	0018      	movs	r0, r3
 8007d4e:	f000 fbb0 	bl	80084b2 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8007d52:	69bb      	ldr	r3, [r7, #24]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d013      	beq.n	8007d80 <tcp_slowtmr+0x34c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
        prev->next = pcb->next;
 8007d58:	69fb      	ldr	r3, [r7, #28]
 8007d5a:	68da      	ldr	r2, [r3, #12]
 8007d5c:	69bb      	ldr	r3, [r7, #24]
 8007d5e:	60da      	str	r2, [r3, #12]
 8007d60:	e012      	b.n	8007d88 <tcp_slowtmr+0x354>
 8007d62:	46c0      	nop			; (mov r8, r8)
 8007d64:	2000352c 	.word	0x2000352c
 8007d68:	20002701 	.word	0x20002701
 8007d6c:	20003528 	.word	0x20003528
 8007d70:	0801c9e8 	.word	0x0801c9e8
 8007d74:	0801c9d8 	.word	0x0801c9d8
 8007d78:	000a4cb8 	.word	0x000a4cb8
 8007d7c:	000124f8 	.word	0x000124f8
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
        tcp_active_pcbs = pcb->next;
 8007d80:	69fb      	ldr	r3, [r7, #28]
 8007d82:	68da      	ldr	r2, [r3, #12]
 8007d84:	4b5e      	ldr	r3, [pc, #376]	; (8007f00 <tcp_slowtmr+0x4cc>)
 8007d86:	601a      	str	r2, [r3, #0]
      }

      if (pcb_reset) {
 8007d88:	2316      	movs	r3, #22
 8007d8a:	18fb      	adds	r3, r7, r3
 8007d8c:	781b      	ldrb	r3, [r3, #0]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d010      	beq.n	8007db4 <tcp_slowtmr+0x380>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8007d92:	69fb      	ldr	r3, [r7, #28]
 8007d94:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8007d96:	69fb      	ldr	r3, [r7, #28]
 8007d98:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8007d9a:	69fc      	ldr	r4, [r7, #28]
 8007d9c:	69fb      	ldr	r3, [r7, #28]
 8007d9e:	1d1d      	adds	r5, r3, #4
 8007da0:	69fb      	ldr	r3, [r7, #28]
 8007da2:	8b5b      	ldrh	r3, [r3, #26]
 8007da4:	69fa      	ldr	r2, [r7, #28]
 8007da6:	8b92      	ldrh	r2, [r2, #28]
 8007da8:	9201      	str	r2, [sp, #4]
 8007daa:	9300      	str	r3, [sp, #0]
 8007dac:	002b      	movs	r3, r5
 8007dae:	0022      	movs	r2, r4
 8007db0:	f004 fa08 	bl	800c1c4 <tcp_rst>
          pcb->local_port, pcb->remote_port);
      }

      err_fn = pcb->errf;
 8007db4:	69fb      	ldr	r3, [r7, #28]
 8007db6:	228c      	movs	r2, #140	; 0x8c
 8007db8:	589b      	ldr	r3, [r3, r2]
 8007dba:	60bb      	str	r3, [r7, #8]
      err_arg = pcb->callback_arg;
 8007dbc:	69fb      	ldr	r3, [r7, #28]
 8007dbe:	691b      	ldr	r3, [r3, #16]
 8007dc0:	607b      	str	r3, [r7, #4]
      pcb2 = pcb;
 8007dc2:	69fb      	ldr	r3, [r7, #28]
 8007dc4:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8007dc6:	69fb      	ldr	r3, [r7, #28]
 8007dc8:	68db      	ldr	r3, [r3, #12]
 8007dca:	61fb      	str	r3, [r7, #28]
      memp_free(MEMP_TCP_PCB, pcb2);
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	0019      	movs	r1, r3
 8007dd0:	2002      	movs	r0, #2
 8007dd2:	f7fe fc1d 	bl	8006610 <memp_free>

      tcp_active_pcbs_changed = 0;
 8007dd6:	4b4b      	ldr	r3, [pc, #300]	; (8007f04 <tcp_slowtmr+0x4d0>)
 8007dd8:	2200      	movs	r2, #0
 8007dda:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(err_fn, err_arg, ERR_ABRT);
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d005      	beq.n	8007dee <tcp_slowtmr+0x3ba>
 8007de2:	230a      	movs	r3, #10
 8007de4:	4259      	negs	r1, r3
 8007de6:	687a      	ldr	r2, [r7, #4]
 8007de8:	68bb      	ldr	r3, [r7, #8]
 8007dea:	0010      	movs	r0, r2
 8007dec:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8007dee:	4b45      	ldr	r3, [pc, #276]	; (8007f04 <tcp_slowtmr+0x4d0>)
 8007df0:	781b      	ldrb	r3, [r3, #0]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d03d      	beq.n	8007e72 <tcp_slowtmr+0x43e>
        goto tcp_slowtmr_start;
 8007df6:	e62f      	b.n	8007a58 <tcp_slowtmr+0x24>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8007df8:	69fb      	ldr	r3, [r7, #28]
 8007dfa:	61bb      	str	r3, [r7, #24]
      pcb = pcb->next;
 8007dfc:	69fb      	ldr	r3, [r7, #28]
 8007dfe:	68db      	ldr	r3, [r3, #12]
 8007e00:	61fb      	str	r3, [r7, #28]

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8007e02:	69bb      	ldr	r3, [r7, #24]
 8007e04:	7fdb      	ldrb	r3, [r3, #31]
 8007e06:	3301      	adds	r3, #1
 8007e08:	b2da      	uxtb	r2, r3
 8007e0a:	69bb      	ldr	r3, [r7, #24]
 8007e0c:	77da      	strb	r2, [r3, #31]
      if (prev->polltmr >= prev->pollinterval) {
 8007e0e:	69bb      	ldr	r3, [r7, #24]
 8007e10:	7fda      	ldrb	r2, [r3, #31]
 8007e12:	69bb      	ldr	r3, [r7, #24]
 8007e14:	2120      	movs	r1, #32
 8007e16:	5c5b      	ldrb	r3, [r3, r1]
 8007e18:	429a      	cmp	r2, r3
 8007e1a:	d32a      	bcc.n	8007e72 <tcp_slowtmr+0x43e>
        prev->polltmr = 0;
 8007e1c:	69bb      	ldr	r3, [r7, #24]
 8007e1e:	2200      	movs	r2, #0
 8007e20:	77da      	strb	r2, [r3, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8007e22:	4b38      	ldr	r3, [pc, #224]	; (8007f04 <tcp_slowtmr+0x4d0>)
 8007e24:	2200      	movs	r2, #0
 8007e26:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8007e28:	69bb      	ldr	r3, [r7, #24]
 8007e2a:	2288      	movs	r2, #136	; 0x88
 8007e2c:	589b      	ldr	r3, [r3, r2]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d00c      	beq.n	8007e4c <tcp_slowtmr+0x418>
 8007e32:	69bb      	ldr	r3, [r7, #24]
 8007e34:	2288      	movs	r2, #136	; 0x88
 8007e36:	589a      	ldr	r2, [r3, r2]
 8007e38:	69bb      	ldr	r3, [r7, #24]
 8007e3a:	691b      	ldr	r3, [r3, #16]
 8007e3c:	2115      	movs	r1, #21
 8007e3e:	187c      	adds	r4, r7, r1
 8007e40:	69b9      	ldr	r1, [r7, #24]
 8007e42:	0018      	movs	r0, r3
 8007e44:	4790      	blx	r2
 8007e46:	0003      	movs	r3, r0
 8007e48:	7023      	strb	r3, [r4, #0]
 8007e4a:	e003      	b.n	8007e54 <tcp_slowtmr+0x420>
 8007e4c:	2315      	movs	r3, #21
 8007e4e:	18fb      	adds	r3, r7, r3
 8007e50:	2200      	movs	r2, #0
 8007e52:	701a      	strb	r2, [r3, #0]
        if (tcp_active_pcbs_changed) {
 8007e54:	4b2b      	ldr	r3, [pc, #172]	; (8007f04 <tcp_slowtmr+0x4d0>)
 8007e56:	781b      	ldrb	r3, [r3, #0]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d000      	beq.n	8007e5e <tcp_slowtmr+0x42a>
          goto tcp_slowtmr_start;
 8007e5c:	e5fc      	b.n	8007a58 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8007e5e:	2315      	movs	r3, #21
 8007e60:	18fb      	adds	r3, r7, r3
 8007e62:	781b      	ldrb	r3, [r3, #0]
 8007e64:	b25b      	sxtb	r3, r3
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d103      	bne.n	8007e72 <tcp_slowtmr+0x43e>
          tcp_output(prev);
 8007e6a:	69bb      	ldr	r3, [r7, #24]
 8007e6c:	0018      	movs	r0, r3
 8007e6e:	f003 fecb 	bl	800bc08 <tcp_output>
  while (pcb != NULL) {
 8007e72:	69fb      	ldr	r3, [r7, #28]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d000      	beq.n	8007e7a <tcp_slowtmr+0x446>
 8007e78:	e5f4      	b.n	8007a64 <tcp_slowtmr+0x30>
    }
  }

  
  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	61bb      	str	r3, [r7, #24]
  pcb = tcp_tw_pcbs;
 8007e7e:	4b22      	ldr	r3, [pc, #136]	; (8007f08 <tcp_slowtmr+0x4d4>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	61fb      	str	r3, [r7, #28]
  while (pcb != NULL) {
 8007e84:	e035      	b.n	8007ef2 <tcp_slowtmr+0x4be>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
    pcb_remove = 0;
 8007e86:	2317      	movs	r3, #23
 8007e88:	18fb      	adds	r3, r7, r3
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	701a      	strb	r2, [r3, #0]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8007e8e:	4b1f      	ldr	r3, [pc, #124]	; (8007f0c <tcp_slowtmr+0x4d8>)
 8007e90:	681a      	ldr	r2, [r3, #0]
 8007e92:	69fb      	ldr	r3, [r7, #28]
 8007e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e96:	1ad3      	subs	r3, r2, r3
 8007e98:	2bf0      	cmp	r3, #240	; 0xf0
 8007e9a:	d905      	bls.n	8007ea8 <tcp_slowtmr+0x474>
      ++pcb_remove;
 8007e9c:	2217      	movs	r2, #23
 8007e9e:	18bb      	adds	r3, r7, r2
 8007ea0:	18ba      	adds	r2, r7, r2
 8007ea2:	7812      	ldrb	r2, [r2, #0]
 8007ea4:	3201      	adds	r2, #1
 8007ea6:	701a      	strb	r2, [r3, #0]
    }
    


    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8007ea8:	2317      	movs	r3, #23
 8007eaa:	18fb      	adds	r3, r7, r3
 8007eac:	781b      	ldrb	r3, [r3, #0]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d01a      	beq.n	8007ee8 <tcp_slowtmr+0x4b4>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8007eb2:	69fb      	ldr	r3, [r7, #28]
 8007eb4:	0018      	movs	r0, r3
 8007eb6:	f000 fafc 	bl	80084b2 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8007eba:	69bb      	ldr	r3, [r7, #24]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d004      	beq.n	8007eca <tcp_slowtmr+0x496>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
        prev->next = pcb->next;
 8007ec0:	69fb      	ldr	r3, [r7, #28]
 8007ec2:	68da      	ldr	r2, [r3, #12]
 8007ec4:	69bb      	ldr	r3, [r7, #24]
 8007ec6:	60da      	str	r2, [r3, #12]
 8007ec8:	e003      	b.n	8007ed2 <tcp_slowtmr+0x49e>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
        tcp_tw_pcbs = pcb->next;
 8007eca:	69fb      	ldr	r3, [r7, #28]
 8007ecc:	68da      	ldr	r2, [r3, #12]
 8007ece:	4b0e      	ldr	r3, [pc, #56]	; (8007f08 <tcp_slowtmr+0x4d4>)
 8007ed0:	601a      	str	r2, [r3, #0]
      }
      pcb2 = pcb;
 8007ed2:	69fb      	ldr	r3, [r7, #28]
 8007ed4:	613b      	str	r3, [r7, #16]
      pcb = pcb->next;
 8007ed6:	69fb      	ldr	r3, [r7, #28]
 8007ed8:	68db      	ldr	r3, [r3, #12]
 8007eda:	61fb      	str	r3, [r7, #28]
      memp_free(MEMP_TCP_PCB, pcb2);
 8007edc:	693b      	ldr	r3, [r7, #16]
 8007ede:	0019      	movs	r1, r3
 8007ee0:	2002      	movs	r0, #2
 8007ee2:	f7fe fb95 	bl	8006610 <memp_free>
 8007ee6:	e004      	b.n	8007ef2 <tcp_slowtmr+0x4be>
    } else {
      prev = pcb;
 8007ee8:	69fb      	ldr	r3, [r7, #28]
 8007eea:	61bb      	str	r3, [r7, #24]
      pcb = pcb->next;
 8007eec:	69fb      	ldr	r3, [r7, #28]
 8007eee:	68db      	ldr	r3, [r3, #12]
 8007ef0:	61fb      	str	r3, [r7, #28]
  while (pcb != NULL) {
 8007ef2:	69fb      	ldr	r3, [r7, #28]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d1c6      	bne.n	8007e86 <tcp_slowtmr+0x452>
    }
  }
}
 8007ef8:	46c0      	nop			; (mov r8, r8)
 8007efa:	46bd      	mov	sp, r7
 8007efc:	b008      	add	sp, #32
 8007efe:	bdb0      	pop	{r4, r5, r7, pc}
 8007f00:	20003528 	.word	0x20003528
 8007f04:	20003524 	.word	0x20003524
 8007f08:	2000353c 	.word	0x2000353c
 8007f0c:	2000352c 	.word	0x2000352c

08007f10 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b082      	sub	sp, #8
 8007f14:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8007f16:	4b25      	ldr	r3, [pc, #148]	; (8007fac <tcp_fasttmr+0x9c>)
 8007f18:	781b      	ldrb	r3, [r3, #0]
 8007f1a:	3301      	adds	r3, #1
 8007f1c:	b2da      	uxtb	r2, r3
 8007f1e:	4b23      	ldr	r3, [pc, #140]	; (8007fac <tcp_fasttmr+0x9c>)
 8007f20:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8007f22:	4b23      	ldr	r3, [pc, #140]	; (8007fb0 <tcp_fasttmr+0xa0>)
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	607b      	str	r3, [r7, #4]

  while(pcb != NULL) {
 8007f28:	e038      	b.n	8007f9c <tcp_fasttmr+0x8c>
    if (pcb->last_timer != tcp_timer_ctr) {
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2221      	movs	r2, #33	; 0x21
 8007f2e:	5c9a      	ldrb	r2, [r3, r2]
 8007f30:	4b1e      	ldr	r3, [pc, #120]	; (8007fac <tcp_fasttmr+0x9c>)
 8007f32:	781b      	ldrb	r3, [r3, #0]
 8007f34:	429a      	cmp	r2, r3
 8007f36:	d031      	beq.n	8007f9c <tcp_fasttmr+0x8c>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8007f38:	4b1c      	ldr	r3, [pc, #112]	; (8007fac <tcp_fasttmr+0x9c>)
 8007f3a:	7819      	ldrb	r1, [r3, #0]
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2221      	movs	r2, #33	; 0x21
 8007f40:	5499      	strb	r1, [r3, r2]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	7f9b      	ldrb	r3, [r3, #30]
 8007f46:	001a      	movs	r2, r3
 8007f48:	2301      	movs	r3, #1
 8007f4a:	4013      	ands	r3, r2
 8007f4c:	d011      	beq.n	8007f72 <tcp_fasttmr+0x62>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	7f9b      	ldrb	r3, [r3, #30]
 8007f52:	2202      	movs	r2, #2
 8007f54:	4313      	orrs	r3, r2
 8007f56:	b2da      	uxtb	r2, r3
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	779a      	strb	r2, [r3, #30]
        tcp_output(pcb);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	0018      	movs	r0, r3
 8007f60:	f003 fe52 	bl	800bc08 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	7f9b      	ldrb	r3, [r3, #30]
 8007f68:	2203      	movs	r2, #3
 8007f6a:	4393      	bics	r3, r2
 8007f6c:	b2da      	uxtb	r2, r3
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	779a      	strb	r2, [r3, #30]
      }

      next = pcb->next;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	68db      	ldr	r3, [r3, #12]
 8007f76:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d00b      	beq.n	8007f98 <tcp_fasttmr+0x88>
        tcp_active_pcbs_changed = 0;
 8007f80:	4b0c      	ldr	r3, [pc, #48]	; (8007fb4 <tcp_fasttmr+0xa4>)
 8007f82:	2200      	movs	r2, #0
 8007f84:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	0018      	movs	r0, r3
 8007f8a:	f000 f815 	bl	8007fb8 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8007f8e:	4b09      	ldr	r3, [pc, #36]	; (8007fb4 <tcp_fasttmr+0xa4>)
 8007f90:	781b      	ldrb	r3, [r3, #0]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d000      	beq.n	8007f98 <tcp_fasttmr+0x88>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8007f96:	e7c4      	b.n	8007f22 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	607b      	str	r3, [r7, #4]
  while(pcb != NULL) {
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d1c3      	bne.n	8007f2a <tcp_fasttmr+0x1a>
    }
  }
}
 8007fa2:	46c0      	nop			; (mov r8, r8)
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	b002      	add	sp, #8
 8007fa8:	bd80      	pop	{r7, pc}
 8007faa:	46c0      	nop			; (mov r8, r8)
 8007fac:	20002701 	.word	0x20002701
 8007fb0:	20003528 	.word	0x20003528
 8007fb4:	20003524 	.word	0x20003524

08007fb8 <tcp_process_refused_data>:

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8007fb8:	b5b0      	push	{r4, r5, r7, lr}
 8007fba:	b084      	sub	sp, #16
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
  err_t err;
  u8_t refused_flags = pcb->refused_data->flags;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8007fc4:	230e      	movs	r3, #14
 8007fc6:	18fb      	adds	r3, r7, r3
 8007fc8:	7b52      	ldrb	r2, [r2, #13]
 8007fca:	701a      	strb	r2, [r3, #0]
  /* set pcb->refused_data to NULL in case the callback frees it and then
     closes the pcb */
  struct pbuf *refused_data = pcb->refused_data;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007fd0:	60bb      	str	r3, [r7, #8]
  pcb->refused_data = NULL;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	679a      	str	r2, [r3, #120]	; 0x78
  /* Notify again application with data previously received. */
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
  TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2280      	movs	r2, #128	; 0x80
 8007fdc:	589b      	ldr	r3, [r3, r2]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d00d      	beq.n	8007ffe <tcp_process_refused_data+0x46>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2280      	movs	r2, #128	; 0x80
 8007fe6:	589d      	ldr	r5, [r3, r2]
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	6918      	ldr	r0, [r3, #16]
 8007fec:	230f      	movs	r3, #15
 8007fee:	18fc      	adds	r4, r7, r3
 8007ff0:	68ba      	ldr	r2, [r7, #8]
 8007ff2:	6879      	ldr	r1, [r7, #4]
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	47a8      	blx	r5
 8007ff8:	0003      	movs	r3, r0
 8007ffa:	7023      	strb	r3, [r4, #0]
 8007ffc:	e009      	b.n	8008012 <tcp_process_refused_data+0x5a>
 8007ffe:	230f      	movs	r3, #15
 8008000:	18fc      	adds	r4, r7, r3
 8008002:	68ba      	ldr	r2, [r7, #8]
 8008004:	6879      	ldr	r1, [r7, #4]
 8008006:	2300      	movs	r3, #0
 8008008:	2000      	movs	r0, #0
 800800a:	f000 f8a8 	bl	800815e <tcp_recv_null>
 800800e:	0003      	movs	r3, r0
 8008010:	7023      	strb	r3, [r4, #0]
  if (err == ERR_OK) {
 8008012:	230f      	movs	r3, #15
 8008014:	18fb      	adds	r3, r7, r3
 8008016:	781b      	ldrb	r3, [r3, #0]
 8008018:	b25b      	sxtb	r3, r3
 800801a:	2b00      	cmp	r3, #0
 800801c:	d130      	bne.n	8008080 <tcp_process_refused_data+0xc8>
    /* did refused_data include a FIN? */
    if (refused_flags & PBUF_FLAG_TCP_FIN) {
 800801e:	230e      	movs	r3, #14
 8008020:	18fb      	adds	r3, r7, r3
 8008022:	781b      	ldrb	r3, [r3, #0]
 8008024:	2220      	movs	r2, #32
 8008026:	4013      	ands	r3, r2
 8008028:	d036      	beq.n	8008098 <tcp_process_refused_data+0xe0>
      /* correct rcv_wnd as the application won't call tcp_recved()
         for the FIN's seqno */
      if (pcb->rcv_wnd != TCP_WND) {
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800802e:	4a1d      	ldr	r2, [pc, #116]	; (80080a4 <tcp_process_refused_data+0xec>)
 8008030:	4293      	cmp	r3, r2
 8008032:	d005      	beq.n	8008040 <tcp_process_refused_data+0x88>
        pcb->rcv_wnd++;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008038:	3301      	adds	r3, #1
 800803a:	b29a      	uxth	r2, r3
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	859a      	strh	r2, [r3, #44]	; 0x2c
      }
      TCP_EVENT_CLOSED(pcb, err);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2280      	movs	r2, #128	; 0x80
 8008044:	589b      	ldr	r3, [r3, r2]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d00d      	beq.n	8008066 <tcp_process_refused_data+0xae>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2280      	movs	r2, #128	; 0x80
 800804e:	589d      	ldr	r5, [r3, r2]
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	6918      	ldr	r0, [r3, #16]
 8008054:	230f      	movs	r3, #15
 8008056:	18fc      	adds	r4, r7, r3
 8008058:	6879      	ldr	r1, [r7, #4]
 800805a:	2300      	movs	r3, #0
 800805c:	2200      	movs	r2, #0
 800805e:	47a8      	blx	r5
 8008060:	0003      	movs	r3, r0
 8008062:	7023      	strb	r3, [r4, #0]
 8008064:	e003      	b.n	800806e <tcp_process_refused_data+0xb6>
 8008066:	230f      	movs	r3, #15
 8008068:	18fb      	adds	r3, r7, r3
 800806a:	2200      	movs	r2, #0
 800806c:	701a      	strb	r2, [r3, #0]
      if (err == ERR_ABRT) {
 800806e:	230f      	movs	r3, #15
 8008070:	18fb      	adds	r3, r7, r3
 8008072:	781b      	ldrb	r3, [r3, #0]
 8008074:	b25b      	sxtb	r3, r3
 8008076:	330a      	adds	r3, #10
 8008078:	d10e      	bne.n	8008098 <tcp_process_refused_data+0xe0>
        return ERR_ABRT;
 800807a:	230a      	movs	r3, #10
 800807c:	425b      	negs	r3, r3
 800807e:	e00c      	b.n	800809a <tcp_process_refused_data+0xe2>
      }
    }
  } else if (err == ERR_ABRT) {
 8008080:	230f      	movs	r3, #15
 8008082:	18fb      	adds	r3, r7, r3
 8008084:	781b      	ldrb	r3, [r3, #0]
 8008086:	b25b      	sxtb	r3, r3
 8008088:	330a      	adds	r3, #10
 800808a:	d102      	bne.n	8008092 <tcp_process_refused_data+0xda>
    /* if err == ERR_ABRT, 'pcb' is already deallocated */
    /* Drop incoming packets because pcb is "full" (only if the incoming
       segment contains data). */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
    return ERR_ABRT;
 800808c:	230a      	movs	r3, #10
 800808e:	425b      	negs	r3, r3
 8008090:	e003      	b.n	800809a <tcp_process_refused_data+0xe2>
  } else {
    /* data is still refused, pbuf is still valid (go on for ACK-only packets) */
    pcb->refused_data = refused_data;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	68ba      	ldr	r2, [r7, #8]
 8008096:	679a      	str	r2, [r3, #120]	; 0x78
  }
  return ERR_OK;
 8008098:	2300      	movs	r3, #0
}
 800809a:	0018      	movs	r0, r3
 800809c:	46bd      	mov	sp, r7
 800809e:	b004      	add	sp, #16
 80080a0:	bdb0      	pop	{r4, r5, r7, pc}
 80080a2:	46c0      	nop			; (mov r8, r8)
 80080a4:	000016d0 	.word	0x000016d0

080080a8 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b084      	sub	sp, #16
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80080b0:	e008      	b.n	80080c4 <tcp_segs_free+0x1c>
    struct tcp_seg *next = seg->next;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	0018      	movs	r0, r3
 80080bc:	f000 f809 	bl	80080d2 <tcp_seg_free>
    seg = next;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d1f3      	bne.n	80080b2 <tcp_segs_free+0xa>
  }
}
 80080ca:	46c0      	nop			; (mov r8, r8)
 80080cc:	46bd      	mov	sp, r7
 80080ce:	b004      	add	sp, #16
 80080d0:	bd80      	pop	{r7, pc}

080080d2 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80080d2:	b580      	push	{r7, lr}
 80080d4:	b082      	sub	sp, #8
 80080d6:	af00      	add	r7, sp, #0
 80080d8:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d00d      	beq.n	80080fc <tcp_seg_free+0x2a>
    if (seg->p != NULL) {
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	685b      	ldr	r3, [r3, #4]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d004      	beq.n	80080f2 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	685b      	ldr	r3, [r3, #4]
 80080ec:	0018      	movs	r0, r3
 80080ee:	f7fe fe51 	bl	8006d94 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	0019      	movs	r1, r3
 80080f6:	2004      	movs	r0, #4
 80080f8:	f7fe fa8a 	bl	8006610 <memp_free>
  }
}
 80080fc:	46c0      	nop			; (mov r8, r8)
 80080fe:	46bd      	mov	sp, r7
 8008100:	b002      	add	sp, #8
 8008102:	bd80      	pop	{r7, pc}

08008104 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b082      	sub	sp, #8
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
 800810c:	000a      	movs	r2, r1
 800810e:	1cfb      	adds	r3, r7, #3
 8008110:	701a      	strb	r2, [r3, #0]
  pcb->prio = prio;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	1cfa      	adds	r2, r7, #3
 8008116:	7812      	ldrb	r2, [r2, #0]
 8008118:	765a      	strb	r2, [r3, #25]
}
 800811a:	46c0      	nop			; (mov r8, r8)
 800811c:	46bd      	mov	sp, r7
 800811e:	b002      	add	sp, #8
 8008120:	bd80      	pop	{r7, pc}

08008122 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */ 
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8008122:	b580      	push	{r7, lr}
 8008124:	b084      	sub	sp, #16
 8008126:	af00      	add	r7, sp, #0
 8008128:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800812a:	2004      	movs	r0, #4
 800812c:	f7fe f9ea 	bl	8006504 <memp_malloc>
 8008130:	0003      	movs	r3, r0
 8008132:	60fb      	str	r3, [r7, #12]
  if (cseg == NULL) {
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d101      	bne.n	800813e <tcp_seg_copy+0x1c>
    return NULL;
 800813a:	2300      	movs	r3, #0
 800813c:	e00b      	b.n	8008156 <tcp_seg_copy+0x34>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg)); 
 800813e:	6879      	ldr	r1, [r7, #4]
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	2210      	movs	r2, #16
 8008144:	0018      	movs	r0, r3
 8008146:	f009 ff86 	bl	8012056 <memcpy>
  pbuf_ref(cseg->p);
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	685b      	ldr	r3, [r3, #4]
 800814e:	0018      	movs	r0, r3
 8008150:	f7fe feae 	bl	8006eb0 <pbuf_ref>
  return cseg;
 8008154:	68fb      	ldr	r3, [r7, #12]
}
 8008156:	0018      	movs	r0, r3
 8008158:	46bd      	mov	sp, r7
 800815a:	b004      	add	sp, #16
 800815c:	bd80      	pop	{r7, pc}

0800815e <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800815e:	b580      	push	{r7, lr}
 8008160:	b084      	sub	sp, #16
 8008162:	af00      	add	r7, sp, #0
 8008164:	60f8      	str	r0, [r7, #12]
 8008166:	60b9      	str	r1, [r7, #8]
 8008168:	607a      	str	r2, [r7, #4]
 800816a:	001a      	movs	r2, r3
 800816c:	1cfb      	adds	r3, r7, #3
 800816e:	701a      	strb	r2, [r3, #0]
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d00b      	beq.n	800818e <tcp_recv_null+0x30>
    tcp_recved(pcb, p->tot_len);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	891a      	ldrh	r2, [r3, #8]
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	0011      	movs	r1, r2
 800817e:	0018      	movs	r0, r3
 8008180:	f7ff fbd4 	bl	800792c <tcp_recved>
    pbuf_free(p);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	0018      	movs	r0, r3
 8008188:	f7fe fe04 	bl	8006d94 <pbuf_free>
 800818c:	e00a      	b.n	80081a4 <tcp_recv_null+0x46>
  } else if (err == ERR_OK) {
 800818e:	1cfb      	adds	r3, r7, #3
 8008190:	781b      	ldrb	r3, [r3, #0]
 8008192:	b25b      	sxtb	r3, r3
 8008194:	2b00      	cmp	r3, #0
 8008196:	d105      	bne.n	80081a4 <tcp_recv_null+0x46>
    return tcp_close(pcb);
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	0018      	movs	r0, r3
 800819c:	f7ff f9dc 	bl	8007558 <tcp_close>
 80081a0:	0003      	movs	r3, r0
 80081a2:	e000      	b.n	80081a6 <tcp_recv_null+0x48>
  }
  return ERR_OK;
 80081a4:	2300      	movs	r3, #0
}
 80081a6:	0018      	movs	r0, r3
 80081a8:	46bd      	mov	sp, r7
 80081aa:	b004      	add	sp, #16
 80081ac:	bd80      	pop	{r7, pc}
	...

080081b0 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b086      	sub	sp, #24
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	0002      	movs	r2, r0
 80081b8:	1dfb      	adds	r3, r7, #7
 80081ba:	701a      	strb	r2, [r3, #0]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;


  mprio = TCP_PRIO_MAX;
 80081bc:	230b      	movs	r3, #11
 80081be:	18fb      	adds	r3, r7, r3
 80081c0:	227f      	movs	r2, #127	; 0x7f
 80081c2:	701a      	strb	r2, [r3, #0]
  
  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
 80081c4:	2300      	movs	r3, #0
 80081c6:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80081c8:	2300      	movs	r3, #0
 80081ca:	613b      	str	r3, [r7, #16]
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80081cc:	4b1b      	ldr	r3, [pc, #108]	; (800823c <tcp_kill_prio+0x8c>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	617b      	str	r3, [r7, #20]
 80081d2:	e024      	b.n	800821e <tcp_kill_prio+0x6e>
    if (pcb->prio <= prio &&
 80081d4:	697b      	ldr	r3, [r7, #20]
 80081d6:	7e5b      	ldrb	r3, [r3, #25]
 80081d8:	1dfa      	adds	r2, r7, #7
 80081da:	7812      	ldrb	r2, [r2, #0]
 80081dc:	429a      	cmp	r2, r3
 80081de:	d31b      	bcc.n	8008218 <tcp_kill_prio+0x68>
       pcb->prio <= mprio &&
 80081e0:	697b      	ldr	r3, [r7, #20]
 80081e2:	7e5b      	ldrb	r3, [r3, #25]
    if (pcb->prio <= prio &&
 80081e4:	220b      	movs	r2, #11
 80081e6:	18ba      	adds	r2, r7, r2
 80081e8:	7812      	ldrb	r2, [r2, #0]
 80081ea:	429a      	cmp	r2, r3
 80081ec:	d314      	bcc.n	8008218 <tcp_kill_prio+0x68>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80081ee:	4b14      	ldr	r3, [pc, #80]	; (8008240 <tcp_kill_prio+0x90>)
 80081f0:	681a      	ldr	r2, [r3, #0]
 80081f2:	697b      	ldr	r3, [r7, #20]
 80081f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081f6:	1ad3      	subs	r3, r2, r3
       pcb->prio <= mprio &&
 80081f8:	68fa      	ldr	r2, [r7, #12]
 80081fa:	429a      	cmp	r2, r3
 80081fc:	d80c      	bhi.n	8008218 <tcp_kill_prio+0x68>
      inactivity = tcp_ticks - pcb->tmr;
 80081fe:	4b10      	ldr	r3, [pc, #64]	; (8008240 <tcp_kill_prio+0x90>)
 8008200:	681a      	ldr	r2, [r3, #0]
 8008202:	697b      	ldr	r3, [r7, #20]
 8008204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008206:	1ad3      	subs	r3, r2, r3
 8008208:	60fb      	str	r3, [r7, #12]
      inactive = pcb;
 800820a:	697b      	ldr	r3, [r7, #20]
 800820c:	613b      	str	r3, [r7, #16]
      mprio = pcb->prio;
 800820e:	230b      	movs	r3, #11
 8008210:	18fb      	adds	r3, r7, r3
 8008212:	697a      	ldr	r2, [r7, #20]
 8008214:	7e52      	ldrb	r2, [r2, #25]
 8008216:	701a      	strb	r2, [r3, #0]
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008218:	697b      	ldr	r3, [r7, #20]
 800821a:	68db      	ldr	r3, [r3, #12]
 800821c:	617b      	str	r3, [r7, #20]
 800821e:	697b      	ldr	r3, [r7, #20]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d1d7      	bne.n	80081d4 <tcp_kill_prio+0x24>
    }
  }
  if (inactive != NULL) {
 8008224:	693b      	ldr	r3, [r7, #16]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d003      	beq.n	8008232 <tcp_kill_prio+0x82>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 800822a:	693b      	ldr	r3, [r7, #16]
 800822c:	0018      	movs	r0, r3
 800822e:	f7ff fa1d 	bl	800766c <tcp_abort>
  }
}
 8008232:	46c0      	nop			; (mov r8, r8)
 8008234:	46bd      	mov	sp, r7
 8008236:	b006      	add	sp, #24
 8008238:	bd80      	pop	{r7, pc}
 800823a:	46c0      	nop			; (mov r8, r8)
 800823c:	20003528 	.word	0x20003528
 8008240:	2000352c 	.word	0x2000352c

08008244 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b084      	sub	sp, #16
 8008248:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800824a:	2300      	movs	r3, #0
 800824c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800824e:	2300      	movs	r3, #0
 8008250:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008252:	4b12      	ldr	r3, [pc, #72]	; (800829c <tcp_kill_timewait+0x58>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	60fb      	str	r3, [r7, #12]
 8008258:	e012      	b.n	8008280 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800825a:	4b11      	ldr	r3, [pc, #68]	; (80082a0 <tcp_kill_timewait+0x5c>)
 800825c:	681a      	ldr	r2, [r3, #0]
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008262:	1ad3      	subs	r3, r2, r3
 8008264:	687a      	ldr	r2, [r7, #4]
 8008266:	429a      	cmp	r2, r3
 8008268:	d807      	bhi.n	800827a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800826a:	4b0d      	ldr	r3, [pc, #52]	; (80082a0 <tcp_kill_timewait+0x5c>)
 800826c:	681a      	ldr	r2, [r3, #0]
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008272:	1ad3      	subs	r3, r2, r3
 8008274:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	60bb      	str	r3, [r7, #8]
  for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	68db      	ldr	r3, [r3, #12]
 800827e:	60fb      	str	r3, [r7, #12]
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d1e9      	bne.n	800825a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d003      	beq.n	8008294 <tcp_kill_timewait+0x50>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	0018      	movs	r0, r3
 8008290:	f7ff f9ec 	bl	800766c <tcp_abort>
  }
}
 8008294:	46c0      	nop			; (mov r8, r8)
 8008296:	46bd      	mov	sp, r7
 8008298:	b004      	add	sp, #16
 800829a:	bd80      	pop	{r7, pc}
 800829c:	2000353c 	.word	0x2000353c
 80082a0:	2000352c 	.word	0x2000352c

080082a4 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b084      	sub	sp, #16
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	0002      	movs	r2, r0
 80082ac:	1dfb      	adds	r3, r7, #7
 80082ae:	701a      	strb	r2, [r3, #0]
  struct tcp_pcb *pcb;
  u32_t iss;
  
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80082b0:	2002      	movs	r0, #2
 80082b2:	f7fe f927 	bl	8006504 <memp_malloc>
 80082b6:	0003      	movs	r3, r0
 80082b8:	60fb      	str	r3, [r7, #12]
  if (pcb == NULL) {
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d129      	bne.n	8008314 <tcp_alloc+0x70>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80082c0:	f7ff ffc0 	bl	8008244 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80082c4:	2002      	movs	r0, #2
 80082c6:	f7fe f91d 	bl	8006504 <memp_malloc>
 80082ca:	0003      	movs	r3, r0
 80082cc:	60fb      	str	r3, [r7, #12]
    if (pcb == NULL) {
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d114      	bne.n	80082fe <tcp_alloc+0x5a>
      /* Try killing active connections with lower priority than the new one. */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
      tcp_kill_prio(prio);
 80082d4:	1dfb      	adds	r3, r7, #7
 80082d6:	781b      	ldrb	r3, [r3, #0]
 80082d8:	0018      	movs	r0, r3
 80082da:	f7ff ff69 	bl	80081b0 <tcp_kill_prio>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80082de:	2002      	movs	r0, #2
 80082e0:	f7fe f910 	bl	8006504 <memp_malloc>
 80082e4:	0003      	movs	r3, r0
 80082e6:	60fb      	str	r3, [r7, #12]
      if (pcb != NULL) {
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d007      	beq.n	80082fe <tcp_alloc+0x5a>
        /* adjust err stats: memp_malloc failed twice before */
        MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 80082ee:	4b3c      	ldr	r3, [pc, #240]	; (80083e0 <tcp_alloc+0x13c>)
 80082f0:	22cc      	movs	r2, #204	; 0xcc
 80082f2:	5a9b      	ldrh	r3, [r3, r2]
 80082f4:	3b01      	subs	r3, #1
 80082f6:	b299      	uxth	r1, r3
 80082f8:	4b39      	ldr	r3, [pc, #228]	; (80083e0 <tcp_alloc+0x13c>)
 80082fa:	22cc      	movs	r2, #204	; 0xcc
 80082fc:	5299      	strh	r1, [r3, r2]
      }
    }
    if (pcb != NULL) {
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d007      	beq.n	8008314 <tcp_alloc+0x70>
      /* adjust err stats: timewait PCB was freed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 8008304:	4b36      	ldr	r3, [pc, #216]	; (80083e0 <tcp_alloc+0x13c>)
 8008306:	22cc      	movs	r2, #204	; 0xcc
 8008308:	5a9b      	ldrh	r3, [r3, r2]
 800830a:	3b01      	subs	r3, #1
 800830c:	b299      	uxth	r1, r3
 800830e:	4b34      	ldr	r3, [pc, #208]	; (80083e0 <tcp_alloc+0x13c>)
 8008310:	22cc      	movs	r2, #204	; 0xcc
 8008312:	5299      	strh	r1, [r3, r2]
    }
  }
  if (pcb != NULL) {
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d05d      	beq.n	80083d6 <tcp_alloc+0x132>
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	2298      	movs	r2, #152	; 0x98
 800831e:	2100      	movs	r1, #0
 8008320:	0018      	movs	r0, r3
 8008322:	f009 fea1 	bl	8012068 <memset>
    pcb->prio = prio;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	1dfa      	adds	r2, r7, #7
 800832a:	7812      	ldrb	r2, [r2, #0]
 800832c:	765a      	strb	r2, [r3, #25]
    pcb->snd_buf = TCP_SND_BUF;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	2266      	movs	r2, #102	; 0x66
 8008332:	492c      	ldr	r1, [pc, #176]	; (80083e4 <tcp_alloc+0x140>)
 8008334:	5299      	strh	r1, [r3, r2]
    pcb->snd_queuelen = 0;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	2268      	movs	r2, #104	; 0x68
 800833a:	2100      	movs	r1, #0
 800833c:	5299      	strh	r1, [r3, r2]
    pcb->rcv_wnd = TCP_WND;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	4a29      	ldr	r2, [pc, #164]	; (80083e8 <tcp_alloc+0x144>)
 8008342:	859a      	strh	r2, [r3, #44]	; 0x2c
    pcb->rcv_ann_wnd = TCP_WND;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	4a28      	ldr	r2, [pc, #160]	; (80083e8 <tcp_alloc+0x144>)
 8008348:	85da      	strh	r2, [r3, #46]	; 0x2e
    pcb->tos = 0;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	2200      	movs	r2, #0
 800834e:	725a      	strb	r2, [r3, #9]
    pcb->ttl = TCP_TTL;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	22ff      	movs	r2, #255	; 0xff
 8008354:	729a      	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = (TCP_MSS > 536) ? 536 : TCP_MSS;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	2286      	movs	r2, #134	; 0x86
 800835a:	0092      	lsls	r2, r2, #2
 800835c:	86da      	strh	r2, [r3, #54]	; 0x36
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	2244      	movs	r2, #68	; 0x44
 8008362:	2106      	movs	r1, #6
 8008364:	5299      	strh	r1, [r3, r2]
    pcb->sa = 0;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	2240      	movs	r2, #64	; 0x40
 800836a:	2100      	movs	r1, #0
 800836c:	5299      	strh	r1, [r3, r2]
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	2242      	movs	r2, #66	; 0x42
 8008372:	2106      	movs	r1, #6
 8008374:	5299      	strh	r1, [r3, r2]
    pcb->rtime = -1;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	2201      	movs	r2, #1
 800837a:	4252      	negs	r2, r2
 800837c:	869a      	strh	r2, [r3, #52]	; 0x34
    pcb->cwnd = 1;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	224c      	movs	r2, #76	; 0x4c
 8008382:	2101      	movs	r1, #1
 8008384:	5299      	strh	r1, [r3, r2]
    iss = tcp_next_iss();
 8008386:	f000 f929 	bl	80085dc <tcp_next_iss>
 800838a:	0003      	movs	r3, r0
 800838c:	60bb      	str	r3, [r7, #8]
    pcb->snd_wl2 = iss;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	68ba      	ldr	r2, [r7, #8]
 8008392:	659a      	str	r2, [r3, #88]	; 0x58
    pcb->snd_nxt = iss;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	68ba      	ldr	r2, [r7, #8]
 8008398:	651a      	str	r2, [r3, #80]	; 0x50
    pcb->lastack = iss;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	68ba      	ldr	r2, [r7, #8]
 800839e:	649a      	str	r2, [r3, #72]	; 0x48
    pcb->snd_lbb = iss;   
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	68ba      	ldr	r2, [r7, #8]
 80083a4:	65da      	str	r2, [r3, #92]	; 0x5c
    pcb->tmr = tcp_ticks;
 80083a6:	4b11      	ldr	r3, [pc, #68]	; (80083ec <tcp_alloc+0x148>)
 80083a8:	681a      	ldr	r2, [r3, #0]
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	625a      	str	r2, [r3, #36]	; 0x24
    pcb->last_timer = tcp_timer_ctr;
 80083ae:	4b10      	ldr	r3, [pc, #64]	; (80083f0 <tcp_alloc+0x14c>)
 80083b0:	7819      	ldrb	r1, [r3, #0]
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	2221      	movs	r2, #33	; 0x21
 80083b6:	5499      	strb	r1, [r3, r2]

    pcb->polltmr = 0;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	2200      	movs	r2, #0
 80083bc:	77da      	strb	r2, [r3, #31]

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	2180      	movs	r1, #128	; 0x80
 80083c2:	4a0c      	ldr	r2, [pc, #48]	; (80083f4 <tcp_alloc+0x150>)
 80083c4:	505a      	str	r2, [r3, r1]
#endif /* LWIP_CALLBACK_API */  
    
    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	2290      	movs	r2, #144	; 0x90
 80083ca:	490b      	ldr	r1, [pc, #44]	; (80083f8 <tcp_alloc+0x154>)
 80083cc:	5099      	str	r1, [r3, r2]
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */

    pcb->keep_cnt_sent = 0;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	2296      	movs	r2, #150	; 0x96
 80083d2:	2100      	movs	r1, #0
 80083d4:	5499      	strb	r1, [r3, r2]
  }
  return pcb;
 80083d6:	68fb      	ldr	r3, [r7, #12]
}
 80083d8:	0018      	movs	r0, r3
 80083da:	46bd      	mov	sp, r7
 80083dc:	b004      	add	sp, #16
 80083de:	bd80      	pop	{r7, pc}
 80083e0:	2000340c 	.word	0x2000340c
 80083e4:	00000b68 	.word	0x00000b68
 80083e8:	000016d0 	.word	0x000016d0
 80083ec:	2000352c 	.word	0x2000352c
 80083f0:	20002701 	.word	0x20002701
 80083f4:	0800815f 	.word	0x0800815f
 80083f8:	006ddd00 	.word	0x006ddd00

080083fc <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 8008400:	2040      	movs	r0, #64	; 0x40
 8008402:	f7ff ff4f 	bl	80082a4 <tcp_alloc>
 8008406:	0003      	movs	r3, r0
}
 8008408:	0018      	movs	r0, r3
 800840a:	46bd      	mov	sp, r7
 800840c:	bd80      	pop	{r7, pc}

0800840e <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */ 
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800840e:	b580      	push	{r7, lr}
 8008410:	b082      	sub	sp, #8
 8008412:	af00      	add	r7, sp, #0
 8008414:	6078      	str	r0, [r7, #4]
 8008416:	6039      	str	r1, [r7, #0]
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  pcb->callback_arg = arg;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	683a      	ldr	r2, [r7, #0]
 800841c:	611a      	str	r2, [r3, #16]
}
 800841e:	46c0      	nop			; (mov r8, r8)
 8008420:	46bd      	mov	sp, r7
 8008422:	b002      	add	sp, #8
 8008424:	bd80      	pop	{r7, pc}

08008426 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */ 
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8008426:	b580      	push	{r7, lr}
 8008428:	b082      	sub	sp, #8
 800842a:	af00      	add	r7, sp, #0
 800842c:	6078      	str	r0, [r7, #4]
 800842e:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
  pcb->recv = recv;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2180      	movs	r1, #128	; 0x80
 8008434:	683a      	ldr	r2, [r7, #0]
 8008436:	505a      	str	r2, [r3, r1]
}
 8008438:	46c0      	nop			; (mov r8, r8)
 800843a:	46bd      	mov	sp, r7
 800843c:	b002      	add	sp, #8
 800843e:	bd80      	pop	{r7, pc}

08008440 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */ 
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b082      	sub	sp, #8
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
 8008448:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
  pcb->sent = sent;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	683a      	ldr	r2, [r7, #0]
 800844e:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8008450:	46c0      	nop			; (mov r8, r8)
 8008452:	46bd      	mov	sp, r7
 8008454:	b002      	add	sp, #8
 8008456:	bd80      	pop	{r7, pc}

08008458 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occured on the connection
 */ 
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b082      	sub	sp, #8
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
 8008460:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
  pcb->errf = err;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	218c      	movs	r1, #140	; 0x8c
 8008466:	683a      	ldr	r2, [r7, #0]
 8008468:	505a      	str	r2, [r3, r1]
}
 800846a:	46c0      	nop			; (mov r8, r8)
 800846c:	46bd      	mov	sp, r7
 800846e:	b002      	add	sp, #8
 8008470:	bd80      	pop	{r7, pc}

08008472 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */ 
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8008472:	b580      	push	{r7, lr}
 8008474:	b082      	sub	sp, #8
 8008476:	af00      	add	r7, sp, #0
 8008478:	6078      	str	r0, [r7, #4]
 800847a:	6039      	str	r1, [r7, #0]
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  pcb->accept = accept;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	683a      	ldr	r2, [r7, #0]
 8008480:	615a      	str	r2, [r3, #20]
}
 8008482:	46c0      	nop			; (mov r8, r8)
 8008484:	46bd      	mov	sp, r7
 8008486:	b002      	add	sp, #8
 8008488:	bd80      	pop	{r7, pc}

0800848a <tcp_poll>:
 * timer interval, which is called twice a second.
 *
 */ 
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800848a:	b580      	push	{r7, lr}
 800848c:	b084      	sub	sp, #16
 800848e:	af00      	add	r7, sp, #0
 8008490:	60f8      	str	r0, [r7, #12]
 8008492:	60b9      	str	r1, [r7, #8]
 8008494:	1dfb      	adds	r3, r7, #7
 8008496:	701a      	strb	r2, [r3, #0]
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	2188      	movs	r1, #136	; 0x88
 800849c:	68ba      	ldr	r2, [r7, #8]
 800849e:	505a      	str	r2, [r3, r1]
#else /* LWIP_CALLBACK_API */  
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */  
  pcb->pollinterval = interval;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	1dfa      	adds	r2, r7, #7
 80084a4:	2120      	movs	r1, #32
 80084a6:	7812      	ldrb	r2, [r2, #0]
 80084a8:	545a      	strb	r2, [r3, r1]
}
 80084aa:	46c0      	nop			; (mov r8, r8)
 80084ac:	46bd      	mov	sp, r7
 80084ae:	b004      	add	sp, #16
 80084b0:	bd80      	pop	{r7, pc}

080084b2 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80084b2:	b580      	push	{r7, lr}
 80084b4:	b082      	sub	sp, #8
 80084b6:	af00      	add	r7, sp, #0
 80084b8:	6078      	str	r0, [r7, #4]
  if (pcb->state != CLOSED &&
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	7e1b      	ldrb	r3, [r3, #24]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d034      	beq.n	800852c <tcp_pcb_purge+0x7a>
     pcb->state != TIME_WAIT &&
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	7e1b      	ldrb	r3, [r3, #24]
  if (pcb->state != CLOSED &&
 80084c6:	2b0a      	cmp	r3, #10
 80084c8:	d030      	beq.n	800852c <tcp_pcb_purge+0x7a>
     pcb->state != LISTEN) {
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	7e1b      	ldrb	r3, [r3, #24]
     pcb->state != TIME_WAIT &&
 80084ce:	2b01      	cmp	r3, #1
 80084d0:	d02c      	beq.n	800852c <tcp_pcb_purge+0x7a>
      }
    }
#endif /* TCP_LISTEN_BACKLOG */


    if (pcb->refused_data != NULL) {
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d007      	beq.n	80084ea <tcp_pcb_purge+0x38>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80084de:	0018      	movs	r0, r3
 80084e0:	f7fe fc58 	bl	8006d94 <pbuf_free>
      pcb->refused_data = NULL;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2200      	movs	r2, #0
 80084e8:	679a      	str	r2, [r3, #120]	; 0x78
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084ee:	0018      	movs	r0, r3
 80084f0:	f7ff fdda 	bl	80080a8 <tcp_segs_free>
    pcb->ooseq = NULL;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2200      	movs	r2, #0
 80084f8:	675a      	str	r2, [r3, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2201      	movs	r2, #1
 80084fe:	4252      	negs	r2, r2
 8008500:	869a      	strh	r2, [r3, #52]	; 0x34

    tcp_segs_free(pcb->unsent);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008506:	0018      	movs	r0, r3
 8008508:	f7ff fdce 	bl	80080a8 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008510:	0018      	movs	r0, r3
 8008512:	f7ff fdc9 	bl	80080a8 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2200      	movs	r2, #0
 800851a:	66da      	str	r2, [r3, #108]	; 0x6c
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	226a      	movs	r2, #106	; 0x6a
 8008528:	2100      	movs	r1, #0
 800852a:	5299      	strh	r1, [r3, r2]
#endif /* TCP_OVERSIZE */
  }
}
 800852c:	46c0      	nop			; (mov r8, r8)
 800852e:	46bd      	mov	sp, r7
 8008530:	b002      	add	sp, #8
 8008532:	bd80      	pop	{r7, pc}

08008534 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b082      	sub	sp, #8
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
 800853c:	6039      	str	r1, [r7, #0]
  TCP_RMV(pcblist, pcb);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	683a      	ldr	r2, [r7, #0]
 8008544:	429a      	cmp	r2, r3
 8008546:	d105      	bne.n	8008554 <tcp_pcb_remove+0x20>
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	68da      	ldr	r2, [r3, #12]
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	601a      	str	r2, [r3, #0]
 8008552:	e019      	b.n	8008588 <tcp_pcb_remove+0x54>
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681a      	ldr	r2, [r3, #0]
 8008558:	4b1f      	ldr	r3, [pc, #124]	; (80085d8 <tcp_pcb_remove+0xa4>)
 800855a:	601a      	str	r2, [r3, #0]
 800855c:	e010      	b.n	8008580 <tcp_pcb_remove+0x4c>
 800855e:	4b1e      	ldr	r3, [pc, #120]	; (80085d8 <tcp_pcb_remove+0xa4>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	68db      	ldr	r3, [r3, #12]
 8008564:	683a      	ldr	r2, [r7, #0]
 8008566:	429a      	cmp	r2, r3
 8008568:	d105      	bne.n	8008576 <tcp_pcb_remove+0x42>
 800856a:	4b1b      	ldr	r3, [pc, #108]	; (80085d8 <tcp_pcb_remove+0xa4>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	683a      	ldr	r2, [r7, #0]
 8008570:	68d2      	ldr	r2, [r2, #12]
 8008572:	60da      	str	r2, [r3, #12]
 8008574:	e008      	b.n	8008588 <tcp_pcb_remove+0x54>
 8008576:	4b18      	ldr	r3, [pc, #96]	; (80085d8 <tcp_pcb_remove+0xa4>)
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	68da      	ldr	r2, [r3, #12]
 800857c:	4b16      	ldr	r3, [pc, #88]	; (80085d8 <tcp_pcb_remove+0xa4>)
 800857e:	601a      	str	r2, [r3, #0]
 8008580:	4b15      	ldr	r3, [pc, #84]	; (80085d8 <tcp_pcb_remove+0xa4>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d1ea      	bne.n	800855e <tcp_pcb_remove+0x2a>
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	2200      	movs	r2, #0
 800858c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	0018      	movs	r0, r3
 8008592:	f7ff ff8e 	bl	80084b2 <tcp_pcb_purge>
  
  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	7e1b      	ldrb	r3, [r3, #24]
 800859a:	2b0a      	cmp	r3, #10
 800859c:	d014      	beq.n	80085c8 <tcp_pcb_remove+0x94>
     pcb->state != LISTEN &&
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	7e1b      	ldrb	r3, [r3, #24]
  if (pcb->state != TIME_WAIT &&
 80085a2:	2b01      	cmp	r3, #1
 80085a4:	d010      	beq.n	80085c8 <tcp_pcb_remove+0x94>
     pcb->flags & TF_ACK_DELAY) {
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	7f9b      	ldrb	r3, [r3, #30]
 80085aa:	001a      	movs	r2, r3
 80085ac:	2301      	movs	r3, #1
 80085ae:	4013      	ands	r3, r2
     pcb->state != LISTEN &&
 80085b0:	d00a      	beq.n	80085c8 <tcp_pcb_remove+0x94>
    pcb->flags |= TF_ACK_NOW;
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	7f9b      	ldrb	r3, [r3, #30]
 80085b6:	2202      	movs	r2, #2
 80085b8:	4313      	orrs	r3, r2
 80085ba:	b2da      	uxtb	r2, r3
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	779a      	strb	r2, [r3, #30]
    tcp_output(pcb);
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	0018      	movs	r0, r3
 80085c4:	f003 fb20 	bl	800bc08 <tcp_output>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	2200      	movs	r2, #0
 80085cc:	761a      	strb	r2, [r3, #24]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80085ce:	46c0      	nop			; (mov r8, r8)
 80085d0:	46bd      	mov	sp, r7
 80085d2:	b002      	add	sp, #8
 80085d4:	bd80      	pop	{r7, pc}
 80085d6:	46c0      	nop			; (mov r8, r8)
 80085d8:	20003534 	.word	0x20003534

080085dc <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(void)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	af00      	add	r7, sp, #0
  static u32_t iss = 6510;
  
  iss += tcp_ticks;       /* XXX */
 80085e0:	4b05      	ldr	r3, [pc, #20]	; (80085f8 <tcp_next_iss+0x1c>)
 80085e2:	681a      	ldr	r2, [r3, #0]
 80085e4:	4b05      	ldr	r3, [pc, #20]	; (80085fc <tcp_next_iss+0x20>)
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	18d2      	adds	r2, r2, r3
 80085ea:	4b03      	ldr	r3, [pc, #12]	; (80085f8 <tcp_next_iss+0x1c>)
 80085ec:	601a      	str	r2, [r3, #0]
  return iss;
 80085ee:	4b02      	ldr	r3, [pc, #8]	; (80085f8 <tcp_next_iss+0x1c>)
 80085f0:	681b      	ldr	r3, [r3, #0]
}
 80085f2:	0018      	movs	r0, r3
 80085f4:	46bd      	mov	sp, r7
 80085f6:	bd80      	pop	{r7, pc}
 80085f8:	20000014 	.word	0x20000014
 80085fc:	2000352c 	.word	0x2000352c

08008600 <tcp_eff_send_mss>:
 * by using ip_route to determin the netif used to send to the address and
 * calculating the minimum of TCP_MSS and that netif's mtu (if set).
 */
u16_t
tcp_eff_send_mss(u16_t sendmss, ip_addr_t *addr)
{
 8008600:	b590      	push	{r4, r7, lr}
 8008602:	b085      	sub	sp, #20
 8008604:	af00      	add	r7, sp, #0
 8008606:	0002      	movs	r2, r0
 8008608:	6039      	str	r1, [r7, #0]
 800860a:	1dbb      	adds	r3, r7, #6
 800860c:	801a      	strh	r2, [r3, #0]
  u16_t mss_s;
  struct netif *outif;

  outif = ip_route(addr);
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	0018      	movs	r0, r3
 8008612:	f005 fa15 	bl	800da40 <ip_route>
 8008616:	0003      	movs	r3, r0
 8008618:	60fb      	str	r3, [r7, #12]
  if ((outif != NULL) && (outif->mtu != 0)) {
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d014      	beq.n	800864a <tcp_eff_send_mss+0x4a>
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	8c1b      	ldrh	r3, [r3, #32]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d010      	beq.n	800864a <tcp_eff_send_mss+0x4a>
    mss_s = outif->mtu - IP_HLEN - TCP_HLEN;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	8c1a      	ldrh	r2, [r3, #32]
 800862c:	210a      	movs	r1, #10
 800862e:	187b      	adds	r3, r7, r1
 8008630:	3a28      	subs	r2, #40	; 0x28
 8008632:	801a      	strh	r2, [r3, #0]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8008634:	1dba      	adds	r2, r7, #6
 8008636:	187b      	adds	r3, r7, r1
 8008638:	1db9      	adds	r1, r7, #6
 800863a:	880c      	ldrh	r4, [r1, #0]
 800863c:	881b      	ldrh	r3, [r3, #0]
 800863e:	b298      	uxth	r0, r3
 8008640:	b2a1      	uxth	r1, r4
 8008642:	4288      	cmp	r0, r1
 8008644:	d900      	bls.n	8008648 <tcp_eff_send_mss+0x48>
 8008646:	1c23      	adds	r3, r4, #0
 8008648:	8013      	strh	r3, [r2, #0]
  }
  return sendmss;
 800864a:	1dbb      	adds	r3, r7, #6
 800864c:	881b      	ldrh	r3, [r3, #0]
}
 800864e:	0018      	movs	r0, r3
 8008650:	46bd      	mov	sp, r7
 8008652:	b005      	add	sp, #20
 8008654:	bd90      	pop	{r4, r7, pc}
	...

08008658 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the IP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8008658:	b5b0      	push	{r4, r5, r7, lr}
 800865a:	b088      	sub	sp, #32
 800865c:	af02      	add	r7, sp, #8
 800865e:	6078      	str	r0, [r7, #4]
 8008660:	6039      	str	r1, [r7, #0]
  u8_t hdrlen;
  err_t err;

  PERF_START;

  TCP_STATS_INC(tcp.recv);
 8008662:	4bd3      	ldr	r3, [pc, #844]	; (80089b0 <tcp_input+0x358>)
 8008664:	2292      	movs	r2, #146	; 0x92
 8008666:	5a9b      	ldrh	r3, [r3, r2]
 8008668:	3301      	adds	r3, #1
 800866a:	b299      	uxth	r1, r3
 800866c:	4bd0      	ldr	r3, [pc, #832]	; (80089b0 <tcp_input+0x358>)
 800866e:	2292      	movs	r2, #146	; 0x92
 8008670:	5299      	strh	r1, [r3, r2]
  snmp_inc_tcpinsegs();

  iphdr = (struct ip_hdr *)p->payload;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	685a      	ldr	r2, [r3, #4]
 8008676:	4bcf      	ldr	r3, [pc, #828]	; (80089b4 <tcp_input+0x35c>)
 8008678:	601a      	str	r2, [r3, #0]
  tcphdr = (struct tcp_hdr *)((u8_t *)p->payload + IPH_HL(iphdr) * 4);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	685a      	ldr	r2, [r3, #4]
 800867e:	4bcd      	ldr	r3, [pc, #820]	; (80089b4 <tcp_input+0x35c>)
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	781b      	ldrb	r3, [r3, #0]
 8008684:	0019      	movs	r1, r3
 8008686:	230f      	movs	r3, #15
 8008688:	400b      	ands	r3, r1
 800868a:	009b      	lsls	r3, r3, #2
 800868c:	18d2      	adds	r2, r2, r3
 800868e:	4bca      	ldr	r3, [pc, #808]	; (80089b8 <tcp_input+0x360>)
 8008690:	601a      	str	r2, [r3, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* remove header from payload */
  if (pbuf_header(p, -((s16_t)(IPH_HL(iphdr) * 4))) || (p->tot_len < sizeof(struct tcp_hdr))) {
 8008692:	4bc8      	ldr	r3, [pc, #800]	; (80089b4 <tcp_input+0x35c>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	781b      	ldrb	r3, [r3, #0]
 8008698:	b29b      	uxth	r3, r3
 800869a:	220f      	movs	r2, #15
 800869c:	4013      	ands	r3, r2
 800869e:	b29b      	uxth	r3, r3
 80086a0:	009b      	lsls	r3, r3, #2
 80086a2:	b29b      	uxth	r3, r3
 80086a4:	425b      	negs	r3, r3
 80086a6:	b29b      	uxth	r3, r3
 80086a8:	b21a      	sxth	r2, r3
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	0011      	movs	r1, r2
 80086ae:	0018      	movs	r0, r3
 80086b0:	f7fe fae9 	bl	8006c86 <pbuf_header>
 80086b4:	1e03      	subs	r3, r0, #0
 80086b6:	d103      	bne.n	80086c0 <tcp_input+0x68>
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	891b      	ldrh	r3, [r3, #8]
 80086bc:	2b13      	cmp	r3, #19
 80086be:	d809      	bhi.n	80086d4 <tcp_input+0x7c>
    /* drop short packets */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: short packet (%"U16_F" bytes) discarded\n", p->tot_len));
    TCP_STATS_INC(tcp.lenerr);
 80086c0:	4bbb      	ldr	r3, [pc, #748]	; (80089b0 <tcp_input+0x358>)
 80086c2:	229a      	movs	r2, #154	; 0x9a
 80086c4:	5a9b      	ldrh	r3, [r3, r2]
 80086c6:	3301      	adds	r3, #1
 80086c8:	b299      	uxth	r1, r3
 80086ca:	4bb9      	ldr	r3, [pc, #740]	; (80089b0 <tcp_input+0x358>)
 80086cc:	229a      	movs	r2, #154	; 0x9a
 80086ce:	5299      	strh	r1, [r3, r2]
    goto dropped;
 80086d0:	f000 fbf4 	bl	8008ebc <tcp_input+0x864>
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(&current_iphdr_dest, inp) ||
 80086d4:	4bb9      	ldr	r3, [pc, #740]	; (80089bc <tcp_input+0x364>)
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	683a      	ldr	r2, [r7, #0]
 80086da:	0011      	movs	r1, r2
 80086dc:	0018      	movs	r0, r3
 80086de:	f005 fdc9 	bl	800e274 <ip4_addr_isbroadcast>
 80086e2:	1e03      	subs	r3, r0, #0
 80086e4:	d105      	bne.n	80086f2 <tcp_input+0x9a>
      ip_addr_ismulticast(&current_iphdr_dest)) {
 80086e6:	4bb5      	ldr	r3, [pc, #724]	; (80089bc <tcp_input+0x364>)
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	22f0      	movs	r2, #240	; 0xf0
 80086ec:	4013      	ands	r3, r2
  if (ip_addr_isbroadcast(&current_iphdr_dest, inp) ||
 80086ee:	2be0      	cmp	r3, #224	; 0xe0
 80086f0:	d109      	bne.n	8008706 <tcp_input+0xae>
    TCP_STATS_INC(tcp.proterr);
 80086f2:	4baf      	ldr	r3, [pc, #700]	; (80089b0 <tcp_input+0x358>)
 80086f4:	22a0      	movs	r2, #160	; 0xa0
 80086f6:	5a9b      	ldrh	r3, [r3, r2]
 80086f8:	3301      	adds	r3, #1
 80086fa:	b299      	uxth	r1, r3
 80086fc:	4bac      	ldr	r3, [pc, #688]	; (80089b0 <tcp_input+0x358>)
 80086fe:	22a0      	movs	r2, #160	; 0xa0
 8008700:	5299      	strh	r1, [r3, r2]
    goto dropped;
 8008702:	f000 fbdb 	bl	8008ebc <tcp_input+0x864>
  }

#if CHECKSUM_CHECK_TCP
  /* Verify TCP checksum. */
  if (inet_chksum_pseudo(p, ip_current_src_addr(), ip_current_dest_addr(),
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	891b      	ldrh	r3, [r3, #8]
 800870a:	4aac      	ldr	r2, [pc, #688]	; (80089bc <tcp_input+0x364>)
 800870c:	49ac      	ldr	r1, [pc, #688]	; (80089c0 <tcp_input+0x368>)
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	9300      	str	r3, [sp, #0]
 8008712:	2306      	movs	r3, #6
 8008714:	f005 f88d 	bl	800d832 <inet_chksum_pseudo>
 8008718:	1e03      	subs	r3, r0, #0
 800871a:	d009      	beq.n	8008730 <tcp_input+0xd8>
        inet_chksum_pseudo(p, ip_current_src_addr(), ip_current_dest_addr(),
      IP_PROTO_TCP, p->tot_len)));
#if TCP_DEBUG
    tcp_debug_print(tcphdr);
#endif /* TCP_DEBUG */
    TCP_STATS_INC(tcp.chkerr);
 800871c:	4ba4      	ldr	r3, [pc, #656]	; (80089b0 <tcp_input+0x358>)
 800871e:	2298      	movs	r2, #152	; 0x98
 8008720:	5a9b      	ldrh	r3, [r3, r2]
 8008722:	3301      	adds	r3, #1
 8008724:	b299      	uxth	r1, r3
 8008726:	4ba2      	ldr	r3, [pc, #648]	; (80089b0 <tcp_input+0x358>)
 8008728:	2298      	movs	r2, #152	; 0x98
 800872a:	5299      	strh	r1, [r3, r2]
    goto dropped;
 800872c:	f000 fbc6 	bl	8008ebc <tcp_input+0x864>
  }
#endif

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  hdrlen = TCPH_HDRLEN(tcphdr);
 8008730:	4ba1      	ldr	r3, [pc, #644]	; (80089b8 <tcp_input+0x360>)
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	7b1a      	ldrb	r2, [r3, #12]
 8008736:	7b5b      	ldrb	r3, [r3, #13]
 8008738:	021b      	lsls	r3, r3, #8
 800873a:	4313      	orrs	r3, r2
 800873c:	b29b      	uxth	r3, r3
 800873e:	0018      	movs	r0, r3
 8008740:	f7fd faf6 	bl	8005d30 <lwip_ntohs>
 8008744:	0003      	movs	r3, r0
 8008746:	0b1b      	lsrs	r3, r3, #12
 8008748:	b29a      	uxth	r2, r3
 800874a:	210a      	movs	r1, #10
 800874c:	187b      	adds	r3, r7, r1
 800874e:	701a      	strb	r2, [r3, #0]
  if(pbuf_header(p, -(hdrlen * 4))){
 8008750:	187b      	adds	r3, r7, r1
 8008752:	781b      	ldrb	r3, [r3, #0]
 8008754:	b29b      	uxth	r3, r3
 8008756:	1c1a      	adds	r2, r3, #0
 8008758:	0392      	lsls	r2, r2, #14
 800875a:	1ad3      	subs	r3, r2, r3
 800875c:	009b      	lsls	r3, r3, #2
 800875e:	b29b      	uxth	r3, r3
 8008760:	b21a      	sxth	r2, r3
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	0011      	movs	r1, r2
 8008766:	0018      	movs	r0, r3
 8008768:	f7fe fa8d 	bl	8006c86 <pbuf_header>
 800876c:	1e03      	subs	r3, r0, #0
 800876e:	d009      	beq.n	8008784 <tcp_input+0x12c>
    /* drop short packets */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: short packet\n"));
    TCP_STATS_INC(tcp.lenerr);
 8008770:	4b8f      	ldr	r3, [pc, #572]	; (80089b0 <tcp_input+0x358>)
 8008772:	229a      	movs	r2, #154	; 0x9a
 8008774:	5a9b      	ldrh	r3, [r3, r2]
 8008776:	3301      	adds	r3, #1
 8008778:	b299      	uxth	r1, r3
 800877a:	4b8d      	ldr	r3, [pc, #564]	; (80089b0 <tcp_input+0x358>)
 800877c:	229a      	movs	r2, #154	; 0x9a
 800877e:	5299      	strh	r1, [r3, r2]
    goto dropped;
 8008780:	f000 fb9c 	bl	8008ebc <tcp_input+0x864>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = ntohs(tcphdr->src);
 8008784:	4b8c      	ldr	r3, [pc, #560]	; (80089b8 <tcp_input+0x360>)
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	781a      	ldrb	r2, [r3, #0]
 800878a:	785b      	ldrb	r3, [r3, #1]
 800878c:	021b      	lsls	r3, r3, #8
 800878e:	4313      	orrs	r3, r2
 8008790:	b29a      	uxth	r2, r3
 8008792:	4b89      	ldr	r3, [pc, #548]	; (80089b8 <tcp_input+0x360>)
 8008794:	681c      	ldr	r4, [r3, #0]
 8008796:	0010      	movs	r0, r2
 8008798:	f7fd faca 	bl	8005d30 <lwip_ntohs>
 800879c:	0003      	movs	r3, r0
 800879e:	22ff      	movs	r2, #255	; 0xff
 80087a0:	401a      	ands	r2, r3
 80087a2:	0010      	movs	r0, r2
 80087a4:	7822      	ldrb	r2, [r4, #0]
 80087a6:	2100      	movs	r1, #0
 80087a8:	400a      	ands	r2, r1
 80087aa:	1c11      	adds	r1, r2, #0
 80087ac:	1c02      	adds	r2, r0, #0
 80087ae:	430a      	orrs	r2, r1
 80087b0:	7022      	strb	r2, [r4, #0]
 80087b2:	0a1b      	lsrs	r3, r3, #8
 80087b4:	b299      	uxth	r1, r3
 80087b6:	7863      	ldrb	r3, [r4, #1]
 80087b8:	2200      	movs	r2, #0
 80087ba:	4013      	ands	r3, r2
 80087bc:	1c1a      	adds	r2, r3, #0
 80087be:	1c0b      	adds	r3, r1, #0
 80087c0:	4313      	orrs	r3, r2
 80087c2:	7063      	strb	r3, [r4, #1]
  tcphdr->dest = ntohs(tcphdr->dest);
 80087c4:	4b7c      	ldr	r3, [pc, #496]	; (80089b8 <tcp_input+0x360>)
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	789a      	ldrb	r2, [r3, #2]
 80087ca:	78db      	ldrb	r3, [r3, #3]
 80087cc:	021b      	lsls	r3, r3, #8
 80087ce:	4313      	orrs	r3, r2
 80087d0:	b29a      	uxth	r2, r3
 80087d2:	4b79      	ldr	r3, [pc, #484]	; (80089b8 <tcp_input+0x360>)
 80087d4:	681c      	ldr	r4, [r3, #0]
 80087d6:	0010      	movs	r0, r2
 80087d8:	f7fd faaa 	bl	8005d30 <lwip_ntohs>
 80087dc:	0003      	movs	r3, r0
 80087de:	22ff      	movs	r2, #255	; 0xff
 80087e0:	401a      	ands	r2, r3
 80087e2:	0010      	movs	r0, r2
 80087e4:	78a2      	ldrb	r2, [r4, #2]
 80087e6:	2100      	movs	r1, #0
 80087e8:	400a      	ands	r2, r1
 80087ea:	1c11      	adds	r1, r2, #0
 80087ec:	1c02      	adds	r2, r0, #0
 80087ee:	430a      	orrs	r2, r1
 80087f0:	70a2      	strb	r2, [r4, #2]
 80087f2:	0a1b      	lsrs	r3, r3, #8
 80087f4:	b299      	uxth	r1, r3
 80087f6:	78e3      	ldrb	r3, [r4, #3]
 80087f8:	2200      	movs	r2, #0
 80087fa:	4013      	ands	r3, r2
 80087fc:	1c1a      	adds	r2, r3, #0
 80087fe:	1c0b      	adds	r3, r1, #0
 8008800:	4313      	orrs	r3, r2
 8008802:	70e3      	strb	r3, [r4, #3]
  seqno = tcphdr->seqno = ntohl(tcphdr->seqno);
 8008804:	4b6c      	ldr	r3, [pc, #432]	; (80089b8 <tcp_input+0x360>)
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	791a      	ldrb	r2, [r3, #4]
 800880a:	7959      	ldrb	r1, [r3, #5]
 800880c:	0209      	lsls	r1, r1, #8
 800880e:	430a      	orrs	r2, r1
 8008810:	7999      	ldrb	r1, [r3, #6]
 8008812:	0409      	lsls	r1, r1, #16
 8008814:	430a      	orrs	r2, r1
 8008816:	79db      	ldrb	r3, [r3, #7]
 8008818:	061b      	lsls	r3, r3, #24
 800881a:	4313      	orrs	r3, r2
 800881c:	001a      	movs	r2, r3
 800881e:	4b66      	ldr	r3, [pc, #408]	; (80089b8 <tcp_input+0x360>)
 8008820:	681c      	ldr	r4, [r3, #0]
 8008822:	0010      	movs	r0, r2
 8008824:	f7fd faad 	bl	8005d82 <lwip_ntohl>
 8008828:	0003      	movs	r3, r0
 800882a:	22ff      	movs	r2, #255	; 0xff
 800882c:	401a      	ands	r2, r3
 800882e:	0010      	movs	r0, r2
 8008830:	7922      	ldrb	r2, [r4, #4]
 8008832:	2100      	movs	r1, #0
 8008834:	400a      	ands	r2, r1
 8008836:	1c11      	adds	r1, r2, #0
 8008838:	1c02      	adds	r2, r0, #0
 800883a:	430a      	orrs	r2, r1
 800883c:	7122      	strb	r2, [r4, #4]
 800883e:	0a1a      	lsrs	r2, r3, #8
 8008840:	21ff      	movs	r1, #255	; 0xff
 8008842:	400a      	ands	r2, r1
 8008844:	0010      	movs	r0, r2
 8008846:	7962      	ldrb	r2, [r4, #5]
 8008848:	2100      	movs	r1, #0
 800884a:	400a      	ands	r2, r1
 800884c:	1c11      	adds	r1, r2, #0
 800884e:	1c02      	adds	r2, r0, #0
 8008850:	430a      	orrs	r2, r1
 8008852:	7162      	strb	r2, [r4, #5]
 8008854:	0c1a      	lsrs	r2, r3, #16
 8008856:	21ff      	movs	r1, #255	; 0xff
 8008858:	400a      	ands	r2, r1
 800885a:	0010      	movs	r0, r2
 800885c:	79a2      	ldrb	r2, [r4, #6]
 800885e:	2100      	movs	r1, #0
 8008860:	400a      	ands	r2, r1
 8008862:	1c11      	adds	r1, r2, #0
 8008864:	1c02      	adds	r2, r0, #0
 8008866:	430a      	orrs	r2, r1
 8008868:	71a2      	strb	r2, [r4, #6]
 800886a:	0e19      	lsrs	r1, r3, #24
 800886c:	79e3      	ldrb	r3, [r4, #7]
 800886e:	2200      	movs	r2, #0
 8008870:	4013      	ands	r3, r2
 8008872:	1c1a      	adds	r2, r3, #0
 8008874:	1c0b      	adds	r3, r1, #0
 8008876:	4313      	orrs	r3, r2
 8008878:	71e3      	strb	r3, [r4, #7]
 800887a:	7923      	ldrb	r3, [r4, #4]
 800887c:	7962      	ldrb	r2, [r4, #5]
 800887e:	0212      	lsls	r2, r2, #8
 8008880:	4313      	orrs	r3, r2
 8008882:	79a2      	ldrb	r2, [r4, #6]
 8008884:	0412      	lsls	r2, r2, #16
 8008886:	4313      	orrs	r3, r2
 8008888:	79e2      	ldrb	r2, [r4, #7]
 800888a:	0612      	lsls	r2, r2, #24
 800888c:	4313      	orrs	r3, r2
 800888e:	001a      	movs	r2, r3
 8008890:	4b4c      	ldr	r3, [pc, #304]	; (80089c4 <tcp_input+0x36c>)
 8008892:	601a      	str	r2, [r3, #0]
  ackno = tcphdr->ackno = ntohl(tcphdr->ackno);
 8008894:	4b48      	ldr	r3, [pc, #288]	; (80089b8 <tcp_input+0x360>)
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	7a1a      	ldrb	r2, [r3, #8]
 800889a:	7a59      	ldrb	r1, [r3, #9]
 800889c:	0209      	lsls	r1, r1, #8
 800889e:	430a      	orrs	r2, r1
 80088a0:	7a99      	ldrb	r1, [r3, #10]
 80088a2:	0409      	lsls	r1, r1, #16
 80088a4:	430a      	orrs	r2, r1
 80088a6:	7adb      	ldrb	r3, [r3, #11]
 80088a8:	061b      	lsls	r3, r3, #24
 80088aa:	4313      	orrs	r3, r2
 80088ac:	001a      	movs	r2, r3
 80088ae:	4b42      	ldr	r3, [pc, #264]	; (80089b8 <tcp_input+0x360>)
 80088b0:	681c      	ldr	r4, [r3, #0]
 80088b2:	0010      	movs	r0, r2
 80088b4:	f7fd fa65 	bl	8005d82 <lwip_ntohl>
 80088b8:	0003      	movs	r3, r0
 80088ba:	22ff      	movs	r2, #255	; 0xff
 80088bc:	401a      	ands	r2, r3
 80088be:	0010      	movs	r0, r2
 80088c0:	7a22      	ldrb	r2, [r4, #8]
 80088c2:	2100      	movs	r1, #0
 80088c4:	400a      	ands	r2, r1
 80088c6:	1c11      	adds	r1, r2, #0
 80088c8:	1c02      	adds	r2, r0, #0
 80088ca:	430a      	orrs	r2, r1
 80088cc:	7222      	strb	r2, [r4, #8]
 80088ce:	0a1a      	lsrs	r2, r3, #8
 80088d0:	21ff      	movs	r1, #255	; 0xff
 80088d2:	400a      	ands	r2, r1
 80088d4:	0010      	movs	r0, r2
 80088d6:	7a62      	ldrb	r2, [r4, #9]
 80088d8:	2100      	movs	r1, #0
 80088da:	400a      	ands	r2, r1
 80088dc:	1c11      	adds	r1, r2, #0
 80088de:	1c02      	adds	r2, r0, #0
 80088e0:	430a      	orrs	r2, r1
 80088e2:	7262      	strb	r2, [r4, #9]
 80088e4:	0c1a      	lsrs	r2, r3, #16
 80088e6:	21ff      	movs	r1, #255	; 0xff
 80088e8:	400a      	ands	r2, r1
 80088ea:	0010      	movs	r0, r2
 80088ec:	7aa2      	ldrb	r2, [r4, #10]
 80088ee:	2100      	movs	r1, #0
 80088f0:	400a      	ands	r2, r1
 80088f2:	1c11      	adds	r1, r2, #0
 80088f4:	1c02      	adds	r2, r0, #0
 80088f6:	430a      	orrs	r2, r1
 80088f8:	72a2      	strb	r2, [r4, #10]
 80088fa:	0e19      	lsrs	r1, r3, #24
 80088fc:	7ae3      	ldrb	r3, [r4, #11]
 80088fe:	2200      	movs	r2, #0
 8008900:	4013      	ands	r3, r2
 8008902:	1c1a      	adds	r2, r3, #0
 8008904:	1c0b      	adds	r3, r1, #0
 8008906:	4313      	orrs	r3, r2
 8008908:	72e3      	strb	r3, [r4, #11]
 800890a:	7a23      	ldrb	r3, [r4, #8]
 800890c:	7a62      	ldrb	r2, [r4, #9]
 800890e:	0212      	lsls	r2, r2, #8
 8008910:	4313      	orrs	r3, r2
 8008912:	7aa2      	ldrb	r2, [r4, #10]
 8008914:	0412      	lsls	r2, r2, #16
 8008916:	4313      	orrs	r3, r2
 8008918:	7ae2      	ldrb	r2, [r4, #11]
 800891a:	0612      	lsls	r2, r2, #24
 800891c:	4313      	orrs	r3, r2
 800891e:	001a      	movs	r2, r3
 8008920:	4b29      	ldr	r3, [pc, #164]	; (80089c8 <tcp_input+0x370>)
 8008922:	601a      	str	r2, [r3, #0]
  tcphdr->wnd = ntohs(tcphdr->wnd);
 8008924:	4b24      	ldr	r3, [pc, #144]	; (80089b8 <tcp_input+0x360>)
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	7b9a      	ldrb	r2, [r3, #14]
 800892a:	7bdb      	ldrb	r3, [r3, #15]
 800892c:	021b      	lsls	r3, r3, #8
 800892e:	4313      	orrs	r3, r2
 8008930:	b29a      	uxth	r2, r3
 8008932:	4b21      	ldr	r3, [pc, #132]	; (80089b8 <tcp_input+0x360>)
 8008934:	681c      	ldr	r4, [r3, #0]
 8008936:	0010      	movs	r0, r2
 8008938:	f7fd f9fa 	bl	8005d30 <lwip_ntohs>
 800893c:	0003      	movs	r3, r0
 800893e:	22ff      	movs	r2, #255	; 0xff
 8008940:	401a      	ands	r2, r3
 8008942:	0010      	movs	r0, r2
 8008944:	7ba2      	ldrb	r2, [r4, #14]
 8008946:	2100      	movs	r1, #0
 8008948:	400a      	ands	r2, r1
 800894a:	1c11      	adds	r1, r2, #0
 800894c:	1c02      	adds	r2, r0, #0
 800894e:	430a      	orrs	r2, r1
 8008950:	73a2      	strb	r2, [r4, #14]
 8008952:	0a1b      	lsrs	r3, r3, #8
 8008954:	b299      	uxth	r1, r3
 8008956:	7be3      	ldrb	r3, [r4, #15]
 8008958:	2200      	movs	r2, #0
 800895a:	4013      	ands	r3, r2
 800895c:	1c1a      	adds	r2, r3, #0
 800895e:	1c0b      	adds	r3, r1, #0
 8008960:	4313      	orrs	r3, r2
 8008962:	73e3      	strb	r3, [r4, #15]

  flags = TCPH_FLAGS(tcphdr);
 8008964:	4b14      	ldr	r3, [pc, #80]	; (80089b8 <tcp_input+0x360>)
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	7b1a      	ldrb	r2, [r3, #12]
 800896a:	7b5b      	ldrb	r3, [r3, #13]
 800896c:	021b      	lsls	r3, r3, #8
 800896e:	4313      	orrs	r3, r2
 8008970:	b29b      	uxth	r3, r3
 8008972:	0018      	movs	r0, r3
 8008974:	f7fd f9dc 	bl	8005d30 <lwip_ntohs>
 8008978:	0003      	movs	r3, r0
 800897a:	b2db      	uxtb	r3, r3
 800897c:	223f      	movs	r2, #63	; 0x3f
 800897e:	4013      	ands	r3, r2
 8008980:	b2da      	uxtb	r2, r3
 8008982:	4b12      	ldr	r3, [pc, #72]	; (80089cc <tcp_input+0x374>)
 8008984:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	891a      	ldrh	r2, [r3, #8]
 800898a:	4b10      	ldr	r3, [pc, #64]	; (80089cc <tcp_input+0x374>)
 800898c:	781b      	ldrb	r3, [r3, #0]
 800898e:	0019      	movs	r1, r3
 8008990:	2303      	movs	r3, #3
 8008992:	400b      	ands	r3, r1
 8008994:	1e59      	subs	r1, r3, #1
 8008996:	418b      	sbcs	r3, r1
 8008998:	b2db      	uxtb	r3, r3
 800899a:	b29b      	uxth	r3, r3
 800899c:	18d3      	adds	r3, r2, r3
 800899e:	b29a      	uxth	r2, r3
 80089a0:	4b0b      	ldr	r3, [pc, #44]	; (80089d0 <tcp_input+0x378>)
 80089a2:	801a      	strh	r2, [r3, #0]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80089a4:	2300      	movs	r3, #0
 80089a6:	613b      	str	r3, [r7, #16]

  
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80089a8:	4b0a      	ldr	r3, [pc, #40]	; (80089d4 <tcp_input+0x37c>)
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	617b      	str	r3, [r7, #20]
 80089ae:	e049      	b.n	8008a44 <tcp_input+0x3ec>
 80089b0:	2000340c 	.word	0x2000340c
 80089b4:	20002718 	.word	0x20002718
 80089b8:	20002714 	.word	0x20002714
 80089bc:	20003550 	.word	0x20003550
 80089c0:	20003548 	.word	0x20003548
 80089c4:	2000271c 	.word	0x2000271c
 80089c8:	20002720 	.word	0x20002720
 80089cc:	20002724 	.word	0x20002724
 80089d0:	20002726 	.word	0x20002726
 80089d4:	20003528 	.word	0x20003528
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
    if (pcb->remote_port == tcphdr->src &&
 80089d8:	697b      	ldr	r3, [r7, #20]
 80089da:	8b9a      	ldrh	r2, [r3, #28]
 80089dc:	4bcc      	ldr	r3, [pc, #816]	; (8008d10 <tcp_input+0x6b8>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	7819      	ldrb	r1, [r3, #0]
 80089e2:	785b      	ldrb	r3, [r3, #1]
 80089e4:	021b      	lsls	r3, r3, #8
 80089e6:	430b      	orrs	r3, r1
 80089e8:	b29b      	uxth	r3, r3
 80089ea:	429a      	cmp	r2, r3
 80089ec:	d125      	bne.n	8008a3a <tcp_input+0x3e2>
       pcb->local_port == tcphdr->dest &&
 80089ee:	697b      	ldr	r3, [r7, #20]
 80089f0:	8b5a      	ldrh	r2, [r3, #26]
 80089f2:	4bc7      	ldr	r3, [pc, #796]	; (8008d10 <tcp_input+0x6b8>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	7899      	ldrb	r1, [r3, #2]
 80089f8:	78db      	ldrb	r3, [r3, #3]
 80089fa:	021b      	lsls	r3, r3, #8
 80089fc:	430b      	orrs	r3, r1
 80089fe:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8008a00:	429a      	cmp	r2, r3
 8008a02:	d11a      	bne.n	8008a3a <tcp_input+0x3e2>
       ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src) &&
 8008a04:	697b      	ldr	r3, [r7, #20]
 8008a06:	685a      	ldr	r2, [r3, #4]
 8008a08:	4bc2      	ldr	r3, [pc, #776]	; (8008d14 <tcp_input+0x6bc>)
 8008a0a:	681b      	ldr	r3, [r3, #0]
       pcb->local_port == tcphdr->dest &&
 8008a0c:	429a      	cmp	r2, r3
 8008a0e:	d114      	bne.n	8008a3a <tcp_input+0x3e2>
       ip_addr_cmp(&(pcb->local_ip), &current_iphdr_dest)) {
 8008a10:	697b      	ldr	r3, [r7, #20]
 8008a12:	681a      	ldr	r2, [r3, #0]
 8008a14:	4bc0      	ldr	r3, [pc, #768]	; (8008d18 <tcp_input+0x6c0>)
 8008a16:	681b      	ldr	r3, [r3, #0]
       ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src) &&
 8008a18:	429a      	cmp	r2, r3
 8008a1a:	d10e      	bne.n	8008a3a <tcp_input+0x3e2>

      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
      if (prev != NULL) {
 8008a1c:	693b      	ldr	r3, [r7, #16]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d014      	beq.n	8008a4c <tcp_input+0x3f4>
        prev->next = pcb->next;
 8008a22:	697b      	ldr	r3, [r7, #20]
 8008a24:	68da      	ldr	r2, [r3, #12]
 8008a26:	693b      	ldr	r3, [r7, #16]
 8008a28:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8008a2a:	4bbc      	ldr	r3, [pc, #752]	; (8008d1c <tcp_input+0x6c4>)
 8008a2c:	681a      	ldr	r2, [r3, #0]
 8008a2e:	697b      	ldr	r3, [r7, #20]
 8008a30:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8008a32:	4bba      	ldr	r3, [pc, #744]	; (8008d1c <tcp_input+0x6c4>)
 8008a34:	697a      	ldr	r2, [r7, #20]
 8008a36:	601a      	str	r2, [r3, #0]
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
      break;
 8008a38:	e008      	b.n	8008a4c <tcp_input+0x3f4>
    }
    prev = pcb;
 8008a3a:	697b      	ldr	r3, [r7, #20]
 8008a3c:	613b      	str	r3, [r7, #16]
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008a3e:	697b      	ldr	r3, [r7, #20]
 8008a40:	68db      	ldr	r3, [r3, #12]
 8008a42:	617b      	str	r3, [r7, #20]
 8008a44:	697b      	ldr	r3, [r7, #20]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d1c6      	bne.n	80089d8 <tcp_input+0x380>
 8008a4a:	e000      	b.n	8008a4e <tcp_input+0x3f6>
      break;
 8008a4c:	46c0      	nop			; (mov r8, r8)
  }

  if (pcb == NULL) {
 8008a4e:	697b      	ldr	r3, [r7, #20]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d000      	beq.n	8008a56 <tcp_input+0x3fe>
 8008a54:	e074      	b.n	8008b40 <tcp_input+0x4e8>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008a56:	4bb2      	ldr	r3, [pc, #712]	; (8008d20 <tcp_input+0x6c8>)
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	617b      	str	r3, [r7, #20]
 8008a5c:	e02d      	b.n	8008aba <tcp_input+0x462>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
      if (pcb->remote_port == tcphdr->src &&
 8008a5e:	697b      	ldr	r3, [r7, #20]
 8008a60:	8b9a      	ldrh	r2, [r3, #28]
 8008a62:	4bab      	ldr	r3, [pc, #684]	; (8008d10 <tcp_input+0x6b8>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	7819      	ldrb	r1, [r3, #0]
 8008a68:	785b      	ldrb	r3, [r3, #1]
 8008a6a:	021b      	lsls	r3, r3, #8
 8008a6c:	430b      	orrs	r3, r1
 8008a6e:	b29b      	uxth	r3, r3
 8008a70:	429a      	cmp	r2, r3
 8008a72:	d11f      	bne.n	8008ab4 <tcp_input+0x45c>
         pcb->local_port == tcphdr->dest &&
 8008a74:	697b      	ldr	r3, [r7, #20]
 8008a76:	8b5a      	ldrh	r2, [r3, #26]
 8008a78:	4ba5      	ldr	r3, [pc, #660]	; (8008d10 <tcp_input+0x6b8>)
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	7899      	ldrb	r1, [r3, #2]
 8008a7e:	78db      	ldrb	r3, [r3, #3]
 8008a80:	021b      	lsls	r3, r3, #8
 8008a82:	430b      	orrs	r3, r1
 8008a84:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8008a86:	429a      	cmp	r2, r3
 8008a88:	d114      	bne.n	8008ab4 <tcp_input+0x45c>
         ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src) &&
 8008a8a:	697b      	ldr	r3, [r7, #20]
 8008a8c:	685a      	ldr	r2, [r3, #4]
 8008a8e:	4ba1      	ldr	r3, [pc, #644]	; (8008d14 <tcp_input+0x6bc>)
 8008a90:	681b      	ldr	r3, [r3, #0]
         pcb->local_port == tcphdr->dest &&
 8008a92:	429a      	cmp	r2, r3
 8008a94:	d10e      	bne.n	8008ab4 <tcp_input+0x45c>
         ip_addr_cmp(&(pcb->local_ip), &current_iphdr_dest)) {
 8008a96:	697b      	ldr	r3, [r7, #20]
 8008a98:	681a      	ldr	r2, [r3, #0]
 8008a9a:	4b9f      	ldr	r3, [pc, #636]	; (8008d18 <tcp_input+0x6c0>)
 8008a9c:	681b      	ldr	r3, [r3, #0]
         ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src) &&
 8008a9e:	429a      	cmp	r2, r3
 8008aa0:	d108      	bne.n	8008ab4 <tcp_input+0x45c>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
 8008aa2:	697b      	ldr	r3, [r7, #20]
 8008aa4:	0018      	movs	r0, r3
 8008aa6:	f000 fb23 	bl	80090f0 <tcp_timewait_input>
        pbuf_free(p);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	0018      	movs	r0, r3
 8008aae:	f7fe f971 	bl	8006d94 <pbuf_free>
        return;
 8008ab2:	e211      	b.n	8008ed8 <tcp_input+0x880>
    for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008ab4:	697b      	ldr	r3, [r7, #20]
 8008ab6:	68db      	ldr	r3, [r3, #12]
 8008ab8:	617b      	str	r3, [r7, #20]
 8008aba:	697b      	ldr	r3, [r7, #20]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d1ce      	bne.n	8008a5e <tcp_input+0x406>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	613b      	str	r3, [r7, #16]
    for(lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008ac4:	4b97      	ldr	r3, [pc, #604]	; (8008d24 <tcp_input+0x6cc>)
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	60fb      	str	r3, [r7, #12]
 8008aca:	e01c      	b.n	8008b06 <tcp_input+0x4ae>
      if (lpcb->local_port == tcphdr->dest) {
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	8b5a      	ldrh	r2, [r3, #26]
 8008ad0:	4b8f      	ldr	r3, [pc, #572]	; (8008d10 <tcp_input+0x6b8>)
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	7899      	ldrb	r1, [r3, #2]
 8008ad6:	78db      	ldrb	r3, [r3, #3]
 8008ad8:	021b      	lsls	r3, r3, #8
 8008ada:	430b      	orrs	r3, r1
 8008adc:	b29b      	uxth	r3, r3
 8008ade:	429a      	cmp	r2, r3
 8008ae0:	d10c      	bne.n	8008afc <tcp_input+0x4a4>
          /* found an ANY-match */
          lpcb_any = lpcb;
          lpcb_prev = prev;
        }
#else /* SO_REUSE */
        if (ip_addr_cmp(&(lpcb->local_ip), &current_iphdr_dest) ||
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	681a      	ldr	r2, [r3, #0]
 8008ae6:	4b8c      	ldr	r3, [pc, #560]	; (8008d18 <tcp_input+0x6c0>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	429a      	cmp	r2, r3
 8008aec:	d00e      	beq.n	8008b0c <tcp_input+0x4b4>
            ip_addr_isany(&(lpcb->local_ip))) {
 8008aee:	68fb      	ldr	r3, [r7, #12]
        if (ip_addr_cmp(&(lpcb->local_ip), &current_iphdr_dest) ||
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d00b      	beq.n	8008b0c <tcp_input+0x4b4>
            ip_addr_isany(&(lpcb->local_ip))) {
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d007      	beq.n	8008b0c <tcp_input+0x4b4>
          /* found a match */
          break;
        }
#endif /* SO_REUSE */
      }
      prev = (struct tcp_pcb *)lpcb;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	613b      	str	r3, [r7, #16]
    for(lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	68db      	ldr	r3, [r3, #12]
 8008b04:	60fb      	str	r3, [r7, #12]
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d1df      	bne.n	8008acc <tcp_input+0x474>
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d016      	beq.n	8008b40 <tcp_input+0x4e8>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8008b12:	693b      	ldr	r3, [r7, #16]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d00a      	beq.n	8008b2e <tcp_input+0x4d6>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	68da      	ldr	r2, [r3, #12]
 8008b1c:	693b      	ldr	r3, [r7, #16]
 8008b1e:	60da      	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8008b20:	4b80      	ldr	r3, [pc, #512]	; (8008d24 <tcp_input+0x6cc>)
 8008b22:	681a      	ldr	r2, [r3, #0]
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	60da      	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8008b28:	4b7e      	ldr	r3, [pc, #504]	; (8008d24 <tcp_input+0x6cc>)
 8008b2a:	68fa      	ldr	r2, [r7, #12]
 8008b2c:	601a      	str	r2, [r3, #0]
      }
    
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	0018      	movs	r0, r3
 8008b32:	f000 f9ed 	bl	8008f10 <tcp_listen_input>
      pbuf_free(p);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	0018      	movs	r0, r3
 8008b3a:	f7fe f92b 	bl	8006d94 <pbuf_free>
      return;
 8008b3e:	e1cb      	b.n	8008ed8 <tcp_input+0x880>
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
 8008b40:	697b      	ldr	r3, [r7, #20]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d100      	bne.n	8008b48 <tcp_input+0x4f0>
 8008b46:	e176      	b.n	8008e36 <tcp_input+0x7de>
    tcp_debug_print_state(pcb->state);
#endif /* TCP_DEBUG */
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8008b48:	4b77      	ldr	r3, [pc, #476]	; (8008d28 <tcp_input+0x6d0>)
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	891a      	ldrh	r2, [r3, #8]
 8008b52:	4b75      	ldr	r3, [pc, #468]	; (8008d28 <tcp_input+0x6d0>)
 8008b54:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8008b56:	4b74      	ldr	r3, [pc, #464]	; (8008d28 <tcp_input+0x6d0>)
 8008b58:	687a      	ldr	r2, [r7, #4]
 8008b5a:	605a      	str	r2, [r3, #4]
    inseg.tcphdr = tcphdr;
 8008b5c:	4b6c      	ldr	r3, [pc, #432]	; (8008d10 <tcp_input+0x6b8>)
 8008b5e:	681a      	ldr	r2, [r3, #0]
 8008b60:	4b71      	ldr	r3, [pc, #452]	; (8008d28 <tcp_input+0x6d0>)
 8008b62:	60da      	str	r2, [r3, #12]

    recv_data = NULL;
 8008b64:	4b71      	ldr	r3, [pc, #452]	; (8008d2c <tcp_input+0x6d4>)
 8008b66:	2200      	movs	r2, #0
 8008b68:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8008b6a:	4b71      	ldr	r3, [pc, #452]	; (8008d30 <tcp_input+0x6d8>)
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	701a      	strb	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8008b70:	4b70      	ldr	r3, [pc, #448]	; (8008d34 <tcp_input+0x6dc>)
 8008b72:	781b      	ldrb	r3, [r3, #0]
 8008b74:	001a      	movs	r2, r3
 8008b76:	2308      	movs	r3, #8
 8008b78:	4013      	ands	r3, r2
 8008b7a:	d006      	beq.n	8008b8a <tcp_input+0x532>
      p->flags |= PBUF_FLAG_PUSH;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	7b5b      	ldrb	r3, [r3, #13]
 8008b80:	2201      	movs	r2, #1
 8008b82:	4313      	orrs	r3, r2
 8008b84:	b2da      	uxtb	r2, r3
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8008b8a:	697b      	ldr	r3, [r7, #20]
 8008b8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d017      	beq.n	8008bc2 <tcp_input+0x56a>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8008b92:	697b      	ldr	r3, [r7, #20]
 8008b94:	0018      	movs	r0, r3
 8008b96:	f7ff fa0f 	bl	8007fb8 <tcp_process_refused_data>
 8008b9a:	0003      	movs	r3, r0
 8008b9c:	330a      	adds	r3, #10
 8008b9e:	d007      	beq.n	8008bb0 <tcp_input+0x558>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8008ba0:	697b      	ldr	r3, [r7, #20]
 8008ba2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d00c      	beq.n	8008bc2 <tcp_input+0x56a>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8008ba8:	4b63      	ldr	r3, [pc, #396]	; (8008d38 <tcp_input+0x6e0>)
 8008baa:	881b      	ldrh	r3, [r3, #0]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d008      	beq.n	8008bc2 <tcp_input+0x56a>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        TCP_STATS_INC(tcp.drop);
 8008bb0:	4b62      	ldr	r3, [pc, #392]	; (8008d3c <tcp_input+0x6e4>)
 8008bb2:	2296      	movs	r2, #150	; 0x96
 8008bb4:	5a9b      	ldrh	r3, [r3, r2]
 8008bb6:	3301      	adds	r3, #1
 8008bb8:	b299      	uxth	r1, r3
 8008bba:	4b60      	ldr	r3, [pc, #384]	; (8008d3c <tcp_input+0x6e4>)
 8008bbc:	2296      	movs	r2, #150	; 0x96
 8008bbe:	5299      	strh	r1, [r3, r2]
        snmp_inc_tcpinerrs();
        goto aborted;
 8008bc0:	e126      	b.n	8008e10 <tcp_input+0x7b8>
      }
    }
    tcp_input_pcb = pcb;
 8008bc2:	4b5f      	ldr	r3, [pc, #380]	; (8008d40 <tcp_input+0x6e8>)
 8008bc4:	697a      	ldr	r2, [r7, #20]
 8008bc6:	601a      	str	r2, [r3, #0]
    err = tcp_process(pcb);
 8008bc8:	250b      	movs	r5, #11
 8008bca:	197c      	adds	r4, r7, r5
 8008bcc:	697b      	ldr	r3, [r7, #20]
 8008bce:	0018      	movs	r0, r3
 8008bd0:	f000 fb02 	bl	80091d8 <tcp_process>
 8008bd4:	0003      	movs	r3, r0
 8008bd6:	7023      	strb	r3, [r4, #0]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8008bd8:	197b      	adds	r3, r7, r5
 8008bda:	781b      	ldrb	r3, [r3, #0]
 8008bdc:	b25b      	sxtb	r3, r3
 8008bde:	330a      	adds	r3, #10
 8008be0:	d100      	bne.n	8008be4 <tcp_input+0x58c>
 8008be2:	e10e      	b.n	8008e02 <tcp_input+0x7aa>
      if (recv_flags & TF_RESET) {
 8008be4:	4b52      	ldr	r3, [pc, #328]	; (8008d30 <tcp_input+0x6d8>)
 8008be6:	781b      	ldrb	r3, [r3, #0]
 8008be8:	001a      	movs	r2, r3
 8008bea:	2308      	movs	r3, #8
 8008bec:	4013      	ands	r3, r2
 8008bee:	d019      	beq.n	8008c24 <tcp_input+0x5cc>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->errf, pcb->callback_arg, ERR_RST);
 8008bf0:	697b      	ldr	r3, [r7, #20]
 8008bf2:	228c      	movs	r2, #140	; 0x8c
 8008bf4:	589b      	ldr	r3, [r3, r2]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d008      	beq.n	8008c0c <tcp_input+0x5b4>
 8008bfa:	697b      	ldr	r3, [r7, #20]
 8008bfc:	228c      	movs	r2, #140	; 0x8c
 8008bfe:	589a      	ldr	r2, [r3, r2]
 8008c00:	697b      	ldr	r3, [r7, #20]
 8008c02:	6918      	ldr	r0, [r3, #16]
 8008c04:	230b      	movs	r3, #11
 8008c06:	425b      	negs	r3, r3
 8008c08:	0019      	movs	r1, r3
 8008c0a:	4790      	blx	r2
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8008c0c:	697a      	ldr	r2, [r7, #20]
 8008c0e:	4b43      	ldr	r3, [pc, #268]	; (8008d1c <tcp_input+0x6c4>)
 8008c10:	0011      	movs	r1, r2
 8008c12:	0018      	movs	r0, r3
 8008c14:	f7ff fc8e 	bl	8008534 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 8008c18:	697b      	ldr	r3, [r7, #20]
 8008c1a:	0019      	movs	r1, r3
 8008c1c:	2002      	movs	r0, #2
 8008c1e:	f7fd fcf7 	bl	8006610 <memp_free>
 8008c22:	e0f5      	b.n	8008e10 <tcp_input+0x7b8>
      } else if (recv_flags & TF_CLOSED) {
 8008c24:	4b42      	ldr	r3, [pc, #264]	; (8008d30 <tcp_input+0x6d8>)
 8008c26:	781b      	ldrb	r3, [r3, #0]
 8008c28:	001a      	movs	r2, r3
 8008c2a:	2310      	movs	r3, #16
 8008c2c:	4013      	ands	r3, r2
 8008c2e:	d01f      	beq.n	8008c70 <tcp_input+0x618>
        /* The connection has been closed and we will deallocate the
           PCB. */
        if (!(pcb->flags & TF_RXCLOSED)) {
 8008c30:	697b      	ldr	r3, [r7, #20]
 8008c32:	7f9b      	ldrb	r3, [r3, #30]
 8008c34:	001a      	movs	r2, r3
 8008c36:	2310      	movs	r3, #16
 8008c38:	4013      	ands	r3, r2
 8008c3a:	d10d      	bne.n	8008c58 <tcp_input+0x600>
          /* Connection closed although the application has only shut down the
             tx side: call the PCB's err callback and indicate the closure to
             ensure the application doesn't continue using the PCB. */
          TCP_EVENT_ERR(pcb->errf, pcb->callback_arg, ERR_CLSD);
 8008c3c:	697b      	ldr	r3, [r7, #20]
 8008c3e:	228c      	movs	r2, #140	; 0x8c
 8008c40:	589b      	ldr	r3, [r3, r2]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d008      	beq.n	8008c58 <tcp_input+0x600>
 8008c46:	697b      	ldr	r3, [r7, #20]
 8008c48:	228c      	movs	r2, #140	; 0x8c
 8008c4a:	589a      	ldr	r2, [r3, r2]
 8008c4c:	697b      	ldr	r3, [r7, #20]
 8008c4e:	6918      	ldr	r0, [r3, #16]
 8008c50:	230c      	movs	r3, #12
 8008c52:	425b      	negs	r3, r3
 8008c54:	0019      	movs	r1, r3
 8008c56:	4790      	blx	r2
        }
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8008c58:	697a      	ldr	r2, [r7, #20]
 8008c5a:	4b30      	ldr	r3, [pc, #192]	; (8008d1c <tcp_input+0x6c4>)
 8008c5c:	0011      	movs	r1, r2
 8008c5e:	0018      	movs	r0, r3
 8008c60:	f7ff fc68 	bl	8008534 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 8008c64:	697b      	ldr	r3, [r7, #20]
 8008c66:	0019      	movs	r1, r3
 8008c68:	2002      	movs	r0, #2
 8008c6a:	f7fd fcd1 	bl	8006610 <memp_free>
 8008c6e:	e0cf      	b.n	8008e10 <tcp_input+0x7b8>
      } else {
        err = ERR_OK;
 8008c70:	230b      	movs	r3, #11
 8008c72:	18fb      	adds	r3, r7, r3
 8008c74:	2200      	movs	r2, #0
 8008c76:	701a      	strb	r2, [r3, #0]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (pcb->acked > 0) {
 8008c78:	697b      	ldr	r3, [r7, #20]
 8008c7a:	2264      	movs	r2, #100	; 0x64
 8008c7c:	5a9b      	ldrh	r3, [r3, r2]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d01d      	beq.n	8008cbe <tcp_input+0x666>
          TCP_EVENT_SENT(pcb, pcb->acked, err);
 8008c82:	697b      	ldr	r3, [r7, #20]
 8008c84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d00e      	beq.n	8008ca8 <tcp_input+0x650>
 8008c8a:	697b      	ldr	r3, [r7, #20]
 8008c8c:	6fdd      	ldr	r5, [r3, #124]	; 0x7c
 8008c8e:	697b      	ldr	r3, [r7, #20]
 8008c90:	6918      	ldr	r0, [r3, #16]
 8008c92:	697b      	ldr	r3, [r7, #20]
 8008c94:	2264      	movs	r2, #100	; 0x64
 8008c96:	5a9a      	ldrh	r2, [r3, r2]
 8008c98:	230b      	movs	r3, #11
 8008c9a:	18fc      	adds	r4, r7, r3
 8008c9c:	697b      	ldr	r3, [r7, #20]
 8008c9e:	0019      	movs	r1, r3
 8008ca0:	47a8      	blx	r5
 8008ca2:	0003      	movs	r3, r0
 8008ca4:	7023      	strb	r3, [r4, #0]
 8008ca6:	e003      	b.n	8008cb0 <tcp_input+0x658>
 8008ca8:	230b      	movs	r3, #11
 8008caa:	18fb      	adds	r3, r7, r3
 8008cac:	2200      	movs	r2, #0
 8008cae:	701a      	strb	r2, [r3, #0]
          if (err == ERR_ABRT) {
 8008cb0:	230b      	movs	r3, #11
 8008cb2:	18fb      	adds	r3, r7, r3
 8008cb4:	781b      	ldrb	r3, [r3, #0]
 8008cb6:	b25b      	sxtb	r3, r3
 8008cb8:	330a      	adds	r3, #10
 8008cba:	d100      	bne.n	8008cbe <tcp_input+0x666>
 8008cbc:	e0a3      	b.n	8008e06 <tcp_input+0x7ae>
            goto aborted;
          }
        }

        if (recv_data != NULL) {
 8008cbe:	4b1b      	ldr	r3, [pc, #108]	; (8008d2c <tcp_input+0x6d4>)
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d059      	beq.n	8008d7a <tcp_input+0x722>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
          if (pcb->flags & TF_RXCLOSED) {
 8008cc6:	697b      	ldr	r3, [r7, #20]
 8008cc8:	7f9b      	ldrb	r3, [r3, #30]
 8008cca:	001a      	movs	r2, r3
 8008ccc:	2310      	movs	r3, #16
 8008cce:	4013      	ands	r3, r2
 8008cd0:	d009      	beq.n	8008ce6 <tcp_input+0x68e>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8008cd2:	4b16      	ldr	r3, [pc, #88]	; (8008d2c <tcp_input+0x6d4>)
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	0018      	movs	r0, r3
 8008cd8:	f7fe f85c 	bl	8006d94 <pbuf_free>
            tcp_abort(pcb);
 8008cdc:	697b      	ldr	r3, [r7, #20]
 8008cde:	0018      	movs	r0, r3
 8008ce0:	f7fe fcc4 	bl	800766c <tcp_abort>
            goto aborted;
 8008ce4:	e094      	b.n	8008e10 <tcp_input+0x7b8>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8008ce6:	697b      	ldr	r3, [r7, #20]
 8008ce8:	2280      	movs	r2, #128	; 0x80
 8008cea:	589b      	ldr	r3, [r3, r2]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d029      	beq.n	8008d44 <tcp_input+0x6ec>
 8008cf0:	697b      	ldr	r3, [r7, #20]
 8008cf2:	2280      	movs	r2, #128	; 0x80
 8008cf4:	589d      	ldr	r5, [r3, r2]
 8008cf6:	697b      	ldr	r3, [r7, #20]
 8008cf8:	6918      	ldr	r0, [r3, #16]
 8008cfa:	4b0c      	ldr	r3, [pc, #48]	; (8008d2c <tcp_input+0x6d4>)
 8008cfc:	681a      	ldr	r2, [r3, #0]
 8008cfe:	230b      	movs	r3, #11
 8008d00:	18fc      	adds	r4, r7, r3
 8008d02:	6979      	ldr	r1, [r7, #20]
 8008d04:	2300      	movs	r3, #0
 8008d06:	47a8      	blx	r5
 8008d08:	0003      	movs	r3, r0
 8008d0a:	7023      	strb	r3, [r4, #0]
 8008d0c:	e025      	b.n	8008d5a <tcp_input+0x702>
 8008d0e:	46c0      	nop			; (mov r8, r8)
 8008d10:	20002714 	.word	0x20002714
 8008d14:	20003548 	.word	0x20003548
 8008d18:	20003550 	.word	0x20003550
 8008d1c:	20003528 	.word	0x20003528
 8008d20:	2000353c 	.word	0x2000353c
 8008d24:	20003530 	.word	0x20003530
 8008d28:	20002704 	.word	0x20002704
 8008d2c:	2000272c 	.word	0x2000272c
 8008d30:	20002728 	.word	0x20002728
 8008d34:	20002724 	.word	0x20002724
 8008d38:	20002726 	.word	0x20002726
 8008d3c:	2000340c 	.word	0x2000340c
 8008d40:	20003540 	.word	0x20003540
 8008d44:	4b66      	ldr	r3, [pc, #408]	; (8008ee0 <tcp_input+0x888>)
 8008d46:	681a      	ldr	r2, [r3, #0]
 8008d48:	230b      	movs	r3, #11
 8008d4a:	18fc      	adds	r4, r7, r3
 8008d4c:	6979      	ldr	r1, [r7, #20]
 8008d4e:	2300      	movs	r3, #0
 8008d50:	2000      	movs	r0, #0
 8008d52:	f7ff fa04 	bl	800815e <tcp_recv_null>
 8008d56:	0003      	movs	r3, r0
 8008d58:	7023      	strb	r3, [r4, #0]
          if (err == ERR_ABRT) {
 8008d5a:	230b      	movs	r3, #11
 8008d5c:	18fb      	adds	r3, r7, r3
 8008d5e:	781b      	ldrb	r3, [r3, #0]
 8008d60:	b25b      	sxtb	r3, r3
 8008d62:	330a      	adds	r3, #10
 8008d64:	d051      	beq.n	8008e0a <tcp_input+0x7b2>
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8008d66:	230b      	movs	r3, #11
 8008d68:	18fb      	adds	r3, r7, r3
 8008d6a:	781b      	ldrb	r3, [r3, #0]
 8008d6c:	b25b      	sxtb	r3, r3
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d003      	beq.n	8008d7a <tcp_input+0x722>
            pcb->refused_data = recv_data;
 8008d72:	4b5b      	ldr	r3, [pc, #364]	; (8008ee0 <tcp_input+0x888>)
 8008d74:	681a      	ldr	r2, [r3, #0]
 8008d76:	697b      	ldr	r3, [r7, #20]
 8008d78:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8008d7a:	4b5a      	ldr	r3, [pc, #360]	; (8008ee4 <tcp_input+0x88c>)
 8008d7c:	781b      	ldrb	r3, [r3, #0]
 8008d7e:	001a      	movs	r2, r3
 8008d80:	2320      	movs	r3, #32
 8008d82:	4013      	ands	r3, r2
 8008d84:	d035      	beq.n	8008df2 <tcp_input+0x79a>
          if (pcb->refused_data != NULL) {
 8008d86:	697b      	ldr	r3, [r7, #20]
 8008d88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d009      	beq.n	8008da2 <tcp_input+0x74a>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8008d8e:	697b      	ldr	r3, [r7, #20]
 8008d90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008d92:	7b5a      	ldrb	r2, [r3, #13]
 8008d94:	697b      	ldr	r3, [r7, #20]
 8008d96:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008d98:	2120      	movs	r1, #32
 8008d9a:	430a      	orrs	r2, r1
 8008d9c:	b2d2      	uxtb	r2, r2
 8008d9e:	735a      	strb	r2, [r3, #13]
 8008da0:	e027      	b.n	8008df2 <tcp_input+0x79a>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND) {
 8008da2:	697b      	ldr	r3, [r7, #20]
 8008da4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008da6:	4a50      	ldr	r2, [pc, #320]	; (8008ee8 <tcp_input+0x890>)
 8008da8:	4293      	cmp	r3, r2
 8008daa:	d005      	beq.n	8008db8 <tcp_input+0x760>
              pcb->rcv_wnd++;
 8008dac:	697b      	ldr	r3, [r7, #20]
 8008dae:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008db0:	3301      	adds	r3, #1
 8008db2:	b29a      	uxth	r2, r3
 8008db4:	697b      	ldr	r3, [r7, #20]
 8008db6:	859a      	strh	r2, [r3, #44]	; 0x2c
            }
            TCP_EVENT_CLOSED(pcb, err);
 8008db8:	697b      	ldr	r3, [r7, #20]
 8008dba:	2280      	movs	r2, #128	; 0x80
 8008dbc:	589b      	ldr	r3, [r3, r2]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d00d      	beq.n	8008dde <tcp_input+0x786>
 8008dc2:	697b      	ldr	r3, [r7, #20]
 8008dc4:	2280      	movs	r2, #128	; 0x80
 8008dc6:	589d      	ldr	r5, [r3, r2]
 8008dc8:	697b      	ldr	r3, [r7, #20]
 8008dca:	6918      	ldr	r0, [r3, #16]
 8008dcc:	230b      	movs	r3, #11
 8008dce:	18fc      	adds	r4, r7, r3
 8008dd0:	6979      	ldr	r1, [r7, #20]
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	47a8      	blx	r5
 8008dd8:	0003      	movs	r3, r0
 8008dda:	7023      	strb	r3, [r4, #0]
 8008ddc:	e003      	b.n	8008de6 <tcp_input+0x78e>
 8008dde:	230b      	movs	r3, #11
 8008de0:	18fb      	adds	r3, r7, r3
 8008de2:	2200      	movs	r2, #0
 8008de4:	701a      	strb	r2, [r3, #0]
            if (err == ERR_ABRT) {
 8008de6:	230b      	movs	r3, #11
 8008de8:	18fb      	adds	r3, r7, r3
 8008dea:	781b      	ldrb	r3, [r3, #0]
 8008dec:	b25b      	sxtb	r3, r3
 8008dee:	330a      	adds	r3, #10
 8008df0:	d00d      	beq.n	8008e0e <tcp_input+0x7b6>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8008df2:	4b3e      	ldr	r3, [pc, #248]	; (8008eec <tcp_input+0x894>)
 8008df4:	2200      	movs	r2, #0
 8008df6:	601a      	str	r2, [r3, #0]
        /* Try to send something out. */
        tcp_output(pcb);
 8008df8:	697b      	ldr	r3, [r7, #20]
 8008dfa:	0018      	movs	r0, r3
 8008dfc:	f002 ff04 	bl	800bc08 <tcp_output>
 8008e00:	e006      	b.n	8008e10 <tcp_input+0x7b8>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8008e02:	46c0      	nop			; (mov r8, r8)
 8008e04:	e004      	b.n	8008e10 <tcp_input+0x7b8>
            goto aborted;
 8008e06:	46c0      	nop			; (mov r8, r8)
 8008e08:	e002      	b.n	8008e10 <tcp_input+0x7b8>
            goto aborted;
 8008e0a:	46c0      	nop			; (mov r8, r8)
 8008e0c:	e000      	b.n	8008e10 <tcp_input+0x7b8>
              goto aborted;
 8008e0e:	46c0      	nop			; (mov r8, r8)
    tcp_input_pcb = NULL;
 8008e10:	4b36      	ldr	r3, [pc, #216]	; (8008eec <tcp_input+0x894>)
 8008e12:	2200      	movs	r2, #0
 8008e14:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8008e16:	4b32      	ldr	r3, [pc, #200]	; (8008ee0 <tcp_input+0x888>)
 8008e18:	2200      	movs	r2, #0
 8008e1a:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
 8008e1c:	4b34      	ldr	r3, [pc, #208]	; (8008ef0 <tcp_input+0x898>)
 8008e1e:	685b      	ldr	r3, [r3, #4]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d058      	beq.n	8008ed6 <tcp_input+0x87e>
    {
      pbuf_free(inseg.p);
 8008e24:	4b32      	ldr	r3, [pc, #200]	; (8008ef0 <tcp_input+0x898>)
 8008e26:	685b      	ldr	r3, [r3, #4]
 8008e28:	0018      	movs	r0, r3
 8008e2a:	f7fd ffb3 	bl	8006d94 <pbuf_free>
      inseg.p = NULL;
 8008e2e:	4b30      	ldr	r3, [pc, #192]	; (8008ef0 <tcp_input+0x898>)
 8008e30:	2200      	movs	r2, #0
 8008e32:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8008e34:	e04f      	b.n	8008ed6 <tcp_input+0x87e>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8008e36:	4b2f      	ldr	r3, [pc, #188]	; (8008ef4 <tcp_input+0x89c>)
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	7b1a      	ldrb	r2, [r3, #12]
 8008e3c:	7b5b      	ldrb	r3, [r3, #13]
 8008e3e:	021b      	lsls	r3, r3, #8
 8008e40:	4313      	orrs	r3, r2
 8008e42:	b29b      	uxth	r3, r3
 8008e44:	0018      	movs	r0, r3
 8008e46:	f7fc ff73 	bl	8005d30 <lwip_ntohs>
 8008e4a:	0003      	movs	r3, r0
 8008e4c:	001a      	movs	r2, r3
 8008e4e:	2304      	movs	r3, #4
 8008e50:	4013      	ands	r3, r2
 8008e52:	d12e      	bne.n	8008eb2 <tcp_input+0x85a>
      TCP_STATS_INC(tcp.proterr);
 8008e54:	4b28      	ldr	r3, [pc, #160]	; (8008ef8 <tcp_input+0x8a0>)
 8008e56:	22a0      	movs	r2, #160	; 0xa0
 8008e58:	5a9b      	ldrh	r3, [r3, r2]
 8008e5a:	3301      	adds	r3, #1
 8008e5c:	b299      	uxth	r1, r3
 8008e5e:	4b26      	ldr	r3, [pc, #152]	; (8008ef8 <tcp_input+0x8a0>)
 8008e60:	22a0      	movs	r2, #160	; 0xa0
 8008e62:	5299      	strh	r1, [r3, r2]
      TCP_STATS_INC(tcp.drop);
 8008e64:	4b24      	ldr	r3, [pc, #144]	; (8008ef8 <tcp_input+0x8a0>)
 8008e66:	2296      	movs	r2, #150	; 0x96
 8008e68:	5a9b      	ldrh	r3, [r3, r2]
 8008e6a:	3301      	adds	r3, #1
 8008e6c:	b299      	uxth	r1, r3
 8008e6e:	4b22      	ldr	r3, [pc, #136]	; (8008ef8 <tcp_input+0x8a0>)
 8008e70:	2296      	movs	r2, #150	; 0x96
 8008e72:	5299      	strh	r1, [r3, r2]
      tcp_rst(ackno, seqno + tcplen,
 8008e74:	4b21      	ldr	r3, [pc, #132]	; (8008efc <tcp_input+0x8a4>)
 8008e76:	6818      	ldr	r0, [r3, #0]
 8008e78:	4b21      	ldr	r3, [pc, #132]	; (8008f00 <tcp_input+0x8a8>)
 8008e7a:	881b      	ldrh	r3, [r3, #0]
 8008e7c:	001a      	movs	r2, r3
 8008e7e:	4b21      	ldr	r3, [pc, #132]	; (8008f04 <tcp_input+0x8ac>)
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	18d4      	adds	r4, r2, r3
        tcphdr->dest, tcphdr->src);
 8008e84:	4b1b      	ldr	r3, [pc, #108]	; (8008ef4 <tcp_input+0x89c>)
 8008e86:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen,
 8008e88:	789a      	ldrb	r2, [r3, #2]
 8008e8a:	78db      	ldrb	r3, [r3, #3]
 8008e8c:	021b      	lsls	r3, r3, #8
 8008e8e:	4313      	orrs	r3, r2
 8008e90:	b29a      	uxth	r2, r3
        tcphdr->dest, tcphdr->src);
 8008e92:	4b18      	ldr	r3, [pc, #96]	; (8008ef4 <tcp_input+0x89c>)
 8008e94:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen,
 8008e96:	7819      	ldrb	r1, [r3, #0]
 8008e98:	785b      	ldrb	r3, [r3, #1]
 8008e9a:	021b      	lsls	r3, r3, #8
 8008e9c:	430b      	orrs	r3, r1
 8008e9e:	b29b      	uxth	r3, r3
 8008ea0:	4d19      	ldr	r5, [pc, #100]	; (8008f08 <tcp_input+0x8b0>)
 8008ea2:	491a      	ldr	r1, [pc, #104]	; (8008f0c <tcp_input+0x8b4>)
 8008ea4:	9301      	str	r3, [sp, #4]
 8008ea6:	9200      	str	r2, [sp, #0]
 8008ea8:	002b      	movs	r3, r5
 8008eaa:	000a      	movs	r2, r1
 8008eac:	0021      	movs	r1, r4
 8008eae:	f003 f989 	bl	800c1c4 <tcp_rst>
    pbuf_free(p);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	0018      	movs	r0, r3
 8008eb6:	f7fd ff6d 	bl	8006d94 <pbuf_free>
  return;
 8008eba:	e00c      	b.n	8008ed6 <tcp_input+0x87e>
dropped:
  TCP_STATS_INC(tcp.drop);
 8008ebc:	4b0e      	ldr	r3, [pc, #56]	; (8008ef8 <tcp_input+0x8a0>)
 8008ebe:	2296      	movs	r2, #150	; 0x96
 8008ec0:	5a9b      	ldrh	r3, [r3, r2]
 8008ec2:	3301      	adds	r3, #1
 8008ec4:	b299      	uxth	r1, r3
 8008ec6:	4b0c      	ldr	r3, [pc, #48]	; (8008ef8 <tcp_input+0x8a0>)
 8008ec8:	2296      	movs	r2, #150	; 0x96
 8008eca:	5299      	strh	r1, [r3, r2]
  snmp_inc_tcpinerrs();
  pbuf_free(p);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	0018      	movs	r0, r3
 8008ed0:	f7fd ff60 	bl	8006d94 <pbuf_free>
 8008ed4:	e000      	b.n	8008ed8 <tcp_input+0x880>
  return;
 8008ed6:	46c0      	nop			; (mov r8, r8)
}
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	b006      	add	sp, #24
 8008edc:	bdb0      	pop	{r4, r5, r7, pc}
 8008ede:	46c0      	nop			; (mov r8, r8)
 8008ee0:	2000272c 	.word	0x2000272c
 8008ee4:	20002728 	.word	0x20002728
 8008ee8:	000016d0 	.word	0x000016d0
 8008eec:	20003540 	.word	0x20003540
 8008ef0:	20002704 	.word	0x20002704
 8008ef4:	20002714 	.word	0x20002714
 8008ef8:	2000340c 	.word	0x2000340c
 8008efc:	20002720 	.word	0x20002720
 8008f00:	20002726 	.word	0x20002726
 8008f04:	2000271c 	.word	0x2000271c
 8008f08:	20003548 	.word	0x20003548
 8008f0c:	20003550 	.word	0x20003550

08008f10 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8008f10:	b5b0      	push	{r4, r5, r7, lr}
 8008f12:	b086      	sub	sp, #24
 8008f14:	af02      	add	r7, sp, #8
 8008f16:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  err_t rc;

  if (flags & TCP_RST) {
 8008f18:	4b6b      	ldr	r3, [pc, #428]	; (80090c8 <tcp_listen_input+0x1b8>)
 8008f1a:	781b      	ldrb	r3, [r3, #0]
 8008f1c:	001a      	movs	r2, r3
 8008f1e:	2304      	movs	r3, #4
 8008f20:	4013      	ands	r3, r2
 8008f22:	d001      	beq.n	8008f28 <tcp_listen_input+0x18>
    /* An incoming RST should be ignored. Return. */
    return ERR_OK;
 8008f24:	2300      	movs	r3, #0
 8008f26:	e0cb      	b.n	80090c0 <tcp_listen_input+0x1b0>
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8008f28:	4b67      	ldr	r3, [pc, #412]	; (80090c8 <tcp_listen_input+0x1b8>)
 8008f2a:	781b      	ldrb	r3, [r3, #0]
 8008f2c:	001a      	movs	r2, r3
 8008f2e:	2310      	movs	r3, #16
 8008f30:	4013      	ands	r3, r2
 8008f32:	d01f      	beq.n	8008f74 <tcp_listen_input+0x64>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8008f34:	4b65      	ldr	r3, [pc, #404]	; (80090cc <tcp_listen_input+0x1bc>)
 8008f36:	6818      	ldr	r0, [r3, #0]
 8008f38:	4b65      	ldr	r3, [pc, #404]	; (80090d0 <tcp_listen_input+0x1c0>)
 8008f3a:	881b      	ldrh	r3, [r3, #0]
 8008f3c:	001a      	movs	r2, r3
 8008f3e:	4b65      	ldr	r3, [pc, #404]	; (80090d4 <tcp_listen_input+0x1c4>)
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	18d4      	adds	r4, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008f44:	4b64      	ldr	r3, [pc, #400]	; (80090d8 <tcp_listen_input+0x1c8>)
 8008f46:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8008f48:	789a      	ldrb	r2, [r3, #2]
 8008f4a:	78db      	ldrb	r3, [r3, #3]
 8008f4c:	021b      	lsls	r3, r3, #8
 8008f4e:	4313      	orrs	r3, r2
 8008f50:	b29a      	uxth	r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008f52:	4b61      	ldr	r3, [pc, #388]	; (80090d8 <tcp_listen_input+0x1c8>)
 8008f54:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8008f56:	7819      	ldrb	r1, [r3, #0]
 8008f58:	785b      	ldrb	r3, [r3, #1]
 8008f5a:	021b      	lsls	r3, r3, #8
 8008f5c:	430b      	orrs	r3, r1
 8008f5e:	b29b      	uxth	r3, r3
 8008f60:	4d5e      	ldr	r5, [pc, #376]	; (80090dc <tcp_listen_input+0x1cc>)
 8008f62:	495f      	ldr	r1, [pc, #380]	; (80090e0 <tcp_listen_input+0x1d0>)
 8008f64:	9301      	str	r3, [sp, #4]
 8008f66:	9200      	str	r2, [sp, #0]
 8008f68:	002b      	movs	r3, r5
 8008f6a:	000a      	movs	r2, r1
 8008f6c:	0021      	movs	r1, r4
 8008f6e:	f003 f929 	bl	800c1c4 <tcp_rst>
 8008f72:	e0a4      	b.n	80090be <tcp_listen_input+0x1ae>
  } else if (flags & TCP_SYN) {
 8008f74:	4b54      	ldr	r3, [pc, #336]	; (80090c8 <tcp_listen_input+0x1b8>)
 8008f76:	781b      	ldrb	r3, [r3, #0]
 8008f78:	001a      	movs	r2, r3
 8008f7a:	2302      	movs	r3, #2
 8008f7c:	4013      	ands	r3, r2
 8008f7e:	d100      	bne.n	8008f82 <tcp_listen_input+0x72>
 8008f80:	e09d      	b.n	80090be <tcp_listen_input+0x1ae>
    if (pcb->accepts_pending >= pcb->backlog) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_listen_input: listen backlog exceeded for port %"U16_F"\n", tcphdr->dest));
      return ERR_ABRT;
    }
#endif /* TCP_LISTEN_BACKLOG */
    npcb = tcp_alloc(pcb->prio);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	7e5b      	ldrb	r3, [r3, #25]
 8008f86:	0018      	movs	r0, r3
 8008f88:	f7ff f98c 	bl	80082a4 <tcp_alloc>
 8008f8c:	0003      	movs	r3, r0
 8008f8e:	60fb      	str	r3, [r7, #12]
    /* If a new PCB could not be created (probably due to lack of memory),
       we don't do anything, but rely on the sender will retransmit the
       SYN at a time when we have more memory available. */
    if (npcb == NULL) {
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d10a      	bne.n	8008fac <tcp_listen_input+0x9c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_listen_input: could not allocate PCB\n"));
      TCP_STATS_INC(tcp.memerr);
 8008f96:	4b53      	ldr	r3, [pc, #332]	; (80090e4 <tcp_listen_input+0x1d4>)
 8008f98:	229c      	movs	r2, #156	; 0x9c
 8008f9a:	5a9b      	ldrh	r3, [r3, r2]
 8008f9c:	3301      	adds	r3, #1
 8008f9e:	b299      	uxth	r1, r3
 8008fa0:	4b50      	ldr	r3, [pc, #320]	; (80090e4 <tcp_listen_input+0x1d4>)
 8008fa2:	229c      	movs	r2, #156	; 0x9c
 8008fa4:	5299      	strh	r1, [r3, r2]
      return ERR_MEM;
 8008fa6:	2301      	movs	r3, #1
 8008fa8:	425b      	negs	r3, r3
 8008faa:	e089      	b.n	80090c0 <tcp_listen_input+0x1b0>
    }
#if TCP_LISTEN_BACKLOG
    pcb->accepts_pending++;
#endif /* TCP_LISTEN_BACKLOG */
    /* Set up the new PCB. */
    ip_addr_copy(npcb->local_ip, current_iphdr_dest);
 8008fac:	4b4c      	ldr	r3, [pc, #304]	; (80090e0 <tcp_listen_input+0x1d0>)
 8008fae:	681a      	ldr	r2, [r3, #0]
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	601a      	str	r2, [r3, #0]
    npcb->local_port = pcb->local_port;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	8b5a      	ldrh	r2, [r3, #26]
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	835a      	strh	r2, [r3, #26]
    ip_addr_copy(npcb->remote_ip, current_iphdr_src);
 8008fbc:	4b47      	ldr	r3, [pc, #284]	; (80090dc <tcp_listen_input+0x1cc>)
 8008fbe:	681a      	ldr	r2, [r3, #0]
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	605a      	str	r2, [r3, #4]
    npcb->remote_port = tcphdr->src;
 8008fc4:	4b44      	ldr	r3, [pc, #272]	; (80090d8 <tcp_listen_input+0x1c8>)
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	781a      	ldrb	r2, [r3, #0]
 8008fca:	785b      	ldrb	r3, [r3, #1]
 8008fcc:	021b      	lsls	r3, r3, #8
 8008fce:	4313      	orrs	r3, r2
 8008fd0:	b29a      	uxth	r2, r3
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	839a      	strh	r2, [r3, #28]
    npcb->state = SYN_RCVD;
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	2203      	movs	r2, #3
 8008fda:	761a      	strb	r2, [r3, #24]
    npcb->rcv_nxt = seqno + 1;
 8008fdc:	4b3d      	ldr	r3, [pc, #244]	; (80090d4 <tcp_listen_input+0x1c4>)
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	1c5a      	adds	r2, r3, #1
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	629a      	str	r2, [r3, #40]	; 0x28
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	631a      	str	r2, [r3, #48]	; 0x30
    npcb->snd_wnd = tcphdr->wnd;
 8008fee:	4b3a      	ldr	r3, [pc, #232]	; (80090d8 <tcp_listen_input+0x1c8>)
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	7b9a      	ldrb	r2, [r3, #14]
 8008ff4:	7bdb      	ldrb	r3, [r3, #15]
 8008ff6:	021b      	lsls	r3, r3, #8
 8008ff8:	4313      	orrs	r3, r2
 8008ffa:	b299      	uxth	r1, r3
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	2260      	movs	r2, #96	; 0x60
 8009000:	5299      	strh	r1, [r3, r2]
    npcb->snd_wnd_max = tcphdr->wnd;
 8009002:	4b35      	ldr	r3, [pc, #212]	; (80090d8 <tcp_listen_input+0x1c8>)
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	7b9a      	ldrb	r2, [r3, #14]
 8009008:	7bdb      	ldrb	r3, [r3, #15]
 800900a:	021b      	lsls	r3, r3, #8
 800900c:	4313      	orrs	r3, r2
 800900e:	b299      	uxth	r1, r3
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	2262      	movs	r2, #98	; 0x62
 8009014:	5299      	strh	r1, [r3, r2]
    npcb->ssthresh = npcb->snd_wnd;
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	2260      	movs	r2, #96	; 0x60
 800901a:	5a99      	ldrh	r1, [r3, r2]
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	224e      	movs	r2, #78	; 0x4e
 8009020:	5299      	strh	r1, [r3, r2]
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8009022:	4b2c      	ldr	r3, [pc, #176]	; (80090d4 <tcp_listen_input+0x1c4>)
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	1e5a      	subs	r2, r3, #1
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	691a      	ldr	r2, [r3, #16]
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	611a      	str	r2, [r3, #16]
#if LWIP_CALLBACK_API
    npcb->accept = pcb->accept;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	695a      	ldr	r2, [r3, #20]
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_CALLBACK_API */
    /* inherit socket options */
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	7a1b      	ldrb	r3, [r3, #8]
 8009040:	2273      	movs	r2, #115	; 0x73
 8009042:	4393      	bics	r3, r2
 8009044:	b2da      	uxtb	r2, r3
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	721a      	strb	r2, [r3, #8]
    /* Register the new PCB so that we can begin receiving segments
       for it. */
    TCP_REG_ACTIVE(npcb);
 800904a:	4b27      	ldr	r3, [pc, #156]	; (80090e8 <tcp_listen_input+0x1d8>)
 800904c:	681a      	ldr	r2, [r3, #0]
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	60da      	str	r2, [r3, #12]
 8009052:	4b25      	ldr	r3, [pc, #148]	; (80090e8 <tcp_listen_input+0x1d8>)
 8009054:	68fa      	ldr	r2, [r7, #12]
 8009056:	601a      	str	r2, [r3, #0]
 8009058:	f003 fc08 	bl	800c86c <tcp_timer_needed>
 800905c:	4b23      	ldr	r3, [pc, #140]	; (80090ec <tcp_listen_input+0x1dc>)
 800905e:	2201      	movs	r2, #1
 8009060:	701a      	strb	r2, [r3, #0]

    /* Parse any options in the SYN. */
    tcp_parseopt(npcb);
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	0018      	movs	r0, r3
 8009066:	f001 fdab 	bl	800abc0 <tcp_parseopt>
#if TCP_CALCULATE_EFF_SEND_MSS
    npcb->mss = tcp_eff_send_mss(npcb->mss, &(npcb->remote_ip));
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	3304      	adds	r3, #4
 8009072:	0019      	movs	r1, r3
 8009074:	0010      	movs	r0, r2
 8009076:	f7ff fac3 	bl	8008600 <tcp_eff_send_mss>
 800907a:	0003      	movs	r3, r0
 800907c:	001a      	movs	r2, r3
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	86da      	strh	r2, [r3, #54]	; 0x36
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

    snmp_inc_tcppassiveopens();

    /* Send a SYN|ACK together with the MSS option. */
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8009082:	250b      	movs	r5, #11
 8009084:	197c      	adds	r4, r7, r5
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	2112      	movs	r1, #18
 800908a:	0018      	movs	r0, r3
 800908c:	f002 fc62 	bl	800b954 <tcp_enqueue_flags>
 8009090:	0003      	movs	r3, r0
 8009092:	7023      	strb	r3, [r4, #0]
    if (rc != ERR_OK) {
 8009094:	197b      	adds	r3, r7, r5
 8009096:	781b      	ldrb	r3, [r3, #0]
 8009098:	b25b      	sxtb	r3, r3
 800909a:	2b00      	cmp	r3, #0
 800909c:	d009      	beq.n	80090b2 <tcp_listen_input+0x1a2>
      tcp_abandon(npcb, 0);
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	2100      	movs	r1, #0
 80090a2:	0018      	movs	r0, r3
 80090a4:	f7fe fa72 	bl	800758c <tcp_abandon>
      return rc;
 80090a8:	230b      	movs	r3, #11
 80090aa:	18fb      	adds	r3, r7, r3
 80090ac:	781b      	ldrb	r3, [r3, #0]
 80090ae:	b25b      	sxtb	r3, r3
 80090b0:	e006      	b.n	80090c0 <tcp_listen_input+0x1b0>
    }
    return tcp_output(npcb);
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	0018      	movs	r0, r3
 80090b6:	f002 fda7 	bl	800bc08 <tcp_output>
 80090ba:	0003      	movs	r3, r0
 80090bc:	e000      	b.n	80090c0 <tcp_listen_input+0x1b0>
  }
  return ERR_OK;
 80090be:	2300      	movs	r3, #0
}
 80090c0:	0018      	movs	r0, r3
 80090c2:	46bd      	mov	sp, r7
 80090c4:	b004      	add	sp, #16
 80090c6:	bdb0      	pop	{r4, r5, r7, pc}
 80090c8:	20002724 	.word	0x20002724
 80090cc:	20002720 	.word	0x20002720
 80090d0:	20002726 	.word	0x20002726
 80090d4:	2000271c 	.word	0x2000271c
 80090d8:	20002714 	.word	0x20002714
 80090dc:	20003548 	.word	0x20003548
 80090e0:	20003550 	.word	0x20003550
 80090e4:	2000340c 	.word	0x2000340c
 80090e8:	20003528 	.word	0x20003528
 80090ec:	20003524 	.word	0x20003524

080090f0 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80090f0:	b5b0      	push	{r4, r5, r7, lr}
 80090f2:	b084      	sub	sp, #16
 80090f4:	af02      	add	r7, sp, #8
 80090f6:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST)  {
 80090f8:	4b2f      	ldr	r3, [pc, #188]	; (80091b8 <tcp_timewait_input+0xc8>)
 80090fa:	781b      	ldrb	r3, [r3, #0]
 80090fc:	001a      	movs	r2, r3
 80090fe:	2304      	movs	r3, #4
 8009100:	4013      	ands	r3, r2
 8009102:	d001      	beq.n	8009108 <tcp_timewait_input+0x18>
    return ERR_OK;
 8009104:	2300      	movs	r3, #0
 8009106:	e052      	b.n	80091ae <tcp_timewait_input+0xbe>
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8009108:	4b2b      	ldr	r3, [pc, #172]	; (80091b8 <tcp_timewait_input+0xc8>)
 800910a:	781b      	ldrb	r3, [r3, #0]
 800910c:	001a      	movs	r2, r3
 800910e:	2302      	movs	r3, #2
 8009110:	4013      	ands	r3, r2
 8009112:	d030      	beq.n	8009176 <tcp_timewait_input+0x86>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt+pcb->rcv_wnd)) {
 8009114:	4b29      	ldr	r3, [pc, #164]	; (80091bc <tcp_timewait_input+0xcc>)
 8009116:	681a      	ldr	r2, [r3, #0]
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800911c:	1ad3      	subs	r3, r2, r3
 800911e:	d434      	bmi.n	800918a <tcp_timewait_input+0x9a>
 8009120:	4b26      	ldr	r3, [pc, #152]	; (80091bc <tcp_timewait_input+0xcc>)
 8009122:	681a      	ldr	r2, [r3, #0]
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009128:	6879      	ldr	r1, [r7, #4]
 800912a:	8d89      	ldrh	r1, [r1, #44]	; 0x2c
 800912c:	185b      	adds	r3, r3, r1
 800912e:	1ad3      	subs	r3, r2, r3
 8009130:	2b00      	cmp	r3, #0
 8009132:	dc2a      	bgt.n	800918a <tcp_timewait_input+0x9a>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
 8009134:	4b22      	ldr	r3, [pc, #136]	; (80091c0 <tcp_timewait_input+0xd0>)
 8009136:	6818      	ldr	r0, [r3, #0]
 8009138:	4b22      	ldr	r3, [pc, #136]	; (80091c4 <tcp_timewait_input+0xd4>)
 800913a:	881b      	ldrh	r3, [r3, #0]
 800913c:	001a      	movs	r2, r3
 800913e:	4b1f      	ldr	r3, [pc, #124]	; (80091bc <tcp_timewait_input+0xcc>)
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	18d4      	adds	r4, r2, r3
        tcphdr->dest, tcphdr->src);
 8009144:	4b20      	ldr	r3, [pc, #128]	; (80091c8 <tcp_timewait_input+0xd8>)
 8009146:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
 8009148:	789a      	ldrb	r2, [r3, #2]
 800914a:	78db      	ldrb	r3, [r3, #3]
 800914c:	021b      	lsls	r3, r3, #8
 800914e:	4313      	orrs	r3, r2
 8009150:	b29a      	uxth	r2, r3
        tcphdr->dest, tcphdr->src);
 8009152:	4b1d      	ldr	r3, [pc, #116]	; (80091c8 <tcp_timewait_input+0xd8>)
 8009154:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
 8009156:	7819      	ldrb	r1, [r3, #0]
 8009158:	785b      	ldrb	r3, [r3, #1]
 800915a:	021b      	lsls	r3, r3, #8
 800915c:	430b      	orrs	r3, r1
 800915e:	b29b      	uxth	r3, r3
 8009160:	4d1a      	ldr	r5, [pc, #104]	; (80091cc <tcp_timewait_input+0xdc>)
 8009162:	491b      	ldr	r1, [pc, #108]	; (80091d0 <tcp_timewait_input+0xe0>)
 8009164:	9301      	str	r3, [sp, #4]
 8009166:	9200      	str	r2, [sp, #0]
 8009168:	002b      	movs	r3, r5
 800916a:	000a      	movs	r2, r1
 800916c:	0021      	movs	r1, r4
 800916e:	f003 f829 	bl	800c1c4 <tcp_rst>
      return ERR_OK;
 8009172:	2300      	movs	r3, #0
 8009174:	e01b      	b.n	80091ae <tcp_timewait_input+0xbe>
    }
  } else if (flags & TCP_FIN) {
 8009176:	4b10      	ldr	r3, [pc, #64]	; (80091b8 <tcp_timewait_input+0xc8>)
 8009178:	781b      	ldrb	r3, [r3, #0]
 800917a:	001a      	movs	r2, r3
 800917c:	2301      	movs	r3, #1
 800917e:	4013      	ands	r3, r2
 8009180:	d003      	beq.n	800918a <tcp_timewait_input+0x9a>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8009182:	4b14      	ldr	r3, [pc, #80]	; (80091d4 <tcp_timewait_input+0xe4>)
 8009184:	681a      	ldr	r2, [r3, #0]
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	625a      	str	r2, [r3, #36]	; 0x24
  }

  if ((tcplen > 0))  {
 800918a:	4b0e      	ldr	r3, [pc, #56]	; (80091c4 <tcp_timewait_input+0xd4>)
 800918c:	881b      	ldrh	r3, [r3, #0]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d00c      	beq.n	80091ac <tcp_timewait_input+0xbc>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	7f9b      	ldrb	r3, [r3, #30]
 8009196:	2202      	movs	r2, #2
 8009198:	4313      	orrs	r3, r2
 800919a:	b2da      	uxtb	r2, r3
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	779a      	strb	r2, [r3, #30]
    return tcp_output(pcb);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	0018      	movs	r0, r3
 80091a4:	f002 fd30 	bl	800bc08 <tcp_output>
 80091a8:	0003      	movs	r3, r0
 80091aa:	e000      	b.n	80091ae <tcp_timewait_input+0xbe>
  }
  return ERR_OK;
 80091ac:	2300      	movs	r3, #0
}
 80091ae:	0018      	movs	r0, r3
 80091b0:	46bd      	mov	sp, r7
 80091b2:	b002      	add	sp, #8
 80091b4:	bdb0      	pop	{r4, r5, r7, pc}
 80091b6:	46c0      	nop			; (mov r8, r8)
 80091b8:	20002724 	.word	0x20002724
 80091bc:	2000271c 	.word	0x2000271c
 80091c0:	20002720 	.word	0x20002720
 80091c4:	20002726 	.word	0x20002726
 80091c8:	20002714 	.word	0x20002714
 80091cc:	20003548 	.word	0x20003548
 80091d0:	20003550 	.word	0x20003550
 80091d4:	2000352c 	.word	0x2000352c

080091d8 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80091d8:	b5b0      	push	{r4, r5, r7, lr}
 80091da:	b086      	sub	sp, #24
 80091dc:	af02      	add	r7, sp, #8
 80091de:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80091e0:	230f      	movs	r3, #15
 80091e2:	18fb      	adds	r3, r7, r3
 80091e4:	2200      	movs	r2, #0
 80091e6:	701a      	strb	r2, [r3, #0]
  err_t err;

  err = ERR_OK;
 80091e8:	230e      	movs	r3, #14
 80091ea:	18fb      	adds	r3, r7, r3
 80091ec:	2200      	movs	r2, #0
 80091ee:	701a      	strb	r2, [r3, #0]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80091f0:	4bd1      	ldr	r3, [pc, #836]	; (8009538 <tcp_process+0x360>)
 80091f2:	781b      	ldrb	r3, [r3, #0]
 80091f4:	001a      	movs	r2, r3
 80091f6:	2304      	movs	r3, #4
 80091f8:	4013      	ands	r3, r2
 80091fa:	d03a      	beq.n	8009272 <tcp_process+0x9a>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	7e1b      	ldrb	r3, [r3, #24]
 8009200:	2b02      	cmp	r3, #2
 8009202:	d10a      	bne.n	800921a <tcp_process+0x42>
      if (ackno == pcb->snd_nxt) {
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009208:	4bcc      	ldr	r3, [pc, #816]	; (800953c <tcp_process+0x364>)
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	429a      	cmp	r2, r3
 800920e:	d118      	bne.n	8009242 <tcp_process+0x6a>
        acceptable = 1;
 8009210:	230f      	movs	r3, #15
 8009212:	18fb      	adds	r3, r7, r3
 8009214:	2201      	movs	r2, #1
 8009216:	701a      	strb	r2, [r3, #0]
 8009218:	e013      	b.n	8009242 <tcp_process+0x6a>
      }
    } else {
      if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, 
 800921a:	4bc9      	ldr	r3, [pc, #804]	; (8009540 <tcp_process+0x368>)
 800921c:	681a      	ldr	r2, [r3, #0]
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009222:	1ad3      	subs	r3, r2, r3
 8009224:	d40d      	bmi.n	8009242 <tcp_process+0x6a>
 8009226:	4bc6      	ldr	r3, [pc, #792]	; (8009540 <tcp_process+0x368>)
 8009228:	681a      	ldr	r2, [r3, #0]
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800922e:	6879      	ldr	r1, [r7, #4]
 8009230:	8d89      	ldrh	r1, [r1, #44]	; 0x2c
 8009232:	185b      	adds	r3, r3, r1
 8009234:	1ad3      	subs	r3, r2, r3
 8009236:	2b00      	cmp	r3, #0
 8009238:	dc03      	bgt.n	8009242 <tcp_process+0x6a>
                          pcb->rcv_nxt+pcb->rcv_wnd)) {
        acceptable = 1;
 800923a:	230f      	movs	r3, #15
 800923c:	18fb      	adds	r3, r7, r3
 800923e:	2201      	movs	r2, #1
 8009240:	701a      	strb	r2, [r3, #0]
      }
    }

    if (acceptable) {
 8009242:	230f      	movs	r3, #15
 8009244:	18fb      	adds	r3, r7, r3
 8009246:	781b      	ldrb	r3, [r3, #0]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d010      	beq.n	800926e <tcp_process+0x96>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
      recv_flags |= TF_RESET;
 800924c:	4bbd      	ldr	r3, [pc, #756]	; (8009544 <tcp_process+0x36c>)
 800924e:	781b      	ldrb	r3, [r3, #0]
 8009250:	2208      	movs	r2, #8
 8009252:	4313      	orrs	r3, r2
 8009254:	b2da      	uxtb	r2, r3
 8009256:	4bbb      	ldr	r3, [pc, #748]	; (8009544 <tcp_process+0x36c>)
 8009258:	701a      	strb	r2, [r3, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	7f9b      	ldrb	r3, [r3, #30]
 800925e:	2201      	movs	r2, #1
 8009260:	4393      	bics	r3, r2
 8009262:	b2da      	uxtb	r2, r3
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	779a      	strb	r2, [r3, #30]
      return ERR_RST;
 8009268:	230b      	movs	r3, #11
 800926a:	425b      	negs	r3, r3
 800926c:	e333      	b.n	80098d6 <tcp_process+0x6fe>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
 800926e:	2300      	movs	r3, #0
 8009270:	e331      	b.n	80098d6 <tcp_process+0x6fe>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) { 
 8009272:	4bb1      	ldr	r3, [pc, #708]	; (8009538 <tcp_process+0x360>)
 8009274:	781b      	ldrb	r3, [r3, #0]
 8009276:	001a      	movs	r2, r3
 8009278:	2302      	movs	r3, #2
 800927a:	4013      	ands	r3, r2
 800927c:	d010      	beq.n	80092a0 <tcp_process+0xc8>
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	7e1b      	ldrb	r3, [r3, #24]
 8009282:	2b02      	cmp	r3, #2
 8009284:	d00c      	beq.n	80092a0 <tcp_process+0xc8>
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	7e1b      	ldrb	r3, [r3, #24]
 800928a:	2b03      	cmp	r3, #3
 800928c:	d008      	beq.n	80092a0 <tcp_process+0xc8>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	7f9b      	ldrb	r3, [r3, #30]
 8009292:	2202      	movs	r2, #2
 8009294:	4313      	orrs	r3, r2
 8009296:	b2da      	uxtb	r2, r3
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	779a      	strb	r2, [r3, #30]
    return ERR_OK;
 800929c:	2300      	movs	r3, #0
 800929e:	e31a      	b.n	80098d6 <tcp_process+0x6fe>
  }
  
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	7f9b      	ldrb	r3, [r3, #30]
 80092a4:	001a      	movs	r2, r3
 80092a6:	2310      	movs	r3, #16
 80092a8:	4013      	ands	r3, r2
 80092aa:	d103      	bne.n	80092b4 <tcp_process+0xdc>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80092ac:	4ba6      	ldr	r3, [pc, #664]	; (8009548 <tcp_process+0x370>)
 80092ae:	681a      	ldr	r2, [r3, #0]
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	625a      	str	r2, [r3, #36]	; 0x24
  }
  pcb->keep_cnt_sent = 0;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2296      	movs	r2, #150	; 0x96
 80092b8:	2100      	movs	r1, #0
 80092ba:	5499      	strb	r1, [r3, r2]

  tcp_parseopt(pcb);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	0018      	movs	r0, r3
 80092c0:	f001 fc7e 	bl	800abc0 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	7e1b      	ldrb	r3, [r3, #24]
 80092c8:	2b09      	cmp	r3, #9
 80092ca:	d900      	bls.n	80092ce <tcp_process+0xf6>
 80092cc:	e2f3      	b.n	80098b6 <tcp_process+0x6de>
 80092ce:	009a      	lsls	r2, r3, #2
 80092d0:	4b9e      	ldr	r3, [pc, #632]	; (800954c <tcp_process+0x374>)
 80092d2:	18d3      	adds	r3, r2, r3
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	469f      	mov	pc, r3
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80092d8:	4b97      	ldr	r3, [pc, #604]	; (8009538 <tcp_process+0x360>)
 80092da:	781b      	ldrb	r3, [r3, #0]
 80092dc:	001a      	movs	r2, r3
 80092de:	2310      	movs	r3, #16
 80092e0:	4013      	ands	r3, r2
 80092e2:	d100      	bne.n	80092e6 <tcp_process+0x10e>
 80092e4:	e0be      	b.n	8009464 <tcp_process+0x28c>
 80092e6:	4b94      	ldr	r3, [pc, #592]	; (8009538 <tcp_process+0x360>)
 80092e8:	781b      	ldrb	r3, [r3, #0]
 80092ea:	001a      	movs	r2, r3
 80092ec:	2302      	movs	r3, #2
 80092ee:	4013      	ands	r3, r2
 80092f0:	d100      	bne.n	80092f4 <tcp_process+0x11c>
 80092f2:	e0b7      	b.n	8009464 <tcp_process+0x28c>
        && ackno == ntohl(pcb->unacked->tcphdr->seqno) + 1) {
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092f8:	68db      	ldr	r3, [r3, #12]
 80092fa:	791a      	ldrb	r2, [r3, #4]
 80092fc:	7959      	ldrb	r1, [r3, #5]
 80092fe:	0209      	lsls	r1, r1, #8
 8009300:	430a      	orrs	r2, r1
 8009302:	7999      	ldrb	r1, [r3, #6]
 8009304:	0409      	lsls	r1, r1, #16
 8009306:	430a      	orrs	r2, r1
 8009308:	79db      	ldrb	r3, [r3, #7]
 800930a:	061b      	lsls	r3, r3, #24
 800930c:	4313      	orrs	r3, r2
 800930e:	0018      	movs	r0, r3
 8009310:	f7fc fd37 	bl	8005d82 <lwip_ntohl>
 8009314:	0003      	movs	r3, r0
 8009316:	1c5a      	adds	r2, r3, #1
 8009318:	4b88      	ldr	r3, [pc, #544]	; (800953c <tcp_process+0x364>)
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	429a      	cmp	r2, r3
 800931e:	d000      	beq.n	8009322 <tcp_process+0x14a>
 8009320:	e0a0      	b.n	8009464 <tcp_process+0x28c>
      pcb->snd_buf++;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2266      	movs	r2, #102	; 0x66
 8009326:	5a9b      	ldrh	r3, [r3, r2]
 8009328:	3301      	adds	r3, #1
 800932a:	b299      	uxth	r1, r3
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2266      	movs	r2, #102	; 0x66
 8009330:	5299      	strh	r1, [r3, r2]
      pcb->rcv_nxt = seqno + 1;
 8009332:	4b83      	ldr	r3, [pc, #524]	; (8009540 <tcp_process+0x368>)
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	1c5a      	adds	r2, r3, #1
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	629a      	str	r2, [r3, #40]	; 0x28
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	631a      	str	r2, [r3, #48]	; 0x30
      pcb->lastack = ackno;
 8009344:	4b7d      	ldr	r3, [pc, #500]	; (800953c <tcp_process+0x364>)
 8009346:	681a      	ldr	r2, [r3, #0]
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	649a      	str	r2, [r3, #72]	; 0x48
      pcb->snd_wnd = tcphdr->wnd;
 800934c:	4b80      	ldr	r3, [pc, #512]	; (8009550 <tcp_process+0x378>)
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	7b9a      	ldrb	r2, [r3, #14]
 8009352:	7bdb      	ldrb	r3, [r3, #15]
 8009354:	021b      	lsls	r3, r3, #8
 8009356:	4313      	orrs	r3, r2
 8009358:	b299      	uxth	r1, r3
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	2260      	movs	r2, #96	; 0x60
 800935e:	5299      	strh	r1, [r3, r2]
      pcb->snd_wnd_max = tcphdr->wnd;
 8009360:	4b7b      	ldr	r3, [pc, #492]	; (8009550 <tcp_process+0x378>)
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	7b9a      	ldrb	r2, [r3, #14]
 8009366:	7bdb      	ldrb	r3, [r3, #15]
 8009368:	021b      	lsls	r3, r3, #8
 800936a:	4313      	orrs	r3, r2
 800936c:	b299      	uxth	r1, r3
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2262      	movs	r2, #98	; 0x62
 8009372:	5299      	strh	r1, [r3, r2]
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8009374:	4b72      	ldr	r3, [pc, #456]	; (8009540 <tcp_process+0x368>)
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	1e5a      	subs	r2, r3, #1
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->state = ESTABLISHED;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	2204      	movs	r2, #4
 8009382:	761a      	strb	r2, [r3, #24]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &(pcb->remote_ip));
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	3304      	adds	r3, #4
 800938c:	0019      	movs	r1, r3
 800938e:	0010      	movs	r0, r2
 8009390:	f7ff f936 	bl	8008600 <tcp_eff_send_mss>
 8009394:	0003      	movs	r3, r0
 8009396:	001a      	movs	r2, r3
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	86da      	strh	r2, [r3, #54]	; 0x36
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      /* Set ssthresh again after changing pcb->mss (already set in tcp_connect
       * but for the default value of pcb->mss) */
      pcb->ssthresh = pcb->mss * 10;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80093a0:	1c1a      	adds	r2, r3, #0
 80093a2:	0092      	lsls	r2, r2, #2
 80093a4:	18d3      	adds	r3, r2, r3
 80093a6:	18db      	adds	r3, r3, r3
 80093a8:	b299      	uxth	r1, r3
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	224e      	movs	r2, #78	; 0x4e
 80093ae:	5299      	strh	r1, [r3, r2]

      pcb->cwnd = ((pcb->cwnd == 1) ? (pcb->mss * 2) : pcb->mss);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	224c      	movs	r2, #76	; 0x4c
 80093b4:	5a9b      	ldrh	r3, [r3, r2]
 80093b6:	2b01      	cmp	r3, #1
 80093b8:	d104      	bne.n	80093c4 <tcp_process+0x1ec>
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80093be:	18db      	adds	r3, r3, r3
 80093c0:	b29b      	uxth	r3, r3
 80093c2:	e001      	b.n	80093c8 <tcp_process+0x1f0>
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80093c8:	687a      	ldr	r2, [r7, #4]
 80093ca:	214c      	movs	r1, #76	; 0x4c
 80093cc:	5253      	strh	r3, [r2, r1]
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
      --pcb->snd_queuelen;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	2268      	movs	r2, #104	; 0x68
 80093d2:	5a9b      	ldrh	r3, [r3, r2]
 80093d4:	3b01      	subs	r3, #1
 80093d6:	b299      	uxth	r1, r3
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2268      	movs	r2, #104	; 0x68
 80093dc:	5299      	strh	r1, [r3, r2]
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"U16_F"\n", (u16_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093e2:	60bb      	str	r3, [r7, #8]
      pcb->unacked = rseg->next;
 80093e4:	68bb      	ldr	r3, [r7, #8]
 80093e6:	681a      	ldr	r2, [r3, #0]
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	671a      	str	r2, [r3, #112]	; 0x70
      tcp_seg_free(rseg);
 80093ec:	68bb      	ldr	r3, [r7, #8]
 80093ee:	0018      	movs	r0, r3
 80093f0:	f7fe fe6f 	bl	80080d2 <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if(pcb->unacked == NULL)
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d104      	bne.n	8009406 <tcp_process+0x22e>
        pcb->rtime = -1;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2201      	movs	r2, #1
 8009400:	4252      	negs	r2, r2
 8009402:	869a      	strh	r2, [r3, #52]	; 0x34
 8009404:	e006      	b.n	8009414 <tcp_process+0x23c>
      else {
        pcb->rtime = 0;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	2200      	movs	r2, #0
 800940a:	869a      	strh	r2, [r3, #52]	; 0x34
        pcb->nrtx = 0;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2246      	movs	r2, #70	; 0x46
 8009410:	2100      	movs	r1, #0
 8009412:	5499      	strb	r1, [r3, r2]
      }

      /* Call the user specified function to call when sucessfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2284      	movs	r2, #132	; 0x84
 8009418:	589b      	ldr	r3, [r3, r2]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d00d      	beq.n	800943a <tcp_process+0x262>
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	2284      	movs	r2, #132	; 0x84
 8009422:	589d      	ldr	r5, [r3, r2]
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	691b      	ldr	r3, [r3, #16]
 8009428:	220e      	movs	r2, #14
 800942a:	18bc      	adds	r4, r7, r2
 800942c:	6879      	ldr	r1, [r7, #4]
 800942e:	2200      	movs	r2, #0
 8009430:	0018      	movs	r0, r3
 8009432:	47a8      	blx	r5
 8009434:	0003      	movs	r3, r0
 8009436:	7023      	strb	r3, [r4, #0]
 8009438:	e003      	b.n	8009442 <tcp_process+0x26a>
 800943a:	230e      	movs	r3, #14
 800943c:	18fb      	adds	r3, r7, r3
 800943e:	2200      	movs	r2, #0
 8009440:	701a      	strb	r2, [r3, #0]
      if (err == ERR_ABRT) {
 8009442:	230e      	movs	r3, #14
 8009444:	18fb      	adds	r3, r7, r3
 8009446:	781b      	ldrb	r3, [r3, #0]
 8009448:	b25b      	sxtb	r3, r3
 800944a:	330a      	adds	r3, #10
 800944c:	d102      	bne.n	8009454 <tcp_process+0x27c>
        return ERR_ABRT;
 800944e:	230a      	movs	r3, #10
 8009450:	425b      	negs	r3, r3
 8009452:	e240      	b.n	80098d6 <tcp_process+0x6fe>
      }
      tcp_ack_now(pcb);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	7f9b      	ldrb	r3, [r3, #30]
 8009458:	2202      	movs	r2, #2
 800945a:	4313      	orrs	r3, r2
 800945c:	b2da      	uxtb	r2, r3
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	779a      	strb	r2, [r3, #30]
    else if (flags & TCP_ACK) {
      /* send a RST to bring the other side in a non-synchronized state. */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
        tcphdr->dest, tcphdr->src);
    }
    break;
 8009462:	e22a      	b.n	80098ba <tcp_process+0x6e2>
    else if (flags & TCP_ACK) {
 8009464:	4b34      	ldr	r3, [pc, #208]	; (8009538 <tcp_process+0x360>)
 8009466:	781b      	ldrb	r3, [r3, #0]
 8009468:	001a      	movs	r2, r3
 800946a:	2310      	movs	r3, #16
 800946c:	4013      	ands	r3, r2
 800946e:	d100      	bne.n	8009472 <tcp_process+0x29a>
 8009470:	e223      	b.n	80098ba <tcp_process+0x6e2>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
 8009472:	4b32      	ldr	r3, [pc, #200]	; (800953c <tcp_process+0x364>)
 8009474:	6818      	ldr	r0, [r3, #0]
 8009476:	4b37      	ldr	r3, [pc, #220]	; (8009554 <tcp_process+0x37c>)
 8009478:	881b      	ldrh	r3, [r3, #0]
 800947a:	001a      	movs	r2, r3
 800947c:	4b30      	ldr	r3, [pc, #192]	; (8009540 <tcp_process+0x368>)
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	18d4      	adds	r4, r2, r3
        tcphdr->dest, tcphdr->src);
 8009482:	4b33      	ldr	r3, [pc, #204]	; (8009550 <tcp_process+0x378>)
 8009484:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
 8009486:	789a      	ldrb	r2, [r3, #2]
 8009488:	78db      	ldrb	r3, [r3, #3]
 800948a:	021b      	lsls	r3, r3, #8
 800948c:	4313      	orrs	r3, r2
 800948e:	b29a      	uxth	r2, r3
        tcphdr->dest, tcphdr->src);
 8009490:	4b2f      	ldr	r3, [pc, #188]	; (8009550 <tcp_process+0x378>)
 8009492:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
 8009494:	7819      	ldrb	r1, [r3, #0]
 8009496:	785b      	ldrb	r3, [r3, #1]
 8009498:	021b      	lsls	r3, r3, #8
 800949a:	430b      	orrs	r3, r1
 800949c:	b29b      	uxth	r3, r3
 800949e:	4d2e      	ldr	r5, [pc, #184]	; (8009558 <tcp_process+0x380>)
 80094a0:	492e      	ldr	r1, [pc, #184]	; (800955c <tcp_process+0x384>)
 80094a2:	9301      	str	r3, [sp, #4]
 80094a4:	9200      	str	r2, [sp, #0]
 80094a6:	002b      	movs	r3, r5
 80094a8:	000a      	movs	r2, r1
 80094aa:	0021      	movs	r1, r4
 80094ac:	f002 fe8a 	bl	800c1c4 <tcp_rst>
    break;
 80094b0:	e203      	b.n	80098ba <tcp_process+0x6e2>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
 80094b2:	4b21      	ldr	r3, [pc, #132]	; (8009538 <tcp_process+0x360>)
 80094b4:	781b      	ldrb	r3, [r3, #0]
 80094b6:	001a      	movs	r2, r3
 80094b8:	2310      	movs	r3, #16
 80094ba:	4013      	ands	r3, r2
 80094bc:	d100      	bne.n	80094c0 <tcp_process+0x2e8>
 80094be:	e0a6      	b.n	800960e <tcp_process+0x436>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 80094c0:	4b1e      	ldr	r3, [pc, #120]	; (800953c <tcp_process+0x364>)
 80094c2:	681a      	ldr	r2, [r3, #0]
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80094c8:	1ad3      	subs	r3, r2, r3
 80094ca:	3b01      	subs	r3, #1
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	da00      	bge.n	80094d2 <tcp_process+0x2fa>
 80094d0:	e07d      	b.n	80095ce <tcp_process+0x3f6>
 80094d2:	4b1a      	ldr	r3, [pc, #104]	; (800953c <tcp_process+0x364>)
 80094d4:	681a      	ldr	r2, [r3, #0]
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094da:	1ad3      	subs	r3, r2, r3
 80094dc:	2b00      	cmp	r3, #0
 80094de:	dd00      	ble.n	80094e2 <tcp_process+0x30a>
 80094e0:	e075      	b.n	80095ce <tcp_process+0x3f6>
        u16_t old_cwnd;
        pcb->state = ESTABLISHED;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	2204      	movs	r2, #4
 80094e6:	761a      	strb	r2, [r3, #24]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->accept != NULL", pcb->accept != NULL);
#endif
        /* Call the accept function. */
        TCP_EVENT_ACCEPT(pcb, ERR_OK, err);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	695b      	ldr	r3, [r3, #20]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d00c      	beq.n	800950a <tcp_process+0x332>
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	695d      	ldr	r5, [r3, #20]
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	691b      	ldr	r3, [r3, #16]
 80094f8:	220e      	movs	r2, #14
 80094fa:	18bc      	adds	r4, r7, r2
 80094fc:	6879      	ldr	r1, [r7, #4]
 80094fe:	2200      	movs	r2, #0
 8009500:	0018      	movs	r0, r3
 8009502:	47a8      	blx	r5
 8009504:	0003      	movs	r3, r0
 8009506:	7023      	strb	r3, [r4, #0]
 8009508:	e003      	b.n	8009512 <tcp_process+0x33a>
 800950a:	230e      	movs	r3, #14
 800950c:	18fb      	adds	r3, r7, r3
 800950e:	22f2      	movs	r2, #242	; 0xf2
 8009510:	701a      	strb	r2, [r3, #0]
        if (err != ERR_OK) {
 8009512:	230e      	movs	r3, #14
 8009514:	18fb      	adds	r3, r7, r3
 8009516:	781b      	ldrb	r3, [r3, #0]
 8009518:	b25b      	sxtb	r3, r3
 800951a:	2b00      	cmp	r3, #0
 800951c:	d020      	beq.n	8009560 <tcp_process+0x388>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
 800951e:	230e      	movs	r3, #14
 8009520:	18fb      	adds	r3, r7, r3
 8009522:	781b      	ldrb	r3, [r3, #0]
 8009524:	b25b      	sxtb	r3, r3
 8009526:	330a      	adds	r3, #10
 8009528:	d003      	beq.n	8009532 <tcp_process+0x35a>
            tcp_abort(pcb);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	0018      	movs	r0, r3
 800952e:	f7fe f89d 	bl	800766c <tcp_abort>
          }
          return ERR_ABRT;
 8009532:	230a      	movs	r3, #10
 8009534:	425b      	negs	r3, r3
 8009536:	e1ce      	b.n	80098d6 <tcp_process+0x6fe>
 8009538:	20002724 	.word	0x20002724
 800953c:	20002720 	.word	0x20002720
 8009540:	2000271c 	.word	0x2000271c
 8009544:	20002728 	.word	0x20002728
 8009548:	2000352c 	.word	0x2000352c
 800954c:	0801ca20 	.word	0x0801ca20
 8009550:	20002714 	.word	0x20002714
 8009554:	20002726 	.word	0x20002726
 8009558:	20003548 	.word	0x20003548
 800955c:	20003550 	.word	0x20003550
        }
        old_cwnd = pcb->cwnd;
 8009560:	230c      	movs	r3, #12
 8009562:	18fb      	adds	r3, r7, r3
 8009564:	687a      	ldr	r2, [r7, #4]
 8009566:	214c      	movs	r1, #76	; 0x4c
 8009568:	5a52      	ldrh	r2, [r2, r1]
 800956a:	801a      	strh	r2, [r3, #0]
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	0018      	movs	r0, r3
 8009570:	f000 fa7c 	bl	8009a6c <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (pcb->acked != 0) {
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2264      	movs	r2, #100	; 0x64
 8009578:	5a9b      	ldrh	r3, [r3, r2]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d007      	beq.n	800958e <tcp_process+0x3b6>
          pcb->acked--;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	2264      	movs	r2, #100	; 0x64
 8009582:	5a9b      	ldrh	r3, [r3, r2]
 8009584:	3b01      	subs	r3, #1
 8009586:	b299      	uxth	r1, r3
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2264      	movs	r2, #100	; 0x64
 800958c:	5299      	strh	r1, [r3, r2]
        }

        pcb->cwnd = ((old_cwnd == 1) ? (pcb->mss * 2) : pcb->mss);
 800958e:	230c      	movs	r3, #12
 8009590:	18fb      	adds	r3, r7, r3
 8009592:	881b      	ldrh	r3, [r3, #0]
 8009594:	2b01      	cmp	r3, #1
 8009596:	d104      	bne.n	80095a2 <tcp_process+0x3ca>
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800959c:	18db      	adds	r3, r3, r3
 800959e:	b29b      	uxth	r3, r3
 80095a0:	e001      	b.n	80095a6 <tcp_process+0x3ce>
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80095a6:	687a      	ldr	r2, [r7, #4]
 80095a8:	214c      	movs	r1, #76	; 0x4c
 80095aa:	5253      	strh	r3, [r2, r1]

        if (recv_flags & TF_GOT_FIN) {
 80095ac:	4bcc      	ldr	r3, [pc, #816]	; (80098e0 <tcp_process+0x708>)
 80095ae:	781b      	ldrb	r3, [r3, #0]
 80095b0:	001a      	movs	r2, r3
 80095b2:	2320      	movs	r3, #32
 80095b4:	4013      	ands	r3, r2
 80095b6:	d03e      	beq.n	8009636 <tcp_process+0x45e>
          tcp_ack_now(pcb);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	7f9b      	ldrb	r3, [r3, #30]
 80095bc:	2202      	movs	r2, #2
 80095be:	4313      	orrs	r3, r2
 80095c0:	b2da      	uxtb	r2, r3
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	779a      	strb	r2, [r3, #30]
          pcb->state = CLOSE_WAIT;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2207      	movs	r2, #7
 80095ca:	761a      	strb	r2, [r3, #24]
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 80095cc:	e033      	b.n	8009636 <tcp_process+0x45e>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
 80095ce:	4bc5      	ldr	r3, [pc, #788]	; (80098e4 <tcp_process+0x70c>)
 80095d0:	6818      	ldr	r0, [r3, #0]
 80095d2:	4bc5      	ldr	r3, [pc, #788]	; (80098e8 <tcp_process+0x710>)
 80095d4:	881b      	ldrh	r3, [r3, #0]
 80095d6:	001a      	movs	r2, r3
 80095d8:	4bc4      	ldr	r3, [pc, #784]	; (80098ec <tcp_process+0x714>)
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	18d4      	adds	r4, r2, r3
                tcphdr->dest, tcphdr->src);
 80095de:	4bc4      	ldr	r3, [pc, #784]	; (80098f0 <tcp_process+0x718>)
 80095e0:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
 80095e2:	789a      	ldrb	r2, [r3, #2]
 80095e4:	78db      	ldrb	r3, [r3, #3]
 80095e6:	021b      	lsls	r3, r3, #8
 80095e8:	4313      	orrs	r3, r2
 80095ea:	b29a      	uxth	r2, r3
                tcphdr->dest, tcphdr->src);
 80095ec:	4bc0      	ldr	r3, [pc, #768]	; (80098f0 <tcp_process+0x718>)
 80095ee:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
 80095f0:	7819      	ldrb	r1, [r3, #0]
 80095f2:	785b      	ldrb	r3, [r3, #1]
 80095f4:	021b      	lsls	r3, r3, #8
 80095f6:	430b      	orrs	r3, r1
 80095f8:	b29b      	uxth	r3, r3
 80095fa:	4dbe      	ldr	r5, [pc, #760]	; (80098f4 <tcp_process+0x71c>)
 80095fc:	49be      	ldr	r1, [pc, #760]	; (80098f8 <tcp_process+0x720>)
 80095fe:	9301      	str	r3, [sp, #4]
 8009600:	9200      	str	r2, [sp, #0]
 8009602:	002b      	movs	r3, r5
 8009604:	000a      	movs	r2, r1
 8009606:	0021      	movs	r1, r4
 8009608:	f002 fddc 	bl	800c1c4 <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
 800960c:	e157      	b.n	80098be <tcp_process+0x6e6>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800960e:	4bbb      	ldr	r3, [pc, #748]	; (80098fc <tcp_process+0x724>)
 8009610:	781b      	ldrb	r3, [r3, #0]
 8009612:	001a      	movs	r2, r3
 8009614:	2302      	movs	r3, #2
 8009616:	4013      	ands	r3, r2
 8009618:	d100      	bne.n	800961c <tcp_process+0x444>
 800961a:	e150      	b.n	80098be <tcp_process+0x6e6>
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009620:	1e5a      	subs	r2, r3, #1
 8009622:	4bb2      	ldr	r3, [pc, #712]	; (80098ec <tcp_process+0x714>)
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	429a      	cmp	r2, r3
 8009628:	d000      	beq.n	800962c <tcp_process+0x454>
 800962a:	e148      	b.n	80098be <tcp_process+0x6e6>
      tcp_rexmit(pcb);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	0018      	movs	r0, r3
 8009630:	f002 ff1e 	bl	800c470 <tcp_rexmit>
    break;
 8009634:	e143      	b.n	80098be <tcp_process+0x6e6>
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 8009636:	46c0      	nop			; (mov r8, r8)
    break;
 8009638:	e141      	b.n	80098be <tcp_process+0x6e6>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	0018      	movs	r0, r3
 800963e:	f000 fa15 	bl	8009a6c <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 8009642:	4ba7      	ldr	r3, [pc, #668]	; (80098e0 <tcp_process+0x708>)
 8009644:	781b      	ldrb	r3, [r3, #0]
 8009646:	001a      	movs	r2, r3
 8009648:	2320      	movs	r3, #32
 800964a:	4013      	ands	r3, r2
 800964c:	d100      	bne.n	8009650 <tcp_process+0x478>
 800964e:	e138      	b.n	80098c2 <tcp_process+0x6ea>
      tcp_ack_now(pcb);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	7f9b      	ldrb	r3, [r3, #30]
 8009654:	2202      	movs	r2, #2
 8009656:	4313      	orrs	r3, r2
 8009658:	b2da      	uxtb	r2, r3
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	779a      	strb	r2, [r3, #30]
      pcb->state = CLOSE_WAIT;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2207      	movs	r2, #7
 8009662:	761a      	strb	r2, [r3, #24]
    }
    break;
 8009664:	e12d      	b.n	80098c2 <tcp_process+0x6ea>
  case FIN_WAIT_1:
    tcp_receive(pcb);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	0018      	movs	r0, r3
 800966a:	f000 f9ff 	bl	8009a6c <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 800966e:	4b9c      	ldr	r3, [pc, #624]	; (80098e0 <tcp_process+0x708>)
 8009670:	781b      	ldrb	r3, [r3, #0]
 8009672:	001a      	movs	r2, r3
 8009674:	2320      	movs	r3, #32
 8009676:	4013      	ands	r3, r2
 8009678:	d059      	beq.n	800972e <tcp_process+0x556>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt)) {
 800967a:	4ba0      	ldr	r3, [pc, #640]	; (80098fc <tcp_process+0x724>)
 800967c:	781b      	ldrb	r3, [r3, #0]
 800967e:	001a      	movs	r2, r3
 8009680:	2310      	movs	r3, #16
 8009682:	4013      	ands	r3, r2
 8009684:	d048      	beq.n	8009718 <tcp_process+0x540>
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800968a:	4b96      	ldr	r3, [pc, #600]	; (80098e4 <tcp_process+0x70c>)
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	429a      	cmp	r2, r3
 8009690:	d142      	bne.n	8009718 <tcp_process+0x540>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	7f9b      	ldrb	r3, [r3, #30]
 8009696:	2202      	movs	r2, #2
 8009698:	4313      	orrs	r3, r2
 800969a:	b2da      	uxtb	r2, r3
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	779a      	strb	r2, [r3, #30]
        tcp_pcb_purge(pcb);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	0018      	movs	r0, r3
 80096a4:	f7fe ff05 	bl	80084b2 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80096a8:	4b95      	ldr	r3, [pc, #596]	; (8009900 <tcp_process+0x728>)
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	687a      	ldr	r2, [r7, #4]
 80096ae:	429a      	cmp	r2, r3
 80096b0:	d105      	bne.n	80096be <tcp_process+0x4e6>
 80096b2:	4b93      	ldr	r3, [pc, #588]	; (8009900 <tcp_process+0x728>)
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	68da      	ldr	r2, [r3, #12]
 80096b8:	4b91      	ldr	r3, [pc, #580]	; (8009900 <tcp_process+0x728>)
 80096ba:	601a      	str	r2, [r3, #0]
 80096bc:	e019      	b.n	80096f2 <tcp_process+0x51a>
 80096be:	4b90      	ldr	r3, [pc, #576]	; (8009900 <tcp_process+0x728>)
 80096c0:	681a      	ldr	r2, [r3, #0]
 80096c2:	4b90      	ldr	r3, [pc, #576]	; (8009904 <tcp_process+0x72c>)
 80096c4:	601a      	str	r2, [r3, #0]
 80096c6:	e010      	b.n	80096ea <tcp_process+0x512>
 80096c8:	4b8e      	ldr	r3, [pc, #568]	; (8009904 <tcp_process+0x72c>)
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	68db      	ldr	r3, [r3, #12]
 80096ce:	687a      	ldr	r2, [r7, #4]
 80096d0:	429a      	cmp	r2, r3
 80096d2:	d105      	bne.n	80096e0 <tcp_process+0x508>
 80096d4:	4b8b      	ldr	r3, [pc, #556]	; (8009904 <tcp_process+0x72c>)
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	687a      	ldr	r2, [r7, #4]
 80096da:	68d2      	ldr	r2, [r2, #12]
 80096dc:	60da      	str	r2, [r3, #12]
 80096de:	e008      	b.n	80096f2 <tcp_process+0x51a>
 80096e0:	4b88      	ldr	r3, [pc, #544]	; (8009904 <tcp_process+0x72c>)
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	68da      	ldr	r2, [r3, #12]
 80096e6:	4b87      	ldr	r3, [pc, #540]	; (8009904 <tcp_process+0x72c>)
 80096e8:	601a      	str	r2, [r3, #0]
 80096ea:	4b86      	ldr	r3, [pc, #536]	; (8009904 <tcp_process+0x72c>)
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d1ea      	bne.n	80096c8 <tcp_process+0x4f0>
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2200      	movs	r2, #0
 80096f6:	60da      	str	r2, [r3, #12]
 80096f8:	4b83      	ldr	r3, [pc, #524]	; (8009908 <tcp_process+0x730>)
 80096fa:	2201      	movs	r2, #1
 80096fc:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	220a      	movs	r2, #10
 8009702:	761a      	strb	r2, [r3, #24]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8009704:	4b81      	ldr	r3, [pc, #516]	; (800990c <tcp_process+0x734>)
 8009706:	681a      	ldr	r2, [r3, #0]
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	60da      	str	r2, [r3, #12]
 800970c:	4b7f      	ldr	r3, [pc, #508]	; (800990c <tcp_process+0x734>)
 800970e:	687a      	ldr	r2, [r7, #4]
 8009710:	601a      	str	r2, [r3, #0]
 8009712:	f003 f8ab 	bl	800c86c <tcp_timer_needed>
        pcb->state = CLOSING;
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt)) {
      pcb->state = FIN_WAIT_2;
    }
    break;
 8009716:	e0d6      	b.n	80098c6 <tcp_process+0x6ee>
        tcp_ack_now(pcb);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	7f9b      	ldrb	r3, [r3, #30]
 800971c:	2202      	movs	r2, #2
 800971e:	4313      	orrs	r3, r2
 8009720:	b2da      	uxtb	r2, r3
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	779a      	strb	r2, [r3, #30]
        pcb->state = CLOSING;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	2208      	movs	r2, #8
 800972a:	761a      	strb	r2, [r3, #24]
    break;
 800972c:	e0cb      	b.n	80098c6 <tcp_process+0x6ee>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt)) {
 800972e:	4b73      	ldr	r3, [pc, #460]	; (80098fc <tcp_process+0x724>)
 8009730:	781b      	ldrb	r3, [r3, #0]
 8009732:	001a      	movs	r2, r3
 8009734:	2310      	movs	r3, #16
 8009736:	4013      	ands	r3, r2
 8009738:	d100      	bne.n	800973c <tcp_process+0x564>
 800973a:	e0c4      	b.n	80098c6 <tcp_process+0x6ee>
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009740:	4b68      	ldr	r3, [pc, #416]	; (80098e4 <tcp_process+0x70c>)
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	429a      	cmp	r2, r3
 8009746:	d000      	beq.n	800974a <tcp_process+0x572>
 8009748:	e0bd      	b.n	80098c6 <tcp_process+0x6ee>
      pcb->state = FIN_WAIT_2;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	2206      	movs	r2, #6
 800974e:	761a      	strb	r2, [r3, #24]
    break;
 8009750:	e0b9      	b.n	80098c6 <tcp_process+0x6ee>
  case FIN_WAIT_2:
    tcp_receive(pcb);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	0018      	movs	r0, r3
 8009756:	f000 f989 	bl	8009a6c <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 800975a:	4b61      	ldr	r3, [pc, #388]	; (80098e0 <tcp_process+0x708>)
 800975c:	781b      	ldrb	r3, [r3, #0]
 800975e:	001a      	movs	r2, r3
 8009760:	2320      	movs	r3, #32
 8009762:	4013      	ands	r3, r2
 8009764:	d100      	bne.n	8009768 <tcp_process+0x590>
 8009766:	e0b0      	b.n	80098ca <tcp_process+0x6f2>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	7f9b      	ldrb	r3, [r3, #30]
 800976c:	2202      	movs	r2, #2
 800976e:	4313      	orrs	r3, r2
 8009770:	b2da      	uxtb	r2, r3
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	779a      	strb	r2, [r3, #30]
      tcp_pcb_purge(pcb);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	0018      	movs	r0, r3
 800977a:	f7fe fe9a 	bl	80084b2 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800977e:	4b60      	ldr	r3, [pc, #384]	; (8009900 <tcp_process+0x728>)
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	687a      	ldr	r2, [r7, #4]
 8009784:	429a      	cmp	r2, r3
 8009786:	d105      	bne.n	8009794 <tcp_process+0x5bc>
 8009788:	4b5d      	ldr	r3, [pc, #372]	; (8009900 <tcp_process+0x728>)
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	68da      	ldr	r2, [r3, #12]
 800978e:	4b5c      	ldr	r3, [pc, #368]	; (8009900 <tcp_process+0x728>)
 8009790:	601a      	str	r2, [r3, #0]
 8009792:	e019      	b.n	80097c8 <tcp_process+0x5f0>
 8009794:	4b5a      	ldr	r3, [pc, #360]	; (8009900 <tcp_process+0x728>)
 8009796:	681a      	ldr	r2, [r3, #0]
 8009798:	4b5a      	ldr	r3, [pc, #360]	; (8009904 <tcp_process+0x72c>)
 800979a:	601a      	str	r2, [r3, #0]
 800979c:	e010      	b.n	80097c0 <tcp_process+0x5e8>
 800979e:	4b59      	ldr	r3, [pc, #356]	; (8009904 <tcp_process+0x72c>)
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	68db      	ldr	r3, [r3, #12]
 80097a4:	687a      	ldr	r2, [r7, #4]
 80097a6:	429a      	cmp	r2, r3
 80097a8:	d105      	bne.n	80097b6 <tcp_process+0x5de>
 80097aa:	4b56      	ldr	r3, [pc, #344]	; (8009904 <tcp_process+0x72c>)
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	687a      	ldr	r2, [r7, #4]
 80097b0:	68d2      	ldr	r2, [r2, #12]
 80097b2:	60da      	str	r2, [r3, #12]
 80097b4:	e008      	b.n	80097c8 <tcp_process+0x5f0>
 80097b6:	4b53      	ldr	r3, [pc, #332]	; (8009904 <tcp_process+0x72c>)
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	68da      	ldr	r2, [r3, #12]
 80097bc:	4b51      	ldr	r3, [pc, #324]	; (8009904 <tcp_process+0x72c>)
 80097be:	601a      	str	r2, [r3, #0]
 80097c0:	4b50      	ldr	r3, [pc, #320]	; (8009904 <tcp_process+0x72c>)
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d1ea      	bne.n	800979e <tcp_process+0x5c6>
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2200      	movs	r2, #0
 80097cc:	60da      	str	r2, [r3, #12]
 80097ce:	4b4e      	ldr	r3, [pc, #312]	; (8009908 <tcp_process+0x730>)
 80097d0:	2201      	movs	r2, #1
 80097d2:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	220a      	movs	r2, #10
 80097d8:	761a      	strb	r2, [r3, #24]
      TCP_REG(&tcp_tw_pcbs, pcb);
 80097da:	4b4c      	ldr	r3, [pc, #304]	; (800990c <tcp_process+0x734>)
 80097dc:	681a      	ldr	r2, [r3, #0]
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	60da      	str	r2, [r3, #12]
 80097e2:	4b4a      	ldr	r3, [pc, #296]	; (800990c <tcp_process+0x734>)
 80097e4:	687a      	ldr	r2, [r7, #4]
 80097e6:	601a      	str	r2, [r3, #0]
 80097e8:	f003 f840 	bl	800c86c <tcp_timer_needed>
    }
    break;
 80097ec:	e06d      	b.n	80098ca <tcp_process+0x6f2>
  case CLOSING:
    tcp_receive(pcb);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	0018      	movs	r0, r3
 80097f2:	f000 f93b 	bl	8009a6c <tcp_receive>
    if (flags & TCP_ACK && ackno == pcb->snd_nxt) {
 80097f6:	4b41      	ldr	r3, [pc, #260]	; (80098fc <tcp_process+0x724>)
 80097f8:	781b      	ldrb	r3, [r3, #0]
 80097fa:	001a      	movs	r2, r3
 80097fc:	2310      	movs	r3, #16
 80097fe:	4013      	ands	r3, r2
 8009800:	d065      	beq.n	80098ce <tcp_process+0x6f6>
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009806:	4b37      	ldr	r3, [pc, #220]	; (80098e4 <tcp_process+0x70c>)
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	429a      	cmp	r2, r3
 800980c:	d15f      	bne.n	80098ce <tcp_process+0x6f6>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	0018      	movs	r0, r3
 8009812:	f7fe fe4e 	bl	80084b2 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8009816:	4b3a      	ldr	r3, [pc, #232]	; (8009900 <tcp_process+0x728>)
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	687a      	ldr	r2, [r7, #4]
 800981c:	429a      	cmp	r2, r3
 800981e:	d105      	bne.n	800982c <tcp_process+0x654>
 8009820:	4b37      	ldr	r3, [pc, #220]	; (8009900 <tcp_process+0x728>)
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	68da      	ldr	r2, [r3, #12]
 8009826:	4b36      	ldr	r3, [pc, #216]	; (8009900 <tcp_process+0x728>)
 8009828:	601a      	str	r2, [r3, #0]
 800982a:	e019      	b.n	8009860 <tcp_process+0x688>
 800982c:	4b34      	ldr	r3, [pc, #208]	; (8009900 <tcp_process+0x728>)
 800982e:	681a      	ldr	r2, [r3, #0]
 8009830:	4b34      	ldr	r3, [pc, #208]	; (8009904 <tcp_process+0x72c>)
 8009832:	601a      	str	r2, [r3, #0]
 8009834:	e010      	b.n	8009858 <tcp_process+0x680>
 8009836:	4b33      	ldr	r3, [pc, #204]	; (8009904 <tcp_process+0x72c>)
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	68db      	ldr	r3, [r3, #12]
 800983c:	687a      	ldr	r2, [r7, #4]
 800983e:	429a      	cmp	r2, r3
 8009840:	d105      	bne.n	800984e <tcp_process+0x676>
 8009842:	4b30      	ldr	r3, [pc, #192]	; (8009904 <tcp_process+0x72c>)
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	687a      	ldr	r2, [r7, #4]
 8009848:	68d2      	ldr	r2, [r2, #12]
 800984a:	60da      	str	r2, [r3, #12]
 800984c:	e008      	b.n	8009860 <tcp_process+0x688>
 800984e:	4b2d      	ldr	r3, [pc, #180]	; (8009904 <tcp_process+0x72c>)
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	68da      	ldr	r2, [r3, #12]
 8009854:	4b2b      	ldr	r3, [pc, #172]	; (8009904 <tcp_process+0x72c>)
 8009856:	601a      	str	r2, [r3, #0]
 8009858:	4b2a      	ldr	r3, [pc, #168]	; (8009904 <tcp_process+0x72c>)
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d1ea      	bne.n	8009836 <tcp_process+0x65e>
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2200      	movs	r2, #0
 8009864:	60da      	str	r2, [r3, #12]
 8009866:	4b28      	ldr	r3, [pc, #160]	; (8009908 <tcp_process+0x730>)
 8009868:	2201      	movs	r2, #1
 800986a:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	220a      	movs	r2, #10
 8009870:	761a      	strb	r2, [r3, #24]
      TCP_REG(&tcp_tw_pcbs, pcb);
 8009872:	4b26      	ldr	r3, [pc, #152]	; (800990c <tcp_process+0x734>)
 8009874:	681a      	ldr	r2, [r3, #0]
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	60da      	str	r2, [r3, #12]
 800987a:	4b24      	ldr	r3, [pc, #144]	; (800990c <tcp_process+0x734>)
 800987c:	687a      	ldr	r2, [r7, #4]
 800987e:	601a      	str	r2, [r3, #0]
 8009880:	f002 fff4 	bl	800c86c <tcp_timer_needed>
    }
    break;
 8009884:	e023      	b.n	80098ce <tcp_process+0x6f6>
  case LAST_ACK:
    tcp_receive(pcb);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	0018      	movs	r0, r3
 800988a:	f000 f8ef 	bl	8009a6c <tcp_receive>
    if (flags & TCP_ACK && ackno == pcb->snd_nxt) {
 800988e:	4b1b      	ldr	r3, [pc, #108]	; (80098fc <tcp_process+0x724>)
 8009890:	781b      	ldrb	r3, [r3, #0]
 8009892:	001a      	movs	r2, r3
 8009894:	2310      	movs	r3, #16
 8009896:	4013      	ands	r3, r2
 8009898:	d01b      	beq.n	80098d2 <tcp_process+0x6fa>
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800989e:	4b11      	ldr	r3, [pc, #68]	; (80098e4 <tcp_process+0x70c>)
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	429a      	cmp	r2, r3
 80098a4:	d115      	bne.n	80098d2 <tcp_process+0x6fa>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
 80098a6:	4b0e      	ldr	r3, [pc, #56]	; (80098e0 <tcp_process+0x708>)
 80098a8:	781b      	ldrb	r3, [r3, #0]
 80098aa:	2210      	movs	r2, #16
 80098ac:	4313      	orrs	r3, r2
 80098ae:	b2da      	uxtb	r2, r3
 80098b0:	4b0b      	ldr	r3, [pc, #44]	; (80098e0 <tcp_process+0x708>)
 80098b2:	701a      	strb	r2, [r3, #0]
    }
    break;
 80098b4:	e00d      	b.n	80098d2 <tcp_process+0x6fa>
  default:
    break;
 80098b6:	46c0      	nop			; (mov r8, r8)
 80098b8:	e00c      	b.n	80098d4 <tcp_process+0x6fc>
    break;
 80098ba:	46c0      	nop			; (mov r8, r8)
 80098bc:	e00a      	b.n	80098d4 <tcp_process+0x6fc>
    break;
 80098be:	46c0      	nop			; (mov r8, r8)
 80098c0:	e008      	b.n	80098d4 <tcp_process+0x6fc>
    break;
 80098c2:	46c0      	nop			; (mov r8, r8)
 80098c4:	e006      	b.n	80098d4 <tcp_process+0x6fc>
    break;
 80098c6:	46c0      	nop			; (mov r8, r8)
 80098c8:	e004      	b.n	80098d4 <tcp_process+0x6fc>
    break;
 80098ca:	46c0      	nop			; (mov r8, r8)
 80098cc:	e002      	b.n	80098d4 <tcp_process+0x6fc>
    break;
 80098ce:	46c0      	nop			; (mov r8, r8)
 80098d0:	e000      	b.n	80098d4 <tcp_process+0x6fc>
    break;
 80098d2:	46c0      	nop			; (mov r8, r8)
  }
  return ERR_OK;
 80098d4:	2300      	movs	r3, #0
}
 80098d6:	0018      	movs	r0, r3
 80098d8:	46bd      	mov	sp, r7
 80098da:	b004      	add	sp, #16
 80098dc:	bdb0      	pop	{r4, r5, r7, pc}
 80098de:	46c0      	nop			; (mov r8, r8)
 80098e0:	20002728 	.word	0x20002728
 80098e4:	20002720 	.word	0x20002720
 80098e8:	20002726 	.word	0x20002726
 80098ec:	2000271c 	.word	0x2000271c
 80098f0:	20002714 	.word	0x20002714
 80098f4:	20003548 	.word	0x20003548
 80098f8:	20003550 	.word	0x20003550
 80098fc:	20002724 	.word	0x20002724
 8009900:	20003528 	.word	0x20003528
 8009904:	20003534 	.word	0x20003534
 8009908:	20003524 	.word	0x20003524
 800990c:	2000353c 	.word	0x2000353c

08009910 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8009910:	b590      	push	{r4, r7, lr}
 8009912:	b085      	sub	sp, #20
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
 8009918:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	68db      	ldr	r3, [r3, #12]
 800991e:	7b1a      	ldrb	r2, [r3, #12]
 8009920:	7b5b      	ldrb	r3, [r3, #13]
 8009922:	021b      	lsls	r3, r3, #8
 8009924:	4313      	orrs	r3, r2
 8009926:	b29b      	uxth	r3, r3
 8009928:	0018      	movs	r0, r3
 800992a:	f7fc fa01 	bl	8005d30 <lwip_ntohs>
 800992e:	0003      	movs	r3, r0
 8009930:	001a      	movs	r2, r3
 8009932:	2301      	movs	r3, #1
 8009934:	4013      	ands	r3, r2
 8009936:	d041      	beq.n	80099bc <tcp_oos_insert_segment+0xac>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	0018      	movs	r0, r3
 800993c:	f7fe fbb4 	bl	80080a8 <tcp_segs_free>
    next = NULL;
 8009940:	2300      	movs	r3, #0
 8009942:	603b      	str	r3, [r7, #0]
 8009944:	e089      	b.n	8009a5a <tcp_oos_insert_segment+0x14a>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	68db      	ldr	r3, [r3, #12]
 800994a:	7b1a      	ldrb	r2, [r3, #12]
 800994c:	7b5b      	ldrb	r3, [r3, #13]
 800994e:	021b      	lsls	r3, r3, #8
 8009950:	4313      	orrs	r3, r2
 8009952:	b29b      	uxth	r3, r3
 8009954:	0018      	movs	r0, r3
 8009956:	f7fc f9eb 	bl	8005d30 <lwip_ntohs>
 800995a:	0003      	movs	r3, r0
 800995c:	001a      	movs	r2, r3
 800995e:	2301      	movs	r3, #1
 8009960:	4013      	ands	r3, r2
 8009962:	d022      	beq.n	80099aa <tcp_oos_insert_segment+0x9a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	68db      	ldr	r3, [r3, #12]
 8009968:	7b1a      	ldrb	r2, [r3, #12]
 800996a:	7b5b      	ldrb	r3, [r3, #13]
 800996c:	021b      	lsls	r3, r3, #8
 800996e:	4313      	orrs	r3, r2
 8009970:	b29c      	uxth	r4, r3
 8009972:	2001      	movs	r0, #1
 8009974:	f7fc f9c6 	bl	8005d04 <lwip_htons>
 8009978:	0003      	movs	r3, r0
 800997a:	001a      	movs	r2, r3
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	68db      	ldr	r3, [r3, #12]
 8009980:	4322      	orrs	r2, r4
 8009982:	b292      	uxth	r2, r2
 8009984:	21ff      	movs	r1, #255	; 0xff
 8009986:	4011      	ands	r1, r2
 8009988:	000c      	movs	r4, r1
 800998a:	7b19      	ldrb	r1, [r3, #12]
 800998c:	2000      	movs	r0, #0
 800998e:	4001      	ands	r1, r0
 8009990:	1c08      	adds	r0, r1, #0
 8009992:	1c21      	adds	r1, r4, #0
 8009994:	4301      	orrs	r1, r0
 8009996:	7319      	strb	r1, [r3, #12]
 8009998:	0a12      	lsrs	r2, r2, #8
 800999a:	b290      	uxth	r0, r2
 800999c:	7b5a      	ldrb	r2, [r3, #13]
 800999e:	2100      	movs	r1, #0
 80099a0:	400a      	ands	r2, r1
 80099a2:	1c11      	adds	r1, r2, #0
 80099a4:	1c02      	adds	r2, r0, #0
 80099a6:	430a      	orrs	r2, r1
 80099a8:	735a      	strb	r2, [r3, #13]
      }
      old_seg = next;
 80099aa:	683b      	ldr	r3, [r7, #0]
 80099ac:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80099ae:	683b      	ldr	r3, [r7, #0]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	0018      	movs	r0, r3
 80099b8:	f7fe fb8b 	bl	80080d2 <tcp_seg_free>
    while (next &&
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d017      	beq.n	80099f2 <tcp_oos_insert_segment+0xe2>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	891b      	ldrh	r3, [r3, #8]
 80099c6:	001a      	movs	r2, r3
 80099c8:	4b27      	ldr	r3, [pc, #156]	; (8009a68 <tcp_oos_insert_segment+0x158>)
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	18d2      	adds	r2, r2, r3
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	68db      	ldr	r3, [r3, #12]
 80099d2:	7919      	ldrb	r1, [r3, #4]
 80099d4:	7958      	ldrb	r0, [r3, #5]
 80099d6:	0200      	lsls	r0, r0, #8
 80099d8:	4301      	orrs	r1, r0
 80099da:	7998      	ldrb	r0, [r3, #6]
 80099dc:	0400      	lsls	r0, r0, #16
 80099de:	4301      	orrs	r1, r0
 80099e0:	79db      	ldrb	r3, [r3, #7]
 80099e2:	061b      	lsls	r3, r3, #24
 80099e4:	430b      	orrs	r3, r1
 80099e6:	0019      	movs	r1, r3
 80099e8:	683b      	ldr	r3, [r7, #0]
 80099ea:	891b      	ldrh	r3, [r3, #8]
 80099ec:	18cb      	adds	r3, r1, r3
 80099ee:	1ad3      	subs	r3, r2, r3
    while (next &&
 80099f0:	d5a9      	bpl.n	8009946 <tcp_oos_insert_segment+0x36>
    }
    if (next &&
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d030      	beq.n	8009a5a <tcp_oos_insert_segment+0x14a>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	891b      	ldrh	r3, [r3, #8]
 80099fc:	001a      	movs	r2, r3
 80099fe:	4b1a      	ldr	r3, [pc, #104]	; (8009a68 <tcp_oos_insert_segment+0x158>)
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	18d2      	adds	r2, r2, r3
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	68db      	ldr	r3, [r3, #12]
 8009a08:	7919      	ldrb	r1, [r3, #4]
 8009a0a:	7958      	ldrb	r0, [r3, #5]
 8009a0c:	0200      	lsls	r0, r0, #8
 8009a0e:	4301      	orrs	r1, r0
 8009a10:	7998      	ldrb	r0, [r3, #6]
 8009a12:	0400      	lsls	r0, r0, #16
 8009a14:	4301      	orrs	r1, r0
 8009a16:	79db      	ldrb	r3, [r3, #7]
 8009a18:	061b      	lsls	r3, r3, #24
 8009a1a:	430b      	orrs	r3, r1
 8009a1c:	1ad3      	subs	r3, r2, r3
    if (next &&
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	dd1b      	ble.n	8009a5a <tcp_oos_insert_segment+0x14a>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	68db      	ldr	r3, [r3, #12]
 8009a26:	791a      	ldrb	r2, [r3, #4]
 8009a28:	7959      	ldrb	r1, [r3, #5]
 8009a2a:	0209      	lsls	r1, r1, #8
 8009a2c:	430a      	orrs	r2, r1
 8009a2e:	7999      	ldrb	r1, [r3, #6]
 8009a30:	0409      	lsls	r1, r1, #16
 8009a32:	430a      	orrs	r2, r1
 8009a34:	79db      	ldrb	r3, [r3, #7]
 8009a36:	061b      	lsls	r3, r3, #24
 8009a38:	4313      	orrs	r3, r2
 8009a3a:	b29a      	uxth	r2, r3
 8009a3c:	4b0a      	ldr	r3, [pc, #40]	; (8009a68 <tcp_oos_insert_segment+0x158>)
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	b29b      	uxth	r3, r3
 8009a42:	1ad3      	subs	r3, r2, r3
 8009a44:	b29a      	uxth	r2, r3
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	685a      	ldr	r2, [r3, #4]
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	891b      	ldrh	r3, [r3, #8]
 8009a52:	0019      	movs	r1, r3
 8009a54:	0010      	movs	r0, r2
 8009a56:	f7fd f8a4 	bl	8006ba2 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	683a      	ldr	r2, [r7, #0]
 8009a5e:	601a      	str	r2, [r3, #0]
}
 8009a60:	46c0      	nop			; (mov r8, r8)
 8009a62:	46bd      	mov	sp, r7
 8009a64:	b005      	add	sp, #20
 8009a66:	bd90      	pop	{r4, r7, pc}
 8009a68:	2000271c 	.word	0x2000271c

08009a6c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8009a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a6e:	b08d      	sub	sp, #52	; 0x34
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
 8009a74:	2300      	movs	r3, #0
 8009a76:	61bb      	str	r3, [r7, #24]
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);

  if (flags & TCP_ACK) {
 8009a78:	4bba      	ldr	r3, [pc, #744]	; (8009d64 <tcp_receive+0x2f8>)
 8009a7a:	781b      	ldrb	r3, [r3, #0]
 8009a7c:	001a      	movs	r2, r3
 8009a7e:	2310      	movs	r3, #16
 8009a80:	4013      	ands	r3, r2
 8009a82:	d100      	bne.n	8009a86 <tcp_receive+0x1a>
 8009a84:	e2ed      	b.n	800a062 <tcp_receive+0x5f6>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	2260      	movs	r2, #96	; 0x60
 8009a8a:	5a9b      	ldrh	r3, [r3, r2]
 8009a8c:	001a      	movs	r2, r3
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a92:	18d3      	adds	r3, r2, r3
 8009a94:	617b      	str	r3, [r7, #20]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009a9a:	4bb3      	ldr	r3, [pc, #716]	; (8009d68 <tcp_receive+0x2fc>)
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	1ad3      	subs	r3, r2, r3
 8009aa0:	d41d      	bmi.n	8009ade <tcp_receive+0x72>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009aa6:	4bb0      	ldr	r3, [pc, #704]	; (8009d68 <tcp_receive+0x2fc>)
 8009aa8:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8009aaa:	429a      	cmp	r2, r3
 8009aac:	d105      	bne.n	8009aba <tcp_receive+0x4e>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009ab2:	4bae      	ldr	r3, [pc, #696]	; (8009d6c <tcp_receive+0x300>)
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	1ad3      	subs	r3, r2, r3
 8009ab8:	d411      	bmi.n	8009ade <tcp_receive+0x72>
       (pcb->snd_wl2 == ackno && tcphdr->wnd > pcb->snd_wnd)) {
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009abe:	4bab      	ldr	r3, [pc, #684]	; (8009d6c <tcp_receive+0x300>)
 8009ac0:	681b      	ldr	r3, [r3, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009ac2:	429a      	cmp	r2, r3
 8009ac4:	d14f      	bne.n	8009b66 <tcp_receive+0xfa>
       (pcb->snd_wl2 == ackno && tcphdr->wnd > pcb->snd_wnd)) {
 8009ac6:	4baa      	ldr	r3, [pc, #680]	; (8009d70 <tcp_receive+0x304>)
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	7b9a      	ldrb	r2, [r3, #14]
 8009acc:	7bdb      	ldrb	r3, [r3, #15]
 8009ace:	021b      	lsls	r3, r3, #8
 8009ad0:	4313      	orrs	r3, r2
 8009ad2:	b29a      	uxth	r2, r3
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2160      	movs	r1, #96	; 0x60
 8009ad8:	5a5b      	ldrh	r3, [r3, r1]
 8009ada:	429a      	cmp	r2, r3
 8009adc:	d943      	bls.n	8009b66 <tcp_receive+0xfa>
      pcb->snd_wnd = tcphdr->wnd;
 8009ade:	4ba4      	ldr	r3, [pc, #656]	; (8009d70 <tcp_receive+0x304>)
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	7b9a      	ldrb	r2, [r3, #14]
 8009ae4:	7bdb      	ldrb	r3, [r3, #15]
 8009ae6:	021b      	lsls	r3, r3, #8
 8009ae8:	4313      	orrs	r3, r2
 8009aea:	b299      	uxth	r1, r3
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2260      	movs	r2, #96	; 0x60
 8009af0:	5299      	strh	r1, [r3, r2]
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < tcphdr->wnd) {
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	2262      	movs	r2, #98	; 0x62
 8009af6:	5a9a      	ldrh	r2, [r3, r2]
 8009af8:	4b9d      	ldr	r3, [pc, #628]	; (8009d70 <tcp_receive+0x304>)
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	7b99      	ldrb	r1, [r3, #14]
 8009afe:	7bdb      	ldrb	r3, [r3, #15]
 8009b00:	021b      	lsls	r3, r3, #8
 8009b02:	430b      	orrs	r3, r1
 8009b04:	b29b      	uxth	r3, r3
 8009b06:	429a      	cmp	r2, r3
 8009b08:	d209      	bcs.n	8009b1e <tcp_receive+0xb2>
        pcb->snd_wnd_max = tcphdr->wnd;
 8009b0a:	4b99      	ldr	r3, [pc, #612]	; (8009d70 <tcp_receive+0x304>)
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	7b9a      	ldrb	r2, [r3, #14]
 8009b10:	7bdb      	ldrb	r3, [r3, #15]
 8009b12:	021b      	lsls	r3, r3, #8
 8009b14:	4313      	orrs	r3, r2
 8009b16:	b299      	uxth	r1, r3
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2262      	movs	r2, #98	; 0x62
 8009b1c:	5299      	strh	r1, [r3, r2]
      }
      pcb->snd_wl1 = seqno;
 8009b1e:	4b92      	ldr	r3, [pc, #584]	; (8009d68 <tcp_receive+0x2fc>)
 8009b20:	681a      	ldr	r2, [r3, #0]
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8009b26:	4b91      	ldr	r3, [pc, #580]	; (8009d6c <tcp_receive+0x300>)
 8009b28:	681a      	ldr	r2, [r3, #0]
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	659a      	str	r2, [r3, #88]	; 0x58
      if (pcb->snd_wnd == 0) {
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	2260      	movs	r2, #96	; 0x60
 8009b32:	5a9b      	ldrh	r3, [r3, r2]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d10d      	bne.n	8009b54 <tcp_receive+0xe8>
        if (pcb->persist_backoff == 0) {
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2295      	movs	r2, #149	; 0x95
 8009b3c:	5c9b      	ldrb	r3, [r3, r2]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d111      	bne.n	8009b66 <tcp_receive+0xfa>
          /* start persist timer */
          pcb->persist_cnt = 0;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	2294      	movs	r2, #148	; 0x94
 8009b46:	2100      	movs	r1, #0
 8009b48:	5499      	strb	r1, [r3, r2]
          pcb->persist_backoff = 1;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	2295      	movs	r2, #149	; 0x95
 8009b4e:	2101      	movs	r1, #1
 8009b50:	5499      	strb	r1, [r3, r2]
 8009b52:	e008      	b.n	8009b66 <tcp_receive+0xfa>
        }
      } else if (pcb->persist_backoff > 0) {
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	2295      	movs	r2, #149	; 0x95
 8009b58:	5c9b      	ldrb	r3, [r3, r2]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d003      	beq.n	8009b66 <tcp_receive+0xfa>
        /* stop persist timer */
          pcb->persist_backoff = 0;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	2295      	movs	r2, #149	; 0x95
 8009b62:	2100      	movs	r1, #0
 8009b64:	5499      	strb	r1, [r3, r2]
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8009b66:	4b81      	ldr	r3, [pc, #516]	; (8009d6c <tcp_receive+0x300>)
 8009b68:	681a      	ldr	r2, [r3, #0]
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b6e:	1ad3      	subs	r3, r2, r3
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	dc58      	bgt.n	8009c26 <tcp_receive+0x1ba>
      pcb->acked = 0;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2264      	movs	r2, #100	; 0x64
 8009b78:	2100      	movs	r1, #0
 8009b7a:	5299      	strh	r1, [r3, r2]
      /* Clause 2 */
      if (tcplen == 0) {
 8009b7c:	4b7d      	ldr	r3, [pc, #500]	; (8009d74 <tcp_receive+0x308>)
 8009b7e:	881b      	ldrh	r3, [r3, #0]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d147      	bne.n	8009c14 <tcp_receive+0x1a8>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge){
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b88:	687a      	ldr	r2, [r7, #4]
 8009b8a:	2160      	movs	r1, #96	; 0x60
 8009b8c:	5a52      	ldrh	r2, [r2, r1]
 8009b8e:	189b      	adds	r3, r3, r2
 8009b90:	697a      	ldr	r2, [r7, #20]
 8009b92:	429a      	cmp	r2, r3
 8009b94:	d13e      	bne.n	8009c14 <tcp_receive+0x1a8>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	2234      	movs	r2, #52	; 0x34
 8009b9a:	5e9b      	ldrsh	r3, [r3, r2]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	db39      	blt.n	8009c14 <tcp_receive+0x1a8>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009ba4:	4b71      	ldr	r3, [pc, #452]	; (8009d6c <tcp_receive+0x300>)
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	429a      	cmp	r2, r3
 8009baa:	d133      	bne.n	8009c14 <tcp_receive+0x1a8>
              found_dupack = 1;
 8009bac:	2301      	movs	r3, #1
 8009bae:	61bb      	str	r3, [r7, #24]
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	2247      	movs	r2, #71	; 0x47
 8009bb4:	5c9b      	ldrb	r3, [r3, r2]
 8009bb6:	2bff      	cmp	r3, #255	; 0xff
 8009bb8:	d007      	beq.n	8009bca <tcp_receive+0x15e>
                ++pcb->dupacks;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	2247      	movs	r2, #71	; 0x47
 8009bbe:	5c9b      	ldrb	r3, [r3, r2]
 8009bc0:	3301      	adds	r3, #1
 8009bc2:	b2d9      	uxtb	r1, r3
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	2247      	movs	r2, #71	; 0x47
 8009bc8:	5499      	strb	r1, [r3, r2]
              }
              if (pcb->dupacks > 3) {
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	2247      	movs	r2, #71	; 0x47
 8009bce:	5c9b      	ldrb	r3, [r3, r2]
 8009bd0:	2b03      	cmp	r3, #3
 8009bd2:	d916      	bls.n	8009c02 <tcp_receive+0x196>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((u16_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	224c      	movs	r2, #76	; 0x4c
 8009bd8:	5a9a      	ldrh	r2, [r3, r2]
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009bde:	18d3      	adds	r3, r2, r3
 8009be0:	b29a      	uxth	r2, r3
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	214c      	movs	r1, #76	; 0x4c
 8009be6:	5a5b      	ldrh	r3, [r3, r1]
 8009be8:	429a      	cmp	r2, r3
 8009bea:	d913      	bls.n	8009c14 <tcp_receive+0x1a8>
                  pcb->cwnd += pcb->mss;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	224c      	movs	r2, #76	; 0x4c
 8009bf0:	5a9a      	ldrh	r2, [r3, r2]
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009bf6:	18d3      	adds	r3, r2, r3
 8009bf8:	b299      	uxth	r1, r3
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	224c      	movs	r2, #76	; 0x4c
 8009bfe:	5299      	strh	r1, [r3, r2]
 8009c00:	e008      	b.n	8009c14 <tcp_receive+0x1a8>
                }
              } else if (pcb->dupacks == 3) {
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	2247      	movs	r2, #71	; 0x47
 8009c06:	5c9b      	ldrb	r3, [r3, r2]
 8009c08:	2b03      	cmp	r3, #3
 8009c0a:	d103      	bne.n	8009c14 <tcp_receive+0x1a8>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	0018      	movs	r0, r3
 8009c10:	f002 fc8a 	bl	800c528 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8009c14:	69bb      	ldr	r3, [r7, #24]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d000      	beq.n	8009c1c <tcp_receive+0x1b0>
 8009c1a:	e184      	b.n	8009f26 <tcp_receive+0x4ba>
        pcb->dupacks = 0;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	2247      	movs	r2, #71	; 0x47
 8009c20:	2100      	movs	r1, #0
 8009c22:	5499      	strb	r1, [r3, r2]
 8009c24:	e17f      	b.n	8009f26 <tcp_receive+0x4ba>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)){
 8009c26:	4b51      	ldr	r3, [pc, #324]	; (8009d6c <tcp_receive+0x300>)
 8009c28:	681a      	ldr	r2, [r3, #0]
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c2e:	1ad3      	subs	r3, r2, r3
 8009c30:	3b01      	subs	r3, #1
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	da00      	bge.n	8009c38 <tcp_receive+0x1cc>
 8009c36:	e125      	b.n	8009e84 <tcp_receive+0x418>
 8009c38:	4b4c      	ldr	r3, [pc, #304]	; (8009d6c <tcp_receive+0x300>)
 8009c3a:	681a      	ldr	r2, [r3, #0]
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c40:	1ad3      	subs	r3, r2, r3
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	dd00      	ble.n	8009c48 <tcp_receive+0x1dc>
 8009c46:	e11d      	b.n	8009e84 <tcp_receive+0x418>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	7f9b      	ldrb	r3, [r3, #30]
 8009c4c:	001a      	movs	r2, r3
 8009c4e:	2304      	movs	r3, #4
 8009c50:	4013      	ands	r3, r2
 8009c52:	d00c      	beq.n	8009c6e <tcp_receive+0x202>
        pcb->flags &= ~TF_INFR;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	7f9b      	ldrb	r3, [r3, #30]
 8009c58:	2204      	movs	r2, #4
 8009c5a:	4393      	bics	r3, r2
 8009c5c:	b2da      	uxtb	r2, r3
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	779a      	strb	r2, [r3, #30]
        pcb->cwnd = pcb->ssthresh;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	224e      	movs	r2, #78	; 0x4e
 8009c66:	5a99      	ldrh	r1, [r3, r2]
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	224c      	movs	r2, #76	; 0x4c
 8009c6c:	5299      	strh	r1, [r3, r2]
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	2246      	movs	r2, #70	; 0x46
 8009c72:	2100      	movs	r1, #0
 8009c74:	5499      	strb	r1, [r3, r2]

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	2240      	movs	r2, #64	; 0x40
 8009c7a:	5e9b      	ldrsh	r3, [r3, r2]
 8009c7c:	10db      	asrs	r3, r3, #3
 8009c7e:	b21b      	sxth	r3, r3
 8009c80:	b29a      	uxth	r2, r3
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	2142      	movs	r1, #66	; 0x42
 8009c86:	5e5b      	ldrsh	r3, [r3, r1]
 8009c88:	b29b      	uxth	r3, r3
 8009c8a:	18d3      	adds	r3, r2, r3
 8009c8c:	b29b      	uxth	r3, r3
 8009c8e:	b219      	sxth	r1, r3
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2244      	movs	r2, #68	; 0x44
 8009c94:	5299      	strh	r1, [r3, r2]

      /* Update the send buffer space. Diff between the two can never exceed 64K? */
      pcb->acked = (u16_t)(ackno - pcb->lastack);
 8009c96:	4b35      	ldr	r3, [pc, #212]	; (8009d6c <tcp_receive+0x300>)
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	b29a      	uxth	r2, r3
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ca0:	b29b      	uxth	r3, r3
 8009ca2:	1ad3      	subs	r3, r2, r3
 8009ca4:	b299      	uxth	r1, r3
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	2264      	movs	r2, #100	; 0x64
 8009caa:	5299      	strh	r1, [r3, r2]

      pcb->snd_buf += pcb->acked;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	2266      	movs	r2, #102	; 0x66
 8009cb0:	5a9a      	ldrh	r2, [r3, r2]
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	2164      	movs	r1, #100	; 0x64
 8009cb6:	5a5b      	ldrh	r3, [r3, r1]
 8009cb8:	18d3      	adds	r3, r2, r3
 8009cba:	b299      	uxth	r1, r3
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	2266      	movs	r2, #102	; 0x66
 8009cc0:	5299      	strh	r1, [r3, r2]

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	2247      	movs	r2, #71	; 0x47
 8009cc6:	2100      	movs	r1, #0
 8009cc8:	5499      	strb	r1, [r3, r2]
      pcb->lastack = ackno;
 8009cca:	4b28      	ldr	r3, [pc, #160]	; (8009d6c <tcp_receive+0x300>)
 8009ccc:	681a      	ldr	r2, [r3, #0]
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	649a      	str	r2, [r3, #72]	; 0x48

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	7e1b      	ldrb	r3, [r3, #24]
 8009cd6:	2b03      	cmp	r3, #3
 8009cd8:	d800      	bhi.n	8009cdc <tcp_receive+0x270>
 8009cda:	e091      	b.n	8009e00 <tcp_receive+0x394>
        if (pcb->cwnd < pcb->ssthresh) {
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	224c      	movs	r2, #76	; 0x4c
 8009ce0:	5a9a      	ldrh	r2, [r3, r2]
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	214e      	movs	r1, #78	; 0x4e
 8009ce6:	5a5b      	ldrh	r3, [r3, r1]
 8009ce8:	429a      	cmp	r2, r3
 8009cea:	d217      	bcs.n	8009d1c <tcp_receive+0x2b0>
          if ((u16_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	224c      	movs	r2, #76	; 0x4c
 8009cf0:	5a9a      	ldrh	r2, [r3, r2]
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009cf6:	18d3      	adds	r3, r2, r3
 8009cf8:	b29a      	uxth	r2, r3
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	214c      	movs	r1, #76	; 0x4c
 8009cfe:	5a5b      	ldrh	r3, [r3, r1]
 8009d00:	429a      	cmp	r2, r3
 8009d02:	d800      	bhi.n	8009d06 <tcp_receive+0x29a>
 8009d04:	e07c      	b.n	8009e00 <tcp_receive+0x394>
            pcb->cwnd += pcb->mss;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	224c      	movs	r2, #76	; 0x4c
 8009d0a:	5a9a      	ldrh	r2, [r3, r2]
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009d10:	18d3      	adds	r3, r2, r3
 8009d12:	b299      	uxth	r1, r3
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	224c      	movs	r2, #76	; 0x4c
 8009d18:	5299      	strh	r1, [r3, r2]
 8009d1a:	e071      	b.n	8009e00 <tcp_receive+0x394>
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"U16_F"\n", pcb->cwnd));
        } else {
          u16_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	224c      	movs	r2, #76	; 0x4c
 8009d20:	5a9c      	ldrh	r4, [r3, r2]
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009d26:	001a      	movs	r2, r3
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009d2c:	4353      	muls	r3, r2
 8009d2e:	0018      	movs	r0, r3
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	224c      	movs	r2, #76	; 0x4c
 8009d34:	5a9b      	ldrh	r3, [r3, r2]
 8009d36:	0019      	movs	r1, r3
 8009d38:	f7f6 fa82 	bl	8000240 <__divsi3>
 8009d3c:	0003      	movs	r3, r0
 8009d3e:	b29a      	uxth	r2, r3
 8009d40:	2112      	movs	r1, #18
 8009d42:	187b      	adds	r3, r7, r1
 8009d44:	18a2      	adds	r2, r4, r2
 8009d46:	801a      	strh	r2, [r3, #0]
          if (new_cwnd > pcb->cwnd) {
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	224c      	movs	r2, #76	; 0x4c
 8009d4c:	5a9b      	ldrh	r3, [r3, r2]
 8009d4e:	187a      	adds	r2, r7, r1
 8009d50:	8812      	ldrh	r2, [r2, #0]
 8009d52:	429a      	cmp	r2, r3
 8009d54:	d954      	bls.n	8009e00 <tcp_receive+0x394>
            pcb->cwnd = new_cwnd;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	2212      	movs	r2, #18
 8009d5a:	18ba      	adds	r2, r7, r2
 8009d5c:	214c      	movs	r1, #76	; 0x4c
 8009d5e:	8812      	ldrh	r2, [r2, #0]
 8009d60:	525a      	strh	r2, [r3, r1]
                                    pcb->unacked != NULL?
                                    ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowlegdes them. */
      while (pcb->unacked != NULL &&
 8009d62:	e04d      	b.n	8009e00 <tcp_receive+0x394>
 8009d64:	20002724 	.word	0x20002724
 8009d68:	2000271c 	.word	0x2000271c
 8009d6c:	20002720 	.word	0x20002720
 8009d70:	20002714 	.word	0x20002714
 8009d74:	20002726 	.word	0x20002726
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      ntohl(pcb->unacked->tcphdr->seqno),
                                      ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
        pcb->unacked = pcb->unacked->next;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d82:	681a      	ldr	r2, [r3, #0]
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	671a      	str	r2, [r3, #112]	; 0x70

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"U16_F" ... ", (u16_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8009d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d8a:	685b      	ldr	r3, [r3, #4]
 8009d8c:	0018      	movs	r0, r3
 8009d8e:	f7fd f873 	bl	8006e78 <pbuf_clen>
        /* Prevent ACK for FIN to generate a sent event */
        if ((pcb->acked != 0) && ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0)) {
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	2264      	movs	r2, #100	; 0x64
 8009d96:	5a9b      	ldrh	r3, [r3, r2]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d016      	beq.n	8009dca <tcp_receive+0x35e>
 8009d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d9e:	68db      	ldr	r3, [r3, #12]
 8009da0:	7b1a      	ldrb	r2, [r3, #12]
 8009da2:	7b5b      	ldrb	r3, [r3, #13]
 8009da4:	021b      	lsls	r3, r3, #8
 8009da6:	4313      	orrs	r3, r2
 8009da8:	b29b      	uxth	r3, r3
 8009daa:	0018      	movs	r0, r3
 8009dac:	f7fb ffc0 	bl	8005d30 <lwip_ntohs>
 8009db0:	0003      	movs	r3, r0
 8009db2:	001a      	movs	r2, r3
 8009db4:	2301      	movs	r3, #1
 8009db6:	4013      	ands	r3, r2
 8009db8:	d007      	beq.n	8009dca <tcp_receive+0x35e>
          pcb->acked--;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	2264      	movs	r2, #100	; 0x64
 8009dbe:	5a9b      	ldrh	r3, [r3, r2]
 8009dc0:	3b01      	subs	r3, #1
 8009dc2:	b299      	uxth	r1, r3
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	2264      	movs	r2, #100	; 0x64
 8009dc8:	5299      	strh	r1, [r3, r2]
        }

        pcb->snd_queuelen -= pbuf_clen(next->p);
 8009dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dcc:	685b      	ldr	r3, [r3, #4]
 8009dce:	0018      	movs	r0, r3
 8009dd0:	f7fd f852 	bl	8006e78 <pbuf_clen>
 8009dd4:	0003      	movs	r3, r0
 8009dd6:	0019      	movs	r1, r3
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2268      	movs	r2, #104	; 0x68
 8009ddc:	5a9a      	ldrh	r2, [r3, r2]
 8009dde:	b28b      	uxth	r3, r1
 8009de0:	1ad3      	subs	r3, r2, r3
 8009de2:	b299      	uxth	r1, r3
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	2268      	movs	r2, #104	; 0x68
 8009de8:	5299      	strh	r1, [r3, r2]
        tcp_seg_free(next);
 8009dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dec:	0018      	movs	r0, r3
 8009dee:	f7fe f970 	bl	80080d2 <tcp_seg_free>

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"U16_F" (after freeing unacked)\n", (u16_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	2268      	movs	r2, #104	; 0x68
 8009df6:	5a9b      	ldrh	r3, [r3, r2]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d001      	beq.n	8009e00 <tcp_receive+0x394>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
      while (pcb->unacked != NULL &&
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d02d      	beq.n	8009e64 <tcp_receive+0x3f8>
             TCP_SEQ_LEQ(ntohl(pcb->unacked->tcphdr->seqno) +
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e0c:	68db      	ldr	r3, [r3, #12]
 8009e0e:	791a      	ldrb	r2, [r3, #4]
 8009e10:	7959      	ldrb	r1, [r3, #5]
 8009e12:	0209      	lsls	r1, r1, #8
 8009e14:	430a      	orrs	r2, r1
 8009e16:	7999      	ldrb	r1, [r3, #6]
 8009e18:	0409      	lsls	r1, r1, #16
 8009e1a:	430a      	orrs	r2, r1
 8009e1c:	79db      	ldrb	r3, [r3, #7]
 8009e1e:	061b      	lsls	r3, r3, #24
 8009e20:	4313      	orrs	r3, r2
 8009e22:	0018      	movs	r0, r3
 8009e24:	f7fb ffad 	bl	8005d82 <lwip_ntohl>
 8009e28:	0004      	movs	r4, r0
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e2e:	891b      	ldrh	r3, [r3, #8]
 8009e30:	001d      	movs	r5, r3
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e36:	68db      	ldr	r3, [r3, #12]
 8009e38:	7b1a      	ldrb	r2, [r3, #12]
 8009e3a:	7b5b      	ldrb	r3, [r3, #13]
 8009e3c:	021b      	lsls	r3, r3, #8
 8009e3e:	4313      	orrs	r3, r2
 8009e40:	b29b      	uxth	r3, r3
 8009e42:	0018      	movs	r0, r3
 8009e44:	f7fb ff74 	bl	8005d30 <lwip_ntohs>
 8009e48:	0003      	movs	r3, r0
 8009e4a:	001a      	movs	r2, r3
 8009e4c:	2303      	movs	r3, #3
 8009e4e:	4013      	ands	r3, r2
 8009e50:	1e5a      	subs	r2, r3, #1
 8009e52:	4193      	sbcs	r3, r2
 8009e54:	b2db      	uxtb	r3, r3
 8009e56:	18eb      	adds	r3, r5, r3
 8009e58:	18e2      	adds	r2, r4, r3
 8009e5a:	4bd6      	ldr	r3, [pc, #856]	; (800a1b4 <tcp_receive+0x748>)
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	1ad3      	subs	r3, r2, r3
      while (pcb->unacked != NULL &&
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	dd89      	ble.n	8009d78 <tcp_receive+0x30c>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if(pcb->unacked == NULL)
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d104      	bne.n	8009e76 <tcp_receive+0x40a>
        pcb->rtime = -1;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	2201      	movs	r2, #1
 8009e70:	4252      	negs	r2, r2
 8009e72:	869a      	strh	r2, [r3, #52]	; 0x34
 8009e74:	e002      	b.n	8009e7c <tcp_receive+0x410>
      else
        pcb->rtime = 0;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	2200      	movs	r2, #0
 8009e7a:	869a      	strh	r2, [r3, #52]	; 0x34

      pcb->polltmr = 0;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2200      	movs	r2, #0
 8009e80:	77da      	strb	r2, [r3, #31]
 8009e82:	e003      	b.n	8009e8c <tcp_receive+0x420>
    } else {
      /* Fix bug bug #21582: out of sequence ACK, didn't really ack anything */
      pcb->acked = 0;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2264      	movs	r2, #100	; 0x64
 8009e88:	2100      	movs	r1, #0
 8009e8a:	5299      	strh	r1, [r3, r2]
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 8009e8c:	e04b      	b.n	8009f26 <tcp_receive+0x4ba>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    ntohl(pcb->unsent->tcphdr->seqno), ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e92:	62fb      	str	r3, [r7, #44]	; 0x2c
      pcb->unsent = pcb->unsent->next;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e98:	681a      	ldr	r2, [r3, #0]
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	66da      	str	r2, [r3, #108]	; 0x6c
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d103      	bne.n	8009eae <tcp_receive+0x442>
        pcb->unsent_oversize = 0;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	226a      	movs	r2, #106	; 0x6a
 8009eaa:	2100      	movs	r1, #0
 8009eac:	5299      	strh	r1, [r3, r2]
      }
#endif /* TCP_OVERSIZE */ 
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"U16_F" ... ", (u16_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8009eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009eb0:	685b      	ldr	r3, [r3, #4]
 8009eb2:	0018      	movs	r0, r3
 8009eb4:	f7fc ffe0 	bl	8006e78 <pbuf_clen>
      /* Prevent ACK for FIN to generate a sent event */
      if ((pcb->acked != 0) && ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0)) {
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2264      	movs	r2, #100	; 0x64
 8009ebc:	5a9b      	ldrh	r3, [r3, r2]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d016      	beq.n	8009ef0 <tcp_receive+0x484>
 8009ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ec4:	68db      	ldr	r3, [r3, #12]
 8009ec6:	7b1a      	ldrb	r2, [r3, #12]
 8009ec8:	7b5b      	ldrb	r3, [r3, #13]
 8009eca:	021b      	lsls	r3, r3, #8
 8009ecc:	4313      	orrs	r3, r2
 8009ece:	b29b      	uxth	r3, r3
 8009ed0:	0018      	movs	r0, r3
 8009ed2:	f7fb ff2d 	bl	8005d30 <lwip_ntohs>
 8009ed6:	0003      	movs	r3, r0
 8009ed8:	001a      	movs	r2, r3
 8009eda:	2301      	movs	r3, #1
 8009edc:	4013      	ands	r3, r2
 8009ede:	d007      	beq.n	8009ef0 <tcp_receive+0x484>
        pcb->acked--;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	2264      	movs	r2, #100	; 0x64
 8009ee4:	5a9b      	ldrh	r3, [r3, r2]
 8009ee6:	3b01      	subs	r3, #1
 8009ee8:	b299      	uxth	r1, r3
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	2264      	movs	r2, #100	; 0x64
 8009eee:	5299      	strh	r1, [r3, r2]
      }
      pcb->snd_queuelen -= pbuf_clen(next->p);
 8009ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ef2:	685b      	ldr	r3, [r3, #4]
 8009ef4:	0018      	movs	r0, r3
 8009ef6:	f7fc ffbf 	bl	8006e78 <pbuf_clen>
 8009efa:	0003      	movs	r3, r0
 8009efc:	0019      	movs	r1, r3
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	2268      	movs	r2, #104	; 0x68
 8009f02:	5a9a      	ldrh	r2, [r3, r2]
 8009f04:	b28b      	uxth	r3, r1
 8009f06:	1ad3      	subs	r3, r2, r3
 8009f08:	b299      	uxth	r1, r3
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	2268      	movs	r2, #104	; 0x68
 8009f0e:	5299      	strh	r1, [r3, r2]
      tcp_seg_free(next);
 8009f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f12:	0018      	movs	r0, r3
 8009f14:	f7fe f8dd 	bl	80080d2 <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"U16_F" (after freeing unsent)\n", (u16_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2268      	movs	r2, #104	; 0x68
 8009f1c:	5a9b      	ldrh	r3, [r3, r2]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d001      	beq.n	8009f26 <tcp_receive+0x4ba>
        LWIP_ASSERT("tcp_receive: valid queue length",
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    while (pcb->unsent != NULL &&
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d034      	beq.n	8009f98 <tcp_receive+0x52c>
           TCP_SEQ_BETWEEN(ackno, ntohl(pcb->unsent->tcphdr->seqno) + 
 8009f2e:	4ba1      	ldr	r3, [pc, #644]	; (800a1b4 <tcp_receive+0x748>)
 8009f30:	681c      	ldr	r4, [r3, #0]
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f36:	68db      	ldr	r3, [r3, #12]
 8009f38:	791a      	ldrb	r2, [r3, #4]
 8009f3a:	7959      	ldrb	r1, [r3, #5]
 8009f3c:	0209      	lsls	r1, r1, #8
 8009f3e:	430a      	orrs	r2, r1
 8009f40:	7999      	ldrb	r1, [r3, #6]
 8009f42:	0409      	lsls	r1, r1, #16
 8009f44:	430a      	orrs	r2, r1
 8009f46:	79db      	ldrb	r3, [r3, #7]
 8009f48:	061b      	lsls	r3, r3, #24
 8009f4a:	4313      	orrs	r3, r2
 8009f4c:	0018      	movs	r0, r3
 8009f4e:	f7fb ff18 	bl	8005d82 <lwip_ntohl>
 8009f52:	0005      	movs	r5, r0
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f58:	891b      	ldrh	r3, [r3, #8]
 8009f5a:	001e      	movs	r6, r3
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f60:	68db      	ldr	r3, [r3, #12]
 8009f62:	7b1a      	ldrb	r2, [r3, #12]
 8009f64:	7b5b      	ldrb	r3, [r3, #13]
 8009f66:	021b      	lsls	r3, r3, #8
 8009f68:	4313      	orrs	r3, r2
 8009f6a:	b29b      	uxth	r3, r3
 8009f6c:	0018      	movs	r0, r3
 8009f6e:	f7fb fedf 	bl	8005d30 <lwip_ntohs>
 8009f72:	0003      	movs	r3, r0
 8009f74:	001a      	movs	r2, r3
 8009f76:	2303      	movs	r3, #3
 8009f78:	4013      	ands	r3, r2
 8009f7a:	1e5a      	subs	r2, r3, #1
 8009f7c:	4193      	sbcs	r3, r2
 8009f7e:	b2db      	uxtb	r3, r3
 8009f80:	18f3      	adds	r3, r6, r3
 8009f82:	18eb      	adds	r3, r5, r3
 8009f84:	1ae3      	subs	r3, r4, r3
    while (pcb->unsent != NULL &&
 8009f86:	d407      	bmi.n	8009f98 <tcp_receive+0x52c>
           TCP_SEQ_BETWEEN(ackno, ntohl(pcb->unsent->tcphdr->seqno) + 
 8009f88:	4b8a      	ldr	r3, [pc, #552]	; (800a1b4 <tcp_receive+0x748>)
 8009f8a:	681a      	ldr	r2, [r3, #0]
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f90:	1ad3      	subs	r3, r2, r3
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	dc00      	bgt.n	8009f98 <tcp_receive+0x52c>
 8009f96:	e77a      	b.n	8009e8e <tcp_receive+0x422>
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d060      	beq.n	800a062 <tcp_receive+0x5f6>
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009fa4:	4b83      	ldr	r3, [pc, #524]	; (800a1b4 <tcp_receive+0x748>)
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	1ad3      	subs	r3, r2, r3
 8009faa:	d55a      	bpl.n	800a062 <tcp_receive+0x5f6>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8009fac:	4b82      	ldr	r3, [pc, #520]	; (800a1b8 <tcp_receive+0x74c>)
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	b29a      	uxth	r2, r3
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fb6:	b29b      	uxth	r3, r3
 8009fb8:	1ad3      	subs	r3, r2, r3
 8009fba:	b29a      	uxth	r2, r3
 8009fbc:	201e      	movs	r0, #30
 8009fbe:	183b      	adds	r3, r7, r0
 8009fc0:	801a      	strh	r2, [r3, #0]

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, m * TCP_SLOW_INTERVAL));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
 8009fc2:	183b      	adds	r3, r7, r0
 8009fc4:	881a      	ldrh	r2, [r3, #0]
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	2140      	movs	r1, #64	; 0x40
 8009fca:	5e5b      	ldrsh	r3, [r3, r1]
 8009fcc:	10db      	asrs	r3, r3, #3
 8009fce:	b21b      	sxth	r3, r3
 8009fd0:	b29b      	uxth	r3, r3
 8009fd2:	1ad3      	subs	r3, r2, r3
 8009fd4:	b29a      	uxth	r2, r3
 8009fd6:	183b      	adds	r3, r7, r0
 8009fd8:	801a      	strh	r2, [r3, #0]
      pcb->sa += m;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	2240      	movs	r2, #64	; 0x40
 8009fde:	5e9b      	ldrsh	r3, [r3, r2]
 8009fe0:	b29a      	uxth	r2, r3
 8009fe2:	183b      	adds	r3, r7, r0
 8009fe4:	881b      	ldrh	r3, [r3, #0]
 8009fe6:	18d3      	adds	r3, r2, r3
 8009fe8:	b29b      	uxth	r3, r3
 8009fea:	b219      	sxth	r1, r3
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	2240      	movs	r2, #64	; 0x40
 8009ff0:	5299      	strh	r1, [r3, r2]
      if (m < 0) {
 8009ff2:	183b      	adds	r3, r7, r0
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	5e9b      	ldrsh	r3, [r3, r2]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	da06      	bge.n	800a00a <tcp_receive+0x59e>
        m = -m;
 8009ffc:	211e      	movs	r1, #30
 8009ffe:	187b      	adds	r3, r7, r1
 800a000:	881b      	ldrh	r3, [r3, #0]
 800a002:	425b      	negs	r3, r3
 800a004:	b29a      	uxth	r2, r3
 800a006:	187b      	adds	r3, r7, r1
 800a008:	801a      	strh	r2, [r3, #0]
      }
      m = m - (pcb->sv >> 2);
 800a00a:	201e      	movs	r0, #30
 800a00c:	183b      	adds	r3, r7, r0
 800a00e:	881a      	ldrh	r2, [r3, #0]
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	2142      	movs	r1, #66	; 0x42
 800a014:	5e5b      	ldrsh	r3, [r3, r1]
 800a016:	109b      	asrs	r3, r3, #2
 800a018:	b21b      	sxth	r3, r3
 800a01a:	b29b      	uxth	r3, r3
 800a01c:	1ad3      	subs	r3, r2, r3
 800a01e:	b29a      	uxth	r2, r3
 800a020:	183b      	adds	r3, r7, r0
 800a022:	801a      	strh	r2, [r3, #0]
      pcb->sv += m;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	2242      	movs	r2, #66	; 0x42
 800a028:	5e9b      	ldrsh	r3, [r3, r2]
 800a02a:	b29a      	uxth	r2, r3
 800a02c:	183b      	adds	r3, r7, r0
 800a02e:	881b      	ldrh	r3, [r3, #0]
 800a030:	18d3      	adds	r3, r2, r3
 800a032:	b29b      	uxth	r3, r3
 800a034:	b219      	sxth	r1, r3
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	2242      	movs	r2, #66	; 0x42
 800a03a:	5299      	strh	r1, [r3, r2]
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2240      	movs	r2, #64	; 0x40
 800a040:	5e9b      	ldrsh	r3, [r3, r2]
 800a042:	10db      	asrs	r3, r3, #3
 800a044:	b21b      	sxth	r3, r3
 800a046:	b29a      	uxth	r2, r3
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	2142      	movs	r1, #66	; 0x42
 800a04c:	5e5b      	ldrsh	r3, [r3, r1]
 800a04e:	b29b      	uxth	r3, r3
 800a050:	18d3      	adds	r3, r2, r3
 800a052:	b29b      	uxth	r3, r3
 800a054:	b219      	sxth	r1, r3
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	2244      	movs	r2, #68	; 0x44
 800a05a:	5299      	strh	r1, [r3, r2]

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, pcb->rto * TCP_SLOW_INTERVAL));

      pcb->rttest = 0;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	2200      	movs	r2, #0
 800a060:	639a      	str	r2, [r3, #56]	; 0x38

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapeter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800a062:	4b56      	ldr	r3, [pc, #344]	; (800a1bc <tcp_receive+0x750>)
 800a064:	881b      	ldrh	r3, [r3, #0]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d101      	bne.n	800a06e <tcp_receive+0x602>
 800a06a:	f000 fd83 	bl	800ab74 <tcp_receive+0x1108>
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	7e1b      	ldrb	r3, [r3, #24]
 800a072:	2b06      	cmp	r3, #6
 800a074:	d901      	bls.n	800a07a <tcp_receive+0x60e>
 800a076:	f000 fd7d 	bl	800ab74 <tcp_receive+0x1108>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)){
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)){
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a07e:	4b50      	ldr	r3, [pc, #320]	; (800a1c0 <tcp_receive+0x754>)
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	1ad3      	subs	r3, r2, r3
 800a084:	3b01      	subs	r3, #1
 800a086:	2b00      	cmp	r3, #0
 800a088:	da00      	bge.n	800a08c <tcp_receive+0x620>
 800a08a:	e09d      	b.n	800a1c8 <tcp_receive+0x75c>
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a090:	4b4a      	ldr	r3, [pc, #296]	; (800a1bc <tcp_receive+0x750>)
 800a092:	881b      	ldrh	r3, [r3, #0]
 800a094:	0019      	movs	r1, r3
 800a096:	4b4a      	ldr	r3, [pc, #296]	; (800a1c0 <tcp_receive+0x754>)
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	18cb      	adds	r3, r1, r3
 800a09c:	1ad3      	subs	r3, r2, r3
 800a09e:	3301      	adds	r3, #1
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	dd00      	ble.n	800a0a6 <tcp_receive+0x63a>
 800a0a4:	e090      	b.n	800a1c8 <tcp_receive+0x75c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      off = pcb->rcv_nxt - seqno;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a0aa:	4b45      	ldr	r3, [pc, #276]	; (800a1c0 <tcp_receive+0x754>)
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	1ad3      	subs	r3, r2, r3
 800a0b0:	623b      	str	r3, [r7, #32]
      p = inseg.p;
 800a0b2:	4b44      	ldr	r3, [pc, #272]	; (800a1c4 <tcp_receive+0x758>)
 800a0b4:	685b      	ldr	r3, [r3, #4]
 800a0b6:	627b      	str	r3, [r7, #36]	; 0x24
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
      if (inseg.p->len < off) {
 800a0b8:	4b42      	ldr	r3, [pc, #264]	; (800a1c4 <tcp_receive+0x758>)
 800a0ba:	685b      	ldr	r3, [r3, #4]
 800a0bc:	895b      	ldrh	r3, [r3, #10]
 800a0be:	001a      	movs	r2, r3
 800a0c0:	6a3b      	ldr	r3, [r7, #32]
 800a0c2:	4293      	cmp	r3, r2
 800a0c4:	dd2b      	ble.n	800a11e <tcp_receive+0x6b2>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800a0c6:	4b3f      	ldr	r3, [pc, #252]	; (800a1c4 <tcp_receive+0x758>)
 800a0c8:	685b      	ldr	r3, [r3, #4]
 800a0ca:	8919      	ldrh	r1, [r3, #8]
 800a0cc:	6a3b      	ldr	r3, [r7, #32]
 800a0ce:	b29a      	uxth	r2, r3
 800a0d0:	2310      	movs	r3, #16
 800a0d2:	18fb      	adds	r3, r7, r3
 800a0d4:	1a8a      	subs	r2, r1, r2
 800a0d6:	801a      	strh	r2, [r3, #0]
        while (p->len < off) {
 800a0d8:	e010      	b.n	800a0fc <tcp_receive+0x690>
          off -= p->len;
 800a0da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0dc:	895b      	ldrh	r3, [r3, #10]
 800a0de:	001a      	movs	r2, r3
 800a0e0:	6a3b      	ldr	r3, [r7, #32]
 800a0e2:	1a9b      	subs	r3, r3, r2
 800a0e4:	623b      	str	r3, [r7, #32]
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
 800a0e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0e8:	2210      	movs	r2, #16
 800a0ea:	18ba      	adds	r2, r7, r2
 800a0ec:	8812      	ldrh	r2, [r2, #0]
 800a0ee:	811a      	strh	r2, [r3, #8]
          p->len = 0;
 800a0f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	815a      	strh	r2, [r3, #10]
          p = p->next;
 800a0f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	627b      	str	r3, [r7, #36]	; 0x24
        while (p->len < off) {
 800a0fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0fe:	895b      	ldrh	r3, [r3, #10]
 800a100:	001a      	movs	r2, r3
 800a102:	6a3b      	ldr	r3, [r7, #32]
 800a104:	4293      	cmp	r3, r2
 800a106:	dce8      	bgt.n	800a0da <tcp_receive+0x66e>
        }
        if(pbuf_header(p, (s16_t)-off)) {
 800a108:	6a3b      	ldr	r3, [r7, #32]
 800a10a:	b29b      	uxth	r3, r3
 800a10c:	425b      	negs	r3, r3
 800a10e:	b29b      	uxth	r3, r3
 800a110:	b21a      	sxth	r2, r3
 800a112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a114:	0011      	movs	r1, r2
 800a116:	0018      	movs	r0, r3
 800a118:	f7fc fdb5 	bl	8006c86 <pbuf_header>
 800a11c:	e00a      	b.n	800a134 <tcp_receive+0x6c8>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
        }
      } else {
        if(pbuf_header(inseg.p, (s16_t)-off)) {
 800a11e:	4b29      	ldr	r3, [pc, #164]	; (800a1c4 <tcp_receive+0x758>)
 800a120:	685b      	ldr	r3, [r3, #4]
 800a122:	6a3a      	ldr	r2, [r7, #32]
 800a124:	b292      	uxth	r2, r2
 800a126:	4252      	negs	r2, r2
 800a128:	b292      	uxth	r2, r2
 800a12a:	b212      	sxth	r2, r2
 800a12c:	0011      	movs	r1, r2
 800a12e:	0018      	movs	r0, r3
 800a130:	f7fc fda9 	bl	8006c86 <pbuf_header>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 800a134:	4b23      	ldr	r3, [pc, #140]	; (800a1c4 <tcp_receive+0x758>)
 800a136:	891a      	ldrh	r2, [r3, #8]
 800a138:	4b21      	ldr	r3, [pc, #132]	; (800a1c0 <tcp_receive+0x754>)
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	b299      	uxth	r1, r3
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a142:	b29b      	uxth	r3, r3
 800a144:	1acb      	subs	r3, r1, r3
 800a146:	b29b      	uxth	r3, r3
 800a148:	18d3      	adds	r3, r2, r3
 800a14a:	b29a      	uxth	r2, r3
 800a14c:	4b1d      	ldr	r3, [pc, #116]	; (800a1c4 <tcp_receive+0x758>)
 800a14e:	811a      	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a154:	4b1a      	ldr	r3, [pc, #104]	; (800a1c0 <tcp_receive+0x754>)
 800a156:	601a      	str	r2, [r3, #0]
 800a158:	4b1a      	ldr	r3, [pc, #104]	; (800a1c4 <tcp_receive+0x758>)
 800a15a:	68db      	ldr	r3, [r3, #12]
 800a15c:	4a18      	ldr	r2, [pc, #96]	; (800a1c0 <tcp_receive+0x754>)
 800a15e:	6812      	ldr	r2, [r2, #0]
 800a160:	21ff      	movs	r1, #255	; 0xff
 800a162:	4011      	ands	r1, r2
 800a164:	000c      	movs	r4, r1
 800a166:	7919      	ldrb	r1, [r3, #4]
 800a168:	2000      	movs	r0, #0
 800a16a:	4001      	ands	r1, r0
 800a16c:	1c08      	adds	r0, r1, #0
 800a16e:	1c21      	adds	r1, r4, #0
 800a170:	4301      	orrs	r1, r0
 800a172:	7119      	strb	r1, [r3, #4]
 800a174:	0a11      	lsrs	r1, r2, #8
 800a176:	20ff      	movs	r0, #255	; 0xff
 800a178:	4001      	ands	r1, r0
 800a17a:	000c      	movs	r4, r1
 800a17c:	7959      	ldrb	r1, [r3, #5]
 800a17e:	2000      	movs	r0, #0
 800a180:	4001      	ands	r1, r0
 800a182:	1c08      	adds	r0, r1, #0
 800a184:	1c21      	adds	r1, r4, #0
 800a186:	4301      	orrs	r1, r0
 800a188:	7159      	strb	r1, [r3, #5]
 800a18a:	0c11      	lsrs	r1, r2, #16
 800a18c:	20ff      	movs	r0, #255	; 0xff
 800a18e:	4001      	ands	r1, r0
 800a190:	000c      	movs	r4, r1
 800a192:	7999      	ldrb	r1, [r3, #6]
 800a194:	2000      	movs	r0, #0
 800a196:	4001      	ands	r1, r0
 800a198:	1c08      	adds	r0, r1, #0
 800a19a:	1c21      	adds	r1, r4, #0
 800a19c:	4301      	orrs	r1, r0
 800a19e:	7199      	strb	r1, [r3, #6]
 800a1a0:	0e10      	lsrs	r0, r2, #24
 800a1a2:	79da      	ldrb	r2, [r3, #7]
 800a1a4:	2100      	movs	r1, #0
 800a1a6:	400a      	ands	r2, r1
 800a1a8:	1c11      	adds	r1, r2, #0
 800a1aa:	1c02      	adds	r2, r0, #0
 800a1ac:	430a      	orrs	r2, r1
 800a1ae:	71da      	strb	r2, [r3, #7]
 800a1b0:	e017      	b.n	800a1e2 <tcp_receive+0x776>
 800a1b2:	46c0      	nop			; (mov r8, r8)
 800a1b4:	20002720 	.word	0x20002720
 800a1b8:	2000352c 	.word	0x2000352c
 800a1bc:	20002726 	.word	0x20002726
 800a1c0:	2000271c 	.word	0x2000271c
 800a1c4:	20002704 	.word	0x20002704
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)){
 800a1c8:	4b78      	ldr	r3, [pc, #480]	; (800a3ac <tcp_receive+0x940>)
 800a1ca:	681a      	ldr	r2, [r3, #0]
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1d0:	1ad3      	subs	r3, r2, r3
 800a1d2:	d506      	bpl.n	800a1e2 <tcp_receive+0x776>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	7f9b      	ldrb	r3, [r3, #30]
 800a1d8:	2202      	movs	r2, #2
 800a1da:	4313      	orrs	r3, r2
 800a1dc:	b2da      	uxtb	r2, r3
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	779a      	strb	r2, [r3, #30]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, 
 800a1e2:	4b72      	ldr	r3, [pc, #456]	; (800a3ac <tcp_receive+0x940>)
 800a1e4:	681a      	ldr	r2, [r3, #0]
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1ea:	1ad3      	subs	r3, r2, r3
 800a1ec:	d501      	bpl.n	800a1f2 <tcp_receive+0x786>
 800a1ee:	f000 fcbb 	bl	800ab68 <tcp_receive+0x10fc>
 800a1f2:	4b6e      	ldr	r3, [pc, #440]	; (800a3ac <tcp_receive+0x940>)
 800a1f4:	681a      	ldr	r2, [r3, #0]
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1fa:	6879      	ldr	r1, [r7, #4]
 800a1fc:	8d89      	ldrh	r1, [r1, #44]	; 0x2c
 800a1fe:	185b      	adds	r3, r3, r1
 800a200:	1ad3      	subs	r3, r2, r3
 800a202:	3301      	adds	r3, #1
 800a204:	2b00      	cmp	r3, #0
 800a206:	dd01      	ble.n	800a20c <tcp_receive+0x7a0>
 800a208:	f000 fcae 	bl	800ab68 <tcp_receive+0x10fc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)){
      if (pcb->rcv_nxt == seqno) {
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a210:	4b66      	ldr	r3, [pc, #408]	; (800a3ac <tcp_receive+0x940>)
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	429a      	cmp	r2, r3
 800a216:	d000      	beq.n	800a21a <tcp_receive+0x7ae>
 800a218:	e2be      	b.n	800a798 <tcp_receive+0xd2c>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800a21a:	4b65      	ldr	r3, [pc, #404]	; (800a3b0 <tcp_receive+0x944>)
 800a21c:	891c      	ldrh	r4, [r3, #8]
 800a21e:	4b64      	ldr	r3, [pc, #400]	; (800a3b0 <tcp_receive+0x944>)
 800a220:	68db      	ldr	r3, [r3, #12]
 800a222:	7b1a      	ldrb	r2, [r3, #12]
 800a224:	7b5b      	ldrb	r3, [r3, #13]
 800a226:	021b      	lsls	r3, r3, #8
 800a228:	4313      	orrs	r3, r2
 800a22a:	b29b      	uxth	r3, r3
 800a22c:	0018      	movs	r0, r3
 800a22e:	f7fb fd7f 	bl	8005d30 <lwip_ntohs>
 800a232:	0003      	movs	r3, r0
 800a234:	001a      	movs	r2, r3
 800a236:	2303      	movs	r3, #3
 800a238:	4013      	ands	r3, r2
 800a23a:	1e5a      	subs	r2, r3, #1
 800a23c:	4193      	sbcs	r3, r2
 800a23e:	b2db      	uxtb	r3, r3
 800a240:	b29b      	uxth	r3, r3
 800a242:	18e3      	adds	r3, r4, r3
 800a244:	b29a      	uxth	r2, r3
 800a246:	4b5b      	ldr	r3, [pc, #364]	; (800a3b4 <tcp_receive+0x948>)
 800a248:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a24e:	4b59      	ldr	r3, [pc, #356]	; (800a3b4 <tcp_receive+0x948>)
 800a250:	881b      	ldrh	r3, [r3, #0]
 800a252:	429a      	cmp	r2, r3
 800a254:	d300      	bcc.n	800a258 <tcp_receive+0x7ec>
 800a256:	e07e      	b.n	800a356 <tcp_receive+0x8ea>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, 
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a258:	4b55      	ldr	r3, [pc, #340]	; (800a3b0 <tcp_receive+0x944>)
 800a25a:	68db      	ldr	r3, [r3, #12]
 800a25c:	7b1a      	ldrb	r2, [r3, #12]
 800a25e:	7b5b      	ldrb	r3, [r3, #13]
 800a260:	021b      	lsls	r3, r3, #8
 800a262:	4313      	orrs	r3, r2
 800a264:	b29b      	uxth	r3, r3
 800a266:	0018      	movs	r0, r3
 800a268:	f7fb fd62 	bl	8005d30 <lwip_ntohs>
 800a26c:	0003      	movs	r3, r0
 800a26e:	001a      	movs	r2, r3
 800a270:	2301      	movs	r3, #1
 800a272:	4013      	ands	r3, r2
 800a274:	d036      	beq.n	800a2e4 <tcp_receive+0x878>
            /* Must remove the FIN from the header as we're trimming 
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) &~ TCP_FIN);
 800a276:	4b4e      	ldr	r3, [pc, #312]	; (800a3b0 <tcp_receive+0x944>)
 800a278:	68db      	ldr	r3, [r3, #12]
 800a27a:	7b1a      	ldrb	r2, [r3, #12]
 800a27c:	7b5b      	ldrb	r3, [r3, #13]
 800a27e:	021b      	lsls	r3, r3, #8
 800a280:	4313      	orrs	r3, r2
 800a282:	b29b      	uxth	r3, r3
 800a284:	b21b      	sxth	r3, r3
 800a286:	4a4c      	ldr	r2, [pc, #304]	; (800a3b8 <tcp_receive+0x94c>)
 800a288:	4013      	ands	r3, r2
 800a28a:	b21c      	sxth	r4, r3
 800a28c:	4b48      	ldr	r3, [pc, #288]	; (800a3b0 <tcp_receive+0x944>)
 800a28e:	68db      	ldr	r3, [r3, #12]
 800a290:	7b1a      	ldrb	r2, [r3, #12]
 800a292:	7b5b      	ldrb	r3, [r3, #13]
 800a294:	021b      	lsls	r3, r3, #8
 800a296:	4313      	orrs	r3, r2
 800a298:	b29b      	uxth	r3, r3
 800a29a:	0018      	movs	r0, r3
 800a29c:	f7fb fd48 	bl	8005d30 <lwip_ntohs>
 800a2a0:	0003      	movs	r3, r0
 800a2a2:	001a      	movs	r2, r3
 800a2a4:	233e      	movs	r3, #62	; 0x3e
 800a2a6:	4013      	ands	r3, r2
 800a2a8:	b29b      	uxth	r3, r3
 800a2aa:	0018      	movs	r0, r3
 800a2ac:	f7fb fd2a 	bl	8005d04 <lwip_htons>
 800a2b0:	0003      	movs	r3, r0
 800a2b2:	b21b      	sxth	r3, r3
 800a2b4:	4323      	orrs	r3, r4
 800a2b6:	b21a      	sxth	r2, r3
 800a2b8:	4b3d      	ldr	r3, [pc, #244]	; (800a3b0 <tcp_receive+0x944>)
 800a2ba:	68db      	ldr	r3, [r3, #12]
 800a2bc:	b292      	uxth	r2, r2
 800a2be:	21ff      	movs	r1, #255	; 0xff
 800a2c0:	4011      	ands	r1, r2
 800a2c2:	000c      	movs	r4, r1
 800a2c4:	7b19      	ldrb	r1, [r3, #12]
 800a2c6:	2000      	movs	r0, #0
 800a2c8:	4001      	ands	r1, r0
 800a2ca:	1c08      	adds	r0, r1, #0
 800a2cc:	1c21      	adds	r1, r4, #0
 800a2ce:	4301      	orrs	r1, r0
 800a2d0:	7319      	strb	r1, [r3, #12]
 800a2d2:	0a12      	lsrs	r2, r2, #8
 800a2d4:	b290      	uxth	r0, r2
 800a2d6:	7b5a      	ldrb	r2, [r3, #13]
 800a2d8:	2100      	movs	r1, #0
 800a2da:	400a      	ands	r2, r1
 800a2dc:	1c11      	adds	r1, r2, #0
 800a2de:	1c02      	adds	r2, r0, #0
 800a2e0:	430a      	orrs	r2, r1
 800a2e2:	735a      	strb	r2, [r3, #13]
          }
          /* Adjust length of segment to fit in the window. */
          inseg.len = pcb->rcv_wnd;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a2e8:	4b31      	ldr	r3, [pc, #196]	; (800a3b0 <tcp_receive+0x944>)
 800a2ea:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800a2ec:	4b30      	ldr	r3, [pc, #192]	; (800a3b0 <tcp_receive+0x944>)
 800a2ee:	68db      	ldr	r3, [r3, #12]
 800a2f0:	7b1a      	ldrb	r2, [r3, #12]
 800a2f2:	7b5b      	ldrb	r3, [r3, #13]
 800a2f4:	021b      	lsls	r3, r3, #8
 800a2f6:	4313      	orrs	r3, r2
 800a2f8:	b29b      	uxth	r3, r3
 800a2fa:	0018      	movs	r0, r3
 800a2fc:	f7fb fd18 	bl	8005d30 <lwip_ntohs>
 800a300:	0003      	movs	r3, r0
 800a302:	001a      	movs	r2, r3
 800a304:	2302      	movs	r3, #2
 800a306:	4013      	ands	r3, r2
 800a308:	d005      	beq.n	800a316 <tcp_receive+0x8aa>
            inseg.len -= 1;
 800a30a:	4b29      	ldr	r3, [pc, #164]	; (800a3b0 <tcp_receive+0x944>)
 800a30c:	891b      	ldrh	r3, [r3, #8]
 800a30e:	3b01      	subs	r3, #1
 800a310:	b29a      	uxth	r2, r3
 800a312:	4b27      	ldr	r3, [pc, #156]	; (800a3b0 <tcp_receive+0x944>)
 800a314:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800a316:	4b26      	ldr	r3, [pc, #152]	; (800a3b0 <tcp_receive+0x944>)
 800a318:	685a      	ldr	r2, [r3, #4]
 800a31a:	4b25      	ldr	r3, [pc, #148]	; (800a3b0 <tcp_receive+0x944>)
 800a31c:	891b      	ldrh	r3, [r3, #8]
 800a31e:	0019      	movs	r1, r3
 800a320:	0010      	movs	r0, r2
 800a322:	f7fc fc3e 	bl	8006ba2 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800a326:	4b22      	ldr	r3, [pc, #136]	; (800a3b0 <tcp_receive+0x944>)
 800a328:	891c      	ldrh	r4, [r3, #8]
 800a32a:	4b21      	ldr	r3, [pc, #132]	; (800a3b0 <tcp_receive+0x944>)
 800a32c:	68db      	ldr	r3, [r3, #12]
 800a32e:	7b1a      	ldrb	r2, [r3, #12]
 800a330:	7b5b      	ldrb	r3, [r3, #13]
 800a332:	021b      	lsls	r3, r3, #8
 800a334:	4313      	orrs	r3, r2
 800a336:	b29b      	uxth	r3, r3
 800a338:	0018      	movs	r0, r3
 800a33a:	f7fb fcf9 	bl	8005d30 <lwip_ntohs>
 800a33e:	0003      	movs	r3, r0
 800a340:	001a      	movs	r2, r3
 800a342:	2303      	movs	r3, #3
 800a344:	4013      	ands	r3, r2
 800a346:	1e5a      	subs	r2, r3, #1
 800a348:	4193      	sbcs	r3, r2
 800a34a:	b2db      	uxtb	r3, r3
 800a34c:	b29b      	uxth	r3, r3
 800a34e:	18e3      	adds	r3, r4, r3
 800a350:	b29a      	uxth	r2, r3
 800a352:	4b18      	ldr	r3, [pc, #96]	; (800a3b4 <tcp_receive+0x948>)
 800a354:	801a      	strh	r2, [r3, #0]
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d100      	bne.n	800a360 <tcp_receive+0x8f4>
 800a35e:	e10f      	b.n	800a580 <tcp_receive+0xb14>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a360:	4b13      	ldr	r3, [pc, #76]	; (800a3b0 <tcp_receive+0x944>)
 800a362:	68db      	ldr	r3, [r3, #12]
 800a364:	7b1a      	ldrb	r2, [r3, #12]
 800a366:	7b5b      	ldrb	r3, [r3, #13]
 800a368:	021b      	lsls	r3, r3, #8
 800a36a:	4313      	orrs	r3, r2
 800a36c:	b29b      	uxth	r3, r3
 800a36e:	0018      	movs	r0, r3
 800a370:	f7fb fcde 	bl	8005d30 <lwip_ntohs>
 800a374:	0003      	movs	r3, r0
 800a376:	001a      	movs	r2, r3
 800a378:	2301      	movs	r3, #1
 800a37a:	4013      	ands	r3, r2
 800a37c:	d011      	beq.n	800a3a2 <tcp_receive+0x936>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, 
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800a37e:	e00b      	b.n	800a398 <tcp_receive+0x92c>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a384:	60bb      	str	r3, [r7, #8]
              pcb->ooseq = pcb->ooseq->next;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a38a:	681a      	ldr	r2, [r3, #0]
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800a390:	68bb      	ldr	r3, [r7, #8]
 800a392:	0018      	movs	r0, r3
 800a394:	f7fd fe9d 	bl	80080d2 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d1ef      	bne.n	800a380 <tcp_receive+0x914>
 800a3a0:	e0ee      	b.n	800a580 <tcp_receive+0xb14>
            }
          } else {
            next = pcb->ooseq;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a3a6:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800a3a8:	e06a      	b.n	800a480 <tcp_receive+0xa14>
 800a3aa:	46c0      	nop			; (mov r8, r8)
 800a3ac:	2000271c 	.word	0x2000271c
 800a3b0:	20002704 	.word	0x20002704
 800a3b4:	20002726 	.word	0x20002726
 800a3b8:	ffffc0ff 	.word	0xffffc0ff
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if (TCPH_FLAGS(next->tcphdr) & TCP_FIN &&
 800a3bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3be:	68db      	ldr	r3, [r3, #12]
 800a3c0:	7b1a      	ldrb	r2, [r3, #12]
 800a3c2:	7b5b      	ldrb	r3, [r3, #13]
 800a3c4:	021b      	lsls	r3, r3, #8
 800a3c6:	4313      	orrs	r3, r2
 800a3c8:	b29b      	uxth	r3, r3
 800a3ca:	0018      	movs	r0, r3
 800a3cc:	f7fb fcb0 	bl	8005d30 <lwip_ntohs>
 800a3d0:	0003      	movs	r3, r0
 800a3d2:	001a      	movs	r2, r3
 800a3d4:	2301      	movs	r3, #1
 800a3d6:	4013      	ands	r3, r2
 800a3d8:	d049      	beq.n	800a46e <tcp_receive+0xa02>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800a3da:	4bba      	ldr	r3, [pc, #744]	; (800a6c4 <tcp_receive+0xc58>)
 800a3dc:	68db      	ldr	r3, [r3, #12]
 800a3de:	7b1a      	ldrb	r2, [r3, #12]
 800a3e0:	7b5b      	ldrb	r3, [r3, #13]
 800a3e2:	021b      	lsls	r3, r3, #8
 800a3e4:	4313      	orrs	r3, r2
 800a3e6:	b29b      	uxth	r3, r3
 800a3e8:	0018      	movs	r0, r3
 800a3ea:	f7fb fca1 	bl	8005d30 <lwip_ntohs>
 800a3ee:	0003      	movs	r3, r0
 800a3f0:	001a      	movs	r2, r3
 800a3f2:	2302      	movs	r3, #2
 800a3f4:	4013      	ands	r3, r2
              if (TCPH_FLAGS(next->tcphdr) & TCP_FIN &&
 800a3f6:	d13a      	bne.n	800a46e <tcp_receive+0xa02>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800a3f8:	4bb2      	ldr	r3, [pc, #712]	; (800a6c4 <tcp_receive+0xc58>)
 800a3fa:	68db      	ldr	r3, [r3, #12]
 800a3fc:	7b1a      	ldrb	r2, [r3, #12]
 800a3fe:	7b5b      	ldrb	r3, [r3, #13]
 800a400:	021b      	lsls	r3, r3, #8
 800a402:	4313      	orrs	r3, r2
 800a404:	b29c      	uxth	r4, r3
 800a406:	2001      	movs	r0, #1
 800a408:	f7fb fc7c 	bl	8005d04 <lwip_htons>
 800a40c:	0003      	movs	r3, r0
 800a40e:	001a      	movs	r2, r3
 800a410:	4bac      	ldr	r3, [pc, #688]	; (800a6c4 <tcp_receive+0xc58>)
 800a412:	68db      	ldr	r3, [r3, #12]
 800a414:	4322      	orrs	r2, r4
 800a416:	b292      	uxth	r2, r2
 800a418:	21ff      	movs	r1, #255	; 0xff
 800a41a:	4011      	ands	r1, r2
 800a41c:	000c      	movs	r4, r1
 800a41e:	7b19      	ldrb	r1, [r3, #12]
 800a420:	2000      	movs	r0, #0
 800a422:	4001      	ands	r1, r0
 800a424:	1c08      	adds	r0, r1, #0
 800a426:	1c21      	adds	r1, r4, #0
 800a428:	4301      	orrs	r1, r0
 800a42a:	7319      	strb	r1, [r3, #12]
 800a42c:	0a12      	lsrs	r2, r2, #8
 800a42e:	b290      	uxth	r0, r2
 800a430:	7b5a      	ldrb	r2, [r3, #13]
 800a432:	2100      	movs	r1, #0
 800a434:	400a      	ands	r2, r1
 800a436:	1c11      	adds	r1, r2, #0
 800a438:	1c02      	adds	r2, r0, #0
 800a43a:	430a      	orrs	r2, r1
 800a43c:	735a      	strb	r2, [r3, #13]
                tcplen = TCP_TCPLEN(&inseg);
 800a43e:	4ba1      	ldr	r3, [pc, #644]	; (800a6c4 <tcp_receive+0xc58>)
 800a440:	891c      	ldrh	r4, [r3, #8]
 800a442:	4ba0      	ldr	r3, [pc, #640]	; (800a6c4 <tcp_receive+0xc58>)
 800a444:	68db      	ldr	r3, [r3, #12]
 800a446:	7b1a      	ldrb	r2, [r3, #12]
 800a448:	7b5b      	ldrb	r3, [r3, #13]
 800a44a:	021b      	lsls	r3, r3, #8
 800a44c:	4313      	orrs	r3, r2
 800a44e:	b29b      	uxth	r3, r3
 800a450:	0018      	movs	r0, r3
 800a452:	f7fb fc6d 	bl	8005d30 <lwip_ntohs>
 800a456:	0003      	movs	r3, r0
 800a458:	001a      	movs	r2, r3
 800a45a:	2303      	movs	r3, #3
 800a45c:	4013      	ands	r3, r2
 800a45e:	1e5a      	subs	r2, r3, #1
 800a460:	4193      	sbcs	r3, r2
 800a462:	b2db      	uxtb	r3, r3
 800a464:	b29b      	uxth	r3, r3
 800a466:	18e3      	adds	r3, r4, r3
 800a468:	b29a      	uxth	r2, r3
 800a46a:	4b97      	ldr	r3, [pc, #604]	; (800a6c8 <tcp_receive+0xc5c>)
 800a46c:	801a      	strh	r2, [r3, #0]
              }
              prev = next;
 800a46e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a470:	62bb      	str	r3, [r7, #40]	; 0x28
              next = next->next;
 800a472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	62fb      	str	r3, [r7, #44]	; 0x2c
              tcp_seg_free(prev);
 800a478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a47a:	0018      	movs	r0, r3
 800a47c:	f7fd fe29 	bl	80080d2 <tcp_seg_free>
            while (next &&
 800a480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a482:	2b00      	cmp	r3, #0
 800a484:	d018      	beq.n	800a4b8 <tcp_receive+0xa4c>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800a486:	4b90      	ldr	r3, [pc, #576]	; (800a6c8 <tcp_receive+0xc5c>)
 800a488:	881b      	ldrh	r3, [r3, #0]
 800a48a:	001a      	movs	r2, r3
 800a48c:	4b8f      	ldr	r3, [pc, #572]	; (800a6cc <tcp_receive+0xc60>)
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	18d2      	adds	r2, r2, r3
 800a492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a494:	68db      	ldr	r3, [r3, #12]
 800a496:	7919      	ldrb	r1, [r3, #4]
 800a498:	7958      	ldrb	r0, [r3, #5]
 800a49a:	0200      	lsls	r0, r0, #8
 800a49c:	4301      	orrs	r1, r0
 800a49e:	7998      	ldrb	r0, [r3, #6]
 800a4a0:	0400      	lsls	r0, r0, #16
 800a4a2:	4301      	orrs	r1, r0
 800a4a4:	79db      	ldrb	r3, [r3, #7]
 800a4a6:	061b      	lsls	r3, r3, #24
 800a4a8:	430b      	orrs	r3, r1
 800a4aa:	0019      	movs	r1, r3
 800a4ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4ae:	891b      	ldrh	r3, [r3, #8]
 800a4b0:	18cb      	adds	r3, r1, r3
 800a4b2:	1ad3      	subs	r3, r2, r3
            while (next &&
 800a4b4:	d400      	bmi.n	800a4b8 <tcp_receive+0xa4c>
 800a4b6:	e781      	b.n	800a3bc <tcp_receive+0x950>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800a4b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d05d      	beq.n	800a57a <tcp_receive+0xb0e>
                TCP_SEQ_GT(seqno + tcplen,
 800a4be:	4b82      	ldr	r3, [pc, #520]	; (800a6c8 <tcp_receive+0xc5c>)
 800a4c0:	881b      	ldrh	r3, [r3, #0]
 800a4c2:	001a      	movs	r2, r3
 800a4c4:	4b81      	ldr	r3, [pc, #516]	; (800a6cc <tcp_receive+0xc60>)
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	18d2      	adds	r2, r2, r3
 800a4ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4cc:	68db      	ldr	r3, [r3, #12]
 800a4ce:	7919      	ldrb	r1, [r3, #4]
 800a4d0:	7958      	ldrb	r0, [r3, #5]
 800a4d2:	0200      	lsls	r0, r0, #8
 800a4d4:	4301      	orrs	r1, r0
 800a4d6:	7998      	ldrb	r0, [r3, #6]
 800a4d8:	0400      	lsls	r0, r0, #16
 800a4da:	4301      	orrs	r1, r0
 800a4dc:	79db      	ldrb	r3, [r3, #7]
 800a4de:	061b      	lsls	r3, r3, #24
 800a4e0:	430b      	orrs	r3, r1
 800a4e2:	1ad3      	subs	r3, r2, r3
            if (next &&
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	dd48      	ble.n	800a57a <tcp_receive+0xb0e>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800a4e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4ea:	68db      	ldr	r3, [r3, #12]
 800a4ec:	791a      	ldrb	r2, [r3, #4]
 800a4ee:	7959      	ldrb	r1, [r3, #5]
 800a4f0:	0209      	lsls	r1, r1, #8
 800a4f2:	430a      	orrs	r2, r1
 800a4f4:	7999      	ldrb	r1, [r3, #6]
 800a4f6:	0409      	lsls	r1, r1, #16
 800a4f8:	430a      	orrs	r2, r1
 800a4fa:	79db      	ldrb	r3, [r3, #7]
 800a4fc:	061b      	lsls	r3, r3, #24
 800a4fe:	4313      	orrs	r3, r2
 800a500:	b29a      	uxth	r2, r3
 800a502:	4b72      	ldr	r3, [pc, #456]	; (800a6cc <tcp_receive+0xc60>)
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	b29b      	uxth	r3, r3
 800a508:	1ad3      	subs	r3, r2, r3
 800a50a:	b29a      	uxth	r2, r3
 800a50c:	4b6d      	ldr	r3, [pc, #436]	; (800a6c4 <tcp_receive+0xc58>)
 800a50e:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800a510:	4b6c      	ldr	r3, [pc, #432]	; (800a6c4 <tcp_receive+0xc58>)
 800a512:	68db      	ldr	r3, [r3, #12]
 800a514:	7b1a      	ldrb	r2, [r3, #12]
 800a516:	7b5b      	ldrb	r3, [r3, #13]
 800a518:	021b      	lsls	r3, r3, #8
 800a51a:	4313      	orrs	r3, r2
 800a51c:	b29b      	uxth	r3, r3
 800a51e:	0018      	movs	r0, r3
 800a520:	f7fb fc06 	bl	8005d30 <lwip_ntohs>
 800a524:	0003      	movs	r3, r0
 800a526:	001a      	movs	r2, r3
 800a528:	2302      	movs	r3, #2
 800a52a:	4013      	ands	r3, r2
 800a52c:	d005      	beq.n	800a53a <tcp_receive+0xace>
                inseg.len -= 1;
 800a52e:	4b65      	ldr	r3, [pc, #404]	; (800a6c4 <tcp_receive+0xc58>)
 800a530:	891b      	ldrh	r3, [r3, #8]
 800a532:	3b01      	subs	r3, #1
 800a534:	b29a      	uxth	r2, r3
 800a536:	4b63      	ldr	r3, [pc, #396]	; (800a6c4 <tcp_receive+0xc58>)
 800a538:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800a53a:	4b62      	ldr	r3, [pc, #392]	; (800a6c4 <tcp_receive+0xc58>)
 800a53c:	685a      	ldr	r2, [r3, #4]
 800a53e:	4b61      	ldr	r3, [pc, #388]	; (800a6c4 <tcp_receive+0xc58>)
 800a540:	891b      	ldrh	r3, [r3, #8]
 800a542:	0019      	movs	r1, r3
 800a544:	0010      	movs	r0, r2
 800a546:	f7fc fb2c 	bl	8006ba2 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800a54a:	4b5e      	ldr	r3, [pc, #376]	; (800a6c4 <tcp_receive+0xc58>)
 800a54c:	891c      	ldrh	r4, [r3, #8]
 800a54e:	4b5d      	ldr	r3, [pc, #372]	; (800a6c4 <tcp_receive+0xc58>)
 800a550:	68db      	ldr	r3, [r3, #12]
 800a552:	7b1a      	ldrb	r2, [r3, #12]
 800a554:	7b5b      	ldrb	r3, [r3, #13]
 800a556:	021b      	lsls	r3, r3, #8
 800a558:	4313      	orrs	r3, r2
 800a55a:	b29b      	uxth	r3, r3
 800a55c:	0018      	movs	r0, r3
 800a55e:	f7fb fbe7 	bl	8005d30 <lwip_ntohs>
 800a562:	0003      	movs	r3, r0
 800a564:	001a      	movs	r2, r3
 800a566:	2303      	movs	r3, #3
 800a568:	4013      	ands	r3, r2
 800a56a:	1e5a      	subs	r2, r3, #1
 800a56c:	4193      	sbcs	r3, r2
 800a56e:	b2db      	uxtb	r3, r3
 800a570:	b29b      	uxth	r3, r3
 800a572:	18e3      	adds	r3, r4, r3
 800a574:	b29a      	uxth	r2, r3
 800a576:	4b54      	ldr	r3, [pc, #336]	; (800a6c8 <tcp_receive+0xc5c>)
 800a578:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a57e:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800a580:	4b51      	ldr	r3, [pc, #324]	; (800a6c8 <tcp_receive+0xc5c>)
 800a582:	881b      	ldrh	r3, [r3, #0]
 800a584:	001a      	movs	r2, r3
 800a586:	4b51      	ldr	r3, [pc, #324]	; (800a6cc <tcp_receive+0xc60>)
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	18d2      	adds	r2, r2, r3
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	629a      	str	r2, [r3, #40]	; 0x28

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
        pcb->rcv_wnd -= tcplen;
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a594:	4b4c      	ldr	r3, [pc, #304]	; (800a6c8 <tcp_receive+0xc5c>)
 800a596:	881b      	ldrh	r3, [r3, #0]
 800a598:	1ad3      	subs	r3, r2, r3
 800a59a:	b29a      	uxth	r2, r3
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	859a      	strh	r2, [r3, #44]	; 0x2c

        tcp_update_rcv_ann_wnd(pcb);
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	0018      	movs	r0, r3
 800a5a4:	f7fd f982 	bl	80078ac <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800a5a8:	4b46      	ldr	r3, [pc, #280]	; (800a6c4 <tcp_receive+0xc58>)
 800a5aa:	685b      	ldr	r3, [r3, #4]
 800a5ac:	891b      	ldrh	r3, [r3, #8]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d006      	beq.n	800a5c0 <tcp_receive+0xb54>
          recv_data = inseg.p;
 800a5b2:	4b44      	ldr	r3, [pc, #272]	; (800a6c4 <tcp_receive+0xc58>)
 800a5b4:	685a      	ldr	r2, [r3, #4]
 800a5b6:	4b46      	ldr	r3, [pc, #280]	; (800a6d0 <tcp_receive+0xc64>)
 800a5b8:	601a      	str	r2, [r3, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800a5ba:	4b42      	ldr	r3, [pc, #264]	; (800a6c4 <tcp_receive+0xc58>)
 800a5bc:	2200      	movs	r2, #0
 800a5be:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a5c0:	4b40      	ldr	r3, [pc, #256]	; (800a6c4 <tcp_receive+0xc58>)
 800a5c2:	68db      	ldr	r3, [r3, #12]
 800a5c4:	7b1a      	ldrb	r2, [r3, #12]
 800a5c6:	7b5b      	ldrb	r3, [r3, #13]
 800a5c8:	021b      	lsls	r3, r3, #8
 800a5ca:	4313      	orrs	r3, r2
 800a5cc:	b29b      	uxth	r3, r3
 800a5ce:	0018      	movs	r0, r3
 800a5d0:	f7fb fbae 	bl	8005d30 <lwip_ntohs>
 800a5d4:	0003      	movs	r3, r0
 800a5d6:	001a      	movs	r2, r3
 800a5d8:	2301      	movs	r3, #1
 800a5da:	4013      	ands	r3, r2
 800a5dc:	d100      	bne.n	800a5e0 <tcp_receive+0xb74>
 800a5de:	e0a7      	b.n	800a730 <tcp_receive+0xcc4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800a5e0:	4b3c      	ldr	r3, [pc, #240]	; (800a6d4 <tcp_receive+0xc68>)
 800a5e2:	781b      	ldrb	r3, [r3, #0]
 800a5e4:	2220      	movs	r2, #32
 800a5e6:	4313      	orrs	r3, r2
 800a5e8:	b2da      	uxtb	r2, r3
 800a5ea:	4b3a      	ldr	r3, [pc, #232]	; (800a6d4 <tcp_receive+0xc68>)
 800a5ec:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800a5ee:	e09f      	b.n	800a730 <tcp_receive+0xcc4>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a5f4:	60fb      	str	r3, [r7, #12]
          seqno = pcb->ooseq->tcphdr->seqno;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a5fa:	68db      	ldr	r3, [r3, #12]
 800a5fc:	791a      	ldrb	r2, [r3, #4]
 800a5fe:	7959      	ldrb	r1, [r3, #5]
 800a600:	0209      	lsls	r1, r1, #8
 800a602:	430a      	orrs	r2, r1
 800a604:	7999      	ldrb	r1, [r3, #6]
 800a606:	0409      	lsls	r1, r1, #16
 800a608:	430a      	orrs	r2, r1
 800a60a:	79db      	ldrb	r3, [r3, #7]
 800a60c:	061b      	lsls	r3, r3, #24
 800a60e:	4313      	orrs	r3, r2
 800a610:	001a      	movs	r2, r3
 800a612:	4b2e      	ldr	r3, [pc, #184]	; (800a6cc <tcp_receive+0xc60>)
 800a614:	601a      	str	r2, [r3, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	891b      	ldrh	r3, [r3, #8]
 800a61a:	001c      	movs	r4, r3
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	68db      	ldr	r3, [r3, #12]
 800a620:	7b1a      	ldrb	r2, [r3, #12]
 800a622:	7b5b      	ldrb	r3, [r3, #13]
 800a624:	021b      	lsls	r3, r3, #8
 800a626:	4313      	orrs	r3, r2
 800a628:	b29b      	uxth	r3, r3
 800a62a:	0018      	movs	r0, r3
 800a62c:	f7fb fb80 	bl	8005d30 <lwip_ntohs>
 800a630:	0003      	movs	r3, r0
 800a632:	001a      	movs	r2, r3
 800a634:	2303      	movs	r3, #3
 800a636:	4013      	ands	r3, r2
 800a638:	1e5a      	subs	r2, r3, #1
 800a63a:	4193      	sbcs	r3, r2
 800a63c:	b2db      	uxtb	r3, r3
 800a63e:	18e2      	adds	r2, r4, r3
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a644:	189a      	adds	r2, r3, r2
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	629a      	str	r2, [r3, #40]	; 0x28
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	68db      	ldr	r3, [r3, #12]
 800a64e:	7b1a      	ldrb	r2, [r3, #12]
 800a650:	7b5b      	ldrb	r3, [r3, #13]
 800a652:	021b      	lsls	r3, r3, #8
 800a654:	4313      	orrs	r3, r2
 800a656:	b29b      	uxth	r3, r3
 800a658:	0018      	movs	r0, r3
 800a65a:	f7fb fb69 	bl	8005d30 <lwip_ntohs>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	891b      	ldrh	r3, [r3, #8]
 800a662:	001c      	movs	r4, r3
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	68db      	ldr	r3, [r3, #12]
 800a668:	7b1a      	ldrb	r2, [r3, #12]
 800a66a:	7b5b      	ldrb	r3, [r3, #13]
 800a66c:	021b      	lsls	r3, r3, #8
 800a66e:	4313      	orrs	r3, r2
 800a670:	b29b      	uxth	r3, r3
 800a672:	0018      	movs	r0, r3
 800a674:	f7fb fb5c 	bl	8005d30 <lwip_ntohs>
 800a678:	0003      	movs	r3, r0
 800a67a:	001a      	movs	r2, r3
 800a67c:	2303      	movs	r3, #3
 800a67e:	4013      	ands	r3, r2
 800a680:	1e5a      	subs	r2, r3, #1
 800a682:	4193      	sbcs	r3, r2
 800a684:	b2db      	uxtb	r3, r3
 800a686:	18e1      	adds	r1, r4, r3
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a68c:	b28b      	uxth	r3, r1
 800a68e:	1ad3      	subs	r3, r2, r3
 800a690:	b29a      	uxth	r2, r3
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	859a      	strh	r2, [r3, #44]	; 0x2c

          tcp_update_rcv_ann_wnd(pcb);
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	0018      	movs	r0, r3
 800a69a:	f7fd f907 	bl	80078ac <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	685b      	ldr	r3, [r3, #4]
 800a6a2:	891b      	ldrh	r3, [r3, #8]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d01e      	beq.n	800a6e6 <tcp_receive+0xc7a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            if (recv_data) {
 800a6a8:	4b09      	ldr	r3, [pc, #36]	; (800a6d0 <tcp_receive+0xc64>)
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d013      	beq.n	800a6d8 <tcp_receive+0xc6c>
              pbuf_cat(recv_data, cseg->p);
 800a6b0:	4b07      	ldr	r3, [pc, #28]	; (800a6d0 <tcp_receive+0xc64>)
 800a6b2:	681a      	ldr	r2, [r3, #0]
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	685b      	ldr	r3, [r3, #4]
 800a6b8:	0019      	movs	r1, r3
 800a6ba:	0010      	movs	r0, r2
 800a6bc:	f7fc fc09 	bl	8006ed2 <pbuf_cat>
 800a6c0:	e00e      	b.n	800a6e0 <tcp_receive+0xc74>
 800a6c2:	46c0      	nop			; (mov r8, r8)
 800a6c4:	20002704 	.word	0x20002704
 800a6c8:	20002726 	.word	0x20002726
 800a6cc:	2000271c 	.word	0x2000271c
 800a6d0:	2000272c 	.word	0x2000272c
 800a6d4:	20002728 	.word	0x20002728
            } else {
              recv_data = cseg->p;
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	685a      	ldr	r2, [r3, #4]
 800a6dc:	4b9b      	ldr	r3, [pc, #620]	; (800a94c <tcp_receive+0xee0>)
 800a6de:	601a      	str	r2, [r3, #0]
            }
            cseg->p = NULL;
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	68db      	ldr	r3, [r3, #12]
 800a6ea:	7b1a      	ldrb	r2, [r3, #12]
 800a6ec:	7b5b      	ldrb	r3, [r3, #13]
 800a6ee:	021b      	lsls	r3, r3, #8
 800a6f0:	4313      	orrs	r3, r2
 800a6f2:	b29b      	uxth	r3, r3
 800a6f4:	0018      	movs	r0, r3
 800a6f6:	f7fb fb1b 	bl	8005d30 <lwip_ntohs>
 800a6fa:	0003      	movs	r3, r0
 800a6fc:	001a      	movs	r2, r3
 800a6fe:	2301      	movs	r3, #1
 800a700:	4013      	ands	r3, r2
 800a702:	d00d      	beq.n	800a720 <tcp_receive+0xcb4>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800a704:	4b92      	ldr	r3, [pc, #584]	; (800a950 <tcp_receive+0xee4>)
 800a706:	781b      	ldrb	r3, [r3, #0]
 800a708:	2220      	movs	r2, #32
 800a70a:	4313      	orrs	r3, r2
 800a70c:	b2da      	uxtb	r2, r3
 800a70e:	4b90      	ldr	r3, [pc, #576]	; (800a950 <tcp_receive+0xee4>)
 800a710:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	7e1b      	ldrb	r3, [r3, #24]
 800a716:	2b04      	cmp	r3, #4
 800a718:	d102      	bne.n	800a720 <tcp_receive+0xcb4>
              pcb->state = CLOSE_WAIT;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	2207      	movs	r2, #7
 800a71e:	761a      	strb	r2, [r3, #24]
            } 
          }

          pcb->ooseq = cseg->next;
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	681a      	ldr	r2, [r3, #0]
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	0018      	movs	r0, r3
 800a72c:	f7fd fcd1 	bl	80080d2 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a734:	2b00      	cmp	r3, #0
 800a736:	d012      	beq.n	800a75e <tcp_receive+0xcf2>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a73c:	68db      	ldr	r3, [r3, #12]
 800a73e:	791a      	ldrb	r2, [r3, #4]
 800a740:	7959      	ldrb	r1, [r3, #5]
 800a742:	0209      	lsls	r1, r1, #8
 800a744:	430a      	orrs	r2, r1
 800a746:	7999      	ldrb	r1, [r3, #6]
 800a748:	0409      	lsls	r1, r1, #16
 800a74a:	430a      	orrs	r2, r1
 800a74c:	79db      	ldrb	r3, [r3, #7]
 800a74e:	061b      	lsls	r3, r3, #24
 800a750:	4313      	orrs	r3, r2
 800a752:	001a      	movs	r2, r3
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        while (pcb->ooseq != NULL &&
 800a758:	429a      	cmp	r2, r3
 800a75a:	d100      	bne.n	800a75e <tcp_receive+0xcf2>
 800a75c:	e748      	b.n	800a5f0 <tcp_receive+0xb84>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	7f9b      	ldrb	r3, [r3, #30]
 800a762:	001a      	movs	r2, r3
 800a764:	2301      	movs	r3, #1
 800a766:	4013      	ands	r3, r2
 800a768:	d00e      	beq.n	800a788 <tcp_receive+0xd1c>
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	7f9b      	ldrb	r3, [r3, #30]
 800a76e:	2201      	movs	r2, #1
 800a770:	4393      	bics	r3, r2
 800a772:	b2da      	uxtb	r2, r3
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	779a      	strb	r2, [r3, #30]
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	7f9b      	ldrb	r3, [r3, #30]
 800a77c:	2202      	movs	r2, #2
 800a77e:	4313      	orrs	r3, r2
 800a780:	b2da      	uxtb	r2, r3
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	779a      	strb	r2, [r3, #30]
      if (pcb->rcv_nxt == seqno) {
 800a786:	e1f4      	b.n	800ab72 <tcp_receive+0x1106>
        tcp_ack(pcb);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	7f9b      	ldrb	r3, [r3, #30]
 800a78c:	2201      	movs	r2, #1
 800a78e:	4313      	orrs	r3, r2
 800a790:	b2da      	uxtb	r2, r3
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	779a      	strb	r2, [r3, #30]
      if (pcb->rcv_nxt == seqno) {
 800a796:	e1ec      	b.n	800ab72 <tcp_receive+0x1106>

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	0018      	movs	r0, r3
 800a79c:	f001 f9d4 	bl	800bb48 <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d107      	bne.n	800a7b8 <tcp_receive+0xd4c>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800a7a8:	4b6a      	ldr	r3, [pc, #424]	; (800a954 <tcp_receive+0xee8>)
 800a7aa:	0018      	movs	r0, r3
 800a7ac:	f7fd fcb9 	bl	8008122 <tcp_seg_copy>
 800a7b0:	0002      	movs	r2, r0
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	675a      	str	r2, [r3, #116]	; 0x74
      if (pcb->rcv_nxt == seqno) {
 800a7b6:	e1dc      	b.n	800ab72 <tcp_receive+0x1106>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	62bb      	str	r3, [r7, #40]	; 0x28
          for(next = pcb->ooseq; next != NULL; next = next->next) {
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a7c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a7c2:	e1c0      	b.n	800ab46 <tcp_receive+0x10da>
            if (seqno == next->tcphdr->seqno) {
 800a7c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7c6:	68db      	ldr	r3, [r3, #12]
 800a7c8:	791a      	ldrb	r2, [r3, #4]
 800a7ca:	7959      	ldrb	r1, [r3, #5]
 800a7cc:	0209      	lsls	r1, r1, #8
 800a7ce:	430a      	orrs	r2, r1
 800a7d0:	7999      	ldrb	r1, [r3, #6]
 800a7d2:	0409      	lsls	r1, r1, #16
 800a7d4:	430a      	orrs	r2, r1
 800a7d6:	79db      	ldrb	r3, [r3, #7]
 800a7d8:	061b      	lsls	r3, r3, #24
 800a7da:	4313      	orrs	r3, r2
 800a7dc:	001a      	movs	r2, r3
 800a7de:	4b5e      	ldr	r3, [pc, #376]	; (800a958 <tcp_receive+0xeec>)
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	429a      	cmp	r2, r3
 800a7e4:	d121      	bne.n	800a82a <tcp_receive+0xdbe>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800a7e6:	4b5b      	ldr	r3, [pc, #364]	; (800a954 <tcp_receive+0xee8>)
 800a7e8:	891a      	ldrh	r2, [r3, #8]
 800a7ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7ec:	891b      	ldrh	r3, [r3, #8]
 800a7ee:	429a      	cmp	r2, r3
 800a7f0:	d800      	bhi.n	800a7f4 <tcp_receive+0xd88>
 800a7f2:	e1ad      	b.n	800ab50 <tcp_receive+0x10e4>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
 800a7f4:	4b57      	ldr	r3, [pc, #348]	; (800a954 <tcp_receive+0xee8>)
 800a7f6:	0018      	movs	r0, r3
 800a7f8:	f7fd fc93 	bl	8008122 <tcp_seg_copy>
 800a7fc:	0003      	movs	r3, r0
 800a7fe:	60fb      	str	r3, [r7, #12]
                if (cseg != NULL) {
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d100      	bne.n	800a808 <tcp_receive+0xd9c>
 800a806:	e1a5      	b.n	800ab54 <tcp_receive+0x10e8>
                  if (prev != NULL) {
 800a808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d003      	beq.n	800a816 <tcp_receive+0xdaa>
                    prev->next = cseg;
 800a80e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a810:	68fa      	ldr	r2, [r7, #12]
 800a812:	601a      	str	r2, [r3, #0]
 800a814:	e002      	b.n	800a81c <tcp_receive+0xdb0>
                  } else {
                    pcb->ooseq = cseg;
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	68fa      	ldr	r2, [r7, #12]
 800a81a:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800a81c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	0011      	movs	r1, r2
 800a822:	0018      	movs	r0, r3
 800a824:	f7ff f874 	bl	8009910 <tcp_oos_insert_segment>
                }
                break;
 800a828:	e194      	b.n	800ab54 <tcp_receive+0x10e8>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800a82a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d124      	bne.n	800a87a <tcp_receive+0xe0e>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800a830:	4b49      	ldr	r3, [pc, #292]	; (800a958 <tcp_receive+0xeec>)
 800a832:	681a      	ldr	r2, [r3, #0]
 800a834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a836:	68db      	ldr	r3, [r3, #12]
 800a838:	7919      	ldrb	r1, [r3, #4]
 800a83a:	7958      	ldrb	r0, [r3, #5]
 800a83c:	0200      	lsls	r0, r0, #8
 800a83e:	4301      	orrs	r1, r0
 800a840:	7998      	ldrb	r0, [r3, #6]
 800a842:	0400      	lsls	r0, r0, #16
 800a844:	4301      	orrs	r1, r0
 800a846:	79db      	ldrb	r3, [r3, #7]
 800a848:	061b      	lsls	r3, r3, #24
 800a84a:	430b      	orrs	r3, r1
 800a84c:	1ad3      	subs	r3, r2, r3
 800a84e:	d400      	bmi.n	800a852 <tcp_receive+0xde6>
 800a850:	e084      	b.n	800a95c <tcp_receive+0xef0>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
 800a852:	4b40      	ldr	r3, [pc, #256]	; (800a954 <tcp_receive+0xee8>)
 800a854:	0018      	movs	r0, r3
 800a856:	f7fd fc64 	bl	8008122 <tcp_seg_copy>
 800a85a:	0003      	movs	r3, r0
 800a85c:	60fb      	str	r3, [r7, #12]
                  if (cseg != NULL) {
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	2b00      	cmp	r3, #0
 800a862:	d100      	bne.n	800a866 <tcp_receive+0xdfa>
 800a864:	e178      	b.n	800ab58 <tcp_receive+0x10ec>
                    pcb->ooseq = cseg;
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	68fa      	ldr	r2, [r7, #12]
 800a86a:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800a86c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	0011      	movs	r1, r2
 800a872:	0018      	movs	r0, r3
 800a874:	f7ff f84c 	bl	8009910 <tcp_oos_insert_segment>
                  }
                  break;
 800a878:	e16e      	b.n	800ab58 <tcp_receive+0x10ec>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 800a87a:	4b37      	ldr	r3, [pc, #220]	; (800a958 <tcp_receive+0xeec>)
 800a87c:	681a      	ldr	r2, [r3, #0]
 800a87e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a880:	68db      	ldr	r3, [r3, #12]
 800a882:	7919      	ldrb	r1, [r3, #4]
 800a884:	7958      	ldrb	r0, [r3, #5]
 800a886:	0200      	lsls	r0, r0, #8
 800a888:	4301      	orrs	r1, r0
 800a88a:	7998      	ldrb	r0, [r3, #6]
 800a88c:	0400      	lsls	r0, r0, #16
 800a88e:	4301      	orrs	r1, r0
 800a890:	79db      	ldrb	r3, [r3, #7]
 800a892:	061b      	lsls	r3, r3, #24
 800a894:	430b      	orrs	r3, r1
 800a896:	1ad3      	subs	r3, r2, r3
 800a898:	3b01      	subs	r3, #1
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	db5e      	blt.n	800a95c <tcp_receive+0xef0>
 800a89e:	4b2e      	ldr	r3, [pc, #184]	; (800a958 <tcp_receive+0xeec>)
 800a8a0:	681a      	ldr	r2, [r3, #0]
 800a8a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8a4:	68db      	ldr	r3, [r3, #12]
 800a8a6:	7919      	ldrb	r1, [r3, #4]
 800a8a8:	7958      	ldrb	r0, [r3, #5]
 800a8aa:	0200      	lsls	r0, r0, #8
 800a8ac:	4301      	orrs	r1, r0
 800a8ae:	7998      	ldrb	r0, [r3, #6]
 800a8b0:	0400      	lsls	r0, r0, #16
 800a8b2:	4301      	orrs	r1, r0
 800a8b4:	79db      	ldrb	r3, [r3, #7]
 800a8b6:	061b      	lsls	r3, r3, #24
 800a8b8:	430b      	orrs	r3, r1
 800a8ba:	1ad3      	subs	r3, r2, r3
 800a8bc:	3301      	adds	r3, #1
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	dc4c      	bgt.n	800a95c <tcp_receive+0xef0>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
 800a8c2:	4b24      	ldr	r3, [pc, #144]	; (800a954 <tcp_receive+0xee8>)
 800a8c4:	0018      	movs	r0, r3
 800a8c6:	f7fd fc2c 	bl	8008122 <tcp_seg_copy>
 800a8ca:	0003      	movs	r3, r0
 800a8cc:	60fb      	str	r3, [r7, #12]
                  if (cseg != NULL) {
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d100      	bne.n	800a8d6 <tcp_receive+0xe6a>
 800a8d4:	e142      	b.n	800ab5c <tcp_receive+0x10f0>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800a8d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8d8:	68db      	ldr	r3, [r3, #12]
 800a8da:	791a      	ldrb	r2, [r3, #4]
 800a8dc:	7959      	ldrb	r1, [r3, #5]
 800a8de:	0209      	lsls	r1, r1, #8
 800a8e0:	430a      	orrs	r2, r1
 800a8e2:	7999      	ldrb	r1, [r3, #6]
 800a8e4:	0409      	lsls	r1, r1, #16
 800a8e6:	430a      	orrs	r2, r1
 800a8e8:	79db      	ldrb	r3, [r3, #7]
 800a8ea:	061b      	lsls	r3, r3, #24
 800a8ec:	4313      	orrs	r3, r2
 800a8ee:	001a      	movs	r2, r3
 800a8f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8f2:	891b      	ldrh	r3, [r3, #8]
 800a8f4:	18d2      	adds	r2, r2, r3
 800a8f6:	4b18      	ldr	r3, [pc, #96]	; (800a958 <tcp_receive+0xeec>)
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	1ad3      	subs	r3, r2, r3
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	dd1b      	ble.n	800a938 <tcp_receive+0xecc>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800a900:	4b15      	ldr	r3, [pc, #84]	; (800a958 <tcp_receive+0xeec>)
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	b29a      	uxth	r2, r3
 800a906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a908:	68db      	ldr	r3, [r3, #12]
 800a90a:	7919      	ldrb	r1, [r3, #4]
 800a90c:	7958      	ldrb	r0, [r3, #5]
 800a90e:	0200      	lsls	r0, r0, #8
 800a910:	4301      	orrs	r1, r0
 800a912:	7998      	ldrb	r0, [r3, #6]
 800a914:	0400      	lsls	r0, r0, #16
 800a916:	4301      	orrs	r1, r0
 800a918:	79db      	ldrb	r3, [r3, #7]
 800a91a:	061b      	lsls	r3, r3, #24
 800a91c:	430b      	orrs	r3, r1
 800a91e:	b29b      	uxth	r3, r3
 800a920:	1ad3      	subs	r3, r2, r3
 800a922:	b29a      	uxth	r2, r3
 800a924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a926:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800a928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a92a:	685a      	ldr	r2, [r3, #4]
 800a92c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a92e:	891b      	ldrh	r3, [r3, #8]
 800a930:	0019      	movs	r1, r3
 800a932:	0010      	movs	r0, r2
 800a934:	f7fc f935 	bl	8006ba2 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800a938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a93a:	68fa      	ldr	r2, [r7, #12]
 800a93c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800a93e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	0011      	movs	r1, r2
 800a944:	0018      	movs	r0, r3
 800a946:	f7fe ffe3 	bl	8009910 <tcp_oos_insert_segment>
                  }
                  break;
 800a94a:	e107      	b.n	800ab5c <tcp_receive+0x10f0>
 800a94c:	2000272c 	.word	0x2000272c
 800a950:	20002728 	.word	0x20002728
 800a954:	20002704 	.word	0x20002704
 800a958:	2000271c 	.word	0x2000271c
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800a95c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d000      	beq.n	800a966 <tcp_receive+0xefa>
 800a964:	e0ea      	b.n	800ab3c <tcp_receive+0x10d0>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800a966:	4b92      	ldr	r3, [pc, #584]	; (800abb0 <tcp_receive+0x1144>)
 800a968:	681a      	ldr	r2, [r3, #0]
 800a96a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a96c:	68db      	ldr	r3, [r3, #12]
 800a96e:	7919      	ldrb	r1, [r3, #4]
 800a970:	7958      	ldrb	r0, [r3, #5]
 800a972:	0200      	lsls	r0, r0, #8
 800a974:	4301      	orrs	r1, r0
 800a976:	7998      	ldrb	r0, [r3, #6]
 800a978:	0400      	lsls	r0, r0, #16
 800a97a:	4301      	orrs	r1, r0
 800a97c:	79db      	ldrb	r3, [r3, #7]
 800a97e:	061b      	lsls	r3, r3, #24
 800a980:	430b      	orrs	r3, r1
 800a982:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800a984:	2b00      	cmp	r3, #0
 800a986:	dc00      	bgt.n	800a98a <tcp_receive+0xf1e>
 800a988:	e0d8      	b.n	800ab3c <tcp_receive+0x10d0>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800a98a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a98c:	68db      	ldr	r3, [r3, #12]
 800a98e:	7b1a      	ldrb	r2, [r3, #12]
 800a990:	7b5b      	ldrb	r3, [r3, #13]
 800a992:	021b      	lsls	r3, r3, #8
 800a994:	4313      	orrs	r3, r2
 800a996:	b29b      	uxth	r3, r3
 800a998:	0018      	movs	r0, r3
 800a99a:	f7fb f9c9 	bl	8005d30 <lwip_ntohs>
 800a99e:	0003      	movs	r3, r0
 800a9a0:	001a      	movs	r2, r3
 800a9a2:	2301      	movs	r3, #1
 800a9a4:	4013      	ands	r3, r2
 800a9a6:	d000      	beq.n	800a9aa <tcp_receive+0xf3e>
 800a9a8:	e0da      	b.n	800ab60 <tcp_receive+0x10f4>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800a9aa:	4b82      	ldr	r3, [pc, #520]	; (800abb4 <tcp_receive+0x1148>)
 800a9ac:	0018      	movs	r0, r3
 800a9ae:	f7fd fbb8 	bl	8008122 <tcp_seg_copy>
 800a9b2:	0002      	movs	r2, r0
 800a9b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9b6:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800a9b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d100      	bne.n	800a9c2 <tcp_receive+0xf56>
 800a9c0:	e0d0      	b.n	800ab64 <tcp_receive+0x10f8>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800a9c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9c4:	68db      	ldr	r3, [r3, #12]
 800a9c6:	791a      	ldrb	r2, [r3, #4]
 800a9c8:	7959      	ldrb	r1, [r3, #5]
 800a9ca:	0209      	lsls	r1, r1, #8
 800a9cc:	430a      	orrs	r2, r1
 800a9ce:	7999      	ldrb	r1, [r3, #6]
 800a9d0:	0409      	lsls	r1, r1, #16
 800a9d2:	430a      	orrs	r2, r1
 800a9d4:	79db      	ldrb	r3, [r3, #7]
 800a9d6:	061b      	lsls	r3, r3, #24
 800a9d8:	4313      	orrs	r3, r2
 800a9da:	001a      	movs	r2, r3
 800a9dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9de:	891b      	ldrh	r3, [r3, #8]
 800a9e0:	18d2      	adds	r2, r2, r3
 800a9e2:	4b73      	ldr	r3, [pc, #460]	; (800abb0 <tcp_receive+0x1144>)
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	1ad3      	subs	r3, r2, r3
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	dd1b      	ble.n	800aa24 <tcp_receive+0xfb8>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800a9ec:	4b70      	ldr	r3, [pc, #448]	; (800abb0 <tcp_receive+0x1144>)
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	b29a      	uxth	r2, r3
 800a9f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9f4:	68db      	ldr	r3, [r3, #12]
 800a9f6:	7919      	ldrb	r1, [r3, #4]
 800a9f8:	7958      	ldrb	r0, [r3, #5]
 800a9fa:	0200      	lsls	r0, r0, #8
 800a9fc:	4301      	orrs	r1, r0
 800a9fe:	7998      	ldrb	r0, [r3, #6]
 800aa00:	0400      	lsls	r0, r0, #16
 800aa02:	4301      	orrs	r1, r0
 800aa04:	79db      	ldrb	r3, [r3, #7]
 800aa06:	061b      	lsls	r3, r3, #24
 800aa08:	430b      	orrs	r3, r1
 800aa0a:	b29b      	uxth	r3, r3
 800aa0c:	1ad3      	subs	r3, r2, r3
 800aa0e:	b29a      	uxth	r2, r3
 800aa10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa12:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800aa14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa16:	685a      	ldr	r2, [r3, #4]
 800aa18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa1a:	891b      	ldrh	r3, [r3, #8]
 800aa1c:	0019      	movs	r1, r3
 800aa1e:	0010      	movs	r0, r2
 800aa20:	f7fc f8bf 	bl	8006ba2 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if ((u32_t)tcplen + seqno > pcb->rcv_nxt + (u32_t)pcb->rcv_wnd) {
 800aa24:	4b64      	ldr	r3, [pc, #400]	; (800abb8 <tcp_receive+0x114c>)
 800aa26:	881b      	ldrh	r3, [r3, #0]
 800aa28:	001a      	movs	r2, r3
 800aa2a:	4b61      	ldr	r3, [pc, #388]	; (800abb0 <tcp_receive+0x1144>)
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	18d2      	adds	r2, r2, r3
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa34:	6879      	ldr	r1, [r7, #4]
 800aa36:	8d89      	ldrh	r1, [r1, #44]	; 0x2c
 800aa38:	185b      	adds	r3, r3, r1
 800aa3a:	429a      	cmp	r2, r3
 800aa3c:	d800      	bhi.n	800aa40 <tcp_receive+0xfd4>
 800aa3e:	e091      	b.n	800ab64 <tcp_receive+0x10f8>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG, 
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800aa40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	68db      	ldr	r3, [r3, #12]
 800aa46:	7b1a      	ldrb	r2, [r3, #12]
 800aa48:	7b5b      	ldrb	r3, [r3, #13]
 800aa4a:	021b      	lsls	r3, r3, #8
 800aa4c:	4313      	orrs	r3, r2
 800aa4e:	b29b      	uxth	r3, r3
 800aa50:	0018      	movs	r0, r3
 800aa52:	f7fb f96d 	bl	8005d30 <lwip_ntohs>
 800aa56:	0003      	movs	r3, r0
 800aa58:	001a      	movs	r2, r3
 800aa5a:	2301      	movs	r3, #1
 800aa5c:	4013      	ands	r3, r2
 800aa5e:	d039      	beq.n	800aad4 <tcp_receive+0x1068>
                      /* Must remove the FIN from the header as we're trimming 
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) &~ TCP_FIN);
 800aa60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	68db      	ldr	r3, [r3, #12]
 800aa66:	7b1a      	ldrb	r2, [r3, #12]
 800aa68:	7b5b      	ldrb	r3, [r3, #13]
 800aa6a:	021b      	lsls	r3, r3, #8
 800aa6c:	4313      	orrs	r3, r2
 800aa6e:	b29b      	uxth	r3, r3
 800aa70:	b21b      	sxth	r3, r3
 800aa72:	4a52      	ldr	r2, [pc, #328]	; (800abbc <tcp_receive+0x1150>)
 800aa74:	4013      	ands	r3, r2
 800aa76:	b21c      	sxth	r4, r3
 800aa78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	68db      	ldr	r3, [r3, #12]
 800aa7e:	7b1a      	ldrb	r2, [r3, #12]
 800aa80:	7b5b      	ldrb	r3, [r3, #13]
 800aa82:	021b      	lsls	r3, r3, #8
 800aa84:	4313      	orrs	r3, r2
 800aa86:	b29b      	uxth	r3, r3
 800aa88:	0018      	movs	r0, r3
 800aa8a:	f7fb f951 	bl	8005d30 <lwip_ntohs>
 800aa8e:	0003      	movs	r3, r0
 800aa90:	001a      	movs	r2, r3
 800aa92:	233e      	movs	r3, #62	; 0x3e
 800aa94:	4013      	ands	r3, r2
 800aa96:	b29b      	uxth	r3, r3
 800aa98:	0018      	movs	r0, r3
 800aa9a:	f7fb f933 	bl	8005d04 <lwip_htons>
 800aa9e:	0003      	movs	r3, r0
 800aaa0:	b21b      	sxth	r3, r3
 800aaa2:	4323      	orrs	r3, r4
 800aaa4:	b21a      	sxth	r2, r3
 800aaa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	68db      	ldr	r3, [r3, #12]
 800aaac:	b292      	uxth	r2, r2
 800aaae:	21ff      	movs	r1, #255	; 0xff
 800aab0:	4011      	ands	r1, r2
 800aab2:	000c      	movs	r4, r1
 800aab4:	7b19      	ldrb	r1, [r3, #12]
 800aab6:	2000      	movs	r0, #0
 800aab8:	4001      	ands	r1, r0
 800aaba:	1c08      	adds	r0, r1, #0
 800aabc:	1c21      	adds	r1, r4, #0
 800aabe:	4301      	orrs	r1, r0
 800aac0:	7319      	strb	r1, [r3, #12]
 800aac2:	0a12      	lsrs	r2, r2, #8
 800aac4:	b290      	uxth	r0, r2
 800aac6:	7b5a      	ldrb	r2, [r3, #13]
 800aac8:	2100      	movs	r1, #0
 800aaca:	400a      	ands	r2, r1
 800aacc:	1c11      	adds	r1, r2, #0
 800aace:	1c02      	adds	r2, r0, #0
 800aad0:	430a      	orrs	r2, r1
 800aad2:	735a      	strb	r2, [r3, #13]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = pcb->rcv_nxt + pcb->rcv_wnd - seqno;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aad8:	b29a      	uxth	r2, r3
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800aade:	18d3      	adds	r3, r2, r3
 800aae0:	b299      	uxth	r1, r3
 800aae2:	4b33      	ldr	r3, [pc, #204]	; (800abb0 <tcp_receive+0x1144>)
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	b29a      	uxth	r2, r3
 800aae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	1a8a      	subs	r2, r1, r2
 800aaee:	b292      	uxth	r2, r2
 800aaf0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800aaf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	685a      	ldr	r2, [r3, #4]
 800aaf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	891b      	ldrh	r3, [r3, #8]
 800aafe:	0019      	movs	r1, r3
 800ab00:	0010      	movs	r0, r2
 800ab02:	f7fc f84e 	bl	8006ba2 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800ab06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	891c      	ldrh	r4, [r3, #8]
 800ab0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	68db      	ldr	r3, [r3, #12]
 800ab12:	7b1a      	ldrb	r2, [r3, #12]
 800ab14:	7b5b      	ldrb	r3, [r3, #13]
 800ab16:	021b      	lsls	r3, r3, #8
 800ab18:	4313      	orrs	r3, r2
 800ab1a:	b29b      	uxth	r3, r3
 800ab1c:	0018      	movs	r0, r3
 800ab1e:	f7fb f907 	bl	8005d30 <lwip_ntohs>
 800ab22:	0003      	movs	r3, r0
 800ab24:	001a      	movs	r2, r3
 800ab26:	2303      	movs	r3, #3
 800ab28:	4013      	ands	r3, r2
 800ab2a:	1e5a      	subs	r2, r3, #1
 800ab2c:	4193      	sbcs	r3, r2
 800ab2e:	b2db      	uxtb	r3, r3
 800ab30:	b29b      	uxth	r3, r3
 800ab32:	18e3      	adds	r3, r4, r3
 800ab34:	b29a      	uxth	r2, r3
 800ab36:	4b20      	ldr	r3, [pc, #128]	; (800abb8 <tcp_receive+0x114c>)
 800ab38:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800ab3a:	e013      	b.n	800ab64 <tcp_receive+0x10f8>
              }
            }
            prev = next;
 800ab3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab3e:	62bb      	str	r3, [r7, #40]	; 0x28
          for(next = pcb->ooseq; next != NULL; next = next->next) {
 800ab40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ab46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d000      	beq.n	800ab4e <tcp_receive+0x10e2>
 800ab4c:	e63a      	b.n	800a7c4 <tcp_receive+0xd58>
      if (pcb->rcv_nxt == seqno) {
 800ab4e:	e010      	b.n	800ab72 <tcp_receive+0x1106>
                break;
 800ab50:	46c0      	nop			; (mov r8, r8)
 800ab52:	e00e      	b.n	800ab72 <tcp_receive+0x1106>
                break;
 800ab54:	46c0      	nop			; (mov r8, r8)
 800ab56:	e00c      	b.n	800ab72 <tcp_receive+0x1106>
                  break;
 800ab58:	46c0      	nop			; (mov r8, r8)
 800ab5a:	e00a      	b.n	800ab72 <tcp_receive+0x1106>
                  break;
 800ab5c:	46c0      	nop			; (mov r8, r8)
 800ab5e:	e008      	b.n	800ab72 <tcp_receive+0x1106>
                  break;
 800ab60:	46c0      	nop			; (mov r8, r8)
 800ab62:	e006      	b.n	800ab72 <tcp_receive+0x1106>
                break;
 800ab64:	46c0      	nop			; (mov r8, r8)
      if (pcb->rcv_nxt == seqno) {
 800ab66:	e004      	b.n	800ab72 <tcp_receive+0x1106>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not withing the window. */
      tcp_send_empty_ack(pcb);
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	0018      	movs	r0, r3
 800ab6c:	f000 ffec 	bl	800bb48 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, 
 800ab70:	e019      	b.n	800aba6 <tcp_receive+0x113a>
 800ab72:	e018      	b.n	800aba6 <tcp_receive+0x113a>
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    /*if (TCP_SEQ_GT(pcb->rcv_nxt, seqno) ||
      TCP_SEQ_GEQ(seqno, pcb->rcv_nxt + pcb->rcv_wnd)) {*/
    if(!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd-1)){
 800ab74:	4b0e      	ldr	r3, [pc, #56]	; (800abb0 <tcp_receive+0x1144>)
 800ab76:	681a      	ldr	r2, [r3, #0]
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab7c:	1ad3      	subs	r3, r2, r3
 800ab7e:	d40a      	bmi.n	800ab96 <tcp_receive+0x112a>
 800ab80:	4b0b      	ldr	r3, [pc, #44]	; (800abb0 <tcp_receive+0x1144>)
 800ab82:	681a      	ldr	r2, [r3, #0]
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab88:	6879      	ldr	r1, [r7, #4]
 800ab8a:	8d89      	ldrh	r1, [r1, #44]	; 0x2c
 800ab8c:	185b      	adds	r3, r3, r1
 800ab8e:	1ad3      	subs	r3, r2, r3
 800ab90:	3301      	adds	r3, #1
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	dd07      	ble.n	800aba6 <tcp_receive+0x113a>
      tcp_ack_now(pcb);
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	7f9b      	ldrb	r3, [r3, #30]
 800ab9a:	2202      	movs	r2, #2
 800ab9c:	4313      	orrs	r3, r2
 800ab9e:	b2da      	uxtb	r2, r3
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	779a      	strb	r2, [r3, #30]
    }
  }
}
 800aba4:	e7ff      	b.n	800aba6 <tcp_receive+0x113a>
 800aba6:	46c0      	nop			; (mov r8, r8)
 800aba8:	46bd      	mov	sp, r7
 800abaa:	b00d      	add	sp, #52	; 0x34
 800abac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800abae:	46c0      	nop			; (mov r8, r8)
 800abb0:	2000271c 	.word	0x2000271c
 800abb4:	20002704 	.word	0x20002704
 800abb8:	20002726 	.word	0x20002726
 800abbc:	ffffc0ff 	.word	0xffffc0ff

0800abc0 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b086      	sub	sp, #24
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
  u8_t *opts, opt;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  opts = (u8_t *)tcphdr + TCP_HLEN;
 800abc8:	4b56      	ldr	r3, [pc, #344]	; (800ad24 <tcp_parseopt+0x164>)
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	3314      	adds	r3, #20
 800abce:	613b      	str	r3, [r7, #16]

  /* Parse the TCP MSS option, if present. */
  if(TCPH_HDRLEN(tcphdr) > 0x5) {
 800abd0:	4b54      	ldr	r3, [pc, #336]	; (800ad24 <tcp_parseopt+0x164>)
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	7b1a      	ldrb	r2, [r3, #12]
 800abd6:	7b5b      	ldrb	r3, [r3, #13]
 800abd8:	021b      	lsls	r3, r3, #8
 800abda:	4313      	orrs	r3, r2
 800abdc:	b29b      	uxth	r3, r3
 800abde:	0018      	movs	r0, r3
 800abe0:	f7fb f8a6 	bl	8005d30 <lwip_ntohs>
 800abe4:	0003      	movs	r3, r0
 800abe6:	0b1b      	lsrs	r3, r3, #12
 800abe8:	b29b      	uxth	r3, r3
 800abea:	2b05      	cmp	r3, #5
 800abec:	d800      	bhi.n	800abf0 <tcp_parseopt+0x30>
 800abee:	e095      	b.n	800ad1c <tcp_parseopt+0x15c>
    max_c = (TCPH_HDRLEN(tcphdr) - 5) << 2;
 800abf0:	4b4c      	ldr	r3, [pc, #304]	; (800ad24 <tcp_parseopt+0x164>)
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	7b1a      	ldrb	r2, [r3, #12]
 800abf6:	7b5b      	ldrb	r3, [r3, #13]
 800abf8:	021b      	lsls	r3, r3, #8
 800abfa:	4313      	orrs	r3, r2
 800abfc:	b29b      	uxth	r3, r3
 800abfe:	0018      	movs	r0, r3
 800ac00:	f7fb f896 	bl	8005d30 <lwip_ntohs>
 800ac04:	0003      	movs	r3, r0
 800ac06:	0b1b      	lsrs	r3, r3, #12
 800ac08:	b29b      	uxth	r3, r3
 800ac0a:	3b05      	subs	r3, #5
 800ac0c:	b29a      	uxth	r2, r3
 800ac0e:	230e      	movs	r3, #14
 800ac10:	18fb      	adds	r3, r7, r3
 800ac12:	0092      	lsls	r2, r2, #2
 800ac14:	801a      	strh	r2, [r3, #0]
    for (c = 0; c < max_c; ) {
 800ac16:	2316      	movs	r3, #22
 800ac18:	18fb      	adds	r3, r7, r3
 800ac1a:	2200      	movs	r2, #0
 800ac1c:	801a      	strh	r2, [r3, #0]
 800ac1e:	e06e      	b.n	800acfe <tcp_parseopt+0x13e>
      opt = opts[c];
 800ac20:	2316      	movs	r3, #22
 800ac22:	18fb      	adds	r3, r7, r3
 800ac24:	881b      	ldrh	r3, [r3, #0]
 800ac26:	693a      	ldr	r2, [r7, #16]
 800ac28:	18d2      	adds	r2, r2, r3
 800ac2a:	210d      	movs	r1, #13
 800ac2c:	187b      	adds	r3, r7, r1
 800ac2e:	7812      	ldrb	r2, [r2, #0]
 800ac30:	701a      	strb	r2, [r3, #0]
      switch (opt) {
 800ac32:	187b      	adds	r3, r7, r1
 800ac34:	781b      	ldrb	r3, [r3, #0]
 800ac36:	2b01      	cmp	r3, #1
 800ac38:	d005      	beq.n	800ac46 <tcp_parseopt+0x86>
 800ac3a:	2b02      	cmp	r3, #2
 800ac3c:	d00a      	beq.n	800ac54 <tcp_parseopt+0x94>
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d100      	bne.n	800ac44 <tcp_parseopt+0x84>
 800ac42:	e066      	b.n	800ad12 <tcp_parseopt+0x152>
 800ac44:	e045      	b.n	800acd2 <tcp_parseopt+0x112>
        /* End of options. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
        return;
      case 0x01:
        /* NOP option. */
        ++c;
 800ac46:	2216      	movs	r2, #22
 800ac48:	18bb      	adds	r3, r7, r2
 800ac4a:	18ba      	adds	r2, r7, r2
 800ac4c:	8812      	ldrh	r2, [r2, #0]
 800ac4e:	3201      	adds	r2, #1
 800ac50:	801a      	strh	r2, [r3, #0]
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
 800ac52:	e054      	b.n	800acfe <tcp_parseopt+0x13e>
      case 0x02:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (opts[c + 1] != 0x04 || c + 0x04 > max_c) {
 800ac54:	2316      	movs	r3, #22
 800ac56:	18fb      	adds	r3, r7, r3
 800ac58:	881b      	ldrh	r3, [r3, #0]
 800ac5a:	3301      	adds	r3, #1
 800ac5c:	693a      	ldr	r2, [r7, #16]
 800ac5e:	18d3      	adds	r3, r2, r3
 800ac60:	781b      	ldrb	r3, [r3, #0]
 800ac62:	2b04      	cmp	r3, #4
 800ac64:	d157      	bne.n	800ad16 <tcp_parseopt+0x156>
 800ac66:	2316      	movs	r3, #22
 800ac68:	18fb      	adds	r3, r7, r3
 800ac6a:	881b      	ldrh	r3, [r3, #0]
 800ac6c:	1d1a      	adds	r2, r3, #4
 800ac6e:	230e      	movs	r3, #14
 800ac70:	18fb      	adds	r3, r7, r3
 800ac72:	881b      	ldrh	r3, [r3, #0]
 800ac74:	429a      	cmp	r2, r3
 800ac76:	dc4e      	bgt.n	800ad16 <tcp_parseopt+0x156>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (opts[c + 2] << 8) | opts[c + 3];
 800ac78:	2116      	movs	r1, #22
 800ac7a:	187b      	adds	r3, r7, r1
 800ac7c:	881b      	ldrh	r3, [r3, #0]
 800ac7e:	3302      	adds	r3, #2
 800ac80:	693a      	ldr	r2, [r7, #16]
 800ac82:	18d3      	adds	r3, r2, r3
 800ac84:	781b      	ldrb	r3, [r3, #0]
 800ac86:	021b      	lsls	r3, r3, #8
 800ac88:	b21a      	sxth	r2, r3
 800ac8a:	187b      	adds	r3, r7, r1
 800ac8c:	881b      	ldrh	r3, [r3, #0]
 800ac8e:	3303      	adds	r3, #3
 800ac90:	6939      	ldr	r1, [r7, #16]
 800ac92:	18cb      	adds	r3, r1, r3
 800ac94:	781b      	ldrb	r3, [r3, #0]
 800ac96:	b21b      	sxth	r3, r3
 800ac98:	4313      	orrs	r3, r2
 800ac9a:	b21a      	sxth	r2, r3
 800ac9c:	210a      	movs	r1, #10
 800ac9e:	187b      	adds	r3, r7, r1
 800aca0:	801a      	strh	r2, [r3, #0]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800aca2:	187b      	adds	r3, r7, r1
 800aca4:	881b      	ldrh	r3, [r3, #0]
 800aca6:	4a20      	ldr	r2, [pc, #128]	; (800ad28 <tcp_parseopt+0x168>)
 800aca8:	4293      	cmp	r3, r2
 800acaa:	d808      	bhi.n	800acbe <tcp_parseopt+0xfe>
 800acac:	230a      	movs	r3, #10
 800acae:	18fb      	adds	r3, r7, r3
 800acb0:	881b      	ldrh	r3, [r3, #0]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d003      	beq.n	800acbe <tcp_parseopt+0xfe>
 800acb6:	230a      	movs	r3, #10
 800acb8:	18fb      	adds	r3, r7, r3
 800acba:	881a      	ldrh	r2, [r3, #0]
 800acbc:	e000      	b.n	800acc0 <tcp_parseopt+0x100>
 800acbe:	4a1a      	ldr	r2, [pc, #104]	; (800ad28 <tcp_parseopt+0x168>)
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Advance to next option */
        c += 0x04;
 800acc4:	2216      	movs	r2, #22
 800acc6:	18bb      	adds	r3, r7, r2
 800acc8:	18ba      	adds	r2, r7, r2
 800acca:	8812      	ldrh	r2, [r2, #0]
 800accc:	3204      	adds	r2, #4
 800acce:	801a      	strh	r2, [r3, #0]
        break;
 800acd0:	e015      	b.n	800acfe <tcp_parseopt+0x13e>
        c += 0x0A;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        if (opts[c + 1] == 0) {
 800acd2:	2316      	movs	r3, #22
 800acd4:	18fb      	adds	r3, r7, r3
 800acd6:	881b      	ldrh	r3, [r3, #0]
 800acd8:	3301      	adds	r3, #1
 800acda:	693a      	ldr	r2, [r7, #16]
 800acdc:	18d3      	adds	r3, r2, r3
 800acde:	781b      	ldrb	r3, [r3, #0]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d01a      	beq.n	800ad1a <tcp_parseopt+0x15a>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        c += opts[c + 1];
 800ace4:	2016      	movs	r0, #22
 800ace6:	183b      	adds	r3, r7, r0
 800ace8:	881b      	ldrh	r3, [r3, #0]
 800acea:	3301      	adds	r3, #1
 800acec:	693a      	ldr	r2, [r7, #16]
 800acee:	18d3      	adds	r3, r2, r3
 800acf0:	781b      	ldrb	r3, [r3, #0]
 800acf2:	b299      	uxth	r1, r3
 800acf4:	183b      	adds	r3, r7, r0
 800acf6:	183a      	adds	r2, r7, r0
 800acf8:	8812      	ldrh	r2, [r2, #0]
 800acfa:	188a      	adds	r2, r1, r2
 800acfc:	801a      	strh	r2, [r3, #0]
    for (c = 0; c < max_c; ) {
 800acfe:	2316      	movs	r3, #22
 800ad00:	18fa      	adds	r2, r7, r3
 800ad02:	230e      	movs	r3, #14
 800ad04:	18fb      	adds	r3, r7, r3
 800ad06:	8812      	ldrh	r2, [r2, #0]
 800ad08:	881b      	ldrh	r3, [r3, #0]
 800ad0a:	429a      	cmp	r2, r3
 800ad0c:	d200      	bcs.n	800ad10 <tcp_parseopt+0x150>
 800ad0e:	e787      	b.n	800ac20 <tcp_parseopt+0x60>
 800ad10:	e004      	b.n	800ad1c <tcp_parseopt+0x15c>
        return;
 800ad12:	46c0      	nop			; (mov r8, r8)
 800ad14:	e002      	b.n	800ad1c <tcp_parseopt+0x15c>
          return;
 800ad16:	46c0      	nop			; (mov r8, r8)
 800ad18:	e000      	b.n	800ad1c <tcp_parseopt+0x15c>
          return;
 800ad1a:	46c0      	nop			; (mov r8, r8)
      }
    }
  }
}
 800ad1c:	46bd      	mov	sp, r7
 800ad1e:	b006      	add	sp, #24
 800ad20:	bd80      	pop	{r7, pc}
 800ad22:	46c0      	nop			; (mov r8, r8)
 800ad24:	20002714 	.word	0x20002714
 800ad28:	000005b4 	.word	0x000005b4

0800ad2c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
 800ad2c:	b590      	push	{r4, r7, lr}
 800ad2e:	b087      	sub	sp, #28
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	60f8      	str	r0, [r7, #12]
 800ad34:	0008      	movs	r0, r1
 800ad36:	0011      	movs	r1, r2
 800ad38:	607b      	str	r3, [r7, #4]
 800ad3a:	240a      	movs	r4, #10
 800ad3c:	193b      	adds	r3, r7, r4
 800ad3e:	1c02      	adds	r2, r0, #0
 800ad40:	801a      	strh	r2, [r3, #0]
 800ad42:	2008      	movs	r0, #8
 800ad44:	183b      	adds	r3, r7, r0
 800ad46:	1c0a      	adds	r2, r1, #0
 800ad48:	801a      	strh	r2, [r3, #0]
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800ad4a:	193a      	adds	r2, r7, r4
 800ad4c:	183b      	adds	r3, r7, r0
 800ad4e:	8812      	ldrh	r2, [r2, #0]
 800ad50:	881b      	ldrh	r3, [r3, #0]
 800ad52:	18d3      	adds	r3, r2, r3
 800ad54:	b29b      	uxth	r3, r3
 800ad56:	3314      	adds	r3, #20
 800ad58:	b29b      	uxth	r3, r3
 800ad5a:	2200      	movs	r2, #0
 800ad5c:	0019      	movs	r1, r3
 800ad5e:	2001      	movs	r0, #1
 800ad60:	f7fb fd8c 	bl	800687c <pbuf_alloc>
 800ad64:	0003      	movs	r3, r0
 800ad66:	617b      	str	r3, [r7, #20]
  if (p != NULL) {
 800ad68:	697b      	ldr	r3, [r7, #20]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d100      	bne.n	800ad70 <tcp_output_alloc_header+0x44>
 800ad6e:	e0e5      	b.n	800af3c <tcp_output_alloc_header+0x210>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800ad70:	697b      	ldr	r3, [r7, #20]
 800ad72:	685b      	ldr	r3, [r3, #4]
 800ad74:	613b      	str	r3, [r7, #16]
    tcphdr->src = htons(pcb->local_port);
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	8b5b      	ldrh	r3, [r3, #26]
 800ad7a:	0018      	movs	r0, r3
 800ad7c:	f7fa ffc2 	bl	8005d04 <lwip_htons>
 800ad80:	0003      	movs	r3, r0
 800ad82:	001a      	movs	r2, r3
 800ad84:	693b      	ldr	r3, [r7, #16]
 800ad86:	21ff      	movs	r1, #255	; 0xff
 800ad88:	4011      	ands	r1, r2
 800ad8a:	000c      	movs	r4, r1
 800ad8c:	7819      	ldrb	r1, [r3, #0]
 800ad8e:	2000      	movs	r0, #0
 800ad90:	4001      	ands	r1, r0
 800ad92:	1c08      	adds	r0, r1, #0
 800ad94:	1c21      	adds	r1, r4, #0
 800ad96:	4301      	orrs	r1, r0
 800ad98:	7019      	strb	r1, [r3, #0]
 800ad9a:	0a12      	lsrs	r2, r2, #8
 800ad9c:	b290      	uxth	r0, r2
 800ad9e:	785a      	ldrb	r2, [r3, #1]
 800ada0:	2100      	movs	r1, #0
 800ada2:	400a      	ands	r2, r1
 800ada4:	1c11      	adds	r1, r2, #0
 800ada6:	1c02      	adds	r2, r0, #0
 800ada8:	430a      	orrs	r2, r1
 800adaa:	705a      	strb	r2, [r3, #1]
    tcphdr->dest = htons(pcb->remote_port);
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	8b9b      	ldrh	r3, [r3, #28]
 800adb0:	0018      	movs	r0, r3
 800adb2:	f7fa ffa7 	bl	8005d04 <lwip_htons>
 800adb6:	0003      	movs	r3, r0
 800adb8:	001a      	movs	r2, r3
 800adba:	693b      	ldr	r3, [r7, #16]
 800adbc:	21ff      	movs	r1, #255	; 0xff
 800adbe:	4011      	ands	r1, r2
 800adc0:	000c      	movs	r4, r1
 800adc2:	7899      	ldrb	r1, [r3, #2]
 800adc4:	2000      	movs	r0, #0
 800adc6:	4001      	ands	r1, r0
 800adc8:	1c08      	adds	r0, r1, #0
 800adca:	1c21      	adds	r1, r4, #0
 800adcc:	4301      	orrs	r1, r0
 800adce:	7099      	strb	r1, [r3, #2]
 800add0:	0a12      	lsrs	r2, r2, #8
 800add2:	b290      	uxth	r0, r2
 800add4:	78da      	ldrb	r2, [r3, #3]
 800add6:	2100      	movs	r1, #0
 800add8:	400a      	ands	r2, r1
 800adda:	1c11      	adds	r1, r2, #0
 800addc:	1c02      	adds	r2, r0, #0
 800adde:	430a      	orrs	r2, r1
 800ade0:	70da      	strb	r2, [r3, #3]
    tcphdr->seqno = seqno_be;
 800ade2:	693b      	ldr	r3, [r7, #16]
 800ade4:	1d3a      	adds	r2, r7, #4
 800ade6:	7810      	ldrb	r0, [r2, #0]
 800ade8:	791a      	ldrb	r2, [r3, #4]
 800adea:	2100      	movs	r1, #0
 800adec:	400a      	ands	r2, r1
 800adee:	1c11      	adds	r1, r2, #0
 800adf0:	1c02      	adds	r2, r0, #0
 800adf2:	430a      	orrs	r2, r1
 800adf4:	711a      	strb	r2, [r3, #4]
 800adf6:	1d7a      	adds	r2, r7, #5
 800adf8:	7810      	ldrb	r0, [r2, #0]
 800adfa:	795a      	ldrb	r2, [r3, #5]
 800adfc:	2100      	movs	r1, #0
 800adfe:	400a      	ands	r2, r1
 800ae00:	1c11      	adds	r1, r2, #0
 800ae02:	1c02      	adds	r2, r0, #0
 800ae04:	430a      	orrs	r2, r1
 800ae06:	715a      	strb	r2, [r3, #5]
 800ae08:	1dba      	adds	r2, r7, #6
 800ae0a:	7810      	ldrb	r0, [r2, #0]
 800ae0c:	799a      	ldrb	r2, [r3, #6]
 800ae0e:	2100      	movs	r1, #0
 800ae10:	400a      	ands	r2, r1
 800ae12:	1c11      	adds	r1, r2, #0
 800ae14:	1c02      	adds	r2, r0, #0
 800ae16:	430a      	orrs	r2, r1
 800ae18:	719a      	strb	r2, [r3, #6]
 800ae1a:	1dfa      	adds	r2, r7, #7
 800ae1c:	7810      	ldrb	r0, [r2, #0]
 800ae1e:	79da      	ldrb	r2, [r3, #7]
 800ae20:	2100      	movs	r1, #0
 800ae22:	400a      	ands	r2, r1
 800ae24:	1c11      	adds	r1, r2, #0
 800ae26:	1c02      	adds	r2, r0, #0
 800ae28:	430a      	orrs	r2, r1
 800ae2a:	71da      	strb	r2, [r3, #7]
    tcphdr->ackno = htonl(pcb->rcv_nxt);
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae30:	0018      	movs	r0, r3
 800ae32:	f7fa ff8d 	bl	8005d50 <lwip_htonl>
 800ae36:	0002      	movs	r2, r0
 800ae38:	693b      	ldr	r3, [r7, #16]
 800ae3a:	21ff      	movs	r1, #255	; 0xff
 800ae3c:	4011      	ands	r1, r2
 800ae3e:	000c      	movs	r4, r1
 800ae40:	7a19      	ldrb	r1, [r3, #8]
 800ae42:	2000      	movs	r0, #0
 800ae44:	4001      	ands	r1, r0
 800ae46:	1c08      	adds	r0, r1, #0
 800ae48:	1c21      	adds	r1, r4, #0
 800ae4a:	4301      	orrs	r1, r0
 800ae4c:	7219      	strb	r1, [r3, #8]
 800ae4e:	0a11      	lsrs	r1, r2, #8
 800ae50:	20ff      	movs	r0, #255	; 0xff
 800ae52:	4001      	ands	r1, r0
 800ae54:	000c      	movs	r4, r1
 800ae56:	7a59      	ldrb	r1, [r3, #9]
 800ae58:	2000      	movs	r0, #0
 800ae5a:	4001      	ands	r1, r0
 800ae5c:	1c08      	adds	r0, r1, #0
 800ae5e:	1c21      	adds	r1, r4, #0
 800ae60:	4301      	orrs	r1, r0
 800ae62:	7259      	strb	r1, [r3, #9]
 800ae64:	0c11      	lsrs	r1, r2, #16
 800ae66:	20ff      	movs	r0, #255	; 0xff
 800ae68:	4001      	ands	r1, r0
 800ae6a:	000c      	movs	r4, r1
 800ae6c:	7a99      	ldrb	r1, [r3, #10]
 800ae6e:	2000      	movs	r0, #0
 800ae70:	4001      	ands	r1, r0
 800ae72:	1c08      	adds	r0, r1, #0
 800ae74:	1c21      	adds	r1, r4, #0
 800ae76:	4301      	orrs	r1, r0
 800ae78:	7299      	strb	r1, [r3, #10]
 800ae7a:	0e10      	lsrs	r0, r2, #24
 800ae7c:	7ada      	ldrb	r2, [r3, #11]
 800ae7e:	2100      	movs	r1, #0
 800ae80:	400a      	ands	r2, r1
 800ae82:	1c11      	adds	r1, r2, #0
 800ae84:	1c02      	adds	r2, r0, #0
 800ae86:	430a      	orrs	r2, r1
 800ae88:	72da      	strb	r2, [r3, #11]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 800ae8a:	230a      	movs	r3, #10
 800ae8c:	18fb      	adds	r3, r7, r3
 800ae8e:	881b      	ldrh	r3, [r3, #0]
 800ae90:	089b      	lsrs	r3, r3, #2
 800ae92:	b29b      	uxth	r3, r3
 800ae94:	3305      	adds	r3, #5
 800ae96:	b29b      	uxth	r3, r3
 800ae98:	031b      	lsls	r3, r3, #12
 800ae9a:	b29b      	uxth	r3, r3
 800ae9c:	2210      	movs	r2, #16
 800ae9e:	4313      	orrs	r3, r2
 800aea0:	b29b      	uxth	r3, r3
 800aea2:	0018      	movs	r0, r3
 800aea4:	f7fa ff2e 	bl	8005d04 <lwip_htons>
 800aea8:	0003      	movs	r3, r0
 800aeaa:	001a      	movs	r2, r3
 800aeac:	693b      	ldr	r3, [r7, #16]
 800aeae:	21ff      	movs	r1, #255	; 0xff
 800aeb0:	4011      	ands	r1, r2
 800aeb2:	000c      	movs	r4, r1
 800aeb4:	7b19      	ldrb	r1, [r3, #12]
 800aeb6:	2000      	movs	r0, #0
 800aeb8:	4001      	ands	r1, r0
 800aeba:	1c08      	adds	r0, r1, #0
 800aebc:	1c21      	adds	r1, r4, #0
 800aebe:	4301      	orrs	r1, r0
 800aec0:	7319      	strb	r1, [r3, #12]
 800aec2:	0a12      	lsrs	r2, r2, #8
 800aec4:	b290      	uxth	r0, r2
 800aec6:	7b5a      	ldrb	r2, [r3, #13]
 800aec8:	2100      	movs	r1, #0
 800aeca:	400a      	ands	r2, r1
 800aecc:	1c11      	adds	r1, r2, #0
 800aece:	1c02      	adds	r2, r0, #0
 800aed0:	430a      	orrs	r2, r1
 800aed2:	735a      	strb	r2, [r3, #13]
    tcphdr->wnd = htons(pcb->rcv_ann_wnd);
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800aed8:	0018      	movs	r0, r3
 800aeda:	f7fa ff13 	bl	8005d04 <lwip_htons>
 800aede:	0003      	movs	r3, r0
 800aee0:	001a      	movs	r2, r3
 800aee2:	693b      	ldr	r3, [r7, #16]
 800aee4:	21ff      	movs	r1, #255	; 0xff
 800aee6:	4011      	ands	r1, r2
 800aee8:	000c      	movs	r4, r1
 800aeea:	7b99      	ldrb	r1, [r3, #14]
 800aeec:	2000      	movs	r0, #0
 800aeee:	4001      	ands	r1, r0
 800aef0:	1c08      	adds	r0, r1, #0
 800aef2:	1c21      	adds	r1, r4, #0
 800aef4:	4301      	orrs	r1, r0
 800aef6:	7399      	strb	r1, [r3, #14]
 800aef8:	0a12      	lsrs	r2, r2, #8
 800aefa:	b290      	uxth	r0, r2
 800aefc:	7bda      	ldrb	r2, [r3, #15]
 800aefe:	2100      	movs	r1, #0
 800af00:	400a      	ands	r2, r1
 800af02:	1c11      	adds	r1, r2, #0
 800af04:	1c02      	adds	r2, r0, #0
 800af06:	430a      	orrs	r2, r1
 800af08:	73da      	strb	r2, [r3, #15]
    tcphdr->chksum = 0;
 800af0a:	693b      	ldr	r3, [r7, #16]
 800af0c:	7c1a      	ldrb	r2, [r3, #16]
 800af0e:	2100      	movs	r1, #0
 800af10:	400a      	ands	r2, r1
 800af12:	741a      	strb	r2, [r3, #16]
 800af14:	7c5a      	ldrb	r2, [r3, #17]
 800af16:	2100      	movs	r1, #0
 800af18:	400a      	ands	r2, r1
 800af1a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800af1c:	693b      	ldr	r3, [r7, #16]
 800af1e:	7c9a      	ldrb	r2, [r3, #18]
 800af20:	2100      	movs	r1, #0
 800af22:	400a      	ands	r2, r1
 800af24:	749a      	strb	r2, [r3, #18]
 800af26:	7cda      	ldrb	r2, [r3, #19]
 800af28:	2100      	movs	r1, #0
 800af2a:	400a      	ands	r2, r1
 800af2c:	74da      	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af32:	68fa      	ldr	r2, [r7, #12]
 800af34:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 800af36:	189a      	adds	r2, r3, r2
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	631a      	str	r2, [r3, #48]	; 0x30
  }
  return p;
 800af3c:	697b      	ldr	r3, [r7, #20]
}
 800af3e:	0018      	movs	r0, r3
 800af40:	46bd      	mov	sp, r7
 800af42:	b007      	add	sp, #28
 800af44:	bd90      	pop	{r4, r7, pc}

0800af46 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800af46:	b590      	push	{r4, r7, lr}
 800af48:	b085      	sub	sp, #20
 800af4a:	af00      	add	r7, sp, #0
 800af4c:	6078      	str	r0, [r7, #4]
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af52:	2b00      	cmp	r3, #0
 800af54:	d045      	beq.n	800afe2 <tcp_send_fin+0x9c>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af5a:	60fb      	str	r3, [r7, #12]
 800af5c:	e002      	b.n	800af64 <tcp_send_fin+0x1e>
         last_unsent = last_unsent->next);
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d1f8      	bne.n	800af5e <tcp_send_fin+0x18>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	68db      	ldr	r3, [r3, #12]
 800af70:	7b1a      	ldrb	r2, [r3, #12]
 800af72:	7b5b      	ldrb	r3, [r3, #13]
 800af74:	021b      	lsls	r3, r3, #8
 800af76:	4313      	orrs	r3, r2
 800af78:	b29b      	uxth	r3, r3
 800af7a:	0018      	movs	r0, r3
 800af7c:	f7fa fed8 	bl	8005d30 <lwip_ntohs>
 800af80:	0003      	movs	r3, r0
 800af82:	001a      	movs	r2, r3
 800af84:	2307      	movs	r3, #7
 800af86:	4013      	ands	r3, r2
 800af88:	d12b      	bne.n	800afe2 <tcp_send_fin+0x9c>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	68db      	ldr	r3, [r3, #12]
 800af8e:	7b1a      	ldrb	r2, [r3, #12]
 800af90:	7b5b      	ldrb	r3, [r3, #13]
 800af92:	021b      	lsls	r3, r3, #8
 800af94:	4313      	orrs	r3, r2
 800af96:	b29c      	uxth	r4, r3
 800af98:	2001      	movs	r0, #1
 800af9a:	f7fa feb3 	bl	8005d04 <lwip_htons>
 800af9e:	0003      	movs	r3, r0
 800afa0:	001a      	movs	r2, r3
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	68db      	ldr	r3, [r3, #12]
 800afa6:	4322      	orrs	r2, r4
 800afa8:	b292      	uxth	r2, r2
 800afaa:	21ff      	movs	r1, #255	; 0xff
 800afac:	4011      	ands	r1, r2
 800afae:	000c      	movs	r4, r1
 800afb0:	7b19      	ldrb	r1, [r3, #12]
 800afb2:	2000      	movs	r0, #0
 800afb4:	4001      	ands	r1, r0
 800afb6:	1c08      	adds	r0, r1, #0
 800afb8:	1c21      	adds	r1, r4, #0
 800afba:	4301      	orrs	r1, r0
 800afbc:	7319      	strb	r1, [r3, #12]
 800afbe:	0a12      	lsrs	r2, r2, #8
 800afc0:	b290      	uxth	r0, r2
 800afc2:	7b5a      	ldrb	r2, [r3, #13]
 800afc4:	2100      	movs	r1, #0
 800afc6:	400a      	ands	r2, r1
 800afc8:	1c11      	adds	r1, r2, #0
 800afca:	1c02      	adds	r2, r0, #0
 800afcc:	430a      	orrs	r2, r1
 800afce:	735a      	strb	r2, [r3, #13]
      pcb->flags |= TF_FIN;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	7f9b      	ldrb	r3, [r3, #30]
 800afd4:	2220      	movs	r2, #32
 800afd6:	4313      	orrs	r3, r2
 800afd8:	b2da      	uxtb	r2, r3
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	779a      	strb	r2, [r3, #30]
      return ERR_OK;
 800afde:	2300      	movs	r3, #0
 800afe0:	e005      	b.n	800afee <tcp_send_fin+0xa8>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	2101      	movs	r1, #1
 800afe6:	0018      	movs	r0, r3
 800afe8:	f000 fcb4 	bl	800b954 <tcp_enqueue_flags>
 800afec:	0003      	movs	r3, r0
}
 800afee:	0018      	movs	r0, r3
 800aff0:	46bd      	mov	sp, r7
 800aff2:	b005      	add	sp, #20
 800aff4:	bd90      	pop	{r4, r7, pc}
	...

0800aff8 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 800aff8:	b590      	push	{r4, r7, lr}
 800affa:	b087      	sub	sp, #28
 800affc:	af00      	add	r7, sp, #0
 800affe:	60f8      	str	r0, [r7, #12]
 800b000:	60b9      	str	r1, [r7, #8]
 800b002:	603b      	str	r3, [r7, #0]
 800b004:	1dfb      	adds	r3, r7, #7
 800b006:	701a      	strb	r2, [r3, #0]
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800b008:	2028      	movs	r0, #40	; 0x28
 800b00a:	183b      	adds	r3, r7, r0
 800b00c:	781b      	ldrb	r3, [r3, #0]
 800b00e:	009b      	lsls	r3, r3, #2
 800b010:	b2db      	uxtb	r3, r3
 800b012:	2204      	movs	r2, #4
 800b014:	4013      	ands	r3, r2
 800b016:	b2d9      	uxtb	r1, r3
 800b018:	183b      	adds	r3, r7, r0
 800b01a:	781b      	ldrb	r3, [r3, #0]
 800b01c:	2202      	movs	r2, #2
 800b01e:	4013      	ands	r3, r2
 800b020:	d001      	beq.n	800b026 <tcp_create_segment+0x2e>
 800b022:	230c      	movs	r3, #12
 800b024:	e000      	b.n	800b028 <tcp_create_segment+0x30>
 800b026:	2300      	movs	r3, #0
 800b028:	2217      	movs	r2, #23
 800b02a:	18ba      	adds	r2, r7, r2
 800b02c:	185b      	adds	r3, r3, r1
 800b02e:	7013      	strb	r3, [r2, #0]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800b030:	2004      	movs	r0, #4
 800b032:	f7fb fa67 	bl	8006504 <memp_malloc>
 800b036:	0003      	movs	r3, r0
 800b038:	613b      	str	r3, [r7, #16]
 800b03a:	693b      	ldr	r3, [r7, #16]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d105      	bne.n	800b04c <tcp_create_segment+0x54>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 2, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800b040:	68bb      	ldr	r3, [r7, #8]
 800b042:	0018      	movs	r0, r3
 800b044:	f7fb fea6 	bl	8006d94 <pbuf_free>
    return NULL;
 800b048:	2300      	movs	r3, #0
 800b04a:	e0c5      	b.n	800b1d8 <tcp_create_segment+0x1e0>
  }
  seg->flags = optflags;
 800b04c:	693b      	ldr	r3, [r7, #16]
 800b04e:	2228      	movs	r2, #40	; 0x28
 800b050:	18ba      	adds	r2, r7, r2
 800b052:	7812      	ldrb	r2, [r2, #0]
 800b054:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800b056:	693b      	ldr	r3, [r7, #16]
 800b058:	2200      	movs	r2, #0
 800b05a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800b05c:	693b      	ldr	r3, [r7, #16]
 800b05e:	68ba      	ldr	r2, [r7, #8]
 800b060:	605a      	str	r2, [r3, #4]
  seg->len = p->tot_len - optlen;
 800b062:	68bb      	ldr	r3, [r7, #8]
 800b064:	891a      	ldrh	r2, [r3, #8]
 800b066:	2317      	movs	r3, #23
 800b068:	18fb      	adds	r3, r7, r3
 800b06a:	781b      	ldrb	r3, [r3, #0]
 800b06c:	b29b      	uxth	r3, r3
 800b06e:	1ad3      	subs	r3, r2, r3
 800b070:	b29a      	uxth	r2, r3
 800b072:	693b      	ldr	r3, [r7, #16]
 800b074:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
 800b076:	68bb      	ldr	r3, [r7, #8]
 800b078:	2114      	movs	r1, #20
 800b07a:	0018      	movs	r0, r3
 800b07c:	f7fb fe03 	bl	8006c86 <pbuf_header>
 800b080:	1e03      	subs	r3, r0, #0
 800b082:	d00d      	beq.n	800b0a0 <tcp_create_segment+0xa8>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 2, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
 800b084:	4b56      	ldr	r3, [pc, #344]	; (800b1e0 <tcp_create_segment+0x1e8>)
 800b086:	22a4      	movs	r2, #164	; 0xa4
 800b088:	5a9b      	ldrh	r3, [r3, r2]
 800b08a:	3301      	adds	r3, #1
 800b08c:	b299      	uxth	r1, r3
 800b08e:	4b54      	ldr	r3, [pc, #336]	; (800b1e0 <tcp_create_segment+0x1e8>)
 800b090:	22a4      	movs	r2, #164	; 0xa4
 800b092:	5299      	strh	r1, [r3, r2]
    tcp_seg_free(seg);
 800b094:	693b      	ldr	r3, [r7, #16]
 800b096:	0018      	movs	r0, r3
 800b098:	f7fd f81b 	bl	80080d2 <tcp_seg_free>
    return NULL;
 800b09c:	2300      	movs	r3, #0
 800b09e:	e09b      	b.n	800b1d8 <tcp_create_segment+0x1e0>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800b0a0:	693b      	ldr	r3, [r7, #16]
 800b0a2:	685b      	ldr	r3, [r3, #4]
 800b0a4:	685a      	ldr	r2, [r3, #4]
 800b0a6:	693b      	ldr	r3, [r7, #16]
 800b0a8:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = htons(pcb->local_port);
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	8b5a      	ldrh	r2, [r3, #26]
 800b0ae:	693b      	ldr	r3, [r7, #16]
 800b0b0:	68dc      	ldr	r4, [r3, #12]
 800b0b2:	0010      	movs	r0, r2
 800b0b4:	f7fa fe26 	bl	8005d04 <lwip_htons>
 800b0b8:	0003      	movs	r3, r0
 800b0ba:	22ff      	movs	r2, #255	; 0xff
 800b0bc:	401a      	ands	r2, r3
 800b0be:	0010      	movs	r0, r2
 800b0c0:	7822      	ldrb	r2, [r4, #0]
 800b0c2:	2100      	movs	r1, #0
 800b0c4:	400a      	ands	r2, r1
 800b0c6:	1c11      	adds	r1, r2, #0
 800b0c8:	1c02      	adds	r2, r0, #0
 800b0ca:	430a      	orrs	r2, r1
 800b0cc:	7022      	strb	r2, [r4, #0]
 800b0ce:	0a1b      	lsrs	r3, r3, #8
 800b0d0:	b299      	uxth	r1, r3
 800b0d2:	7863      	ldrb	r3, [r4, #1]
 800b0d4:	2200      	movs	r2, #0
 800b0d6:	4013      	ands	r3, r2
 800b0d8:	1c1a      	adds	r2, r3, #0
 800b0da:	1c0b      	adds	r3, r1, #0
 800b0dc:	4313      	orrs	r3, r2
 800b0de:	7063      	strb	r3, [r4, #1]
  seg->tcphdr->dest = htons(pcb->remote_port);
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	8b9a      	ldrh	r2, [r3, #28]
 800b0e4:	693b      	ldr	r3, [r7, #16]
 800b0e6:	68dc      	ldr	r4, [r3, #12]
 800b0e8:	0010      	movs	r0, r2
 800b0ea:	f7fa fe0b 	bl	8005d04 <lwip_htons>
 800b0ee:	0003      	movs	r3, r0
 800b0f0:	22ff      	movs	r2, #255	; 0xff
 800b0f2:	401a      	ands	r2, r3
 800b0f4:	0010      	movs	r0, r2
 800b0f6:	78a2      	ldrb	r2, [r4, #2]
 800b0f8:	2100      	movs	r1, #0
 800b0fa:	400a      	ands	r2, r1
 800b0fc:	1c11      	adds	r1, r2, #0
 800b0fe:	1c02      	adds	r2, r0, #0
 800b100:	430a      	orrs	r2, r1
 800b102:	70a2      	strb	r2, [r4, #2]
 800b104:	0a1b      	lsrs	r3, r3, #8
 800b106:	b299      	uxth	r1, r3
 800b108:	78e3      	ldrb	r3, [r4, #3]
 800b10a:	2200      	movs	r2, #0
 800b10c:	4013      	ands	r3, r2
 800b10e:	1c1a      	adds	r2, r3, #0
 800b110:	1c0b      	adds	r3, r1, #0
 800b112:	4313      	orrs	r3, r2
 800b114:	70e3      	strb	r3, [r4, #3]
  seg->tcphdr->seqno = htonl(seqno);
 800b116:	693b      	ldr	r3, [r7, #16]
 800b118:	68dc      	ldr	r4, [r3, #12]
 800b11a:	683b      	ldr	r3, [r7, #0]
 800b11c:	0018      	movs	r0, r3
 800b11e:	f7fa fe17 	bl	8005d50 <lwip_htonl>
 800b122:	0003      	movs	r3, r0
 800b124:	22ff      	movs	r2, #255	; 0xff
 800b126:	401a      	ands	r2, r3
 800b128:	0010      	movs	r0, r2
 800b12a:	7922      	ldrb	r2, [r4, #4]
 800b12c:	2100      	movs	r1, #0
 800b12e:	400a      	ands	r2, r1
 800b130:	1c11      	adds	r1, r2, #0
 800b132:	1c02      	adds	r2, r0, #0
 800b134:	430a      	orrs	r2, r1
 800b136:	7122      	strb	r2, [r4, #4]
 800b138:	0a1a      	lsrs	r2, r3, #8
 800b13a:	21ff      	movs	r1, #255	; 0xff
 800b13c:	400a      	ands	r2, r1
 800b13e:	0010      	movs	r0, r2
 800b140:	7962      	ldrb	r2, [r4, #5]
 800b142:	2100      	movs	r1, #0
 800b144:	400a      	ands	r2, r1
 800b146:	1c11      	adds	r1, r2, #0
 800b148:	1c02      	adds	r2, r0, #0
 800b14a:	430a      	orrs	r2, r1
 800b14c:	7162      	strb	r2, [r4, #5]
 800b14e:	0c1a      	lsrs	r2, r3, #16
 800b150:	21ff      	movs	r1, #255	; 0xff
 800b152:	400a      	ands	r2, r1
 800b154:	0010      	movs	r0, r2
 800b156:	79a2      	ldrb	r2, [r4, #6]
 800b158:	2100      	movs	r1, #0
 800b15a:	400a      	ands	r2, r1
 800b15c:	1c11      	adds	r1, r2, #0
 800b15e:	1c02      	adds	r2, r0, #0
 800b160:	430a      	orrs	r2, r1
 800b162:	71a2      	strb	r2, [r4, #6]
 800b164:	0e19      	lsrs	r1, r3, #24
 800b166:	79e3      	ldrb	r3, [r4, #7]
 800b168:	2200      	movs	r2, #0
 800b16a:	4013      	ands	r3, r2
 800b16c:	1c1a      	adds	r2, r3, #0
 800b16e:	1c0b      	adds	r3, r1, #0
 800b170:	4313      	orrs	r3, r2
 800b172:	71e3      	strb	r3, [r4, #7]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 800b174:	2317      	movs	r3, #23
 800b176:	18fb      	adds	r3, r7, r3
 800b178:	781b      	ldrb	r3, [r3, #0]
 800b17a:	089b      	lsrs	r3, r3, #2
 800b17c:	b2db      	uxtb	r3, r3
 800b17e:	3305      	adds	r3, #5
 800b180:	031b      	lsls	r3, r3, #12
 800b182:	b21a      	sxth	r2, r3
 800b184:	1dfb      	adds	r3, r7, #7
 800b186:	781b      	ldrb	r3, [r3, #0]
 800b188:	b21b      	sxth	r3, r3
 800b18a:	4313      	orrs	r3, r2
 800b18c:	b21b      	sxth	r3, r3
 800b18e:	b29a      	uxth	r2, r3
 800b190:	693b      	ldr	r3, [r7, #16]
 800b192:	68dc      	ldr	r4, [r3, #12]
 800b194:	0010      	movs	r0, r2
 800b196:	f7fa fdb5 	bl	8005d04 <lwip_htons>
 800b19a:	0003      	movs	r3, r0
 800b19c:	22ff      	movs	r2, #255	; 0xff
 800b19e:	401a      	ands	r2, r3
 800b1a0:	0010      	movs	r0, r2
 800b1a2:	7b22      	ldrb	r2, [r4, #12]
 800b1a4:	2100      	movs	r1, #0
 800b1a6:	400a      	ands	r2, r1
 800b1a8:	1c11      	adds	r1, r2, #0
 800b1aa:	1c02      	adds	r2, r0, #0
 800b1ac:	430a      	orrs	r2, r1
 800b1ae:	7322      	strb	r2, [r4, #12]
 800b1b0:	0a1b      	lsrs	r3, r3, #8
 800b1b2:	b299      	uxth	r1, r3
 800b1b4:	7b63      	ldrb	r3, [r4, #13]
 800b1b6:	2200      	movs	r2, #0
 800b1b8:	4013      	ands	r3, r2
 800b1ba:	1c1a      	adds	r2, r3, #0
 800b1bc:	1c0b      	adds	r3, r1, #0
 800b1be:	4313      	orrs	r3, r2
 800b1c0:	7363      	strb	r3, [r4, #13]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800b1c2:	693b      	ldr	r3, [r7, #16]
 800b1c4:	68db      	ldr	r3, [r3, #12]
 800b1c6:	7c9a      	ldrb	r2, [r3, #18]
 800b1c8:	2100      	movs	r1, #0
 800b1ca:	400a      	ands	r2, r1
 800b1cc:	749a      	strb	r2, [r3, #18]
 800b1ce:	7cda      	ldrb	r2, [r3, #19]
 800b1d0:	2100      	movs	r1, #0
 800b1d2:	400a      	ands	r2, r1
 800b1d4:	74da      	strb	r2, [r3, #19]
  return seg;
 800b1d6:	693b      	ldr	r3, [r7, #16]
} 
 800b1d8:	0018      	movs	r0, r3
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	b007      	add	sp, #28
 800b1de:	bd90      	pop	{r4, r7, pc}
 800b1e0:	2000340c 	.word	0x2000340c

0800b1e4 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800b1e4:	b590      	push	{r4, r7, lr}
 800b1e6:	b087      	sub	sp, #28
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	0004      	movs	r4, r0
 800b1ec:	0008      	movs	r0, r1
 800b1ee:	0011      	movs	r1, r2
 800b1f0:	607b      	str	r3, [r7, #4]
 800b1f2:	230f      	movs	r3, #15
 800b1f4:	18fb      	adds	r3, r7, r3
 800b1f6:	1c22      	adds	r2, r4, #0
 800b1f8:	701a      	strb	r2, [r3, #0]
 800b1fa:	240c      	movs	r4, #12
 800b1fc:	193b      	adds	r3, r7, r4
 800b1fe:	1c02      	adds	r2, r0, #0
 800b200:	801a      	strh	r2, [r3, #0]
 800b202:	200a      	movs	r0, #10
 800b204:	183b      	adds	r3, r7, r0
 800b206:	1c0a      	adds	r2, r1, #0
 800b208:	801a      	strh	r2, [r3, #0]
  struct pbuf *p;
  u16_t alloc = length;
 800b20a:	2316      	movs	r3, #22
 800b20c:	18fb      	adds	r3, r7, r3
 800b20e:	193a      	adds	r2, r7, r4
 800b210:	8812      	ldrh	r2, [r2, #0]
 800b212:	801a      	strh	r2, [r3, #0]
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  /* always create MSS-sized pbufs */
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800b214:	193a      	adds	r2, r7, r4
 800b216:	183b      	adds	r3, r7, r0
 800b218:	8812      	ldrh	r2, [r2, #0]
 800b21a:	881b      	ldrh	r3, [r3, #0]
 800b21c:	429a      	cmp	r2, r3
 800b21e:	d22a      	bcs.n	800b276 <tcp_pbuf_prealloc+0x92>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800b220:	232c      	movs	r3, #44	; 0x2c
 800b222:	18fb      	adds	r3, r7, r3
 800b224:	781b      	ldrb	r3, [r3, #0]
 800b226:	2202      	movs	r2, #2
 800b228:	4013      	ands	r3, r2
 800b22a:	d112      	bne.n	800b252 <tcp_pbuf_prealloc+0x6e>
        (!(pcb->flags & TF_NODELAY) &&
 800b22c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b22e:	7f9b      	ldrb	r3, [r3, #30]
 800b230:	001a      	movs	r2, r3
 800b232:	2340      	movs	r3, #64	; 0x40
 800b234:	4013      	ands	r3, r2
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800b236:	d11e      	bne.n	800b276 <tcp_pbuf_prealloc+0x92>
        (!(pcb->flags & TF_NODELAY) &&
 800b238:	2330      	movs	r3, #48	; 0x30
 800b23a:	18fb      	adds	r3, r7, r3
 800b23c:	781b      	ldrb	r3, [r3, #0]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d007      	beq.n	800b252 <tcp_pbuf_prealloc+0x6e>
         (!first_seg ||
          pcb->unsent != NULL ||
 800b242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b244:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 800b246:	2b00      	cmp	r3, #0
 800b248:	d103      	bne.n	800b252 <tcp_pbuf_prealloc+0x6e>
          pcb->unacked != NULL))) {
 800b24a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b24c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d011      	beq.n	800b276 <tcp_pbuf_prealloc+0x92>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(length + TCP_OVERSIZE));
 800b252:	230c      	movs	r3, #12
 800b254:	18fb      	adds	r3, r7, r3
 800b256:	881b      	ldrh	r3, [r3, #0]
 800b258:	4a1a      	ldr	r2, [pc, #104]	; (800b2c4 <tcp_pbuf_prealloc+0xe0>)
 800b25a:	4694      	mov	ip, r2
 800b25c:	4463      	add	r3, ip
 800b25e:	2203      	movs	r2, #3
 800b260:	4393      	bics	r3, r2
 800b262:	001a      	movs	r2, r3
 800b264:	230a      	movs	r3, #10
 800b266:	18fb      	adds	r3, r7, r3
 800b268:	881b      	ldrh	r3, [r3, #0]
 800b26a:	429a      	cmp	r2, r3
 800b26c:	dd00      	ble.n	800b270 <tcp_pbuf_prealloc+0x8c>
 800b26e:	001a      	movs	r2, r3
 800b270:	2316      	movs	r3, #22
 800b272:	18fb      	adds	r3, r7, r3
 800b274:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800b276:	2316      	movs	r3, #22
 800b278:	18fb      	adds	r3, r7, r3
 800b27a:	8819      	ldrh	r1, [r3, #0]
 800b27c:	230f      	movs	r3, #15
 800b27e:	18fb      	adds	r3, r7, r3
 800b280:	781b      	ldrb	r3, [r3, #0]
 800b282:	2200      	movs	r2, #0
 800b284:	0018      	movs	r0, r3
 800b286:	f7fb faf9 	bl	800687c <pbuf_alloc>
 800b28a:	0003      	movs	r3, r0
 800b28c:	613b      	str	r3, [r7, #16]
  if (p == NULL) {
 800b28e:	693b      	ldr	r3, [r7, #16]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d101      	bne.n	800b298 <tcp_pbuf_prealloc+0xb4>
    return NULL;
 800b294:	2300      	movs	r3, #0
 800b296:	e011      	b.n	800b2bc <tcp_pbuf_prealloc+0xd8>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
  *oversize = p->len - length;
 800b298:	693b      	ldr	r3, [r7, #16]
 800b29a:	895a      	ldrh	r2, [r3, #10]
 800b29c:	210c      	movs	r1, #12
 800b29e:	187b      	adds	r3, r7, r1
 800b2a0:	881b      	ldrh	r3, [r3, #0]
 800b2a2:	1ad3      	subs	r3, r2, r3
 800b2a4:	b29a      	uxth	r2, r3
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800b2aa:	693b      	ldr	r3, [r7, #16]
 800b2ac:	187a      	adds	r2, r7, r1
 800b2ae:	8812      	ldrh	r2, [r2, #0]
 800b2b0:	811a      	strh	r2, [r3, #8]
 800b2b2:	693b      	ldr	r3, [r7, #16]
 800b2b4:	891a      	ldrh	r2, [r3, #8]
 800b2b6:	693b      	ldr	r3, [r7, #16]
 800b2b8:	815a      	strh	r2, [r3, #10]
  return p;
 800b2ba:	693b      	ldr	r3, [r7, #16]
}
 800b2bc:	0018      	movs	r0, r3
 800b2be:	46bd      	mov	sp, r7
 800b2c0:	b007      	add	sp, #28
 800b2c2:	bd90      	pop	{r4, r7, pc}
 800b2c4:	000005b7 	.word	0x000005b7

0800b2c8 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b082      	sub	sp, #8
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]
 800b2d0:	000a      	movs	r2, r1
 800b2d2:	1cbb      	adds	r3, r7, #2
 800b2d4:	801a      	strh	r2, [r3, #0]
  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	7e1b      	ldrb	r3, [r3, #24]
 800b2da:	2b04      	cmp	r3, #4
 800b2dc:	d00e      	beq.n	800b2fc <tcp_write_checks+0x34>
      (pcb->state != CLOSE_WAIT) &&
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	7e1b      	ldrb	r3, [r3, #24]
  if ((pcb->state != ESTABLISHED) &&
 800b2e2:	2b07      	cmp	r3, #7
 800b2e4:	d00a      	beq.n	800b2fc <tcp_write_checks+0x34>
      (pcb->state != SYN_SENT) &&
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	7e1b      	ldrb	r3, [r3, #24]
      (pcb->state != CLOSE_WAIT) &&
 800b2ea:	2b02      	cmp	r3, #2
 800b2ec:	d006      	beq.n	800b2fc <tcp_write_checks+0x34>
      (pcb->state != SYN_RCVD)) {
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	7e1b      	ldrb	r3, [r3, #24]
      (pcb->state != SYN_SENT) &&
 800b2f2:	2b03      	cmp	r3, #3
 800b2f4:	d002      	beq.n	800b2fc <tcp_write_checks+0x34>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800b2f6:	230d      	movs	r3, #13
 800b2f8:	425b      	negs	r3, r3
 800b2fa:	e039      	b.n	800b370 <tcp_write_checks+0xa8>
  } else if (len == 0) {
 800b2fc:	1cbb      	adds	r3, r7, #2
 800b2fe:	881b      	ldrh	r3, [r3, #0]
 800b300:	2b00      	cmp	r3, #0
 800b302:	d101      	bne.n	800b308 <tcp_write_checks+0x40>
    return ERR_OK;
 800b304:	2300      	movs	r3, #0
 800b306:	e033      	b.n	800b370 <tcp_write_checks+0xa8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	2266      	movs	r2, #102	; 0x66
 800b30c:	5a9b      	ldrh	r3, [r3, r2]
 800b30e:	1cba      	adds	r2, r7, #2
 800b310:	8812      	ldrh	r2, [r2, #0]
 800b312:	429a      	cmp	r2, r3
 800b314:	d90a      	bls.n	800b32c <tcp_write_checks+0x64>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 3, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"U16_F")\n",
      len, pcb->snd_buf));
    pcb->flags |= TF_NAGLEMEMERR;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	7f9b      	ldrb	r3, [r3, #30]
 800b31a:	2280      	movs	r2, #128	; 0x80
 800b31c:	4252      	negs	r2, r2
 800b31e:	4313      	orrs	r3, r2
 800b320:	b2da      	uxtb	r2, r3
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	779a      	strb	r2, [r3, #30]
    return ERR_MEM;
 800b326:	2301      	movs	r3, #1
 800b328:	425b      	negs	r3, r3
 800b32a:	e021      	b.n	800b370 <tcp_write_checks+0xa8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	2268      	movs	r2, #104	; 0x68
 800b330:	5a9b      	ldrh	r3, [r3, r2]
 800b332:	2b07      	cmp	r3, #7
 800b334:	d805      	bhi.n	800b342 <tcp_write_checks+0x7a>
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	2268      	movs	r2, #104	; 0x68
 800b33a:	5a9b      	ldrh	r3, [r3, r2]
 800b33c:	4a0e      	ldr	r2, [pc, #56]	; (800b378 <tcp_write_checks+0xb0>)
 800b33e:	4293      	cmp	r3, r2
 800b340:	d912      	bls.n	800b368 <tcp_write_checks+0xa0>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 3, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
      pcb->snd_queuelen, TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
 800b342:	4b0e      	ldr	r3, [pc, #56]	; (800b37c <tcp_write_checks+0xb4>)
 800b344:	229c      	movs	r2, #156	; 0x9c
 800b346:	5a9b      	ldrh	r3, [r3, r2]
 800b348:	3301      	adds	r3, #1
 800b34a:	b299      	uxth	r1, r3
 800b34c:	4b0b      	ldr	r3, [pc, #44]	; (800b37c <tcp_write_checks+0xb4>)
 800b34e:	229c      	movs	r2, #156	; 0x9c
 800b350:	5299      	strh	r1, [r3, r2]
    pcb->flags |= TF_NAGLEMEMERR;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	7f9b      	ldrb	r3, [r3, #30]
 800b356:	2280      	movs	r2, #128	; 0x80
 800b358:	4252      	negs	r2, r2
 800b35a:	4313      	orrs	r3, r2
 800b35c:	b2da      	uxtb	r2, r3
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	779a      	strb	r2, [r3, #30]
    return ERR_MEM;
 800b362:	2301      	movs	r3, #1
 800b364:	425b      	negs	r3, r3
 800b366:	e003      	b.n	800b370 <tcp_write_checks+0xa8>
  }
  if (pcb->snd_queuelen != 0) {
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	2268      	movs	r2, #104	; 0x68
 800b36c:	5a9b      	ldrh	r3, [r3, r2]
      pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
      pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800b36e:	2300      	movs	r3, #0
}
 800b370:	0018      	movs	r0, r3
 800b372:	46bd      	mov	sp, r7
 800b374:	b002      	add	sp, #8
 800b376:	bd80      	pop	{r7, pc}
 800b378:	0000fffc 	.word	0x0000fffc
 800b37c:	2000340c 	.word	0x2000340c

0800b380 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800b380:	b5b0      	push	{r4, r5, r7, lr}
 800b382:	b098      	sub	sp, #96	; 0x60
 800b384:	af04      	add	r7, sp, #16
 800b386:	60f8      	str	r0, [r7, #12]
 800b388:	60b9      	str	r1, [r7, #8]
 800b38a:	0019      	movs	r1, r3
 800b38c:	1dbb      	adds	r3, r7, #6
 800b38e:	801a      	strh	r2, [r3, #0]
 800b390:	1d7b      	adds	r3, r7, #5
 800b392:	1c0a      	adds	r2, r1, #0
 800b394:	701a      	strb	r2, [r3, #0]
  struct pbuf *concat_p = NULL;
 800b396:	2300      	movs	r3, #0
 800b398:	64fb      	str	r3, [r7, #76]	; 0x4c
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800b39a:	2300      	movs	r3, #0
 800b39c:	64bb      	str	r3, [r7, #72]	; 0x48
 800b39e:	2300      	movs	r3, #0
 800b3a0:	647b      	str	r3, [r7, #68]	; 0x44
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	643b      	str	r3, [r7, #64]	; 0x40
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  u16_t pos = 0; /* position in 'arg' data */
 800b3aa:	233a      	movs	r3, #58	; 0x3a
 800b3ac:	18fb      	adds	r3, r7, r3
 800b3ae:	2200      	movs	r2, #0
 800b3b0:	801a      	strh	r2, [r3, #0]
  u16_t queuelen;
  u8_t optlen = 0;
 800b3b2:	232b      	movs	r3, #43	; 0x2b
 800b3b4:	18fb      	adds	r3, r7, r3
 800b3b6:	2200      	movs	r2, #0
 800b3b8:	701a      	strb	r2, [r3, #0]
  u8_t optflags = 0;
 800b3ba:	232a      	movs	r3, #42	; 0x2a
 800b3bc:	18fb      	adds	r3, r7, r3
 800b3be:	2200      	movs	r2, #0
 800b3c0:	701a      	strb	r2, [r3, #0]
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800b3c2:	2316      	movs	r3, #22
 800b3c4:	18fb      	adds	r3, r7, r3
 800b3c6:	2200      	movs	r2, #0
 800b3c8:	801a      	strh	r2, [r3, #0]
  u16_t oversize_used = 0;
 800b3ca:	2336      	movs	r3, #54	; 0x36
 800b3cc:	18fb      	adds	r3, r7, r3
 800b3ce:	2200      	movs	r2, #0
 800b3d0:	801a      	strh	r2, [r3, #0]
  u8_t concat_chksum_swapped = 0;
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  /* don't allocate segments bigger than half the maximum window we ever received */
  u16_t mss_local = LWIP_MIN(pcb->mss, pcb->snd_wnd_max/2);
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	2262      	movs	r2, #98	; 0x62
 800b3d6:	5a9b      	ldrh	r3, [r3, r2]
 800b3d8:	085b      	lsrs	r3, r3, #1
 800b3da:	b299      	uxth	r1, r3
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b3e0:	2228      	movs	r2, #40	; 0x28
 800b3e2:	18ba      	adds	r2, r7, r2
 800b3e4:	1c1c      	adds	r4, r3, #0
 800b3e6:	1c0b      	adds	r3, r1, #0
 800b3e8:	b298      	uxth	r0, r3
 800b3ea:	b2a1      	uxth	r1, r4
 800b3ec:	4288      	cmp	r0, r1
 800b3ee:	d900      	bls.n	800b3f2 <tcp_write+0x72>
 800b3f0:	1c23      	adds	r3, r4, #0
 800b3f2:	8013      	strh	r3, [r2, #0]
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)", 
 800b3f4:	68bb      	ldr	r3, [r7, #8]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d102      	bne.n	800b400 <tcp_write+0x80>
 800b3fa:	230e      	movs	r3, #14
 800b3fc:	425b      	negs	r3, r3
 800b3fe:	e2a1      	b.n	800b944 <tcp_write+0x5c4>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800b400:	2527      	movs	r5, #39	; 0x27
 800b402:	197c      	adds	r4, r7, r5
 800b404:	1dbb      	adds	r3, r7, #6
 800b406:	881a      	ldrh	r2, [r3, #0]
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	0011      	movs	r1, r2
 800b40c:	0018      	movs	r0, r3
 800b40e:	f7ff ff5b 	bl	800b2c8 <tcp_write_checks>
 800b412:	0003      	movs	r3, r0
 800b414:	7023      	strb	r3, [r4, #0]
  if (err != ERR_OK) {
 800b416:	197b      	adds	r3, r7, r5
 800b418:	781b      	ldrb	r3, [r3, #0]
 800b41a:	b25b      	sxtb	r3, r3
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d004      	beq.n	800b42a <tcp_write+0xaa>
    return err;
 800b420:	2327      	movs	r3, #39	; 0x27
 800b422:	18fb      	adds	r3, r7, r3
 800b424:	781b      	ldrb	r3, [r3, #0]
 800b426:	b25b      	sxtb	r3, r3
 800b428:	e28c      	b.n	800b944 <tcp_write+0x5c4>
  }
  queuelen = pcb->snd_queuelen;
 800b42a:	2338      	movs	r3, #56	; 0x38
 800b42c:	18fb      	adds	r3, r7, r3
 800b42e:	68fa      	ldr	r2, [r7, #12]
 800b430:	2168      	movs	r1, #104	; 0x68
 800b432:	5a52      	ldrh	r2, [r2, r1]
 800b434:	801a      	strh	r2, [r3, #0]
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d100      	bne.n	800b440 <tcp_write+0xc0>
 800b43e:	e1a7      	b.n	800b790 <tcp_write+0x410>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b444:	64bb      	str	r3, [r7, #72]	; 0x48
 800b446:	e002      	b.n	800b44e <tcp_write+0xce>
         last_unsent = last_unsent->next);
 800b448:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	64bb      	str	r3, [r7, #72]	; 0x48
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b44e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d1f8      	bne.n	800b448 <tcp_write+0xc8>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 800b456:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b458:	7a9b      	ldrb	r3, [r3, #10]
 800b45a:	009b      	lsls	r3, r3, #2
 800b45c:	b29b      	uxth	r3, r3
 800b45e:	2204      	movs	r2, #4
 800b460:	4013      	ands	r3, r2
 800b462:	b299      	uxth	r1, r3
 800b464:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b466:	7a9b      	ldrb	r3, [r3, #10]
 800b468:	001a      	movs	r2, r3
 800b46a:	2302      	movs	r3, #2
 800b46c:	4013      	ands	r3, r2
 800b46e:	d001      	beq.n	800b474 <tcp_write+0xf4>
 800b470:	230c      	movs	r3, #12
 800b472:	e000      	b.n	800b476 <tcp_write+0xf6>
 800b474:	2300      	movs	r3, #0
 800b476:	2024      	movs	r0, #36	; 0x24
 800b478:	183a      	adds	r2, r7, r0
 800b47a:	185b      	adds	r3, r3, r1
 800b47c:	8013      	strh	r3, [r2, #0]
    space = mss_local - (last_unsent->len + unsent_optlen);
 800b47e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b480:	891a      	ldrh	r2, [r3, #8]
 800b482:	183b      	adds	r3, r7, r0
 800b484:	881b      	ldrh	r3, [r3, #0]
 800b486:	18d3      	adds	r3, r2, r3
 800b488:	b29a      	uxth	r2, r3
 800b48a:	2334      	movs	r3, #52	; 0x34
 800b48c:	18fb      	adds	r3, r7, r3
 800b48e:	2128      	movs	r1, #40	; 0x28
 800b490:	1879      	adds	r1, r7, r1
 800b492:	8809      	ldrh	r1, [r1, #0]
 800b494:	1a8a      	subs	r2, r1, r2
 800b496:	801a      	strh	r2, [r3, #0]
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->unsent_oversize */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	226a      	movs	r2, #106	; 0x6a
 800b49c:	5a9a      	ldrh	r2, [r3, r2]
 800b49e:	2116      	movs	r1, #22
 800b4a0:	187b      	adds	r3, r7, r1
 800b4a2:	801a      	strh	r2, [r3, #0]
    if (oversize > 0) {
 800b4a4:	187b      	adds	r3, r7, r1
 800b4a6:	881b      	ldrh	r3, [r3, #0]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d029      	beq.n	800b500 <tcp_write+0x180>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize_used <= space);
      seg = last_unsent;
 800b4ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b4ae:	647b      	str	r3, [r7, #68]	; 0x44
      oversize_used = oversize < len ? oversize : len;
 800b4b0:	2316      	movs	r3, #22
 800b4b2:	18fb      	adds	r3, r7, r3
 800b4b4:	8819      	ldrh	r1, [r3, #0]
 800b4b6:	2336      	movs	r3, #54	; 0x36
 800b4b8:	18fa      	adds	r2, r7, r3
 800b4ba:	1dbb      	adds	r3, r7, #6
 800b4bc:	1c0c      	adds	r4, r1, #0
 800b4be:	881b      	ldrh	r3, [r3, #0]
 800b4c0:	b298      	uxth	r0, r3
 800b4c2:	b2a1      	uxth	r1, r4
 800b4c4:	4288      	cmp	r0, r1
 800b4c6:	d900      	bls.n	800b4ca <tcp_write+0x14a>
 800b4c8:	1c23      	adds	r3, r4, #0
 800b4ca:	8013      	strh	r3, [r2, #0]
      pos += oversize_used;
 800b4cc:	223a      	movs	r2, #58	; 0x3a
 800b4ce:	18bb      	adds	r3, r7, r2
 800b4d0:	18b9      	adds	r1, r7, r2
 800b4d2:	2036      	movs	r0, #54	; 0x36
 800b4d4:	183a      	adds	r2, r7, r0
 800b4d6:	8809      	ldrh	r1, [r1, #0]
 800b4d8:	8812      	ldrh	r2, [r2, #0]
 800b4da:	188a      	adds	r2, r1, r2
 800b4dc:	801a      	strh	r2, [r3, #0]
      oversize -= oversize_used;
 800b4de:	2116      	movs	r1, #22
 800b4e0:	187b      	adds	r3, r7, r1
 800b4e2:	881a      	ldrh	r2, [r3, #0]
 800b4e4:	183b      	adds	r3, r7, r0
 800b4e6:	881b      	ldrh	r3, [r3, #0]
 800b4e8:	1ad3      	subs	r3, r2, r3
 800b4ea:	b29a      	uxth	r2, r3
 800b4ec:	187b      	adds	r3, r7, r1
 800b4ee:	801a      	strh	r2, [r3, #0]
      space -= oversize_used;
 800b4f0:	2234      	movs	r2, #52	; 0x34
 800b4f2:	18bb      	adds	r3, r7, r2
 800b4f4:	18b9      	adds	r1, r7, r2
 800b4f6:	183a      	adds	r2, r7, r0
 800b4f8:	8809      	ldrh	r1, [r1, #0]
 800b4fa:	8812      	ldrh	r2, [r2, #0]
 800b4fc:	1a8a      	subs	r2, r1, r2
 800b4fe:	801a      	strh	r2, [r3, #0]
     *
     * We don't extend segments containing SYN/FIN flags or options
     * (len==0). The new pbuf is kept in concat_p and pbuf_cat'ed at
     * the end.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800b500:	233a      	movs	r3, #58	; 0x3a
 800b502:	18fa      	adds	r2, r7, r3
 800b504:	1dbb      	adds	r3, r7, #6
 800b506:	8812      	ldrh	r2, [r2, #0]
 800b508:	881b      	ldrh	r3, [r3, #0]
 800b50a:	429a      	cmp	r2, r3
 800b50c:	d300      	bcc.n	800b510 <tcp_write+0x190>
 800b50e:	e13f      	b.n	800b790 <tcp_write+0x410>
 800b510:	2334      	movs	r3, #52	; 0x34
 800b512:	18fb      	adds	r3, r7, r3
 800b514:	881b      	ldrh	r3, [r3, #0]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d100      	bne.n	800b51c <tcp_write+0x19c>
 800b51a:	e139      	b.n	800b790 <tcp_write+0x410>
 800b51c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b51e:	891b      	ldrh	r3, [r3, #8]
 800b520:	2b00      	cmp	r3, #0
 800b522:	d100      	bne.n	800b526 <tcp_write+0x1a6>
 800b524:	e134      	b.n	800b790 <tcp_write+0x410>
      u16_t seglen = space < len - pos ? space : len - pos;
 800b526:	1dbb      	adds	r3, r7, #6
 800b528:	881a      	ldrh	r2, [r3, #0]
 800b52a:	233a      	movs	r3, #58	; 0x3a
 800b52c:	18fb      	adds	r3, r7, r3
 800b52e:	881b      	ldrh	r3, [r3, #0]
 800b530:	1ad2      	subs	r2, r2, r3
 800b532:	2334      	movs	r3, #52	; 0x34
 800b534:	18fb      	adds	r3, r7, r3
 800b536:	881b      	ldrh	r3, [r3, #0]
 800b538:	429a      	cmp	r2, r3
 800b53a:	dd00      	ble.n	800b53e <tcp_write+0x1be>
 800b53c:	001a      	movs	r2, r3
 800b53e:	2322      	movs	r3, #34	; 0x22
 800b540:	18fb      	adds	r3, r7, r3
 800b542:	801a      	strh	r2, [r3, #0]
      seg = last_unsent;
 800b544:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b546:	647b      	str	r3, [r7, #68]	; 0x44

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800b548:	1d7b      	adds	r3, r7, #5
 800b54a:	781b      	ldrb	r3, [r3, #0]
 800b54c:	2201      	movs	r2, #1
 800b54e:	4013      	ands	r3, r2
 800b550:	d026      	beq.n	800b5a0 <tcp_write+0x220>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800b552:	2316      	movs	r3, #22
 800b554:	18f8      	adds	r0, r7, r3
 800b556:	2334      	movs	r3, #52	; 0x34
 800b558:	18fb      	adds	r3, r7, r3
 800b55a:	881a      	ldrh	r2, [r3, #0]
 800b55c:	2322      	movs	r3, #34	; 0x22
 800b55e:	18fb      	adds	r3, r7, r3
 800b560:	8819      	ldrh	r1, [r3, #0]
 800b562:	2301      	movs	r3, #1
 800b564:	9302      	str	r3, [sp, #8]
 800b566:	1d7b      	adds	r3, r7, #5
 800b568:	781b      	ldrb	r3, [r3, #0]
 800b56a:	9301      	str	r3, [sp, #4]
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	9300      	str	r3, [sp, #0]
 800b570:	0003      	movs	r3, r0
 800b572:	2003      	movs	r0, #3
 800b574:	f7ff fe36 	bl	800b1e4 <tcp_pbuf_prealloc>
 800b578:	0003      	movs	r3, r0
 800b57a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b57c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d100      	bne.n	800b584 <tcp_write+0x204>
 800b582:	e1b3      	b.n	800b8ec <tcp_write+0x56c>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        last_unsent->oversize_left += oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800b584:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b586:	6858      	ldr	r0, [r3, #4]
 800b588:	233a      	movs	r3, #58	; 0x3a
 800b58a:	18fb      	adds	r3, r7, r3
 800b58c:	881b      	ldrh	r3, [r3, #0]
 800b58e:	68ba      	ldr	r2, [r7, #8]
 800b590:	18d1      	adds	r1, r2, r3
 800b592:	2322      	movs	r3, #34	; 0x22
 800b594:	18fb      	adds	r3, r7, r3
 800b596:	881b      	ldrh	r3, [r3, #0]
 800b598:	001a      	movs	r2, r3
 800b59a:	f006 fd5c 	bl	8012056 <memcpy>
 800b59e:	e014      	b.n	800b5ca <tcp_write+0x24a>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      } else {
        /* Data is not copied */
        if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800b5a0:	2322      	movs	r3, #34	; 0x22
 800b5a2:	18fb      	adds	r3, r7, r3
 800b5a4:	881b      	ldrh	r3, [r3, #0]
 800b5a6:	2201      	movs	r2, #1
 800b5a8:	0019      	movs	r1, r3
 800b5aa:	2003      	movs	r0, #3
 800b5ac:	f7fb f966 	bl	800687c <pbuf_alloc>
 800b5b0:	0003      	movs	r3, r0
 800b5b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b5b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d100      	bne.n	800b5bc <tcp_write+0x23c>
 800b5ba:	e199      	b.n	800b8f0 <tcp_write+0x570>
        tcp_seg_add_chksum(~inet_chksum((u8_t*)arg + pos, seglen), seglen,
          &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        /* reference the non-volatile payload data */
        concat_p->payload = (u8_t*)arg + pos;
 800b5bc:	233a      	movs	r3, #58	; 0x3a
 800b5be:	18fb      	adds	r3, r7, r3
 800b5c0:	881b      	ldrh	r3, [r3, #0]
 800b5c2:	68ba      	ldr	r2, [r7, #8]
 800b5c4:	18d2      	adds	r2, r2, r3
 800b5c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b5c8:	605a      	str	r2, [r3, #4]
      }

      pos += seglen;
 800b5ca:	223a      	movs	r2, #58	; 0x3a
 800b5cc:	18bb      	adds	r3, r7, r2
 800b5ce:	18b9      	adds	r1, r7, r2
 800b5d0:	2222      	movs	r2, #34	; 0x22
 800b5d2:	18ba      	adds	r2, r7, r2
 800b5d4:	8809      	ldrh	r1, [r1, #0]
 800b5d6:	8812      	ldrh	r2, [r2, #0]
 800b5d8:	188a      	adds	r2, r1, r2
 800b5da:	801a      	strh	r2, [r3, #0]
      queuelen += pbuf_clen(concat_p);
 800b5dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b5de:	0018      	movs	r0, r3
 800b5e0:	f7fb fc4a 	bl	8006e78 <pbuf_clen>
 800b5e4:	0003      	movs	r3, r0
 800b5e6:	b299      	uxth	r1, r3
 800b5e8:	2238      	movs	r2, #56	; 0x38
 800b5ea:	18bb      	adds	r3, r7, r2
 800b5ec:	18ba      	adds	r2, r7, r2
 800b5ee:	8812      	ldrh	r2, [r2, #0]
 800b5f0:	188a      	adds	r2, r1, r2
 800b5f2:	801a      	strh	r2, [r3, #0]
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800b5f4:	e0cc      	b.n	800b790 <tcp_write+0x410>
    struct pbuf *p;
    u16_t left = len - pos;
 800b5f6:	2020      	movs	r0, #32
 800b5f8:	183b      	adds	r3, r7, r0
 800b5fa:	1db9      	adds	r1, r7, #6
 800b5fc:	223a      	movs	r2, #58	; 0x3a
 800b5fe:	18ba      	adds	r2, r7, r2
 800b600:	8809      	ldrh	r1, [r1, #0]
 800b602:	8812      	ldrh	r2, [r2, #0]
 800b604:	1a8a      	subs	r2, r1, r2
 800b606:	801a      	strh	r2, [r3, #0]
    u16_t max_len = mss_local - optlen;
 800b608:	232b      	movs	r3, #43	; 0x2b
 800b60a:	18fb      	adds	r3, r7, r3
 800b60c:	781b      	ldrb	r3, [r3, #0]
 800b60e:	b29a      	uxth	r2, r3
 800b610:	241e      	movs	r4, #30
 800b612:	193b      	adds	r3, r7, r4
 800b614:	2128      	movs	r1, #40	; 0x28
 800b616:	1879      	adds	r1, r7, r1
 800b618:	8809      	ldrh	r1, [r1, #0]
 800b61a:	1a8a      	subs	r2, r1, r2
 800b61c:	801a      	strh	r2, [r3, #0]
    u16_t seglen = left > max_len ? max_len : left;
 800b61e:	231c      	movs	r3, #28
 800b620:	18fa      	adds	r2, r7, r3
 800b622:	183b      	adds	r3, r7, r0
 800b624:	1939      	adds	r1, r7, r4
 800b626:	880c      	ldrh	r4, [r1, #0]
 800b628:	881b      	ldrh	r3, [r3, #0]
 800b62a:	b298      	uxth	r0, r3
 800b62c:	b2a1      	uxth	r1, r4
 800b62e:	4288      	cmp	r0, r1
 800b630:	d900      	bls.n	800b634 <tcp_write+0x2b4>
 800b632:	1c23      	adds	r3, r4, #0
 800b634:	8013      	strh	r3, [r2, #0]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800b636:	1d7b      	adds	r3, r7, #5
 800b638:	781b      	ldrb	r3, [r3, #0]
 800b63a:	2201      	movs	r2, #1
 800b63c:	4013      	ands	r3, r2
 800b63e:	d034      	beq.n	800b6aa <tcp_write+0x32a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800b640:	232b      	movs	r3, #43	; 0x2b
 800b642:	18fb      	adds	r3, r7, r3
 800b644:	781b      	ldrb	r3, [r3, #0]
 800b646:	b29a      	uxth	r2, r3
 800b648:	231c      	movs	r3, #28
 800b64a:	18fb      	adds	r3, r7, r3
 800b64c:	881b      	ldrh	r3, [r3, #0]
 800b64e:	18d3      	adds	r3, r2, r3
 800b650:	b299      	uxth	r1, r3
 800b652:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b654:	425a      	negs	r2, r3
 800b656:	4153      	adcs	r3, r2
 800b658:	b2db      	uxtb	r3, r3
 800b65a:	001c      	movs	r4, r3
 800b65c:	2316      	movs	r3, #22
 800b65e:	18f8      	adds	r0, r7, r3
 800b660:	2328      	movs	r3, #40	; 0x28
 800b662:	18fb      	adds	r3, r7, r3
 800b664:	881a      	ldrh	r2, [r3, #0]
 800b666:	9402      	str	r4, [sp, #8]
 800b668:	1d7b      	adds	r3, r7, #5
 800b66a:	781b      	ldrb	r3, [r3, #0]
 800b66c:	9301      	str	r3, [sp, #4]
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	9300      	str	r3, [sp, #0]
 800b672:	0003      	movs	r3, r0
 800b674:	2000      	movs	r0, #0
 800b676:	f7ff fdb5 	bl	800b1e4 <tcp_pbuf_prealloc>
 800b67a:	0003      	movs	r3, r0
 800b67c:	633b      	str	r3, [r7, #48]	; 0x30
 800b67e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b680:	2b00      	cmp	r3, #0
 800b682:	d100      	bne.n	800b686 <tcp_write+0x306>
 800b684:	e136      	b.n	800b8f4 <tcp_write+0x574>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 2, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
 800b686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b688:	685a      	ldr	r2, [r3, #4]
 800b68a:	232b      	movs	r3, #43	; 0x2b
 800b68c:	18fb      	adds	r3, r7, r3
 800b68e:	781b      	ldrb	r3, [r3, #0]
 800b690:	18d0      	adds	r0, r2, r3
 800b692:	233a      	movs	r3, #58	; 0x3a
 800b694:	18fb      	adds	r3, r7, r3
 800b696:	881b      	ldrh	r3, [r3, #0]
 800b698:	68ba      	ldr	r2, [r7, #8]
 800b69a:	18d1      	adds	r1, r2, r3
 800b69c:	231c      	movs	r3, #28
 800b69e:	18fb      	adds	r3, r7, r3
 800b6a0:	881b      	ldrh	r3, [r3, #0]
 800b6a2:	001a      	movs	r2, r3
 800b6a4:	f006 fcd7 	bl	8012056 <memcpy>
 800b6a8:	e02d      	b.n	800b706 <tcp_write+0x386>
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800b6aa:	231c      	movs	r3, #28
 800b6ac:	18fb      	adds	r3, r7, r3
 800b6ae:	881b      	ldrh	r3, [r3, #0]
 800b6b0:	2201      	movs	r2, #1
 800b6b2:	0019      	movs	r1, r3
 800b6b4:	2000      	movs	r0, #0
 800b6b6:	f7fb f8e1 	bl	800687c <pbuf_alloc>
 800b6ba:	0003      	movs	r3, r0
 800b6bc:	61bb      	str	r3, [r7, #24]
 800b6be:	69bb      	ldr	r3, [r7, #24]
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d100      	bne.n	800b6c6 <tcp_write+0x346>
 800b6c4:	e118      	b.n	800b8f8 <tcp_write+0x578>
#if TCP_CHECKSUM_ON_COPY
      /* calculate the checksum of nocopy-data */
      chksum = ~inet_chksum((u8_t*)arg + pos, seglen);
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      p2->payload = (u8_t*)arg + pos;
 800b6c6:	233a      	movs	r3, #58	; 0x3a
 800b6c8:	18fb      	adds	r3, r7, r3
 800b6ca:	881b      	ldrh	r3, [r3, #0]
 800b6cc:	68ba      	ldr	r2, [r7, #8]
 800b6ce:	18d2      	adds	r2, r2, r3
 800b6d0:	69bb      	ldr	r3, [r7, #24]
 800b6d2:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800b6d4:	232b      	movs	r3, #43	; 0x2b
 800b6d6:	18fb      	adds	r3, r7, r3
 800b6d8:	781b      	ldrb	r3, [r3, #0]
 800b6da:	b29b      	uxth	r3, r3
 800b6dc:	2200      	movs	r2, #0
 800b6de:	0019      	movs	r1, r3
 800b6e0:	2000      	movs	r0, #0
 800b6e2:	f7fb f8cb 	bl	800687c <pbuf_alloc>
 800b6e6:	0003      	movs	r3, r0
 800b6e8:	633b      	str	r3, [r7, #48]	; 0x30
 800b6ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d104      	bne.n	800b6fa <tcp_write+0x37a>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800b6f0:	69bb      	ldr	r3, [r7, #24]
 800b6f2:	0018      	movs	r0, r3
 800b6f4:	f7fb fb4e 	bl	8006d94 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 2, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800b6f8:	e101      	b.n	800b8fe <tcp_write+0x57e>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800b6fa:	69ba      	ldr	r2, [r7, #24]
 800b6fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6fe:	0011      	movs	r1, r2
 800b700:	0018      	movs	r0, r3
 800b702:	f7fb fbe6 	bl	8006ed2 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800b706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b708:	0018      	movs	r0, r3
 800b70a:	f7fb fbb5 	bl	8006e78 <pbuf_clen>
 800b70e:	0003      	movs	r3, r0
 800b710:	b299      	uxth	r1, r3
 800b712:	2038      	movs	r0, #56	; 0x38
 800b714:	183b      	adds	r3, r7, r0
 800b716:	183a      	adds	r2, r7, r0
 800b718:	8812      	ldrh	r2, [r2, #0]
 800b71a:	188a      	adds	r2, r1, r2
 800b71c:	801a      	strh	r2, [r3, #0]

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 800b71e:	183b      	adds	r3, r7, r0
 800b720:	881b      	ldrh	r3, [r3, #0]
 800b722:	2b08      	cmp	r3, #8
 800b724:	d805      	bhi.n	800b732 <tcp_write+0x3b2>
 800b726:	2338      	movs	r3, #56	; 0x38
 800b728:	18fb      	adds	r3, r7, r3
 800b72a:	881b      	ldrh	r3, [r3, #0]
 800b72c:	4a87      	ldr	r2, [pc, #540]	; (800b94c <tcp_write+0x5cc>)
 800b72e:	4293      	cmp	r3, r2
 800b730:	d904      	bls.n	800b73c <tcp_write+0x3bc>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 2, ("tcp_write: queue too long %"U16_F" (%"U16_F")\n", queuelen, TCP_SND_QUEUELEN));
      pbuf_free(p);
 800b732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b734:	0018      	movs	r0, r3
 800b736:	f7fb fb2d 	bl	8006d94 <pbuf_free>
      goto memerr;
 800b73a:	e0e0      	b.n	800b8fe <tcp_write+0x57e>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b740:	233a      	movs	r3, #58	; 0x3a
 800b742:	18fb      	adds	r3, r7, r3
 800b744:	881b      	ldrh	r3, [r3, #0]
 800b746:	18d2      	adds	r2, r2, r3
 800b748:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b74a:	68f8      	ldr	r0, [r7, #12]
 800b74c:	232a      	movs	r3, #42	; 0x2a
 800b74e:	18fb      	adds	r3, r7, r3
 800b750:	781b      	ldrb	r3, [r3, #0]
 800b752:	9300      	str	r3, [sp, #0]
 800b754:	0013      	movs	r3, r2
 800b756:	2200      	movs	r2, #0
 800b758:	f7ff fc4e 	bl	800aff8 <tcp_create_segment>
 800b75c:	0003      	movs	r3, r0
 800b75e:	647b      	str	r3, [r7, #68]	; 0x44
 800b760:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b762:	2b00      	cmp	r3, #0
 800b764:	d100      	bne.n	800b768 <tcp_write+0x3e8>
 800b766:	e0c9      	b.n	800b8fc <tcp_write+0x57c>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800b768:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d102      	bne.n	800b774 <tcp_write+0x3f4>
      queue = seg;
 800b76e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b770:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b772:	e002      	b.n	800b77a <tcp_write+0x3fa>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
      prev_seg->next = seg;
 800b774:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b776:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b778:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800b77a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b77c:	643b      	str	r3, [r7, #64]	; 0x40

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
      ntohl(seg->tcphdr->seqno),
      ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800b77e:	223a      	movs	r2, #58	; 0x3a
 800b780:	18bb      	adds	r3, r7, r2
 800b782:	18b9      	adds	r1, r7, r2
 800b784:	221c      	movs	r2, #28
 800b786:	18ba      	adds	r2, r7, r2
 800b788:	8809      	ldrh	r1, [r1, #0]
 800b78a:	8812      	ldrh	r2, [r2, #0]
 800b78c:	188a      	adds	r2, r1, r2
 800b78e:	801a      	strh	r2, [r3, #0]
  while (pos < len) {
 800b790:	233a      	movs	r3, #58	; 0x3a
 800b792:	18fa      	adds	r2, r7, r3
 800b794:	1dbb      	adds	r3, r7, #6
 800b796:	8812      	ldrh	r2, [r2, #0]
 800b798:	881b      	ldrh	r3, [r3, #0]
 800b79a:	429a      	cmp	r2, r3
 800b79c:	d200      	bcs.n	800b7a0 <tcp_write+0x420>
 800b79e:	e72a      	b.n	800b5f6 <tcp_write+0x276>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800b7a0:	2336      	movs	r3, #54	; 0x36
 800b7a2:	18fb      	adds	r3, r7, r3
 800b7a4:	881b      	ldrh	r3, [r3, #0]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d033      	beq.n	800b812 <tcp_write+0x492>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800b7aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b7ac:	685b      	ldr	r3, [r3, #4]
 800b7ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b7b0:	e023      	b.n	800b7fa <tcp_write+0x47a>
      p->tot_len += oversize_used;
 800b7b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7b4:	891a      	ldrh	r2, [r3, #8]
 800b7b6:	2336      	movs	r3, #54	; 0x36
 800b7b8:	18fb      	adds	r3, r7, r3
 800b7ba:	881b      	ldrh	r3, [r3, #0]
 800b7bc:	18d3      	adds	r3, r2, r3
 800b7be:	b29a      	uxth	r2, r3
 800b7c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7c2:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800b7c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d113      	bne.n	800b7f4 <tcp_write+0x474>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800b7cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7ce:	685b      	ldr	r3, [r3, #4]
 800b7d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b7d2:	8952      	ldrh	r2, [r2, #10]
 800b7d4:	1898      	adds	r0, r3, r2
 800b7d6:	2436      	movs	r4, #54	; 0x36
 800b7d8:	193b      	adds	r3, r7, r4
 800b7da:	881a      	ldrh	r2, [r3, #0]
 800b7dc:	68bb      	ldr	r3, [r7, #8]
 800b7de:	0019      	movs	r1, r3
 800b7e0:	f006 fc39 	bl	8012056 <memcpy>
        p->len += oversize_used;
 800b7e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7e6:	895a      	ldrh	r2, [r3, #10]
 800b7e8:	193b      	adds	r3, r7, r4
 800b7ea:	881b      	ldrh	r3, [r3, #0]
 800b7ec:	18d3      	adds	r3, r2, r3
 800b7ee:	b29a      	uxth	r2, r3
 800b7f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7f2:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800b7f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b7fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d1d8      	bne.n	800b7b2 <tcp_write+0x432>
      }
    }
    last_unsent->len += oversize_used;
 800b800:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b802:	891a      	ldrh	r2, [r3, #8]
 800b804:	2336      	movs	r3, #54	; 0x36
 800b806:	18fb      	adds	r3, r7, r3
 800b808:	881b      	ldrh	r3, [r3, #0]
 800b80a:	18d3      	adds	r3, r2, r3
 800b80c:	b29a      	uxth	r2, r3
 800b80e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b810:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800b812:	2316      	movs	r3, #22
 800b814:	18fb      	adds	r3, r7, r3
 800b816:	8819      	ldrh	r1, [r3, #0]
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	226a      	movs	r2, #106	; 0x6a
 800b81c:	5299      	strh	r1, [r3, r2]
#endif /* TCP_OVERSIZE */

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p
   */
  if (concat_p != NULL) {
 800b81e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b820:	2b00      	cmp	r3, #0
 800b822:	d00e      	beq.n	800b842 <tcp_write+0x4c2>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
      (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800b824:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b826:	685b      	ldr	r3, [r3, #4]
 800b828:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b82a:	0011      	movs	r1, r2
 800b82c:	0018      	movs	r0, r3
 800b82e:	f7fb fb50 	bl	8006ed2 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800b832:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b834:	891a      	ldrh	r2, [r3, #8]
 800b836:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b838:	891b      	ldrh	r3, [r3, #8]
 800b83a:	18d3      	adds	r3, r2, r3
 800b83c:	b29a      	uxth	r2, r3
 800b83e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b840:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800b842:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b844:	2b00      	cmp	r3, #0
 800b846:	d103      	bne.n	800b850 <tcp_write+0x4d0>
    pcb->unsent = queue;
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b84c:	66da      	str	r2, [r3, #108]	; 0x6c
 800b84e:	e002      	b.n	800b856 <tcp_write+0x4d6>
  } else {
    last_unsent->next = queue;
 800b850:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b852:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b854:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b85a:	1dbb      	adds	r3, r7, #6
 800b85c:	881b      	ldrh	r3, [r3, #0]
 800b85e:	18d2      	adds	r2, r2, r3
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	2266      	movs	r2, #102	; 0x66
 800b868:	5a9a      	ldrh	r2, [r3, r2]
 800b86a:	1dbb      	adds	r3, r7, #6
 800b86c:	881b      	ldrh	r3, [r3, #0]
 800b86e:	1ad3      	subs	r3, r2, r3
 800b870:	b299      	uxth	r1, r3
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	2266      	movs	r2, #102	; 0x66
 800b876:	5299      	strh	r1, [r3, r2]
  pcb->snd_queuelen = queuelen;
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	2238      	movs	r2, #56	; 0x38
 800b87c:	18ba      	adds	r2, r7, r2
 800b87e:	2168      	movs	r1, #104	; 0x68
 800b880:	8812      	ldrh	r2, [r2, #0]
 800b882:	525a      	strh	r2, [r3, r1]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
    pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	2268      	movs	r2, #104	; 0x68
 800b888:	5a9b      	ldrh	r3, [r3, r2]
    LWIP_ASSERT("tcp_write: valid queue length",
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
 800b88a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d02b      	beq.n	800b8e8 <tcp_write+0x568>
 800b890:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b892:	68db      	ldr	r3, [r3, #12]
 800b894:	2b00      	cmp	r3, #0
 800b896:	d027      	beq.n	800b8e8 <tcp_write+0x568>
 800b898:	1d7b      	adds	r3, r7, #5
 800b89a:	781b      	ldrb	r3, [r3, #0]
 800b89c:	2202      	movs	r2, #2
 800b89e:	4013      	ands	r3, r2
 800b8a0:	d122      	bne.n	800b8e8 <tcp_write+0x568>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800b8a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b8a4:	68db      	ldr	r3, [r3, #12]
 800b8a6:	7b1a      	ldrb	r2, [r3, #12]
 800b8a8:	7b5b      	ldrb	r3, [r3, #13]
 800b8aa:	021b      	lsls	r3, r3, #8
 800b8ac:	4313      	orrs	r3, r2
 800b8ae:	b29c      	uxth	r4, r3
 800b8b0:	2008      	movs	r0, #8
 800b8b2:	f7fa fa27 	bl	8005d04 <lwip_htons>
 800b8b6:	0003      	movs	r3, r0
 800b8b8:	001a      	movs	r2, r3
 800b8ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b8bc:	68db      	ldr	r3, [r3, #12]
 800b8be:	4322      	orrs	r2, r4
 800b8c0:	b292      	uxth	r2, r2
 800b8c2:	21ff      	movs	r1, #255	; 0xff
 800b8c4:	4011      	ands	r1, r2
 800b8c6:	000c      	movs	r4, r1
 800b8c8:	7b19      	ldrb	r1, [r3, #12]
 800b8ca:	2000      	movs	r0, #0
 800b8cc:	4001      	ands	r1, r0
 800b8ce:	1c08      	adds	r0, r1, #0
 800b8d0:	1c21      	adds	r1, r4, #0
 800b8d2:	4301      	orrs	r1, r0
 800b8d4:	7319      	strb	r1, [r3, #12]
 800b8d6:	0a12      	lsrs	r2, r2, #8
 800b8d8:	b290      	uxth	r0, r2
 800b8da:	7b5a      	ldrb	r2, [r3, #13]
 800b8dc:	2100      	movs	r1, #0
 800b8de:	400a      	ands	r2, r1
 800b8e0:	1c11      	adds	r1, r2, #0
 800b8e2:	1c02      	adds	r2, r0, #0
 800b8e4:	430a      	orrs	r2, r1
 800b8e6:	735a      	strb	r2, [r3, #13]
  }

  return ERR_OK;
 800b8e8:	2300      	movs	r3, #0
 800b8ea:	e02b      	b.n	800b944 <tcp_write+0x5c4>
          goto memerr;
 800b8ec:	46c0      	nop			; (mov r8, r8)
 800b8ee:	e006      	b.n	800b8fe <tcp_write+0x57e>
          goto memerr;
 800b8f0:	46c0      	nop			; (mov r8, r8)
 800b8f2:	e004      	b.n	800b8fe <tcp_write+0x57e>
        goto memerr;
 800b8f4:	46c0      	nop			; (mov r8, r8)
 800b8f6:	e002      	b.n	800b8fe <tcp_write+0x57e>
        goto memerr;
 800b8f8:	46c0      	nop			; (mov r8, r8)
 800b8fa:	e000      	b.n	800b8fe <tcp_write+0x57e>
      goto memerr;
 800b8fc:	46c0      	nop			; (mov r8, r8)
memerr:
  pcb->flags |= TF_NAGLEMEMERR;
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	7f9b      	ldrb	r3, [r3, #30]
 800b902:	2280      	movs	r2, #128	; 0x80
 800b904:	4252      	negs	r2, r2
 800b906:	4313      	orrs	r3, r2
 800b908:	b2da      	uxtb	r2, r3
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	779a      	strb	r2, [r3, #30]
  TCP_STATS_INC(tcp.memerr);
 800b90e:	4b10      	ldr	r3, [pc, #64]	; (800b950 <tcp_write+0x5d0>)
 800b910:	229c      	movs	r2, #156	; 0x9c
 800b912:	5a9b      	ldrh	r3, [r3, r2]
 800b914:	3301      	adds	r3, #1
 800b916:	b299      	uxth	r1, r3
 800b918:	4b0d      	ldr	r3, [pc, #52]	; (800b950 <tcp_write+0x5d0>)
 800b91a:	229c      	movs	r2, #156	; 0x9c
 800b91c:	5299      	strh	r1, [r3, r2]

  if (concat_p != NULL) {
 800b91e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b920:	2b00      	cmp	r3, #0
 800b922:	d003      	beq.n	800b92c <tcp_write+0x5ac>
    pbuf_free(concat_p);
 800b924:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b926:	0018      	movs	r0, r3
 800b928:	f7fb fa34 	bl	8006d94 <pbuf_free>
  }
  if (queue != NULL) {
 800b92c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d003      	beq.n	800b93a <tcp_write+0x5ba>
    tcp_segs_free(queue);
 800b932:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b934:	0018      	movs	r0, r3
 800b936:	f7fc fbb7 	bl	80080a8 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	2268      	movs	r2, #104	; 0x68
 800b93e:	5a9b      	ldrh	r3, [r3, r2]
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800b940:	2301      	movs	r3, #1
 800b942:	425b      	negs	r3, r3
}
 800b944:	0018      	movs	r0, r3
 800b946:	46bd      	mov	sp, r7
 800b948:	b014      	add	sp, #80	; 0x50
 800b94a:	bdb0      	pop	{r4, r5, r7, pc}
 800b94c:	0000fffc 	.word	0x0000fffc
 800b950:	2000340c 	.word	0x2000340c

0800b954 <tcp_enqueue_flags>:
 * @param optdata pointer to TCP options, or NULL.
 * @param optlen length of TCP options in bytes.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800b954:	b590      	push	{r4, r7, lr}
 800b956:	b08b      	sub	sp, #44	; 0x2c
 800b958:	af02      	add	r7, sp, #8
 800b95a:	6078      	str	r0, [r7, #4]
 800b95c:	000a      	movs	r2, r1
 800b95e:	1cfb      	adds	r3, r7, #3
 800b960:	701a      	strb	r2, [r3, #0]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800b962:	231f      	movs	r3, #31
 800b964:	18fb      	adds	r3, r7, r3
 800b966:	2200      	movs	r2, #0
 800b968:	701a      	strb	r2, [r3, #0]
  u8_t optlen = 0;
 800b96a:	2317      	movs	r3, #23
 800b96c:	18fb      	adds	r3, r7, r3
 800b96e:	2200      	movs	r2, #0
 800b970:	701a      	strb	r2, [r3, #0]

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	2268      	movs	r2, #104	; 0x68
 800b976:	5a9b      	ldrh	r3, [r3, r2]
 800b978:	2b07      	cmp	r3, #7
 800b97a:	d805      	bhi.n	800b988 <tcp_enqueue_flags+0x34>
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	2268      	movs	r2, #104	; 0x68
 800b980:	5a9b      	ldrh	r3, [r3, r2]
 800b982:	4a6f      	ldr	r2, [pc, #444]	; (800bb40 <tcp_enqueue_flags+0x1ec>)
 800b984:	4293      	cmp	r3, r2
 800b986:	d912      	bls.n	800b9ae <tcp_enqueue_flags+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 3, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
 800b988:	4b6e      	ldr	r3, [pc, #440]	; (800bb44 <tcp_enqueue_flags+0x1f0>)
 800b98a:	229c      	movs	r2, #156	; 0x9c
 800b98c:	5a9b      	ldrh	r3, [r3, r2]
 800b98e:	3301      	adds	r3, #1
 800b990:	b299      	uxth	r1, r3
 800b992:	4b6c      	ldr	r3, [pc, #432]	; (800bb44 <tcp_enqueue_flags+0x1f0>)
 800b994:	229c      	movs	r2, #156	; 0x9c
 800b996:	5299      	strh	r1, [r3, r2]
    pcb->flags |= TF_NAGLEMEMERR;
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	7f9b      	ldrb	r3, [r3, #30]
 800b99c:	2280      	movs	r2, #128	; 0x80
 800b99e:	4252      	negs	r2, r2
 800b9a0:	4313      	orrs	r3, r2
 800b9a2:	b2da      	uxtb	r2, r3
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	779a      	strb	r2, [r3, #30]
    return ERR_MEM;
 800b9a8:	2301      	movs	r3, #1
 800b9aa:	425b      	negs	r3, r3
 800b9ac:	e0c3      	b.n	800bb36 <tcp_enqueue_flags+0x1e2>
  }

  if (flags & TCP_SYN) {
 800b9ae:	1cfb      	adds	r3, r7, #3
 800b9b0:	781b      	ldrb	r3, [r3, #0]
 800b9b2:	2202      	movs	r2, #2
 800b9b4:	4013      	ands	r3, r2
 800b9b6:	d003      	beq.n	800b9c0 <tcp_enqueue_flags+0x6c>
    optflags = TF_SEG_OPTS_MSS;
 800b9b8:	231f      	movs	r3, #31
 800b9ba:	18fb      	adds	r3, r7, r3
 800b9bc:	2201      	movs	r2, #1
 800b9be:	701a      	strb	r2, [r3, #0]
#if LWIP_TCP_TIMESTAMPS
  if ((pcb->flags & TF_TIMESTAMP)) {
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800b9c0:	201f      	movs	r0, #31
 800b9c2:	183b      	adds	r3, r7, r0
 800b9c4:	781b      	ldrb	r3, [r3, #0]
 800b9c6:	009b      	lsls	r3, r3, #2
 800b9c8:	b2db      	uxtb	r3, r3
 800b9ca:	2204      	movs	r2, #4
 800b9cc:	4013      	ands	r3, r2
 800b9ce:	b2d9      	uxtb	r1, r3
 800b9d0:	183b      	adds	r3, r7, r0
 800b9d2:	781b      	ldrb	r3, [r3, #0]
 800b9d4:	2202      	movs	r2, #2
 800b9d6:	4013      	ands	r3, r2
 800b9d8:	d001      	beq.n	800b9de <tcp_enqueue_flags+0x8a>
 800b9da:	230c      	movs	r3, #12
 800b9dc:	e000      	b.n	800b9e0 <tcp_enqueue_flags+0x8c>
 800b9de:	2300      	movs	r3, #0
 800b9e0:	2217      	movs	r2, #23
 800b9e2:	18ba      	adds	r2, r7, r2
 800b9e4:	185b      	adds	r3, r3, r1
 800b9e6:	7013      	strb	r3, [r2, #0]

  /* tcp_enqueue_flags is always called with either SYN or FIN in flags.
   * We need one available snd_buf byte to do that.
   * This means we can't send FIN while snd_buf==0. A better fix would be to
   * not include SYN and FIN sequence numbers in the snd_buf count. */
  if (pcb->snd_buf == 0) {
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	2266      	movs	r2, #102	; 0x66
 800b9ec:	5a9b      	ldrh	r3, [r3, r2]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d10a      	bne.n	800ba08 <tcp_enqueue_flags+0xb4>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 3, ("tcp_enqueue_flags: no send buffer available\n"));
    TCP_STATS_INC(tcp.memerr);
 800b9f2:	4b54      	ldr	r3, [pc, #336]	; (800bb44 <tcp_enqueue_flags+0x1f0>)
 800b9f4:	229c      	movs	r2, #156	; 0x9c
 800b9f6:	5a9b      	ldrh	r3, [r3, r2]
 800b9f8:	3301      	adds	r3, #1
 800b9fa:	b299      	uxth	r1, r3
 800b9fc:	4b51      	ldr	r3, [pc, #324]	; (800bb44 <tcp_enqueue_flags+0x1f0>)
 800b9fe:	229c      	movs	r2, #156	; 0x9c
 800ba00:	5299      	strh	r1, [r3, r2]
    return ERR_MEM;
 800ba02:	2301      	movs	r3, #1
 800ba04:	425b      	negs	r3, r3
 800ba06:	e096      	b.n	800bb36 <tcp_enqueue_flags+0x1e2>
  }

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800ba08:	2317      	movs	r3, #23
 800ba0a:	18fb      	adds	r3, r7, r3
 800ba0c:	781b      	ldrb	r3, [r3, #0]
 800ba0e:	b29b      	uxth	r3, r3
 800ba10:	2200      	movs	r2, #0
 800ba12:	0019      	movs	r1, r3
 800ba14:	2000      	movs	r0, #0
 800ba16:	f7fa ff31 	bl	800687c <pbuf_alloc>
 800ba1a:	0003      	movs	r3, r0
 800ba1c:	613b      	str	r3, [r7, #16]
 800ba1e:	693b      	ldr	r3, [r7, #16]
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d112      	bne.n	800ba4a <tcp_enqueue_flags+0xf6>
    pcb->flags |= TF_NAGLEMEMERR;
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	7f9b      	ldrb	r3, [r3, #30]
 800ba28:	2280      	movs	r2, #128	; 0x80
 800ba2a:	4252      	negs	r2, r2
 800ba2c:	4313      	orrs	r3, r2
 800ba2e:	b2da      	uxtb	r2, r3
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	779a      	strb	r2, [r3, #30]
    TCP_STATS_INC(tcp.memerr);
 800ba34:	4b43      	ldr	r3, [pc, #268]	; (800bb44 <tcp_enqueue_flags+0x1f0>)
 800ba36:	229c      	movs	r2, #156	; 0x9c
 800ba38:	5a9b      	ldrh	r3, [r3, r2]
 800ba3a:	3301      	adds	r3, #1
 800ba3c:	b299      	uxth	r1, r3
 800ba3e:	4b41      	ldr	r3, [pc, #260]	; (800bb44 <tcp_enqueue_flags+0x1f0>)
 800ba40:	229c      	movs	r2, #156	; 0x9c
 800ba42:	5299      	strh	r1, [r3, r2]
    return ERR_MEM;
 800ba44:	2301      	movs	r3, #1
 800ba46:	425b      	negs	r3, r3
 800ba48:	e075      	b.n	800bb36 <tcp_enqueue_flags+0x1e2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
 800ba4e:	1cfb      	adds	r3, r7, #3
 800ba50:	781a      	ldrb	r2, [r3, #0]
 800ba52:	6939      	ldr	r1, [r7, #16]
 800ba54:	6878      	ldr	r0, [r7, #4]
 800ba56:	231f      	movs	r3, #31
 800ba58:	18fb      	adds	r3, r7, r3
 800ba5a:	781b      	ldrb	r3, [r3, #0]
 800ba5c:	9300      	str	r3, [sp, #0]
 800ba5e:	0023      	movs	r3, r4
 800ba60:	f7ff faca 	bl	800aff8 <tcp_create_segment>
 800ba64:	0003      	movs	r3, r0
 800ba66:	60fb      	str	r3, [r7, #12]
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d112      	bne.n	800ba94 <tcp_enqueue_flags+0x140>
    pcb->flags |= TF_NAGLEMEMERR;
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	7f9b      	ldrb	r3, [r3, #30]
 800ba72:	2280      	movs	r2, #128	; 0x80
 800ba74:	4252      	negs	r2, r2
 800ba76:	4313      	orrs	r3, r2
 800ba78:	b2da      	uxtb	r2, r3
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	779a      	strb	r2, [r3, #30]
    TCP_STATS_INC(tcp.memerr);
 800ba7e:	4b31      	ldr	r3, [pc, #196]	; (800bb44 <tcp_enqueue_flags+0x1f0>)
 800ba80:	229c      	movs	r2, #156	; 0x9c
 800ba82:	5a9b      	ldrh	r3, [r3, r2]
 800ba84:	3301      	adds	r3, #1
 800ba86:	b299      	uxth	r1, r3
 800ba88:	4b2e      	ldr	r3, [pc, #184]	; (800bb44 <tcp_enqueue_flags+0x1f0>)
 800ba8a:	229c      	movs	r2, #156	; 0x9c
 800ba8c:	5299      	strh	r1, [r3, r2]
    return ERR_MEM;
 800ba8e:	2301      	movs	r3, #1
 800ba90:	425b      	negs	r3, r3
 800ba92:	e050      	b.n	800bb36 <tcp_enqueue_flags+0x1e2>
               ntohl(seg->tcphdr->seqno),
               ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d103      	bne.n	800baa4 <tcp_enqueue_flags+0x150>
    pcb->unsent = seg;
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	68fa      	ldr	r2, [r7, #12]
 800baa0:	66da      	str	r2, [r3, #108]	; 0x6c
 800baa2:	e00d      	b.n	800bac0 <tcp_enqueue_flags+0x16c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800baa8:	61bb      	str	r3, [r7, #24]
 800baaa:	e002      	b.n	800bab2 <tcp_enqueue_flags+0x15e>
 800baac:	69bb      	ldr	r3, [r7, #24]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	61bb      	str	r3, [r7, #24]
 800bab2:	69bb      	ldr	r3, [r7, #24]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d1f8      	bne.n	800baac <tcp_enqueue_flags+0x158>
    useg->next = seg;
 800baba:	69bb      	ldr	r3, [r7, #24]
 800babc:	68fa      	ldr	r2, [r7, #12]
 800babe:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	226a      	movs	r2, #106	; 0x6a
 800bac4:	2100      	movs	r1, #0
 800bac6:	5299      	strh	r1, [r3, r2]
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800bac8:	1cfb      	adds	r3, r7, #3
 800baca:	781b      	ldrb	r3, [r3, #0]
 800bacc:	2202      	movs	r2, #2
 800bace:	4013      	ands	r3, r2
 800bad0:	d104      	bne.n	800badc <tcp_enqueue_flags+0x188>
 800bad2:	1cfb      	adds	r3, r7, #3
 800bad4:	781b      	ldrb	r3, [r3, #0]
 800bad6:	2201      	movs	r2, #1
 800bad8:	4013      	ands	r3, r2
 800bada:	d00c      	beq.n	800baf6 <tcp_enqueue_flags+0x1a2>
    pcb->snd_lbb++;
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bae0:	1c5a      	adds	r2, r3, #1
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
    pcb->snd_buf--;
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	2266      	movs	r2, #102	; 0x66
 800baea:	5a9b      	ldrh	r3, [r3, r2]
 800baec:	3b01      	subs	r3, #1
 800baee:	b299      	uxth	r1, r3
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	2266      	movs	r2, #102	; 0x66
 800baf4:	5299      	strh	r1, [r3, r2]
  }
  if (flags & TCP_FIN) {
 800baf6:	1cfb      	adds	r3, r7, #3
 800baf8:	781b      	ldrb	r3, [r3, #0]
 800bafa:	2201      	movs	r2, #1
 800bafc:	4013      	ands	r3, r2
 800bafe:	d006      	beq.n	800bb0e <tcp_enqueue_flags+0x1ba>
    pcb->flags |= TF_FIN;
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	7f9b      	ldrb	r3, [r3, #30]
 800bb04:	2220      	movs	r2, #32
 800bb06:	4313      	orrs	r3, r2
 800bb08:	b2da      	uxtb	r2, r3
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	779a      	strb	r2, [r3, #30]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	685b      	ldr	r3, [r3, #4]
 800bb12:	0018      	movs	r0, r3
 800bb14:	f7fb f9b0 	bl	8006e78 <pbuf_clen>
 800bb18:	0003      	movs	r3, r0
 800bb1a:	0019      	movs	r1, r3
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	2268      	movs	r2, #104	; 0x68
 800bb20:	5a9a      	ldrh	r2, [r3, r2]
 800bb22:	b28b      	uxth	r3, r1
 800bb24:	18d3      	adds	r3, r2, r3
 800bb26:	b299      	uxth	r1, r3
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	2268      	movs	r2, #104	; 0x68
 800bb2c:	5299      	strh	r1, [r3, r2]
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	2268      	movs	r2, #104	; 0x68
 800bb32:	5a9b      	ldrh	r3, [r3, r2]
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800bb34:	2300      	movs	r3, #0
}
 800bb36:	0018      	movs	r0, r3
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	b009      	add	sp, #36	; 0x24
 800bb3c:	bd90      	pop	{r4, r7, pc}
 800bb3e:	46c0      	nop			; (mov r8, r8)
 800bb40:	0000fffc 	.word	0x0000fffc
 800bb44:	2000340c 	.word	0x2000340c

0800bb48 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800bb48:	b5b0      	push	{r4, r5, r7, lr}
 800bb4a:	b088      	sub	sp, #32
 800bb4c:	af02      	add	r7, sp, #8
 800bb4e:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  u8_t optlen = 0;
 800bb50:	2117      	movs	r1, #23
 800bb52:	187b      	adds	r3, r7, r1
 800bb54:	2200      	movs	r2, #0
 800bb56:	701a      	strb	r2, [r3, #0]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, htonl(pcb->snd_nxt));
 800bb58:	187b      	adds	r3, r7, r1
 800bb5a:	781b      	ldrb	r3, [r3, #0]
 800bb5c:	b29c      	uxth	r4, r3
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb62:	0018      	movs	r0, r3
 800bb64:	f7fa f8f4 	bl	8005d50 <lwip_htonl>
 800bb68:	0003      	movs	r3, r0
 800bb6a:	6878      	ldr	r0, [r7, #4]
 800bb6c:	2200      	movs	r2, #0
 800bb6e:	0021      	movs	r1, r4
 800bb70:	f7ff f8dc 	bl	800ad2c <tcp_output_alloc_header>
 800bb74:	0003      	movs	r3, r0
 800bb76:	613b      	str	r3, [r7, #16]
  if (p == NULL) {
 800bb78:	693b      	ldr	r3, [r7, #16]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d102      	bne.n	800bb84 <tcp_send_empty_ack+0x3c>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800bb7e:	2302      	movs	r3, #2
 800bb80:	425b      	negs	r3, r3
 800bb82:	e03d      	b.n	800bc00 <tcp_send_empty_ack+0xb8>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800bb84:	693b      	ldr	r3, [r7, #16]
 800bb86:	685b      	ldr	r3, [r3, #4]
 800bb88:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, 
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  /* remove ACK flags from the PCB, as we send an empty ACK now */
  pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	7f9b      	ldrb	r3, [r3, #30]
 800bb8e:	2203      	movs	r2, #3
 800bb90:	4393      	bics	r3, r2
 800bb92:	b2da      	uxtb	r2, r3
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	779a      	strb	r2, [r3, #30]
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif 

#if CHECKSUM_GEN_TCP
  tcphdr->chksum = inet_chksum_pseudo(p, &(pcb->local_ip), &(pcb->remote_ip),
 800bb98:	6879      	ldr	r1, [r7, #4]
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	1d1a      	adds	r2, r3, #4
 800bb9e:	693b      	ldr	r3, [r7, #16]
 800bba0:	891b      	ldrh	r3, [r3, #8]
 800bba2:	6938      	ldr	r0, [r7, #16]
 800bba4:	9300      	str	r3, [sp, #0]
 800bba6:	2306      	movs	r3, #6
 800bba8:	f001 fe43 	bl	800d832 <inet_chksum_pseudo>
 800bbac:	0003      	movs	r3, r0
 800bbae:	001a      	movs	r2, r3
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	21ff      	movs	r1, #255	; 0xff
 800bbb4:	4011      	ands	r1, r2
 800bbb6:	000c      	movs	r4, r1
 800bbb8:	7c19      	ldrb	r1, [r3, #16]
 800bbba:	2000      	movs	r0, #0
 800bbbc:	4001      	ands	r1, r0
 800bbbe:	1c08      	adds	r0, r1, #0
 800bbc0:	1c21      	adds	r1, r4, #0
 800bbc2:	4301      	orrs	r1, r0
 800bbc4:	7419      	strb	r1, [r3, #16]
 800bbc6:	0a12      	lsrs	r2, r2, #8
 800bbc8:	b290      	uxth	r0, r2
 800bbca:	7c5a      	ldrb	r2, [r3, #17]
 800bbcc:	2100      	movs	r1, #0
 800bbce:	400a      	ands	r2, r1
 800bbd0:	1c11      	adds	r1, r2, #0
 800bbd2:	1c02      	adds	r2, r0, #0
 800bbd4:	430a      	orrs	r2, r1
 800bbd6:	745a      	strb	r2, [r3, #17]
#endif
#if LWIP_NETIF_HWADDRHINT
  ip_output_hinted(p, &(pcb->local_ip), &(pcb->remote_ip), pcb->ttl, pcb->tos,
      IP_PROTO_TCP, &(pcb->addr_hint));
#else /* LWIP_NETIF_HWADDRHINT*/
  ip_output(p, &(pcb->local_ip), &(pcb->remote_ip), pcb->ttl, pcb->tos,
 800bbd8:	6879      	ldr	r1, [r7, #4]
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	1d1c      	adds	r4, r3, #4
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	7a9d      	ldrb	r5, [r3, #10]
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	7a5b      	ldrb	r3, [r3, #9]
 800bbe6:	6938      	ldr	r0, [r7, #16]
 800bbe8:	2206      	movs	r2, #6
 800bbea:	9201      	str	r2, [sp, #4]
 800bbec:	9300      	str	r3, [sp, #0]
 800bbee:	002b      	movs	r3, r5
 800bbf0:	0022      	movs	r2, r4
 800bbf2:	f002 fb09 	bl	800e208 <ip_output>
      IP_PROTO_TCP);
#endif /* LWIP_NETIF_HWADDRHINT*/
  pbuf_free(p);
 800bbf6:	693b      	ldr	r3, [r7, #16]
 800bbf8:	0018      	movs	r0, r3
 800bbfa:	f7fb f8cb 	bl	8006d94 <pbuf_free>

  return ERR_OK;
 800bbfe:	2300      	movs	r3, #0
}
 800bc00:	0018      	movs	r0, r3
 800bc02:	46bd      	mov	sp, r7
 800bc04:	b006      	add	sp, #24
 800bc06:	bdb0      	pop	{r4, r5, r7, pc}

0800bc08 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800bc08:	b5b0      	push	{r4, r5, r7, lr}
 800bc0a:	b088      	sub	sp, #32
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	6078      	str	r0, [r7, #4]

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800bc10:	4bcd      	ldr	r3, [pc, #820]	; (800bf48 <tcp_output+0x340>)
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	687a      	ldr	r2, [r7, #4]
 800bc16:	429a      	cmp	r2, r3
 800bc18:	d101      	bne.n	800bc1e <tcp_output+0x16>
    return ERR_OK;
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	e1a7      	b.n	800bf6e <tcp_output+0x366>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	2260      	movs	r2, #96	; 0x60
 800bc22:	5a9a      	ldrh	r2, [r3, r2]
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	214c      	movs	r1, #76	; 0x4c
 800bc28:	5a5b      	ldrh	r3, [r3, r1]
 800bc2a:	429a      	cmp	r2, r3
 800bc2c:	d203      	bcs.n	800bc36 <tcp_output+0x2e>
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	2260      	movs	r2, #96	; 0x60
 800bc32:	5a9b      	ldrh	r3, [r3, r2]
 800bc34:	e002      	b.n	800bc3c <tcp_output+0x34>
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	224c      	movs	r2, #76	; 0x4c
 800bc3a:	5a9b      	ldrh	r3, [r3, r2]
 800bc3c:	613b      	str	r3, [r7, #16]

  seg = pcb->unsent;
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bc42:	61fb      	str	r3, [r7, #28]
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	7f9b      	ldrb	r3, [r3, #30]
 800bc48:	001a      	movs	r2, r3
 800bc4a:	2302      	movs	r3, #2
 800bc4c:	4013      	ands	r3, r2
 800bc4e:	d021      	beq.n	800bc94 <tcp_output+0x8c>
 800bc50:	69fb      	ldr	r3, [r7, #28]
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d018      	beq.n	800bc88 <tcp_output+0x80>
     (seg == NULL ||
      ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 800bc56:	69fb      	ldr	r3, [r7, #28]
 800bc58:	68db      	ldr	r3, [r3, #12]
 800bc5a:	791a      	ldrb	r2, [r3, #4]
 800bc5c:	7959      	ldrb	r1, [r3, #5]
 800bc5e:	0209      	lsls	r1, r1, #8
 800bc60:	430a      	orrs	r2, r1
 800bc62:	7999      	ldrb	r1, [r3, #6]
 800bc64:	0409      	lsls	r1, r1, #16
 800bc66:	430a      	orrs	r2, r1
 800bc68:	79db      	ldrb	r3, [r3, #7]
 800bc6a:	061b      	lsls	r3, r3, #24
 800bc6c:	4313      	orrs	r3, r2
 800bc6e:	0018      	movs	r0, r3
 800bc70:	f7fa f887 	bl	8005d82 <lwip_ntohl>
 800bc74:	0002      	movs	r2, r0
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bc7a:	1ad3      	subs	r3, r2, r3
 800bc7c:	69fa      	ldr	r2, [r7, #28]
 800bc7e:	8912      	ldrh	r2, [r2, #8]
 800bc80:	189b      	adds	r3, r3, r2
     (seg == NULL ||
 800bc82:	693a      	ldr	r2, [r7, #16]
 800bc84:	429a      	cmp	r2, r3
 800bc86:	d205      	bcs.n	800bc94 <tcp_output+0x8c>
     return tcp_send_empty_ack(pcb);
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	0018      	movs	r0, r3
 800bc8c:	f7ff ff5c 	bl	800bb48 <tcp_send_empty_ack>
 800bc90:	0003      	movs	r3, r0
 800bc92:	e16c      	b.n	800bf6e <tcp_output+0x366>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc98:	61bb      	str	r3, [r7, #24]
  if (useg != NULL) {
 800bc9a:	69bb      	ldr	r3, [r7, #24]
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d100      	bne.n	800bca2 <tcp_output+0x9a>
 800bca0:	e133      	b.n	800bf0a <tcp_output+0x302>
    for (; useg->next != NULL; useg = useg->next);
 800bca2:	e002      	b.n	800bcaa <tcp_output+0xa2>
 800bca4:	69bb      	ldr	r3, [r7, #24]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	61bb      	str	r3, [r7, #24]
 800bcaa:	69bb      	ldr	r3, [r7, #24]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d1f8      	bne.n	800bca4 <tcp_output+0x9c>
                 ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 ntohl(seg->tcphdr->seqno), pcb->lastack));
  }
#endif /* TCP_CWND_DEBUG */
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800bcb2:	e12a      	b.n	800bf0a <tcp_output+0x302>
         ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!", 
 800bcb4:	69fb      	ldr	r3, [r7, #28]
 800bcb6:	68db      	ldr	r3, [r3, #12]
 800bcb8:	7b1a      	ldrb	r2, [r3, #12]
 800bcba:	7b5b      	ldrb	r3, [r3, #13]
 800bcbc:	021b      	lsls	r3, r3, #8
 800bcbe:	4313      	orrs	r3, r2
 800bcc0:	b29b      	uxth	r3, r3
 800bcc2:	0018      	movs	r0, r3
 800bcc4:	f7fa f834 	bl	8005d30 <lwip_ntohs>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if((tcp_do_output_nagle(pcb) == 0) &&
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d01f      	beq.n	800bd10 <tcp_output+0x108>
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	7f9b      	ldrb	r3, [r3, #30]
 800bcd4:	001a      	movs	r2, r3
 800bcd6:	2344      	movs	r3, #68	; 0x44
 800bcd8:	4013      	ands	r3, r2
 800bcda:	d119      	bne.n	800bd10 <tcp_output+0x108>
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d00b      	beq.n	800bcfc <tcp_output+0xf4>
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d110      	bne.n	800bd10 <tcp_output+0x108>
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bcf2:	891a      	ldrh	r2, [r3, #8]
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bcf8:	429a      	cmp	r2, r3
 800bcfa:	d209      	bcs.n	800bd10 <tcp_output+0x108>
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	2266      	movs	r2, #102	; 0x66
 800bd00:	5a9b      	ldrh	r3, [r3, r2]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d004      	beq.n	800bd10 <tcp_output+0x108>
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	2268      	movs	r2, #104	; 0x68
 800bd0a:	5a9b      	ldrh	r3, [r3, r2]
 800bd0c:	2b07      	cmp	r3, #7
 800bd0e:	d901      	bls.n	800bd14 <tcp_output+0x10c>
 800bd10:	2301      	movs	r3, #1
 800bd12:	e000      	b.n	800bd16 <tcp_output+0x10e>
 800bd14:	2300      	movs	r3, #0
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d106      	bne.n	800bd28 <tcp_output+0x120>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)){
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	7f9b      	ldrb	r3, [r3, #30]
 800bd1e:	001a      	movs	r2, r3
 800bd20:	23a0      	movs	r3, #160	; 0xa0
 800bd22:	4013      	ands	r3, r2
    if((tcp_do_output_nagle(pcb) == 0) &&
 800bd24:	d100      	bne.n	800bd28 <tcp_output+0x120>
 800bd26:	e111      	b.n	800bf4c <tcp_output+0x344>
                            pcb->lastack,
                            ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    pcb->unsent = seg->next;
 800bd28:	69fb      	ldr	r3, [r7, #28]
 800bd2a:	681a      	ldr	r2, [r3, #0]
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (pcb->state != SYN_SENT) {
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	7e1b      	ldrb	r3, [r3, #24]
 800bd34:	2b02      	cmp	r3, #2
 800bd36:	d029      	beq.n	800bd8c <tcp_output+0x184>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800bd38:	69fb      	ldr	r3, [r7, #28]
 800bd3a:	68db      	ldr	r3, [r3, #12]
 800bd3c:	7b1a      	ldrb	r2, [r3, #12]
 800bd3e:	7b5b      	ldrb	r3, [r3, #13]
 800bd40:	021b      	lsls	r3, r3, #8
 800bd42:	4313      	orrs	r3, r2
 800bd44:	b29c      	uxth	r4, r3
 800bd46:	2010      	movs	r0, #16
 800bd48:	f7f9 ffdc 	bl	8005d04 <lwip_htons>
 800bd4c:	0003      	movs	r3, r0
 800bd4e:	001a      	movs	r2, r3
 800bd50:	69fb      	ldr	r3, [r7, #28]
 800bd52:	68db      	ldr	r3, [r3, #12]
 800bd54:	4322      	orrs	r2, r4
 800bd56:	b292      	uxth	r2, r2
 800bd58:	21ff      	movs	r1, #255	; 0xff
 800bd5a:	4011      	ands	r1, r2
 800bd5c:	000c      	movs	r4, r1
 800bd5e:	7b19      	ldrb	r1, [r3, #12]
 800bd60:	2000      	movs	r0, #0
 800bd62:	4001      	ands	r1, r0
 800bd64:	1c08      	adds	r0, r1, #0
 800bd66:	1c21      	adds	r1, r4, #0
 800bd68:	4301      	orrs	r1, r0
 800bd6a:	7319      	strb	r1, [r3, #12]
 800bd6c:	0a12      	lsrs	r2, r2, #8
 800bd6e:	b290      	uxth	r0, r2
 800bd70:	7b5a      	ldrb	r2, [r3, #13]
 800bd72:	2100      	movs	r1, #0
 800bd74:	400a      	ands	r2, r1
 800bd76:	1c11      	adds	r1, r2, #0
 800bd78:	1c02      	adds	r2, r0, #0
 800bd7a:	430a      	orrs	r2, r1
 800bd7c:	735a      	strb	r2, [r3, #13]
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	7f9b      	ldrb	r3, [r3, #30]
 800bd82:	2203      	movs	r2, #3
 800bd84:	4393      	bics	r3, r2
 800bd86:	b2da      	uxtb	r2, r3
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	779a      	strb	r2, [r3, #30]
    }

    tcp_output_segment(seg, pcb);
 800bd8c:	687a      	ldr	r2, [r7, #4]
 800bd8e:	69fb      	ldr	r3, [r7, #28]
 800bd90:	0011      	movs	r1, r2
 800bd92:	0018      	movs	r0, r3
 800bd94:	f000 f8f0 	bl	800bf78 <tcp_output_segment>
    snd_nxt = ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800bd98:	69fb      	ldr	r3, [r7, #28]
 800bd9a:	68db      	ldr	r3, [r3, #12]
 800bd9c:	791a      	ldrb	r2, [r3, #4]
 800bd9e:	7959      	ldrb	r1, [r3, #5]
 800bda0:	0209      	lsls	r1, r1, #8
 800bda2:	430a      	orrs	r2, r1
 800bda4:	7999      	ldrb	r1, [r3, #6]
 800bda6:	0409      	lsls	r1, r1, #16
 800bda8:	430a      	orrs	r2, r1
 800bdaa:	79db      	ldrb	r3, [r3, #7]
 800bdac:	061b      	lsls	r3, r3, #24
 800bdae:	4313      	orrs	r3, r2
 800bdb0:	0018      	movs	r0, r3
 800bdb2:	f7f9 ffe6 	bl	8005d82 <lwip_ntohl>
 800bdb6:	0004      	movs	r4, r0
 800bdb8:	69fb      	ldr	r3, [r7, #28]
 800bdba:	891b      	ldrh	r3, [r3, #8]
 800bdbc:	001d      	movs	r5, r3
 800bdbe:	69fb      	ldr	r3, [r7, #28]
 800bdc0:	68db      	ldr	r3, [r3, #12]
 800bdc2:	7b1a      	ldrb	r2, [r3, #12]
 800bdc4:	7b5b      	ldrb	r3, [r3, #13]
 800bdc6:	021b      	lsls	r3, r3, #8
 800bdc8:	4313      	orrs	r3, r2
 800bdca:	b29b      	uxth	r3, r3
 800bdcc:	0018      	movs	r0, r3
 800bdce:	f7f9 ffaf 	bl	8005d30 <lwip_ntohs>
 800bdd2:	0003      	movs	r3, r0
 800bdd4:	001a      	movs	r2, r3
 800bdd6:	2303      	movs	r3, #3
 800bdd8:	4013      	ands	r3, r2
 800bdda:	1e5a      	subs	r2, r3, #1
 800bddc:	4193      	sbcs	r3, r2
 800bdde:	b2db      	uxtb	r3, r3
 800bde0:	18eb      	adds	r3, r5, r3
 800bde2:	18e3      	adds	r3, r4, r3
 800bde4:	60fb      	str	r3, [r7, #12]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	1ad3      	subs	r3, r2, r3
 800bdee:	d502      	bpl.n	800bdf6 <tcp_output+0x1ee>
      pcb->snd_nxt = snd_nxt;
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	68fa      	ldr	r2, [r7, #12]
 800bdf4:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800bdf6:	69fb      	ldr	r3, [r7, #28]
 800bdf8:	891b      	ldrh	r3, [r3, #8]
 800bdfa:	001c      	movs	r4, r3
 800bdfc:	69fb      	ldr	r3, [r7, #28]
 800bdfe:	68db      	ldr	r3, [r3, #12]
 800be00:	7b1a      	ldrb	r2, [r3, #12]
 800be02:	7b5b      	ldrb	r3, [r3, #13]
 800be04:	021b      	lsls	r3, r3, #8
 800be06:	4313      	orrs	r3, r2
 800be08:	b29b      	uxth	r3, r3
 800be0a:	0018      	movs	r0, r3
 800be0c:	f7f9 ff90 	bl	8005d30 <lwip_ntohs>
 800be10:	0003      	movs	r3, r0
 800be12:	001a      	movs	r2, r3
 800be14:	2303      	movs	r3, #3
 800be16:	4013      	ands	r3, r2
 800be18:	1e5a      	subs	r2, r3, #1
 800be1a:	4193      	sbcs	r3, r2
 800be1c:	b2db      	uxtb	r3, r3
 800be1e:	18e3      	adds	r3, r4, r3
 800be20:	2b00      	cmp	r3, #0
 800be22:	dd6b      	ble.n	800befc <tcp_output+0x2f4>
      seg->next = NULL;
 800be24:	69fb      	ldr	r3, [r7, #28]
 800be26:	2200      	movs	r2, #0
 800be28:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d105      	bne.n	800be3e <tcp_output+0x236>
        pcb->unacked = seg;
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	69fa      	ldr	r2, [r7, #28]
 800be36:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800be38:	69fb      	ldr	r3, [r7, #28]
 800be3a:	61bb      	str	r3, [r7, #24]
 800be3c:	e062      	b.n	800bf04 <tcp_output+0x2fc>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(ntohl(seg->tcphdr->seqno), ntohl(useg->tcphdr->seqno))) {
 800be3e:	69fb      	ldr	r3, [r7, #28]
 800be40:	68db      	ldr	r3, [r3, #12]
 800be42:	791a      	ldrb	r2, [r3, #4]
 800be44:	7959      	ldrb	r1, [r3, #5]
 800be46:	0209      	lsls	r1, r1, #8
 800be48:	430a      	orrs	r2, r1
 800be4a:	7999      	ldrb	r1, [r3, #6]
 800be4c:	0409      	lsls	r1, r1, #16
 800be4e:	430a      	orrs	r2, r1
 800be50:	79db      	ldrb	r3, [r3, #7]
 800be52:	061b      	lsls	r3, r3, #24
 800be54:	4313      	orrs	r3, r2
 800be56:	0018      	movs	r0, r3
 800be58:	f7f9 ff93 	bl	8005d82 <lwip_ntohl>
 800be5c:	0004      	movs	r4, r0
 800be5e:	69bb      	ldr	r3, [r7, #24]
 800be60:	68db      	ldr	r3, [r3, #12]
 800be62:	791a      	ldrb	r2, [r3, #4]
 800be64:	7959      	ldrb	r1, [r3, #5]
 800be66:	0209      	lsls	r1, r1, #8
 800be68:	430a      	orrs	r2, r1
 800be6a:	7999      	ldrb	r1, [r3, #6]
 800be6c:	0409      	lsls	r1, r1, #16
 800be6e:	430a      	orrs	r2, r1
 800be70:	79db      	ldrb	r3, [r3, #7]
 800be72:	061b      	lsls	r3, r3, #24
 800be74:	4313      	orrs	r3, r2
 800be76:	0018      	movs	r0, r3
 800be78:	f7f9 ff83 	bl	8005d82 <lwip_ntohl>
 800be7c:	0003      	movs	r3, r0
 800be7e:	1ae3      	subs	r3, r4, r3
 800be80:	d535      	bpl.n	800beee <tcp_output+0x2e6>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	3370      	adds	r3, #112	; 0x70
 800be86:	617b      	str	r3, [r7, #20]
          while (*cur_seg &&
 800be88:	e002      	b.n	800be90 <tcp_output+0x288>
            TCP_SEQ_LT(ntohl((*cur_seg)->tcphdr->seqno), ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
 800be8a:	697b      	ldr	r3, [r7, #20]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	617b      	str	r3, [r7, #20]
          while (*cur_seg &&
 800be90:	697b      	ldr	r3, [r7, #20]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	2b00      	cmp	r3, #0
 800be96:	d022      	beq.n	800bede <tcp_output+0x2d6>
            TCP_SEQ_LT(ntohl((*cur_seg)->tcphdr->seqno), ntohl(seg->tcphdr->seqno))) {
 800be98:	697b      	ldr	r3, [r7, #20]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	68db      	ldr	r3, [r3, #12]
 800be9e:	791a      	ldrb	r2, [r3, #4]
 800bea0:	7959      	ldrb	r1, [r3, #5]
 800bea2:	0209      	lsls	r1, r1, #8
 800bea4:	430a      	orrs	r2, r1
 800bea6:	7999      	ldrb	r1, [r3, #6]
 800bea8:	0409      	lsls	r1, r1, #16
 800beaa:	430a      	orrs	r2, r1
 800beac:	79db      	ldrb	r3, [r3, #7]
 800beae:	061b      	lsls	r3, r3, #24
 800beb0:	4313      	orrs	r3, r2
 800beb2:	0018      	movs	r0, r3
 800beb4:	f7f9 ff65 	bl	8005d82 <lwip_ntohl>
 800beb8:	0004      	movs	r4, r0
 800beba:	69fb      	ldr	r3, [r7, #28]
 800bebc:	68db      	ldr	r3, [r3, #12]
 800bebe:	791a      	ldrb	r2, [r3, #4]
 800bec0:	7959      	ldrb	r1, [r3, #5]
 800bec2:	0209      	lsls	r1, r1, #8
 800bec4:	430a      	orrs	r2, r1
 800bec6:	7999      	ldrb	r1, [r3, #6]
 800bec8:	0409      	lsls	r1, r1, #16
 800beca:	430a      	orrs	r2, r1
 800becc:	79db      	ldrb	r3, [r3, #7]
 800bece:	061b      	lsls	r3, r3, #24
 800bed0:	4313      	orrs	r3, r2
 800bed2:	0018      	movs	r0, r3
 800bed4:	f7f9 ff55 	bl	8005d82 <lwip_ntohl>
 800bed8:	0003      	movs	r3, r0
 800beda:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800bedc:	d4d5      	bmi.n	800be8a <tcp_output+0x282>
          }
          seg->next = (*cur_seg);
 800bede:	697b      	ldr	r3, [r7, #20]
 800bee0:	681a      	ldr	r2, [r3, #0]
 800bee2:	69fb      	ldr	r3, [r7, #28]
 800bee4:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800bee6:	697b      	ldr	r3, [r7, #20]
 800bee8:	69fa      	ldr	r2, [r7, #28]
 800beea:	601a      	str	r2, [r3, #0]
 800beec:	e00a      	b.n	800bf04 <tcp_output+0x2fc>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800beee:	69bb      	ldr	r3, [r7, #24]
 800bef0:	69fa      	ldr	r2, [r7, #28]
 800bef2:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800bef4:	69bb      	ldr	r3, [r7, #24]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	61bb      	str	r3, [r7, #24]
 800befa:	e003      	b.n	800bf04 <tcp_output+0x2fc>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800befc:	69fb      	ldr	r3, [r7, #28]
 800befe:	0018      	movs	r0, r3
 800bf00:	f7fc f8e7 	bl	80080d2 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bf08:	61fb      	str	r3, [r7, #28]
  while (seg != NULL &&
 800bf0a:	69fb      	ldr	r3, [r7, #28]
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d01e      	beq.n	800bf4e <tcp_output+0x346>
         ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800bf10:	69fb      	ldr	r3, [r7, #28]
 800bf12:	68db      	ldr	r3, [r3, #12]
 800bf14:	791a      	ldrb	r2, [r3, #4]
 800bf16:	7959      	ldrb	r1, [r3, #5]
 800bf18:	0209      	lsls	r1, r1, #8
 800bf1a:	430a      	orrs	r2, r1
 800bf1c:	7999      	ldrb	r1, [r3, #6]
 800bf1e:	0409      	lsls	r1, r1, #16
 800bf20:	430a      	orrs	r2, r1
 800bf22:	79db      	ldrb	r3, [r3, #7]
 800bf24:	061b      	lsls	r3, r3, #24
 800bf26:	4313      	orrs	r3, r2
 800bf28:	0018      	movs	r0, r3
 800bf2a:	f7f9 ff2a 	bl	8005d82 <lwip_ntohl>
 800bf2e:	0002      	movs	r2, r0
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bf34:	1ad3      	subs	r3, r2, r3
 800bf36:	69fa      	ldr	r2, [r7, #28]
 800bf38:	8912      	ldrh	r2, [r2, #8]
 800bf3a:	189b      	adds	r3, r3, r2
  while (seg != NULL &&
 800bf3c:	693a      	ldr	r2, [r7, #16]
 800bf3e:	429a      	cmp	r2, r3
 800bf40:	d300      	bcc.n	800bf44 <tcp_output+0x33c>
 800bf42:	e6b7      	b.n	800bcb4 <tcp_output+0xac>
 800bf44:	e003      	b.n	800bf4e <tcp_output+0x346>
 800bf46:	46c0      	nop			; (mov r8, r8)
 800bf48:	20003540 	.word	0x20003540
      break;
 800bf4c:	46c0      	nop			; (mov r8, r8)
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d103      	bne.n	800bf5e <tcp_output+0x356>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	226a      	movs	r2, #106	; 0x6a
 800bf5a:	2100      	movs	r1, #0
 800bf5c:	5299      	strh	r1, [r3, r2]
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	7f9b      	ldrb	r3, [r3, #30]
 800bf62:	227f      	movs	r2, #127	; 0x7f
 800bf64:	4013      	ands	r3, r2
 800bf66:	b2da      	uxtb	r2, r3
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	779a      	strb	r2, [r3, #30]
  return ERR_OK;
 800bf6c:	2300      	movs	r3, #0
}
 800bf6e:	0018      	movs	r0, r3
 800bf70:	46bd      	mov	sp, r7
 800bf72:	b008      	add	sp, #32
 800bf74:	bdb0      	pop	{r4, r5, r7, pc}
 800bf76:	46c0      	nop			; (mov r8, r8)

0800bf78 <tcp_output_segment>:
 * @param seg the tcp_seg to send
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 */
static void
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb)
{
 800bf78:	b5b0      	push	{r4, r5, r7, lr}
 800bf7a:	b088      	sub	sp, #32
 800bf7c:	af02      	add	r7, sp, #8
 800bf7e:	6078      	str	r0, [r7, #4]
 800bf80:	6039      	str	r1, [r7, #0]
  /** @bug Exclude retransmitted segments from this count. */
  snmp_inc_tcpoutsegs();

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = htonl(pcb->rcv_nxt);
 800bf82:	683b      	ldr	r3, [r7, #0]
 800bf84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	68dc      	ldr	r4, [r3, #12]
 800bf8a:	0010      	movs	r0, r2
 800bf8c:	f7f9 fee0 	bl	8005d50 <lwip_htonl>
 800bf90:	0003      	movs	r3, r0
 800bf92:	22ff      	movs	r2, #255	; 0xff
 800bf94:	401a      	ands	r2, r3
 800bf96:	0010      	movs	r0, r2
 800bf98:	7a22      	ldrb	r2, [r4, #8]
 800bf9a:	2100      	movs	r1, #0
 800bf9c:	400a      	ands	r2, r1
 800bf9e:	1c11      	adds	r1, r2, #0
 800bfa0:	1c02      	adds	r2, r0, #0
 800bfa2:	430a      	orrs	r2, r1
 800bfa4:	7222      	strb	r2, [r4, #8]
 800bfa6:	0a1a      	lsrs	r2, r3, #8
 800bfa8:	21ff      	movs	r1, #255	; 0xff
 800bfaa:	400a      	ands	r2, r1
 800bfac:	0010      	movs	r0, r2
 800bfae:	7a62      	ldrb	r2, [r4, #9]
 800bfb0:	2100      	movs	r1, #0
 800bfb2:	400a      	ands	r2, r1
 800bfb4:	1c11      	adds	r1, r2, #0
 800bfb6:	1c02      	adds	r2, r0, #0
 800bfb8:	430a      	orrs	r2, r1
 800bfba:	7262      	strb	r2, [r4, #9]
 800bfbc:	0c1a      	lsrs	r2, r3, #16
 800bfbe:	21ff      	movs	r1, #255	; 0xff
 800bfc0:	400a      	ands	r2, r1
 800bfc2:	0010      	movs	r0, r2
 800bfc4:	7aa2      	ldrb	r2, [r4, #10]
 800bfc6:	2100      	movs	r1, #0
 800bfc8:	400a      	ands	r2, r1
 800bfca:	1c11      	adds	r1, r2, #0
 800bfcc:	1c02      	adds	r2, r0, #0
 800bfce:	430a      	orrs	r2, r1
 800bfd0:	72a2      	strb	r2, [r4, #10]
 800bfd2:	0e19      	lsrs	r1, r3, #24
 800bfd4:	7ae3      	ldrb	r3, [r4, #11]
 800bfd6:	2200      	movs	r2, #0
 800bfd8:	4013      	ands	r3, r2
 800bfda:	1c1a      	adds	r2, r3, #0
 800bfdc:	1c0b      	adds	r3, r1, #0
 800bfde:	4313      	orrs	r3, r2
 800bfe0:	72e3      	strb	r3, [r4, #11]

  /* advertise our receive window size in this TCP segment */
  seg->tcphdr->wnd = htons(pcb->rcv_ann_wnd);
 800bfe2:	683b      	ldr	r3, [r7, #0]
 800bfe4:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	68dc      	ldr	r4, [r3, #12]
 800bfea:	0010      	movs	r0, r2
 800bfec:	f7f9 fe8a 	bl	8005d04 <lwip_htons>
 800bff0:	0003      	movs	r3, r0
 800bff2:	22ff      	movs	r2, #255	; 0xff
 800bff4:	401a      	ands	r2, r3
 800bff6:	0010      	movs	r0, r2
 800bff8:	7ba2      	ldrb	r2, [r4, #14]
 800bffa:	2100      	movs	r1, #0
 800bffc:	400a      	ands	r2, r1
 800bffe:	1c11      	adds	r1, r2, #0
 800c000:	1c02      	adds	r2, r0, #0
 800c002:	430a      	orrs	r2, r1
 800c004:	73a2      	strb	r2, [r4, #14]
 800c006:	0a1b      	lsrs	r3, r3, #8
 800c008:	b299      	uxth	r1, r3
 800c00a:	7be3      	ldrb	r3, [r4, #15]
 800c00c:	2200      	movs	r2, #0
 800c00e:	4013      	ands	r3, r2
 800c010:	1c1a      	adds	r2, r3, #0
 800c012:	1c0b      	adds	r3, r1, #0
 800c014:	4313      	orrs	r3, r2
 800c016:	73e3      	strb	r3, [r4, #15]

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800c018:	683b      	ldr	r3, [r7, #0]
 800c01a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c01c:	683a      	ldr	r2, [r7, #0]
 800c01e:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 800c020:	189a      	adds	r2, r3, r2
 800c022:	683b      	ldr	r3, [r7, #0]
 800c024:	631a      	str	r2, [r3, #48]	; 0x30

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	68db      	ldr	r3, [r3, #12]
 800c02a:	3314      	adds	r3, #20
 800c02c:	617b      	str	r3, [r7, #20]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	7a9b      	ldrb	r3, [r3, #10]
 800c032:	001a      	movs	r2, r3
 800c034:	2301      	movs	r3, #1
 800c036:	4013      	ands	r3, r2
 800c038:	d018      	beq.n	800c06c <tcp_output_segment+0xf4>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->remote_ip);
 800c03a:	683b      	ldr	r3, [r7, #0]
 800c03c:	3304      	adds	r3, #4
 800c03e:	2512      	movs	r5, #18
 800c040:	197c      	adds	r4, r7, r5
 800c042:	4a5d      	ldr	r2, [pc, #372]	; (800c1b8 <tcp_output_segment+0x240>)
 800c044:	0019      	movs	r1, r3
 800c046:	0010      	movs	r0, r2
 800c048:	f7fc fada 	bl	8008600 <tcp_eff_send_mss>
 800c04c:	0003      	movs	r3, r0
 800c04e:	8023      	strh	r3, [r4, #0]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800c050:	197b      	adds	r3, r7, r5
 800c052:	881b      	ldrh	r3, [r3, #0]
 800c054:	2281      	movs	r2, #129	; 0x81
 800c056:	0492      	lsls	r2, r2, #18
 800c058:	4313      	orrs	r3, r2
 800c05a:	0018      	movs	r0, r3
 800c05c:	f7f9 fe78 	bl	8005d50 <lwip_htonl>
 800c060:	0002      	movs	r2, r0
 800c062:	697b      	ldr	r3, [r7, #20]
 800c064:	601a      	str	r2, [r3, #0]
    opts += 1;
 800c066:	697b      	ldr	r3, [r7, #20]
 800c068:	3304      	adds	r3, #4
 800c06a:	617b      	str	r3, [r7, #20]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled 
     This must be set before checking the route. */
  if (pcb->rtime == -1) {
 800c06c:	683b      	ldr	r3, [r7, #0]
 800c06e:	2234      	movs	r2, #52	; 0x34
 800c070:	5e9b      	ldrsh	r3, [r3, r2]
 800c072:	3301      	adds	r3, #1
 800c074:	d102      	bne.n	800c07c <tcp_output_segment+0x104>
    pcb->rtime = 0;
 800c076:	683b      	ldr	r3, [r7, #0]
 800c078:	2200      	movs	r2, #0
 800c07a:	869a      	strh	r2, [r3, #52]	; 0x34
  }

  /* If we don't have a local IP address, we get one by
     calling ip_route(). */
  if (ip_addr_isany(&(pcb->local_ip))) {
 800c07c:	683b      	ldr	r3, [r7, #0]
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d003      	beq.n	800c08a <tcp_output_segment+0x112>
 800c082:	683b      	ldr	r3, [r7, #0]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	2b00      	cmp	r3, #0
 800c088:	d10e      	bne.n	800c0a8 <tcp_output_segment+0x130>
    netif = ip_route(&(pcb->remote_ip));
 800c08a:	683b      	ldr	r3, [r7, #0]
 800c08c:	3304      	adds	r3, #4
 800c08e:	0018      	movs	r0, r3
 800c090:	f001 fcd6 	bl	800da40 <ip_route>
 800c094:	0003      	movs	r3, r0
 800c096:	60fb      	str	r3, [r7, #12]
    if (netif == NULL) {
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d100      	bne.n	800c0a0 <tcp_output_segment+0x128>
 800c09e:	e086      	b.n	800c1ae <tcp_output_segment+0x236>
      return;
    }
    ip_addr_copy(pcb->local_ip, netif->ip_addr);
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	685a      	ldr	r2, [r3, #4]
 800c0a4:	683b      	ldr	r3, [r7, #0]
 800c0a6:	601a      	str	r2, [r3, #0]
  }

  if (pcb->rttest == 0) {
 800c0a8:	683b      	ldr	r3, [r7, #0]
 800c0aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d115      	bne.n	800c0dc <tcp_output_segment+0x164>
    pcb->rttest = tcp_ticks;
 800c0b0:	4b42      	ldr	r3, [pc, #264]	; (800c1bc <tcp_output_segment+0x244>)
 800c0b2:	681a      	ldr	r2, [r3, #0]
 800c0b4:	683b      	ldr	r3, [r7, #0]
 800c0b6:	639a      	str	r2, [r3, #56]	; 0x38
    pcb->rtseq = ntohl(seg->tcphdr->seqno);
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	68db      	ldr	r3, [r3, #12]
 800c0bc:	791a      	ldrb	r2, [r3, #4]
 800c0be:	7959      	ldrb	r1, [r3, #5]
 800c0c0:	0209      	lsls	r1, r1, #8
 800c0c2:	430a      	orrs	r2, r1
 800c0c4:	7999      	ldrb	r1, [r3, #6]
 800c0c6:	0409      	lsls	r1, r1, #16
 800c0c8:	430a      	orrs	r2, r1
 800c0ca:	79db      	ldrb	r3, [r3, #7]
 800c0cc:	061b      	lsls	r3, r3, #24
 800c0ce:	4313      	orrs	r3, r2
 800c0d0:	0018      	movs	r0, r3
 800c0d2:	f7f9 fe56 	bl	8005d82 <lwip_ntohl>
 800c0d6:	0002      	movs	r2, r0
 800c0d8:	683b      	ldr	r3, [r7, #0]
 800c0da:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          htonl(seg->tcphdr->seqno), htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	68db      	ldr	r3, [r3, #12]
 800c0e0:	001a      	movs	r2, r3
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	685b      	ldr	r3, [r3, #4]
 800c0e6:	685b      	ldr	r3, [r3, #4]
 800c0e8:	1ad2      	subs	r2, r2, r3
 800c0ea:	200a      	movs	r0, #10
 800c0ec:	183b      	adds	r3, r7, r0
 800c0ee:	801a      	strh	r2, [r3, #0]

  seg->p->len -= len;
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	685b      	ldr	r3, [r3, #4]
 800c0f4:	8959      	ldrh	r1, [r3, #10]
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	685b      	ldr	r3, [r3, #4]
 800c0fa:	183a      	adds	r2, r7, r0
 800c0fc:	8812      	ldrh	r2, [r2, #0]
 800c0fe:	1a8a      	subs	r2, r1, r2
 800c100:	b292      	uxth	r2, r2
 800c102:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	685b      	ldr	r3, [r3, #4]
 800c108:	8919      	ldrh	r1, [r3, #8]
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	685b      	ldr	r3, [r3, #4]
 800c10e:	183a      	adds	r2, r7, r0
 800c110:	8812      	ldrh	r2, [r2, #0]
 800c112:	1a8a      	subs	r2, r1, r2
 800c114:	b292      	uxth	r2, r2
 800c116:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	685b      	ldr	r3, [r3, #4]
 800c11c:	687a      	ldr	r2, [r7, #4]
 800c11e:	68d2      	ldr	r2, [r2, #12]
 800c120:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	68db      	ldr	r3, [r3, #12]
 800c126:	7c1a      	ldrb	r2, [r3, #16]
 800c128:	2100      	movs	r1, #0
 800c12a:	400a      	ands	r2, r1
 800c12c:	741a      	strb	r2, [r3, #16]
 800c12e:	7c5a      	ldrb	r2, [r3, #17]
 800c130:	2100      	movs	r1, #0
 800c132:	400a      	ands	r2, r1
 800c134:	745a      	strb	r2, [r3, #17]
      seg->tcphdr->chksum = chksum_slow;
    }
#endif /* TCP_CHECKSUM_ON_COPY_SANITY_CHECK */
  }
#else /* TCP_CHECKSUM_ON_COPY */
  seg->tcphdr->chksum = inet_chksum_pseudo(seg->p, &(pcb->local_ip),
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	6858      	ldr	r0, [r3, #4]
 800c13a:	6839      	ldr	r1, [r7, #0]
 800c13c:	683b      	ldr	r3, [r7, #0]
 800c13e:	1d1d      	adds	r5, r3, #4
         &(pcb->remote_ip),
         IP_PROTO_TCP, seg->p->tot_len);
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	685b      	ldr	r3, [r3, #4]
  seg->tcphdr->chksum = inet_chksum_pseudo(seg->p, &(pcb->local_ip),
 800c144:	891a      	ldrh	r2, [r3, #8]
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	68dc      	ldr	r4, [r3, #12]
 800c14a:	9200      	str	r2, [sp, #0]
 800c14c:	2306      	movs	r3, #6
 800c14e:	002a      	movs	r2, r5
 800c150:	f001 fb6f 	bl	800d832 <inet_chksum_pseudo>
 800c154:	0003      	movs	r3, r0
 800c156:	22ff      	movs	r2, #255	; 0xff
 800c158:	401a      	ands	r2, r3
 800c15a:	0010      	movs	r0, r2
 800c15c:	7c22      	ldrb	r2, [r4, #16]
 800c15e:	2100      	movs	r1, #0
 800c160:	400a      	ands	r2, r1
 800c162:	1c11      	adds	r1, r2, #0
 800c164:	1c02      	adds	r2, r0, #0
 800c166:	430a      	orrs	r2, r1
 800c168:	7422      	strb	r2, [r4, #16]
 800c16a:	0a1b      	lsrs	r3, r3, #8
 800c16c:	b299      	uxth	r1, r3
 800c16e:	7c63      	ldrb	r3, [r4, #17]
 800c170:	2200      	movs	r2, #0
 800c172:	4013      	ands	r3, r2
 800c174:	1c1a      	adds	r2, r3, #0
 800c176:	1c0b      	adds	r3, r1, #0
 800c178:	4313      	orrs	r3, r2
 800c17a:	7463      	strb	r3, [r4, #17]
#endif /* TCP_CHECKSUM_ON_COPY */
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);
 800c17c:	4b10      	ldr	r3, [pc, #64]	; (800c1c0 <tcp_output_segment+0x248>)
 800c17e:	2290      	movs	r2, #144	; 0x90
 800c180:	5a9b      	ldrh	r3, [r3, r2]
 800c182:	3301      	adds	r3, #1
 800c184:	b299      	uxth	r1, r3
 800c186:	4b0e      	ldr	r3, [pc, #56]	; (800c1c0 <tcp_output_segment+0x248>)
 800c188:	2290      	movs	r2, #144	; 0x90
 800c18a:	5299      	strh	r1, [r3, r2]

#if LWIP_NETIF_HWADDRHINT
  ip_output_hinted(seg->p, &(pcb->local_ip), &(pcb->remote_ip), pcb->ttl, pcb->tos,
      IP_PROTO_TCP, &(pcb->addr_hint));
#else /* LWIP_NETIF_HWADDRHINT*/
  ip_output(seg->p, &(pcb->local_ip), &(pcb->remote_ip), pcb->ttl, pcb->tos,
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	6858      	ldr	r0, [r3, #4]
 800c190:	6839      	ldr	r1, [r7, #0]
 800c192:	683b      	ldr	r3, [r7, #0]
 800c194:	1d1c      	adds	r4, r3, #4
 800c196:	683b      	ldr	r3, [r7, #0]
 800c198:	7a9d      	ldrb	r5, [r3, #10]
 800c19a:	683b      	ldr	r3, [r7, #0]
 800c19c:	7a5b      	ldrb	r3, [r3, #9]
 800c19e:	2206      	movs	r2, #6
 800c1a0:	9201      	str	r2, [sp, #4]
 800c1a2:	9300      	str	r3, [sp, #0]
 800c1a4:	002b      	movs	r3, r5
 800c1a6:	0022      	movs	r2, r4
 800c1a8:	f002 f82e 	bl	800e208 <ip_output>
 800c1ac:	e000      	b.n	800c1b0 <tcp_output_segment+0x238>
      return;
 800c1ae:	46c0      	nop			; (mov r8, r8)
      IP_PROTO_TCP);
#endif /* LWIP_NETIF_HWADDRHINT*/
}
 800c1b0:	46bd      	mov	sp, r7
 800c1b2:	b006      	add	sp, #24
 800c1b4:	bdb0      	pop	{r4, r5, r7, pc}
 800c1b6:	46c0      	nop			; (mov r8, r8)
 800c1b8:	000005b4 	.word	0x000005b4
 800c1bc:	2000352c 	.word	0x2000352c
 800c1c0:	2000340c 	.word	0x2000340c

0800c1c4 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  ip_addr_t *local_ip, ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 800c1c4:	b590      	push	{r4, r7, lr}
 800c1c6:	b089      	sub	sp, #36	; 0x24
 800c1c8:	af02      	add	r7, sp, #8
 800c1ca:	60f8      	str	r0, [r7, #12]
 800c1cc:	60b9      	str	r1, [r7, #8]
 800c1ce:	607a      	str	r2, [r7, #4]
 800c1d0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 800c1d2:	2200      	movs	r2, #0
 800c1d4:	2114      	movs	r1, #20
 800c1d6:	2001      	movs	r0, #1
 800c1d8:	f7fa fb50 	bl	800687c <pbuf_alloc>
 800c1dc:	0003      	movs	r3, r0
 800c1de:	617b      	str	r3, [r7, #20]
  if (p == NULL) {
 800c1e0:	697b      	ldr	r3, [r7, #20]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d100      	bne.n	800c1e8 <tcp_rst+0x24>
 800c1e6:	e108      	b.n	800c3fa <tcp_rst+0x236>
      return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 800c1e8:	697b      	ldr	r3, [r7, #20]
 800c1ea:	685b      	ldr	r3, [r3, #4]
 800c1ec:	613b      	str	r3, [r7, #16]
  tcphdr->src = htons(local_port);
 800c1ee:	2328      	movs	r3, #40	; 0x28
 800c1f0:	18fb      	adds	r3, r7, r3
 800c1f2:	881b      	ldrh	r3, [r3, #0]
 800c1f4:	0018      	movs	r0, r3
 800c1f6:	f7f9 fd85 	bl	8005d04 <lwip_htons>
 800c1fa:	0003      	movs	r3, r0
 800c1fc:	001a      	movs	r2, r3
 800c1fe:	693b      	ldr	r3, [r7, #16]
 800c200:	21ff      	movs	r1, #255	; 0xff
 800c202:	4011      	ands	r1, r2
 800c204:	000c      	movs	r4, r1
 800c206:	7819      	ldrb	r1, [r3, #0]
 800c208:	2000      	movs	r0, #0
 800c20a:	4001      	ands	r1, r0
 800c20c:	1c08      	adds	r0, r1, #0
 800c20e:	1c21      	adds	r1, r4, #0
 800c210:	4301      	orrs	r1, r0
 800c212:	7019      	strb	r1, [r3, #0]
 800c214:	0a12      	lsrs	r2, r2, #8
 800c216:	b290      	uxth	r0, r2
 800c218:	785a      	ldrb	r2, [r3, #1]
 800c21a:	2100      	movs	r1, #0
 800c21c:	400a      	ands	r2, r1
 800c21e:	1c11      	adds	r1, r2, #0
 800c220:	1c02      	adds	r2, r0, #0
 800c222:	430a      	orrs	r2, r1
 800c224:	705a      	strb	r2, [r3, #1]
  tcphdr->dest = htons(remote_port);
 800c226:	232c      	movs	r3, #44	; 0x2c
 800c228:	18fb      	adds	r3, r7, r3
 800c22a:	881b      	ldrh	r3, [r3, #0]
 800c22c:	0018      	movs	r0, r3
 800c22e:	f7f9 fd69 	bl	8005d04 <lwip_htons>
 800c232:	0003      	movs	r3, r0
 800c234:	001a      	movs	r2, r3
 800c236:	693b      	ldr	r3, [r7, #16]
 800c238:	21ff      	movs	r1, #255	; 0xff
 800c23a:	4011      	ands	r1, r2
 800c23c:	000c      	movs	r4, r1
 800c23e:	7899      	ldrb	r1, [r3, #2]
 800c240:	2000      	movs	r0, #0
 800c242:	4001      	ands	r1, r0
 800c244:	1c08      	adds	r0, r1, #0
 800c246:	1c21      	adds	r1, r4, #0
 800c248:	4301      	orrs	r1, r0
 800c24a:	7099      	strb	r1, [r3, #2]
 800c24c:	0a12      	lsrs	r2, r2, #8
 800c24e:	b290      	uxth	r0, r2
 800c250:	78da      	ldrb	r2, [r3, #3]
 800c252:	2100      	movs	r1, #0
 800c254:	400a      	ands	r2, r1
 800c256:	1c11      	adds	r1, r2, #0
 800c258:	1c02      	adds	r2, r0, #0
 800c25a:	430a      	orrs	r2, r1
 800c25c:	70da      	strb	r2, [r3, #3]
  tcphdr->seqno = htonl(seqno);
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	0018      	movs	r0, r3
 800c262:	f7f9 fd75 	bl	8005d50 <lwip_htonl>
 800c266:	0002      	movs	r2, r0
 800c268:	693b      	ldr	r3, [r7, #16]
 800c26a:	21ff      	movs	r1, #255	; 0xff
 800c26c:	4011      	ands	r1, r2
 800c26e:	000c      	movs	r4, r1
 800c270:	7919      	ldrb	r1, [r3, #4]
 800c272:	2000      	movs	r0, #0
 800c274:	4001      	ands	r1, r0
 800c276:	1c08      	adds	r0, r1, #0
 800c278:	1c21      	adds	r1, r4, #0
 800c27a:	4301      	orrs	r1, r0
 800c27c:	7119      	strb	r1, [r3, #4]
 800c27e:	0a11      	lsrs	r1, r2, #8
 800c280:	20ff      	movs	r0, #255	; 0xff
 800c282:	4001      	ands	r1, r0
 800c284:	000c      	movs	r4, r1
 800c286:	7959      	ldrb	r1, [r3, #5]
 800c288:	2000      	movs	r0, #0
 800c28a:	4001      	ands	r1, r0
 800c28c:	1c08      	adds	r0, r1, #0
 800c28e:	1c21      	adds	r1, r4, #0
 800c290:	4301      	orrs	r1, r0
 800c292:	7159      	strb	r1, [r3, #5]
 800c294:	0c11      	lsrs	r1, r2, #16
 800c296:	20ff      	movs	r0, #255	; 0xff
 800c298:	4001      	ands	r1, r0
 800c29a:	000c      	movs	r4, r1
 800c29c:	7999      	ldrb	r1, [r3, #6]
 800c29e:	2000      	movs	r0, #0
 800c2a0:	4001      	ands	r1, r0
 800c2a2:	1c08      	adds	r0, r1, #0
 800c2a4:	1c21      	adds	r1, r4, #0
 800c2a6:	4301      	orrs	r1, r0
 800c2a8:	7199      	strb	r1, [r3, #6]
 800c2aa:	0e10      	lsrs	r0, r2, #24
 800c2ac:	79da      	ldrb	r2, [r3, #7]
 800c2ae:	2100      	movs	r1, #0
 800c2b0:	400a      	ands	r2, r1
 800c2b2:	1c11      	adds	r1, r2, #0
 800c2b4:	1c02      	adds	r2, r0, #0
 800c2b6:	430a      	orrs	r2, r1
 800c2b8:	71da      	strb	r2, [r3, #7]
  tcphdr->ackno = htonl(ackno);
 800c2ba:	68bb      	ldr	r3, [r7, #8]
 800c2bc:	0018      	movs	r0, r3
 800c2be:	f7f9 fd47 	bl	8005d50 <lwip_htonl>
 800c2c2:	0002      	movs	r2, r0
 800c2c4:	693b      	ldr	r3, [r7, #16]
 800c2c6:	21ff      	movs	r1, #255	; 0xff
 800c2c8:	4011      	ands	r1, r2
 800c2ca:	000c      	movs	r4, r1
 800c2cc:	7a19      	ldrb	r1, [r3, #8]
 800c2ce:	2000      	movs	r0, #0
 800c2d0:	4001      	ands	r1, r0
 800c2d2:	1c08      	adds	r0, r1, #0
 800c2d4:	1c21      	adds	r1, r4, #0
 800c2d6:	4301      	orrs	r1, r0
 800c2d8:	7219      	strb	r1, [r3, #8]
 800c2da:	0a11      	lsrs	r1, r2, #8
 800c2dc:	20ff      	movs	r0, #255	; 0xff
 800c2de:	4001      	ands	r1, r0
 800c2e0:	000c      	movs	r4, r1
 800c2e2:	7a59      	ldrb	r1, [r3, #9]
 800c2e4:	2000      	movs	r0, #0
 800c2e6:	4001      	ands	r1, r0
 800c2e8:	1c08      	adds	r0, r1, #0
 800c2ea:	1c21      	adds	r1, r4, #0
 800c2ec:	4301      	orrs	r1, r0
 800c2ee:	7259      	strb	r1, [r3, #9]
 800c2f0:	0c11      	lsrs	r1, r2, #16
 800c2f2:	20ff      	movs	r0, #255	; 0xff
 800c2f4:	4001      	ands	r1, r0
 800c2f6:	000c      	movs	r4, r1
 800c2f8:	7a99      	ldrb	r1, [r3, #10]
 800c2fa:	2000      	movs	r0, #0
 800c2fc:	4001      	ands	r1, r0
 800c2fe:	1c08      	adds	r0, r1, #0
 800c300:	1c21      	adds	r1, r4, #0
 800c302:	4301      	orrs	r1, r0
 800c304:	7299      	strb	r1, [r3, #10]
 800c306:	0e10      	lsrs	r0, r2, #24
 800c308:	7ada      	ldrb	r2, [r3, #11]
 800c30a:	2100      	movs	r1, #0
 800c30c:	400a      	ands	r2, r1
 800c30e:	1c11      	adds	r1, r2, #0
 800c310:	1c02      	adds	r2, r0, #0
 800c312:	430a      	orrs	r2, r1
 800c314:	72da      	strb	r2, [r3, #11]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 800c316:	4b3b      	ldr	r3, [pc, #236]	; (800c404 <tcp_rst+0x240>)
 800c318:	0018      	movs	r0, r3
 800c31a:	f7f9 fcf3 	bl	8005d04 <lwip_htons>
 800c31e:	0003      	movs	r3, r0
 800c320:	001a      	movs	r2, r3
 800c322:	693b      	ldr	r3, [r7, #16]
 800c324:	21ff      	movs	r1, #255	; 0xff
 800c326:	4011      	ands	r1, r2
 800c328:	000c      	movs	r4, r1
 800c32a:	7b19      	ldrb	r1, [r3, #12]
 800c32c:	2000      	movs	r0, #0
 800c32e:	4001      	ands	r1, r0
 800c330:	1c08      	adds	r0, r1, #0
 800c332:	1c21      	adds	r1, r4, #0
 800c334:	4301      	orrs	r1, r0
 800c336:	7319      	strb	r1, [r3, #12]
 800c338:	0a12      	lsrs	r2, r2, #8
 800c33a:	b290      	uxth	r0, r2
 800c33c:	7b5a      	ldrb	r2, [r3, #13]
 800c33e:	2100      	movs	r1, #0
 800c340:	400a      	ands	r2, r1
 800c342:	1c11      	adds	r1, r2, #0
 800c344:	1c02      	adds	r2, r0, #0
 800c346:	430a      	orrs	r2, r1
 800c348:	735a      	strb	r2, [r3, #13]
  tcphdr->wnd = PP_HTONS(TCP_WND);
 800c34a:	693b      	ldr	r3, [r7, #16]
 800c34c:	7b9a      	ldrb	r2, [r3, #14]
 800c34e:	2100      	movs	r1, #0
 800c350:	400a      	ands	r2, r1
 800c352:	1c11      	adds	r1, r2, #0
 800c354:	2216      	movs	r2, #22
 800c356:	430a      	orrs	r2, r1
 800c358:	739a      	strb	r2, [r3, #14]
 800c35a:	7bda      	ldrb	r2, [r3, #15]
 800c35c:	2100      	movs	r1, #0
 800c35e:	400a      	ands	r2, r1
 800c360:	1c11      	adds	r1, r2, #0
 800c362:	2230      	movs	r2, #48	; 0x30
 800c364:	4252      	negs	r2, r2
 800c366:	430a      	orrs	r2, r1
 800c368:	73da      	strb	r2, [r3, #15]
  tcphdr->chksum = 0;
 800c36a:	693b      	ldr	r3, [r7, #16]
 800c36c:	7c1a      	ldrb	r2, [r3, #16]
 800c36e:	2100      	movs	r1, #0
 800c370:	400a      	ands	r2, r1
 800c372:	741a      	strb	r2, [r3, #16]
 800c374:	7c5a      	ldrb	r2, [r3, #17]
 800c376:	2100      	movs	r1, #0
 800c378:	400a      	ands	r2, r1
 800c37a:	745a      	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
 800c37c:	693b      	ldr	r3, [r7, #16]
 800c37e:	7c9a      	ldrb	r2, [r3, #18]
 800c380:	2100      	movs	r1, #0
 800c382:	400a      	ands	r2, r1
 800c384:	749a      	strb	r2, [r3, #18]
 800c386:	7cda      	ldrb	r2, [r3, #19]
 800c388:	2100      	movs	r1, #0
 800c38a:	400a      	ands	r2, r1
 800c38c:	74da      	strb	r2, [r3, #19]

#if CHECKSUM_GEN_TCP
  tcphdr->chksum = inet_chksum_pseudo(p, local_ip, remote_ip,
 800c38e:	697b      	ldr	r3, [r7, #20]
 800c390:	891b      	ldrh	r3, [r3, #8]
 800c392:	683a      	ldr	r2, [r7, #0]
 800c394:	6879      	ldr	r1, [r7, #4]
 800c396:	6978      	ldr	r0, [r7, #20]
 800c398:	9300      	str	r3, [sp, #0]
 800c39a:	2306      	movs	r3, #6
 800c39c:	f001 fa49 	bl	800d832 <inet_chksum_pseudo>
 800c3a0:	0003      	movs	r3, r0
 800c3a2:	001a      	movs	r2, r3
 800c3a4:	693b      	ldr	r3, [r7, #16]
 800c3a6:	21ff      	movs	r1, #255	; 0xff
 800c3a8:	4011      	ands	r1, r2
 800c3aa:	000c      	movs	r4, r1
 800c3ac:	7c19      	ldrb	r1, [r3, #16]
 800c3ae:	2000      	movs	r0, #0
 800c3b0:	4001      	ands	r1, r0
 800c3b2:	1c08      	adds	r0, r1, #0
 800c3b4:	1c21      	adds	r1, r4, #0
 800c3b6:	4301      	orrs	r1, r0
 800c3b8:	7419      	strb	r1, [r3, #16]
 800c3ba:	0a12      	lsrs	r2, r2, #8
 800c3bc:	b290      	uxth	r0, r2
 800c3be:	7c5a      	ldrb	r2, [r3, #17]
 800c3c0:	2100      	movs	r1, #0
 800c3c2:	400a      	ands	r2, r1
 800c3c4:	1c11      	adds	r1, r2, #0
 800c3c6:	1c02      	adds	r2, r0, #0
 800c3c8:	430a      	orrs	r2, r1
 800c3ca:	745a      	strb	r2, [r3, #17]
              IP_PROTO_TCP, p->tot_len);
#endif
  TCP_STATS_INC(tcp.xmit);
 800c3cc:	4b0e      	ldr	r3, [pc, #56]	; (800c408 <tcp_rst+0x244>)
 800c3ce:	2290      	movs	r2, #144	; 0x90
 800c3d0:	5a9b      	ldrh	r3, [r3, r2]
 800c3d2:	3301      	adds	r3, #1
 800c3d4:	b299      	uxth	r1, r3
 800c3d6:	4b0c      	ldr	r3, [pc, #48]	; (800c408 <tcp_rst+0x244>)
 800c3d8:	2290      	movs	r2, #144	; 0x90
 800c3da:	5299      	strh	r1, [r3, r2]
  snmp_inc_tcpoutrsts();
   /* Send output with hardcoded TTL since we have no access to the pcb */
  ip_output(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP);
 800c3dc:	683a      	ldr	r2, [r7, #0]
 800c3de:	6879      	ldr	r1, [r7, #4]
 800c3e0:	6978      	ldr	r0, [r7, #20]
 800c3e2:	2306      	movs	r3, #6
 800c3e4:	9301      	str	r3, [sp, #4]
 800c3e6:	2300      	movs	r3, #0
 800c3e8:	9300      	str	r3, [sp, #0]
 800c3ea:	23ff      	movs	r3, #255	; 0xff
 800c3ec:	f001 ff0c 	bl	800e208 <ip_output>
  pbuf_free(p);
 800c3f0:	697b      	ldr	r3, [r7, #20]
 800c3f2:	0018      	movs	r0, r3
 800c3f4:	f7fa fcce 	bl	8006d94 <pbuf_free>
 800c3f8:	e000      	b.n	800c3fc <tcp_rst+0x238>
      return;
 800c3fa:	46c0      	nop			; (mov r8, r8)
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800c3fc:	46bd      	mov	sp, r7
 800c3fe:	b007      	add	sp, #28
 800c400:	bd90      	pop	{r4, r7, pc}
 800c402:	46c0      	nop			; (mov r8, r8)
 800c404:	00005014 	.word	0x00005014
 800c408:	2000340c 	.word	0x2000340c

0800c40c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800c40c:	b580      	push	{r7, lr}
 800c40e:	b084      	sub	sp, #16
 800c410:	af00      	add	r7, sp, #0
 800c412:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d025      	beq.n	800c468 <tcp_rexmit_rto+0x5c>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c420:	60fb      	str	r3, [r7, #12]
 800c422:	e002      	b.n	800c42a <tcp_rexmit_rto+0x1e>
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	60fb      	str	r3, [r7, #12]
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d1f8      	bne.n	800c424 <tcp_rexmit_rto+0x18>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	601a      	str	r2, [r3, #0]
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	2200      	movs	r2, #0
 800c446:	671a      	str	r2, [r3, #112]	; 0x70
  /* last unsent hasn't changed, no need to reset unsent_oversize */

  /* increment number of retransmissions */
  ++pcb->nrtx;
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	2246      	movs	r2, #70	; 0x46
 800c44c:	5c9b      	ldrb	r3, [r3, r2]
 800c44e:	3301      	adds	r3, #1
 800c450:	b2d9      	uxtb	r1, r3
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	2246      	movs	r2, #70	; 0x46
 800c456:	5499      	strb	r1, [r3, r2]

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	2200      	movs	r2, #0
 800c45c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Do the actual retransmission */
  tcp_output(pcb);
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	0018      	movs	r0, r3
 800c462:	f7ff fbd1 	bl	800bc08 <tcp_output>
 800c466:	e000      	b.n	800c46a <tcp_rexmit_rto+0x5e>
    return;
 800c468:	46c0      	nop			; (mov r8, r8)
}
 800c46a:	46bd      	mov	sp, r7
 800c46c:	b004      	add	sp, #16
 800c46e:	bd80      	pop	{r7, pc}

0800c470 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 800c470:	b590      	push	{r4, r7, lr}
 800c472:	b085      	sub	sp, #20
 800c474:	af00      	add	r7, sp, #0
 800c476:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d04f      	beq.n	800c520 <tcp_rexmit+0xb0>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c484:	60bb      	str	r3, [r7, #8]
  pcb->unacked = seg->next;
 800c486:	68bb      	ldr	r3, [r7, #8]
 800c488:	681a      	ldr	r2, [r3, #0]
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	336c      	adds	r3, #108	; 0x6c
 800c492:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800c494:	e002      	b.n	800c49c <tcp_rexmit+0x2c>
    TCP_SEQ_LT(ntohl((*cur_seg)->tcphdr->seqno), ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d022      	beq.n	800c4ea <tcp_rexmit+0x7a>
    TCP_SEQ_LT(ntohl((*cur_seg)->tcphdr->seqno), ntohl(seg->tcphdr->seqno))) {
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	68db      	ldr	r3, [r3, #12]
 800c4aa:	791a      	ldrb	r2, [r3, #4]
 800c4ac:	7959      	ldrb	r1, [r3, #5]
 800c4ae:	0209      	lsls	r1, r1, #8
 800c4b0:	430a      	orrs	r2, r1
 800c4b2:	7999      	ldrb	r1, [r3, #6]
 800c4b4:	0409      	lsls	r1, r1, #16
 800c4b6:	430a      	orrs	r2, r1
 800c4b8:	79db      	ldrb	r3, [r3, #7]
 800c4ba:	061b      	lsls	r3, r3, #24
 800c4bc:	4313      	orrs	r3, r2
 800c4be:	0018      	movs	r0, r3
 800c4c0:	f7f9 fc5f 	bl	8005d82 <lwip_ntohl>
 800c4c4:	0004      	movs	r4, r0
 800c4c6:	68bb      	ldr	r3, [r7, #8]
 800c4c8:	68db      	ldr	r3, [r3, #12]
 800c4ca:	791a      	ldrb	r2, [r3, #4]
 800c4cc:	7959      	ldrb	r1, [r3, #5]
 800c4ce:	0209      	lsls	r1, r1, #8
 800c4d0:	430a      	orrs	r2, r1
 800c4d2:	7999      	ldrb	r1, [r3, #6]
 800c4d4:	0409      	lsls	r1, r1, #16
 800c4d6:	430a      	orrs	r2, r1
 800c4d8:	79db      	ldrb	r3, [r3, #7]
 800c4da:	061b      	lsls	r3, r3, #24
 800c4dc:	4313      	orrs	r3, r2
 800c4de:	0018      	movs	r0, r3
 800c4e0:	f7f9 fc4f 	bl	8005d82 <lwip_ntohl>
 800c4e4:	0003      	movs	r3, r0
 800c4e6:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800c4e8:	d4d5      	bmi.n	800c496 <tcp_rexmit+0x26>
  }
  seg->next = *cur_seg;
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	681a      	ldr	r2, [r3, #0]
 800c4ee:	68bb      	ldr	r3, [r7, #8]
 800c4f0:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	68ba      	ldr	r2, [r7, #8]
 800c4f6:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800c4f8:	68bb      	ldr	r3, [r7, #8]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d103      	bne.n	800c508 <tcp_rexmit+0x98>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	226a      	movs	r2, #106	; 0x6a
 800c504:	2100      	movs	r1, #0
 800c506:	5299      	strh	r1, [r3, r2]
  }
#endif /* TCP_OVERSIZE */

  ++pcb->nrtx;
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	2246      	movs	r2, #70	; 0x46
 800c50c:	5c9b      	ldrb	r3, [r3, r2]
 800c50e:	3301      	adds	r3, #1
 800c510:	b2d9      	uxtb	r1, r3
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	2246      	movs	r2, #70	; 0x46
 800c516:	5499      	strb	r1, [r3, r2]

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	2200      	movs	r2, #0
 800c51c:	639a      	str	r2, [r3, #56]	; 0x38
 800c51e:	e000      	b.n	800c522 <tcp_rexmit+0xb2>
    return;
 800c520:	46c0      	nop			; (mov r8, r8)

  /* Do the actual retransmission. */
  snmp_inc_tcpretranssegs();
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 800c522:	46bd      	mov	sp, r7
 800c524:	b005      	add	sp, #20
 800c526:	bd90      	pop	{r4, r7, pc}

0800c528 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void 
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800c528:	b580      	push	{r7, lr}
 800c52a:	b082      	sub	sp, #8
 800c52c:	af00      	add	r7, sp, #0
 800c52e:	6078      	str	r0, [r7, #4]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c534:	2b00      	cmp	r3, #0
 800c536:	d048      	beq.n	800c5ca <tcp_rexmit_fast+0xa2>
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	7f9b      	ldrb	r3, [r3, #30]
 800c53c:	001a      	movs	r2, r3
 800c53e:	2304      	movs	r3, #4
 800c540:	4013      	ands	r3, r2
 800c542:	d142      	bne.n	800c5ca <tcp_rexmit_fast+0xa2>
    LWIP_DEBUGF(TCP_FR_DEBUG, 
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	0018      	movs	r0, r3
 800c548:	f7ff ff92 	bl	800c470 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    if (pcb->cwnd > pcb->snd_wnd) {
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	224c      	movs	r2, #76	; 0x4c
 800c550:	5a9a      	ldrh	r2, [r3, r2]
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	2160      	movs	r1, #96	; 0x60
 800c556:	5a5b      	ldrh	r3, [r3, r1]
 800c558:	429a      	cmp	r2, r3
 800c55a:	d908      	bls.n	800c56e <tcp_rexmit_fast+0x46>
      pcb->ssthresh = pcb->snd_wnd / 2;
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	2260      	movs	r2, #96	; 0x60
 800c560:	5a9b      	ldrh	r3, [r3, r2]
 800c562:	085b      	lsrs	r3, r3, #1
 800c564:	b299      	uxth	r1, r3
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	224e      	movs	r2, #78	; 0x4e
 800c56a:	5299      	strh	r1, [r3, r2]
 800c56c:	e007      	b.n	800c57e <tcp_rexmit_fast+0x56>
    } else {
      pcb->ssthresh = pcb->cwnd / 2;
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	224c      	movs	r2, #76	; 0x4c
 800c572:	5a9b      	ldrh	r3, [r3, r2]
 800c574:	085b      	lsrs	r3, r3, #1
 800c576:	b299      	uxth	r1, r3
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	224e      	movs	r2, #78	; 0x4e
 800c57c:	5299      	strh	r1, [r3, r2]
    }
    
    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < 2*pcb->mss) {
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	224e      	movs	r2, #78	; 0x4e
 800c582:	5a9b      	ldrh	r3, [r3, r2]
 800c584:	001a      	movs	r2, r3
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c58a:	005b      	lsls	r3, r3, #1
 800c58c:	429a      	cmp	r2, r3
 800c58e:	da06      	bge.n	800c59e <tcp_rexmit_fast+0x76>
      LWIP_DEBUGF(TCP_FR_DEBUG, 
                  ("tcp_receive: The minimum value for ssthresh %"U16_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, 2*pcb->mss));
      pcb->ssthresh = 2*pcb->mss;
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c594:	18db      	adds	r3, r3, r3
 800c596:	b299      	uxth	r1, r3
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	224e      	movs	r2, #78	; 0x4e
 800c59c:	5299      	strh	r1, [r3, r2]
    }
    
    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	224e      	movs	r2, #78	; 0x4e
 800c5a2:	5a9a      	ldrh	r2, [r3, r2]
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c5a8:	1c19      	adds	r1, r3, #0
 800c5aa:	1c0b      	adds	r3, r1, #0
 800c5ac:	18db      	adds	r3, r3, r3
 800c5ae:	185b      	adds	r3, r3, r1
 800c5b0:	b29b      	uxth	r3, r3
 800c5b2:	18d3      	adds	r3, r2, r3
 800c5b4:	b299      	uxth	r1, r3
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	224c      	movs	r2, #76	; 0x4c
 800c5ba:	5299      	strh	r1, [r3, r2]
    pcb->flags |= TF_INFR;
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	7f9b      	ldrb	r3, [r3, #30]
 800c5c0:	2204      	movs	r2, #4
 800c5c2:	4313      	orrs	r3, r2
 800c5c4:	b2da      	uxtb	r2, r3
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	779a      	strb	r2, [r3, #30]
  } 
}
 800c5ca:	46c0      	nop			; (mov r8, r8)
 800c5cc:	46bd      	mov	sp, r7
 800c5ce:	b002      	add	sp, #8
 800c5d0:	bd80      	pop	{r7, pc}
	...

0800c5d4 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
void
tcp_keepalive(struct tcp_pcb *pcb)
{
 800c5d4:	b590      	push	{r4, r7, lr}
 800c5d6:	b087      	sub	sp, #28
 800c5d8:	af02      	add	r7, sp, #8
 800c5da:	6078      	str	r0, [r7, #4]
                          ip4_addr3_16(&pcb->remote_ip), ip4_addr4_16(&pcb->remote_ip)));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n", 
                          tcp_ticks, pcb->tmr, pcb->keep_cnt_sent));
   
  p = tcp_output_alloc_header(pcb, 0, 0, htonl(pcb->snd_nxt - 1));
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c5e0:	3b01      	subs	r3, #1
 800c5e2:	0018      	movs	r0, r3
 800c5e4:	f7f9 fbb4 	bl	8005d50 <lwip_htonl>
 800c5e8:	0003      	movs	r3, r0
 800c5ea:	6878      	ldr	r0, [r7, #4]
 800c5ec:	2200      	movs	r2, #0
 800c5ee:	2100      	movs	r1, #0
 800c5f0:	f7fe fb9c 	bl	800ad2c <tcp_output_alloc_header>
 800c5f4:	0003      	movs	r3, r0
 800c5f6:	60fb      	str	r3, [r7, #12]
  if(p == NULL) {
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d03c      	beq.n	800c678 <tcp_keepalive+0xa4>
    LWIP_DEBUGF(TCP_DEBUG, 
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	685b      	ldr	r3, [r3, #4]
 800c602:	60bb      	str	r3, [r7, #8]

#if CHECKSUM_GEN_TCP
  tcphdr->chksum = inet_chksum_pseudo(p, &pcb->local_ip, &pcb->remote_ip,
 800c604:	6879      	ldr	r1, [r7, #4]
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	1d1a      	adds	r2, r3, #4
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	891b      	ldrh	r3, [r3, #8]
 800c60e:	68f8      	ldr	r0, [r7, #12]
 800c610:	9300      	str	r3, [sp, #0]
 800c612:	2306      	movs	r3, #6
 800c614:	f001 f90d 	bl	800d832 <inet_chksum_pseudo>
 800c618:	0003      	movs	r3, r0
 800c61a:	001a      	movs	r2, r3
 800c61c:	68bb      	ldr	r3, [r7, #8]
 800c61e:	21ff      	movs	r1, #255	; 0xff
 800c620:	4011      	ands	r1, r2
 800c622:	000c      	movs	r4, r1
 800c624:	7c19      	ldrb	r1, [r3, #16]
 800c626:	2000      	movs	r0, #0
 800c628:	4001      	ands	r1, r0
 800c62a:	1c08      	adds	r0, r1, #0
 800c62c:	1c21      	adds	r1, r4, #0
 800c62e:	4301      	orrs	r1, r0
 800c630:	7419      	strb	r1, [r3, #16]
 800c632:	0a12      	lsrs	r2, r2, #8
 800c634:	b290      	uxth	r0, r2
 800c636:	7c5a      	ldrb	r2, [r3, #17]
 800c638:	2100      	movs	r1, #0
 800c63a:	400a      	ands	r2, r1
 800c63c:	1c11      	adds	r1, r2, #0
 800c63e:	1c02      	adds	r2, r0, #0
 800c640:	430a      	orrs	r2, r1
 800c642:	745a      	strb	r2, [r3, #17]
                                      IP_PROTO_TCP, p->tot_len);
#endif
  TCP_STATS_INC(tcp.xmit);
 800c644:	4b0e      	ldr	r3, [pc, #56]	; (800c680 <tcp_keepalive+0xac>)
 800c646:	2290      	movs	r2, #144	; 0x90
 800c648:	5a9b      	ldrh	r3, [r3, r2]
 800c64a:	3301      	adds	r3, #1
 800c64c:	b299      	uxth	r1, r3
 800c64e:	4b0c      	ldr	r3, [pc, #48]	; (800c680 <tcp_keepalive+0xac>)
 800c650:	2290      	movs	r2, #144	; 0x90
 800c652:	5299      	strh	r1, [r3, r2]
  /* Send output to IP */
#if LWIP_NETIF_HWADDRHINT
  ip_output_hinted(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP,
    &(pcb->addr_hint));
#else /* LWIP_NETIF_HWADDRHINT*/
  ip_output(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP);
 800c654:	6879      	ldr	r1, [r7, #4]
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	1d1a      	adds	r2, r3, #4
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	7a9c      	ldrb	r4, [r3, #10]
 800c65e:	68f8      	ldr	r0, [r7, #12]
 800c660:	2306      	movs	r3, #6
 800c662:	9301      	str	r3, [sp, #4]
 800c664:	2300      	movs	r3, #0
 800c666:	9300      	str	r3, [sp, #0]
 800c668:	0023      	movs	r3, r4
 800c66a:	f001 fdcd 	bl	800e208 <ip_output>
#endif /* LWIP_NETIF_HWADDRHINT*/

  pbuf_free(p);
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	0018      	movs	r0, r3
 800c672:	f7fa fb8f 	bl	8006d94 <pbuf_free>
 800c676:	e000      	b.n	800c67a <tcp_keepalive+0xa6>
    return;
 800c678:	46c0      	nop			; (mov r8, r8)

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F".\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt));
}
 800c67a:	46bd      	mov	sp, r7
 800c67c:	b005      	add	sp, #20
 800c67e:	bd90      	pop	{r4, r7, pc}
 800c680:	2000340c 	.word	0x2000340c

0800c684 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
void
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800c684:	b590      	push	{r4, r7, lr}
 800c686:	b08b      	sub	sp, #44	; 0x2c
 800c688:	af02      	add	r7, sp, #8
 800c68a:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, 
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n", 
               tcp_ticks, pcb->tmr, pcb->keep_cnt_sent));

  seg = pcb->unacked;
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c690:	61fb      	str	r3, [r7, #28]

  if(seg == NULL) {
 800c692:	69fb      	ldr	r3, [r7, #28]
 800c694:	2b00      	cmp	r3, #0
 800c696:	d102      	bne.n	800c69e <tcp_zero_window_probe+0x1a>
    seg = pcb->unsent;
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c69c:	61fb      	str	r3, [r7, #28]
  }
  if(seg == NULL) {
 800c69e:	69fb      	ldr	r3, [r7, #28]
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d100      	bne.n	800c6a6 <tcp_zero_window_probe+0x22>
 800c6a4:	e0b4      	b.n	800c810 <tcp_zero_window_probe+0x18c>
    return;
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800c6a6:	69fb      	ldr	r3, [r7, #28]
 800c6a8:	68db      	ldr	r3, [r3, #12]
 800c6aa:	7b1a      	ldrb	r2, [r3, #12]
 800c6ac:	7b5b      	ldrb	r3, [r3, #13]
 800c6ae:	021b      	lsls	r3, r3, #8
 800c6b0:	4313      	orrs	r3, r2
 800c6b2:	b29b      	uxth	r3, r3
 800c6b4:	0018      	movs	r0, r3
 800c6b6:	f7f9 fb3b 	bl	8005d30 <lwip_ntohs>
 800c6ba:	0003      	movs	r3, r0
 800c6bc:	001a      	movs	r2, r3
 800c6be:	2301      	movs	r3, #1
 800c6c0:	4013      	ands	r3, r2
 800c6c2:	d005      	beq.n	800c6d0 <tcp_zero_window_probe+0x4c>
 800c6c4:	69fb      	ldr	r3, [r7, #28]
 800c6c6:	891b      	ldrh	r3, [r3, #8]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d101      	bne.n	800c6d0 <tcp_zero_window_probe+0x4c>
 800c6cc:	2201      	movs	r2, #1
 800c6ce:	e000      	b.n	800c6d2 <tcp_zero_window_probe+0x4e>
 800c6d0:	2200      	movs	r2, #0
 800c6d2:	211b      	movs	r1, #27
 800c6d4:	187b      	adds	r3, r7, r1
 800c6d6:	701a      	strb	r2, [r3, #0]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800c6d8:	187b      	adds	r3, r7, r1
 800c6da:	781b      	ldrb	r3, [r3, #0]
 800c6dc:	425a      	negs	r2, r3
 800c6de:	4153      	adcs	r3, r2
 800c6e0:	b2da      	uxtb	r2, r3
 800c6e2:	2018      	movs	r0, #24
 800c6e4:	183b      	adds	r3, r7, r0
 800c6e6:	801a      	strh	r2, [r3, #0]

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 800c6e8:	69fb      	ldr	r3, [r7, #28]
 800c6ea:	68db      	ldr	r3, [r3, #12]
 800c6ec:	791a      	ldrb	r2, [r3, #4]
 800c6ee:	7959      	ldrb	r1, [r3, #5]
 800c6f0:	0209      	lsls	r1, r1, #8
 800c6f2:	430a      	orrs	r2, r1
 800c6f4:	7999      	ldrb	r1, [r3, #6]
 800c6f6:	0409      	lsls	r1, r1, #16
 800c6f8:	430a      	orrs	r2, r1
 800c6fa:	79db      	ldrb	r3, [r3, #7]
 800c6fc:	061b      	lsls	r3, r3, #24
 800c6fe:	4313      	orrs	r3, r2
 800c700:	0019      	movs	r1, r3
 800c702:	183b      	adds	r3, r7, r0
 800c704:	881a      	ldrh	r2, [r3, #0]
 800c706:	6878      	ldr	r0, [r7, #4]
 800c708:	000b      	movs	r3, r1
 800c70a:	2100      	movs	r1, #0
 800c70c:	f7fe fb0e 	bl	800ad2c <tcp_output_alloc_header>
 800c710:	0003      	movs	r3, r0
 800c712:	617b      	str	r3, [r7, #20]
  if(p == NULL) {
 800c714:	697b      	ldr	r3, [r7, #20]
 800c716:	2b00      	cmp	r3, #0
 800c718:	d100      	bne.n	800c71c <tcp_zero_window_probe+0x98>
 800c71a:	e07b      	b.n	800c814 <tcp_zero_window_probe+0x190>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800c71c:	697b      	ldr	r3, [r7, #20]
 800c71e:	685b      	ldr	r3, [r3, #4]
 800c720:	613b      	str	r3, [r7, #16]

  if (is_fin) {
 800c722:	231b      	movs	r3, #27
 800c724:	18fb      	adds	r3, r7, r3
 800c726:	781b      	ldrb	r3, [r3, #0]
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d026      	beq.n	800c77a <tcp_zero_window_probe+0xf6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800c72c:	693b      	ldr	r3, [r7, #16]
 800c72e:	7b1a      	ldrb	r2, [r3, #12]
 800c730:	7b5b      	ldrb	r3, [r3, #13]
 800c732:	021b      	lsls	r3, r3, #8
 800c734:	4313      	orrs	r3, r2
 800c736:	b29b      	uxth	r3, r3
 800c738:	b21b      	sxth	r3, r3
 800c73a:	4a38      	ldr	r2, [pc, #224]	; (800c81c <tcp_zero_window_probe+0x198>)
 800c73c:	4013      	ands	r3, r2
 800c73e:	b21c      	sxth	r4, r3
 800c740:	2011      	movs	r0, #17
 800c742:	f7f9 fadf 	bl	8005d04 <lwip_htons>
 800c746:	0003      	movs	r3, r0
 800c748:	b21b      	sxth	r3, r3
 800c74a:	4323      	orrs	r3, r4
 800c74c:	b21b      	sxth	r3, r3
 800c74e:	b29a      	uxth	r2, r3
 800c750:	693b      	ldr	r3, [r7, #16]
 800c752:	21ff      	movs	r1, #255	; 0xff
 800c754:	4011      	ands	r1, r2
 800c756:	000c      	movs	r4, r1
 800c758:	7b19      	ldrb	r1, [r3, #12]
 800c75a:	2000      	movs	r0, #0
 800c75c:	4001      	ands	r1, r0
 800c75e:	1c08      	adds	r0, r1, #0
 800c760:	1c21      	adds	r1, r4, #0
 800c762:	4301      	orrs	r1, r0
 800c764:	7319      	strb	r1, [r3, #12]
 800c766:	0a12      	lsrs	r2, r2, #8
 800c768:	b290      	uxth	r0, r2
 800c76a:	7b5a      	ldrb	r2, [r3, #13]
 800c76c:	2100      	movs	r1, #0
 800c76e:	400a      	ands	r2, r1
 800c770:	1c11      	adds	r1, r2, #0
 800c772:	1c02      	adds	r2, r0, #0
 800c774:	430a      	orrs	r2, r1
 800c776:	735a      	strb	r2, [r3, #13]
 800c778:	e010      	b.n	800c79c <tcp_zero_window_probe+0x118>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800c77a:	697b      	ldr	r3, [r7, #20]
 800c77c:	685b      	ldr	r3, [r3, #4]
 800c77e:	3314      	adds	r3, #20
 800c780:	60fb      	str	r3, [r7, #12]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800c782:	69fb      	ldr	r3, [r7, #28]
 800c784:	6858      	ldr	r0, [r3, #4]
 800c786:	69fb      	ldr	r3, [r7, #28]
 800c788:	685b      	ldr	r3, [r3, #4]
 800c78a:	891a      	ldrh	r2, [r3, #8]
 800c78c:	69fb      	ldr	r3, [r7, #28]
 800c78e:	891b      	ldrh	r3, [r3, #8]
 800c790:	1ad3      	subs	r3, r2, r3
 800c792:	b29b      	uxth	r3, r3
 800c794:	68f9      	ldr	r1, [r7, #12]
 800c796:	2201      	movs	r2, #1
 800c798:	f7fa fc88 	bl	80070ac <pbuf_copy_partial>
  }

#if CHECKSUM_GEN_TCP
  tcphdr->chksum = inet_chksum_pseudo(p, &pcb->local_ip, &pcb->remote_ip,
 800c79c:	6879      	ldr	r1, [r7, #4]
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	1d1a      	adds	r2, r3, #4
 800c7a2:	697b      	ldr	r3, [r7, #20]
 800c7a4:	891b      	ldrh	r3, [r3, #8]
 800c7a6:	6978      	ldr	r0, [r7, #20]
 800c7a8:	9300      	str	r3, [sp, #0]
 800c7aa:	2306      	movs	r3, #6
 800c7ac:	f001 f841 	bl	800d832 <inet_chksum_pseudo>
 800c7b0:	0003      	movs	r3, r0
 800c7b2:	001a      	movs	r2, r3
 800c7b4:	693b      	ldr	r3, [r7, #16]
 800c7b6:	21ff      	movs	r1, #255	; 0xff
 800c7b8:	4011      	ands	r1, r2
 800c7ba:	000c      	movs	r4, r1
 800c7bc:	7c19      	ldrb	r1, [r3, #16]
 800c7be:	2000      	movs	r0, #0
 800c7c0:	4001      	ands	r1, r0
 800c7c2:	1c08      	adds	r0, r1, #0
 800c7c4:	1c21      	adds	r1, r4, #0
 800c7c6:	4301      	orrs	r1, r0
 800c7c8:	7419      	strb	r1, [r3, #16]
 800c7ca:	0a12      	lsrs	r2, r2, #8
 800c7cc:	b290      	uxth	r0, r2
 800c7ce:	7c5a      	ldrb	r2, [r3, #17]
 800c7d0:	2100      	movs	r1, #0
 800c7d2:	400a      	ands	r2, r1
 800c7d4:	1c11      	adds	r1, r2, #0
 800c7d6:	1c02      	adds	r2, r0, #0
 800c7d8:	430a      	orrs	r2, r1
 800c7da:	745a      	strb	r2, [r3, #17]
                                      IP_PROTO_TCP, p->tot_len);
#endif
  TCP_STATS_INC(tcp.xmit);
 800c7dc:	4b10      	ldr	r3, [pc, #64]	; (800c820 <tcp_zero_window_probe+0x19c>)
 800c7de:	2290      	movs	r2, #144	; 0x90
 800c7e0:	5a9b      	ldrh	r3, [r3, r2]
 800c7e2:	3301      	adds	r3, #1
 800c7e4:	b299      	uxth	r1, r3
 800c7e6:	4b0e      	ldr	r3, [pc, #56]	; (800c820 <tcp_zero_window_probe+0x19c>)
 800c7e8:	2290      	movs	r2, #144	; 0x90
 800c7ea:	5299      	strh	r1, [r3, r2]
  /* Send output to IP */
#if LWIP_NETIF_HWADDRHINT
  ip_output_hinted(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP,
    &(pcb->addr_hint));
#else /* LWIP_NETIF_HWADDRHINT*/
  ip_output(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP);
 800c7ec:	6879      	ldr	r1, [r7, #4]
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	1d1a      	adds	r2, r3, #4
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	7a9c      	ldrb	r4, [r3, #10]
 800c7f6:	6978      	ldr	r0, [r7, #20]
 800c7f8:	2306      	movs	r3, #6
 800c7fa:	9301      	str	r3, [sp, #4]
 800c7fc:	2300      	movs	r3, #0
 800c7fe:	9300      	str	r3, [sp, #0]
 800c800:	0023      	movs	r3, r4
 800c802:	f001 fd01 	bl	800e208 <ip_output>
#endif /* LWIP_NETIF_HWADDRHINT*/

  pbuf_free(p);
 800c806:	697b      	ldr	r3, [r7, #20]
 800c808:	0018      	movs	r0, r3
 800c80a:	f7fa fac3 	bl	8006d94 <pbuf_free>
 800c80e:	e002      	b.n	800c816 <tcp_zero_window_probe+0x192>
    return;
 800c810:	46c0      	nop			; (mov r8, r8)
 800c812:	e000      	b.n	800c816 <tcp_zero_window_probe+0x192>
    return;
 800c814:	46c0      	nop			; (mov r8, r8)

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F".\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt));
}
 800c816:	46bd      	mov	sp, r7
 800c818:	b009      	add	sp, #36	; 0x24
 800c81a:	bd90      	pop	{r4, r7, pc}
 800c81c:	ffffc0ff 	.word	0xffffc0ff
 800c820:	2000340c 	.word	0x2000340c

0800c824 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800c824:	b580      	push	{r7, lr}
 800c826:	b082      	sub	sp, #8
 800c828:	af00      	add	r7, sp, #0
 800c82a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800c82c:	f7fa fd3a 	bl	80072a4 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800c830:	4b0a      	ldr	r3, [pc, #40]	; (800c85c <tcpip_tcp_timer+0x38>)
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	2b00      	cmp	r3, #0
 800c836:	d103      	bne.n	800c840 <tcpip_tcp_timer+0x1c>
 800c838:	4b09      	ldr	r3, [pc, #36]	; (800c860 <tcpip_tcp_timer+0x3c>)
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d006      	beq.n	800c84e <tcpip_tcp_timer+0x2a>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800c840:	4b08      	ldr	r3, [pc, #32]	; (800c864 <tcpip_tcp_timer+0x40>)
 800c842:	2200      	movs	r2, #0
 800c844:	0019      	movs	r1, r3
 800c846:	20fa      	movs	r0, #250	; 0xfa
 800c848:	f000 f87a 	bl	800c940 <sys_timeout>
 800c84c:	e002      	b.n	800c854 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800c84e:	4b06      	ldr	r3, [pc, #24]	; (800c868 <tcpip_tcp_timer+0x44>)
 800c850:	2200      	movs	r2, #0
 800c852:	601a      	str	r2, [r3, #0]
  }
}
 800c854:	46c0      	nop			; (mov r8, r8)
 800c856:	46bd      	mov	sp, r7
 800c858:	b002      	add	sp, #8
 800c85a:	bd80      	pop	{r7, pc}
 800c85c:	20003528 	.word	0x20003528
 800c860:	2000353c 	.word	0x2000353c
 800c864:	0800c825 	.word	0x0800c825
 800c868:	20002738 	.word	0x20002738

0800c86c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800c86c:	b580      	push	{r7, lr}
 800c86e:	af00      	add	r7, sp, #0
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800c870:	4b0b      	ldr	r3, [pc, #44]	; (800c8a0 <tcp_timer_needed+0x34>)
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	2b00      	cmp	r3, #0
 800c876:	d110      	bne.n	800c89a <tcp_timer_needed+0x2e>
 800c878:	4b0a      	ldr	r3, [pc, #40]	; (800c8a4 <tcp_timer_needed+0x38>)
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d103      	bne.n	800c888 <tcp_timer_needed+0x1c>
 800c880:	4b09      	ldr	r3, [pc, #36]	; (800c8a8 <tcp_timer_needed+0x3c>)
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	2b00      	cmp	r3, #0
 800c886:	d008      	beq.n	800c89a <tcp_timer_needed+0x2e>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800c888:	4b05      	ldr	r3, [pc, #20]	; (800c8a0 <tcp_timer_needed+0x34>)
 800c88a:	2201      	movs	r2, #1
 800c88c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800c88e:	4b07      	ldr	r3, [pc, #28]	; (800c8ac <tcp_timer_needed+0x40>)
 800c890:	2200      	movs	r2, #0
 800c892:	0019      	movs	r1, r3
 800c894:	20fa      	movs	r0, #250	; 0xfa
 800c896:	f000 f853 	bl	800c940 <sys_timeout>
  }
}
 800c89a:	46c0      	nop			; (mov r8, r8)
 800c89c:	46bd      	mov	sp, r7
 800c89e:	bd80      	pop	{r7, pc}
 800c8a0:	20002738 	.word	0x20002738
 800c8a4:	20003528 	.word	0x20003528
 800c8a8:	2000353c 	.word	0x2000353c
 800c8ac:	0800c825 	.word	0x0800c825

0800c8b0 <ip_reass_timer>:
 *
 * @param arg unused argument
 */
static void
ip_reass_timer(void *arg)
{
 800c8b0:	b580      	push	{r7, lr}
 800c8b2:	b082      	sub	sp, #8
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: ip_reass_tmr()\n"));
  ip_reass_tmr();
 800c8b8:	f001 fd14 	bl	800e2e4 <ip_reass_tmr>
  sys_timeout(IP_TMR_INTERVAL, ip_reass_timer, NULL);
 800c8bc:	4905      	ldr	r1, [pc, #20]	; (800c8d4 <ip_reass_timer+0x24>)
 800c8be:	23fa      	movs	r3, #250	; 0xfa
 800c8c0:	009b      	lsls	r3, r3, #2
 800c8c2:	2200      	movs	r2, #0
 800c8c4:	0018      	movs	r0, r3
 800c8c6:	f000 f83b 	bl	800c940 <sys_timeout>
}
 800c8ca:	46c0      	nop			; (mov r8, r8)
 800c8cc:	46bd      	mov	sp, r7
 800c8ce:	b002      	add	sp, #8
 800c8d0:	bd80      	pop	{r7, pc}
 800c8d2:	46c0      	nop			; (mov r8, r8)
 800c8d4:	0800c8b1 	.word	0x0800c8b1

0800c8d8 <arp_timer>:
 *
 * @param arg unused argument
 */
static void
arp_timer(void *arg)
{
 800c8d8:	b580      	push	{r7, lr}
 800c8da:	b082      	sub	sp, #8
 800c8dc:	af00      	add	r7, sp, #0
 800c8de:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: etharp_tmr()\n"));
  etharp_tmr();
 800c8e0:	f002 fc58 	bl	800f194 <etharp_tmr>
  sys_timeout(ARP_TMR_INTERVAL, arp_timer, NULL);
 800c8e4:	4b04      	ldr	r3, [pc, #16]	; (800c8f8 <arp_timer+0x20>)
 800c8e6:	4805      	ldr	r0, [pc, #20]	; (800c8fc <arp_timer+0x24>)
 800c8e8:	2200      	movs	r2, #0
 800c8ea:	0019      	movs	r1, r3
 800c8ec:	f000 f828 	bl	800c940 <sys_timeout>
}
 800c8f0:	46c0      	nop			; (mov r8, r8)
 800c8f2:	46bd      	mov	sp, r7
 800c8f4:	b002      	add	sp, #8
 800c8f6:	bd80      	pop	{r7, pc}
 800c8f8:	0800c8d9 	.word	0x0800c8d9
 800c8fc:	00001388 	.word	0x00001388

0800c900 <sys_timeouts_init>:
}
#endif /* LWIP_DNS */

/** Initialize this module */
void sys_timeouts_init(void)
{
 800c900:	b580      	push	{r7, lr}
 800c902:	af00      	add	r7, sp, #0
#if IP_REASSEMBLY
  sys_timeout(IP_TMR_INTERVAL, ip_reass_timer, NULL);
 800c904:	490a      	ldr	r1, [pc, #40]	; (800c930 <sys_timeouts_init+0x30>)
 800c906:	23fa      	movs	r3, #250	; 0xfa
 800c908:	009b      	lsls	r3, r3, #2
 800c90a:	2200      	movs	r2, #0
 800c90c:	0018      	movs	r0, r3
 800c90e:	f000 f817 	bl	800c940 <sys_timeout>
#endif /* IP_REASSEMBLY */
#if LWIP_ARP
  sys_timeout(ARP_TMR_INTERVAL, arp_timer, NULL);
 800c912:	4b08      	ldr	r3, [pc, #32]	; (800c934 <sys_timeouts_init+0x34>)
 800c914:	4808      	ldr	r0, [pc, #32]	; (800c938 <sys_timeouts_init+0x38>)
 800c916:	2200      	movs	r2, #0
 800c918:	0019      	movs	r1, r3
 800c91a:	f000 f811 	bl	800c940 <sys_timeout>
  sys_timeout(DNS_TMR_INTERVAL, dns_timer, NULL);
#endif /* LWIP_DNS */

#if NO_SYS
  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
 800c91e:	f003 fc5b 	bl	80101d8 <sys_now>
 800c922:	0002      	movs	r2, r0
 800c924:	4b05      	ldr	r3, [pc, #20]	; (800c93c <sys_timeouts_init+0x3c>)
 800c926:	601a      	str	r2, [r3, #0]
#endif
}
 800c928:	46c0      	nop			; (mov r8, r8)
 800c92a:	46bd      	mov	sp, r7
 800c92c:	bd80      	pop	{r7, pc}
 800c92e:	46c0      	nop			; (mov r8, r8)
 800c930:	0800c8b1 	.word	0x0800c8b1
 800c934:	0800c8d9 	.word	0x0800c8d9
 800c938:	00001388 	.word	0x00001388
 800c93c:	20002734 	.word	0x20002734

0800c940 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800c940:	b580      	push	{r7, lr}
 800c942:	b086      	sub	sp, #24
 800c944:	af00      	add	r7, sp, #0
 800c946:	60f8      	str	r0, [r7, #12]
 800c948:	60b9      	str	r1, [r7, #8]
 800c94a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800c94c:	2007      	movs	r0, #7
 800c94e:	f7f9 fdd9 	bl	8006504 <memp_malloc>
 800c952:	0003      	movs	r3, r0
 800c954:	613b      	str	r3, [r7, #16]
  if (timeout == NULL) {
 800c956:	693b      	ldr	r3, [r7, #16]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d05b      	beq.n	800ca14 <sys_timeout+0xd4>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
    return;
  }
  timeout->next = NULL;
 800c95c:	693b      	ldr	r3, [r7, #16]
 800c95e:	2200      	movs	r2, #0
 800c960:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800c962:	693b      	ldr	r3, [r7, #16]
 800c964:	68ba      	ldr	r2, [r7, #8]
 800c966:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800c968:	693b      	ldr	r3, [r7, #16]
 800c96a:	687a      	ldr	r2, [r7, #4]
 800c96c:	60da      	str	r2, [r3, #12]
  timeout->time = msecs;
 800c96e:	693b      	ldr	r3, [r7, #16]
 800c970:	68fa      	ldr	r2, [r7, #12]
 800c972:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800c974:	4b29      	ldr	r3, [pc, #164]	; (800ca1c <sys_timeout+0xdc>)
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d103      	bne.n	800c984 <sys_timeout+0x44>
    next_timeout = timeout;
 800c97c:	4b27      	ldr	r3, [pc, #156]	; (800ca1c <sys_timeout+0xdc>)
 800c97e:	693a      	ldr	r2, [r7, #16]
 800c980:	601a      	str	r2, [r3, #0]
    return;
 800c982:	e048      	b.n	800ca16 <sys_timeout+0xd6>
  }

  if (next_timeout->time > msecs) {
 800c984:	4b25      	ldr	r3, [pc, #148]	; (800ca1c <sys_timeout+0xdc>)
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	685b      	ldr	r3, [r3, #4]
 800c98a:	68fa      	ldr	r2, [r7, #12]
 800c98c:	429a      	cmp	r2, r3
 800c98e:	d20f      	bcs.n	800c9b0 <sys_timeout+0x70>
    next_timeout->time -= msecs;
 800c990:	4b22      	ldr	r3, [pc, #136]	; (800ca1c <sys_timeout+0xdc>)
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	6859      	ldr	r1, [r3, #4]
 800c996:	4b21      	ldr	r3, [pc, #132]	; (800ca1c <sys_timeout+0xdc>)
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	68fa      	ldr	r2, [r7, #12]
 800c99c:	1a8a      	subs	r2, r1, r2
 800c99e:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
 800c9a0:	4b1e      	ldr	r3, [pc, #120]	; (800ca1c <sys_timeout+0xdc>)
 800c9a2:	681a      	ldr	r2, [r3, #0]
 800c9a4:	693b      	ldr	r3, [r7, #16]
 800c9a6:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800c9a8:	4b1c      	ldr	r3, [pc, #112]	; (800ca1c <sys_timeout+0xdc>)
 800c9aa:	693a      	ldr	r2, [r7, #16]
 800c9ac:	601a      	str	r2, [r3, #0]
 800c9ae:	e032      	b.n	800ca16 <sys_timeout+0xd6>
  } else {
    for(t = next_timeout; t != NULL; t = t->next) {
 800c9b0:	4b1a      	ldr	r3, [pc, #104]	; (800ca1c <sys_timeout+0xdc>)
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	617b      	str	r3, [r7, #20]
 800c9b6:	e029      	b.n	800ca0c <sys_timeout+0xcc>
      timeout->time -= t->time;
 800c9b8:	693b      	ldr	r3, [r7, #16]
 800c9ba:	685a      	ldr	r2, [r3, #4]
 800c9bc:	697b      	ldr	r3, [r7, #20]
 800c9be:	685b      	ldr	r3, [r3, #4]
 800c9c0:	1ad2      	subs	r2, r2, r3
 800c9c2:	693b      	ldr	r3, [r7, #16]
 800c9c4:	605a      	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 800c9c6:	697b      	ldr	r3, [r7, #20]
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d006      	beq.n	800c9dc <sys_timeout+0x9c>
 800c9ce:	697b      	ldr	r3, [r7, #20]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	685a      	ldr	r2, [r3, #4]
 800c9d4:	693b      	ldr	r3, [r7, #16]
 800c9d6:	685b      	ldr	r3, [r3, #4]
 800c9d8:	429a      	cmp	r2, r3
 800c9da:	d914      	bls.n	800ca06 <sys_timeout+0xc6>
        if (t->next != NULL) {
 800c9dc:	697b      	ldr	r3, [r7, #20]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d008      	beq.n	800c9f6 <sys_timeout+0xb6>
          t->next->time -= timeout->time;
 800c9e4:	697b      	ldr	r3, [r7, #20]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	6859      	ldr	r1, [r3, #4]
 800c9ea:	693b      	ldr	r3, [r7, #16]
 800c9ec:	685a      	ldr	r2, [r3, #4]
 800c9ee:	697b      	ldr	r3, [r7, #20]
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	1a8a      	subs	r2, r1, r2
 800c9f4:	605a      	str	r2, [r3, #4]
        }
        timeout->next = t->next;
 800c9f6:	697b      	ldr	r3, [r7, #20]
 800c9f8:	681a      	ldr	r2, [r3, #0]
 800c9fa:	693b      	ldr	r3, [r7, #16]
 800c9fc:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800c9fe:	697b      	ldr	r3, [r7, #20]
 800ca00:	693a      	ldr	r2, [r7, #16]
 800ca02:	601a      	str	r2, [r3, #0]
        break;
 800ca04:	e007      	b.n	800ca16 <sys_timeout+0xd6>
    for(t = next_timeout; t != NULL; t = t->next) {
 800ca06:	697b      	ldr	r3, [r7, #20]
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	617b      	str	r3, [r7, #20]
 800ca0c:	697b      	ldr	r3, [r7, #20]
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d1d2      	bne.n	800c9b8 <sys_timeout+0x78>
 800ca12:	e000      	b.n	800ca16 <sys_timeout+0xd6>
    return;
 800ca14:	46c0      	nop			; (mov r8, r8)
      }
    }
  }
}
 800ca16:	46bd      	mov	sp, r7
 800ca18:	b006      	add	sp, #24
 800ca1a:	bd80      	pop	{r7, pc}
 800ca1c:	20002730 	.word	0x20002730

0800ca20 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800ca20:	b580      	push	{r7, lr}
 800ca22:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 800ca24:	46c0      	nop			; (mov r8, r8)
 800ca26:	46bd      	mov	sp, r7
 800ca28:	bd80      	pop	{r7, pc}
	...

0800ca2c <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800ca2c:	b580      	push	{r7, lr}
 800ca2e:	b082      	sub	sp, #8
 800ca30:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800ca32:	1dbb      	adds	r3, r7, #6
 800ca34:	2200      	movs	r2, #0
 800ca36:	801a      	strh	r2, [r3, #0]
  struct udp_pcb *pcb;
  
again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800ca38:	4b16      	ldr	r3, [pc, #88]	; (800ca94 <udp_new_port+0x68>)
 800ca3a:	881b      	ldrh	r3, [r3, #0]
 800ca3c:	1c5a      	adds	r2, r3, #1
 800ca3e:	b291      	uxth	r1, r2
 800ca40:	4a14      	ldr	r2, [pc, #80]	; (800ca94 <udp_new_port+0x68>)
 800ca42:	8011      	strh	r1, [r2, #0]
 800ca44:	4a14      	ldr	r2, [pc, #80]	; (800ca98 <udp_new_port+0x6c>)
 800ca46:	4293      	cmp	r3, r2
 800ca48:	d102      	bne.n	800ca50 <udp_new_port+0x24>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800ca4a:	4b12      	ldr	r3, [pc, #72]	; (800ca94 <udp_new_port+0x68>)
 800ca4c:	4a13      	ldr	r2, [pc, #76]	; (800ca9c <udp_new_port+0x70>)
 800ca4e:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for(pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ca50:	4b13      	ldr	r3, [pc, #76]	; (800caa0 <udp_new_port+0x74>)
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	603b      	str	r3, [r7, #0]
 800ca56:	e014      	b.n	800ca82 <udp_new_port+0x56>
    if (pcb->local_port == udp_port) {
 800ca58:	683b      	ldr	r3, [r7, #0]
 800ca5a:	8a5a      	ldrh	r2, [r3, #18]
 800ca5c:	4b0d      	ldr	r3, [pc, #52]	; (800ca94 <udp_new_port+0x68>)
 800ca5e:	881b      	ldrh	r3, [r3, #0]
 800ca60:	429a      	cmp	r2, r3
 800ca62:	d10b      	bne.n	800ca7c <udp_new_port+0x50>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800ca64:	1dbb      	adds	r3, r7, #6
 800ca66:	1dba      	adds	r2, r7, #6
 800ca68:	8812      	ldrh	r2, [r2, #0]
 800ca6a:	3201      	adds	r2, #1
 800ca6c:	801a      	strh	r2, [r3, #0]
 800ca6e:	1dbb      	adds	r3, r7, #6
 800ca70:	881b      	ldrh	r3, [r3, #0]
 800ca72:	4a0c      	ldr	r2, [pc, #48]	; (800caa4 <udp_new_port+0x78>)
 800ca74:	4293      	cmp	r3, r2
 800ca76:	d9df      	bls.n	800ca38 <udp_new_port+0xc>
        return 0;
 800ca78:	2300      	movs	r3, #0
 800ca7a:	e007      	b.n	800ca8c <udp_new_port+0x60>
  for(pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ca7c:	683b      	ldr	r3, [r7, #0]
 800ca7e:	68db      	ldr	r3, [r3, #12]
 800ca80:	603b      	str	r3, [r7, #0]
 800ca82:	683b      	ldr	r3, [r7, #0]
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d1e7      	bne.n	800ca58 <udp_new_port+0x2c>
      }
      goto again;
    }
  }
  return udp_port;
 800ca88:	4b02      	ldr	r3, [pc, #8]	; (800ca94 <udp_new_port+0x68>)
 800ca8a:	881b      	ldrh	r3, [r3, #0]
  if (ipcb != NULL) {
    return 0;
  }
  return udp_port;
#endif
}
 800ca8c:	0018      	movs	r0, r3
 800ca8e:	46bd      	mov	sp, r7
 800ca90:	b002      	add	sp, #8
 800ca92:	bd80      	pop	{r7, pc}
 800ca94:	20000018 	.word	0x20000018
 800ca98:	0000ffff 	.word	0x0000ffff
 800ca9c:	ffffc000 	.word	0xffffc000
 800caa0:	20003544 	.word	0x20003544
 800caa4:	00003fff 	.word	0x00003fff

0800caa8 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800caa8:	b5b0      	push	{r4, r5, r7, lr}
 800caaa:	b08c      	sub	sp, #48	; 0x30
 800caac:	af02      	add	r7, sp, #8
 800caae:	6078      	str	r0, [r7, #4]
 800cab0:	6039      	str	r1, [r7, #0]
  u8_t local_match;
  u8_t broadcast;

  PERF_START;

  UDP_STATS_INC(udp.recv);
 800cab2:	4bc4      	ldr	r3, [pc, #784]	; (800cdc4 <udp_input+0x31c>)
 800cab4:	227a      	movs	r2, #122	; 0x7a
 800cab6:	5a9b      	ldrh	r3, [r3, r2]
 800cab8:	3301      	adds	r3, #1
 800caba:	b299      	uxth	r1, r3
 800cabc:	4bc1      	ldr	r3, [pc, #772]	; (800cdc4 <udp_input+0x31c>)
 800cabe:	227a      	movs	r2, #122	; 0x7a
 800cac0:	5299      	strh	r1, [r3, r2]

  iphdr = (struct ip_hdr *)p->payload;
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	685b      	ldr	r3, [r3, #4]
 800cac6:	617b      	str	r3, [r7, #20]

  /* Check minimum length (IP header + UDP header)
   * and move payload pointer to UDP header */
  if (p->tot_len < (IPH_HL(iphdr) * 4 + UDP_HLEN) || pbuf_header(p, -(s16_t)(IPH_HL(iphdr) * 4))) {
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	891b      	ldrh	r3, [r3, #8]
 800cacc:	001a      	movs	r2, r3
 800cace:	697b      	ldr	r3, [r7, #20]
 800cad0:	781b      	ldrb	r3, [r3, #0]
 800cad2:	0019      	movs	r1, r3
 800cad4:	230f      	movs	r3, #15
 800cad6:	400b      	ands	r3, r1
 800cad8:	3302      	adds	r3, #2
 800cada:	009b      	lsls	r3, r3, #2
 800cadc:	429a      	cmp	r2, r3
 800cade:	db11      	blt.n	800cb04 <udp_input+0x5c>
 800cae0:	697b      	ldr	r3, [r7, #20]
 800cae2:	781b      	ldrb	r3, [r3, #0]
 800cae4:	b29b      	uxth	r3, r3
 800cae6:	220f      	movs	r2, #15
 800cae8:	4013      	ands	r3, r2
 800caea:	b29b      	uxth	r3, r3
 800caec:	009b      	lsls	r3, r3, #2
 800caee:	b29b      	uxth	r3, r3
 800caf0:	425b      	negs	r3, r3
 800caf2:	b29b      	uxth	r3, r3
 800caf4:	b21a      	sxth	r2, r3
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	0011      	movs	r1, r2
 800cafa:	0018      	movs	r0, r3
 800cafc:	f7fa f8c3 	bl	8006c86 <pbuf_header>
 800cb00:	1e03      	subs	r3, r0, #0
 800cb02:	d014      	beq.n	800cb2e <udp_input+0x86>
    /* drop short packets */
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
 800cb04:	4baf      	ldr	r3, [pc, #700]	; (800cdc4 <udp_input+0x31c>)
 800cb06:	2282      	movs	r2, #130	; 0x82
 800cb08:	5a9b      	ldrh	r3, [r3, r2]
 800cb0a:	3301      	adds	r3, #1
 800cb0c:	b299      	uxth	r1, r3
 800cb0e:	4bad      	ldr	r3, [pc, #692]	; (800cdc4 <udp_input+0x31c>)
 800cb10:	2282      	movs	r2, #130	; 0x82
 800cb12:	5299      	strh	r1, [r3, r2]
    UDP_STATS_INC(udp.drop);
 800cb14:	4bab      	ldr	r3, [pc, #684]	; (800cdc4 <udp_input+0x31c>)
 800cb16:	227e      	movs	r2, #126	; 0x7e
 800cb18:	5a9b      	ldrh	r3, [r3, r2]
 800cb1a:	3301      	adds	r3, #1
 800cb1c:	b299      	uxth	r1, r3
 800cb1e:	4ba9      	ldr	r3, [pc, #676]	; (800cdc4 <udp_input+0x31c>)
 800cb20:	227e      	movs	r2, #126	; 0x7e
 800cb22:	5299      	strh	r1, [r3, r2]
    snmp_inc_udpinerrors();
    pbuf_free(p);
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	0018      	movs	r0, r3
 800cb28:	f7fa f934 	bl	8006d94 <pbuf_free>
    goto end;
 800cb2c:	e156      	b.n	800cddc <udp_input+0x334>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	685b      	ldr	r3, [r3, #4]
 800cb32:	613b      	str	r3, [r7, #16]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(&current_iphdr_dest, inp);
 800cb34:	4ba4      	ldr	r3, [pc, #656]	; (800cdc8 <udp_input+0x320>)
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	220f      	movs	r2, #15
 800cb3a:	18bc      	adds	r4, r7, r2
 800cb3c:	683a      	ldr	r2, [r7, #0]
 800cb3e:	0011      	movs	r1, r2
 800cb40:	0018      	movs	r0, r3
 800cb42:	f001 fb97 	bl	800e274 <ip4_addr_isbroadcast>
 800cb46:	0003      	movs	r3, r0
 800cb48:	7023      	strb	r3, [r4, #0]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = ntohs(udphdr->src);
 800cb4a:	693b      	ldr	r3, [r7, #16]
 800cb4c:	781a      	ldrb	r2, [r3, #0]
 800cb4e:	785b      	ldrb	r3, [r3, #1]
 800cb50:	021b      	lsls	r3, r3, #8
 800cb52:	4313      	orrs	r3, r2
 800cb54:	b29b      	uxth	r3, r3
 800cb56:	220c      	movs	r2, #12
 800cb58:	18bc      	adds	r4, r7, r2
 800cb5a:	0018      	movs	r0, r3
 800cb5c:	f7f9 f8e8 	bl	8005d30 <lwip_ntohs>
 800cb60:	0003      	movs	r3, r0
 800cb62:	8023      	strh	r3, [r4, #0]
  dest = ntohs(udphdr->dest);
 800cb64:	693b      	ldr	r3, [r7, #16]
 800cb66:	789a      	ldrb	r2, [r3, #2]
 800cb68:	78db      	ldrb	r3, [r3, #3]
 800cb6a:	021b      	lsls	r3, r3, #8
 800cb6c:	4313      	orrs	r3, r2
 800cb6e:	b29b      	uxth	r3, r3
 800cb70:	220a      	movs	r2, #10
 800cb72:	18bc      	adds	r4, r7, r2
 800cb74:	0018      	movs	r0, r3
 800cb76:	f7f9 f8db 	bl	8005d30 <lwip_ntohs>
 800cb7a:	0003      	movs	r3, r0
 800cb7c:	8023      	strh	r3, [r4, #0]
      }
    }
  } else
#endif /* LWIP_DHCP */
  {
    prev = NULL;
 800cb7e:	2300      	movs	r3, #0
 800cb80:	623b      	str	r3, [r7, #32]
    local_match = 0;
 800cb82:	231b      	movs	r3, #27
 800cb84:	18fb      	adds	r3, r7, r3
 800cb86:	2200      	movs	r2, #0
 800cb88:	701a      	strb	r2, [r3, #0]
    uncon_pcb = NULL;
 800cb8a:	2300      	movs	r3, #0
 800cb8c:	61fb      	str	r3, [r7, #28]
    /* Iterate through the UDP pcb list for a matching pcb.
     * 'Perfect match' pcbs (connected to the remote port & ip address) are
     * preferred. If no perfect match is found, the first unconnected pcb that
     * matches the local port and ip address gets the datagram. */
    for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800cb8e:	4b8f      	ldr	r3, [pc, #572]	; (800cdcc <udp_input+0x324>)
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	627b      	str	r3, [r7, #36]	; 0x24
 800cb94:	e077      	b.n	800cc86 <udp_input+0x1de>
      local_match = 0;
 800cb96:	231b      	movs	r3, #27
 800cb98:	18fb      	adds	r3, r7, r3
 800cb9a:	2200      	movs	r2, #0
 800cb9c:	701a      	strb	r2, [r3, #0]
                   ip4_addr3_16(&pcb->local_ip), ip4_addr4_16(&pcb->local_ip), pcb->local_port,
                   ip4_addr1_16(&pcb->remote_ip), ip4_addr2_16(&pcb->remote_ip),
                   ip4_addr3_16(&pcb->remote_ip), ip4_addr4_16(&pcb->remote_ip), pcb->remote_port));

      /* compare PCB local addr+port to UDP destination addr+port */
      if (pcb->local_port == dest) {
 800cb9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cba0:	8a5b      	ldrh	r3, [r3, #18]
 800cba2:	220a      	movs	r2, #10
 800cba4:	18ba      	adds	r2, r7, r2
 800cba6:	8812      	ldrh	r2, [r2, #0]
 800cba8:	429a      	cmp	r2, r3
 800cbaa:	d135      	bne.n	800cc18 <udp_input+0x170>
        if (
 800cbac:	230f      	movs	r3, #15
 800cbae:	18fb      	adds	r3, r7, r3
 800cbb0:	781b      	ldrb	r3, [r3, #0]
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d106      	bne.n	800cbc4 <udp_input+0x11c>
           (!broadcast && ip_addr_isany(&pcb->local_ip)) ||
 800cbb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d01e      	beq.n	800cbfa <udp_input+0x152>
 800cbbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d01a      	beq.n	800cbfa <udp_input+0x152>
           ip_addr_cmp(&(pcb->local_ip), &current_iphdr_dest) ||
 800cbc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbc6:	681a      	ldr	r2, [r3, #0]
 800cbc8:	4b7f      	ldr	r3, [pc, #508]	; (800cdc8 <udp_input+0x320>)
 800cbca:	681b      	ldr	r3, [r3, #0]
           (!broadcast && ip_addr_isany(&pcb->local_ip)) ||
 800cbcc:	429a      	cmp	r2, r3
 800cbce:	d014      	beq.n	800cbfa <udp_input+0x152>
           ip_addr_cmp(&(pcb->local_ip), &current_iphdr_dest) ||
 800cbd0:	230f      	movs	r3, #15
 800cbd2:	18fb      	adds	r3, r7, r3
 800cbd4:	781b      	ldrb	r3, [r3, #0]
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d01e      	beq.n	800cc18 <udp_input+0x170>
            (broadcast && ip_get_option(pcb, SOF_BROADCAST) &&
             (ip_addr_isany(&pcb->local_ip) ||
              ip_addr_netcmp(&pcb->local_ip, ip_current_dest_addr(), &inp->netmask)))) {
#else /* IP_SOF_BROADCAST_RECV */
            (broadcast &&
             (ip_addr_isany(&pcb->local_ip) ||
 800cbda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
            (broadcast &&
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d00c      	beq.n	800cbfa <udp_input+0x152>
             (ip_addr_isany(&pcb->local_ip) ||
 800cbe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d008      	beq.n	800cbfa <udp_input+0x152>
              ip_addr_netcmp(&pcb->local_ip, ip_current_dest_addr(), &inp->netmask)))) {
 800cbe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbea:	681a      	ldr	r2, [r3, #0]
 800cbec:	4b76      	ldr	r3, [pc, #472]	; (800cdc8 <udp_input+0x320>)
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	405a      	eors	r2, r3
 800cbf2:	683b      	ldr	r3, [r7, #0]
 800cbf4:	689b      	ldr	r3, [r3, #8]
 800cbf6:	4013      	ands	r3, r2
             (ip_addr_isany(&pcb->local_ip) ||
 800cbf8:	d10e      	bne.n	800cc18 <udp_input+0x170>
#endif /* IP_SOF_BROADCAST_RECV */ 
          local_match = 1;
 800cbfa:	231b      	movs	r3, #27
 800cbfc:	18fb      	adds	r3, r7, r3
 800cbfe:	2201      	movs	r2, #1
 800cc00:	701a      	strb	r2, [r3, #0]
          if ((uncon_pcb == NULL) && 
 800cc02:	69fb      	ldr	r3, [r7, #28]
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d107      	bne.n	800cc18 <udp_input+0x170>
              ((pcb->flags & UDP_FLAGS_CONNECTED) == 0)) {
 800cc08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc0a:	7c1b      	ldrb	r3, [r3, #16]
 800cc0c:	001a      	movs	r2, r3
 800cc0e:	2304      	movs	r3, #4
 800cc10:	4013      	ands	r3, r2
          if ((uncon_pcb == NULL) && 
 800cc12:	d101      	bne.n	800cc18 <udp_input+0x170>
            /* the first unconnected matching PCB */
            uncon_pcb = pcb;
 800cc14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc16:	61fb      	str	r3, [r7, #28]
          }
        }
      }
      /* compare PCB remote addr+port to UDP source addr+port */
      if ((local_match != 0) &&
 800cc18:	231b      	movs	r3, #27
 800cc1a:	18fb      	adds	r3, r7, r3
 800cc1c:	781b      	ldrb	r3, [r3, #0]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d02c      	beq.n	800cc7c <udp_input+0x1d4>
          (pcb->remote_port == src) &&
 800cc22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc24:	8a9b      	ldrh	r3, [r3, #20]
      if ((local_match != 0) &&
 800cc26:	220c      	movs	r2, #12
 800cc28:	18ba      	adds	r2, r7, r2
 800cc2a:	8812      	ldrh	r2, [r2, #0]
 800cc2c:	429a      	cmp	r2, r3
 800cc2e:	d125      	bne.n	800cc7c <udp_input+0x1d4>
          (ip_addr_isany(&pcb->remote_ip) ||
 800cc30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc32:	3304      	adds	r3, #4
          (pcb->remote_port == src) &&
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d009      	beq.n	800cc4c <udp_input+0x1a4>
          (ip_addr_isany(&pcb->remote_ip) ||
 800cc38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc3a:	685b      	ldr	r3, [r3, #4]
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d005      	beq.n	800cc4c <udp_input+0x1a4>
           ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src))) {
 800cc40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc42:	685a      	ldr	r2, [r3, #4]
 800cc44:	4b62      	ldr	r3, [pc, #392]	; (800cdd0 <udp_input+0x328>)
 800cc46:	681b      	ldr	r3, [r3, #0]
          (ip_addr_isany(&pcb->remote_ip) ||
 800cc48:	429a      	cmp	r2, r3
 800cc4a:	d117      	bne.n	800cc7c <udp_input+0x1d4>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800cc4c:	6a3b      	ldr	r3, [r7, #32]
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d00b      	beq.n	800cc6a <udp_input+0x1c2>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800cc52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc54:	68da      	ldr	r2, [r3, #12]
 800cc56:	6a3b      	ldr	r3, [r7, #32]
 800cc58:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800cc5a:	4b5c      	ldr	r3, [pc, #368]	; (800cdcc <udp_input+0x324>)
 800cc5c:	681a      	ldr	r2, [r3, #0]
 800cc5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc60:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800cc62:	4b5a      	ldr	r3, [pc, #360]	; (800cdcc <udp_input+0x324>)
 800cc64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc66:	601a      	str	r2, [r3, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800cc68:	e011      	b.n	800cc8e <udp_input+0x1e6>
          UDP_STATS_INC(udp.cachehit);
 800cc6a:	4b56      	ldr	r3, [pc, #344]	; (800cdc4 <udp_input+0x31c>)
 800cc6c:	228e      	movs	r2, #142	; 0x8e
 800cc6e:	5a9b      	ldrh	r3, [r3, r2]
 800cc70:	3301      	adds	r3, #1
 800cc72:	b299      	uxth	r1, r3
 800cc74:	4b53      	ldr	r3, [pc, #332]	; (800cdc4 <udp_input+0x31c>)
 800cc76:	228e      	movs	r2, #142	; 0x8e
 800cc78:	5299      	strh	r1, [r3, r2]
        break;
 800cc7a:	e008      	b.n	800cc8e <udp_input+0x1e6>
      }
      prev = pcb;
 800cc7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc7e:	623b      	str	r3, [r7, #32]
    for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800cc80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc82:	68db      	ldr	r3, [r3, #12]
 800cc84:	627b      	str	r3, [r7, #36]	; 0x24
 800cc86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d000      	beq.n	800cc8e <udp_input+0x1e6>
 800cc8c:	e783      	b.n	800cb96 <udp_input+0xee>
    }
    /* no fully matching pcb found? then look for an unconnected pcb */
    if (pcb == NULL) {
 800cc8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d101      	bne.n	800cc98 <udp_input+0x1f0>
      pcb = uncon_pcb;
 800cc94:	69fb      	ldr	r3, [r7, #28]
 800cc96:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL || ip_addr_cmp(&inp->ip_addr, &current_iphdr_dest)) {
 800cc98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d106      	bne.n	800ccac <udp_input+0x204>
 800cc9e:	683b      	ldr	r3, [r7, #0]
 800cca0:	685a      	ldr	r2, [r3, #4]
 800cca2:	4b49      	ldr	r3, [pc, #292]	; (800cdc8 <udp_input+0x320>)
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	429a      	cmp	r2, r3
 800cca8:	d000      	beq.n	800ccac <udp_input+0x204>
 800ccaa:	e093      	b.n	800cdd4 <udp_input+0x32c>
#endif /* CHECKSUM_CHECK_UDP */
    } else
#endif /* LWIP_UDPLITE */
    {
#if CHECKSUM_CHECK_UDP
      if (udphdr->chksum != 0) {
 800ccac:	693b      	ldr	r3, [r7, #16]
 800ccae:	799a      	ldrb	r2, [r3, #6]
 800ccb0:	79db      	ldrb	r3, [r3, #7]
 800ccb2:	021b      	lsls	r3, r3, #8
 800ccb4:	4313      	orrs	r3, r2
 800ccb6:	b29b      	uxth	r3, r3
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d01f      	beq.n	800ccfc <udp_input+0x254>
        if (inet_chksum_pseudo(p, ip_current_src_addr(), ip_current_dest_addr(),
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	891b      	ldrh	r3, [r3, #8]
 800ccc0:	4a41      	ldr	r2, [pc, #260]	; (800cdc8 <udp_input+0x320>)
 800ccc2:	4943      	ldr	r1, [pc, #268]	; (800cdd0 <udp_input+0x328>)
 800ccc4:	6878      	ldr	r0, [r7, #4]
 800ccc6:	9300      	str	r3, [sp, #0]
 800ccc8:	2311      	movs	r3, #17
 800ccca:	f000 fdb2 	bl	800d832 <inet_chksum_pseudo>
 800ccce:	1e03      	subs	r3, r0, #0
 800ccd0:	d014      	beq.n	800ccfc <udp_input+0x254>
                               IP_PROTO_UDP, p->tot_len) != 0) {
          LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                      ("udp_input: UDP datagram discarded due to failing checksum\n"));
          UDP_STATS_INC(udp.chkerr);
 800ccd2:	4b3c      	ldr	r3, [pc, #240]	; (800cdc4 <udp_input+0x31c>)
 800ccd4:	2280      	movs	r2, #128	; 0x80
 800ccd6:	5a9b      	ldrh	r3, [r3, r2]
 800ccd8:	3301      	adds	r3, #1
 800ccda:	b299      	uxth	r1, r3
 800ccdc:	4b39      	ldr	r3, [pc, #228]	; (800cdc4 <udp_input+0x31c>)
 800ccde:	2280      	movs	r2, #128	; 0x80
 800cce0:	5299      	strh	r1, [r3, r2]
          UDP_STATS_INC(udp.drop);
 800cce2:	4b38      	ldr	r3, [pc, #224]	; (800cdc4 <udp_input+0x31c>)
 800cce4:	227e      	movs	r2, #126	; 0x7e
 800cce6:	5a9b      	ldrh	r3, [r3, r2]
 800cce8:	3301      	adds	r3, #1
 800ccea:	b299      	uxth	r1, r3
 800ccec:	4b35      	ldr	r3, [pc, #212]	; (800cdc4 <udp_input+0x31c>)
 800ccee:	227e      	movs	r2, #126	; 0x7e
 800ccf0:	5299      	strh	r1, [r3, r2]
          snmp_inc_udpinerrors();
          pbuf_free(p);
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	0018      	movs	r0, r3
 800ccf6:	f7fa f84d 	bl	8006d94 <pbuf_free>
          goto end;
 800ccfa:	e06f      	b.n	800cddc <udp_input+0x334>
        }
      }
#endif /* CHECKSUM_CHECK_UDP */
    }
    if(pbuf_header(p, -UDP_HLEN)) {
 800ccfc:	2308      	movs	r3, #8
 800ccfe:	425a      	negs	r2, r3
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	0011      	movs	r1, r2
 800cd04:	0018      	movs	r0, r3
 800cd06:	f7f9 ffbe 	bl	8006c86 <pbuf_header>
 800cd0a:	1e03      	subs	r3, r0, #0
 800cd0c:	d00c      	beq.n	800cd28 <udp_input+0x280>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
      UDP_STATS_INC(udp.drop);
 800cd0e:	4b2d      	ldr	r3, [pc, #180]	; (800cdc4 <udp_input+0x31c>)
 800cd10:	227e      	movs	r2, #126	; 0x7e
 800cd12:	5a9b      	ldrh	r3, [r3, r2]
 800cd14:	3301      	adds	r3, #1
 800cd16:	b299      	uxth	r1, r3
 800cd18:	4b2a      	ldr	r3, [pc, #168]	; (800cdc4 <udp_input+0x31c>)
 800cd1a:	227e      	movs	r2, #126	; 0x7e
 800cd1c:	5299      	strh	r1, [r3, r2]
      snmp_inc_udpinerrors();
      pbuf_free(p);
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	0018      	movs	r0, r3
 800cd22:	f7fa f837 	bl	8006d94 <pbuf_free>
      goto end;
 800cd26:	e059      	b.n	800cddc <udp_input+0x334>
    }
    if (pcb != NULL) {
 800cd28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d016      	beq.n	800cd5c <udp_input+0x2b4>
          pbuf_header(p, -(s16_t)((IPH_HL(iphdr) * 4) + UDP_HLEN));
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800cd2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd30:	699b      	ldr	r3, [r3, #24]
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d00d      	beq.n	800cd52 <udp_input+0x2aa>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800cd36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd38:	699c      	ldr	r4, [r3, #24]
 800cd3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd3c:	69d8      	ldr	r0, [r3, #28]
 800cd3e:	4d24      	ldr	r5, [pc, #144]	; (800cdd0 <udp_input+0x328>)
 800cd40:	687a      	ldr	r2, [r7, #4]
 800cd42:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cd44:	230c      	movs	r3, #12
 800cd46:	18fb      	adds	r3, r7, r3
 800cd48:	881b      	ldrh	r3, [r3, #0]
 800cd4a:	9300      	str	r3, [sp, #0]
 800cd4c:	002b      	movs	r3, r5
 800cd4e:	47a0      	blx	r4
    if (pcb != NULL) {
 800cd50:	e044      	b.n	800cddc <udp_input+0x334>
      } else {
        /* no recv function registered? then we have to free the pbuf! */
        pbuf_free(p);
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	0018      	movs	r0, r3
 800cd56:	f7fa f81d 	bl	8006d94 <pbuf_free>
        goto end;
 800cd5a:	e03f      	b.n	800cddc <udp_input+0x334>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_input: not for us.\n"));

#if LWIP_ICMP
      /* No match was found, send ICMP destination port unreachable unless
         destination address was broadcast/multicast. */
      if (!broadcast &&
 800cd5c:	230f      	movs	r3, #15
 800cd5e:	18fb      	adds	r3, r7, r3
 800cd60:	781b      	ldrb	r3, [r3, #0]
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d119      	bne.n	800cd9a <udp_input+0x2f2>
          !ip_addr_ismulticast(&current_iphdr_dest)) {
 800cd66:	4b18      	ldr	r3, [pc, #96]	; (800cdc8 <udp_input+0x320>)
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	22f0      	movs	r2, #240	; 0xf0
 800cd6c:	4013      	ands	r3, r2
      if (!broadcast &&
 800cd6e:	2be0      	cmp	r3, #224	; 0xe0
 800cd70:	d013      	beq.n	800cd9a <udp_input+0x2f2>
        /* move payload pointer back to ip header */
        pbuf_header(p, (IPH_HL(iphdr) * 4) + UDP_HLEN);
 800cd72:	697b      	ldr	r3, [r7, #20]
 800cd74:	781b      	ldrb	r3, [r3, #0]
 800cd76:	001a      	movs	r2, r3
 800cd78:	230f      	movs	r3, #15
 800cd7a:	4013      	ands	r3, r2
 800cd7c:	3302      	adds	r3, #2
 800cd7e:	b29b      	uxth	r3, r3
 800cd80:	009b      	lsls	r3, r3, #2
 800cd82:	b29b      	uxth	r3, r3
 800cd84:	b21a      	sxth	r2, r3
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	0011      	movs	r1, r2
 800cd8a:	0018      	movs	r0, r3
 800cd8c:	f7f9 ff7b 	bl	8006c86 <pbuf_header>
        LWIP_ASSERT("p->payload == iphdr", (p->payload == iphdr));
        icmp_dest_unreach(p, ICMP_DUR_PORT);
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	2103      	movs	r1, #3
 800cd94:	0018      	movs	r0, r3
 800cd96:	f000 fc35 	bl	800d604 <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      UDP_STATS_INC(udp.proterr);
 800cd9a:	4b0a      	ldr	r3, [pc, #40]	; (800cdc4 <udp_input+0x31c>)
 800cd9c:	2288      	movs	r2, #136	; 0x88
 800cd9e:	5a9b      	ldrh	r3, [r3, r2]
 800cda0:	3301      	adds	r3, #1
 800cda2:	b299      	uxth	r1, r3
 800cda4:	4b07      	ldr	r3, [pc, #28]	; (800cdc4 <udp_input+0x31c>)
 800cda6:	2288      	movs	r2, #136	; 0x88
 800cda8:	5299      	strh	r1, [r3, r2]
      UDP_STATS_INC(udp.drop);
 800cdaa:	4b06      	ldr	r3, [pc, #24]	; (800cdc4 <udp_input+0x31c>)
 800cdac:	227e      	movs	r2, #126	; 0x7e
 800cdae:	5a9b      	ldrh	r3, [r3, r2]
 800cdb0:	3301      	adds	r3, #1
 800cdb2:	b299      	uxth	r1, r3
 800cdb4:	4b03      	ldr	r3, [pc, #12]	; (800cdc4 <udp_input+0x31c>)
 800cdb6:	227e      	movs	r2, #126	; 0x7e
 800cdb8:	5299      	strh	r1, [r3, r2]
      snmp_inc_udpnoports();
      pbuf_free(p);
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	0018      	movs	r0, r3
 800cdbe:	f7f9 ffe9 	bl	8006d94 <pbuf_free>
    if (pcb != NULL) {
 800cdc2:	e00b      	b.n	800cddc <udp_input+0x334>
 800cdc4:	2000340c 	.word	0x2000340c
 800cdc8:	20003550 	.word	0x20003550
 800cdcc:	20003544 	.word	0x20003544
 800cdd0:	20003548 	.word	0x20003548
    }
  } else {
    pbuf_free(p);
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	0018      	movs	r0, r3
 800cdd8:	f7f9 ffdc 	bl	8006d94 <pbuf_free>
  }
end:
  PERF_STOP("udp_input");
}
 800cddc:	46c0      	nop			; (mov r8, r8)
 800cdde:	46bd      	mov	sp, r7
 800cde0:	b00a      	add	sp, #40	; 0x28
 800cde2:	bdb0      	pop	{r4, r5, r7, pc}

0800cde4 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
  ip_addr_t *dst_ip, u16_t dst_port)
{
 800cde4:	b590      	push	{r4, r7, lr}
 800cde6:	b089      	sub	sp, #36	; 0x24
 800cde8:	af02      	add	r7, sp, #8
 800cdea:	60f8      	str	r0, [r7, #12]
 800cdec:	60b9      	str	r1, [r7, #8]
 800cdee:	607a      	str	r2, [r7, #4]
 800cdf0:	001a      	movs	r2, r3
 800cdf2:	1cbb      	adds	r3, r7, #2
 800cdf4:	801a      	strh	r2, [r3, #0]

  /* find the outgoing network interface for this packet */
#if LWIP_IGMP
  netif = ip_route((ip_addr_ismulticast(dst_ip))?(&(pcb->multicast_ip)):(dst_ip));
#else
  netif = ip_route(dst_ip);
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	0018      	movs	r0, r3
 800cdfa:	f000 fe21 	bl	800da40 <ip_route>
 800cdfe:	0003      	movs	r3, r0
 800ce00:	617b      	str	r3, [r7, #20]
#endif /* LWIP_IGMP */

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 800ce02:	697b      	ldr	r3, [r7, #20]
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d10a      	bne.n	800ce1e <udp_sendto+0x3a>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dst_ip), ip4_addr2_16(dst_ip), ip4_addr3_16(dst_ip), ip4_addr4_16(dst_ip)));
    UDP_STATS_INC(udp.rterr);
 800ce08:	4b0c      	ldr	r3, [pc, #48]	; (800ce3c <udp_sendto+0x58>)
 800ce0a:	2286      	movs	r2, #134	; 0x86
 800ce0c:	5a9b      	ldrh	r3, [r3, r2]
 800ce0e:	3301      	adds	r3, #1
 800ce10:	b299      	uxth	r1, r3
 800ce12:	4b0a      	ldr	r3, [pc, #40]	; (800ce3c <udp_sendto+0x58>)
 800ce14:	2286      	movs	r2, #134	; 0x86
 800ce16:	5299      	strh	r1, [r3, r2]
    return ERR_RTE;
 800ce18:	2304      	movs	r3, #4
 800ce1a:	425b      	negs	r3, r3
 800ce1c:	e00a      	b.n	800ce34 <udp_sendto+0x50>
  }
#if LWIP_CHECKSUM_ON_COPY
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800ce1e:	1cbb      	adds	r3, r7, #2
 800ce20:	881c      	ldrh	r4, [r3, #0]
 800ce22:	687a      	ldr	r2, [r7, #4]
 800ce24:	68b9      	ldr	r1, [r7, #8]
 800ce26:	68f8      	ldr	r0, [r7, #12]
 800ce28:	697b      	ldr	r3, [r7, #20]
 800ce2a:	9300      	str	r3, [sp, #0]
 800ce2c:	0023      	movs	r3, r4
 800ce2e:	f000 f807 	bl	800ce40 <udp_sendto_if>
 800ce32:	0003      	movs	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY */
}
 800ce34:	0018      	movs	r0, r3
 800ce36:	46bd      	mov	sp, r7
 800ce38:	b007      	add	sp, #28
 800ce3a:	bd90      	pop	{r4, r7, pc}
 800ce3c:	2000340c 	.word	0x2000340c

0800ce40 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
  ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800ce40:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce42:	b08d      	sub	sp, #52	; 0x34
 800ce44:	af04      	add	r7, sp, #16
 800ce46:	60f8      	str	r0, [r7, #12]
 800ce48:	60b9      	str	r1, [r7, #8]
 800ce4a:	607a      	str	r2, [r7, #4]
 800ce4c:	001a      	movs	r2, r3
 800ce4e:	1cbb      	adds	r3, r7, #2
 800ce50:	801a      	strh	r2, [r3, #0]
    return ERR_VAL;
  }
#endif /* IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	8a5b      	ldrh	r3, [r3, #18]
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d114      	bne.n	800ce84 <udp_sendto_if+0x44>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800ce5a:	68f9      	ldr	r1, [r7, #12]
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	8a5a      	ldrh	r2, [r3, #18]
 800ce60:	2515      	movs	r5, #21
 800ce62:	197c      	adds	r4, r7, r5
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	0018      	movs	r0, r3
 800ce68:	f000 f90a 	bl	800d080 <udp_bind>
 800ce6c:	0003      	movs	r3, r0
 800ce6e:	7023      	strb	r3, [r4, #0]
    if (err != ERR_OK) {
 800ce70:	197b      	adds	r3, r7, r5
 800ce72:	781b      	ldrb	r3, [r3, #0]
 800ce74:	b25b      	sxtb	r3, r3
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d004      	beq.n	800ce84 <udp_sendto_if+0x44>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800ce7a:	2315      	movs	r3, #21
 800ce7c:	18fb      	adds	r3, r7, r3
 800ce7e:	781b      	ldrb	r3, [r3, #0]
 800ce80:	b25b      	sxtb	r3, r3
 800ce82:	e0f6      	b.n	800d072 <udp_sendto_if+0x232>
    }
  }

  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_header(p, UDP_HLEN)) {
 800ce84:	68bb      	ldr	r3, [r7, #8]
 800ce86:	2108      	movs	r1, #8
 800ce88:	0018      	movs	r0, r3
 800ce8a:	f7f9 fefc 	bl	8006c86 <pbuf_header>
 800ce8e:	1e03      	subs	r3, r0, #0
 800ce90:	d017      	beq.n	800cec2 <udp_sendto_if+0x82>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800ce92:	2200      	movs	r2, #0
 800ce94:	2108      	movs	r1, #8
 800ce96:	2001      	movs	r0, #1
 800ce98:	f7f9 fcf0 	bl	800687c <pbuf_alloc>
 800ce9c:	0003      	movs	r3, r0
 800ce9e:	61bb      	str	r3, [r7, #24]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800cea0:	69bb      	ldr	r3, [r7, #24]
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d102      	bne.n	800ceac <udp_sendto_if+0x6c>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800cea6:	2301      	movs	r3, #1
 800cea8:	425b      	negs	r3, r3
 800ceaa:	e0e2      	b.n	800d072 <udp_sendto_if+0x232>
    }
    if (p->tot_len != 0) {
 800ceac:	68bb      	ldr	r3, [r7, #8]
 800ceae:	891b      	ldrh	r3, [r3, #8]
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d008      	beq.n	800cec6 <udp_sendto_if+0x86>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800ceb4:	68ba      	ldr	r2, [r7, #8]
 800ceb6:	69bb      	ldr	r3, [r7, #24]
 800ceb8:	0011      	movs	r1, r2
 800ceba:	0018      	movs	r0, r3
 800cebc:	f7fa f836 	bl	8006f2c <pbuf_chain>
 800cec0:	e001      	b.n	800cec6 <udp_sendto_if+0x86>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800cec2:	68bb      	ldr	r3, [r7, #8]
 800cec4:	61bb      	str	r3, [r7, #24]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800cec6:	69bb      	ldr	r3, [r7, #24]
 800cec8:	685b      	ldr	r3, [r3, #4]
 800ceca:	613b      	str	r3, [r7, #16]
  udphdr->src = htons(pcb->local_port);
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	8a5b      	ldrh	r3, [r3, #18]
 800ced0:	0018      	movs	r0, r3
 800ced2:	f7f8 ff17 	bl	8005d04 <lwip_htons>
 800ced6:	0003      	movs	r3, r0
 800ced8:	001a      	movs	r2, r3
 800ceda:	693b      	ldr	r3, [r7, #16]
 800cedc:	21ff      	movs	r1, #255	; 0xff
 800cede:	4011      	ands	r1, r2
 800cee0:	000c      	movs	r4, r1
 800cee2:	7819      	ldrb	r1, [r3, #0]
 800cee4:	2000      	movs	r0, #0
 800cee6:	4001      	ands	r1, r0
 800cee8:	1c08      	adds	r0, r1, #0
 800ceea:	1c21      	adds	r1, r4, #0
 800ceec:	4301      	orrs	r1, r0
 800ceee:	7019      	strb	r1, [r3, #0]
 800cef0:	0a12      	lsrs	r2, r2, #8
 800cef2:	b290      	uxth	r0, r2
 800cef4:	785a      	ldrb	r2, [r3, #1]
 800cef6:	2100      	movs	r1, #0
 800cef8:	400a      	ands	r2, r1
 800cefa:	1c11      	adds	r1, r2, #0
 800cefc:	1c02      	adds	r2, r0, #0
 800cefe:	430a      	orrs	r2, r1
 800cf00:	705a      	strb	r2, [r3, #1]
  udphdr->dest = htons(dst_port);
 800cf02:	1cbb      	adds	r3, r7, #2
 800cf04:	881b      	ldrh	r3, [r3, #0]
 800cf06:	0018      	movs	r0, r3
 800cf08:	f7f8 fefc 	bl	8005d04 <lwip_htons>
 800cf0c:	0003      	movs	r3, r0
 800cf0e:	001a      	movs	r2, r3
 800cf10:	693b      	ldr	r3, [r7, #16]
 800cf12:	21ff      	movs	r1, #255	; 0xff
 800cf14:	4011      	ands	r1, r2
 800cf16:	000c      	movs	r4, r1
 800cf18:	7899      	ldrb	r1, [r3, #2]
 800cf1a:	2000      	movs	r0, #0
 800cf1c:	4001      	ands	r1, r0
 800cf1e:	1c08      	adds	r0, r1, #0
 800cf20:	1c21      	adds	r1, r4, #0
 800cf22:	4301      	orrs	r1, r0
 800cf24:	7099      	strb	r1, [r3, #2]
 800cf26:	0a12      	lsrs	r2, r2, #8
 800cf28:	b290      	uxth	r0, r2
 800cf2a:	78da      	ldrb	r2, [r3, #3]
 800cf2c:	2100      	movs	r1, #0
 800cf2e:	400a      	ands	r2, r1
 800cf30:	1c11      	adds	r1, r2, #0
 800cf32:	1c02      	adds	r2, r0, #0
 800cf34:	430a      	orrs	r2, r1
 800cf36:	70da      	strb	r2, [r3, #3]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000; 
 800cf38:	693b      	ldr	r3, [r7, #16]
 800cf3a:	799a      	ldrb	r2, [r3, #6]
 800cf3c:	2100      	movs	r1, #0
 800cf3e:	400a      	ands	r2, r1
 800cf40:	719a      	strb	r2, [r3, #6]
 800cf42:	79da      	ldrb	r2, [r3, #7]
 800cf44:	2100      	movs	r1, #0
 800cf46:	400a      	ands	r2, r1
 800cf48:	71da      	strb	r2, [r3, #7]
  }
#endif /* LWIP_IGMP */


  /* PCB local address is IP_ANY_ADDR? */
  if (ip_addr_isany(&pcb->local_ip)) {
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d003      	beq.n	800cf58 <udp_sendto_if+0x118>
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d103      	bne.n	800cf60 <udp_sendto_if+0x120>
    /* use outgoing network interface IP address as source address */
    src_ip = &(netif->ip_addr);
 800cf58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf5a:	3304      	adds	r3, #4
 800cf5c:	61fb      	str	r3, [r7, #28]
 800cf5e:	e014      	b.n	800cf8a <udp_sendto_if+0x14a>
  } else {
    /* check if UDP PCB local IP address is correct
     * this could be an old address if netif->ip_addr has changed */
    if (!ip_addr_cmp(&(pcb->local_ip), &(netif->ip_addr))) {
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	681a      	ldr	r2, [r3, #0]
 800cf64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf66:	685b      	ldr	r3, [r3, #4]
 800cf68:	429a      	cmp	r2, r3
 800cf6a:	d00c      	beq.n	800cf86 <udp_sendto_if+0x146>
      /* local_ip doesn't match, drop the packet */
      if (q != p) {
 800cf6c:	69ba      	ldr	r2, [r7, #24]
 800cf6e:	68bb      	ldr	r3, [r7, #8]
 800cf70:	429a      	cmp	r2, r3
 800cf72:	d005      	beq.n	800cf80 <udp_sendto_if+0x140>
        /* free the header pbuf */
        pbuf_free(q);
 800cf74:	69bb      	ldr	r3, [r7, #24]
 800cf76:	0018      	movs	r0, r3
 800cf78:	f7f9 ff0c 	bl	8006d94 <pbuf_free>
        q = NULL;
 800cf7c:	2300      	movs	r3, #0
 800cf7e:	61bb      	str	r3, [r7, #24]
        /* p is still referenced by the caller, and will live on */
      }
      return ERR_VAL;
 800cf80:	2306      	movs	r3, #6
 800cf82:	425b      	negs	r3, r3
 800cf84:	e075      	b.n	800d072 <udp_sendto_if+0x232>
    }
    /* use UDP PCB local IP address as source address */
    src_ip = &(pcb->local_ip);
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	61fb      	str	r3, [r7, #28]
    NETIF_SET_HWADDRHINT(netif, NULL);
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = htons(q->tot_len);
 800cf8a:	69bb      	ldr	r3, [r7, #24]
 800cf8c:	891b      	ldrh	r3, [r3, #8]
 800cf8e:	0018      	movs	r0, r3
 800cf90:	f7f8 feb8 	bl	8005d04 <lwip_htons>
 800cf94:	0003      	movs	r3, r0
 800cf96:	001a      	movs	r2, r3
 800cf98:	693b      	ldr	r3, [r7, #16]
 800cf9a:	21ff      	movs	r1, #255	; 0xff
 800cf9c:	4011      	ands	r1, r2
 800cf9e:	000c      	movs	r4, r1
 800cfa0:	7919      	ldrb	r1, [r3, #4]
 800cfa2:	2000      	movs	r0, #0
 800cfa4:	4001      	ands	r1, r0
 800cfa6:	1c08      	adds	r0, r1, #0
 800cfa8:	1c21      	adds	r1, r4, #0
 800cfaa:	4301      	orrs	r1, r0
 800cfac:	7119      	strb	r1, [r3, #4]
 800cfae:	0a12      	lsrs	r2, r2, #8
 800cfb0:	b290      	uxth	r0, r2
 800cfb2:	795a      	ldrb	r2, [r3, #5]
 800cfb4:	2100      	movs	r1, #0
 800cfb6:	400a      	ands	r2, r1
 800cfb8:	1c11      	adds	r1, r2, #0
 800cfba:	1c02      	adds	r2, r0, #0
 800cfbc:	430a      	orrs	r2, r1
 800cfbe:	715a      	strb	r2, [r3, #5]
    /* calculate checksum */
#if CHECKSUM_GEN_UDP
    if ((pcb->flags & UDP_FLAGS_NOCHKSUM) == 0) {
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	7c1b      	ldrb	r3, [r3, #16]
 800cfc4:	001a      	movs	r2, r3
 800cfc6:	2301      	movs	r3, #1
 800cfc8:	4013      	ands	r3, r2
 800cfca:	d128      	bne.n	800d01e <udp_sendto_if+0x1de>
        acc = udpchksum + (u16_t)~(chksum);
        udpchksum = FOLD_U32T(acc);
      } else
#endif /* LWIP_CHECKSUM_ON_COPY */
      {
        udpchksum = inet_chksum_pseudo(q, src_ip, dst_ip, IP_PROTO_UDP, q->tot_len);
 800cfcc:	69bb      	ldr	r3, [r7, #24]
 800cfce:	891b      	ldrh	r3, [r3, #8]
 800cfd0:	2516      	movs	r5, #22
 800cfd2:	197c      	adds	r4, r7, r5
 800cfd4:	687a      	ldr	r2, [r7, #4]
 800cfd6:	69f9      	ldr	r1, [r7, #28]
 800cfd8:	69b8      	ldr	r0, [r7, #24]
 800cfda:	9300      	str	r3, [sp, #0]
 800cfdc:	2311      	movs	r3, #17
 800cfde:	f000 fc28 	bl	800d832 <inet_chksum_pseudo>
 800cfe2:	0003      	movs	r3, r0
 800cfe4:	8023      	strh	r3, [r4, #0]
      }

      /* chksum zero must become 0xffff, as zero means 'no checksum' */
      if (udpchksum == 0x0000) {
 800cfe6:	197b      	adds	r3, r7, r5
 800cfe8:	881b      	ldrh	r3, [r3, #0]
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d104      	bne.n	800cff8 <udp_sendto_if+0x1b8>
        udpchksum = 0xffff;
 800cfee:	2316      	movs	r3, #22
 800cff0:	18fb      	adds	r3, r7, r3
 800cff2:	2201      	movs	r2, #1
 800cff4:	4252      	negs	r2, r2
 800cff6:	801a      	strh	r2, [r3, #0]
      }
      udphdr->chksum = udpchksum;
 800cff8:	693b      	ldr	r3, [r7, #16]
 800cffa:	2216      	movs	r2, #22
 800cffc:	18ba      	adds	r2, r7, r2
 800cffe:	7814      	ldrb	r4, [r2, #0]
 800d000:	7999      	ldrb	r1, [r3, #6]
 800d002:	2000      	movs	r0, #0
 800d004:	4001      	ands	r1, r0
 800d006:	1c08      	adds	r0, r1, #0
 800d008:	1c21      	adds	r1, r4, #0
 800d00a:	4301      	orrs	r1, r0
 800d00c:	7199      	strb	r1, [r3, #6]
 800d00e:	7850      	ldrb	r0, [r2, #1]
 800d010:	79da      	ldrb	r2, [r3, #7]
 800d012:	2100      	movs	r1, #0
 800d014:	400a      	ands	r2, r1
 800d016:	1c11      	adds	r1, r2, #0
 800d018:	1c02      	adds	r2, r0, #0
 800d01a:	430a      	orrs	r2, r1
 800d01c:	71da      	strb	r2, [r3, #7]
#endif /* CHECKSUM_GEN_UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,IP_PROTO_UDP,)\n"));
    /* output to IP */
    NETIF_SET_HWADDRHINT(netif, &pcb->addr_hint);
    err = ip_output_if(q, src_ip, dst_ip, pcb->ttl, pcb->tos, IP_PROTO_UDP, netif);
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	7a9e      	ldrb	r6, [r3, #10]
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	7a5b      	ldrb	r3, [r3, #9]
 800d026:	2215      	movs	r2, #21
 800d028:	18bc      	adds	r4, r7, r2
 800d02a:	687d      	ldr	r5, [r7, #4]
 800d02c:	69f9      	ldr	r1, [r7, #28]
 800d02e:	69b8      	ldr	r0, [r7, #24]
 800d030:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d032:	9202      	str	r2, [sp, #8]
 800d034:	2211      	movs	r2, #17
 800d036:	9201      	str	r2, [sp, #4]
 800d038:	9300      	str	r3, [sp, #0]
 800d03a:	0033      	movs	r3, r6
 800d03c:	002a      	movs	r2, r5
 800d03e:	f000 ff0d 	bl	800de5c <ip_output_if>
 800d042:	0003      	movs	r3, r0
 800d044:	7023      	strb	r3, [r4, #0]
  }
  /* TODO: must this be increased even if error occured? */
  snmp_inc_udpoutdatagrams();

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800d046:	69ba      	ldr	r2, [r7, #24]
 800d048:	68bb      	ldr	r3, [r7, #8]
 800d04a:	429a      	cmp	r2, r3
 800d04c:	d005      	beq.n	800d05a <udp_sendto_if+0x21a>
    /* free the header pbuf */
    pbuf_free(q);
 800d04e:	69bb      	ldr	r3, [r7, #24]
 800d050:	0018      	movs	r0, r3
 800d052:	f7f9 fe9f 	bl	8006d94 <pbuf_free>
    q = NULL;
 800d056:	2300      	movs	r3, #0
 800d058:	61bb      	str	r3, [r7, #24]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
 800d05a:	4b08      	ldr	r3, [pc, #32]	; (800d07c <udp_sendto_if+0x23c>)
 800d05c:	2278      	movs	r2, #120	; 0x78
 800d05e:	5a9b      	ldrh	r3, [r3, r2]
 800d060:	3301      	adds	r3, #1
 800d062:	b299      	uxth	r1, r3
 800d064:	4b05      	ldr	r3, [pc, #20]	; (800d07c <udp_sendto_if+0x23c>)
 800d066:	2278      	movs	r2, #120	; 0x78
 800d068:	5299      	strh	r1, [r3, r2]
  return err;
 800d06a:	2315      	movs	r3, #21
 800d06c:	18fb      	adds	r3, r7, r3
 800d06e:	781b      	ldrb	r3, [r3, #0]
 800d070:	b25b      	sxtb	r3, r3
}
 800d072:	0018      	movs	r0, r3
 800d074:	46bd      	mov	sp, r7
 800d076:	b009      	add	sp, #36	; 0x24
 800d078:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d07a:	46c0      	nop			; (mov r8, r8)
 800d07c:	2000340c 	.word	0x2000340c

0800d080 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, ip_addr_t *ipaddr, u16_t port)
{
 800d080:	b590      	push	{r4, r7, lr}
 800d082:	b087      	sub	sp, #28
 800d084:	af00      	add	r7, sp, #0
 800d086:	60f8      	str	r0, [r7, #12]
 800d088:	60b9      	str	r1, [r7, #8]
 800d08a:	1dbb      	adds	r3, r7, #6
 800d08c:	801a      	strh	r2, [r3, #0]

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800d08e:	2313      	movs	r3, #19
 800d090:	18fb      	adds	r3, r7, r3
 800d092:	2200      	movs	r2, #0
 800d094:	701a      	strb	r2, [r3, #0]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d096:	4b2f      	ldr	r3, [pc, #188]	; (800d154 <udp_bind+0xd4>)
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	617b      	str	r3, [r7, #20]
 800d09c:	e028      	b.n	800d0f0 <udp_bind+0x70>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800d09e:	68fa      	ldr	r2, [r7, #12]
 800d0a0:	697b      	ldr	r3, [r7, #20]
 800d0a2:	429a      	cmp	r2, r3
 800d0a4:	d104      	bne.n	800d0b0 <udp_bind+0x30>
      /* pcb may occur at most once in active list */
      LWIP_ASSERT("rebind == 0", rebind == 0);
      /* pcb already in list, just rebind */
      rebind = 1;
 800d0a6:	2313      	movs	r3, #19
 800d0a8:	18fb      	adds	r3, r7, r3
 800d0aa:	2201      	movs	r2, #1
 800d0ac:	701a      	strb	r2, [r3, #0]
 800d0ae:	e01c      	b.n	800d0ea <udp_bind+0x6a>
             !ip_get_option(ipcb, SOF_REUSEADDR)) {
#else /* SO_REUSE */
    /* port matches that of PCB in list and REUSEADDR not set -> reject */
    else {
#endif /* SO_REUSE */
      if ((ipcb->local_port == port) &&
 800d0b0:	697b      	ldr	r3, [r7, #20]
 800d0b2:	8a5b      	ldrh	r3, [r3, #18]
 800d0b4:	1dba      	adds	r2, r7, #6
 800d0b6:	8812      	ldrh	r2, [r2, #0]
 800d0b8:	429a      	cmp	r2, r3
 800d0ba:	d116      	bne.n	800d0ea <udp_bind+0x6a>
          /* IP address matches, or one is IP_ADDR_ANY? */
          (ip_addr_isany(&(ipcb->local_ip)) ||
 800d0bc:	697b      	ldr	r3, [r7, #20]
      if ((ipcb->local_port == port) &&
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d010      	beq.n	800d0e4 <udp_bind+0x64>
          (ip_addr_isany(&(ipcb->local_ip)) ||
 800d0c2:	697b      	ldr	r3, [r7, #20]
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d00c      	beq.n	800d0e4 <udp_bind+0x64>
 800d0ca:	68bb      	ldr	r3, [r7, #8]
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d009      	beq.n	800d0e4 <udp_bind+0x64>
           ip_addr_isany(ipaddr) ||
 800d0d0:	68bb      	ldr	r3, [r7, #8]
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d005      	beq.n	800d0e4 <udp_bind+0x64>
           ip_addr_cmp(&(ipcb->local_ip), ipaddr))) {
 800d0d8:	697b      	ldr	r3, [r7, #20]
 800d0da:	681a      	ldr	r2, [r3, #0]
 800d0dc:	68bb      	ldr	r3, [r7, #8]
 800d0de:	681b      	ldr	r3, [r3, #0]
           ip_addr_isany(ipaddr) ||
 800d0e0:	429a      	cmp	r2, r3
 800d0e2:	d102      	bne.n	800d0ea <udp_bind+0x6a>
        /* other PCB already binds to this local IP and port */
        LWIP_DEBUGF(UDP_DEBUG,
                    ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
        return ERR_USE;
 800d0e4:	2308      	movs	r3, #8
 800d0e6:	425b      	negs	r3, r3
 800d0e8:	e02f      	b.n	800d14a <udp_bind+0xca>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d0ea:	697b      	ldr	r3, [r7, #20]
 800d0ec:	68db      	ldr	r3, [r3, #12]
 800d0ee:	617b      	str	r3, [r7, #20]
 800d0f0:	697b      	ldr	r3, [r7, #20]
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d1d3      	bne.n	800d09e <udp_bind+0x1e>
      }
    }
  }

  ip_addr_set(&pcb->local_ip, ipaddr);
 800d0f6:	68bb      	ldr	r3, [r7, #8]
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d002      	beq.n	800d102 <udp_bind+0x82>
 800d0fc:	68bb      	ldr	r3, [r7, #8]
 800d0fe:	681a      	ldr	r2, [r3, #0]
 800d100:	e000      	b.n	800d104 <udp_bind+0x84>
 800d102:	2200      	movs	r2, #0
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	601a      	str	r2, [r3, #0]

  /* no port specified? */
  if (port == 0) {
 800d108:	1dbb      	adds	r3, r7, #6
 800d10a:	881b      	ldrh	r3, [r3, #0]
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d10b      	bne.n	800d128 <udp_bind+0xa8>
    port = udp_new_port();
 800d110:	1dbc      	adds	r4, r7, #6
 800d112:	f7ff fc8b 	bl	800ca2c <udp_new_port>
 800d116:	0003      	movs	r3, r0
 800d118:	8023      	strh	r3, [r4, #0]
    if (port == 0) {
 800d11a:	1dbb      	adds	r3, r7, #6
 800d11c:	881b      	ldrh	r3, [r3, #0]
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d102      	bne.n	800d128 <udp_bind+0xa8>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800d122:	2308      	movs	r3, #8
 800d124:	425b      	negs	r3, r3
 800d126:	e010      	b.n	800d14a <udp_bind+0xca>
    }
  }
  pcb->local_port = port;
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	1dba      	adds	r2, r7, #6
 800d12c:	8812      	ldrh	r2, [r2, #0]
 800d12e:	825a      	strh	r2, [r3, #18]
  snmp_insert_udpidx_tree(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800d130:	2313      	movs	r3, #19
 800d132:	18fb      	adds	r3, r7, r3
 800d134:	781b      	ldrb	r3, [r3, #0]
 800d136:	2b00      	cmp	r3, #0
 800d138:	d106      	bne.n	800d148 <udp_bind+0xc8>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800d13a:	4b06      	ldr	r3, [pc, #24]	; (800d154 <udp_bind+0xd4>)
 800d13c:	681a      	ldr	r2, [r3, #0]
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800d142:	4b04      	ldr	r3, [pc, #16]	; (800d154 <udp_bind+0xd4>)
 800d144:	68fa      	ldr	r2, [r7, #12]
 800d146:	601a      	str	r2, [r3, #0]
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
              ("udp_bind: bound to %"U16_F".%"U16_F".%"U16_F".%"U16_F", port %"U16_F"\n",
               ip4_addr1_16(&pcb->local_ip), ip4_addr2_16(&pcb->local_ip),
               ip4_addr3_16(&pcb->local_ip), ip4_addr4_16(&pcb->local_ip),
               pcb->local_port));
  return ERR_OK;
 800d148:	2300      	movs	r3, #0
}
 800d14a:	0018      	movs	r0, r3
 800d14c:	46bd      	mov	sp, r7
 800d14e:	b007      	add	sp, #28
 800d150:	bd90      	pop	{r4, r7, pc}
 800d152:	46c0      	nop			; (mov r8, r8)
 800d154:	20003544 	.word	0x20003544

0800d158 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800d158:	b580      	push	{r7, lr}
 800d15a:	b084      	sub	sp, #16
 800d15c:	af00      	add	r7, sp, #0
 800d15e:	60f8      	str	r0, [r7, #12]
 800d160:	60b9      	str	r1, [r7, #8]
 800d162:	607a      	str	r2, [r7, #4]
  /* remember recv() callback and user data */
  pcb->recv = recv;
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	68ba      	ldr	r2, [r7, #8]
 800d168:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	687a      	ldr	r2, [r7, #4]
 800d16e:	61da      	str	r2, [r3, #28]
}
 800d170:	46c0      	nop			; (mov r8, r8)
 800d172:	46bd      	mov	sp, r7
 800d174:	b004      	add	sp, #16
 800d176:	bd80      	pop	{r7, pc}

0800d178 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800d178:	b580      	push	{r7, lr}
 800d17a:	b084      	sub	sp, #16
 800d17c:	af00      	add	r7, sp, #0
 800d17e:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  snmp_delete_udpidx_tree(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800d180:	4b15      	ldr	r3, [pc, #84]	; (800d1d8 <udp_remove+0x60>)
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	687a      	ldr	r2, [r7, #4]
 800d186:	429a      	cmp	r2, r3
 800d188:	d105      	bne.n	800d196 <udp_remove+0x1e>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800d18a:	4b13      	ldr	r3, [pc, #76]	; (800d1d8 <udp_remove+0x60>)
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	68da      	ldr	r2, [r3, #12]
 800d190:	4b11      	ldr	r3, [pc, #68]	; (800d1d8 <udp_remove+0x60>)
 800d192:	601a      	str	r2, [r3, #0]
 800d194:	e016      	b.n	800d1c4 <udp_remove+0x4c>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800d196:	4b10      	ldr	r3, [pc, #64]	; (800d1d8 <udp_remove+0x60>)
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	60fb      	str	r3, [r7, #12]
 800d19c:	e00f      	b.n	800d1be <udp_remove+0x46>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	68db      	ldr	r3, [r3, #12]
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d008      	beq.n	800d1b8 <udp_remove+0x40>
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	68db      	ldr	r3, [r3, #12]
 800d1aa:	687a      	ldr	r2, [r7, #4]
 800d1ac:	429a      	cmp	r2, r3
 800d1ae:	d103      	bne.n	800d1b8 <udp_remove+0x40>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	68da      	ldr	r2, [r3, #12]
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	60da      	str	r2, [r3, #12]
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	68db      	ldr	r3, [r3, #12]
 800d1bc:	60fb      	str	r3, [r7, #12]
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d1ec      	bne.n	800d19e <udp_remove+0x26>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	0019      	movs	r1, r3
 800d1c8:	2001      	movs	r0, #1
 800d1ca:	f7f9 fa21 	bl	8006610 <memp_free>
}
 800d1ce:	46c0      	nop			; (mov r8, r8)
 800d1d0:	46bd      	mov	sp, r7
 800d1d2:	b004      	add	sp, #16
 800d1d4:	bd80      	pop	{r7, pc}
 800d1d6:	46c0      	nop			; (mov r8, r8)
 800d1d8:	20003544 	.word	0x20003544

0800d1dc <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800d1dc:	b580      	push	{r7, lr}
 800d1de:	b082      	sub	sp, #8
 800d1e0:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800d1e2:	2001      	movs	r0, #1
 800d1e4:	f7f9 f98e 	bl	8006504 <memp_malloc>
 800d1e8:	0003      	movs	r3, r0
 800d1ea:	607b      	str	r3, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d008      	beq.n	800d204 <udp_new+0x28>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	2220      	movs	r2, #32
 800d1f6:	2100      	movs	r1, #0
 800d1f8:	0018      	movs	r0, r3
 800d1fa:	f004 ff35 	bl	8012068 <memset>
    pcb->ttl = UDP_TTL;
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	22ff      	movs	r2, #255	; 0xff
 800d202:	729a      	strb	r2, [r3, #10]
  }
  return pcb;
 800d204:	687b      	ldr	r3, [r7, #4]
}
 800d206:	0018      	movs	r0, r3
 800d208:	46bd      	mov	sp, r7
 800d20a:	b002      	add	sp, #8
 800d20c:	bd80      	pop	{r7, pc}
	...

0800d210 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the ip header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800d210:	b590      	push	{r4, r7, lr}
 800d212:	b08d      	sub	sp, #52	; 0x34
 800d214:	af04      	add	r7, sp, #16
 800d216:	6078      	str	r0, [r7, #4]
 800d218:	6039      	str	r1, [r7, #0]
#endif /* LWIP_DEBUG */
  struct icmp_echo_hdr *iecho;
  struct ip_hdr *iphdr;
  s16_t hlen;

  ICMP_STATS_INC(icmp.recv);
 800d21a:	4be1      	ldr	r3, [pc, #900]	; (800d5a0 <icmp_input+0x390>)
 800d21c:	2262      	movs	r2, #98	; 0x62
 800d21e:	5a9b      	ldrh	r3, [r3, r2]
 800d220:	3301      	adds	r3, #1
 800d222:	b299      	uxth	r1, r3
 800d224:	4bde      	ldr	r3, [pc, #888]	; (800d5a0 <icmp_input+0x390>)
 800d226:	2262      	movs	r2, #98	; 0x62
 800d228:	5299      	strh	r1, [r3, r2]
  snmp_inc_icmpinmsgs();


  iphdr = (struct ip_hdr *)p->payload;
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	685b      	ldr	r3, [r3, #4]
 800d22e:	61fb      	str	r3, [r7, #28]
  hlen = IPH_HL(iphdr) * 4;
 800d230:	69fb      	ldr	r3, [r7, #28]
 800d232:	781b      	ldrb	r3, [r3, #0]
 800d234:	b29b      	uxth	r3, r3
 800d236:	220f      	movs	r2, #15
 800d238:	4013      	ands	r3, r2
 800d23a:	b29b      	uxth	r3, r3
 800d23c:	009b      	lsls	r3, r3, #2
 800d23e:	b29a      	uxth	r2, r3
 800d240:	2116      	movs	r1, #22
 800d242:	187b      	adds	r3, r7, r1
 800d244:	801a      	strh	r2, [r3, #0]
  if (pbuf_header(p, -hlen) || (p->tot_len < sizeof(u16_t)*2)) {
 800d246:	187b      	adds	r3, r7, r1
 800d248:	881b      	ldrh	r3, [r3, #0]
 800d24a:	425b      	negs	r3, r3
 800d24c:	b29b      	uxth	r3, r3
 800d24e:	b21a      	sxth	r2, r3
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	0011      	movs	r1, r2
 800d254:	0018      	movs	r0, r3
 800d256:	f7f9 fd16 	bl	8006c86 <pbuf_header>
 800d25a:	1e03      	subs	r3, r0, #0
 800d25c:	d000      	beq.n	800d260 <icmp_input+0x50>
 800d25e:	e19c      	b.n	800d59a <icmp_input+0x38a>
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	891b      	ldrh	r3, [r3, #8]
 800d264:	2b03      	cmp	r3, #3
 800d266:	d800      	bhi.n	800d26a <icmp_input+0x5a>
 800d268:	e197      	b.n	800d59a <icmp_input+0x38a>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	685a      	ldr	r2, [r3, #4]
 800d26e:	2115      	movs	r1, #21
 800d270:	187b      	adds	r3, r7, r1
 800d272:	7812      	ldrb	r2, [r2, #0]
 800d274:	701a      	strb	r2, [r3, #0]
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 800d276:	187b      	adds	r3, r7, r1
 800d278:	781b      	ldrb	r3, [r3, #0]
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d100      	bne.n	800d280 <icmp_input+0x70>
 800d27e:	e184      	b.n	800d58a <icmp_input+0x37a>
 800d280:	2b08      	cmp	r3, #8
 800d282:	d000      	beq.n	800d286 <icmp_input+0x76>
 800d284:	e170      	b.n	800d568 <icmp_input+0x358>
       (as obviously, an echo request has been sent, too). */
    break; 
  case ICMP_ECHO:
#if !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
    {
      int accepted = 1;
 800d286:	2301      	movs	r3, #1
 800d288:	61bb      	str	r3, [r7, #24]
#if !LWIP_MULTICAST_PING
      /* multicast destination address? */
      if (ip_addr_ismulticast(&current_iphdr_dest)) {
 800d28a:	4bc6      	ldr	r3, [pc, #792]	; (800d5a4 <icmp_input+0x394>)
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	22f0      	movs	r2, #240	; 0xf0
 800d290:	4013      	ands	r3, r2
 800d292:	2be0      	cmp	r3, #224	; 0xe0
 800d294:	d101      	bne.n	800d29a <icmp_input+0x8a>
        accepted = 0;
 800d296:	2300      	movs	r3, #0
 800d298:	61bb      	str	r3, [r7, #24]
      }
#endif /* LWIP_MULTICAST_PING */
#if !LWIP_BROADCAST_PING
      /* broadcast destination address? */
      if (ip_addr_isbroadcast(&current_iphdr_dest, inp)) {
 800d29a:	4bc2      	ldr	r3, [pc, #776]	; (800d5a4 <icmp_input+0x394>)
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	683a      	ldr	r2, [r7, #0]
 800d2a0:	0011      	movs	r1, r2
 800d2a2:	0018      	movs	r0, r3
 800d2a4:	f000 ffe6 	bl	800e274 <ip4_addr_isbroadcast>
 800d2a8:	1e03      	subs	r3, r0, #0
 800d2aa:	d001      	beq.n	800d2b0 <icmp_input+0xa0>
        accepted = 0;
 800d2ac:	2300      	movs	r3, #0
 800d2ae:	61bb      	str	r3, [r7, #24]
      }
#endif /* LWIP_BROADCAST_PING */
      /* broadcast or multicast destination address not acceptd? */
      if (!accepted) {
 800d2b0:	69bb      	ldr	r3, [r7, #24]
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d10c      	bne.n	800d2d0 <icmp_input+0xc0>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast or broadcast pings\n"));
        ICMP_STATS_INC(icmp.err);
 800d2b6:	4bba      	ldr	r3, [pc, #744]	; (800d5a0 <icmp_input+0x390>)
 800d2b8:	2274      	movs	r2, #116	; 0x74
 800d2ba:	5a9b      	ldrh	r3, [r3, r2]
 800d2bc:	3301      	adds	r3, #1
 800d2be:	b299      	uxth	r1, r3
 800d2c0:	4bb7      	ldr	r3, [pc, #732]	; (800d5a0 <icmp_input+0x390>)
 800d2c2:	2274      	movs	r2, #116	; 0x74
 800d2c4:	5299      	strh	r1, [r3, r2]
        pbuf_free(p);
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	0018      	movs	r0, r3
 800d2ca:	f7f9 fd63 	bl	8006d94 <pbuf_free>
        return;
 800d2ce:	e193      	b.n	800d5f8 <icmp_input+0x3e8>
      }
    }
#endif /* !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	891b      	ldrh	r3, [r3, #8]
 800d2d4:	2b07      	cmp	r3, #7
 800d2d6:	d800      	bhi.n	800d2da <icmp_input+0xca>
 800d2d8:	e16a      	b.n	800d5b0 <icmp_input+0x3a0>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
      goto lenerr;
    }
    if (inet_chksum_pbuf(p) != 0) {
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	0018      	movs	r0, r3
 800d2de:	f000 fb58 	bl	800d992 <inet_chksum_pbuf>
 800d2e2:	1e03      	subs	r3, r0, #0
 800d2e4:	d00c      	beq.n	800d300 <icmp_input+0xf0>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
      pbuf_free(p);
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	0018      	movs	r0, r3
 800d2ea:	f7f9 fd53 	bl	8006d94 <pbuf_free>
      ICMP_STATS_INC(icmp.chkerr);
 800d2ee:	4bac      	ldr	r3, [pc, #688]	; (800d5a0 <icmp_input+0x390>)
 800d2f0:	2268      	movs	r2, #104	; 0x68
 800d2f2:	5a9b      	ldrh	r3, [r3, r2]
 800d2f4:	3301      	adds	r3, #1
 800d2f6:	b299      	uxth	r1, r3
 800d2f8:	4ba9      	ldr	r3, [pc, #676]	; (800d5a0 <icmp_input+0x390>)
 800d2fa:	2268      	movs	r2, #104	; 0x68
 800d2fc:	5299      	strh	r1, [r3, r2]
      snmp_inc_icmpinerrors();
      return;
 800d2fe:	e17b      	b.n	800d5f8 <icmp_input+0x3e8>
    }
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (PBUF_IP_HLEN + PBUF_LINK_HLEN))) {
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	2122      	movs	r1, #34	; 0x22
 800d304:	0018      	movs	r0, r3
 800d306:	f7f9 fcbe 	bl	8006c86 <pbuf_header>
 800d30a:	1e03      	subs	r3, r0, #0
 800d30c:	d039      	beq.n	800d382 <icmp_input+0x172>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* switch p->payload to ip header */
      if (pbuf_header(p, hlen)) {
 800d30e:	2316      	movs	r3, #22
 800d310:	18fb      	adds	r3, r7, r3
 800d312:	2200      	movs	r2, #0
 800d314:	5e9a      	ldrsh	r2, [r3, r2]
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	0011      	movs	r1, r2
 800d31a:	0018      	movs	r0, r3
 800d31c:	f7f9 fcb3 	bl	8006c86 <pbuf_header>
 800d320:	1e03      	subs	r3, r0, #0
 800d322:	d000      	beq.n	800d326 <icmp_input+0x116>
 800d324:	e152      	b.n	800d5cc <icmp_input+0x3bc>
        LWIP_ASSERT("icmp_input: moving p->payload to ip header failed\n", 0);
        goto memerr;
      }
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	891b      	ldrh	r3, [r3, #8]
 800d32a:	2200      	movs	r2, #0
 800d32c:	0019      	movs	r1, r3
 800d32e:	2002      	movs	r0, #2
 800d330:	f7f9 faa4 	bl	800687c <pbuf_alloc>
 800d334:	0003      	movs	r3, r0
 800d336:	613b      	str	r3, [r7, #16]
      if (r == NULL) {
 800d338:	693b      	ldr	r3, [r7, #16]
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d100      	bne.n	800d340 <icmp_input+0x130>
 800d33e:	e147      	b.n	800d5d0 <icmp_input+0x3c0>
        goto memerr;
      }
      LWIP_ASSERT("check that first pbuf can hold struct the ICMP header",
                  (r->len >= hlen + sizeof(struct icmp_echo_hdr)));
      /* copy the whole packet including ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 800d340:	687a      	ldr	r2, [r7, #4]
 800d342:	693b      	ldr	r3, [r7, #16]
 800d344:	0011      	movs	r1, r2
 800d346:	0018      	movs	r0, r3
 800d348:	f7f9 fe03 	bl	8006f52 <pbuf_copy>
 800d34c:	1e03      	subs	r3, r0, #0
 800d34e:	d000      	beq.n	800d352 <icmp_input+0x142>
 800d350:	e140      	b.n	800d5d4 <icmp_input+0x3c4>
        LWIP_ASSERT("icmp_input: copying to new pbuf failed\n", 0);
        goto memerr;
      }
      iphdr = (struct ip_hdr *)r->payload;
 800d352:	693b      	ldr	r3, [r7, #16]
 800d354:	685b      	ldr	r3, [r3, #4]
 800d356:	61fb      	str	r3, [r7, #28]
      /* switch r->payload back to icmp header */
      if (pbuf_header(r, -hlen)) {
 800d358:	2316      	movs	r3, #22
 800d35a:	18fb      	adds	r3, r7, r3
 800d35c:	881b      	ldrh	r3, [r3, #0]
 800d35e:	425b      	negs	r3, r3
 800d360:	b29b      	uxth	r3, r3
 800d362:	b21a      	sxth	r2, r3
 800d364:	693b      	ldr	r3, [r7, #16]
 800d366:	0011      	movs	r1, r2
 800d368:	0018      	movs	r0, r3
 800d36a:	f7f9 fc8c 	bl	8006c86 <pbuf_header>
 800d36e:	1e03      	subs	r3, r0, #0
 800d370:	d000      	beq.n	800d374 <icmp_input+0x164>
 800d372:	e131      	b.n	800d5d8 <icmp_input+0x3c8>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
        goto memerr;
      }
      /* free the original p */
      pbuf_free(p);
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	0018      	movs	r0, r3
 800d378:	f7f9 fd0c 	bl	8006d94 <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
 800d37c:	693b      	ldr	r3, [r7, #16]
 800d37e:	607b      	str	r3, [r7, #4]
 800d380:	e009      	b.n	800d396 <icmp_input+0x186>
    } else {
      /* restore p->payload to point to icmp header */
      if (pbuf_header(p, -(s16_t)(PBUF_IP_HLEN + PBUF_LINK_HLEN))) {
 800d382:	2322      	movs	r3, #34	; 0x22
 800d384:	425a      	negs	r2, r3
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	0011      	movs	r1, r2
 800d38a:	0018      	movs	r0, r3
 800d38c:	f7f9 fc7b 	bl	8006c86 <pbuf_header>
 800d390:	1e03      	subs	r3, r0, #0
 800d392:	d000      	beq.n	800d396 <icmp_input+0x186>
 800d394:	e122      	b.n	800d5dc <icmp_input+0x3cc>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	685b      	ldr	r3, [r3, #4]
 800d39a:	60fb      	str	r3, [r7, #12]
    ip_addr_copy(iphdr->src, *ip_current_dest_addr());
 800d39c:	4b81      	ldr	r3, [pc, #516]	; (800d5a4 <icmp_input+0x394>)
 800d39e:	681a      	ldr	r2, [r3, #0]
 800d3a0:	69fb      	ldr	r3, [r7, #28]
 800d3a2:	21ff      	movs	r1, #255	; 0xff
 800d3a4:	4011      	ands	r1, r2
 800d3a6:	000c      	movs	r4, r1
 800d3a8:	7b19      	ldrb	r1, [r3, #12]
 800d3aa:	2000      	movs	r0, #0
 800d3ac:	4001      	ands	r1, r0
 800d3ae:	1c08      	adds	r0, r1, #0
 800d3b0:	1c21      	adds	r1, r4, #0
 800d3b2:	4301      	orrs	r1, r0
 800d3b4:	7319      	strb	r1, [r3, #12]
 800d3b6:	0a11      	lsrs	r1, r2, #8
 800d3b8:	20ff      	movs	r0, #255	; 0xff
 800d3ba:	4001      	ands	r1, r0
 800d3bc:	000c      	movs	r4, r1
 800d3be:	7b59      	ldrb	r1, [r3, #13]
 800d3c0:	2000      	movs	r0, #0
 800d3c2:	4001      	ands	r1, r0
 800d3c4:	1c08      	adds	r0, r1, #0
 800d3c6:	1c21      	adds	r1, r4, #0
 800d3c8:	4301      	orrs	r1, r0
 800d3ca:	7359      	strb	r1, [r3, #13]
 800d3cc:	0c11      	lsrs	r1, r2, #16
 800d3ce:	20ff      	movs	r0, #255	; 0xff
 800d3d0:	4001      	ands	r1, r0
 800d3d2:	000c      	movs	r4, r1
 800d3d4:	7b99      	ldrb	r1, [r3, #14]
 800d3d6:	2000      	movs	r0, #0
 800d3d8:	4001      	ands	r1, r0
 800d3da:	1c08      	adds	r0, r1, #0
 800d3dc:	1c21      	adds	r1, r4, #0
 800d3de:	4301      	orrs	r1, r0
 800d3e0:	7399      	strb	r1, [r3, #14]
 800d3e2:	0e10      	lsrs	r0, r2, #24
 800d3e4:	7bda      	ldrb	r2, [r3, #15]
 800d3e6:	2100      	movs	r1, #0
 800d3e8:	400a      	ands	r2, r1
 800d3ea:	1c11      	adds	r1, r2, #0
 800d3ec:	1c02      	adds	r2, r0, #0
 800d3ee:	430a      	orrs	r2, r1
 800d3f0:	73da      	strb	r2, [r3, #15]
    ip_addr_copy(iphdr->dest, *ip_current_src_addr());
 800d3f2:	4b6d      	ldr	r3, [pc, #436]	; (800d5a8 <icmp_input+0x398>)
 800d3f4:	681a      	ldr	r2, [r3, #0]
 800d3f6:	69fb      	ldr	r3, [r7, #28]
 800d3f8:	21ff      	movs	r1, #255	; 0xff
 800d3fa:	4011      	ands	r1, r2
 800d3fc:	000c      	movs	r4, r1
 800d3fe:	7c19      	ldrb	r1, [r3, #16]
 800d400:	2000      	movs	r0, #0
 800d402:	4001      	ands	r1, r0
 800d404:	1c08      	adds	r0, r1, #0
 800d406:	1c21      	adds	r1, r4, #0
 800d408:	4301      	orrs	r1, r0
 800d40a:	7419      	strb	r1, [r3, #16]
 800d40c:	0a11      	lsrs	r1, r2, #8
 800d40e:	20ff      	movs	r0, #255	; 0xff
 800d410:	4001      	ands	r1, r0
 800d412:	000c      	movs	r4, r1
 800d414:	7c59      	ldrb	r1, [r3, #17]
 800d416:	2000      	movs	r0, #0
 800d418:	4001      	ands	r1, r0
 800d41a:	1c08      	adds	r0, r1, #0
 800d41c:	1c21      	adds	r1, r4, #0
 800d41e:	4301      	orrs	r1, r0
 800d420:	7459      	strb	r1, [r3, #17]
 800d422:	0c11      	lsrs	r1, r2, #16
 800d424:	20ff      	movs	r0, #255	; 0xff
 800d426:	4001      	ands	r1, r0
 800d428:	000c      	movs	r4, r1
 800d42a:	7c99      	ldrb	r1, [r3, #18]
 800d42c:	2000      	movs	r0, #0
 800d42e:	4001      	ands	r1, r0
 800d430:	1c08      	adds	r0, r1, #0
 800d432:	1c21      	adds	r1, r4, #0
 800d434:	4301      	orrs	r1, r0
 800d436:	7499      	strb	r1, [r3, #18]
 800d438:	0e10      	lsrs	r0, r2, #24
 800d43a:	7cda      	ldrb	r2, [r3, #19]
 800d43c:	2100      	movs	r1, #0
 800d43e:	400a      	ands	r2, r1
 800d440:	1c11      	adds	r1, r2, #0
 800d442:	1c02      	adds	r2, r0, #0
 800d444:	430a      	orrs	r2, r1
 800d446:	74da      	strb	r2, [r3, #19]
    ICMPH_TYPE_SET(iecho, ICMP_ER);
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	2200      	movs	r2, #0
 800d44c:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
    /* adjust the checksum */
    if (iecho->chksum >= PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	789a      	ldrb	r2, [r3, #2]
 800d452:	78db      	ldrb	r3, [r3, #3]
 800d454:	021b      	lsls	r3, r3, #8
 800d456:	4313      	orrs	r3, r2
 800d458:	b29b      	uxth	r3, r3
 800d45a:	4a54      	ldr	r2, [pc, #336]	; (800d5ac <icmp_input+0x39c>)
 800d45c:	4293      	cmp	r3, r2
 800d45e:	d91c      	bls.n	800d49a <icmp_input+0x28a>
      iecho->chksum += PP_HTONS(ICMP_ECHO << 8) + 1;
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	789a      	ldrb	r2, [r3, #2]
 800d464:	78db      	ldrb	r3, [r3, #3]
 800d466:	021b      	lsls	r3, r3, #8
 800d468:	4313      	orrs	r3, r2
 800d46a:	b29b      	uxth	r3, r3
 800d46c:	3309      	adds	r3, #9
 800d46e:	b29a      	uxth	r2, r3
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	21ff      	movs	r1, #255	; 0xff
 800d474:	4011      	ands	r1, r2
 800d476:	000c      	movs	r4, r1
 800d478:	7899      	ldrb	r1, [r3, #2]
 800d47a:	2000      	movs	r0, #0
 800d47c:	4001      	ands	r1, r0
 800d47e:	1c08      	adds	r0, r1, #0
 800d480:	1c21      	adds	r1, r4, #0
 800d482:	4301      	orrs	r1, r0
 800d484:	7099      	strb	r1, [r3, #2]
 800d486:	0a12      	lsrs	r2, r2, #8
 800d488:	b290      	uxth	r0, r2
 800d48a:	78da      	ldrb	r2, [r3, #3]
 800d48c:	2100      	movs	r1, #0
 800d48e:	400a      	ands	r2, r1
 800d490:	1c11      	adds	r1, r2, #0
 800d492:	1c02      	adds	r2, r0, #0
 800d494:	430a      	orrs	r2, r1
 800d496:	70da      	strb	r2, [r3, #3]
 800d498:	e01b      	b.n	800d4d2 <icmp_input+0x2c2>
    } else {
      iecho->chksum += PP_HTONS(ICMP_ECHO << 8);
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	789a      	ldrb	r2, [r3, #2]
 800d49e:	78db      	ldrb	r3, [r3, #3]
 800d4a0:	021b      	lsls	r3, r3, #8
 800d4a2:	4313      	orrs	r3, r2
 800d4a4:	b29b      	uxth	r3, r3
 800d4a6:	3308      	adds	r3, #8
 800d4a8:	b29a      	uxth	r2, r3
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	21ff      	movs	r1, #255	; 0xff
 800d4ae:	4011      	ands	r1, r2
 800d4b0:	000c      	movs	r4, r1
 800d4b2:	7899      	ldrb	r1, [r3, #2]
 800d4b4:	2000      	movs	r0, #0
 800d4b6:	4001      	ands	r1, r0
 800d4b8:	1c08      	adds	r0, r1, #0
 800d4ba:	1c21      	adds	r1, r4, #0
 800d4bc:	4301      	orrs	r1, r0
 800d4be:	7099      	strb	r1, [r3, #2]
 800d4c0:	0a12      	lsrs	r2, r2, #8
 800d4c2:	b290      	uxth	r0, r2
 800d4c4:	78da      	ldrb	r2, [r3, #3]
 800d4c6:	2100      	movs	r1, #0
 800d4c8:	400a      	ands	r2, r1
 800d4ca:	1c11      	adds	r1, r2, #0
 800d4cc:	1c02      	adds	r2, r0, #0
 800d4ce:	430a      	orrs	r2, r1
 800d4d0:	70da      	strb	r2, [r3, #3]
#else /* CHECKSUM_GEN_ICMP */
    iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

    /* Set the correct TTL and recalculate the header checksum. */
    IPH_TTL_SET(iphdr, ICMP_TTL);
 800d4d2:	69fb      	ldr	r3, [r7, #28]
 800d4d4:	22ff      	movs	r2, #255	; 0xff
 800d4d6:	721a      	strb	r2, [r3, #8]
    IPH_CHKSUM_SET(iphdr, 0);
 800d4d8:	69fb      	ldr	r3, [r7, #28]
 800d4da:	7a9a      	ldrb	r2, [r3, #10]
 800d4dc:	2100      	movs	r1, #0
 800d4de:	400a      	ands	r2, r1
 800d4e0:	729a      	strb	r2, [r3, #10]
 800d4e2:	7ada      	ldrb	r2, [r3, #11]
 800d4e4:	2100      	movs	r1, #0
 800d4e6:	400a      	ands	r2, r1
 800d4e8:	72da      	strb	r2, [r3, #11]
#if CHECKSUM_GEN_IP
    IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 800d4ea:	69fb      	ldr	r3, [r7, #28]
 800d4ec:	2114      	movs	r1, #20
 800d4ee:	0018      	movs	r0, r3
 800d4f0:	f000 fa3a 	bl	800d968 <inet_chksum>
 800d4f4:	0003      	movs	r3, r0
 800d4f6:	001a      	movs	r2, r3
 800d4f8:	69fb      	ldr	r3, [r7, #28]
 800d4fa:	21ff      	movs	r1, #255	; 0xff
 800d4fc:	4011      	ands	r1, r2
 800d4fe:	000c      	movs	r4, r1
 800d500:	7a99      	ldrb	r1, [r3, #10]
 800d502:	2000      	movs	r0, #0
 800d504:	4001      	ands	r1, r0
 800d506:	1c08      	adds	r0, r1, #0
 800d508:	1c21      	adds	r1, r4, #0
 800d50a:	4301      	orrs	r1, r0
 800d50c:	7299      	strb	r1, [r3, #10]
 800d50e:	0a12      	lsrs	r2, r2, #8
 800d510:	b290      	uxth	r0, r2
 800d512:	7ada      	ldrb	r2, [r3, #11]
 800d514:	2100      	movs	r1, #0
 800d516:	400a      	ands	r2, r1
 800d518:	1c11      	adds	r1, r2, #0
 800d51a:	1c02      	adds	r2, r0, #0
 800d51c:	430a      	orrs	r2, r1
 800d51e:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    ICMP_STATS_INC(icmp.xmit);
 800d520:	4b1f      	ldr	r3, [pc, #124]	; (800d5a0 <icmp_input+0x390>)
 800d522:	2260      	movs	r2, #96	; 0x60
 800d524:	5a9b      	ldrh	r3, [r3, r2]
 800d526:	3301      	adds	r3, #1
 800d528:	b299      	uxth	r1, r3
 800d52a:	4b1d      	ldr	r3, [pc, #116]	; (800d5a0 <icmp_input+0x390>)
 800d52c:	2260      	movs	r2, #96	; 0x60
 800d52e:	5299      	strh	r1, [r3, r2]
    /* increase number of messages attempted to send */
    snmp_inc_icmpoutmsgs();
    /* increase number of echo replies attempted to send */
    snmp_inc_icmpoutechoreps();

    if(pbuf_header(p, hlen)) {
 800d530:	2316      	movs	r3, #22
 800d532:	18fb      	adds	r3, r7, r3
 800d534:	2200      	movs	r2, #0
 800d536:	5e9a      	ldrsh	r2, [r3, r2]
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	0011      	movs	r1, r2
 800d53c:	0018      	movs	r0, r3
 800d53e:	f7f9 fba2 	bl	8006c86 <pbuf_header>
 800d542:	1e03      	subs	r3, r0, #0
 800d544:	d123      	bne.n	800d58e <icmp_input+0x37e>
      LWIP_ASSERT("Can't move over header in packet", 0);
    } else {
      err_t ret;
      /* send an ICMP packet, src addr is the dest addr of the curren packet */
      ret = ip_output_if(p, ip_current_dest_addr(), IP_HDRINCL,
 800d546:	230b      	movs	r3, #11
 800d548:	18fc      	adds	r4, r7, r3
 800d54a:	4916      	ldr	r1, [pc, #88]	; (800d5a4 <icmp_input+0x394>)
 800d54c:	6878      	ldr	r0, [r7, #4]
 800d54e:	683b      	ldr	r3, [r7, #0]
 800d550:	9302      	str	r3, [sp, #8]
 800d552:	2301      	movs	r3, #1
 800d554:	9301      	str	r3, [sp, #4]
 800d556:	2300      	movs	r3, #0
 800d558:	9300      	str	r3, [sp, #0]
 800d55a:	23ff      	movs	r3, #255	; 0xff
 800d55c:	2200      	movs	r2, #0
 800d55e:	f000 fc7d 	bl	800de5c <ip_output_if>
 800d562:	0003      	movs	r3, r0
 800d564:	7023      	strb	r3, [r4, #0]
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %c.\n", ret));
      }
    }
    break;
 800d566:	e012      	b.n	800d58e <icmp_input+0x37e>
  default:
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n", 
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
 800d568:	4b0d      	ldr	r3, [pc, #52]	; (800d5a0 <icmp_input+0x390>)
 800d56a:	2270      	movs	r2, #112	; 0x70
 800d56c:	5a9b      	ldrh	r3, [r3, r2]
 800d56e:	3301      	adds	r3, #1
 800d570:	b299      	uxth	r1, r3
 800d572:	4b0b      	ldr	r3, [pc, #44]	; (800d5a0 <icmp_input+0x390>)
 800d574:	2270      	movs	r2, #112	; 0x70
 800d576:	5299      	strh	r1, [r3, r2]
    ICMP_STATS_INC(icmp.drop);
 800d578:	4b09      	ldr	r3, [pc, #36]	; (800d5a0 <icmp_input+0x390>)
 800d57a:	2266      	movs	r2, #102	; 0x66
 800d57c:	5a9b      	ldrh	r3, [r3, r2]
 800d57e:	3301      	adds	r3, #1
 800d580:	b299      	uxth	r1, r3
 800d582:	4b07      	ldr	r3, [pc, #28]	; (800d5a0 <icmp_input+0x390>)
 800d584:	2266      	movs	r2, #102	; 0x66
 800d586:	5299      	strh	r1, [r3, r2]
 800d588:	e002      	b.n	800d590 <icmp_input+0x380>
    break; 
 800d58a:	46c0      	nop			; (mov r8, r8)
 800d58c:	e000      	b.n	800d590 <icmp_input+0x380>
    break;
 800d58e:	46c0      	nop			; (mov r8, r8)
  }
  pbuf_free(p);
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	0018      	movs	r0, r3
 800d594:	f7f9 fbfe 	bl	8006d94 <pbuf_free>
  return;
 800d598:	e02e      	b.n	800d5f8 <icmp_input+0x3e8>
lenerr:
 800d59a:	46c0      	nop			; (mov r8, r8)
 800d59c:	e009      	b.n	800d5b2 <icmp_input+0x3a2>
 800d59e:	46c0      	nop			; (mov r8, r8)
 800d5a0:	2000340c 	.word	0x2000340c
 800d5a4:	20003550 	.word	0x20003550
 800d5a8:	20003548 	.word	0x20003548
 800d5ac:	0000fff6 	.word	0x0000fff6
      goto lenerr;
 800d5b0:	46c0      	nop			; (mov r8, r8)
  pbuf_free(p);
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	0018      	movs	r0, r3
 800d5b6:	f7f9 fbed 	bl	8006d94 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
 800d5ba:	4b11      	ldr	r3, [pc, #68]	; (800d600 <icmp_input+0x3f0>)
 800d5bc:	226a      	movs	r2, #106	; 0x6a
 800d5be:	5a9b      	ldrh	r3, [r3, r2]
 800d5c0:	3301      	adds	r3, #1
 800d5c2:	b299      	uxth	r1, r3
 800d5c4:	4b0e      	ldr	r3, [pc, #56]	; (800d600 <icmp_input+0x3f0>)
 800d5c6:	226a      	movs	r2, #106	; 0x6a
 800d5c8:	5299      	strh	r1, [r3, r2]
  snmp_inc_icmpinerrors();
  return;
 800d5ca:	e015      	b.n	800d5f8 <icmp_input+0x3e8>
        goto memerr;
 800d5cc:	46c0      	nop			; (mov r8, r8)
 800d5ce:	e006      	b.n	800d5de <icmp_input+0x3ce>
        goto memerr;
 800d5d0:	46c0      	nop			; (mov r8, r8)
 800d5d2:	e004      	b.n	800d5de <icmp_input+0x3ce>
        goto memerr;
 800d5d4:	46c0      	nop			; (mov r8, r8)
 800d5d6:	e002      	b.n	800d5de <icmp_input+0x3ce>
        goto memerr;
 800d5d8:	46c0      	nop			; (mov r8, r8)
 800d5da:	e000      	b.n	800d5de <icmp_input+0x3ce>
        goto memerr;
 800d5dc:	46c0      	nop			; (mov r8, r8)
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
memerr:
  pbuf_free(p);
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	0018      	movs	r0, r3
 800d5e2:	f7f9 fbd7 	bl	8006d94 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
 800d5e6:	4b06      	ldr	r3, [pc, #24]	; (800d600 <icmp_input+0x3f0>)
 800d5e8:	2274      	movs	r2, #116	; 0x74
 800d5ea:	5a9b      	ldrh	r3, [r3, r2]
 800d5ec:	3301      	adds	r3, #1
 800d5ee:	b299      	uxth	r1, r3
 800d5f0:	4b03      	ldr	r3, [pc, #12]	; (800d600 <icmp_input+0x3f0>)
 800d5f2:	2274      	movs	r2, #116	; 0x74
 800d5f4:	5299      	strh	r1, [r3, r2]
  snmp_inc_icmpinerrors();
  return;
 800d5f6:	46c0      	nop			; (mov r8, r8)
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
}
 800d5f8:	46bd      	mov	sp, r7
 800d5fa:	b009      	add	sp, #36	; 0x24
 800d5fc:	bd90      	pop	{r4, r7, pc}
 800d5fe:	46c0      	nop			; (mov r8, r8)
 800d600:	2000340c 	.word	0x2000340c

0800d604 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800d604:	b580      	push	{r7, lr}
 800d606:	b082      	sub	sp, #8
 800d608:	af00      	add	r7, sp, #0
 800d60a:	6078      	str	r0, [r7, #4]
 800d60c:	000a      	movs	r2, r1
 800d60e:	1cfb      	adds	r3, r7, #3
 800d610:	701a      	strb	r2, [r3, #0]
  icmp_send_response(p, ICMP_DUR, t);
 800d612:	1cfb      	adds	r3, r7, #3
 800d614:	781a      	ldrb	r2, [r3, #0]
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	2103      	movs	r1, #3
 800d61a:	0018      	movs	r0, r3
 800d61c:	f000 f816 	bl	800d64c <icmp_send_response>
}
 800d620:	46c0      	nop			; (mov r8, r8)
 800d622:	46bd      	mov	sp, r7
 800d624:	b002      	add	sp, #8
 800d626:	bd80      	pop	{r7, pc}

0800d628 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800d628:	b580      	push	{r7, lr}
 800d62a:	b082      	sub	sp, #8
 800d62c:	af00      	add	r7, sp, #0
 800d62e:	6078      	str	r0, [r7, #4]
 800d630:	000a      	movs	r2, r1
 800d632:	1cfb      	adds	r3, r7, #3
 800d634:	701a      	strb	r2, [r3, #0]
  icmp_send_response(p, ICMP_TE, t);
 800d636:	1cfb      	adds	r3, r7, #3
 800d638:	781a      	ldrb	r2, [r3, #0]
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	210b      	movs	r1, #11
 800d63e:	0018      	movs	r0, r3
 800d640:	f000 f804 	bl	800d64c <icmp_send_response>
}
 800d644:	46c0      	nop			; (mov r8, r8)
 800d646:	46bd      	mov	sp, r7
 800d648:	b002      	add	sp, #8
 800d64a:	bd80      	pop	{r7, pc}

0800d64c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800d64c:	b590      	push	{r4, r7, lr}
 800d64e:	b089      	sub	sp, #36	; 0x24
 800d650:	af02      	add	r7, sp, #8
 800d652:	6078      	str	r0, [r7, #4]
 800d654:	0008      	movs	r0, r1
 800d656:	0011      	movs	r1, r2
 800d658:	1cfb      	adds	r3, r7, #3
 800d65a:	1c02      	adds	r2, r0, #0
 800d65c:	701a      	strb	r2, [r3, #0]
 800d65e:	1cbb      	adds	r3, r7, #2
 800d660:	1c0a      	adds	r2, r1, #0
 800d662:	701a      	strb	r2, [r3, #0]
  /* we can use the echo header here */
  struct icmp_echo_hdr *icmphdr;
  ip_addr_t iphdr_src;

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800d664:	2200      	movs	r2, #0
 800d666:	2124      	movs	r1, #36	; 0x24
 800d668:	2001      	movs	r0, #1
 800d66a:	f7f9 f907 	bl	800687c <pbuf_alloc>
 800d66e:	0003      	movs	r3, r0
 800d670:	617b      	str	r3, [r7, #20]
                 PBUF_RAM);
  if (q == NULL) {
 800d672:	697b      	ldr	r3, [r7, #20]
 800d674:	2b00      	cmp	r3, #0
 800d676:	d073      	beq.n	800d760 <icmp_send_response+0x114>
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	685b      	ldr	r3, [r3, #4]
 800d67c:	613b      	str	r3, [r7, #16]
  ip_addr_debug_print(ICMP_DEBUG, &(iphdr->src));
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip_addr_debug_print(ICMP_DEBUG, &(iphdr->dest));
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800d67e:	697b      	ldr	r3, [r7, #20]
 800d680:	685b      	ldr	r3, [r3, #4]
 800d682:	60fb      	str	r3, [r7, #12]
  icmphdr->type = type;
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	1cfa      	adds	r2, r7, #3
 800d688:	7812      	ldrb	r2, [r2, #0]
 800d68a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	1cba      	adds	r2, r7, #2
 800d690:	7812      	ldrb	r2, [r2, #0]
 800d692:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	791a      	ldrb	r2, [r3, #4]
 800d698:	2100      	movs	r1, #0
 800d69a:	400a      	ands	r2, r1
 800d69c:	711a      	strb	r2, [r3, #4]
 800d69e:	795a      	ldrb	r2, [r3, #5]
 800d6a0:	2100      	movs	r1, #0
 800d6a2:	400a      	ands	r2, r1
 800d6a4:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	799a      	ldrb	r2, [r3, #6]
 800d6aa:	2100      	movs	r1, #0
 800d6ac:	400a      	ands	r2, r1
 800d6ae:	719a      	strb	r2, [r3, #6]
 800d6b0:	79da      	ldrb	r2, [r3, #7]
 800d6b2:	2100      	movs	r1, #0
 800d6b4:	400a      	ands	r2, r1
 800d6b6:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800d6b8:	697b      	ldr	r3, [r7, #20]
 800d6ba:	685b      	ldr	r3, [r3, #4]
 800d6bc:	3308      	adds	r3, #8
 800d6be:	0018      	movs	r0, r3
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	685b      	ldr	r3, [r3, #4]
 800d6c4:	221c      	movs	r2, #28
 800d6c6:	0019      	movs	r1, r3
 800d6c8:	f004 fcc5 	bl	8012056 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  /* calculate checksum */
  icmphdr->chksum = 0;
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	789a      	ldrb	r2, [r3, #2]
 800d6d0:	2100      	movs	r1, #0
 800d6d2:	400a      	ands	r2, r1
 800d6d4:	709a      	strb	r2, [r3, #2]
 800d6d6:	78da      	ldrb	r2, [r3, #3]
 800d6d8:	2100      	movs	r1, #0
 800d6da:	400a      	ands	r2, r1
 800d6dc:	70da      	strb	r2, [r3, #3]
  icmphdr->chksum = inet_chksum(icmphdr, q->len);
 800d6de:	697b      	ldr	r3, [r7, #20]
 800d6e0:	895a      	ldrh	r2, [r3, #10]
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	0011      	movs	r1, r2
 800d6e6:	0018      	movs	r0, r3
 800d6e8:	f000 f93e 	bl	800d968 <inet_chksum>
 800d6ec:	0003      	movs	r3, r0
 800d6ee:	001a      	movs	r2, r3
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	21ff      	movs	r1, #255	; 0xff
 800d6f4:	4011      	ands	r1, r2
 800d6f6:	000c      	movs	r4, r1
 800d6f8:	7899      	ldrb	r1, [r3, #2]
 800d6fa:	2000      	movs	r0, #0
 800d6fc:	4001      	ands	r1, r0
 800d6fe:	1c08      	adds	r0, r1, #0
 800d700:	1c21      	adds	r1, r4, #0
 800d702:	4301      	orrs	r1, r0
 800d704:	7099      	strb	r1, [r3, #2]
 800d706:	0a12      	lsrs	r2, r2, #8
 800d708:	b290      	uxth	r0, r2
 800d70a:	78da      	ldrb	r2, [r3, #3]
 800d70c:	2100      	movs	r1, #0
 800d70e:	400a      	ands	r2, r1
 800d710:	1c11      	adds	r1, r2, #0
 800d712:	1c02      	adds	r2, r0, #0
 800d714:	430a      	orrs	r2, r1
 800d716:	70da      	strb	r2, [r3, #3]
  ICMP_STATS_INC(icmp.xmit);
 800d718:	4b13      	ldr	r3, [pc, #76]	; (800d768 <icmp_send_response+0x11c>)
 800d71a:	2260      	movs	r2, #96	; 0x60
 800d71c:	5a9b      	ldrh	r3, [r3, r2]
 800d71e:	3301      	adds	r3, #1
 800d720:	b299      	uxth	r1, r3
 800d722:	4b11      	ldr	r3, [pc, #68]	; (800d768 <icmp_send_response+0x11c>)
 800d724:	2260      	movs	r2, #96	; 0x60
 800d726:	5299      	strh	r1, [r3, r2]
  /* increase number of messages attempted to send */
  snmp_inc_icmpoutmsgs();
  /* increase number of destination unreachable messages attempted to send */
  snmp_inc_icmpouttimeexcds();
  ip_addr_copy(iphdr_src, iphdr->src);
 800d728:	693b      	ldr	r3, [r7, #16]
 800d72a:	7b1a      	ldrb	r2, [r3, #12]
 800d72c:	7b59      	ldrb	r1, [r3, #13]
 800d72e:	0209      	lsls	r1, r1, #8
 800d730:	430a      	orrs	r2, r1
 800d732:	7b99      	ldrb	r1, [r3, #14]
 800d734:	0409      	lsls	r1, r1, #16
 800d736:	430a      	orrs	r2, r1
 800d738:	7bdb      	ldrb	r3, [r3, #15]
 800d73a:	061b      	lsls	r3, r3, #24
 800d73c:	4313      	orrs	r3, r2
 800d73e:	60bb      	str	r3, [r7, #8]
  ip_output(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP);
 800d740:	2308      	movs	r3, #8
 800d742:	18fa      	adds	r2, r7, r3
 800d744:	6978      	ldr	r0, [r7, #20]
 800d746:	2301      	movs	r3, #1
 800d748:	9301      	str	r3, [sp, #4]
 800d74a:	2300      	movs	r3, #0
 800d74c:	9300      	str	r3, [sp, #0]
 800d74e:	23ff      	movs	r3, #255	; 0xff
 800d750:	2100      	movs	r1, #0
 800d752:	f000 fd59 	bl	800e208 <ip_output>
  pbuf_free(q);
 800d756:	697b      	ldr	r3, [r7, #20]
 800d758:	0018      	movs	r0, r3
 800d75a:	f7f9 fb1b 	bl	8006d94 <pbuf_free>
 800d75e:	e000      	b.n	800d762 <icmp_send_response+0x116>
    return;
 800d760:	46c0      	nop			; (mov r8, r8)
}
 800d762:	46bd      	mov	sp, r7
 800d764:	b007      	add	sp, #28
 800d766:	bd90      	pop	{r4, r7, pc}
 800d768:	2000340c 	.word	0x2000340c

0800d76c <lwip_standard_chksum>:
 * @return host order (!) lwip checksum (non-inverted Internet sum) 
 */

static u16_t
lwip_standard_chksum(void *dataptr, int len)
{
 800d76c:	b580      	push	{r7, lr}
 800d76e:	b088      	sub	sp, #32
 800d770:	af00      	add	r7, sp, #0
 800d772:	6078      	str	r0, [r7, #4]
 800d774:	6039      	str	r1, [r7, #0]
  u8_t *pb = (u8_t *)dataptr;
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	61fb      	str	r3, [r7, #28]
  u16_t *ps, t = 0;
 800d77a:	230e      	movs	r3, #14
 800d77c:	18fb      	adds	r3, r7, r3
 800d77e:	2200      	movs	r2, #0
 800d780:	801a      	strh	r2, [r3, #0]
  u32_t sum = 0;
 800d782:	2300      	movs	r3, #0
 800d784:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800d786:	69fb      	ldr	r3, [r7, #28]
 800d788:	2201      	movs	r2, #1
 800d78a:	4013      	ands	r3, r2
 800d78c:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800d78e:	693b      	ldr	r3, [r7, #16]
 800d790:	2b00      	cmp	r3, #0
 800d792:	d00d      	beq.n	800d7b0 <lwip_standard_chksum+0x44>
 800d794:	683b      	ldr	r3, [r7, #0]
 800d796:	2b00      	cmp	r3, #0
 800d798:	dd0a      	ble.n	800d7b0 <lwip_standard_chksum+0x44>
    ((u8_t *)&t)[1] = *pb++;
 800d79a:	69fa      	ldr	r2, [r7, #28]
 800d79c:	1c53      	adds	r3, r2, #1
 800d79e:	61fb      	str	r3, [r7, #28]
 800d7a0:	230e      	movs	r3, #14
 800d7a2:	18fb      	adds	r3, r7, r3
 800d7a4:	3301      	adds	r3, #1
 800d7a6:	7812      	ldrb	r2, [r2, #0]
 800d7a8:	701a      	strb	r2, [r3, #0]
    len--;
 800d7aa:	683b      	ldr	r3, [r7, #0]
 800d7ac:	3b01      	subs	r3, #1
 800d7ae:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (u16_t *)(void *)pb;
 800d7b0:	69fb      	ldr	r3, [r7, #28]
 800d7b2:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800d7b4:	e00a      	b.n	800d7cc <lwip_standard_chksum+0x60>
    sum += *ps++;
 800d7b6:	69bb      	ldr	r3, [r7, #24]
 800d7b8:	1c9a      	adds	r2, r3, #2
 800d7ba:	61ba      	str	r2, [r7, #24]
 800d7bc:	881b      	ldrh	r3, [r3, #0]
 800d7be:	001a      	movs	r2, r3
 800d7c0:	697b      	ldr	r3, [r7, #20]
 800d7c2:	189b      	adds	r3, r3, r2
 800d7c4:	617b      	str	r3, [r7, #20]
    len -= 2;
 800d7c6:	683b      	ldr	r3, [r7, #0]
 800d7c8:	3b02      	subs	r3, #2
 800d7ca:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800d7cc:	683b      	ldr	r3, [r7, #0]
 800d7ce:	2b01      	cmp	r3, #1
 800d7d0:	dcf1      	bgt.n	800d7b6 <lwip_standard_chksum+0x4a>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800d7d2:	683b      	ldr	r3, [r7, #0]
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	dd04      	ble.n	800d7e2 <lwip_standard_chksum+0x76>
    ((u8_t *)&t)[0] = *(u8_t *)ps;
 800d7d8:	230e      	movs	r3, #14
 800d7da:	18fb      	adds	r3, r7, r3
 800d7dc:	69ba      	ldr	r2, [r7, #24]
 800d7de:	7812      	ldrb	r2, [r2, #0]
 800d7e0:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800d7e2:	230e      	movs	r3, #14
 800d7e4:	18fb      	adds	r3, r7, r3
 800d7e6:	881b      	ldrh	r3, [r3, #0]
 800d7e8:	001a      	movs	r2, r3
 800d7ea:	697b      	ldr	r3, [r7, #20]
 800d7ec:	189b      	adds	r3, r3, r2
 800d7ee:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is propably faster than if statements... */
  sum = FOLD_U32T(sum);
 800d7f0:	697b      	ldr	r3, [r7, #20]
 800d7f2:	0c1a      	lsrs	r2, r3, #16
 800d7f4:	697b      	ldr	r3, [r7, #20]
 800d7f6:	041b      	lsls	r3, r3, #16
 800d7f8:	0c1b      	lsrs	r3, r3, #16
 800d7fa:	18d3      	adds	r3, r2, r3
 800d7fc:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800d7fe:	697b      	ldr	r3, [r7, #20]
 800d800:	0c1a      	lsrs	r2, r3, #16
 800d802:	697b      	ldr	r3, [r7, #20]
 800d804:	041b      	lsls	r3, r3, #16
 800d806:	0c1b      	lsrs	r3, r3, #16
 800d808:	18d3      	adds	r3, r2, r3
 800d80a:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800d80c:	693b      	ldr	r3, [r7, #16]
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d009      	beq.n	800d826 <lwip_standard_chksum+0xba>
    sum = SWAP_BYTES_IN_WORD(sum);
 800d812:	697b      	ldr	r3, [r7, #20]
 800d814:	021b      	lsls	r3, r3, #8
 800d816:	041b      	lsls	r3, r3, #16
 800d818:	0c1a      	lsrs	r2, r3, #16
 800d81a:	697b      	ldr	r3, [r7, #20]
 800d81c:	0a1b      	lsrs	r3, r3, #8
 800d81e:	21ff      	movs	r1, #255	; 0xff
 800d820:	400b      	ands	r3, r1
 800d822:	4313      	orrs	r3, r2
 800d824:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800d826:	697b      	ldr	r3, [r7, #20]
 800d828:	b29b      	uxth	r3, r3
}
 800d82a:	0018      	movs	r0, r3
 800d82c:	46bd      	mov	sp, r7
 800d82e:	b008      	add	sp, #32
 800d830:	bd80      	pop	{r7, pc}

0800d832 <inet_chksum_pseudo>:
 */
u16_t
inet_chksum_pseudo(struct pbuf *p,
       ip_addr_t *src, ip_addr_t *dest,
       u8_t proto, u16_t proto_len)
{
 800d832:	b580      	push	{r7, lr}
 800d834:	b088      	sub	sp, #32
 800d836:	af00      	add	r7, sp, #0
 800d838:	60f8      	str	r0, [r7, #12]
 800d83a:	60b9      	str	r1, [r7, #8]
 800d83c:	607a      	str	r2, [r7, #4]
 800d83e:	001a      	movs	r2, r3
 800d840:	1cfb      	adds	r3, r7, #3
 800d842:	701a      	strb	r2, [r3, #0]
  u32_t acc;
  u32_t addr;
  struct pbuf *q;
  u8_t swapped;

  acc = 0;
 800d844:	2300      	movs	r3, #0
 800d846:	61fb      	str	r3, [r7, #28]
  swapped = 0;
 800d848:	2317      	movs	r3, #23
 800d84a:	18fb      	adds	r3, r7, r3
 800d84c:	2200      	movs	r2, #0
 800d84e:	701a      	strb	r2, [r3, #0]
  /* iterate through all pbuf in chain */
  for(q = p; q != NULL; q = q->next) {
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	61bb      	str	r3, [r7, #24]
 800d854:	e02e      	b.n	800d8b4 <inet_chksum_pseudo+0x82>
    LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
      (void *)q, (void *)q->next));
    acc += LWIP_CHKSUM(q->payload, q->len);
 800d856:	69bb      	ldr	r3, [r7, #24]
 800d858:	685a      	ldr	r2, [r3, #4]
 800d85a:	69bb      	ldr	r3, [r7, #24]
 800d85c:	895b      	ldrh	r3, [r3, #10]
 800d85e:	0019      	movs	r1, r3
 800d860:	0010      	movs	r0, r2
 800d862:	f7ff ff83 	bl	800d76c <lwip_standard_chksum>
 800d866:	0003      	movs	r3, r0
 800d868:	001a      	movs	r2, r3
 800d86a:	69fb      	ldr	r3, [r7, #28]
 800d86c:	189b      	adds	r3, r3, r2
 800d86e:	61fb      	str	r3, [r7, #28]
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
    /* just executing this next line is probably faster that the if statement needed
       to check whether we really need to execute it, and does no harm */
    acc = FOLD_U32T(acc);
 800d870:	69fb      	ldr	r3, [r7, #28]
 800d872:	0c1a      	lsrs	r2, r3, #16
 800d874:	69fb      	ldr	r3, [r7, #28]
 800d876:	041b      	lsls	r3, r3, #16
 800d878:	0c1b      	lsrs	r3, r3, #16
 800d87a:	18d3      	adds	r3, r2, r3
 800d87c:	61fb      	str	r3, [r7, #28]
    if (q->len % 2 != 0) {
 800d87e:	69bb      	ldr	r3, [r7, #24]
 800d880:	895b      	ldrh	r3, [r3, #10]
 800d882:	2201      	movs	r2, #1
 800d884:	4013      	ands	r3, r2
 800d886:	b29b      	uxth	r3, r3
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d010      	beq.n	800d8ae <inet_chksum_pseudo+0x7c>
      swapped = 1 - swapped;
 800d88c:	2217      	movs	r2, #23
 800d88e:	18bb      	adds	r3, r7, r2
 800d890:	18ba      	adds	r2, r7, r2
 800d892:	7812      	ldrb	r2, [r2, #0]
 800d894:	2101      	movs	r1, #1
 800d896:	1a8a      	subs	r2, r1, r2
 800d898:	701a      	strb	r2, [r3, #0]
      acc = SWAP_BYTES_IN_WORD(acc);
 800d89a:	69fb      	ldr	r3, [r7, #28]
 800d89c:	021b      	lsls	r3, r3, #8
 800d89e:	041b      	lsls	r3, r3, #16
 800d8a0:	0c1a      	lsrs	r2, r3, #16
 800d8a2:	69fb      	ldr	r3, [r7, #28]
 800d8a4:	0a1b      	lsrs	r3, r3, #8
 800d8a6:	21ff      	movs	r1, #255	; 0xff
 800d8a8:	400b      	ands	r3, r1
 800d8aa:	4313      	orrs	r3, r2
 800d8ac:	61fb      	str	r3, [r7, #28]
  for(q = p; q != NULL; q = q->next) {
 800d8ae:	69bb      	ldr	r3, [r7, #24]
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	61bb      	str	r3, [r7, #24]
 800d8b4:	69bb      	ldr	r3, [r7, #24]
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d1cd      	bne.n	800d856 <inet_chksum_pseudo+0x24>
    }
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
  }

  if (swapped) {
 800d8ba:	2317      	movs	r3, #23
 800d8bc:	18fb      	adds	r3, r7, r3
 800d8be:	781b      	ldrb	r3, [r3, #0]
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d009      	beq.n	800d8d8 <inet_chksum_pseudo+0xa6>
    acc = SWAP_BYTES_IN_WORD(acc);
 800d8c4:	69fb      	ldr	r3, [r7, #28]
 800d8c6:	021b      	lsls	r3, r3, #8
 800d8c8:	041b      	lsls	r3, r3, #16
 800d8ca:	0c1a      	lsrs	r2, r3, #16
 800d8cc:	69fb      	ldr	r3, [r7, #28]
 800d8ce:	0a1b      	lsrs	r3, r3, #8
 800d8d0:	21ff      	movs	r1, #255	; 0xff
 800d8d2:	400b      	ands	r3, r1
 800d8d4:	4313      	orrs	r3, r2
 800d8d6:	61fb      	str	r3, [r7, #28]
  }
  addr = ip4_addr_get_u32(src);
 800d8d8:	68bb      	ldr	r3, [r7, #8]
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	613b      	str	r3, [r7, #16]
  acc += (addr & 0xffffUL);
 800d8de:	693b      	ldr	r3, [r7, #16]
 800d8e0:	041b      	lsls	r3, r3, #16
 800d8e2:	0c1b      	lsrs	r3, r3, #16
 800d8e4:	69fa      	ldr	r2, [r7, #28]
 800d8e6:	18d3      	adds	r3, r2, r3
 800d8e8:	61fb      	str	r3, [r7, #28]
  acc += ((addr >> 16) & 0xffffUL);
 800d8ea:	693b      	ldr	r3, [r7, #16]
 800d8ec:	0c1b      	lsrs	r3, r3, #16
 800d8ee:	69fa      	ldr	r2, [r7, #28]
 800d8f0:	18d3      	adds	r3, r2, r3
 800d8f2:	61fb      	str	r3, [r7, #28]
  addr = ip4_addr_get_u32(dest);
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	613b      	str	r3, [r7, #16]
  acc += (addr & 0xffffUL);
 800d8fa:	693b      	ldr	r3, [r7, #16]
 800d8fc:	041b      	lsls	r3, r3, #16
 800d8fe:	0c1b      	lsrs	r3, r3, #16
 800d900:	69fa      	ldr	r2, [r7, #28]
 800d902:	18d3      	adds	r3, r2, r3
 800d904:	61fb      	str	r3, [r7, #28]
  acc += ((addr >> 16) & 0xffffUL);
 800d906:	693b      	ldr	r3, [r7, #16]
 800d908:	0c1b      	lsrs	r3, r3, #16
 800d90a:	69fa      	ldr	r2, [r7, #28]
 800d90c:	18d3      	adds	r3, r2, r3
 800d90e:	61fb      	str	r3, [r7, #28]
  acc += (u32_t)htons((u16_t)proto);
 800d910:	1cfb      	adds	r3, r7, #3
 800d912:	781b      	ldrb	r3, [r3, #0]
 800d914:	b29b      	uxth	r3, r3
 800d916:	0018      	movs	r0, r3
 800d918:	f7f8 f9f4 	bl	8005d04 <lwip_htons>
 800d91c:	0003      	movs	r3, r0
 800d91e:	001a      	movs	r2, r3
 800d920:	69fb      	ldr	r3, [r7, #28]
 800d922:	189b      	adds	r3, r3, r2
 800d924:	61fb      	str	r3, [r7, #28]
  acc += (u32_t)htons(proto_len);
 800d926:	2328      	movs	r3, #40	; 0x28
 800d928:	18fb      	adds	r3, r7, r3
 800d92a:	881b      	ldrh	r3, [r3, #0]
 800d92c:	0018      	movs	r0, r3
 800d92e:	f7f8 f9e9 	bl	8005d04 <lwip_htons>
 800d932:	0003      	movs	r3, r0
 800d934:	001a      	movs	r2, r3
 800d936:	69fb      	ldr	r3, [r7, #28]
 800d938:	189b      	adds	r3, r3, r2
 800d93a:	61fb      	str	r3, [r7, #28]

  /* Fold 32-bit sum to 16 bits
     calling this twice is propably faster than if statements... */
  acc = FOLD_U32T(acc);
 800d93c:	69fb      	ldr	r3, [r7, #28]
 800d93e:	0c1a      	lsrs	r2, r3, #16
 800d940:	69fb      	ldr	r3, [r7, #28]
 800d942:	041b      	lsls	r3, r3, #16
 800d944:	0c1b      	lsrs	r3, r3, #16
 800d946:	18d3      	adds	r3, r2, r3
 800d948:	61fb      	str	r3, [r7, #28]
  acc = FOLD_U32T(acc);
 800d94a:	69fb      	ldr	r3, [r7, #28]
 800d94c:	0c1a      	lsrs	r2, r3, #16
 800d94e:	69fb      	ldr	r3, [r7, #28]
 800d950:	041b      	lsls	r3, r3, #16
 800d952:	0c1b      	lsrs	r3, r3, #16
 800d954:	18d3      	adds	r3, r2, r3
 800d956:	61fb      	str	r3, [r7, #28]
  LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
  return (u16_t)~(acc & 0xffffUL);
 800d958:	69fb      	ldr	r3, [r7, #28]
 800d95a:	b29b      	uxth	r3, r3
 800d95c:	43db      	mvns	r3, r3
 800d95e:	b29b      	uxth	r3, r3
}
 800d960:	0018      	movs	r0, r3
 800d962:	46bd      	mov	sp, r7
 800d964:	b008      	add	sp, #32
 800d966:	bd80      	pop	{r7, pc}

0800d968 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(void *dataptr, u16_t len)
{
 800d968:	b580      	push	{r7, lr}
 800d96a:	b082      	sub	sp, #8
 800d96c:	af00      	add	r7, sp, #0
 800d96e:	6078      	str	r0, [r7, #4]
 800d970:	000a      	movs	r2, r1
 800d972:	1cbb      	adds	r3, r7, #2
 800d974:	801a      	strh	r2, [r3, #0]
  return ~LWIP_CHKSUM(dataptr, len);
 800d976:	1cbb      	adds	r3, r7, #2
 800d978:	881a      	ldrh	r2, [r3, #0]
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	0011      	movs	r1, r2
 800d97e:	0018      	movs	r0, r3
 800d980:	f7ff fef4 	bl	800d76c <lwip_standard_chksum>
 800d984:	0003      	movs	r3, r0
 800d986:	43db      	mvns	r3, r3
 800d988:	b29b      	uxth	r3, r3
}
 800d98a:	0018      	movs	r0, r3
 800d98c:	46bd      	mov	sp, r7
 800d98e:	b002      	add	sp, #8
 800d990:	bd80      	pop	{r7, pc}

0800d992 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800d992:	b580      	push	{r7, lr}
 800d994:	b086      	sub	sp, #24
 800d996:	af00      	add	r7, sp, #0
 800d998:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  u8_t swapped;

  acc = 0;
 800d99a:	2300      	movs	r3, #0
 800d99c:	617b      	str	r3, [r7, #20]
  swapped = 0;
 800d99e:	230f      	movs	r3, #15
 800d9a0:	18fb      	adds	r3, r7, r3
 800d9a2:	2200      	movs	r2, #0
 800d9a4:	701a      	strb	r2, [r3, #0]
  for(q = p; q != NULL; q = q->next) {
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	613b      	str	r3, [r7, #16]
 800d9aa:	e02e      	b.n	800da0a <inet_chksum_pbuf+0x78>
    acc += LWIP_CHKSUM(q->payload, q->len);
 800d9ac:	693b      	ldr	r3, [r7, #16]
 800d9ae:	685a      	ldr	r2, [r3, #4]
 800d9b0:	693b      	ldr	r3, [r7, #16]
 800d9b2:	895b      	ldrh	r3, [r3, #10]
 800d9b4:	0019      	movs	r1, r3
 800d9b6:	0010      	movs	r0, r2
 800d9b8:	f7ff fed8 	bl	800d76c <lwip_standard_chksum>
 800d9bc:	0003      	movs	r3, r0
 800d9be:	001a      	movs	r2, r3
 800d9c0:	697b      	ldr	r3, [r7, #20]
 800d9c2:	189b      	adds	r3, r3, r2
 800d9c4:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800d9c6:	697b      	ldr	r3, [r7, #20]
 800d9c8:	0c1a      	lsrs	r2, r3, #16
 800d9ca:	697b      	ldr	r3, [r7, #20]
 800d9cc:	041b      	lsls	r3, r3, #16
 800d9ce:	0c1b      	lsrs	r3, r3, #16
 800d9d0:	18d3      	adds	r3, r2, r3
 800d9d2:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800d9d4:	693b      	ldr	r3, [r7, #16]
 800d9d6:	895b      	ldrh	r3, [r3, #10]
 800d9d8:	2201      	movs	r2, #1
 800d9da:	4013      	ands	r3, r2
 800d9dc:	b29b      	uxth	r3, r3
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d010      	beq.n	800da04 <inet_chksum_pbuf+0x72>
      swapped = 1 - swapped;
 800d9e2:	220f      	movs	r2, #15
 800d9e4:	18bb      	adds	r3, r7, r2
 800d9e6:	18ba      	adds	r2, r7, r2
 800d9e8:	7812      	ldrb	r2, [r2, #0]
 800d9ea:	2101      	movs	r1, #1
 800d9ec:	1a8a      	subs	r2, r1, r2
 800d9ee:	701a      	strb	r2, [r3, #0]
      acc = SWAP_BYTES_IN_WORD(acc);
 800d9f0:	697b      	ldr	r3, [r7, #20]
 800d9f2:	021b      	lsls	r3, r3, #8
 800d9f4:	041b      	lsls	r3, r3, #16
 800d9f6:	0c1a      	lsrs	r2, r3, #16
 800d9f8:	697b      	ldr	r3, [r7, #20]
 800d9fa:	0a1b      	lsrs	r3, r3, #8
 800d9fc:	21ff      	movs	r1, #255	; 0xff
 800d9fe:	400b      	ands	r3, r1
 800da00:	4313      	orrs	r3, r2
 800da02:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next) {
 800da04:	693b      	ldr	r3, [r7, #16]
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	613b      	str	r3, [r7, #16]
 800da0a:	693b      	ldr	r3, [r7, #16]
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d1cd      	bne.n	800d9ac <inet_chksum_pbuf+0x1a>
    }
  }

  if (swapped) {
 800da10:	230f      	movs	r3, #15
 800da12:	18fb      	adds	r3, r7, r3
 800da14:	781b      	ldrb	r3, [r3, #0]
 800da16:	2b00      	cmp	r3, #0
 800da18:	d009      	beq.n	800da2e <inet_chksum_pbuf+0x9c>
    acc = SWAP_BYTES_IN_WORD(acc);
 800da1a:	697b      	ldr	r3, [r7, #20]
 800da1c:	021b      	lsls	r3, r3, #8
 800da1e:	041b      	lsls	r3, r3, #16
 800da20:	0c1a      	lsrs	r2, r3, #16
 800da22:	697b      	ldr	r3, [r7, #20]
 800da24:	0a1b      	lsrs	r3, r3, #8
 800da26:	21ff      	movs	r1, #255	; 0xff
 800da28:	400b      	ands	r3, r1
 800da2a:	4313      	orrs	r3, r2
 800da2c:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 800da2e:	697b      	ldr	r3, [r7, #20]
 800da30:	b29b      	uxth	r3, r3
 800da32:	43db      	mvns	r3, r3
 800da34:	b29b      	uxth	r3, r3
}
 800da36:	0018      	movs	r0, r3
 800da38:	46bd      	mov	sp, r7
 800da3a:	b006      	add	sp, #24
 800da3c:	bd80      	pop	{r7, pc}
	...

0800da40 <ip_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip_route(ip_addr_t *dest)
{
 800da40:	b580      	push	{r7, lr}
 800da42:	b084      	sub	sp, #16
 800da44:	af00      	add	r7, sp, #0
 800da46:	6078      	str	r0, [r7, #4]
    return netif;
  }
#endif

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800da48:	4b1c      	ldr	r3, [pc, #112]	; (800dabc <ip_route+0x7c>)
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	60fb      	str	r3, [r7, #12]
 800da4e:	e016      	b.n	800da7e <ip_route+0x3e>
    /* network mask matches? */
    if (netif_is_up(netif)) {
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	2229      	movs	r2, #41	; 0x29
 800da54:	5c9b      	ldrb	r3, [r3, r2]
 800da56:	1c1a      	adds	r2, r3, #0
 800da58:	2301      	movs	r3, #1
 800da5a:	4013      	ands	r3, r2
 800da5c:	b2db      	uxtb	r3, r3
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d00a      	beq.n	800da78 <ip_route+0x38>
      if (ip_addr_netcmp(dest, &(netif->ip_addr), &(netif->netmask))) {
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	681a      	ldr	r2, [r3, #0]
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	685b      	ldr	r3, [r3, #4]
 800da6a:	405a      	eors	r2, r3
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	689b      	ldr	r3, [r3, #8]
 800da70:	4013      	ands	r3, r2
 800da72:	d101      	bne.n	800da78 <ip_route+0x38>
        /* return netif on which to forward IP packet */
        return netif;
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	e01d      	b.n	800dab4 <ip_route+0x74>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	60fb      	str	r3, [r7, #12]
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	2b00      	cmp	r3, #0
 800da82:	d1e5      	bne.n	800da50 <ip_route+0x10>
      }
    }
  }
  if ((netif_default == NULL) || (!netif_is_up(netif_default))) {
 800da84:	4b0e      	ldr	r3, [pc, #56]	; (800dac0 <ip_route+0x80>)
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d007      	beq.n	800da9c <ip_route+0x5c>
 800da8c:	4b0c      	ldr	r3, [pc, #48]	; (800dac0 <ip_route+0x80>)
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	2229      	movs	r2, #41	; 0x29
 800da92:	5c9b      	ldrb	r3, [r3, r2]
 800da94:	001a      	movs	r2, r3
 800da96:	2301      	movs	r3, #1
 800da98:	4013      	ands	r3, r2
 800da9a:	d109      	bne.n	800dab0 <ip_route+0x70>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
 800da9c:	4b09      	ldr	r3, [pc, #36]	; (800dac4 <ip_route+0x84>)
 800da9e:	2256      	movs	r2, #86	; 0x56
 800daa0:	5a9b      	ldrh	r3, [r3, r2]
 800daa2:	3301      	adds	r3, #1
 800daa4:	b299      	uxth	r1, r3
 800daa6:	4b07      	ldr	r3, [pc, #28]	; (800dac4 <ip_route+0x84>)
 800daa8:	2256      	movs	r2, #86	; 0x56
 800daaa:	5299      	strh	r1, [r3, r2]
    snmp_inc_ipoutnoroutes();
    return NULL;
 800daac:	2300      	movs	r3, #0
 800daae:	e001      	b.n	800dab4 <ip_route+0x74>
  }
  /* no matching netif found, use default netif */
  return netif_default;
 800dab0:	4b03      	ldr	r3, [pc, #12]	; (800dac0 <ip_route+0x80>)
 800dab2:	681b      	ldr	r3, [r3, #0]
}
 800dab4:	0018      	movs	r0, r3
 800dab6:	46bd      	mov	sp, r7
 800dab8:	b004      	add	sp, #16
 800daba:	bd80      	pop	{r7, pc}
 800dabc:	20003400 	.word	0x20003400
 800dac0:	20003404 	.word	0x20003404
 800dac4:	2000340c 	.word	0x2000340c

0800dac8 <ip_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip_input(struct pbuf *p, struct netif *inp)
{
 800dac8:	b5b0      	push	{r4, r5, r7, lr}
 800daca:	b088      	sub	sp, #32
 800dacc:	af00      	add	r7, sp, #0
 800dace:	6078      	str	r0, [r7, #4]
 800dad0:	6039      	str	r1, [r7, #0]
  struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
  int check_ip_src=1;
 800dad2:	2301      	movs	r3, #1
 800dad4:	617b      	str	r3, [r7, #20]
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  IP_STATS_INC(ip.recv);
 800dad6:	4bcd      	ldr	r3, [pc, #820]	; (800de0c <ip_input+0x344>)
 800dad8:	224a      	movs	r2, #74	; 0x4a
 800dada:	5a9b      	ldrh	r3, [r3, r2]
 800dadc:	3301      	adds	r3, #1
 800dade:	b299      	uxth	r1, r3
 800dae0:	4bca      	ldr	r3, [pc, #808]	; (800de0c <ip_input+0x344>)
 800dae2:	224a      	movs	r2, #74	; 0x4a
 800dae4:	5299      	strh	r1, [r3, r2]
  snmp_inc_ipinreceives();

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	685b      	ldr	r3, [r3, #4]
 800daea:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 800daec:	69fb      	ldr	r3, [r7, #28]
 800daee:	781b      	ldrb	r3, [r3, #0]
 800daf0:	091b      	lsrs	r3, r3, #4
 800daf2:	b2db      	uxtb	r3, r3
 800daf4:	2b04      	cmp	r3, #4
 800daf6:	d015      	beq.n	800db24 <ip_input+0x5c>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", IPH_V(iphdr)));
    ip_debug_print(p);
    pbuf_free(p);
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	0018      	movs	r0, r3
 800dafc:	f7f9 f94a 	bl	8006d94 <pbuf_free>
    IP_STATS_INC(ip.err);
 800db00:	4bc2      	ldr	r3, [pc, #776]	; (800de0c <ip_input+0x344>)
 800db02:	225c      	movs	r2, #92	; 0x5c
 800db04:	5a9b      	ldrh	r3, [r3, r2]
 800db06:	3301      	adds	r3, #1
 800db08:	b299      	uxth	r1, r3
 800db0a:	4bc0      	ldr	r3, [pc, #768]	; (800de0c <ip_input+0x344>)
 800db0c:	225c      	movs	r2, #92	; 0x5c
 800db0e:	5299      	strh	r1, [r3, r2]
    IP_STATS_INC(ip.drop);
 800db10:	4bbe      	ldr	r3, [pc, #760]	; (800de0c <ip_input+0x344>)
 800db12:	224e      	movs	r2, #78	; 0x4e
 800db14:	5a9b      	ldrh	r3, [r3, r2]
 800db16:	3301      	adds	r3, #1
 800db18:	b299      	uxth	r1, r3
 800db1a:	4bbc      	ldr	r3, [pc, #752]	; (800de0c <ip_input+0x344>)
 800db1c:	224e      	movs	r2, #78	; 0x4e
 800db1e:	5299      	strh	r1, [r3, r2]
    snmp_inc_ipinhdrerrors();
    return ERR_OK;
 800db20:	2300      	movs	r3, #0
 800db22:	e18f      	b.n	800de44 <ip_input+0x37c>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 800db24:	69fb      	ldr	r3, [r7, #28]
 800db26:	781b      	ldrb	r3, [r3, #0]
 800db28:	b29a      	uxth	r2, r3
 800db2a:	250e      	movs	r5, #14
 800db2c:	197b      	adds	r3, r7, r5
 800db2e:	210f      	movs	r1, #15
 800db30:	400a      	ands	r2, r1
 800db32:	801a      	strh	r2, [r3, #0]
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 800db34:	197b      	adds	r3, r7, r5
 800db36:	197a      	adds	r2, r7, r5
 800db38:	8812      	ldrh	r2, [r2, #0]
 800db3a:	0092      	lsls	r2, r2, #2
 800db3c:	801a      	strh	r2, [r3, #0]
  /* obtain ip length in bytes */
  iphdr_len = ntohs(IPH_LEN(iphdr));
 800db3e:	69fb      	ldr	r3, [r7, #28]
 800db40:	789a      	ldrb	r2, [r3, #2]
 800db42:	78db      	ldrb	r3, [r3, #3]
 800db44:	021b      	lsls	r3, r3, #8
 800db46:	4313      	orrs	r3, r2
 800db48:	b29b      	uxth	r3, r3
 800db4a:	220c      	movs	r2, #12
 800db4c:	18bc      	adds	r4, r7, r2
 800db4e:	0018      	movs	r0, r3
 800db50:	f7f8 f8ee 	bl	8005d30 <lwip_ntohs>
 800db54:	0003      	movs	r3, r0
 800db56:	8023      	strh	r3, [r4, #0]

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len)) {
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	895b      	ldrh	r3, [r3, #10]
 800db5c:	197a      	adds	r2, r7, r5
 800db5e:	8812      	ldrh	r2, [r2, #0]
 800db60:	429a      	cmp	r2, r3
 800db62:	d806      	bhi.n	800db72 <ip_input+0xaa>
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	891b      	ldrh	r3, [r3, #8]
 800db68:	220c      	movs	r2, #12
 800db6a:	18ba      	adds	r2, r7, r2
 800db6c:	8812      	ldrh	r2, [r2, #0]
 800db6e:	429a      	cmp	r2, r3
 800db70:	d915      	bls.n	800db9e <ip_input+0xd6>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	0018      	movs	r0, r3
 800db76:	f7f9 f90d 	bl	8006d94 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
 800db7a:	4ba4      	ldr	r3, [pc, #656]	; (800de0c <ip_input+0x344>)
 800db7c:	2252      	movs	r2, #82	; 0x52
 800db7e:	5a9b      	ldrh	r3, [r3, r2]
 800db80:	3301      	adds	r3, #1
 800db82:	b299      	uxth	r1, r3
 800db84:	4ba1      	ldr	r3, [pc, #644]	; (800de0c <ip_input+0x344>)
 800db86:	2252      	movs	r2, #82	; 0x52
 800db88:	5299      	strh	r1, [r3, r2]
    IP_STATS_INC(ip.drop);
 800db8a:	4ba0      	ldr	r3, [pc, #640]	; (800de0c <ip_input+0x344>)
 800db8c:	224e      	movs	r2, #78	; 0x4e
 800db8e:	5a9b      	ldrh	r3, [r3, r2]
 800db90:	3301      	adds	r3, #1
 800db92:	b299      	uxth	r1, r3
 800db94:	4b9d      	ldr	r3, [pc, #628]	; (800de0c <ip_input+0x344>)
 800db96:	224e      	movs	r2, #78	; 0x4e
 800db98:	5299      	strh	r1, [r3, r2]
    snmp_inc_ipindiscards();
    return ERR_OK;
 800db9a:	2300      	movs	r3, #0
 800db9c:	e152      	b.n	800de44 <ip_input+0x37c>
  }

  /* verify checksum */
#if CHECKSUM_CHECK_IP
  if (inet_chksum(iphdr, iphdr_hlen) != 0) {
 800db9e:	230e      	movs	r3, #14
 800dba0:	18fb      	adds	r3, r7, r3
 800dba2:	881a      	ldrh	r2, [r3, #0]
 800dba4:	69fb      	ldr	r3, [r7, #28]
 800dba6:	0011      	movs	r1, r2
 800dba8:	0018      	movs	r0, r3
 800dbaa:	f7ff fedd 	bl	800d968 <inet_chksum>
 800dbae:	1e03      	subs	r3, r0, #0
 800dbb0:	d015      	beq.n	800dbde <ip_input+0x116>

    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("Checksum (0x%"X16_F") failed, IP packet dropped.\n", inet_chksum(iphdr, iphdr_hlen)));
    ip_debug_print(p);
    pbuf_free(p);
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	0018      	movs	r0, r3
 800dbb6:	f7f9 f8ed 	bl	8006d94 <pbuf_free>
    IP_STATS_INC(ip.chkerr);
 800dbba:	4b94      	ldr	r3, [pc, #592]	; (800de0c <ip_input+0x344>)
 800dbbc:	2250      	movs	r2, #80	; 0x50
 800dbbe:	5a9b      	ldrh	r3, [r3, r2]
 800dbc0:	3301      	adds	r3, #1
 800dbc2:	b299      	uxth	r1, r3
 800dbc4:	4b91      	ldr	r3, [pc, #580]	; (800de0c <ip_input+0x344>)
 800dbc6:	2250      	movs	r2, #80	; 0x50
 800dbc8:	5299      	strh	r1, [r3, r2]
    IP_STATS_INC(ip.drop);
 800dbca:	4b90      	ldr	r3, [pc, #576]	; (800de0c <ip_input+0x344>)
 800dbcc:	224e      	movs	r2, #78	; 0x4e
 800dbce:	5a9b      	ldrh	r3, [r3, r2]
 800dbd0:	3301      	adds	r3, #1
 800dbd2:	b299      	uxth	r1, r3
 800dbd4:	4b8d      	ldr	r3, [pc, #564]	; (800de0c <ip_input+0x344>)
 800dbd6:	224e      	movs	r2, #78	; 0x4e
 800dbd8:	5299      	strh	r1, [r3, r2]
    snmp_inc_ipinhdrerrors();
    return ERR_OK;
 800dbda:	2300      	movs	r3, #0
 800dbdc:	e132      	b.n	800de44 <ip_input+0x37c>
  }
#endif

  /* Trim pbuf. This should have been done at the netif layer,
   * but we'll do it anyway just to be sure that its done. */
  pbuf_realloc(p, iphdr_len);
 800dbde:	230c      	movs	r3, #12
 800dbe0:	18fb      	adds	r3, r7, r3
 800dbe2:	881a      	ldrh	r2, [r3, #0]
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	0011      	movs	r1, r2
 800dbe8:	0018      	movs	r0, r3
 800dbea:	f7f8 ffda 	bl	8006ba2 <pbuf_realloc>

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy(current_iphdr_dest, iphdr->dest);
 800dbee:	69fb      	ldr	r3, [r7, #28]
 800dbf0:	7c1a      	ldrb	r2, [r3, #16]
 800dbf2:	7c59      	ldrb	r1, [r3, #17]
 800dbf4:	0209      	lsls	r1, r1, #8
 800dbf6:	430a      	orrs	r2, r1
 800dbf8:	7c99      	ldrb	r1, [r3, #18]
 800dbfa:	0409      	lsls	r1, r1, #16
 800dbfc:	430a      	orrs	r2, r1
 800dbfe:	7cdb      	ldrb	r3, [r3, #19]
 800dc00:	061b      	lsls	r3, r3, #24
 800dc02:	4313      	orrs	r3, r2
 800dc04:	001a      	movs	r2, r3
 800dc06:	4b82      	ldr	r3, [pc, #520]	; (800de10 <ip_input+0x348>)
 800dc08:	601a      	str	r2, [r3, #0]
  ip_addr_copy(current_iphdr_src, iphdr->src);
 800dc0a:	69fb      	ldr	r3, [r7, #28]
 800dc0c:	7b1a      	ldrb	r2, [r3, #12]
 800dc0e:	7b59      	ldrb	r1, [r3, #13]
 800dc10:	0209      	lsls	r1, r1, #8
 800dc12:	430a      	orrs	r2, r1
 800dc14:	7b99      	ldrb	r1, [r3, #14]
 800dc16:	0409      	lsls	r1, r1, #16
 800dc18:	430a      	orrs	r2, r1
 800dc1a:	7bdb      	ldrb	r3, [r3, #15]
 800dc1c:	061b      	lsls	r3, r3, #24
 800dc1e:	4313      	orrs	r3, r2
 800dc20:	001a      	movs	r2, r3
 800dc22:	4b7c      	ldr	r3, [pc, #496]	; (800de14 <ip_input+0x34c>)
 800dc24:	601a      	str	r2, [r3, #0]
#endif /* LWIP_IGMP */
  {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 800dc26:	2301      	movs	r3, #1
 800dc28:	613b      	str	r3, [r7, #16]
    netif = inp;
 800dc2a:	683b      	ldr	r3, [r7, #0]
 800dc2c:	61bb      	str	r3, [r7, #24]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(&netif->netmask),
          ip4_addr_get_u32(&netif->ip_addr) & ip4_addr_get_u32(&netif->netmask),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(&netif->netmask)));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip_addr_isany(&(netif->ip_addr)))) {
 800dc2e:	69bb      	ldr	r3, [r7, #24]
 800dc30:	2229      	movs	r2, #41	; 0x29
 800dc32:	5c9b      	ldrb	r3, [r3, r2]
 800dc34:	1c1a      	adds	r2, r3, #0
 800dc36:	2301      	movs	r3, #1
 800dc38:	4013      	ands	r3, r2
 800dc3a:	b2db      	uxtb	r3, r3
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d016      	beq.n	800dc6e <ip_input+0x1a6>
 800dc40:	69bb      	ldr	r3, [r7, #24]
 800dc42:	3304      	adds	r3, #4
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d012      	beq.n	800dc6e <ip_input+0x1a6>
 800dc48:	69bb      	ldr	r3, [r7, #24]
 800dc4a:	685b      	ldr	r3, [r3, #4]
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d00e      	beq.n	800dc6e <ip_input+0x1a6>
        /* unicast to this interface address? */
        if (ip_addr_cmp(&current_iphdr_dest, &(netif->ip_addr)) ||
 800dc50:	4b6f      	ldr	r3, [pc, #444]	; (800de10 <ip_input+0x348>)
 800dc52:	681a      	ldr	r2, [r3, #0]
 800dc54:	69bb      	ldr	r3, [r7, #24]
 800dc56:	685b      	ldr	r3, [r3, #4]
 800dc58:	429a      	cmp	r2, r3
 800dc5a:	d01e      	beq.n	800dc9a <ip_input+0x1d2>
            /* or broadcast on this interface network address? */
            ip_addr_isbroadcast(&current_iphdr_dest, netif)) {
 800dc5c:	4b6c      	ldr	r3, [pc, #432]	; (800de10 <ip_input+0x348>)
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	69ba      	ldr	r2, [r7, #24]
 800dc62:	0011      	movs	r1, r2
 800dc64:	0018      	movs	r0, r3
 800dc66:	f000 fb05 	bl	800e274 <ip4_addr_isbroadcast>
 800dc6a:	1e03      	subs	r3, r0, #0
        if (ip_addr_cmp(&current_iphdr_dest, &(netif->ip_addr)) ||
 800dc6c:	d115      	bne.n	800dc9a <ip_input+0x1d2>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 800dc6e:	693b      	ldr	r3, [r7, #16]
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d005      	beq.n	800dc80 <ip_input+0x1b8>
        first = 0;
 800dc74:	2300      	movs	r3, #0
 800dc76:	613b      	str	r3, [r7, #16]
        netif = netif_list;
 800dc78:	4b67      	ldr	r3, [pc, #412]	; (800de18 <ip_input+0x350>)
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	61bb      	str	r3, [r7, #24]
 800dc7e:	e002      	b.n	800dc86 <ip_input+0x1be>
      } else {
        netif = netif->next;
 800dc80:	69bb      	ldr	r3, [r7, #24]
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	61bb      	str	r3, [r7, #24]
      }
      if (netif == inp) {
 800dc86:	69ba      	ldr	r2, [r7, #24]
 800dc88:	683b      	ldr	r3, [r7, #0]
 800dc8a:	429a      	cmp	r2, r3
 800dc8c:	d102      	bne.n	800dc94 <ip_input+0x1cc>
        netif = netif->next;
 800dc8e:	69bb      	ldr	r3, [r7, #24]
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	61bb      	str	r3, [r7, #24]
      }
    } while(netif != NULL);
 800dc94:	69bb      	ldr	r3, [r7, #24]
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d1c9      	bne.n	800dc2e <ip_input+0x166>
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 800dc9a:	69bb      	ldr	r3, [r7, #24]
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d117      	bne.n	800dcd0 <ip_input+0x208>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 800dca0:	69fb      	ldr	r3, [r7, #28]
 800dca2:	7a5b      	ldrb	r3, [r3, #9]
 800dca4:	2b11      	cmp	r3, #17
 800dca6:	d113      	bne.n	800dcd0 <ip_input+0x208>
      struct udp_hdr *udphdr = (struct udp_hdr *)((u8_t *)iphdr + iphdr_hlen);
 800dca8:	230e      	movs	r3, #14
 800dcaa:	18fb      	adds	r3, r7, r3
 800dcac:	881b      	ldrh	r3, [r3, #0]
 800dcae:	69fa      	ldr	r2, [r7, #28]
 800dcb0:	18d3      	adds	r3, r2, r3
 800dcb2:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip_input: UDP packet to DHCP client port %"U16_F"\n",
        ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 800dcb4:	68bb      	ldr	r3, [r7, #8]
 800dcb6:	789a      	ldrb	r2, [r3, #2]
 800dcb8:	78db      	ldrb	r3, [r3, #3]
 800dcba:	021b      	lsls	r3, r3, #8
 800dcbc:	4313      	orrs	r3, r2
 800dcbe:	b29a      	uxth	r2, r3
 800dcc0:	2386      	movs	r3, #134	; 0x86
 800dcc2:	01db      	lsls	r3, r3, #7
 800dcc4:	429a      	cmp	r2, r3
 800dcc6:	d103      	bne.n	800dcd0 <ip_input+0x208>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip_input: DHCP packet accepted.\n"));
        netif = inp;
 800dcc8:	683b      	ldr	r3, [r7, #0]
 800dcca:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 800dccc:	2300      	movs	r3, #0
 800dcce:	617b      	str	r3, [r7, #20]
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
  /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
  if (check_ip_src && !ip_addr_isany(&current_iphdr_src))
 800dcd0:	697b      	ldr	r3, [r7, #20]
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d020      	beq.n	800dd18 <ip_input+0x250>
 800dcd6:	4b4f      	ldr	r3, [pc, #316]	; (800de14 <ip_input+0x34c>)
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d01c      	beq.n	800dd18 <ip_input+0x250>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {  if ((ip_addr_isbroadcast(&current_iphdr_src, inp)) ||
 800dcde:	4b4d      	ldr	r3, [pc, #308]	; (800de14 <ip_input+0x34c>)
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	683a      	ldr	r2, [r7, #0]
 800dce4:	0011      	movs	r1, r2
 800dce6:	0018      	movs	r0, r3
 800dce8:	f000 fac4 	bl	800e274 <ip4_addr_isbroadcast>
 800dcec:	1e03      	subs	r3, r0, #0
 800dcee:	d105      	bne.n	800dcfc <ip_input+0x234>
         (ip_addr_ismulticast(&current_iphdr_src))) {
 800dcf0:	4b48      	ldr	r3, [pc, #288]	; (800de14 <ip_input+0x34c>)
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	22f0      	movs	r2, #240	; 0xf0
 800dcf6:	4013      	ands	r3, r2
  {  if ((ip_addr_isbroadcast(&current_iphdr_src, inp)) ||
 800dcf8:	2be0      	cmp	r3, #224	; 0xe0
 800dcfa:	d10d      	bne.n	800dd18 <ip_input+0x250>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	0018      	movs	r0, r3
 800dd00:	f7f9 f848 	bl	8006d94 <pbuf_free>
      IP_STATS_INC(ip.drop);
 800dd04:	4b41      	ldr	r3, [pc, #260]	; (800de0c <ip_input+0x344>)
 800dd06:	224e      	movs	r2, #78	; 0x4e
 800dd08:	5a9b      	ldrh	r3, [r3, r2]
 800dd0a:	3301      	adds	r3, #1
 800dd0c:	b299      	uxth	r1, r3
 800dd0e:	4b3f      	ldr	r3, [pc, #252]	; (800de0c <ip_input+0x344>)
 800dd10:	224e      	movs	r2, #78	; 0x4e
 800dd12:	5299      	strh	r1, [r3, r2]
      snmp_inc_ipinaddrerrors();
      snmp_inc_ipindiscards();
      return ERR_OK;
 800dd14:	2300      	movs	r3, #0
 800dd16:	e095      	b.n	800de44 <ip_input+0x37c>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800dd18:	69bb      	ldr	r3, [r7, #24]
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d105      	bne.n	800dd2a <ip_input+0x262>
#endif /* IP_FORWARD */
    {
      snmp_inc_ipinaddrerrors();
      snmp_inc_ipindiscards();
    }
    pbuf_free(p);
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	0018      	movs	r0, r3
 800dd22:	f7f9 f837 	bl	8006d94 <pbuf_free>
    return ERR_OK;
 800dd26:	2300      	movs	r3, #0
 800dd28:	e08c      	b.n	800de44 <ip_input+0x37c>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800dd2a:	69fb      	ldr	r3, [r7, #28]
 800dd2c:	799a      	ldrb	r2, [r3, #6]
 800dd2e:	79db      	ldrb	r3, [r3, #7]
 800dd30:	021b      	lsls	r3, r3, #8
 800dd32:	4313      	orrs	r3, r2
 800dd34:	b29b      	uxth	r3, r3
 800dd36:	001a      	movs	r2, r3
 800dd38:	4b38      	ldr	r3, [pc, #224]	; (800de1c <ip_input+0x354>)
 800dd3a:	4013      	ands	r3, r2
 800dd3c:	d00d      	beq.n	800dd5a <ip_input+0x292>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip_reass()\n",
      ntohs(IPH_ID(iphdr)), p->tot_len, ntohs(IPH_LEN(iphdr)), !!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8));
    /* reassemble the packet*/
    p = ip_reass(p);
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	0018      	movs	r0, r3
 800dd42:	f000 fe51 	bl	800e9e8 <ip_reass>
 800dd46:	0003      	movs	r3, r0
 800dd48:	607b      	str	r3, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d101      	bne.n	800dd54 <ip_input+0x28c>
      return ERR_OK;
 800dd50:	2300      	movs	r3, #0
 800dd52:	e077      	b.n	800de44 <ip_input+0x37c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	685b      	ldr	r3, [r3, #4]
 800dd58:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip_input: \n"));
  ip_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  current_netif = inp;
 800dd5a:	4b31      	ldr	r3, [pc, #196]	; (800de20 <ip_input+0x358>)
 800dd5c:	683a      	ldr	r2, [r7, #0]
 800dd5e:	601a      	str	r2, [r3, #0]
  current_header = iphdr;
 800dd60:	4b30      	ldr	r3, [pc, #192]	; (800de24 <ip_input+0x35c>)
 800dd62:	69fa      	ldr	r2, [r7, #28]
 800dd64:	601a      	str	r2, [r3, #0]

#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
 800dd66:	683a      	ldr	r2, [r7, #0]
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	0011      	movs	r1, r2
 800dd6c:	0018      	movs	r0, r3
 800dd6e:	f7f9 fa25 	bl	80071bc <raw_input>
 800dd72:	1e03      	subs	r3, r0, #0
 800dd74:	d158      	bne.n	800de28 <ip_input+0x360>
#endif /* LWIP_RAW */
  {
    switch (IPH_PROTO(iphdr)) {
 800dd76:	69fb      	ldr	r3, [r7, #28]
 800dd78:	7a5b      	ldrb	r3, [r3, #9]
 800dd7a:	2b06      	cmp	r3, #6
 800dd7c:	d00b      	beq.n	800dd96 <ip_input+0x2ce>
 800dd7e:	2b11      	cmp	r3, #17
 800dd80:	d002      	beq.n	800dd88 <ip_input+0x2c0>
 800dd82:	2b01      	cmp	r3, #1
 800dd84:	d00e      	beq.n	800dda4 <ip_input+0x2dc>
 800dd86:	e014      	b.n	800ddb2 <ip_input+0x2ea>
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      snmp_inc_ipindelivers();
      udp_input(p, inp);
 800dd88:	683a      	ldr	r2, [r7, #0]
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	0011      	movs	r1, r2
 800dd8e:	0018      	movs	r0, r3
 800dd90:	f7fe fe8a 	bl	800caa8 <udp_input>
      break;
 800dd94:	e049      	b.n	800de2a <ip_input+0x362>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      snmp_inc_ipindelivers();
      tcp_input(p, inp);
 800dd96:	683a      	ldr	r2, [r7, #0]
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	0011      	movs	r1, r2
 800dd9c:	0018      	movs	r0, r3
 800dd9e:	f7fa fc5b 	bl	8008658 <tcp_input>
      break;
 800dda2:	e042      	b.n	800de2a <ip_input+0x362>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      snmp_inc_ipindelivers();
      icmp_input(p, inp);
 800dda4:	683a      	ldr	r2, [r7, #0]
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	0011      	movs	r1, r2
 800ddaa:	0018      	movs	r0, r3
 800ddac:	f7ff fa30 	bl	800d210 <icmp_input>
      break;
 800ddb0:	e03b      	b.n	800de2a <ip_input+0x362>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip_addr_isbroadcast(&current_iphdr_dest, inp) &&
 800ddb2:	4b17      	ldr	r3, [pc, #92]	; (800de10 <ip_input+0x348>)
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	683a      	ldr	r2, [r7, #0]
 800ddb8:	0011      	movs	r1, r2
 800ddba:	0018      	movs	r0, r3
 800ddbc:	f000 fa5a 	bl	800e274 <ip4_addr_isbroadcast>
 800ddc0:	1e03      	subs	r3, r0, #0
 800ddc2:	d10d      	bne.n	800dde0 <ip_input+0x318>
          !ip_addr_ismulticast(&current_iphdr_dest)) {
 800ddc4:	4b12      	ldr	r3, [pc, #72]	; (800de10 <ip_input+0x348>)
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	22f0      	movs	r2, #240	; 0xf0
 800ddca:	4013      	ands	r3, r2
      if (!ip_addr_isbroadcast(&current_iphdr_dest, inp) &&
 800ddcc:	2be0      	cmp	r3, #224	; 0xe0
 800ddce:	d007      	beq.n	800dde0 <ip_input+0x318>
        p->payload = iphdr;
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	69fa      	ldr	r2, [r7, #28]
 800ddd4:	605a      	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	2102      	movs	r1, #2
 800ddda:	0018      	movs	r0, r3
 800dddc:	f7ff fc12 	bl	800d604 <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	0018      	movs	r0, r3
 800dde4:	f7f8 ffd6 	bl	8006d94 <pbuf_free>

      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Unsupported transport protocol %"U16_F"\n", IPH_PROTO(iphdr)));

      IP_STATS_INC(ip.proterr);
 800dde8:	4b08      	ldr	r3, [pc, #32]	; (800de0c <ip_input+0x344>)
 800ddea:	2258      	movs	r2, #88	; 0x58
 800ddec:	5a9b      	ldrh	r3, [r3, r2]
 800ddee:	3301      	adds	r3, #1
 800ddf0:	b299      	uxth	r1, r3
 800ddf2:	4b06      	ldr	r3, [pc, #24]	; (800de0c <ip_input+0x344>)
 800ddf4:	2258      	movs	r2, #88	; 0x58
 800ddf6:	5299      	strh	r1, [r3, r2]
      IP_STATS_INC(ip.drop);
 800ddf8:	4b04      	ldr	r3, [pc, #16]	; (800de0c <ip_input+0x344>)
 800ddfa:	224e      	movs	r2, #78	; 0x4e
 800ddfc:	5a9b      	ldrh	r3, [r3, r2]
 800ddfe:	3301      	adds	r3, #1
 800de00:	b299      	uxth	r1, r3
 800de02:	4b02      	ldr	r3, [pc, #8]	; (800de0c <ip_input+0x344>)
 800de04:	224e      	movs	r2, #78	; 0x4e
 800de06:	5299      	strh	r1, [r3, r2]
 800de08:	e00f      	b.n	800de2a <ip_input+0x362>
 800de0a:	46c0      	nop			; (mov r8, r8)
 800de0c:	2000340c 	.word	0x2000340c
 800de10:	20003550 	.word	0x20003550
 800de14:	20003548 	.word	0x20003548
 800de18:	20003400 	.word	0x20003400
 800de1c:	0000ff3f 	.word	0x0000ff3f
 800de20:	2000354c 	.word	0x2000354c
 800de24:	20003554 	.word	0x20003554
      snmp_inc_ipinunknownprotos();
    }
  }
 800de28:	46c0      	nop			; (mov r8, r8)

  current_netif = NULL;
 800de2a:	4b08      	ldr	r3, [pc, #32]	; (800de4c <ip_input+0x384>)
 800de2c:	2200      	movs	r2, #0
 800de2e:	601a      	str	r2, [r3, #0]
  current_header = NULL;
 800de30:	4b07      	ldr	r3, [pc, #28]	; (800de50 <ip_input+0x388>)
 800de32:	2200      	movs	r2, #0
 800de34:	601a      	str	r2, [r3, #0]
  ip_addr_set_any(&current_iphdr_src);
 800de36:	4b07      	ldr	r3, [pc, #28]	; (800de54 <ip_input+0x38c>)
 800de38:	2200      	movs	r2, #0
 800de3a:	601a      	str	r2, [r3, #0]
  ip_addr_set_any(&current_iphdr_dest);
 800de3c:	4b06      	ldr	r3, [pc, #24]	; (800de58 <ip_input+0x390>)
 800de3e:	2200      	movs	r2, #0
 800de40:	601a      	str	r2, [r3, #0]

  return ERR_OK;
 800de42:	2300      	movs	r3, #0
}
 800de44:	0018      	movs	r0, r3
 800de46:	46bd      	mov	sp, r7
 800de48:	b008      	add	sp, #32
 800de4a:	bdb0      	pop	{r4, r5, r7, pc}
 800de4c:	2000354c 	.word	0x2000354c
 800de50:	20003554 	.word	0x20003554
 800de54:	20003548 	.word	0x20003548
 800de58:	20003550 	.word	0x20003550

0800de5c <ip_output_if>:
 */
err_t
ip_output_if(struct pbuf *p, ip_addr_t *src, ip_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 800de5c:	b590      	push	{r4, r7, lr}
 800de5e:	b089      	sub	sp, #36	; 0x24
 800de60:	af00      	add	r7, sp, #0
 800de62:	60f8      	str	r0, [r7, #12]
 800de64:	60b9      	str	r1, [r7, #8]
 800de66:	607a      	str	r2, [r7, #4]
 800de68:	001a      	movs	r2, r3
 800de6a:	1cfb      	adds	r3, r7, #3
 800de6c:	701a      	strb	r2, [r3, #0]
{
#endif /* IP_OPTIONS_SEND */
  struct ip_hdr *iphdr;
  ip_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
 800de6e:	2300      	movs	r3, #0
 800de70:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("p->ref == 1", p->ref == 1);

  snmp_inc_ipoutrequests();

  /* Should the IP header be generated or is it already included in p? */
  if (dest != IP_HDRINCL) {
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	2b00      	cmp	r3, #0
 800de76:	d100      	bne.n	800de7a <ip_output_if+0x1e>
 800de78:	e18b      	b.n	800e192 <ip_output_if+0x336>
    u16_t ip_hlen = IP_HLEN;
 800de7a:	2316      	movs	r3, #22
 800de7c:	18fb      	adds	r3, r7, r3
 800de7e:	2214      	movs	r2, #20
 800de80:	801a      	strh	r2, [r3, #0]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	2114      	movs	r1, #20
 800de86:	0018      	movs	r0, r3
 800de88:	f7f8 fefd 	bl	8006c86 <pbuf_header>
 800de8c:	1e03      	subs	r3, r0, #0
 800de8e:	d00a      	beq.n	800dea6 <ip_output_if+0x4a>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
 800de90:	4bdb      	ldr	r3, [pc, #876]	; (800e200 <ip_output_if+0x3a4>)
 800de92:	225c      	movs	r2, #92	; 0x5c
 800de94:	5a9b      	ldrh	r3, [r3, r2]
 800de96:	3301      	adds	r3, #1
 800de98:	b299      	uxth	r1, r3
 800de9a:	4bd9      	ldr	r3, [pc, #868]	; (800e200 <ip_output_if+0x3a4>)
 800de9c:	225c      	movs	r2, #92	; 0x5c
 800de9e:	5299      	strh	r1, [r3, r2]
      snmp_inc_ipoutdiscards();
      return ERR_BUF;
 800dea0:	2302      	movs	r3, #2
 800dea2:	425b      	negs	r3, r3
 800dea4:	e1a8      	b.n	800e1f8 <ip_output_if+0x39c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	685b      	ldr	r3, [r3, #4]
 800deaa:	61bb      	str	r3, [r7, #24]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800deac:	69bb      	ldr	r3, [r7, #24]
 800deae:	1cfa      	adds	r2, r7, #3
 800deb0:	7812      	ldrb	r2, [r2, #0]
 800deb2:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800deb4:	69bb      	ldr	r3, [r7, #24]
 800deb6:	2134      	movs	r1, #52	; 0x34
 800deb8:	187a      	adds	r2, r7, r1
 800deba:	7812      	ldrb	r2, [r2, #0]
 800debc:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += LWIP_MAKE_U16(proto, ttl);
 800debe:	187b      	adds	r3, r7, r1
 800dec0:	781b      	ldrb	r3, [r3, #0]
 800dec2:	021a      	lsls	r2, r3, #8
 800dec4:	1cfb      	adds	r3, r7, #3
 800dec6:	781b      	ldrb	r3, [r3, #0]
 800dec8:	4313      	orrs	r3, r2
 800deca:	001a      	movs	r2, r3
 800decc:	69fb      	ldr	r3, [r7, #28]
 800dece:	189b      	adds	r3, r3, r2
 800ded0:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip_addr_copy(iphdr->dest, *dest);
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	681a      	ldr	r2, [r3, #0]
 800ded6:	69bb      	ldr	r3, [r7, #24]
 800ded8:	21ff      	movs	r1, #255	; 0xff
 800deda:	4011      	ands	r1, r2
 800dedc:	000c      	movs	r4, r1
 800dede:	7c19      	ldrb	r1, [r3, #16]
 800dee0:	2000      	movs	r0, #0
 800dee2:	4001      	ands	r1, r0
 800dee4:	1c08      	adds	r0, r1, #0
 800dee6:	1c21      	adds	r1, r4, #0
 800dee8:	4301      	orrs	r1, r0
 800deea:	7419      	strb	r1, [r3, #16]
 800deec:	0a11      	lsrs	r1, r2, #8
 800deee:	20ff      	movs	r0, #255	; 0xff
 800def0:	4001      	ands	r1, r0
 800def2:	000c      	movs	r4, r1
 800def4:	7c59      	ldrb	r1, [r3, #17]
 800def6:	2000      	movs	r0, #0
 800def8:	4001      	ands	r1, r0
 800defa:	1c08      	adds	r0, r1, #0
 800defc:	1c21      	adds	r1, r4, #0
 800defe:	4301      	orrs	r1, r0
 800df00:	7459      	strb	r1, [r3, #17]
 800df02:	0c11      	lsrs	r1, r2, #16
 800df04:	20ff      	movs	r0, #255	; 0xff
 800df06:	4001      	ands	r1, r0
 800df08:	000c      	movs	r4, r1
 800df0a:	7c99      	ldrb	r1, [r3, #18]
 800df0c:	2000      	movs	r0, #0
 800df0e:	4001      	ands	r1, r0
 800df10:	1c08      	adds	r0, r1, #0
 800df12:	1c21      	adds	r1, r4, #0
 800df14:	4301      	orrs	r1, r0
 800df16:	7499      	strb	r1, [r3, #18]
 800df18:	0e10      	lsrs	r0, r2, #24
 800df1a:	7cda      	ldrb	r2, [r3, #19]
 800df1c:	2100      	movs	r1, #0
 800df1e:	400a      	ands	r2, r1
 800df20:	1c11      	adds	r1, r2, #0
 800df22:	1c02      	adds	r2, r0, #0
 800df24:	430a      	orrs	r2, r1
 800df26:	74da      	strb	r2, [r3, #19]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
 800df28:	69bb      	ldr	r3, [r7, #24]
 800df2a:	7c1a      	ldrb	r2, [r3, #16]
 800df2c:	7c59      	ldrb	r1, [r3, #17]
 800df2e:	0209      	lsls	r1, r1, #8
 800df30:	430a      	orrs	r2, r1
 800df32:	7c99      	ldrb	r1, [r3, #18]
 800df34:	0409      	lsls	r1, r1, #16
 800df36:	430a      	orrs	r2, r1
 800df38:	7cdb      	ldrb	r3, [r3, #19]
 800df3a:	061b      	lsls	r3, r3, #24
 800df3c:	4313      	orrs	r3, r2
 800df3e:	041b      	lsls	r3, r3, #16
 800df40:	0c1b      	lsrs	r3, r3, #16
 800df42:	69fa      	ldr	r2, [r7, #28]
 800df44:	18d3      	adds	r3, r2, r3
 800df46:	61fb      	str	r3, [r7, #28]
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
 800df48:	69bb      	ldr	r3, [r7, #24]
 800df4a:	7c1a      	ldrb	r2, [r3, #16]
 800df4c:	7c59      	ldrb	r1, [r3, #17]
 800df4e:	0209      	lsls	r1, r1, #8
 800df50:	430a      	orrs	r2, r1
 800df52:	7c99      	ldrb	r1, [r3, #18]
 800df54:	0409      	lsls	r1, r1, #16
 800df56:	430a      	orrs	r2, r1
 800df58:	7cdb      	ldrb	r3, [r3, #19]
 800df5a:	061b      	lsls	r3, r3, #24
 800df5c:	4313      	orrs	r3, r2
 800df5e:	0c1b      	lsrs	r3, r3, #16
 800df60:	69fa      	ldr	r2, [r7, #28]
 800df62:	18d3      	adds	r3, r2, r3
 800df64:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800df66:	2316      	movs	r3, #22
 800df68:	18fb      	adds	r3, r7, r3
 800df6a:	881b      	ldrh	r3, [r3, #0]
 800df6c:	089b      	lsrs	r3, r3, #2
 800df6e:	b29b      	uxth	r3, r3
 800df70:	b2db      	uxtb	r3, r3
 800df72:	2240      	movs	r2, #64	; 0x40
 800df74:	4313      	orrs	r3, r2
 800df76:	b2da      	uxtb	r2, r3
 800df78:	69bb      	ldr	r3, [r7, #24]
 800df7a:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800df7c:	69bb      	ldr	r3, [r7, #24]
 800df7e:	2130      	movs	r1, #48	; 0x30
 800df80:	187a      	adds	r2, r7, r1
 800df82:	7812      	ldrb	r2, [r2, #0]
 800df84:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += LWIP_MAKE_U16(tos, iphdr->_v_hl);
 800df86:	187b      	adds	r3, r7, r1
 800df88:	781b      	ldrb	r3, [r3, #0]
 800df8a:	021b      	lsls	r3, r3, #8
 800df8c:	69ba      	ldr	r2, [r7, #24]
 800df8e:	7812      	ldrb	r2, [r2, #0]
 800df90:	4313      	orrs	r3, r2
 800df92:	001a      	movs	r2, r3
 800df94:	69fb      	ldr	r3, [r7, #28]
 800df96:	189b      	adds	r3, r3, r2
 800df98:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, htons(p->tot_len));
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	891b      	ldrh	r3, [r3, #8]
 800df9e:	0018      	movs	r0, r3
 800dfa0:	f7f7 feb0 	bl	8005d04 <lwip_htons>
 800dfa4:	0003      	movs	r3, r0
 800dfa6:	001a      	movs	r2, r3
 800dfa8:	69bb      	ldr	r3, [r7, #24]
 800dfaa:	21ff      	movs	r1, #255	; 0xff
 800dfac:	4011      	ands	r1, r2
 800dfae:	000c      	movs	r4, r1
 800dfb0:	7899      	ldrb	r1, [r3, #2]
 800dfb2:	2000      	movs	r0, #0
 800dfb4:	4001      	ands	r1, r0
 800dfb6:	1c08      	adds	r0, r1, #0
 800dfb8:	1c21      	adds	r1, r4, #0
 800dfba:	4301      	orrs	r1, r0
 800dfbc:	7099      	strb	r1, [r3, #2]
 800dfbe:	0a12      	lsrs	r2, r2, #8
 800dfc0:	b290      	uxth	r0, r2
 800dfc2:	78da      	ldrb	r2, [r3, #3]
 800dfc4:	2100      	movs	r1, #0
 800dfc6:	400a      	ands	r2, r1
 800dfc8:	1c11      	adds	r1, r2, #0
 800dfca:	1c02      	adds	r2, r0, #0
 800dfcc:	430a      	orrs	r2, r1
 800dfce:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
 800dfd0:	69bb      	ldr	r3, [r7, #24]
 800dfd2:	789a      	ldrb	r2, [r3, #2]
 800dfd4:	78db      	ldrb	r3, [r3, #3]
 800dfd6:	021b      	lsls	r3, r3, #8
 800dfd8:	4313      	orrs	r3, r2
 800dfda:	b29b      	uxth	r3, r3
 800dfdc:	001a      	movs	r2, r3
 800dfde:	69fb      	ldr	r3, [r7, #28]
 800dfe0:	189b      	adds	r3, r3, r2
 800dfe2:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800dfe4:	69bb      	ldr	r3, [r7, #24]
 800dfe6:	799a      	ldrb	r2, [r3, #6]
 800dfe8:	2100      	movs	r1, #0
 800dfea:	400a      	ands	r2, r1
 800dfec:	719a      	strb	r2, [r3, #6]
 800dfee:	79da      	ldrb	r2, [r3, #7]
 800dff0:	2100      	movs	r1, #0
 800dff2:	400a      	ands	r2, r1
 800dff4:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, htons(ip_id));
 800dff6:	4b83      	ldr	r3, [pc, #524]	; (800e204 <ip_output_if+0x3a8>)
 800dff8:	881b      	ldrh	r3, [r3, #0]
 800dffa:	0018      	movs	r0, r3
 800dffc:	f7f7 fe82 	bl	8005d04 <lwip_htons>
 800e000:	0003      	movs	r3, r0
 800e002:	001a      	movs	r2, r3
 800e004:	69bb      	ldr	r3, [r7, #24]
 800e006:	21ff      	movs	r1, #255	; 0xff
 800e008:	4011      	ands	r1, r2
 800e00a:	000c      	movs	r4, r1
 800e00c:	7919      	ldrb	r1, [r3, #4]
 800e00e:	2000      	movs	r0, #0
 800e010:	4001      	ands	r1, r0
 800e012:	1c08      	adds	r0, r1, #0
 800e014:	1c21      	adds	r1, r4, #0
 800e016:	4301      	orrs	r1, r0
 800e018:	7119      	strb	r1, [r3, #4]
 800e01a:	0a12      	lsrs	r2, r2, #8
 800e01c:	b290      	uxth	r0, r2
 800e01e:	795a      	ldrb	r2, [r3, #5]
 800e020:	2100      	movs	r1, #0
 800e022:	400a      	ands	r2, r1
 800e024:	1c11      	adds	r1, r2, #0
 800e026:	1c02      	adds	r2, r0, #0
 800e028:	430a      	orrs	r2, r1
 800e02a:	715a      	strb	r2, [r3, #5]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
 800e02c:	69bb      	ldr	r3, [r7, #24]
 800e02e:	791a      	ldrb	r2, [r3, #4]
 800e030:	795b      	ldrb	r3, [r3, #5]
 800e032:	021b      	lsls	r3, r3, #8
 800e034:	4313      	orrs	r3, r2
 800e036:	b29b      	uxth	r3, r3
 800e038:	001a      	movs	r2, r3
 800e03a:	69fb      	ldr	r3, [r7, #28]
 800e03c:	189b      	adds	r3, r3, r2
 800e03e:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800e040:	4b70      	ldr	r3, [pc, #448]	; (800e204 <ip_output_if+0x3a8>)
 800e042:	881b      	ldrh	r3, [r3, #0]
 800e044:	3301      	adds	r3, #1
 800e046:	b29a      	uxth	r2, r3
 800e048:	4b6e      	ldr	r3, [pc, #440]	; (800e204 <ip_output_if+0x3a8>)
 800e04a:	801a      	strh	r2, [r3, #0]

    if (ip_addr_isany(src)) {
 800e04c:	68bb      	ldr	r3, [r7, #8]
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d003      	beq.n	800e05a <ip_output_if+0x1fe>
 800e052:	68bb      	ldr	r3, [r7, #8]
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	2b00      	cmp	r3, #0
 800e058:	d12b      	bne.n	800e0b2 <ip_output_if+0x256>
      ip_addr_copy(iphdr->src, netif->ip_addr);
 800e05a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e05c:	685a      	ldr	r2, [r3, #4]
 800e05e:	69bb      	ldr	r3, [r7, #24]
 800e060:	21ff      	movs	r1, #255	; 0xff
 800e062:	4011      	ands	r1, r2
 800e064:	000c      	movs	r4, r1
 800e066:	7b19      	ldrb	r1, [r3, #12]
 800e068:	2000      	movs	r0, #0
 800e06a:	4001      	ands	r1, r0
 800e06c:	1c08      	adds	r0, r1, #0
 800e06e:	1c21      	adds	r1, r4, #0
 800e070:	4301      	orrs	r1, r0
 800e072:	7319      	strb	r1, [r3, #12]
 800e074:	0a11      	lsrs	r1, r2, #8
 800e076:	20ff      	movs	r0, #255	; 0xff
 800e078:	4001      	ands	r1, r0
 800e07a:	000c      	movs	r4, r1
 800e07c:	7b59      	ldrb	r1, [r3, #13]
 800e07e:	2000      	movs	r0, #0
 800e080:	4001      	ands	r1, r0
 800e082:	1c08      	adds	r0, r1, #0
 800e084:	1c21      	adds	r1, r4, #0
 800e086:	4301      	orrs	r1, r0
 800e088:	7359      	strb	r1, [r3, #13]
 800e08a:	0c11      	lsrs	r1, r2, #16
 800e08c:	20ff      	movs	r0, #255	; 0xff
 800e08e:	4001      	ands	r1, r0
 800e090:	000c      	movs	r4, r1
 800e092:	7b99      	ldrb	r1, [r3, #14]
 800e094:	2000      	movs	r0, #0
 800e096:	4001      	ands	r1, r0
 800e098:	1c08      	adds	r0, r1, #0
 800e09a:	1c21      	adds	r1, r4, #0
 800e09c:	4301      	orrs	r1, r0
 800e09e:	7399      	strb	r1, [r3, #14]
 800e0a0:	0e10      	lsrs	r0, r2, #24
 800e0a2:	7bda      	ldrb	r2, [r3, #15]
 800e0a4:	2100      	movs	r1, #0
 800e0a6:	400a      	ands	r2, r1
 800e0a8:	1c11      	adds	r1, r2, #0
 800e0aa:	1c02      	adds	r2, r0, #0
 800e0ac:	430a      	orrs	r2, r1
 800e0ae:	73da      	strb	r2, [r3, #15]
 800e0b0:	e02a      	b.n	800e108 <ip_output_if+0x2ac>
    } else {
      /* src cannot be NULL here */
      ip_addr_copy(iphdr->src, *src);
 800e0b2:	68bb      	ldr	r3, [r7, #8]
 800e0b4:	681a      	ldr	r2, [r3, #0]
 800e0b6:	69bb      	ldr	r3, [r7, #24]
 800e0b8:	21ff      	movs	r1, #255	; 0xff
 800e0ba:	4011      	ands	r1, r2
 800e0bc:	000c      	movs	r4, r1
 800e0be:	7b19      	ldrb	r1, [r3, #12]
 800e0c0:	2000      	movs	r0, #0
 800e0c2:	4001      	ands	r1, r0
 800e0c4:	1c08      	adds	r0, r1, #0
 800e0c6:	1c21      	adds	r1, r4, #0
 800e0c8:	4301      	orrs	r1, r0
 800e0ca:	7319      	strb	r1, [r3, #12]
 800e0cc:	0a11      	lsrs	r1, r2, #8
 800e0ce:	20ff      	movs	r0, #255	; 0xff
 800e0d0:	4001      	ands	r1, r0
 800e0d2:	000c      	movs	r4, r1
 800e0d4:	7b59      	ldrb	r1, [r3, #13]
 800e0d6:	2000      	movs	r0, #0
 800e0d8:	4001      	ands	r1, r0
 800e0da:	1c08      	adds	r0, r1, #0
 800e0dc:	1c21      	adds	r1, r4, #0
 800e0de:	4301      	orrs	r1, r0
 800e0e0:	7359      	strb	r1, [r3, #13]
 800e0e2:	0c11      	lsrs	r1, r2, #16
 800e0e4:	20ff      	movs	r0, #255	; 0xff
 800e0e6:	4001      	ands	r1, r0
 800e0e8:	000c      	movs	r4, r1
 800e0ea:	7b99      	ldrb	r1, [r3, #14]
 800e0ec:	2000      	movs	r0, #0
 800e0ee:	4001      	ands	r1, r0
 800e0f0:	1c08      	adds	r0, r1, #0
 800e0f2:	1c21      	adds	r1, r4, #0
 800e0f4:	4301      	orrs	r1, r0
 800e0f6:	7399      	strb	r1, [r3, #14]
 800e0f8:	0e10      	lsrs	r0, r2, #24
 800e0fa:	7bda      	ldrb	r2, [r3, #15]
 800e0fc:	2100      	movs	r1, #0
 800e0fe:	400a      	ands	r2, r1
 800e100:	1c11      	adds	r1, r2, #0
 800e102:	1c02      	adds	r2, r0, #0
 800e104:	430a      	orrs	r2, r1
 800e106:	73da      	strb	r2, [r3, #15]
    }

#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->src) & 0xFFFF;
 800e108:	69bb      	ldr	r3, [r7, #24]
 800e10a:	7b1a      	ldrb	r2, [r3, #12]
 800e10c:	7b59      	ldrb	r1, [r3, #13]
 800e10e:	0209      	lsls	r1, r1, #8
 800e110:	430a      	orrs	r2, r1
 800e112:	7b99      	ldrb	r1, [r3, #14]
 800e114:	0409      	lsls	r1, r1, #16
 800e116:	430a      	orrs	r2, r1
 800e118:	7bdb      	ldrb	r3, [r3, #15]
 800e11a:	061b      	lsls	r3, r3, #24
 800e11c:	4313      	orrs	r3, r2
 800e11e:	041b      	lsls	r3, r3, #16
 800e120:	0c1b      	lsrs	r3, r3, #16
 800e122:	69fa      	ldr	r2, [r7, #28]
 800e124:	18d3      	adds	r3, r2, r3
 800e126:	61fb      	str	r3, [r7, #28]
    chk_sum += ip4_addr_get_u32(&iphdr->src) >> 16;
 800e128:	69bb      	ldr	r3, [r7, #24]
 800e12a:	7b1a      	ldrb	r2, [r3, #12]
 800e12c:	7b59      	ldrb	r1, [r3, #13]
 800e12e:	0209      	lsls	r1, r1, #8
 800e130:	430a      	orrs	r2, r1
 800e132:	7b99      	ldrb	r1, [r3, #14]
 800e134:	0409      	lsls	r1, r1, #16
 800e136:	430a      	orrs	r2, r1
 800e138:	7bdb      	ldrb	r3, [r3, #15]
 800e13a:	061b      	lsls	r3, r3, #24
 800e13c:	4313      	orrs	r3, r2
 800e13e:	0c1b      	lsrs	r3, r3, #16
 800e140:	69fa      	ldr	r2, [r7, #28]
 800e142:	18d3      	adds	r3, r2, r3
 800e144:	61fb      	str	r3, [r7, #28]
    chk_sum = (chk_sum >> 16) + (chk_sum & 0xFFFF);
 800e146:	69fb      	ldr	r3, [r7, #28]
 800e148:	0c1a      	lsrs	r2, r3, #16
 800e14a:	69fb      	ldr	r3, [r7, #28]
 800e14c:	041b      	lsls	r3, r3, #16
 800e14e:	0c1b      	lsrs	r3, r3, #16
 800e150:	18d3      	adds	r3, r2, r3
 800e152:	61fb      	str	r3, [r7, #28]
    chk_sum = (chk_sum >> 16) + chk_sum;
 800e154:	69fb      	ldr	r3, [r7, #28]
 800e156:	0c1b      	lsrs	r3, r3, #16
 800e158:	69fa      	ldr	r2, [r7, #28]
 800e15a:	18d3      	adds	r3, r2, r3
 800e15c:	61fb      	str	r3, [r7, #28]
    chk_sum = ~chk_sum;
 800e15e:	69fb      	ldr	r3, [r7, #28]
 800e160:	43db      	mvns	r3, r3
 800e162:	61fb      	str	r3, [r7, #28]
    iphdr->_chksum = chk_sum; /* network order */
 800e164:	69fb      	ldr	r3, [r7, #28]
 800e166:	b29a      	uxth	r2, r3
 800e168:	69bb      	ldr	r3, [r7, #24]
 800e16a:	21ff      	movs	r1, #255	; 0xff
 800e16c:	4011      	ands	r1, r2
 800e16e:	000c      	movs	r4, r1
 800e170:	7a99      	ldrb	r1, [r3, #10]
 800e172:	2000      	movs	r0, #0
 800e174:	4001      	ands	r1, r0
 800e176:	1c08      	adds	r0, r1, #0
 800e178:	1c21      	adds	r1, r4, #0
 800e17a:	4301      	orrs	r1, r0
 800e17c:	7299      	strb	r1, [r3, #10]
 800e17e:	0a12      	lsrs	r2, r2, #8
 800e180:	b290      	uxth	r0, r2
 800e182:	7ada      	ldrb	r2, [r3, #11]
 800e184:	2100      	movs	r1, #0
 800e186:	400a      	ands	r2, r1
 800e188:	1c11      	adds	r1, r2, #0
 800e18a:	1c02      	adds	r2, r0, #0
 800e18c:	430a      	orrs	r2, r1
 800e18e:	72da      	strb	r2, [r3, #11]
 800e190:	e011      	b.n	800e1b6 <ip_output_if+0x35a>
    IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, ip_hlen));
#endif
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	685b      	ldr	r3, [r3, #4]
 800e196:	61bb      	str	r3, [r7, #24]
    ip_addr_copy(dest_addr, iphdr->dest);
 800e198:	69bb      	ldr	r3, [r7, #24]
 800e19a:	7c1a      	ldrb	r2, [r3, #16]
 800e19c:	7c59      	ldrb	r1, [r3, #17]
 800e19e:	0209      	lsls	r1, r1, #8
 800e1a0:	430a      	orrs	r2, r1
 800e1a2:	7c99      	ldrb	r1, [r3, #18]
 800e1a4:	0409      	lsls	r1, r1, #16
 800e1a6:	430a      	orrs	r2, r1
 800e1a8:	7cdb      	ldrb	r3, [r3, #19]
 800e1aa:	061b      	lsls	r3, r3, #24
 800e1ac:	4313      	orrs	r3, r2
 800e1ae:	613b      	str	r3, [r7, #16]
    dest = &dest_addr;
 800e1b0:	2310      	movs	r3, #16
 800e1b2:	18fb      	adds	r3, r7, r3
 800e1b4:	607b      	str	r3, [r7, #4]
  }

  IP_STATS_INC(ip.xmit);
 800e1b6:	4b12      	ldr	r3, [pc, #72]	; (800e200 <ip_output_if+0x3a4>)
 800e1b8:	2248      	movs	r2, #72	; 0x48
 800e1ba:	5a9b      	ldrh	r3, [r3, r2]
 800e1bc:	3301      	adds	r3, #1
 800e1be:	b299      	uxth	r1, r3
 800e1c0:	4b0f      	ldr	r3, [pc, #60]	; (800e200 <ip_output_if+0x3a4>)
 800e1c2:	2248      	movs	r2, #72	; 0x48
 800e1c4:	5299      	strh	r1, [r3, r2]
  }
#endif /* LWIP_IGMP */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800e1c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1c8:	8c1b      	ldrh	r3, [r3, #32]
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d00d      	beq.n	800e1ea <ip_output_if+0x38e>
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	891a      	ldrh	r2, [r3, #8]
 800e1d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1d4:	8c1b      	ldrh	r3, [r3, #32]
 800e1d6:	429a      	cmp	r2, r3
 800e1d8:	d907      	bls.n	800e1ea <ip_output_if+0x38e>
    return ip_frag(p, netif, dest);
 800e1da:	687a      	ldr	r2, [r7, #4]
 800e1dc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	0018      	movs	r0, r3
 800e1e2:	f000 fdf5 	bl	800edd0 <ip_frag>
 800e1e6:	0003      	movs	r3, r0
 800e1e8:	e006      	b.n	800e1f8 <ip_output_if+0x39c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("netif->output()"));
  return netif->output(netif, p, dest);
 800e1ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1ec:	695b      	ldr	r3, [r3, #20]
 800e1ee:	687a      	ldr	r2, [r7, #4]
 800e1f0:	68f9      	ldr	r1, [r7, #12]
 800e1f2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e1f4:	4798      	blx	r3
 800e1f6:	0003      	movs	r3, r0
}
 800e1f8:	0018      	movs	r0, r3
 800e1fa:	46bd      	mov	sp, r7
 800e1fc:	b009      	add	sp, #36	; 0x24
 800e1fe:	bd90      	pop	{r4, r7, pc}
 800e200:	2000340c 	.word	0x2000340c
 800e204:	2000273c 	.word	0x2000273c

0800e208 <ip_output>:
 *         see ip_output_if() for more return values
 */
err_t
ip_output(struct pbuf *p, ip_addr_t *src, ip_addr_t *dest,
          u8_t ttl, u8_t tos, u8_t proto)
{
 800e208:	b590      	push	{r4, r7, lr}
 800e20a:	b08b      	sub	sp, #44	; 0x2c
 800e20c:	af04      	add	r7, sp, #16
 800e20e:	60f8      	str	r0, [r7, #12]
 800e210:	60b9      	str	r1, [r7, #8]
 800e212:	607a      	str	r2, [r7, #4]
 800e214:	001a      	movs	r2, r3
 800e216:	1cfb      	adds	r3, r7, #3
 800e218:	701a      	strb	r2, [r3, #0]

  /* pbufs passed to IP must have a ref-count of 1 as their payload pointer
     gets altered as the packet is passed down the stack */
  LWIP_ASSERT("p->ref == 1", p->ref == 1);

  if ((netif = ip_route(dest)) == NULL) {
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	0018      	movs	r0, r3
 800e21e:	f7ff fc0f 	bl	800da40 <ip_route>
 800e222:	0003      	movs	r3, r0
 800e224:	617b      	str	r3, [r7, #20]
 800e226:	697b      	ldr	r3, [r7, #20]
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d10a      	bne.n	800e242 <ip_output+0x3a>
    LWIP_DEBUGF(IP_DEBUG, ("ip_output: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
 800e22c:	4b10      	ldr	r3, [pc, #64]	; (800e270 <ip_output+0x68>)
 800e22e:	2256      	movs	r2, #86	; 0x56
 800e230:	5a9b      	ldrh	r3, [r3, r2]
 800e232:	3301      	adds	r3, #1
 800e234:	b299      	uxth	r1, r3
 800e236:	4b0e      	ldr	r3, [pc, #56]	; (800e270 <ip_output+0x68>)
 800e238:	2256      	movs	r2, #86	; 0x56
 800e23a:	5299      	strh	r1, [r3, r2]
    return ERR_RTE;
 800e23c:	2304      	movs	r3, #4
 800e23e:	425b      	negs	r3, r3
 800e240:	e012      	b.n	800e268 <ip_output+0x60>
  }

  return ip_output_if(p, src, dest, ttl, tos, proto, netif);
 800e242:	1cfb      	adds	r3, r7, #3
 800e244:	781c      	ldrb	r4, [r3, #0]
 800e246:	687a      	ldr	r2, [r7, #4]
 800e248:	68b9      	ldr	r1, [r7, #8]
 800e24a:	68f8      	ldr	r0, [r7, #12]
 800e24c:	697b      	ldr	r3, [r7, #20]
 800e24e:	9302      	str	r3, [sp, #8]
 800e250:	232c      	movs	r3, #44	; 0x2c
 800e252:	18fb      	adds	r3, r7, r3
 800e254:	781b      	ldrb	r3, [r3, #0]
 800e256:	9301      	str	r3, [sp, #4]
 800e258:	2328      	movs	r3, #40	; 0x28
 800e25a:	18fb      	adds	r3, r7, r3
 800e25c:	781b      	ldrb	r3, [r3, #0]
 800e25e:	9300      	str	r3, [sp, #0]
 800e260:	0023      	movs	r3, r4
 800e262:	f7ff fdfb 	bl	800de5c <ip_output_if>
 800e266:	0003      	movs	r3, r0
}
 800e268:	0018      	movs	r0, r3
 800e26a:	46bd      	mov	sp, r7
 800e26c:	b007      	add	sp, #28
 800e26e:	bd90      	pop	{r4, r7, pc}
 800e270:	2000340c 	.word	0x2000340c

0800e274 <ip4_addr_isbroadcast>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast(u32_t addr, const struct netif *netif)
{
 800e274:	b580      	push	{r7, lr}
 800e276:	b084      	sub	sp, #16
 800e278:	af00      	add	r7, sp, #0
 800e27a:	6078      	str	r0, [r7, #4]
 800e27c:	6039      	str	r1, [r7, #0]
  ip_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	3301      	adds	r3, #1
 800e286:	d002      	beq.n	800e28e <ip4_addr_isbroadcast+0x1a>
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d101      	bne.n	800e292 <ip4_addr_isbroadcast+0x1e>
      (addr == IPADDR_ANY)) {
    return 1;
 800e28e:	2301      	movs	r3, #1
 800e290:	e024      	b.n	800e2dc <ip4_addr_isbroadcast+0x68>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800e292:	683b      	ldr	r3, [r7, #0]
 800e294:	2229      	movs	r2, #41	; 0x29
 800e296:	5c9b      	ldrb	r3, [r3, r2]
 800e298:	001a      	movs	r2, r3
 800e29a:	2302      	movs	r3, #2
 800e29c:	4013      	ands	r3, r2
 800e29e:	d101      	bne.n	800e2a4 <ip4_addr_isbroadcast+0x30>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800e2a0:	2300      	movs	r3, #0
 800e2a2:	e01b      	b.n	800e2dc <ip4_addr_isbroadcast+0x68>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(&netif->ip_addr)) {
 800e2a4:	683b      	ldr	r3, [r7, #0]
 800e2a6:	685b      	ldr	r3, [r3, #4]
 800e2a8:	687a      	ldr	r2, [r7, #4]
 800e2aa:	429a      	cmp	r2, r3
 800e2ac:	d101      	bne.n	800e2b2 <ip4_addr_isbroadcast+0x3e>
    return 0;
 800e2ae:	2300      	movs	r3, #0
 800e2b0:	e014      	b.n	800e2dc <ip4_addr_isbroadcast+0x68>
  /*  on the same (sub) network... */
  } else if (ip_addr_netcmp(&ipaddr, &(netif->ip_addr), &(netif->netmask))
 800e2b2:	68fa      	ldr	r2, [r7, #12]
 800e2b4:	683b      	ldr	r3, [r7, #0]
 800e2b6:	685b      	ldr	r3, [r3, #4]
 800e2b8:	405a      	eors	r2, r3
 800e2ba:	683b      	ldr	r3, [r7, #0]
 800e2bc:	689b      	ldr	r3, [r3, #8]
 800e2be:	4013      	ands	r3, r2
 800e2c0:	d10b      	bne.n	800e2da <ip4_addr_isbroadcast+0x66>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(&netif->netmask)) ==
 800e2c2:	683b      	ldr	r3, [r7, #0]
 800e2c4:	689b      	ldr	r3, [r3, #8]
 800e2c6:	43db      	mvns	r3, r3
 800e2c8:	687a      	ldr	r2, [r7, #4]
 800e2ca:	401a      	ands	r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(&netif->netmask)))) {
 800e2cc:	683b      	ldr	r3, [r7, #0]
 800e2ce:	689b      	ldr	r3, [r3, #8]
 800e2d0:	43db      	mvns	r3, r3
          && ((addr & ~ip4_addr_get_u32(&netif->netmask)) ==
 800e2d2:	429a      	cmp	r2, r3
 800e2d4:	d101      	bne.n	800e2da <ip4_addr_isbroadcast+0x66>
    /* => network broadcast address */
    return 1;
 800e2d6:	2301      	movs	r3, #1
 800e2d8:	e000      	b.n	800e2dc <ip4_addr_isbroadcast+0x68>
  } else {
    return 0;
 800e2da:	2300      	movs	r3, #0
  }
}
 800e2dc:	0018      	movs	r0, r3
 800e2de:	46bd      	mov	sp, r7
 800e2e0:	b004      	add	sp, #16
 800e2e2:	bd80      	pop	{r7, pc}

0800e2e4 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800e2e4:	b580      	push	{r7, lr}
 800e2e6:	b084      	sub	sp, #16
 800e2e8:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800e2ea:	2300      	movs	r3, #0
 800e2ec:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800e2ee:	4b13      	ldr	r3, [pc, #76]	; (800e33c <ip_reass_tmr+0x58>)
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800e2f4:	e01a      	b.n	800e32c <ip_reass_tmr+0x48>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	7fdb      	ldrb	r3, [r3, #31]
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d00b      	beq.n	800e316 <ip_reass_tmr+0x32>
      r->timer--;
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	7fdb      	ldrb	r3, [r3, #31]
 800e302:	3b01      	subs	r3, #1
 800e304:	b2da      	uxtb	r2, r3
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800e30e:	68fb      	ldr	r3, [r7, #12]
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	60fb      	str	r3, [r7, #12]
 800e314:	e00a      	b.n	800e32c <ip_reass_tmr+0x48>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800e320:	68ba      	ldr	r2, [r7, #8]
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	0011      	movs	r1, r2
 800e326:	0018      	movs	r0, r3
 800e328:	f000 f80a 	bl	800e340 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d1e1      	bne.n	800e2f6 <ip_reass_tmr+0x12>
     }
   }
}
 800e332:	46c0      	nop			; (mov r8, r8)
 800e334:	46bd      	mov	sp, r7
 800e336:	b004      	add	sp, #16
 800e338:	bd80      	pop	{r7, pc}
 800e33a:	46c0      	nop			; (mov r8, r8)
 800e33c:	20002740 	.word	0x20002740

0800e340 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800e340:	b5b0      	push	{r4, r5, r7, lr}
 800e342:	b088      	sub	sp, #32
 800e344:	af00      	add	r7, sp, #0
 800e346:	6078      	str	r0, [r7, #4]
 800e348:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800e34a:	231e      	movs	r3, #30
 800e34c:	18fb      	adds	r3, r7, r3
 800e34e:	2200      	movs	r2, #0
 800e350:	801a      	strh	r2, [r3, #0]
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
  }

  snmp_inc_ipreasmfails();
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	685b      	ldr	r3, [r3, #4]
 800e356:	685b      	ldr	r3, [r3, #4]
 800e358:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800e35a:	697b      	ldr	r3, [r7, #20]
 800e35c:	791a      	ldrb	r2, [r3, #4]
 800e35e:	795b      	ldrb	r3, [r3, #5]
 800e360:	021b      	lsls	r3, r3, #8
 800e362:	4313      	orrs	r3, r2
 800e364:	b29b      	uxth	r3, r3
 800e366:	2b00      	cmp	r3, #0
 800e368:	d132      	bne.n	800e3d0 <ip_reass_free_complete_datagram+0x90>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	685b      	ldr	r3, [r3, #4]
 800e36e:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800e370:	697b      	ldr	r3, [r7, #20]
 800e372:	781a      	ldrb	r2, [r3, #0]
 800e374:	7859      	ldrb	r1, [r3, #1]
 800e376:	0209      	lsls	r1, r1, #8
 800e378:	430a      	orrs	r2, r1
 800e37a:	7899      	ldrb	r1, [r3, #2]
 800e37c:	0409      	lsls	r1, r1, #16
 800e37e:	430a      	orrs	r2, r1
 800e380:	78db      	ldrb	r3, [r3, #3]
 800e382:	061b      	lsls	r3, r3, #24
 800e384:	4313      	orrs	r3, r2
 800e386:	001a      	movs	r2, r3
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800e38c:	69bb      	ldr	r3, [r7, #24]
 800e38e:	6858      	ldr	r0, [r3, #4]
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	3308      	adds	r3, #8
 800e394:	2214      	movs	r2, #20
 800e396:	0019      	movs	r1, r3
 800e398:	f003 fe5d 	bl	8012056 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800e39c:	69bb      	ldr	r3, [r7, #24]
 800e39e:	2101      	movs	r1, #1
 800e3a0:	0018      	movs	r0, r3
 800e3a2:	f7ff f941 	bl	800d628 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800e3a6:	2513      	movs	r5, #19
 800e3a8:	197c      	adds	r4, r7, r5
 800e3aa:	69bb      	ldr	r3, [r7, #24]
 800e3ac:	0018      	movs	r0, r3
 800e3ae:	f7f8 fd63 	bl	8006e78 <pbuf_clen>
 800e3b2:	0003      	movs	r3, r0
 800e3b4:	7023      	strb	r3, [r4, #0]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
    pbufs_freed += clen;
 800e3b6:	197b      	adds	r3, r7, r5
 800e3b8:	781b      	ldrb	r3, [r3, #0]
 800e3ba:	b299      	uxth	r1, r3
 800e3bc:	221e      	movs	r2, #30
 800e3be:	18bb      	adds	r3, r7, r2
 800e3c0:	18ba      	adds	r2, r7, r2
 800e3c2:	8812      	ldrh	r2, [r2, #0]
 800e3c4:	188a      	adds	r2, r1, r2
 800e3c6:	801a      	strh	r2, [r3, #0]
    pbuf_free(p);
 800e3c8:	69bb      	ldr	r3, [r7, #24]
 800e3ca:	0018      	movs	r0, r3
 800e3cc:	f7f8 fce2 	bl	8006d94 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released 
     separately as they have not yet been chained */
  p = ipr->p;
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	685b      	ldr	r3, [r3, #4]
 800e3d4:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800e3d6:	e026      	b.n	800e426 <ip_reass_free_complete_datagram+0xe6>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800e3d8:	69bb      	ldr	r3, [r7, #24]
 800e3da:	685b      	ldr	r3, [r3, #4]
 800e3dc:	617b      	str	r3, [r7, #20]
    pcur = p;
 800e3de:	69bb      	ldr	r3, [r7, #24]
 800e3e0:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800e3e2:	697b      	ldr	r3, [r7, #20]
 800e3e4:	781a      	ldrb	r2, [r3, #0]
 800e3e6:	7859      	ldrb	r1, [r3, #1]
 800e3e8:	0209      	lsls	r1, r1, #8
 800e3ea:	430a      	orrs	r2, r1
 800e3ec:	7899      	ldrb	r1, [r3, #2]
 800e3ee:	0409      	lsls	r1, r1, #16
 800e3f0:	430a      	orrs	r2, r1
 800e3f2:	78db      	ldrb	r3, [r3, #3]
 800e3f4:	061b      	lsls	r3, r3, #24
 800e3f6:	4313      	orrs	r3, r2
 800e3f8:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800e3fa:	2313      	movs	r3, #19
 800e3fc:	18fc      	adds	r4, r7, r3
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	0018      	movs	r0, r3
 800e402:	f7f8 fd39 	bl	8006e78 <pbuf_clen>
 800e406:	0003      	movs	r3, r0
 800e408:	7023      	strb	r3, [r4, #0]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
    pbufs_freed += clen;
 800e40a:	2313      	movs	r3, #19
 800e40c:	18fb      	adds	r3, r7, r3
 800e40e:	781b      	ldrb	r3, [r3, #0]
 800e410:	b299      	uxth	r1, r3
 800e412:	221e      	movs	r2, #30
 800e414:	18bb      	adds	r3, r7, r2
 800e416:	18ba      	adds	r2, r7, r2
 800e418:	8812      	ldrh	r2, [r2, #0]
 800e41a:	188a      	adds	r2, r1, r2
 800e41c:	801a      	strh	r2, [r3, #0]
    pbuf_free(pcur);
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	0018      	movs	r0, r3
 800e422:	f7f8 fcb7 	bl	8006d94 <pbuf_free>
  while (p != NULL) {
 800e426:	69bb      	ldr	r3, [r7, #24]
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d1d5      	bne.n	800e3d8 <ip_reass_free_complete_datagram+0x98>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800e42c:	683a      	ldr	r2, [r7, #0]
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	0011      	movs	r1, r2
 800e432:	0018      	movs	r0, r3
 800e434:	f000 f8ce 	bl	800e5d4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
  ip_reass_pbufcount -= pbufs_freed;
 800e438:	4b07      	ldr	r3, [pc, #28]	; (800e458 <ip_reass_free_complete_datagram+0x118>)
 800e43a:	881a      	ldrh	r2, [r3, #0]
 800e43c:	211e      	movs	r1, #30
 800e43e:	187b      	adds	r3, r7, r1
 800e440:	881b      	ldrh	r3, [r3, #0]
 800e442:	1ad3      	subs	r3, r2, r3
 800e444:	b29a      	uxth	r2, r3
 800e446:	4b04      	ldr	r3, [pc, #16]	; (800e458 <ip_reass_free_complete_datagram+0x118>)
 800e448:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800e44a:	187b      	adds	r3, r7, r1
 800e44c:	881b      	ldrh	r3, [r3, #0]
}
 800e44e:	0018      	movs	r0, r3
 800e450:	46bd      	mov	sp, r7
 800e452:	b008      	add	sp, #32
 800e454:	bdb0      	pop	{r4, r5, r7, pc}
 800e456:	46c0      	nop			; (mov r8, r8)
 800e458:	20002744 	.word	0x20002744

0800e45c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800e45c:	b580      	push	{r7, lr}
 800e45e:	b088      	sub	sp, #32
 800e460:	af00      	add	r7, sp, #0
 800e462:	6078      	str	r0, [r7, #4]
 800e464:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800e466:	2300      	movs	r3, #0
 800e468:	613b      	str	r3, [r7, #16]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800e46a:	2300      	movs	r3, #0
 800e46c:	61bb      	str	r3, [r7, #24]
    prev = NULL;
 800e46e:	2300      	movs	r3, #0
 800e470:	617b      	str	r3, [r7, #20]
    other_datagrams = 0;
 800e472:	2300      	movs	r3, #0
 800e474:	60fb      	str	r3, [r7, #12]
    r = reassdatagrams;
 800e476:	4b32      	ldr	r3, [pc, #200]	; (800e540 <ip_reass_remove_oldest_datagram+0xe4>)
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	61fb      	str	r3, [r7, #28]
    while (r != NULL) {
 800e47c:	e041      	b.n	800e502 <ip_reass_remove_oldest_datagram+0xa6>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800e47e:	69fb      	ldr	r3, [r7, #28]
 800e480:	695a      	ldr	r2, [r3, #20]
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	7b19      	ldrb	r1, [r3, #12]
 800e486:	7b58      	ldrb	r0, [r3, #13]
 800e488:	0200      	lsls	r0, r0, #8
 800e48a:	4301      	orrs	r1, r0
 800e48c:	7b98      	ldrb	r0, [r3, #14]
 800e48e:	0400      	lsls	r0, r0, #16
 800e490:	4301      	orrs	r1, r0
 800e492:	7bdb      	ldrb	r3, [r3, #15]
 800e494:	061b      	lsls	r3, r3, #24
 800e496:	430b      	orrs	r3, r1
 800e498:	429a      	cmp	r2, r3
 800e49a:	d118      	bne.n	800e4ce <ip_reass_remove_oldest_datagram+0x72>
 800e49c:	69fb      	ldr	r3, [r7, #28]
 800e49e:	699a      	ldr	r2, [r3, #24]
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	7c19      	ldrb	r1, [r3, #16]
 800e4a4:	7c58      	ldrb	r0, [r3, #17]
 800e4a6:	0200      	lsls	r0, r0, #8
 800e4a8:	4301      	orrs	r1, r0
 800e4aa:	7c98      	ldrb	r0, [r3, #18]
 800e4ac:	0400      	lsls	r0, r0, #16
 800e4ae:	4301      	orrs	r1, r0
 800e4b0:	7cdb      	ldrb	r3, [r3, #19]
 800e4b2:	061b      	lsls	r3, r3, #24
 800e4b4:	430b      	orrs	r3, r1
 800e4b6:	429a      	cmp	r2, r3
 800e4b8:	d109      	bne.n	800e4ce <ip_reass_remove_oldest_datagram+0x72>
 800e4ba:	69fb      	ldr	r3, [r7, #28]
 800e4bc:	899a      	ldrh	r2, [r3, #12]
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	7919      	ldrb	r1, [r3, #4]
 800e4c2:	795b      	ldrb	r3, [r3, #5]
 800e4c4:	021b      	lsls	r3, r3, #8
 800e4c6:	430b      	orrs	r3, r1
 800e4c8:	b29b      	uxth	r3, r3
 800e4ca:	429a      	cmp	r2, r3
 800e4cc:	d010      	beq.n	800e4f0 <ip_reass_remove_oldest_datagram+0x94>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	3301      	adds	r3, #1
 800e4d2:	60fb      	str	r3, [r7, #12]
        if (oldest == NULL) {
 800e4d4:	69bb      	ldr	r3, [r7, #24]
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d102      	bne.n	800e4e0 <ip_reass_remove_oldest_datagram+0x84>
          oldest = r;
 800e4da:	69fb      	ldr	r3, [r7, #28]
 800e4dc:	61bb      	str	r3, [r7, #24]
 800e4de:	e007      	b.n	800e4f0 <ip_reass_remove_oldest_datagram+0x94>
        } else if (r->timer <= oldest->timer) {
 800e4e0:	69fb      	ldr	r3, [r7, #28]
 800e4e2:	7fda      	ldrb	r2, [r3, #31]
 800e4e4:	69bb      	ldr	r3, [r7, #24]
 800e4e6:	7fdb      	ldrb	r3, [r3, #31]
 800e4e8:	429a      	cmp	r2, r3
 800e4ea:	d801      	bhi.n	800e4f0 <ip_reass_remove_oldest_datagram+0x94>
          /* older than the previous oldest */
          oldest = r;
 800e4ec:	69fb      	ldr	r3, [r7, #28]
 800e4ee:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800e4f0:	69fb      	ldr	r3, [r7, #28]
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d001      	beq.n	800e4fc <ip_reass_remove_oldest_datagram+0xa0>
        prev = r;
 800e4f8:	69fb      	ldr	r3, [r7, #28]
 800e4fa:	617b      	str	r3, [r7, #20]
      }
      r = r->next;
 800e4fc:	69fb      	ldr	r3, [r7, #28]
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	61fb      	str	r3, [r7, #28]
    while (r != NULL) {
 800e502:	69fb      	ldr	r3, [r7, #28]
 800e504:	2b00      	cmp	r3, #0
 800e506:	d1ba      	bne.n	800e47e <ip_reass_remove_oldest_datagram+0x22>
    }
    if (oldest != NULL) {
 800e508:	69bb      	ldr	r3, [r7, #24]
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d00b      	beq.n	800e526 <ip_reass_remove_oldest_datagram+0xca>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, prev);
 800e50e:	697a      	ldr	r2, [r7, #20]
 800e510:	69bb      	ldr	r3, [r7, #24]
 800e512:	0011      	movs	r1, r2
 800e514:	0018      	movs	r0, r3
 800e516:	f7ff ff13 	bl	800e340 <ip_reass_free_complete_datagram>
 800e51a:	0003      	movs	r3, r0
 800e51c:	60bb      	str	r3, [r7, #8]
      pbufs_freed += pbufs_freed_current;
 800e51e:	693a      	ldr	r2, [r7, #16]
 800e520:	68bb      	ldr	r3, [r7, #8]
 800e522:	18d3      	adds	r3, r2, r3
 800e524:	613b      	str	r3, [r7, #16]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800e526:	693a      	ldr	r2, [r7, #16]
 800e528:	683b      	ldr	r3, [r7, #0]
 800e52a:	429a      	cmp	r2, r3
 800e52c:	da02      	bge.n	800e534 <ip_reass_remove_oldest_datagram+0xd8>
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	2b01      	cmp	r3, #1
 800e532:	dc9a      	bgt.n	800e46a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800e534:	693b      	ldr	r3, [r7, #16]
}
 800e536:	0018      	movs	r0, r3
 800e538:	46bd      	mov	sp, r7
 800e53a:	b008      	add	sp, #32
 800e53c:	bd80      	pop	{r7, pc}
 800e53e:	46c0      	nop			; (mov r8, r8)
 800e540:	20002740 	.word	0x20002740

0800e544 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800e544:	b580      	push	{r7, lr}
 800e546:	b084      	sub	sp, #16
 800e548:	af00      	add	r7, sp, #0
 800e54a:	6078      	str	r0, [r7, #4]
 800e54c:	6039      	str	r1, [r7, #0]
  struct ip_reassdata* ipr;
  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800e54e:	2005      	movs	r0, #5
 800e550:	f7f7 ffd8 	bl	8006504 <memp_malloc>
 800e554:	0003      	movs	r3, r0
 800e556:	60fb      	str	r3, [r7, #12]
  if (ipr == NULL) {
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d119      	bne.n	800e592 <ip_reass_enqueue_new_datagram+0x4e>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800e55e:	683a      	ldr	r2, [r7, #0]
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	0011      	movs	r1, r2
 800e564:	0018      	movs	r0, r3
 800e566:	f7ff ff79 	bl	800e45c <ip_reass_remove_oldest_datagram>
 800e56a:	0002      	movs	r2, r0
 800e56c:	683b      	ldr	r3, [r7, #0]
 800e56e:	4293      	cmp	r3, r2
 800e570:	dc04      	bgt.n	800e57c <ip_reass_enqueue_new_datagram+0x38>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800e572:	2005      	movs	r0, #5
 800e574:	f7f7 ffc6 	bl	8006504 <memp_malloc>
 800e578:	0003      	movs	r3, r0
 800e57a:	60fb      	str	r3, [r7, #12]
    }
    if (ipr == NULL)
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d107      	bne.n	800e592 <ip_reass_enqueue_new_datagram+0x4e>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
 800e582:	4b12      	ldr	r3, [pc, #72]	; (800e5cc <ip_reass_enqueue_new_datagram+0x88>)
 800e584:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800e586:	3301      	adds	r3, #1
 800e588:	b29a      	uxth	r2, r3
 800e58a:	4b10      	ldr	r3, [pc, #64]	; (800e5cc <ip_reass_enqueue_new_datagram+0x88>)
 800e58c:	879a      	strh	r2, [r3, #60]	; 0x3c
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
 800e58e:	2300      	movs	r3, #0
 800e590:	e017      	b.n	800e5c2 <ip_reass_enqueue_new_datagram+0x7e>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	2220      	movs	r2, #32
 800e596:	2100      	movs	r1, #0
 800e598:	0018      	movs	r0, r3
 800e59a:	f003 fd65 	bl	8012068 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	2203      	movs	r2, #3
 800e5a2:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800e5a4:	4b0a      	ldr	r3, [pc, #40]	; (800e5d0 <ip_reass_enqueue_new_datagram+0x8c>)
 800e5a6:	681a      	ldr	r2, [r3, #0]
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800e5ac:	4b08      	ldr	r3, [pc, #32]	; (800e5d0 <ip_reass_enqueue_new_datagram+0x8c>)
 800e5ae:	68fa      	ldr	r2, [r7, #12]
 800e5b0:	601a      	str	r2, [r3, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	3308      	adds	r3, #8
 800e5b6:	6879      	ldr	r1, [r7, #4]
 800e5b8:	2214      	movs	r2, #20
 800e5ba:	0018      	movs	r0, r3
 800e5bc:	f003 fd4b 	bl	8012056 <memcpy>
  return ipr;
 800e5c0:	68fb      	ldr	r3, [r7, #12]
}
 800e5c2:	0018      	movs	r0, r3
 800e5c4:	46bd      	mov	sp, r7
 800e5c6:	b004      	add	sp, #16
 800e5c8:	bd80      	pop	{r7, pc}
 800e5ca:	46c0      	nop			; (mov r8, r8)
 800e5cc:	2000340c 	.word	0x2000340c
 800e5d0:	20002740 	.word	0x20002740

0800e5d4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800e5d4:	b580      	push	{r7, lr}
 800e5d6:	b082      	sub	sp, #8
 800e5d8:	af00      	add	r7, sp, #0
 800e5da:	6078      	str	r0, [r7, #4]
 800e5dc:	6039      	str	r1, [r7, #0]
  
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800e5de:	4b0b      	ldr	r3, [pc, #44]	; (800e60c <ip_reass_dequeue_datagram+0x38>)
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	687a      	ldr	r2, [r7, #4]
 800e5e4:	429a      	cmp	r2, r3
 800e5e6:	d104      	bne.n	800e5f2 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	681a      	ldr	r2, [r3, #0]
 800e5ec:	4b07      	ldr	r3, [pc, #28]	; (800e60c <ip_reass_dequeue_datagram+0x38>)
 800e5ee:	601a      	str	r2, [r3, #0]
 800e5f0:	e003      	b.n	800e5fa <ip_reass_dequeue_datagram+0x26>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
    prev->next = ipr->next;
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	681a      	ldr	r2, [r3, #0]
 800e5f6:	683b      	ldr	r3, [r7, #0]
 800e5f8:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reass struct */
  memp_free(MEMP_REASSDATA, ipr);
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	0019      	movs	r1, r3
 800e5fe:	2005      	movs	r0, #5
 800e600:	f7f8 f806 	bl	8006610 <memp_free>
}
 800e604:	46c0      	nop			; (mov r8, r8)
 800e606:	46bd      	mov	sp, r7
 800e608:	b002      	add	sp, #8
 800e60a:	bd80      	pop	{r7, pc}
 800e60c:	20002740 	.word	0x20002740

0800e610 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param new_p points to the pbuf for the current fragment
 * @return 0 if invalid, >0 otherwise
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p)
{
 800e610:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e612:	b08b      	sub	sp, #44	; 0x2c
 800e614:	af00      	add	r7, sp, #0
 800e616:	6078      	str	r0, [r7, #4]
 800e618:	6039      	str	r1, [r7, #0]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 800e61a:	2300      	movs	r3, #0
 800e61c:	623b      	str	r3, [r7, #32]
  struct pbuf *q;
  u16_t offset,len;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800e61e:	2301      	movs	r3, #1
 800e620:	61bb      	str	r3, [r7, #24]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload; 
 800e622:	683b      	ldr	r3, [r7, #0]
 800e624:	685b      	ldr	r3, [r3, #4]
 800e626:	617b      	str	r3, [r7, #20]
  len = ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800e628:	697b      	ldr	r3, [r7, #20]
 800e62a:	789a      	ldrb	r2, [r3, #2]
 800e62c:	78db      	ldrb	r3, [r3, #3]
 800e62e:	021b      	lsls	r3, r3, #8
 800e630:	4313      	orrs	r3, r2
 800e632:	b29b      	uxth	r3, r3
 800e634:	0018      	movs	r0, r3
 800e636:	f7f7 fb7b 	bl	8005d30 <lwip_ntohs>
 800e63a:	0003      	movs	r3, r0
 800e63c:	0019      	movs	r1, r3
 800e63e:	697b      	ldr	r3, [r7, #20]
 800e640:	781b      	ldrb	r3, [r3, #0]
 800e642:	b29b      	uxth	r3, r3
 800e644:	220f      	movs	r2, #15
 800e646:	4013      	ands	r3, r2
 800e648:	b29b      	uxth	r3, r3
 800e64a:	009b      	lsls	r3, r3, #2
 800e64c:	b29a      	uxth	r2, r3
 800e64e:	2612      	movs	r6, #18
 800e650:	19bb      	adds	r3, r7, r6
 800e652:	1a8a      	subs	r2, r1, r2
 800e654:	801a      	strh	r2, [r3, #0]
  offset = (ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800e656:	697b      	ldr	r3, [r7, #20]
 800e658:	799a      	ldrb	r2, [r3, #6]
 800e65a:	79db      	ldrb	r3, [r3, #7]
 800e65c:	021b      	lsls	r3, r3, #8
 800e65e:	4313      	orrs	r3, r2
 800e660:	b29b      	uxth	r3, r3
 800e662:	0018      	movs	r0, r3
 800e664:	f7f7 fb64 	bl	8005d30 <lwip_ntohs>
 800e668:	0003      	movs	r3, r0
 800e66a:	04db      	lsls	r3, r3, #19
 800e66c:	0cdb      	lsrs	r3, r3, #19
 800e66e:	b29a      	uxth	r2, r3
 800e670:	2010      	movs	r0, #16
 800e672:	183b      	adds	r3, r7, r0
 800e674:	00d2      	lsls	r2, r2, #3
 800e676:	801a      	strh	r2, [r3, #0]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
 800e678:	683b      	ldr	r3, [r7, #0]
 800e67a:	685b      	ldr	r3, [r3, #4]
 800e67c:	627b      	str	r3, [r7, #36]	; 0x24
  iprh->next_pbuf = NULL;
 800e67e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e680:	781a      	ldrb	r2, [r3, #0]
 800e682:	2100      	movs	r1, #0
 800e684:	400a      	ands	r2, r1
 800e686:	701a      	strb	r2, [r3, #0]
 800e688:	785a      	ldrb	r2, [r3, #1]
 800e68a:	2100      	movs	r1, #0
 800e68c:	400a      	ands	r2, r1
 800e68e:	705a      	strb	r2, [r3, #1]
 800e690:	789a      	ldrb	r2, [r3, #2]
 800e692:	2100      	movs	r1, #0
 800e694:	400a      	ands	r2, r1
 800e696:	709a      	strb	r2, [r3, #2]
 800e698:	78da      	ldrb	r2, [r3, #3]
 800e69a:	2100      	movs	r1, #0
 800e69c:	400a      	ands	r2, r1
 800e69e:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800e6a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6a2:	0005      	movs	r5, r0
 800e6a4:	183a      	adds	r2, r7, r0
 800e6a6:	7814      	ldrb	r4, [r2, #0]
 800e6a8:	7919      	ldrb	r1, [r3, #4]
 800e6aa:	2000      	movs	r0, #0
 800e6ac:	4001      	ands	r1, r0
 800e6ae:	1c08      	adds	r0, r1, #0
 800e6b0:	1c21      	adds	r1, r4, #0
 800e6b2:	4301      	orrs	r1, r0
 800e6b4:	7119      	strb	r1, [r3, #4]
 800e6b6:	7850      	ldrb	r0, [r2, #1]
 800e6b8:	795a      	ldrb	r2, [r3, #5]
 800e6ba:	2100      	movs	r1, #0
 800e6bc:	400a      	ands	r2, r1
 800e6be:	1c11      	adds	r1, r2, #0
 800e6c0:	1c02      	adds	r2, r0, #0
 800e6c2:	430a      	orrs	r2, r1
 800e6c4:	715a      	strb	r2, [r3, #5]
  iprh->end = offset + len;
 800e6c6:	0028      	movs	r0, r5
 800e6c8:	183a      	adds	r2, r7, r0
 800e6ca:	19bb      	adds	r3, r7, r6
 800e6cc:	8812      	ldrh	r2, [r2, #0]
 800e6ce:	881b      	ldrh	r3, [r3, #0]
 800e6d0:	18d3      	adds	r3, r2, r3
 800e6d2:	b29a      	uxth	r2, r3
 800e6d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6d6:	21ff      	movs	r1, #255	; 0xff
 800e6d8:	4011      	ands	r1, r2
 800e6da:	000c      	movs	r4, r1
 800e6dc:	7999      	ldrb	r1, [r3, #6]
 800e6de:	2000      	movs	r0, #0
 800e6e0:	4001      	ands	r1, r0
 800e6e2:	1c08      	adds	r0, r1, #0
 800e6e4:	1c21      	adds	r1, r4, #0
 800e6e6:	4301      	orrs	r1, r0
 800e6e8:	7199      	strb	r1, [r3, #6]
 800e6ea:	0a12      	lsrs	r2, r2, #8
 800e6ec:	b290      	uxth	r0, r2
 800e6ee:	79da      	ldrb	r2, [r3, #7]
 800e6f0:	2100      	movs	r1, #0
 800e6f2:	400a      	ands	r2, r1
 800e6f4:	1c11      	adds	r1, r2, #0
 800e6f6:	1c02      	adds	r2, r0, #0
 800e6f8:	430a      	orrs	r2, r1
 800e6fa:	71da      	strb	r2, [r3, #7]

  /* Iterate through until we either get to the end of the list (append),
   * or we find on with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	685b      	ldr	r3, [r3, #4]
 800e700:	61fb      	str	r3, [r7, #28]
 800e702:	e0c3      	b.n	800e88c <ip_reass_chain_frag_into_datagram_and_validate+0x27c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 800e704:	69fb      	ldr	r3, [r7, #28]
 800e706:	685b      	ldr	r3, [r3, #4]
 800e708:	60fb      	str	r3, [r7, #12]
    if (iprh->start < iprh_tmp->start) {
 800e70a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e70c:	791a      	ldrb	r2, [r3, #4]
 800e70e:	795b      	ldrb	r3, [r3, #5]
 800e710:	021b      	lsls	r3, r3, #8
 800e712:	4313      	orrs	r3, r2
 800e714:	b29a      	uxth	r2, r3
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	7919      	ldrb	r1, [r3, #4]
 800e71a:	795b      	ldrb	r3, [r3, #5]
 800e71c:	021b      	lsls	r3, r3, #8
 800e71e:	430b      	orrs	r3, r1
 800e720:	b29b      	uxth	r3, r3
 800e722:	429a      	cmp	r2, r3
 800e724:	d273      	bcs.n	800e80e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800e726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e728:	221c      	movs	r2, #28
 800e72a:	18ba      	adds	r2, r7, r2
 800e72c:	7810      	ldrb	r0, [r2, #0]
 800e72e:	781a      	ldrb	r2, [r3, #0]
 800e730:	2100      	movs	r1, #0
 800e732:	400a      	ands	r2, r1
 800e734:	1c11      	adds	r1, r2, #0
 800e736:	1c02      	adds	r2, r0, #0
 800e738:	430a      	orrs	r2, r1
 800e73a:	701a      	strb	r2, [r3, #0]
 800e73c:	221d      	movs	r2, #29
 800e73e:	18ba      	adds	r2, r7, r2
 800e740:	7810      	ldrb	r0, [r2, #0]
 800e742:	785a      	ldrb	r2, [r3, #1]
 800e744:	2100      	movs	r1, #0
 800e746:	400a      	ands	r2, r1
 800e748:	1c11      	adds	r1, r2, #0
 800e74a:	1c02      	adds	r2, r0, #0
 800e74c:	430a      	orrs	r2, r1
 800e74e:	705a      	strb	r2, [r3, #1]
 800e750:	221e      	movs	r2, #30
 800e752:	18ba      	adds	r2, r7, r2
 800e754:	7810      	ldrb	r0, [r2, #0]
 800e756:	789a      	ldrb	r2, [r3, #2]
 800e758:	2100      	movs	r1, #0
 800e75a:	400a      	ands	r2, r1
 800e75c:	1c11      	adds	r1, r2, #0
 800e75e:	1c02      	adds	r2, r0, #0
 800e760:	430a      	orrs	r2, r1
 800e762:	709a      	strb	r2, [r3, #2]
 800e764:	221f      	movs	r2, #31
 800e766:	18ba      	adds	r2, r7, r2
 800e768:	7810      	ldrb	r0, [r2, #0]
 800e76a:	78da      	ldrb	r2, [r3, #3]
 800e76c:	2100      	movs	r1, #0
 800e76e:	400a      	ands	r2, r1
 800e770:	1c11      	adds	r1, r2, #0
 800e772:	1c02      	adds	r2, r0, #0
 800e774:	430a      	orrs	r2, r1
 800e776:	70da      	strb	r2, [r3, #3]
      if (iprh_prev != NULL) {
 800e778:	6a3b      	ldr	r3, [r7, #32]
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d043      	beq.n	800e806 <ip_reass_chain_frag_into_datagram_and_validate+0x1f6>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800e77e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e780:	791a      	ldrb	r2, [r3, #4]
 800e782:	795b      	ldrb	r3, [r3, #5]
 800e784:	021b      	lsls	r3, r3, #8
 800e786:	4313      	orrs	r3, r2
 800e788:	b29a      	uxth	r2, r3
 800e78a:	6a3b      	ldr	r3, [r7, #32]
 800e78c:	7999      	ldrb	r1, [r3, #6]
 800e78e:	79db      	ldrb	r3, [r3, #7]
 800e790:	021b      	lsls	r3, r3, #8
 800e792:	430b      	orrs	r3, r1
 800e794:	b29b      	uxth	r3, r3
 800e796:	429a      	cmp	r2, r3
 800e798:	d200      	bcs.n	800e79c <ip_reass_chain_frag_into_datagram_and_validate+0x18c>
 800e79a:	e108      	b.n	800e9ae <ip_reass_chain_frag_into_datagram_and_validate+0x39e>
 800e79c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e79e:	799a      	ldrb	r2, [r3, #6]
 800e7a0:	79db      	ldrb	r3, [r3, #7]
 800e7a2:	021b      	lsls	r3, r3, #8
 800e7a4:	4313      	orrs	r3, r2
 800e7a6:	b29a      	uxth	r2, r3
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	7919      	ldrb	r1, [r3, #4]
 800e7ac:	795b      	ldrb	r3, [r3, #5]
 800e7ae:	021b      	lsls	r3, r3, #8
 800e7b0:	430b      	orrs	r3, r1
 800e7b2:	b29b      	uxth	r3, r3
 800e7b4:	429a      	cmp	r2, r3
 800e7b6:	d900      	bls.n	800e7ba <ip_reass_chain_frag_into_datagram_and_validate+0x1aa>
 800e7b8:	e0f9      	b.n	800e9ae <ip_reass_chain_frag_into_datagram_and_validate+0x39e>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800e7ba:	6a3b      	ldr	r3, [r7, #32]
 800e7bc:	003a      	movs	r2, r7
 800e7be:	7810      	ldrb	r0, [r2, #0]
 800e7c0:	781a      	ldrb	r2, [r3, #0]
 800e7c2:	2100      	movs	r1, #0
 800e7c4:	400a      	ands	r2, r1
 800e7c6:	1c11      	adds	r1, r2, #0
 800e7c8:	1c02      	adds	r2, r0, #0
 800e7ca:	430a      	orrs	r2, r1
 800e7cc:	701a      	strb	r2, [r3, #0]
 800e7ce:	1c7a      	adds	r2, r7, #1
 800e7d0:	7810      	ldrb	r0, [r2, #0]
 800e7d2:	785a      	ldrb	r2, [r3, #1]
 800e7d4:	2100      	movs	r1, #0
 800e7d6:	400a      	ands	r2, r1
 800e7d8:	1c11      	adds	r1, r2, #0
 800e7da:	1c02      	adds	r2, r0, #0
 800e7dc:	430a      	orrs	r2, r1
 800e7de:	705a      	strb	r2, [r3, #1]
 800e7e0:	1cba      	adds	r2, r7, #2
 800e7e2:	7810      	ldrb	r0, [r2, #0]
 800e7e4:	789a      	ldrb	r2, [r3, #2]
 800e7e6:	2100      	movs	r1, #0
 800e7e8:	400a      	ands	r2, r1
 800e7ea:	1c11      	adds	r1, r2, #0
 800e7ec:	1c02      	adds	r2, r0, #0
 800e7ee:	430a      	orrs	r2, r1
 800e7f0:	709a      	strb	r2, [r3, #2]
 800e7f2:	1cfa      	adds	r2, r7, #3
 800e7f4:	7810      	ldrb	r0, [r2, #0]
 800e7f6:	78da      	ldrb	r2, [r3, #3]
 800e7f8:	2100      	movs	r1, #0
 800e7fa:	400a      	ands	r2, r1
 800e7fc:	1c11      	adds	r1, r2, #0
 800e7fe:	1c02      	adds	r2, r0, #0
 800e800:	430a      	orrs	r2, r1
 800e802:	70da      	strb	r2, [r3, #3]
      } else {
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800e804:	e046      	b.n	800e894 <ip_reass_chain_frag_into_datagram_and_validate+0x284>
        ipr->p = new_p;
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	683a      	ldr	r2, [r7, #0]
 800e80a:	605a      	str	r2, [r3, #4]
      break;
 800e80c:	e042      	b.n	800e894 <ip_reass_chain_frag_into_datagram_and_validate+0x284>
    } else if(iprh->start == iprh_tmp->start) {
 800e80e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e810:	791a      	ldrb	r2, [r3, #4]
 800e812:	795b      	ldrb	r3, [r3, #5]
 800e814:	021b      	lsls	r3, r3, #8
 800e816:	4313      	orrs	r3, r2
 800e818:	b29a      	uxth	r2, r3
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	7919      	ldrb	r1, [r3, #4]
 800e81e:	795b      	ldrb	r3, [r3, #5]
 800e820:	021b      	lsls	r3, r3, #8
 800e822:	430b      	orrs	r3, r1
 800e824:	b29b      	uxth	r3, r3
 800e826:	429a      	cmp	r2, r3
 800e828:	d100      	bne.n	800e82c <ip_reass_chain_frag_into_datagram_and_validate+0x21c>
 800e82a:	e0c2      	b.n	800e9b2 <ip_reass_chain_frag_into_datagram_and_validate+0x3a2>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if(iprh->start < iprh_tmp->end) {
 800e82c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e82e:	791a      	ldrb	r2, [r3, #4]
 800e830:	795b      	ldrb	r3, [r3, #5]
 800e832:	021b      	lsls	r3, r3, #8
 800e834:	4313      	orrs	r3, r2
 800e836:	b29a      	uxth	r2, r3
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	7999      	ldrb	r1, [r3, #6]
 800e83c:	79db      	ldrb	r3, [r3, #7]
 800e83e:	021b      	lsls	r3, r3, #8
 800e840:	430b      	orrs	r3, r1
 800e842:	b29b      	uxth	r3, r3
 800e844:	429a      	cmp	r2, r3
 800e846:	d200      	bcs.n	800e84a <ip_reass_chain_frag_into_datagram_and_validate+0x23a>
 800e848:	e0b5      	b.n	800e9b6 <ip_reass_chain_frag_into_datagram_and_validate+0x3a6>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no wholes. */
      if (iprh_prev != NULL) {
 800e84a:	6a3b      	ldr	r3, [r7, #32]
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d00f      	beq.n	800e870 <ip_reass_chain_frag_into_datagram_and_validate+0x260>
        if (iprh_prev->end != iprh_tmp->start) {
 800e850:	6a3b      	ldr	r3, [r7, #32]
 800e852:	799a      	ldrb	r2, [r3, #6]
 800e854:	79db      	ldrb	r3, [r3, #7]
 800e856:	021b      	lsls	r3, r3, #8
 800e858:	4313      	orrs	r3, r2
 800e85a:	b29a      	uxth	r2, r3
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	7919      	ldrb	r1, [r3, #4]
 800e860:	795b      	ldrb	r3, [r3, #5]
 800e862:	021b      	lsls	r3, r3, #8
 800e864:	430b      	orrs	r3, r1
 800e866:	b29b      	uxth	r3, r3
 800e868:	429a      	cmp	r2, r3
 800e86a:	d001      	beq.n	800e870 <ip_reass_chain_frag_into_datagram_and_validate+0x260>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800e86c:	2300      	movs	r3, #0
 800e86e:	61bb      	str	r3, [r7, #24]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	781a      	ldrb	r2, [r3, #0]
 800e874:	7859      	ldrb	r1, [r3, #1]
 800e876:	0209      	lsls	r1, r1, #8
 800e878:	430a      	orrs	r2, r1
 800e87a:	7899      	ldrb	r1, [r3, #2]
 800e87c:	0409      	lsls	r1, r1, #16
 800e87e:	430a      	orrs	r2, r1
 800e880:	78db      	ldrb	r3, [r3, #3]
 800e882:	061b      	lsls	r3, r3, #24
 800e884:	4313      	orrs	r3, r2
 800e886:	61fb      	str	r3, [r7, #28]
    iprh_prev = iprh_tmp;
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	623b      	str	r3, [r7, #32]
  for (q = ipr->p; q != NULL;) {
 800e88c:	69fb      	ldr	r3, [r7, #28]
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d000      	beq.n	800e894 <ip_reass_chain_frag_into_datagram_and_validate+0x284>
 800e892:	e737      	b.n	800e704 <ip_reass_chain_frag_into_datagram_and_validate+0xf4>
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800e894:	69fb      	ldr	r3, [r7, #28]
 800e896:	2b00      	cmp	r3, #0
 800e898:	d13b      	bne.n	800e912 <ip_reass_chain_frag_into_datagram_and_validate+0x302>
    if (iprh_prev != NULL) {
 800e89a:	6a3b      	ldr	r3, [r7, #32]
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d035      	beq.n	800e90c <ip_reass_chain_frag_into_datagram_and_validate+0x2fc>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800e8a0:	6a3b      	ldr	r3, [r7, #32]
 800e8a2:	003a      	movs	r2, r7
 800e8a4:	7810      	ldrb	r0, [r2, #0]
 800e8a6:	781a      	ldrb	r2, [r3, #0]
 800e8a8:	2100      	movs	r1, #0
 800e8aa:	400a      	ands	r2, r1
 800e8ac:	1c11      	adds	r1, r2, #0
 800e8ae:	1c02      	adds	r2, r0, #0
 800e8b0:	430a      	orrs	r2, r1
 800e8b2:	701a      	strb	r2, [r3, #0]
 800e8b4:	1c7a      	adds	r2, r7, #1
 800e8b6:	7810      	ldrb	r0, [r2, #0]
 800e8b8:	785a      	ldrb	r2, [r3, #1]
 800e8ba:	2100      	movs	r1, #0
 800e8bc:	400a      	ands	r2, r1
 800e8be:	1c11      	adds	r1, r2, #0
 800e8c0:	1c02      	adds	r2, r0, #0
 800e8c2:	430a      	orrs	r2, r1
 800e8c4:	705a      	strb	r2, [r3, #1]
 800e8c6:	1cba      	adds	r2, r7, #2
 800e8c8:	7810      	ldrb	r0, [r2, #0]
 800e8ca:	789a      	ldrb	r2, [r3, #2]
 800e8cc:	2100      	movs	r1, #0
 800e8ce:	400a      	ands	r2, r1
 800e8d0:	1c11      	adds	r1, r2, #0
 800e8d2:	1c02      	adds	r2, r0, #0
 800e8d4:	430a      	orrs	r2, r1
 800e8d6:	709a      	strb	r2, [r3, #2]
 800e8d8:	1cfa      	adds	r2, r7, #3
 800e8da:	7810      	ldrb	r0, [r2, #0]
 800e8dc:	78da      	ldrb	r2, [r3, #3]
 800e8de:	2100      	movs	r1, #0
 800e8e0:	400a      	ands	r2, r1
 800e8e2:	1c11      	adds	r1, r2, #0
 800e8e4:	1c02      	adds	r2, r0, #0
 800e8e6:	430a      	orrs	r2, r1
 800e8e8:	70da      	strb	r2, [r3, #3]
      if (iprh_prev->end != iprh->start) {
 800e8ea:	6a3b      	ldr	r3, [r7, #32]
 800e8ec:	799a      	ldrb	r2, [r3, #6]
 800e8ee:	79db      	ldrb	r3, [r3, #7]
 800e8f0:	021b      	lsls	r3, r3, #8
 800e8f2:	4313      	orrs	r3, r2
 800e8f4:	b29a      	uxth	r2, r3
 800e8f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8f8:	7919      	ldrb	r1, [r3, #4]
 800e8fa:	795b      	ldrb	r3, [r3, #5]
 800e8fc:	021b      	lsls	r3, r3, #8
 800e8fe:	430b      	orrs	r3, r1
 800e900:	b29b      	uxth	r3, r3
 800e902:	429a      	cmp	r2, r3
 800e904:	d005      	beq.n	800e912 <ip_reass_chain_frag_into_datagram_and_validate+0x302>
        valid = 0;
 800e906:	2300      	movs	r3, #0
 800e908:	61bb      	str	r3, [r7, #24]
 800e90a:	e002      	b.n	800e912 <ip_reass_chain_frag_into_datagram_and_validate+0x302>
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	683a      	ldr	r2, [r7, #0]
 800e910:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0) {
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	7f9b      	ldrb	r3, [r3, #30]
 800e916:	001a      	movs	r2, r3
 800e918:	2301      	movs	r3, #1
 800e91a:	4013      	ands	r3, r2
 800e91c:	d045      	beq.n	800e9aa <ip_reass_chain_frag_into_datagram_and_validate+0x39a>
    /* and had no wholes so far */
    if (valid) {
 800e91e:	69bb      	ldr	r3, [r7, #24]
 800e920:	2b00      	cmp	r3, #0
 800e922:	d040      	beq.n	800e9a6 <ip_reass_chain_frag_into_datagram_and_validate+0x396>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if (((struct ip_reass_helper*)ipr->p->payload)->start != 0) {
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	685b      	ldr	r3, [r3, #4]
 800e928:	685b      	ldr	r3, [r3, #4]
 800e92a:	791a      	ldrb	r2, [r3, #4]
 800e92c:	795b      	ldrb	r3, [r3, #5]
 800e92e:	021b      	lsls	r3, r3, #8
 800e930:	4313      	orrs	r3, r2
 800e932:	b29b      	uxth	r3, r3
 800e934:	2b00      	cmp	r3, #0
 800e936:	d002      	beq.n	800e93e <ip_reass_chain_frag_into_datagram_and_validate+0x32e>
        valid = 0;
 800e938:	2300      	movs	r3, #0
 800e93a:	61bb      	str	r3, [r7, #24]
 800e93c:	e033      	b.n	800e9a6 <ip_reass_chain_frag_into_datagram_and_validate+0x396>
      } else {
        /* and check that there are no wholes after this datagram */
        iprh_prev = iprh;
 800e93e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e940:	623b      	str	r3, [r7, #32]
        q = iprh->next_pbuf;
 800e942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e944:	781a      	ldrb	r2, [r3, #0]
 800e946:	7859      	ldrb	r1, [r3, #1]
 800e948:	0209      	lsls	r1, r1, #8
 800e94a:	430a      	orrs	r2, r1
 800e94c:	7899      	ldrb	r1, [r3, #2]
 800e94e:	0409      	lsls	r1, r1, #16
 800e950:	430a      	orrs	r2, r1
 800e952:	78db      	ldrb	r3, [r3, #3]
 800e954:	061b      	lsls	r3, r3, #24
 800e956:	4313      	orrs	r3, r2
 800e958:	61fb      	str	r3, [r7, #28]
        while (q != NULL) {
 800e95a:	e021      	b.n	800e9a0 <ip_reass_chain_frag_into_datagram_and_validate+0x390>
          iprh = (struct ip_reass_helper*)q->payload;
 800e95c:	69fb      	ldr	r3, [r7, #28]
 800e95e:	685b      	ldr	r3, [r3, #4]
 800e960:	627b      	str	r3, [r7, #36]	; 0x24
          if (iprh_prev->end != iprh->start) {
 800e962:	6a3b      	ldr	r3, [r7, #32]
 800e964:	799a      	ldrb	r2, [r3, #6]
 800e966:	79db      	ldrb	r3, [r3, #7]
 800e968:	021b      	lsls	r3, r3, #8
 800e96a:	4313      	orrs	r3, r2
 800e96c:	b29a      	uxth	r2, r3
 800e96e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e970:	7919      	ldrb	r1, [r3, #4]
 800e972:	795b      	ldrb	r3, [r3, #5]
 800e974:	021b      	lsls	r3, r3, #8
 800e976:	430b      	orrs	r3, r1
 800e978:	b29b      	uxth	r3, r3
 800e97a:	429a      	cmp	r2, r3
 800e97c:	d002      	beq.n	800e984 <ip_reass_chain_frag_into_datagram_and_validate+0x374>
            valid = 0;
 800e97e:	2300      	movs	r3, #0
 800e980:	61bb      	str	r3, [r7, #24]
            break;
 800e982:	e010      	b.n	800e9a6 <ip_reass_chain_frag_into_datagram_and_validate+0x396>
          }
          iprh_prev = iprh;
 800e984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e986:	623b      	str	r3, [r7, #32]
          q = iprh->next_pbuf;
 800e988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e98a:	781a      	ldrb	r2, [r3, #0]
 800e98c:	7859      	ldrb	r1, [r3, #1]
 800e98e:	0209      	lsls	r1, r1, #8
 800e990:	430a      	orrs	r2, r1
 800e992:	7899      	ldrb	r1, [r3, #2]
 800e994:	0409      	lsls	r1, r1, #16
 800e996:	430a      	orrs	r2, r1
 800e998:	78db      	ldrb	r3, [r3, #3]
 800e99a:	061b      	lsls	r3, r3, #24
 800e99c:	4313      	orrs	r3, r2
 800e99e:	61fb      	str	r3, [r7, #28]
        while (q != NULL) {
 800e9a0:	69fb      	ldr	r3, [r7, #28]
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d1da      	bne.n	800e95c <ip_reass_chain_frag_into_datagram_and_validate+0x34c>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid;
 800e9a6:	69bb      	ldr	r3, [r7, #24]
 800e9a8:	e018      	b.n	800e9dc <ip_reass_chain_frag_into_datagram_and_validate+0x3cc>
  }
  /* If we come here, not all fragments were received, yet! */
  return 0; /* not yet valid! */
 800e9aa:	2300      	movs	r3, #0
 800e9ac:	e016      	b.n	800e9dc <ip_reass_chain_frag_into_datagram_and_validate+0x3cc>
#if IP_REASS_CHECK_OVERLAP
freepbuf:
 800e9ae:	46c0      	nop			; (mov r8, r8)
 800e9b0:	e002      	b.n	800e9b8 <ip_reass_chain_frag_into_datagram_and_validate+0x3a8>
      goto freepbuf;
 800e9b2:	46c0      	nop			; (mov r8, r8)
 800e9b4:	e000      	b.n	800e9b8 <ip_reass_chain_frag_into_datagram_and_validate+0x3a8>
      goto freepbuf;
 800e9b6:	46c0      	nop			; (mov r8, r8)
  ip_reass_pbufcount -= pbuf_clen(new_p);
 800e9b8:	683b      	ldr	r3, [r7, #0]
 800e9ba:	0018      	movs	r0, r3
 800e9bc:	f7f8 fa5c 	bl	8006e78 <pbuf_clen>
 800e9c0:	0003      	movs	r3, r0
 800e9c2:	0019      	movs	r1, r3
 800e9c4:	4b07      	ldr	r3, [pc, #28]	; (800e9e4 <ip_reass_chain_frag_into_datagram_and_validate+0x3d4>)
 800e9c6:	881a      	ldrh	r2, [r3, #0]
 800e9c8:	b28b      	uxth	r3, r1
 800e9ca:	1ad3      	subs	r3, r2, r3
 800e9cc:	b29a      	uxth	r2, r3
 800e9ce:	4b05      	ldr	r3, [pc, #20]	; (800e9e4 <ip_reass_chain_frag_into_datagram_and_validate+0x3d4>)
 800e9d0:	801a      	strh	r2, [r3, #0]
  pbuf_free(new_p);
 800e9d2:	683b      	ldr	r3, [r7, #0]
 800e9d4:	0018      	movs	r0, r3
 800e9d6:	f7f8 f9dd 	bl	8006d94 <pbuf_free>
  return 0;
 800e9da:	2300      	movs	r3, #0
#endif /* IP_REASS_CHECK_OVERLAP */
}
 800e9dc:	0018      	movs	r0, r3
 800e9de:	46bd      	mov	sp, r7
 800e9e0:	b00b      	add	sp, #44	; 0x2c
 800e9e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e9e4:	20002744 	.word	0x20002744

0800e9e8 <ip_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip_reass(struct pbuf *p)
{
 800e9e8:	b5b0      	push	{r4, r5, r7, lr}
 800e9ea:	b08a      	sub	sp, #40	; 0x28
 800e9ec:	af00      	add	r7, sp, #0
 800e9ee:	6078      	str	r0, [r7, #4]
  struct ip_hdr *fraghdr;
  struct ip_reassdata *ipr;
  struct ip_reass_helper *iprh;
  u16_t offset, len;
  u8_t clen;
  struct ip_reassdata *ipr_prev = NULL;
 800e9f0:	2300      	movs	r3, #0
 800e9f2:	61fb      	str	r3, [r7, #28]

  IPFRAG_STATS_INC(ip_frag.recv);
 800e9f4:	4bd3      	ldr	r3, [pc, #844]	; (800ed44 <ip_reass+0x35c>)
 800e9f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e9f8:	3301      	adds	r3, #1
 800e9fa:	b29a      	uxth	r2, r3
 800e9fc:	4bd1      	ldr	r3, [pc, #836]	; (800ed44 <ip_reass+0x35c>)
 800e9fe:	865a      	strh	r2, [r3, #50]	; 0x32
  snmp_inc_ipreasmreqds();

  fraghdr = (struct ip_hdr*)p->payload;
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	685b      	ldr	r3, [r3, #4]
 800ea04:	61bb      	str	r3, [r7, #24]

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 800ea06:	69bb      	ldr	r3, [r7, #24]
 800ea08:	781b      	ldrb	r3, [r3, #0]
 800ea0a:	001a      	movs	r2, r3
 800ea0c:	230f      	movs	r3, #15
 800ea0e:	4013      	ands	r3, r2
 800ea10:	009b      	lsls	r3, r3, #2
 800ea12:	2b14      	cmp	r3, #20
 800ea14:	d008      	beq.n	800ea28 <ip_reass+0x40>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
 800ea16:	4bcb      	ldr	r3, [pc, #812]	; (800ed44 <ip_reass+0x35c>)
 800ea18:	2244      	movs	r2, #68	; 0x44
 800ea1a:	5a9b      	ldrh	r3, [r3, r2]
 800ea1c:	3301      	adds	r3, #1
 800ea1e:	b299      	uxth	r1, r3
 800ea20:	4bc8      	ldr	r3, [pc, #800]	; (800ed44 <ip_reass+0x35c>)
 800ea22:	2244      	movs	r2, #68	; 0x44
 800ea24:	5299      	strh	r1, [r3, r2]
    goto nullreturn;
 800ea26:	e193      	b.n	800ed50 <ip_reass+0x368>
  }

  offset = (ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800ea28:	69bb      	ldr	r3, [r7, #24]
 800ea2a:	799a      	ldrb	r2, [r3, #6]
 800ea2c:	79db      	ldrb	r3, [r3, #7]
 800ea2e:	021b      	lsls	r3, r3, #8
 800ea30:	4313      	orrs	r3, r2
 800ea32:	b29b      	uxth	r3, r3
 800ea34:	0018      	movs	r0, r3
 800ea36:	f7f7 f97b 	bl	8005d30 <lwip_ntohs>
 800ea3a:	0003      	movs	r3, r0
 800ea3c:	04db      	lsls	r3, r3, #19
 800ea3e:	0cdb      	lsrs	r3, r3, #19
 800ea40:	b29a      	uxth	r2, r3
 800ea42:	2316      	movs	r3, #22
 800ea44:	18fb      	adds	r3, r7, r3
 800ea46:	00d2      	lsls	r2, r2, #3
 800ea48:	801a      	strh	r2, [r3, #0]
  len = ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800ea4a:	69bb      	ldr	r3, [r7, #24]
 800ea4c:	789a      	ldrb	r2, [r3, #2]
 800ea4e:	78db      	ldrb	r3, [r3, #3]
 800ea50:	021b      	lsls	r3, r3, #8
 800ea52:	4313      	orrs	r3, r2
 800ea54:	b29b      	uxth	r3, r3
 800ea56:	0018      	movs	r0, r3
 800ea58:	f7f7 f96a 	bl	8005d30 <lwip_ntohs>
 800ea5c:	0003      	movs	r3, r0
 800ea5e:	0019      	movs	r1, r3
 800ea60:	69bb      	ldr	r3, [r7, #24]
 800ea62:	781b      	ldrb	r3, [r3, #0]
 800ea64:	b29b      	uxth	r3, r3
 800ea66:	220f      	movs	r2, #15
 800ea68:	4013      	ands	r3, r2
 800ea6a:	b29b      	uxth	r3, r3
 800ea6c:	009b      	lsls	r3, r3, #2
 800ea6e:	b29a      	uxth	r2, r3
 800ea70:	2314      	movs	r3, #20
 800ea72:	18fb      	adds	r3, r7, r3
 800ea74:	1a8a      	subs	r2, r1, r2
 800ea76:	801a      	strh	r2, [r3, #0]

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800ea78:	2513      	movs	r5, #19
 800ea7a:	197c      	adds	r4, r7, r5
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	0018      	movs	r0, r3
 800ea80:	f7f8 f9fa 	bl	8006e78 <pbuf_clen>
 800ea84:	0003      	movs	r3, r0
 800ea86:	7023      	strb	r3, [r4, #0]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800ea88:	4baf      	ldr	r3, [pc, #700]	; (800ed48 <ip_reass+0x360>)
 800ea8a:	881b      	ldrh	r3, [r3, #0]
 800ea8c:	001a      	movs	r2, r3
 800ea8e:	197b      	adds	r3, r7, r5
 800ea90:	781b      	ldrb	r3, [r3, #0]
 800ea92:	18d3      	adds	r3, r2, r3
 800ea94:	2b0a      	cmp	r3, #10
 800ea96:	dd19      	ble.n	800eacc <ip_reass+0xe4>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800ea98:	2313      	movs	r3, #19
 800ea9a:	18fb      	adds	r3, r7, r3
 800ea9c:	781a      	ldrb	r2, [r3, #0]
 800ea9e:	69bb      	ldr	r3, [r7, #24]
 800eaa0:	0011      	movs	r1, r2
 800eaa2:	0018      	movs	r0, r3
 800eaa4:	f7ff fcda 	bl	800e45c <ip_reass_remove_oldest_datagram>
 800eaa8:	1e03      	subs	r3, r0, #0
 800eaaa:	d008      	beq.n	800eabe <ip_reass+0xd6>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800eaac:	4ba6      	ldr	r3, [pc, #664]	; (800ed48 <ip_reass+0x360>)
 800eaae:	881b      	ldrh	r3, [r3, #0]
 800eab0:	001a      	movs	r2, r3
 800eab2:	2313      	movs	r3, #19
 800eab4:	18fb      	adds	r3, r7, r3
 800eab6:	781b      	ldrb	r3, [r3, #0]
 800eab8:	18d3      	adds	r3, r2, r3
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800eaba:	2b0a      	cmp	r3, #10
 800eabc:	dd06      	ble.n	800eacc <ip_reass+0xe4>
#endif /* IP_REASS_FREE_OLDEST */
    {
      /* No datagram could be freed and still too many pbufs enqueued */
      LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass: Overflow condition: pbufct=%d, clen=%d, MAX=%d\n",
        ip_reass_pbufcount, clen, IP_REASS_MAX_PBUFS));
      IPFRAG_STATS_INC(ip_frag.memerr);
 800eabe:	4ba1      	ldr	r3, [pc, #644]	; (800ed44 <ip_reass+0x35c>)
 800eac0:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800eac2:	3301      	adds	r3, #1
 800eac4:	b29a      	uxth	r2, r3
 800eac6:	4b9f      	ldr	r3, [pc, #636]	; (800ed44 <ip_reass+0x35c>)
 800eac8:	879a      	strh	r2, [r3, #60]	; 0x3c
      /* @todo: send ICMP time exceeded here? */
      /* drop this pbuf */
      goto nullreturn;
 800eaca:	e141      	b.n	800ed50 <ip_reass+0x368>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800eacc:	4b9f      	ldr	r3, [pc, #636]	; (800ed4c <ip_reass+0x364>)
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	623b      	str	r3, [r7, #32]
 800ead2:	e035      	b.n	800eb40 <ip_reass+0x158>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800ead4:	6a3b      	ldr	r3, [r7, #32]
 800ead6:	695a      	ldr	r2, [r3, #20]
 800ead8:	69bb      	ldr	r3, [r7, #24]
 800eada:	7b19      	ldrb	r1, [r3, #12]
 800eadc:	7b58      	ldrb	r0, [r3, #13]
 800eade:	0200      	lsls	r0, r0, #8
 800eae0:	4301      	orrs	r1, r0
 800eae2:	7b98      	ldrb	r0, [r3, #14]
 800eae4:	0400      	lsls	r0, r0, #16
 800eae6:	4301      	orrs	r1, r0
 800eae8:	7bdb      	ldrb	r3, [r3, #15]
 800eaea:	061b      	lsls	r3, r3, #24
 800eaec:	430b      	orrs	r3, r1
 800eaee:	429a      	cmp	r2, r3
 800eaf0:	d121      	bne.n	800eb36 <ip_reass+0x14e>
 800eaf2:	6a3b      	ldr	r3, [r7, #32]
 800eaf4:	699a      	ldr	r2, [r3, #24]
 800eaf6:	69bb      	ldr	r3, [r7, #24]
 800eaf8:	7c19      	ldrb	r1, [r3, #16]
 800eafa:	7c58      	ldrb	r0, [r3, #17]
 800eafc:	0200      	lsls	r0, r0, #8
 800eafe:	4301      	orrs	r1, r0
 800eb00:	7c98      	ldrb	r0, [r3, #18]
 800eb02:	0400      	lsls	r0, r0, #16
 800eb04:	4301      	orrs	r1, r0
 800eb06:	7cdb      	ldrb	r3, [r3, #19]
 800eb08:	061b      	lsls	r3, r3, #24
 800eb0a:	430b      	orrs	r3, r1
 800eb0c:	429a      	cmp	r2, r3
 800eb0e:	d112      	bne.n	800eb36 <ip_reass+0x14e>
 800eb10:	6a3b      	ldr	r3, [r7, #32]
 800eb12:	899a      	ldrh	r2, [r3, #12]
 800eb14:	69bb      	ldr	r3, [r7, #24]
 800eb16:	7919      	ldrb	r1, [r3, #4]
 800eb18:	795b      	ldrb	r3, [r3, #5]
 800eb1a:	021b      	lsls	r3, r3, #8
 800eb1c:	430b      	orrs	r3, r1
 800eb1e:	b29b      	uxth	r3, r3
 800eb20:	429a      	cmp	r2, r3
 800eb22:	d108      	bne.n	800eb36 <ip_reass+0x14e>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass: matching previous fragment ID=%"X16_F"\n",
        ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
 800eb24:	4b87      	ldr	r3, [pc, #540]	; (800ed44 <ip_reass+0x35c>)
 800eb26:	2246      	movs	r2, #70	; 0x46
 800eb28:	5a9b      	ldrh	r3, [r3, r2]
 800eb2a:	3301      	adds	r3, #1
 800eb2c:	b299      	uxth	r1, r3
 800eb2e:	4b85      	ldr	r3, [pc, #532]	; (800ed44 <ip_reass+0x35c>)
 800eb30:	2246      	movs	r2, #70	; 0x46
 800eb32:	5299      	strh	r1, [r3, r2]
      break;
 800eb34:	e007      	b.n	800eb46 <ip_reass+0x15e>
    }
    ipr_prev = ipr;
 800eb36:	6a3b      	ldr	r3, [r7, #32]
 800eb38:	61fb      	str	r3, [r7, #28]
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800eb3a:	6a3b      	ldr	r3, [r7, #32]
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	623b      	str	r3, [r7, #32]
 800eb40:	6a3b      	ldr	r3, [r7, #32]
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d1c6      	bne.n	800ead4 <ip_reass+0xec>
  }

  if (ipr == NULL) {
 800eb46:	6a3b      	ldr	r3, [r7, #32]
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d10d      	bne.n	800eb68 <ip_reass+0x180>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800eb4c:	2313      	movs	r3, #19
 800eb4e:	18fb      	adds	r3, r7, r3
 800eb50:	781a      	ldrb	r2, [r3, #0]
 800eb52:	69bb      	ldr	r3, [r7, #24]
 800eb54:	0011      	movs	r1, r2
 800eb56:	0018      	movs	r0, r3
 800eb58:	f7ff fcf4 	bl	800e544 <ip_reass_enqueue_new_datagram>
 800eb5c:	0003      	movs	r3, r0
 800eb5e:	623b      	str	r3, [r7, #32]
    /* Bail if unable to enqueue */
    if(ipr == NULL) {
 800eb60:	6a3b      	ldr	r3, [r7, #32]
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d11d      	bne.n	800eba2 <ip_reass+0x1ba>
      goto nullreturn;
 800eb66:	e0f3      	b.n	800ed50 <ip_reass+0x368>
    }
  } else {
    if (((ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) && 
 800eb68:	69bb      	ldr	r3, [r7, #24]
 800eb6a:	799a      	ldrb	r2, [r3, #6]
 800eb6c:	79db      	ldrb	r3, [r3, #7]
 800eb6e:	021b      	lsls	r3, r3, #8
 800eb70:	4313      	orrs	r3, r2
 800eb72:	b29b      	uxth	r3, r3
 800eb74:	0018      	movs	r0, r3
 800eb76:	f7f7 f8db 	bl	8005d30 <lwip_ntohs>
 800eb7a:	0003      	movs	r3, r0
 800eb7c:	04db      	lsls	r3, r3, #19
 800eb7e:	0cdb      	lsrs	r3, r3, #19
 800eb80:	d10f      	bne.n	800eba2 <ip_reass+0x1ba>
      ((ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800eb82:	6a3b      	ldr	r3, [r7, #32]
 800eb84:	89db      	ldrh	r3, [r3, #14]
 800eb86:	0018      	movs	r0, r3
 800eb88:	f7f7 f8d2 	bl	8005d30 <lwip_ntohs>
 800eb8c:	0003      	movs	r3, r0
 800eb8e:	04db      	lsls	r3, r3, #19
 800eb90:	0cdb      	lsrs	r3, r3, #19
    if (((ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) && 
 800eb92:	d006      	beq.n	800eba2 <ip_reass+0x1ba>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800eb94:	6a3b      	ldr	r3, [r7, #32]
 800eb96:	3308      	adds	r3, #8
 800eb98:	69b9      	ldr	r1, [r7, #24]
 800eb9a:	2214      	movs	r2, #20
 800eb9c:	0018      	movs	r0, r3
 800eb9e:	f003 fa5a 	bl	8012056 <memcpy>
    }
  }
  /* Track the current number of pbufs current 'in-flight', in order to limit 
  the number of fragments that may be enqueued at any one time */
  ip_reass_pbufcount += clen;
 800eba2:	2313      	movs	r3, #19
 800eba4:	18fb      	adds	r3, r7, r3
 800eba6:	781b      	ldrb	r3, [r3, #0]
 800eba8:	b29a      	uxth	r2, r3
 800ebaa:	4b67      	ldr	r3, [pc, #412]	; (800ed48 <ip_reass+0x360>)
 800ebac:	881b      	ldrh	r3, [r3, #0]
 800ebae:	18d3      	adds	r3, r2, r3
 800ebb0:	b29a      	uxth	r2, r3
 800ebb2:	4b65      	ldr	r3, [pc, #404]	; (800ed48 <ip_reass+0x360>)
 800ebb4:	801a      	strh	r2, [r3, #0]

  /* At this point, we have either created a new entry or pointing 
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  if ((IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0) {
 800ebb6:	69bb      	ldr	r3, [r7, #24]
 800ebb8:	799a      	ldrb	r2, [r3, #6]
 800ebba:	79db      	ldrb	r3, [r3, #7]
 800ebbc:	021b      	lsls	r3, r3, #8
 800ebbe:	4313      	orrs	r3, r2
 800ebc0:	b29b      	uxth	r3, r3
 800ebc2:	001a      	movs	r2, r3
 800ebc4:	2320      	movs	r3, #32
 800ebc6:	4013      	ands	r3, r2
 800ebc8:	d110      	bne.n	800ebec <ip_reass+0x204>
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800ebca:	6a3b      	ldr	r3, [r7, #32]
 800ebcc:	7f9b      	ldrb	r3, [r3, #30]
 800ebce:	2201      	movs	r2, #1
 800ebd0:	4313      	orrs	r3, r2
 800ebd2:	b2da      	uxtb	r2, r3
 800ebd4:	6a3b      	ldr	r3, [r7, #32]
 800ebd6:	779a      	strb	r2, [r3, #30]
    ipr->datagram_len = offset + len;
 800ebd8:	2316      	movs	r3, #22
 800ebda:	18fa      	adds	r2, r7, r3
 800ebdc:	2314      	movs	r3, #20
 800ebde:	18fb      	adds	r3, r7, r3
 800ebe0:	8812      	ldrh	r2, [r2, #0]
 800ebe2:	881b      	ldrh	r3, [r3, #0]
 800ebe4:	18d3      	adds	r3, r2, r3
 800ebe6:	b29a      	uxth	r2, r3
 800ebe8:	6a3b      	ldr	r3, [r7, #32]
 800ebea:	839a      	strh	r2, [r3, #28]
     ("ip_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  if (ip_reass_chain_frag_into_datagram_and_validate(ipr, p)) {
 800ebec:	687a      	ldr	r2, [r7, #4]
 800ebee:	6a3b      	ldr	r3, [r7, #32]
 800ebf0:	0011      	movs	r1, r2
 800ebf2:	0018      	movs	r0, r3
 800ebf4:	f7ff fd0c 	bl	800e610 <ip_reass_chain_frag_into_datagram_and_validate>
 800ebf8:	1e03      	subs	r3, r0, #0
 800ebfa:	d100      	bne.n	800ebfe <ip_reass+0x216>
 800ebfc:	e09f      	b.n	800ed3e <ip_reass+0x356>
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
 800ebfe:	6a3b      	ldr	r3, [r7, #32]
 800ec00:	8b9b      	ldrh	r3, [r3, #28]
 800ec02:	3314      	adds	r3, #20
 800ec04:	b29a      	uxth	r2, r3
 800ec06:	6a3b      	ldr	r3, [r7, #32]
 800ec08:	839a      	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 800ec0a:	6a3b      	ldr	r3, [r7, #32]
 800ec0c:	685b      	ldr	r3, [r3, #4]
 800ec0e:	685b      	ldr	r3, [r3, #4]
 800ec10:	781a      	ldrb	r2, [r3, #0]
 800ec12:	7859      	ldrb	r1, [r3, #1]
 800ec14:	0209      	lsls	r1, r1, #8
 800ec16:	430a      	orrs	r2, r1
 800ec18:	7899      	ldrb	r1, [r3, #2]
 800ec1a:	0409      	lsls	r1, r1, #16
 800ec1c:	430a      	orrs	r2, r1
 800ec1e:	78db      	ldrb	r3, [r3, #3]
 800ec20:	061b      	lsls	r3, r3, #24
 800ec22:	4313      	orrs	r3, r2
 800ec24:	627b      	str	r3, [r7, #36]	; 0x24

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
 800ec26:	6a3b      	ldr	r3, [r7, #32]
 800ec28:	685b      	ldr	r3, [r3, #4]
 800ec2a:	685b      	ldr	r3, [r3, #4]
 800ec2c:	61bb      	str	r3, [r7, #24]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800ec2e:	6a3b      	ldr	r3, [r7, #32]
 800ec30:	3308      	adds	r3, #8
 800ec32:	0019      	movs	r1, r3
 800ec34:	69bb      	ldr	r3, [r7, #24]
 800ec36:	2214      	movs	r2, #20
 800ec38:	0018      	movs	r0, r3
 800ec3a:	f003 fa0c 	bl	8012056 <memcpy>
    IPH_LEN_SET(fraghdr, htons(ipr->datagram_len));
 800ec3e:	6a3b      	ldr	r3, [r7, #32]
 800ec40:	8b9b      	ldrh	r3, [r3, #28]
 800ec42:	0018      	movs	r0, r3
 800ec44:	f7f7 f85e 	bl	8005d04 <lwip_htons>
 800ec48:	0003      	movs	r3, r0
 800ec4a:	001a      	movs	r2, r3
 800ec4c:	69bb      	ldr	r3, [r7, #24]
 800ec4e:	21ff      	movs	r1, #255	; 0xff
 800ec50:	4011      	ands	r1, r2
 800ec52:	000c      	movs	r4, r1
 800ec54:	7899      	ldrb	r1, [r3, #2]
 800ec56:	2000      	movs	r0, #0
 800ec58:	4001      	ands	r1, r0
 800ec5a:	1c08      	adds	r0, r1, #0
 800ec5c:	1c21      	adds	r1, r4, #0
 800ec5e:	4301      	orrs	r1, r0
 800ec60:	7099      	strb	r1, [r3, #2]
 800ec62:	0a12      	lsrs	r2, r2, #8
 800ec64:	b290      	uxth	r0, r2
 800ec66:	78da      	ldrb	r2, [r3, #3]
 800ec68:	2100      	movs	r1, #0
 800ec6a:	400a      	ands	r2, r1
 800ec6c:	1c11      	adds	r1, r2, #0
 800ec6e:	1c02      	adds	r2, r0, #0
 800ec70:	430a      	orrs	r2, r1
 800ec72:	70da      	strb	r2, [r3, #3]
    IPH_OFFSET_SET(fraghdr, 0);
 800ec74:	69bb      	ldr	r3, [r7, #24]
 800ec76:	799a      	ldrb	r2, [r3, #6]
 800ec78:	2100      	movs	r1, #0
 800ec7a:	400a      	ands	r2, r1
 800ec7c:	719a      	strb	r2, [r3, #6]
 800ec7e:	79da      	ldrb	r2, [r3, #7]
 800ec80:	2100      	movs	r1, #0
 800ec82:	400a      	ands	r2, r1
 800ec84:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800ec86:	69bb      	ldr	r3, [r7, #24]
 800ec88:	7a9a      	ldrb	r2, [r3, #10]
 800ec8a:	2100      	movs	r1, #0
 800ec8c:	400a      	ands	r2, r1
 800ec8e:	729a      	strb	r2, [r3, #10]
 800ec90:	7ada      	ldrb	r2, [r3, #11]
 800ec92:	2100      	movs	r1, #0
 800ec94:	400a      	ands	r2, r1
 800ec96:	72da      	strb	r2, [r3, #11]
    /* @todo: do we need to set calculate the correct checksum? */
    IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
 800ec98:	69bb      	ldr	r3, [r7, #24]
 800ec9a:	2114      	movs	r1, #20
 800ec9c:	0018      	movs	r0, r3
 800ec9e:	f7fe fe63 	bl	800d968 <inet_chksum>
 800eca2:	0003      	movs	r3, r0
 800eca4:	001a      	movs	r2, r3
 800eca6:	69bb      	ldr	r3, [r7, #24]
 800eca8:	21ff      	movs	r1, #255	; 0xff
 800ecaa:	4011      	ands	r1, r2
 800ecac:	000c      	movs	r4, r1
 800ecae:	7a99      	ldrb	r1, [r3, #10]
 800ecb0:	2000      	movs	r0, #0
 800ecb2:	4001      	ands	r1, r0
 800ecb4:	1c08      	adds	r0, r1, #0
 800ecb6:	1c21      	adds	r1, r4, #0
 800ecb8:	4301      	orrs	r1, r0
 800ecba:	7299      	strb	r1, [r3, #10]
 800ecbc:	0a12      	lsrs	r2, r2, #8
 800ecbe:	b290      	uxth	r0, r2
 800ecc0:	7ada      	ldrb	r2, [r3, #11]
 800ecc2:	2100      	movs	r1, #0
 800ecc4:	400a      	ands	r2, r1
 800ecc6:	1c11      	adds	r1, r2, #0
 800ecc8:	1c02      	adds	r2, r0, #0
 800ecca:	430a      	orrs	r2, r1
 800eccc:	72da      	strb	r2, [r3, #11]

    p = ipr->p;
 800ecce:	6a3b      	ldr	r3, [r7, #32]
 800ecd0:	685b      	ldr	r3, [r3, #4]
 800ecd2:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while(r != NULL) {
 800ecd4:	e01b      	b.n	800ed0e <ip_reass+0x326>
      iprh = (struct ip_reass_helper*)r->payload;
 800ecd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecd8:	685b      	ldr	r3, [r3, #4]
 800ecda:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeding fragment */
      pbuf_header(r, -IP_HLEN);
 800ecdc:	2314      	movs	r3, #20
 800ecde:	425a      	negs	r2, r3
 800ece0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ece2:	0011      	movs	r1, r2
 800ece4:	0018      	movs	r0, r3
 800ece6:	f7f7 ffce 	bl	8006c86 <pbuf_header>
      pbuf_cat(p, r);
 800ecea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	0011      	movs	r1, r2
 800ecf0:	0018      	movs	r0, r3
 800ecf2:	f7f8 f8ee 	bl	8006ed2 <pbuf_cat>
      r = iprh->next_pbuf;
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	781a      	ldrb	r2, [r3, #0]
 800ecfa:	7859      	ldrb	r1, [r3, #1]
 800ecfc:	0209      	lsls	r1, r1, #8
 800ecfe:	430a      	orrs	r2, r1
 800ed00:	7899      	ldrb	r1, [r3, #2]
 800ed02:	0409      	lsls	r1, r1, #16
 800ed04:	430a      	orrs	r2, r1
 800ed06:	78db      	ldrb	r3, [r3, #3]
 800ed08:	061b      	lsls	r3, r3, #24
 800ed0a:	4313      	orrs	r3, r2
 800ed0c:	627b      	str	r3, [r7, #36]	; 0x24
    while(r != NULL) {
 800ed0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d1e0      	bne.n	800ecd6 <ip_reass+0x2ee>
    }
    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800ed14:	69fa      	ldr	r2, [r7, #28]
 800ed16:	6a3b      	ldr	r3, [r7, #32]
 800ed18:	0011      	movs	r1, r2
 800ed1a:	0018      	movs	r0, r3
 800ed1c:	f7ff fc5a 	bl	800e5d4 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	0018      	movs	r0, r3
 800ed24:	f7f8 f8a8 	bl	8006e78 <pbuf_clen>
 800ed28:	0003      	movs	r3, r0
 800ed2a:	0019      	movs	r1, r3
 800ed2c:	4b06      	ldr	r3, [pc, #24]	; (800ed48 <ip_reass+0x360>)
 800ed2e:	881a      	ldrh	r2, [r3, #0]
 800ed30:	b28b      	uxth	r3, r1
 800ed32:	1ad3      	subs	r3, r2, r3
 800ed34:	b29a      	uxth	r2, r3
 800ed36:	4b04      	ldr	r3, [pc, #16]	; (800ed48 <ip_reass+0x360>)
 800ed38:	801a      	strh	r2, [r3, #0]

    /* Return the pbuf chain */
    return p;
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	e013      	b.n	800ed66 <ip_reass+0x37e>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800ed3e:	2300      	movs	r3, #0
 800ed40:	e011      	b.n	800ed66 <ip_reass+0x37e>
 800ed42:	46c0      	nop			; (mov r8, r8)
 800ed44:	2000340c 	.word	0x2000340c
 800ed48:	20002744 	.word	0x20002744
 800ed4c:	20002740 	.word	0x20002740

nullreturn:
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
 800ed50:	4b07      	ldr	r3, [pc, #28]	; (800ed70 <ip_reass+0x388>)
 800ed52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ed54:	3301      	adds	r3, #1
 800ed56:	b29a      	uxth	r2, r3
 800ed58:	4b05      	ldr	r3, [pc, #20]	; (800ed70 <ip_reass+0x388>)
 800ed5a:	86da      	strh	r2, [r3, #54]	; 0x36
  pbuf_free(p);
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	0018      	movs	r0, r3
 800ed60:	f7f8 f818 	bl	8006d94 <pbuf_free>
  return NULL;
 800ed64:	2300      	movs	r3, #0
}
 800ed66:	0018      	movs	r0, r3
 800ed68:	46bd      	mov	sp, r7
 800ed6a:	b00a      	add	sp, #40	; 0x28
 800ed6c:	bdb0      	pop	{r4, r5, r7, pc}
 800ed6e:	46c0      	nop			; (mov r8, r8)
 800ed70:	2000340c 	.word	0x2000340c

0800ed74 <ip_frag_alloc_pbuf_custom_ref>:

#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
 800ed74:	b580      	push	{r7, lr}
 800ed76:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 800ed78:	2006      	movs	r0, #6
 800ed7a:	f7f7 fbc3 	bl	8006504 <memp_malloc>
 800ed7e:	0003      	movs	r3, r0
}
 800ed80:	0018      	movs	r0, r3
 800ed82:	46bd      	mov	sp, r7
 800ed84:	bd80      	pop	{r7, pc}

0800ed86 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 800ed86:	b580      	push	{r7, lr}
 800ed88:	b082      	sub	sp, #8
 800ed8a:	af00      	add	r7, sp, #0
 800ed8c:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
  memp_free(MEMP_FRAG_PBUF, p);
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	0019      	movs	r1, r3
 800ed92:	2006      	movs	r0, #6
 800ed94:	f7f7 fc3c 	bl	8006610 <memp_free>
}
 800ed98:	46c0      	nop			; (mov r8, r8)
 800ed9a:	46bd      	mov	sp, r7
 800ed9c:	b002      	add	sp, #8
 800ed9e:	bd80      	pop	{r7, pc}

0800eda0 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800eda0:	b580      	push	{r7, lr}
 800eda2:	b084      	sub	sp, #16
 800eda4:	af00      	add	r7, sp, #0
 800eda6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
  if (pcr->original != NULL) {
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	695b      	ldr	r3, [r3, #20]
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d004      	beq.n	800edbe <ipfrag_free_pbuf_custom+0x1e>
    pbuf_free(pcr->original);
 800edb4:	68fb      	ldr	r3, [r7, #12]
 800edb6:	695b      	ldr	r3, [r3, #20]
 800edb8:	0018      	movs	r0, r3
 800edba:	f7f7 ffeb 	bl	8006d94 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	0018      	movs	r0, r3
 800edc2:	f7ff ffe0 	bl	800ed86 <ip_frag_free_pbuf_custom_ref>
}
 800edc6:	46c0      	nop			; (mov r8, r8)
 800edc8:	46bd      	mov	sp, r7
 800edca:	b004      	add	sp, #16
 800edcc:	bd80      	pop	{r7, pc}
	...

0800edd0 <ip_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t 
ip_frag(struct pbuf *p, struct netif *netif, ip_addr_t *dest)
{
 800edd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800edd2:	b093      	sub	sp, #76	; 0x4c
 800edd4:	af02      	add	r7, sp, #8
 800edd6:	60f8      	str	r0, [r7, #12]
 800edd8:	60b9      	str	r1, [r7, #8]
 800edda:	607a      	str	r2, [r7, #4]
  struct ip_hdr *original_iphdr;
#endif
  struct ip_hdr *iphdr;
  u16_t nfb;
  u16_t left, cop;
  u16_t mtu = netif->mtu;
 800eddc:	2632      	movs	r6, #50	; 0x32
 800edde:	19bb      	adds	r3, r7, r6
 800ede0:	68ba      	ldr	r2, [r7, #8]
 800ede2:	8c12      	ldrh	r2, [r2, #32]
 800ede4:	801a      	strh	r2, [r3, #0]
  u16_t ofo, omf;
  u16_t last;
  u16_t poff = IP_HLEN;
 800ede6:	233a      	movs	r3, #58	; 0x3a
 800ede8:	18fb      	adds	r3, r7, r3
 800edea:	2214      	movs	r2, #20
 800edec:	801a      	strh	r2, [r3, #0]
  u16_t tmp;
#if !IP_FRAG_USES_STATIC_BUF && !LWIP_NETIF_TX_SINGLE_PBUF
  u16_t newpbuflen = 0;
 800edee:	2336      	movs	r3, #54	; 0x36
 800edf0:	18fb      	adds	r3, r7, r3
 800edf2:	2200      	movs	r2, #0
 800edf4:	801a      	strh	r2, [r3, #0]

  /* Copy the IP header in it */
  iphdr = (struct ip_hdr *)rambuf->payload;
  SMEMCPY(iphdr, p->payload, IP_HLEN);
#else /* IP_FRAG_USES_STATIC_BUF */
  original_iphdr = (struct ip_hdr *)p->payload;
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	685b      	ldr	r3, [r3, #4]
 800edfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  iphdr = original_iphdr;
 800edfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edfe:	62bb      	str	r3, [r7, #40]	; 0x28
#endif /* IP_FRAG_USES_STATIC_BUF */

  /* Save original offset */
  tmp = ntohs(IPH_OFFSET(iphdr));
 800ee00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee02:	799a      	ldrb	r2, [r3, #6]
 800ee04:	79db      	ldrb	r3, [r3, #7]
 800ee06:	021b      	lsls	r3, r3, #8
 800ee08:	4313      	orrs	r3, r2
 800ee0a:	b29b      	uxth	r3, r3
 800ee0c:	2138      	movs	r1, #56	; 0x38
 800ee0e:	000d      	movs	r5, r1
 800ee10:	187c      	adds	r4, r7, r1
 800ee12:	0018      	movs	r0, r3
 800ee14:	f7f6 ff8c 	bl	8005d30 <lwip_ntohs>
 800ee18:	0003      	movs	r3, r0
 800ee1a:	8023      	strh	r3, [r4, #0]
  ofo = tmp & IP_OFFMASK;
 800ee1c:	233c      	movs	r3, #60	; 0x3c
 800ee1e:	18fb      	adds	r3, r7, r3
 800ee20:	0029      	movs	r1, r5
 800ee22:	187a      	adds	r2, r7, r1
 800ee24:	8812      	ldrh	r2, [r2, #0]
 800ee26:	04d2      	lsls	r2, r2, #19
 800ee28:	0cd2      	lsrs	r2, r2, #19
 800ee2a:	801a      	strh	r2, [r3, #0]
  omf = tmp & IP_MF;
 800ee2c:	2326      	movs	r3, #38	; 0x26
 800ee2e:	18fb      	adds	r3, r7, r3
 800ee30:	187a      	adds	r2, r7, r1
 800ee32:	8811      	ldrh	r1, [r2, #0]
 800ee34:	2280      	movs	r2, #128	; 0x80
 800ee36:	0192      	lsls	r2, r2, #6
 800ee38:	400a      	ands	r2, r1
 800ee3a:	801a      	strh	r2, [r3, #0]

  left = p->tot_len - IP_HLEN;
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	891a      	ldrh	r2, [r3, #8]
 800ee40:	233e      	movs	r3, #62	; 0x3e
 800ee42:	18fb      	adds	r3, r7, r3
 800ee44:	3a14      	subs	r2, #20
 800ee46:	801a      	strh	r2, [r3, #0]

  nfb = (mtu - IP_HLEN) / 8;
 800ee48:	19bb      	adds	r3, r7, r6
 800ee4a:	881b      	ldrh	r3, [r3, #0]
 800ee4c:	3b14      	subs	r3, #20
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	da00      	bge.n	800ee54 <ip_frag+0x84>
 800ee52:	3307      	adds	r3, #7
 800ee54:	10db      	asrs	r3, r3, #3
 800ee56:	001a      	movs	r2, r3
 800ee58:	2324      	movs	r3, #36	; 0x24
 800ee5a:	18fb      	adds	r3, r7, r3
 800ee5c:	801a      	strh	r2, [r3, #0]

  while (left) {
 800ee5e:	e15a      	b.n	800f116 <ip_frag+0x346>
    last = (left <= mtu - IP_HLEN);
 800ee60:	233e      	movs	r3, #62	; 0x3e
 800ee62:	18fb      	adds	r3, r7, r3
 800ee64:	881b      	ldrh	r3, [r3, #0]
 800ee66:	2232      	movs	r2, #50	; 0x32
 800ee68:	18ba      	adds	r2, r7, r2
 800ee6a:	8812      	ldrh	r2, [r2, #0]
 800ee6c:	3a14      	subs	r2, #20
 800ee6e:	0fd8      	lsrs	r0, r3, #31
 800ee70:	17d1      	asrs	r1, r2, #31
 800ee72:	429a      	cmp	r2, r3
 800ee74:	4148      	adcs	r0, r1
 800ee76:	0003      	movs	r3, r0
 800ee78:	b2da      	uxtb	r2, r3
 800ee7a:	2022      	movs	r0, #34	; 0x22
 800ee7c:	183b      	adds	r3, r7, r0
 800ee7e:	801a      	strh	r2, [r3, #0]

    /* Set new offset and MF flag */
    tmp = omf | (IP_OFFMASK & (ofo));
 800ee80:	233c      	movs	r3, #60	; 0x3c
 800ee82:	18fb      	adds	r3, r7, r3
 800ee84:	881b      	ldrh	r3, [r3, #0]
 800ee86:	04db      	lsls	r3, r3, #19
 800ee88:	0cdb      	lsrs	r3, r3, #19
 800ee8a:	b299      	uxth	r1, r3
 800ee8c:	2338      	movs	r3, #56	; 0x38
 800ee8e:	18fb      	adds	r3, r7, r3
 800ee90:	2226      	movs	r2, #38	; 0x26
 800ee92:	18ba      	adds	r2, r7, r2
 800ee94:	8812      	ldrh	r2, [r2, #0]
 800ee96:	430a      	orrs	r2, r1
 800ee98:	801a      	strh	r2, [r3, #0]
    if (!last) {
 800ee9a:	183b      	adds	r3, r7, r0
 800ee9c:	881b      	ldrh	r3, [r3, #0]
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d107      	bne.n	800eeb2 <ip_frag+0xe2>
      tmp = tmp | IP_MF;
 800eea2:	2238      	movs	r2, #56	; 0x38
 800eea4:	18bb      	adds	r3, r7, r2
 800eea6:	18ba      	adds	r2, r7, r2
 800eea8:	8812      	ldrh	r2, [r2, #0]
 800eeaa:	2180      	movs	r1, #128	; 0x80
 800eeac:	0189      	lsls	r1, r1, #6
 800eeae:	430a      	orrs	r2, r1
 800eeb0:	801a      	strh	r2, [r3, #0]
    }

    /* Fill this fragment */
    cop = last ? left : nfb * 8;
 800eeb2:	2322      	movs	r3, #34	; 0x22
 800eeb4:	18fb      	adds	r3, r7, r3
 800eeb6:	881b      	ldrh	r3, [r3, #0]
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d105      	bne.n	800eec8 <ip_frag+0xf8>
 800eebc:	2324      	movs	r3, #36	; 0x24
 800eebe:	18fb      	adds	r3, r7, r3
 800eec0:	881b      	ldrh	r3, [r3, #0]
 800eec2:	00db      	lsls	r3, r3, #3
 800eec4:	b29b      	uxth	r3, r3
 800eec6:	e002      	b.n	800eece <ip_frag+0xfe>
 800eec8:	233e      	movs	r3, #62	; 0x3e
 800eeca:	18fb      	adds	r3, r7, r3
 800eecc:	881b      	ldrh	r3, [r3, #0]
 800eece:	2220      	movs	r2, #32
 800eed0:	18ba      	adds	r2, r7, r2
 800eed2:	8013      	strh	r3, [r2, #0]
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800eed4:	2200      	movs	r2, #0
 800eed6:	2114      	movs	r1, #20
 800eed8:	2002      	movs	r0, #2
 800eeda:	f7f7 fccf 	bl	800687c <pbuf_alloc>
 800eede:	0003      	movs	r3, r0
 800eee0:	61fb      	str	r3, [r7, #28]
    if (rambuf == NULL) {
 800eee2:	69fb      	ldr	r3, [r7, #28]
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d102      	bne.n	800eeee <ip_frag+0x11e>
      return ERR_MEM;
 800eee8:	2301      	movs	r3, #1
 800eeea:	425b      	negs	r3, r3
 800eeec:	e11a      	b.n	800f124 <ip_frag+0x354>
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800eeee:	69fb      	ldr	r3, [r7, #28]
 800eef0:	685b      	ldr	r3, [r3, #4]
 800eef2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800eef4:	2214      	movs	r2, #20
 800eef6:	0018      	movs	r0, r3
 800eef8:	f003 f8ad 	bl	8012056 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800eefc:	69fb      	ldr	r3, [r7, #28]
 800eefe:	685b      	ldr	r3, [r3, #4]
 800ef00:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Can just adjust p directly for needed offset. */
    p->payload = (u8_t *)p->payload + poff;
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	685a      	ldr	r2, [r3, #4]
 800ef06:	213a      	movs	r1, #58	; 0x3a
 800ef08:	187b      	adds	r3, r7, r1
 800ef0a:	881b      	ldrh	r3, [r3, #0]
 800ef0c:	18d2      	adds	r2, r2, r3
 800ef0e:	68fb      	ldr	r3, [r7, #12]
 800ef10:	605a      	str	r2, [r3, #4]
    p->len -= poff;
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	895a      	ldrh	r2, [r3, #10]
 800ef16:	187b      	adds	r3, r7, r1
 800ef18:	881b      	ldrh	r3, [r3, #0]
 800ef1a:	1ad3      	subs	r3, r2, r3
 800ef1c:	b29a      	uxth	r2, r3
 800ef1e:	68fb      	ldr	r3, [r7, #12]
 800ef20:	815a      	strh	r2, [r3, #10]

    left_to_copy = cop;
 800ef22:	2334      	movs	r3, #52	; 0x34
 800ef24:	18fb      	adds	r3, r7, r3
 800ef26:	2220      	movs	r2, #32
 800ef28:	18ba      	adds	r2, r7, r2
 800ef2a:	8812      	ldrh	r2, [r2, #0]
 800ef2c:	801a      	strh	r2, [r3, #0]
    while (left_to_copy) {
 800ef2e:	e068      	b.n	800f002 <ip_frag+0x232>
      struct pbuf_custom_ref *pcr;
      newpbuflen = (left_to_copy < p->len) ? left_to_copy : p->len;
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	8959      	ldrh	r1, [r3, #10]
 800ef34:	2336      	movs	r3, #54	; 0x36
 800ef36:	18fa      	adds	r2, r7, r3
 800ef38:	2334      	movs	r3, #52	; 0x34
 800ef3a:	18fb      	adds	r3, r7, r3
 800ef3c:	1c0c      	adds	r4, r1, #0
 800ef3e:	881b      	ldrh	r3, [r3, #0]
 800ef40:	b298      	uxth	r0, r3
 800ef42:	b2a1      	uxth	r1, r4
 800ef44:	4288      	cmp	r0, r1
 800ef46:	d900      	bls.n	800ef4a <ip_frag+0x17a>
 800ef48:	1c23      	adds	r3, r4, #0
 800ef4a:	8013      	strh	r3, [r2, #0]
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800ef4c:	2336      	movs	r3, #54	; 0x36
 800ef4e:	18fb      	adds	r3, r7, r3
 800ef50:	881b      	ldrh	r3, [r3, #0]
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d108      	bne.n	800ef68 <ip_frag+0x198>
        p = p->next;
 800ef56:	68fb      	ldr	r3, [r7, #12]
 800ef58:	681b      	ldr	r3, [r3, #0]
 800ef5a:	60fb      	str	r3, [r7, #12]
 800ef5c:	2234      	movs	r2, #52	; 0x34
 800ef5e:	18bb      	adds	r3, r7, r2
 800ef60:	18ba      	adds	r2, r7, r2
 800ef62:	8812      	ldrh	r2, [r2, #0]
 800ef64:	801a      	strh	r2, [r3, #0]
        continue;
 800ef66:	e04c      	b.n	800f002 <ip_frag+0x232>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800ef68:	f7ff ff04 	bl	800ed74 <ip_frag_alloc_pbuf_custom_ref>
 800ef6c:	0003      	movs	r3, r0
 800ef6e:	61bb      	str	r3, [r7, #24]
      if (pcr == NULL) {
 800ef70:	69bb      	ldr	r3, [r7, #24]
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d106      	bne.n	800ef84 <ip_frag+0x1b4>
        pbuf_free(rambuf);
 800ef76:	69fb      	ldr	r3, [r7, #28]
 800ef78:	0018      	movs	r0, r3
 800ef7a:	f7f7 ff0b 	bl	8006d94 <pbuf_free>
        return ERR_MEM;
 800ef7e:	2301      	movs	r3, #1
 800ef80:	425b      	negs	r3, r3
 800ef82:	e0cf      	b.n	800f124 <ip_frag+0x354>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc, p->payload, newpbuflen);
 800ef84:	69b8      	ldr	r0, [r7, #24]
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	685b      	ldr	r3, [r3, #4]
 800ef8a:	2436      	movs	r4, #54	; 0x36
 800ef8c:	193a      	adds	r2, r7, r4
 800ef8e:	8811      	ldrh	r1, [r2, #0]
 800ef90:	193a      	adds	r2, r7, r4
 800ef92:	8812      	ldrh	r2, [r2, #0]
 800ef94:	9201      	str	r2, [sp, #4]
 800ef96:	9300      	str	r3, [sp, #0]
 800ef98:	0003      	movs	r3, r0
 800ef9a:	2202      	movs	r2, #2
 800ef9c:	2003      	movs	r0, #3
 800ef9e:	f7f7 fd8f 	bl	8006ac0 <pbuf_alloced_custom>
 800efa2:	0003      	movs	r3, r0
 800efa4:	617b      	str	r3, [r7, #20]
      if (newpbuf == NULL) {
 800efa6:	697b      	ldr	r3, [r7, #20]
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d10a      	bne.n	800efc2 <ip_frag+0x1f2>
        ip_frag_free_pbuf_custom_ref(pcr);
 800efac:	69bb      	ldr	r3, [r7, #24]
 800efae:	0018      	movs	r0, r3
 800efb0:	f7ff fee9 	bl	800ed86 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800efb4:	69fb      	ldr	r3, [r7, #28]
 800efb6:	0018      	movs	r0, r3
 800efb8:	f7f7 feec 	bl	8006d94 <pbuf_free>
        return ERR_MEM;
 800efbc:	2301      	movs	r3, #1
 800efbe:	425b      	negs	r3, r3
 800efc0:	e0b0      	b.n	800f124 <ip_frag+0x354>
      }
      pbuf_ref(p);
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	0018      	movs	r0, r3
 800efc6:	f7f7 ff73 	bl	8006eb0 <pbuf_ref>
      pcr->original = p;
 800efca:	69bb      	ldr	r3, [r7, #24]
 800efcc:	68fa      	ldr	r2, [r7, #12]
 800efce:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800efd0:	69bb      	ldr	r3, [r7, #24]
 800efd2:	4a56      	ldr	r2, [pc, #344]	; (800f12c <ip_frag+0x35c>)
 800efd4:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800efd6:	697a      	ldr	r2, [r7, #20]
 800efd8:	69fb      	ldr	r3, [r7, #28]
 800efda:	0011      	movs	r1, r2
 800efdc:	0018      	movs	r0, r3
 800efde:	f7f7 ff78 	bl	8006ed2 <pbuf_cat>
      left_to_copy -= newpbuflen;
 800efe2:	2034      	movs	r0, #52	; 0x34
 800efe4:	183b      	adds	r3, r7, r0
 800efe6:	1839      	adds	r1, r7, r0
 800efe8:	2236      	movs	r2, #54	; 0x36
 800efea:	18ba      	adds	r2, r7, r2
 800efec:	8809      	ldrh	r1, [r1, #0]
 800efee:	8812      	ldrh	r2, [r2, #0]
 800eff0:	1a8a      	subs	r2, r1, r2
 800eff2:	801a      	strh	r2, [r3, #0]
      if (left_to_copy) {
 800eff4:	183b      	adds	r3, r7, r0
 800eff6:	881b      	ldrh	r3, [r3, #0]
 800eff8:	2b00      	cmp	r3, #0
 800effa:	d002      	beq.n	800f002 <ip_frag+0x232>
        p = p->next;
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800f002:	2334      	movs	r3, #52	; 0x34
 800f004:	18fb      	adds	r3, r7, r3
 800f006:	881b      	ldrh	r3, [r3, #0]
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d191      	bne.n	800ef30 <ip_frag+0x160>
      }
    }
    poff = newpbuflen;
 800f00c:	233a      	movs	r3, #58	; 0x3a
 800f00e:	18fb      	adds	r3, r7, r3
 800f010:	2236      	movs	r2, #54	; 0x36
 800f012:	18ba      	adds	r2, r7, r2
 800f014:	8812      	ldrh	r2, [r2, #0]
 800f016:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
#endif /* IP_FRAG_USES_STATIC_BUF */

    /* Correct header */
    IPH_OFFSET_SET(iphdr, htons(tmp));
 800f018:	2338      	movs	r3, #56	; 0x38
 800f01a:	18fb      	adds	r3, r7, r3
 800f01c:	881b      	ldrh	r3, [r3, #0]
 800f01e:	0018      	movs	r0, r3
 800f020:	f7f6 fe70 	bl	8005d04 <lwip_htons>
 800f024:	0003      	movs	r3, r0
 800f026:	001a      	movs	r2, r3
 800f028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f02a:	21ff      	movs	r1, #255	; 0xff
 800f02c:	4011      	ands	r1, r2
 800f02e:	000c      	movs	r4, r1
 800f030:	7999      	ldrb	r1, [r3, #6]
 800f032:	2000      	movs	r0, #0
 800f034:	4001      	ands	r1, r0
 800f036:	1c08      	adds	r0, r1, #0
 800f038:	1c21      	adds	r1, r4, #0
 800f03a:	4301      	orrs	r1, r0
 800f03c:	7199      	strb	r1, [r3, #6]
 800f03e:	0a12      	lsrs	r2, r2, #8
 800f040:	b290      	uxth	r0, r2
 800f042:	79da      	ldrb	r2, [r3, #7]
 800f044:	2100      	movs	r1, #0
 800f046:	400a      	ands	r2, r1
 800f048:	1c11      	adds	r1, r2, #0
 800f04a:	1c02      	adds	r2, r0, #0
 800f04c:	430a      	orrs	r2, r1
 800f04e:	71da      	strb	r2, [r3, #7]
    IPH_LEN_SET(iphdr, htons(cop + IP_HLEN));
 800f050:	2520      	movs	r5, #32
 800f052:	197b      	adds	r3, r7, r5
 800f054:	881b      	ldrh	r3, [r3, #0]
 800f056:	3314      	adds	r3, #20
 800f058:	b29b      	uxth	r3, r3
 800f05a:	0018      	movs	r0, r3
 800f05c:	f7f6 fe52 	bl	8005d04 <lwip_htons>
 800f060:	0003      	movs	r3, r0
 800f062:	001a      	movs	r2, r3
 800f064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f066:	21ff      	movs	r1, #255	; 0xff
 800f068:	4011      	ands	r1, r2
 800f06a:	000c      	movs	r4, r1
 800f06c:	7899      	ldrb	r1, [r3, #2]
 800f06e:	2000      	movs	r0, #0
 800f070:	4001      	ands	r1, r0
 800f072:	1c08      	adds	r0, r1, #0
 800f074:	1c21      	adds	r1, r4, #0
 800f076:	4301      	orrs	r1, r0
 800f078:	7099      	strb	r1, [r3, #2]
 800f07a:	0a12      	lsrs	r2, r2, #8
 800f07c:	b290      	uxth	r0, r2
 800f07e:	78da      	ldrb	r2, [r3, #3]
 800f080:	2100      	movs	r1, #0
 800f082:	400a      	ands	r2, r1
 800f084:	1c11      	adds	r1, r2, #0
 800f086:	1c02      	adds	r2, r0, #0
 800f088:	430a      	orrs	r2, r1
 800f08a:	70da      	strb	r2, [r3, #3]
    IPH_CHKSUM_SET(iphdr, 0);
 800f08c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f08e:	7a9a      	ldrb	r2, [r3, #10]
 800f090:	2100      	movs	r1, #0
 800f092:	400a      	ands	r2, r1
 800f094:	729a      	strb	r2, [r3, #10]
 800f096:	7ada      	ldrb	r2, [r3, #11]
 800f098:	2100      	movs	r1, #0
 800f09a:	400a      	ands	r2, r1
 800f09c:	72da      	strb	r2, [r3, #11]
    IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 800f09e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0a0:	2114      	movs	r1, #20
 800f0a2:	0018      	movs	r0, r3
 800f0a4:	f7fe fc60 	bl	800d968 <inet_chksum>
 800f0a8:	0003      	movs	r3, r0
 800f0aa:	001a      	movs	r2, r3
 800f0ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0ae:	21ff      	movs	r1, #255	; 0xff
 800f0b0:	4011      	ands	r1, r2
 800f0b2:	000c      	movs	r4, r1
 800f0b4:	7a99      	ldrb	r1, [r3, #10]
 800f0b6:	2000      	movs	r0, #0
 800f0b8:	4001      	ands	r1, r0
 800f0ba:	1c08      	adds	r0, r1, #0
 800f0bc:	1c21      	adds	r1, r4, #0
 800f0be:	4301      	orrs	r1, r0
 800f0c0:	7299      	strb	r1, [r3, #10]
 800f0c2:	0a12      	lsrs	r2, r2, #8
 800f0c4:	b290      	uxth	r0, r2
 800f0c6:	7ada      	ldrb	r2, [r3, #11]
 800f0c8:	2100      	movs	r1, #0
 800f0ca:	400a      	ands	r2, r1
 800f0cc:	1c11      	adds	r1, r2, #0
 800f0ce:	1c02      	adds	r2, r0, #0
 800f0d0:	430a      	orrs	r2, r1
 800f0d2:	72da      	strb	r2, [r3, #11]
    }
#else /* IP_FRAG_USES_STATIC_BUF */
    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800f0d4:	68bb      	ldr	r3, [r7, #8]
 800f0d6:	695b      	ldr	r3, [r3, #20]
 800f0d8:	687a      	ldr	r2, [r7, #4]
 800f0da:	69f9      	ldr	r1, [r7, #28]
 800f0dc:	68b8      	ldr	r0, [r7, #8]
 800f0de:	4798      	blx	r3
    IPFRAG_STATS_INC(ip_frag.xmit);
 800f0e0:	4b13      	ldr	r3, [pc, #76]	; (800f130 <ip_frag+0x360>)
 800f0e2:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800f0e4:	3301      	adds	r3, #1
 800f0e6:	b29a      	uxth	r2, r3
 800f0e8:	4b11      	ldr	r3, [pc, #68]	; (800f130 <ip_frag+0x360>)
 800f0ea:	861a      	strh	r2, [r3, #48]	; 0x30
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */
    
    pbuf_free(rambuf);
 800f0ec:	69fb      	ldr	r3, [r7, #28]
 800f0ee:	0018      	movs	r0, r3
 800f0f0:	f7f7 fe50 	bl	8006d94 <pbuf_free>
#endif /* IP_FRAG_USES_STATIC_BUF */
    left -= cop;
 800f0f4:	223e      	movs	r2, #62	; 0x3e
 800f0f6:	18bb      	adds	r3, r7, r2
 800f0f8:	18b9      	adds	r1, r7, r2
 800f0fa:	197a      	adds	r2, r7, r5
 800f0fc:	8809      	ldrh	r1, [r1, #0]
 800f0fe:	8812      	ldrh	r2, [r2, #0]
 800f100:	1a8a      	subs	r2, r1, r2
 800f102:	801a      	strh	r2, [r3, #0]
    ofo += nfb;
 800f104:	223c      	movs	r2, #60	; 0x3c
 800f106:	18bb      	adds	r3, r7, r2
 800f108:	18b9      	adds	r1, r7, r2
 800f10a:	2224      	movs	r2, #36	; 0x24
 800f10c:	18ba      	adds	r2, r7, r2
 800f10e:	8809      	ldrh	r1, [r1, #0]
 800f110:	8812      	ldrh	r2, [r2, #0]
 800f112:	188a      	adds	r2, r1, r2
 800f114:	801a      	strh	r2, [r3, #0]
  while (left) {
 800f116:	233e      	movs	r3, #62	; 0x3e
 800f118:	18fb      	adds	r3, r7, r3
 800f11a:	881b      	ldrh	r3, [r3, #0]
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d000      	beq.n	800f122 <ip_frag+0x352>
 800f120:	e69e      	b.n	800ee60 <ip_frag+0x90>
  }
#if IP_FRAG_USES_STATIC_BUF
  pbuf_free(rambuf);
#endif /* IP_FRAG_USES_STATIC_BUF */
  snmp_inc_ipfragoks();
  return ERR_OK;
 800f122:	2300      	movs	r3, #0
}
 800f124:	0018      	movs	r0, r3
 800f126:	46bd      	mov	sp, r7
 800f128:	b011      	add	sp, #68	; 0x44
 800f12a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f12c:	0800eda1 	.word	0x0800eda1
 800f130:	2000340c 	.word	0x2000340c

0800f134 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800f134:	b580      	push	{r7, lr}
 800f136:	b082      	sub	sp, #8
 800f138:	af00      	add	r7, sp, #0
 800f13a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  snmp_delete_arpidx_tree(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800f13c:	4914      	ldr	r1, [pc, #80]	; (800f190 <etharp_free_entry+0x5c>)
 800f13e:	687a      	ldr	r2, [r7, #4]
 800f140:	0013      	movs	r3, r2
 800f142:	009b      	lsls	r3, r3, #2
 800f144:	189b      	adds	r3, r3, r2
 800f146:	009b      	lsls	r3, r3, #2
 800f148:	585b      	ldr	r3, [r3, r1]
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d011      	beq.n	800f172 <etharp_free_entry+0x3e>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800f14e:	4910      	ldr	r1, [pc, #64]	; (800f190 <etharp_free_entry+0x5c>)
 800f150:	687a      	ldr	r2, [r7, #4]
 800f152:	0013      	movs	r3, r2
 800f154:	009b      	lsls	r3, r3, #2
 800f156:	189b      	adds	r3, r3, r2
 800f158:	009b      	lsls	r3, r3, #2
 800f15a:	585b      	ldr	r3, [r3, r1]
 800f15c:	0018      	movs	r0, r3
 800f15e:	f7f7 fe19 	bl	8006d94 <pbuf_free>
    arp_table[i].q = NULL;
 800f162:	490b      	ldr	r1, [pc, #44]	; (800f190 <etharp_free_entry+0x5c>)
 800f164:	687a      	ldr	r2, [r7, #4]
 800f166:	0013      	movs	r3, r2
 800f168:	009b      	lsls	r3, r3, #2
 800f16a:	189b      	adds	r3, r3, r2
 800f16c:	009b      	lsls	r3, r3, #2
 800f16e:	2200      	movs	r2, #0
 800f170:	505a      	str	r2, [r3, r1]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800f172:	4907      	ldr	r1, [pc, #28]	; (800f190 <etharp_free_entry+0x5c>)
 800f174:	687a      	ldr	r2, [r7, #4]
 800f176:	0013      	movs	r3, r2
 800f178:	009b      	lsls	r3, r3, #2
 800f17a:	189b      	adds	r3, r3, r2
 800f17c:	009b      	lsls	r3, r3, #2
 800f17e:	18cb      	adds	r3, r1, r3
 800f180:	3312      	adds	r3, #18
 800f182:	2200      	movs	r2, #0
 800f184:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800f186:	46c0      	nop			; (mov r8, r8)
 800f188:	46bd      	mov	sp, r7
 800f18a:	b002      	add	sp, #8
 800f18c:	bd80      	pop	{r7, pc}
 800f18e:	46c0      	nop			; (mov r8, r8)
 800f190:	20002748 	.word	0x20002748

0800f194 <etharp_tmr>:
 * This function should be called every ETHARP_TMR_INTERVAL milliseconds (5 seconds),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800f194:	b580      	push	{r7, lr}
 800f196:	b082      	sub	sp, #8
 800f198:	af00      	add	r7, sp, #0
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f19a:	1dfb      	adds	r3, r7, #7
 800f19c:	2200      	movs	r2, #0
 800f19e:	701a      	strb	r2, [r3, #0]
 800f1a0:	e06e      	b.n	800f280 <etharp_tmr+0xec>
    u8_t state = arp_table[i].state;
 800f1a2:	1dfb      	adds	r3, r7, #7
 800f1a4:	781a      	ldrb	r2, [r3, #0]
 800f1a6:	1db9      	adds	r1, r7, #6
 800f1a8:	4839      	ldr	r0, [pc, #228]	; (800f290 <etharp_tmr+0xfc>)
 800f1aa:	0013      	movs	r3, r2
 800f1ac:	009b      	lsls	r3, r3, #2
 800f1ae:	189b      	adds	r3, r3, r2
 800f1b0:	009b      	lsls	r3, r3, #2
 800f1b2:	18c3      	adds	r3, r0, r3
 800f1b4:	3312      	adds	r3, #18
 800f1b6:	781b      	ldrb	r3, [r3, #0]
 800f1b8:	700b      	strb	r3, [r1, #0]
    if (state != ETHARP_STATE_EMPTY
 800f1ba:	1dbb      	adds	r3, r7, #6
 800f1bc:	781b      	ldrb	r3, [r3, #0]
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d059      	beq.n	800f276 <etharp_tmr+0xe2>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
 800f1c2:	1dbb      	adds	r3, r7, #6
 800f1c4:	781b      	ldrb	r3, [r3, #0]
 800f1c6:	2b04      	cmp	r3, #4
 800f1c8:	d055      	beq.n	800f276 <etharp_tmr+0xe2>
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 800f1ca:	1dfb      	adds	r3, r7, #7
 800f1cc:	781a      	ldrb	r2, [r3, #0]
 800f1ce:	4930      	ldr	r1, [pc, #192]	; (800f290 <etharp_tmr+0xfc>)
 800f1d0:	0013      	movs	r3, r2
 800f1d2:	009b      	lsls	r3, r3, #2
 800f1d4:	189b      	adds	r3, r3, r2
 800f1d6:	009b      	lsls	r3, r3, #2
 800f1d8:	18cb      	adds	r3, r1, r3
 800f1da:	3313      	adds	r3, #19
 800f1dc:	781b      	ldrb	r3, [r3, #0]
 800f1de:	3301      	adds	r3, #1
 800f1e0:	b2d8      	uxtb	r0, r3
 800f1e2:	492b      	ldr	r1, [pc, #172]	; (800f290 <etharp_tmr+0xfc>)
 800f1e4:	0013      	movs	r3, r2
 800f1e6:	009b      	lsls	r3, r3, #2
 800f1e8:	189b      	adds	r3, r3, r2
 800f1ea:	009b      	lsls	r3, r3, #2
 800f1ec:	18cb      	adds	r3, r1, r3
 800f1ee:	3313      	adds	r3, #19
 800f1f0:	1c02      	adds	r2, r0, #0
 800f1f2:	701a      	strb	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800f1f4:	1dfb      	adds	r3, r7, #7
 800f1f6:	781a      	ldrb	r2, [r3, #0]
 800f1f8:	4925      	ldr	r1, [pc, #148]	; (800f290 <etharp_tmr+0xfc>)
 800f1fa:	0013      	movs	r3, r2
 800f1fc:	009b      	lsls	r3, r3, #2
 800f1fe:	189b      	adds	r3, r3, r2
 800f200:	009b      	lsls	r3, r3, #2
 800f202:	18cb      	adds	r3, r1, r3
 800f204:	3313      	adds	r3, #19
 800f206:	781b      	ldrb	r3, [r3, #0]
 800f208:	2bef      	cmp	r3, #239	; 0xef
 800f20a:	d817      	bhi.n	800f23c <etharp_tmr+0xa8>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800f20c:	1dfb      	adds	r3, r7, #7
 800f20e:	781a      	ldrb	r2, [r3, #0]
 800f210:	491f      	ldr	r1, [pc, #124]	; (800f290 <etharp_tmr+0xfc>)
 800f212:	0013      	movs	r3, r2
 800f214:	009b      	lsls	r3, r3, #2
 800f216:	189b      	adds	r3, r3, r2
 800f218:	009b      	lsls	r3, r3, #2
 800f21a:	18cb      	adds	r3, r1, r3
 800f21c:	3312      	adds	r3, #18
 800f21e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800f220:	2b01      	cmp	r3, #1
 800f222:	d111      	bne.n	800f248 <etharp_tmr+0xb4>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800f224:	1dfb      	adds	r3, r7, #7
 800f226:	781a      	ldrb	r2, [r3, #0]
 800f228:	4919      	ldr	r1, [pc, #100]	; (800f290 <etharp_tmr+0xfc>)
 800f22a:	0013      	movs	r3, r2
 800f22c:	009b      	lsls	r3, r3, #2
 800f22e:	189b      	adds	r3, r3, r2
 800f230:	009b      	lsls	r3, r3, #2
 800f232:	18cb      	adds	r3, r1, r3
 800f234:	3313      	adds	r3, #19
 800f236:	781b      	ldrb	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800f238:	2b01      	cmp	r3, #1
 800f23a:	d905      	bls.n	800f248 <etharp_tmr+0xb4>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800f23c:	1dfb      	adds	r3, r7, #7
 800f23e:	781b      	ldrb	r3, [r3, #0]
 800f240:	0018      	movs	r0, r3
 800f242:	f7ff ff77 	bl	800f134 <etharp_free_entry>
 800f246:	e016      	b.n	800f276 <etharp_tmr+0xe2>
      }
      else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING) {
 800f248:	1dfb      	adds	r3, r7, #7
 800f24a:	781a      	ldrb	r2, [r3, #0]
 800f24c:	4910      	ldr	r1, [pc, #64]	; (800f290 <etharp_tmr+0xfc>)
 800f24e:	0013      	movs	r3, r2
 800f250:	009b      	lsls	r3, r3, #2
 800f252:	189b      	adds	r3, r3, r2
 800f254:	009b      	lsls	r3, r3, #2
 800f256:	18cb      	adds	r3, r1, r3
 800f258:	3312      	adds	r3, #18
 800f25a:	781b      	ldrb	r3, [r3, #0]
 800f25c:	2b03      	cmp	r3, #3
 800f25e:	d10a      	bne.n	800f276 <etharp_tmr+0xe2>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800f260:	1dfb      	adds	r3, r7, #7
 800f262:	781a      	ldrb	r2, [r3, #0]
 800f264:	490a      	ldr	r1, [pc, #40]	; (800f290 <etharp_tmr+0xfc>)
 800f266:	0013      	movs	r3, r2
 800f268:	009b      	lsls	r3, r3, #2
 800f26a:	189b      	adds	r3, r3, r2
 800f26c:	009b      	lsls	r3, r3, #2
 800f26e:	18cb      	adds	r3, r1, r3
 800f270:	3312      	adds	r3, #18
 800f272:	2202      	movs	r2, #2
 800f274:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f276:	1dfb      	adds	r3, r7, #7
 800f278:	1dfa      	adds	r2, r7, #7
 800f27a:	7812      	ldrb	r2, [r2, #0]
 800f27c:	3201      	adds	r2, #1
 800f27e:	701a      	strb	r2, [r3, #0]
 800f280:	1dfb      	adds	r3, r7, #7
 800f282:	781b      	ldrb	r3, [r3, #0]
 800f284:	2b09      	cmp	r3, #9
 800f286:	d98c      	bls.n	800f1a2 <etharp_tmr+0xe>
        /* resend an ARP query here? */
      }
#endif /* ARP_QUEUEING */
    }
  }
}
 800f288:	46c0      	nop			; (mov r8, r8)
 800f28a:	46bd      	mov	sp, r7
 800f28c:	b002      	add	sp, #8
 800f28e:	bd80      	pop	{r7, pc}
 800f290:	20002748 	.word	0x20002748

0800f294 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(ip_addr_t *ipaddr, u8_t flags)
{
 800f294:	b580      	push	{r7, lr}
 800f296:	b086      	sub	sp, #24
 800f298:	af00      	add	r7, sp, #0
 800f29a:	6078      	str	r0, [r7, #4]
 800f29c:	000a      	movs	r2, r1
 800f29e:	1cfb      	adds	r3, r7, #3
 800f2a0:	701a      	strb	r2, [r3, #0]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800f2a2:	2317      	movs	r3, #23
 800f2a4:	18fb      	adds	r3, r7, r3
 800f2a6:	220a      	movs	r2, #10
 800f2a8:	701a      	strb	r2, [r3, #0]
 800f2aa:	2316      	movs	r3, #22
 800f2ac:	18fb      	adds	r3, r7, r3
 800f2ae:	220a      	movs	r2, #10
 800f2b0:	701a      	strb	r2, [r3, #0]
  s8_t empty = ARP_TABLE_SIZE;
 800f2b2:	2315      	movs	r3, #21
 800f2b4:	18fb      	adds	r3, r7, r3
 800f2b6:	220a      	movs	r2, #10
 800f2b8:	701a      	strb	r2, [r3, #0]
  u8_t i = 0, age_pending = 0, age_stable = 0;
 800f2ba:	2114      	movs	r1, #20
 800f2bc:	187b      	adds	r3, r7, r1
 800f2be:	2200      	movs	r2, #0
 800f2c0:	701a      	strb	r2, [r3, #0]
 800f2c2:	2313      	movs	r3, #19
 800f2c4:	18fb      	adds	r3, r7, r3
 800f2c6:	2200      	movs	r2, #0
 800f2c8:	701a      	strb	r2, [r3, #0]
 800f2ca:	2312      	movs	r3, #18
 800f2cc:	18fb      	adds	r3, r7, r3
 800f2ce:	2200      	movs	r2, #0
 800f2d0:	701a      	strb	r2, [r3, #0]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 800f2d2:	2311      	movs	r3, #17
 800f2d4:	18fb      	adds	r3, r7, r3
 800f2d6:	220a      	movs	r2, #10
 800f2d8:	701a      	strb	r2, [r3, #0]
  /* its age */
  u8_t age_queue = 0;
 800f2da:	2310      	movs	r3, #16
 800f2dc:	18fb      	adds	r3, r7, r3
 800f2de:	2200      	movs	r2, #0
 800f2e0:	701a      	strb	r2, [r3, #0]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f2e2:	187b      	adds	r3, r7, r1
 800f2e4:	2200      	movs	r2, #0
 800f2e6:	701a      	strb	r2, [r3, #0]
 800f2e8:	e0c7      	b.n	800f47a <etharp_find_entry+0x1e6>
    u8_t state = arp_table[i].state;
 800f2ea:	2314      	movs	r3, #20
 800f2ec:	18fb      	adds	r3, r7, r3
 800f2ee:	781a      	ldrb	r2, [r3, #0]
 800f2f0:	230f      	movs	r3, #15
 800f2f2:	18f9      	adds	r1, r7, r3
 800f2f4:	48a4      	ldr	r0, [pc, #656]	; (800f588 <etharp_find_entry+0x2f4>)
 800f2f6:	0013      	movs	r3, r2
 800f2f8:	009b      	lsls	r3, r3, #2
 800f2fa:	189b      	adds	r3, r3, r2
 800f2fc:	009b      	lsls	r3, r3, #2
 800f2fe:	18c3      	adds	r3, r0, r3
 800f300:	3312      	adds	r3, #18
 800f302:	781b      	ldrb	r3, [r3, #0]
 800f304:	700b      	strb	r3, [r1, #0]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800f306:	2315      	movs	r3, #21
 800f308:	18fb      	adds	r3, r7, r3
 800f30a:	781b      	ldrb	r3, [r3, #0]
 800f30c:	b25b      	sxtb	r3, r3
 800f30e:	2b0a      	cmp	r3, #10
 800f310:	d10b      	bne.n	800f32a <etharp_find_entry+0x96>
 800f312:	230f      	movs	r3, #15
 800f314:	18fb      	adds	r3, r7, r3
 800f316:	781b      	ldrb	r3, [r3, #0]
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d106      	bne.n	800f32a <etharp_find_entry+0x96>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 800f31c:	2315      	movs	r3, #21
 800f31e:	18fb      	adds	r3, r7, r3
 800f320:	2214      	movs	r2, #20
 800f322:	18ba      	adds	r2, r7, r2
 800f324:	7812      	ldrb	r2, [r2, #0]
 800f326:	701a      	strb	r2, [r3, #0]
 800f328:	e0a1      	b.n	800f46e <etharp_find_entry+0x1da>
    } else if (state != ETHARP_STATE_EMPTY) {
 800f32a:	230f      	movs	r3, #15
 800f32c:	18fb      	adds	r3, r7, r3
 800f32e:	781b      	ldrb	r3, [r3, #0]
 800f330:	2b00      	cmp	r3, #0
 800f332:	d100      	bne.n	800f336 <etharp_find_entry+0xa2>
 800f334:	e09b      	b.n	800f46e <etharp_find_entry+0x1da>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip_addr_cmp(ipaddr, &arp_table[i].ipaddr)) {
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d013      	beq.n	800f364 <etharp_find_entry+0xd0>
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	6819      	ldr	r1, [r3, #0]
 800f340:	2314      	movs	r3, #20
 800f342:	18fb      	adds	r3, r7, r3
 800f344:	781a      	ldrb	r2, [r3, #0]
 800f346:	4890      	ldr	r0, [pc, #576]	; (800f588 <etharp_find_entry+0x2f4>)
 800f348:	0013      	movs	r3, r2
 800f34a:	009b      	lsls	r3, r3, #2
 800f34c:	189b      	adds	r3, r3, r2
 800f34e:	009b      	lsls	r3, r3, #2
 800f350:	18c3      	adds	r3, r0, r3
 800f352:	3304      	adds	r3, #4
 800f354:	681b      	ldr	r3, [r3, #0]
 800f356:	4299      	cmp	r1, r3
 800f358:	d104      	bne.n	800f364 <etharp_find_entry+0xd0>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 800f35a:	2314      	movs	r3, #20
 800f35c:	18fb      	adds	r3, r7, r3
 800f35e:	781b      	ldrb	r3, [r3, #0]
 800f360:	b25b      	sxtb	r3, r3
 800f362:	e10c      	b.n	800f57e <etharp_find_entry+0x2ea>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800f364:	230f      	movs	r3, #15
 800f366:	18fb      	adds	r3, r7, r3
 800f368:	781b      	ldrb	r3, [r3, #0]
 800f36a:	2b01      	cmp	r3, #1
 800f36c:	d152      	bne.n	800f414 <etharp_find_entry+0x180>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800f36e:	2314      	movs	r3, #20
 800f370:	18fb      	adds	r3, r7, r3
 800f372:	781a      	ldrb	r2, [r3, #0]
 800f374:	4984      	ldr	r1, [pc, #528]	; (800f588 <etharp_find_entry+0x2f4>)
 800f376:	0013      	movs	r3, r2
 800f378:	009b      	lsls	r3, r3, #2
 800f37a:	189b      	adds	r3, r3, r2
 800f37c:	009b      	lsls	r3, r3, #2
 800f37e:	585b      	ldr	r3, [r3, r1]
 800f380:	2b00      	cmp	r3, #0
 800f382:	d023      	beq.n	800f3cc <etharp_find_entry+0x138>
          if (arp_table[i].ctime >= age_queue) {
 800f384:	2314      	movs	r3, #20
 800f386:	18fb      	adds	r3, r7, r3
 800f388:	781a      	ldrb	r2, [r3, #0]
 800f38a:	497f      	ldr	r1, [pc, #508]	; (800f588 <etharp_find_entry+0x2f4>)
 800f38c:	0013      	movs	r3, r2
 800f38e:	009b      	lsls	r3, r3, #2
 800f390:	189b      	adds	r3, r3, r2
 800f392:	009b      	lsls	r3, r3, #2
 800f394:	18cb      	adds	r3, r1, r3
 800f396:	3313      	adds	r3, #19
 800f398:	781b      	ldrb	r3, [r3, #0]
 800f39a:	2210      	movs	r2, #16
 800f39c:	18ba      	adds	r2, r7, r2
 800f39e:	7812      	ldrb	r2, [r2, #0]
 800f3a0:	429a      	cmp	r2, r3
 800f3a2:	d864      	bhi.n	800f46e <etharp_find_entry+0x1da>
            old_queue = i;
 800f3a4:	2311      	movs	r3, #17
 800f3a6:	18fb      	adds	r3, r7, r3
 800f3a8:	2114      	movs	r1, #20
 800f3aa:	187a      	adds	r2, r7, r1
 800f3ac:	7812      	ldrb	r2, [r2, #0]
 800f3ae:	701a      	strb	r2, [r3, #0]
            age_queue = arp_table[i].ctime;
 800f3b0:	187b      	adds	r3, r7, r1
 800f3b2:	781a      	ldrb	r2, [r3, #0]
 800f3b4:	2310      	movs	r3, #16
 800f3b6:	18f9      	adds	r1, r7, r3
 800f3b8:	4873      	ldr	r0, [pc, #460]	; (800f588 <etharp_find_entry+0x2f4>)
 800f3ba:	0013      	movs	r3, r2
 800f3bc:	009b      	lsls	r3, r3, #2
 800f3be:	189b      	adds	r3, r3, r2
 800f3c0:	009b      	lsls	r3, r3, #2
 800f3c2:	18c3      	adds	r3, r0, r3
 800f3c4:	3313      	adds	r3, #19
 800f3c6:	781b      	ldrb	r3, [r3, #0]
 800f3c8:	700b      	strb	r3, [r1, #0]
 800f3ca:	e050      	b.n	800f46e <etharp_find_entry+0x1da>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800f3cc:	2314      	movs	r3, #20
 800f3ce:	18fb      	adds	r3, r7, r3
 800f3d0:	781a      	ldrb	r2, [r3, #0]
 800f3d2:	496d      	ldr	r1, [pc, #436]	; (800f588 <etharp_find_entry+0x2f4>)
 800f3d4:	0013      	movs	r3, r2
 800f3d6:	009b      	lsls	r3, r3, #2
 800f3d8:	189b      	adds	r3, r3, r2
 800f3da:	009b      	lsls	r3, r3, #2
 800f3dc:	18cb      	adds	r3, r1, r3
 800f3de:	3313      	adds	r3, #19
 800f3e0:	781b      	ldrb	r3, [r3, #0]
 800f3e2:	2213      	movs	r2, #19
 800f3e4:	18ba      	adds	r2, r7, r2
 800f3e6:	7812      	ldrb	r2, [r2, #0]
 800f3e8:	429a      	cmp	r2, r3
 800f3ea:	d840      	bhi.n	800f46e <etharp_find_entry+0x1da>
            old_pending = i;
 800f3ec:	2317      	movs	r3, #23
 800f3ee:	18fb      	adds	r3, r7, r3
 800f3f0:	2114      	movs	r1, #20
 800f3f2:	187a      	adds	r2, r7, r1
 800f3f4:	7812      	ldrb	r2, [r2, #0]
 800f3f6:	701a      	strb	r2, [r3, #0]
            age_pending = arp_table[i].ctime;
 800f3f8:	187b      	adds	r3, r7, r1
 800f3fa:	781a      	ldrb	r2, [r3, #0]
 800f3fc:	2313      	movs	r3, #19
 800f3fe:	18f9      	adds	r1, r7, r3
 800f400:	4861      	ldr	r0, [pc, #388]	; (800f588 <etharp_find_entry+0x2f4>)
 800f402:	0013      	movs	r3, r2
 800f404:	009b      	lsls	r3, r3, #2
 800f406:	189b      	adds	r3, r3, r2
 800f408:	009b      	lsls	r3, r3, #2
 800f40a:	18c3      	adds	r3, r0, r3
 800f40c:	3313      	adds	r3, #19
 800f40e:	781b      	ldrb	r3, [r3, #0]
 800f410:	700b      	strb	r3, [r1, #0]
 800f412:	e02c      	b.n	800f46e <etharp_find_entry+0x1da>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800f414:	230f      	movs	r3, #15
 800f416:	18fb      	adds	r3, r7, r3
 800f418:	781b      	ldrb	r3, [r3, #0]
 800f41a:	2b01      	cmp	r3, #1
 800f41c:	d927      	bls.n	800f46e <etharp_find_entry+0x1da>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
 800f41e:	230f      	movs	r3, #15
 800f420:	18fb      	adds	r3, r7, r3
 800f422:	781b      	ldrb	r3, [r3, #0]
 800f424:	2b03      	cmp	r3, #3
 800f426:	d822      	bhi.n	800f46e <etharp_find_entry+0x1da>
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800f428:	2314      	movs	r3, #20
 800f42a:	18fb      	adds	r3, r7, r3
 800f42c:	781a      	ldrb	r2, [r3, #0]
 800f42e:	4956      	ldr	r1, [pc, #344]	; (800f588 <etharp_find_entry+0x2f4>)
 800f430:	0013      	movs	r3, r2
 800f432:	009b      	lsls	r3, r3, #2
 800f434:	189b      	adds	r3, r3, r2
 800f436:	009b      	lsls	r3, r3, #2
 800f438:	18cb      	adds	r3, r1, r3
 800f43a:	3313      	adds	r3, #19
 800f43c:	781b      	ldrb	r3, [r3, #0]
 800f43e:	2212      	movs	r2, #18
 800f440:	18ba      	adds	r2, r7, r2
 800f442:	7812      	ldrb	r2, [r2, #0]
 800f444:	429a      	cmp	r2, r3
 800f446:	d812      	bhi.n	800f46e <etharp_find_entry+0x1da>
            old_stable = i;
 800f448:	2316      	movs	r3, #22
 800f44a:	18fb      	adds	r3, r7, r3
 800f44c:	2114      	movs	r1, #20
 800f44e:	187a      	adds	r2, r7, r1
 800f450:	7812      	ldrb	r2, [r2, #0]
 800f452:	701a      	strb	r2, [r3, #0]
            age_stable = arp_table[i].ctime;
 800f454:	187b      	adds	r3, r7, r1
 800f456:	781a      	ldrb	r2, [r3, #0]
 800f458:	2312      	movs	r3, #18
 800f45a:	18f9      	adds	r1, r7, r3
 800f45c:	484a      	ldr	r0, [pc, #296]	; (800f588 <etharp_find_entry+0x2f4>)
 800f45e:	0013      	movs	r3, r2
 800f460:	009b      	lsls	r3, r3, #2
 800f462:	189b      	adds	r3, r3, r2
 800f464:	009b      	lsls	r3, r3, #2
 800f466:	18c3      	adds	r3, r0, r3
 800f468:	3313      	adds	r3, #19
 800f46a:	781b      	ldrb	r3, [r3, #0]
 800f46c:	700b      	strb	r3, [r1, #0]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f46e:	2214      	movs	r2, #20
 800f470:	18bb      	adds	r3, r7, r2
 800f472:	18ba      	adds	r2, r7, r2
 800f474:	7812      	ldrb	r2, [r2, #0]
 800f476:	3201      	adds	r2, #1
 800f478:	701a      	strb	r2, [r3, #0]
 800f47a:	2314      	movs	r3, #20
 800f47c:	18fb      	adds	r3, r7, r3
 800f47e:	781b      	ldrb	r3, [r3, #0]
 800f480:	2b09      	cmp	r3, #9
 800f482:	d800      	bhi.n	800f486 <etharp_find_entry+0x1f2>
 800f484:	e731      	b.n	800f2ea <etharp_find_entry+0x56>
    }
  }
  /* { we have no match } => try to create a new entry */
   
  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800f486:	1cfb      	adds	r3, r7, #3
 800f488:	781b      	ldrb	r3, [r3, #0]
 800f48a:	2202      	movs	r2, #2
 800f48c:	4013      	ands	r3, r2
 800f48e:	d10a      	bne.n	800f4a6 <etharp_find_entry+0x212>
 800f490:	2315      	movs	r3, #21
 800f492:	18fb      	adds	r3, r7, r3
 800f494:	781b      	ldrb	r3, [r3, #0]
 800f496:	b25b      	sxtb	r3, r3
 800f498:	2b0a      	cmp	r3, #10
 800f49a:	d107      	bne.n	800f4ac <etharp_find_entry+0x218>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800f49c:	1cfb      	adds	r3, r7, #3
 800f49e:	781b      	ldrb	r3, [r3, #0]
 800f4a0:	2201      	movs	r2, #1
 800f4a2:	4013      	ands	r3, r2
 800f4a4:	d102      	bne.n	800f4ac <etharp_find_entry+0x218>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 800f4a6:	2301      	movs	r3, #1
 800f4a8:	425b      	negs	r3, r3
 800f4aa:	e068      	b.n	800f57e <etharp_find_entry+0x2ea>
   * 
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */ 

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800f4ac:	2315      	movs	r3, #21
 800f4ae:	18fb      	adds	r3, r7, r3
 800f4b0:	781b      	ldrb	r3, [r3, #0]
 800f4b2:	b25b      	sxtb	r3, r3
 800f4b4:	2b09      	cmp	r3, #9
 800f4b6:	dc06      	bgt.n	800f4c6 <etharp_find_entry+0x232>
    i = empty;
 800f4b8:	2314      	movs	r3, #20
 800f4ba:	18fb      	adds	r3, r7, r3
 800f4bc:	2215      	movs	r2, #21
 800f4be:	18ba      	adds	r2, r7, r2
 800f4c0:	7812      	ldrb	r2, [r2, #0]
 800f4c2:	701a      	strb	r2, [r3, #0]
 800f4c4:	e035      	b.n	800f532 <etharp_find_entry+0x29e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800f4c6:	2316      	movs	r3, #22
 800f4c8:	18fb      	adds	r3, r7, r3
 800f4ca:	781b      	ldrb	r3, [r3, #0]
 800f4cc:	b25b      	sxtb	r3, r3
 800f4ce:	2b09      	cmp	r3, #9
 800f4d0:	dc0c      	bgt.n	800f4ec <etharp_find_entry+0x258>
      /* recycle oldest stable*/
      i = old_stable;
 800f4d2:	2114      	movs	r1, #20
 800f4d4:	187b      	adds	r3, r7, r1
 800f4d6:	2216      	movs	r2, #22
 800f4d8:	18ba      	adds	r2, r7, r2
 800f4da:	7812      	ldrb	r2, [r2, #0]
 800f4dc:	701a      	strb	r2, [r3, #0]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800f4de:	187b      	adds	r3, r7, r1
 800f4e0:	781a      	ldrb	r2, [r3, #0]
 800f4e2:	0013      	movs	r3, r2
 800f4e4:	009b      	lsls	r3, r3, #2
 800f4e6:	189b      	adds	r3, r3, r2
 800f4e8:	009b      	lsls	r3, r3, #2
 800f4ea:	e01c      	b.n	800f526 <etharp_find_entry+0x292>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800f4ec:	2317      	movs	r3, #23
 800f4ee:	18fb      	adds	r3, r7, r3
 800f4f0:	781b      	ldrb	r3, [r3, #0]
 800f4f2:	b25b      	sxtb	r3, r3
 800f4f4:	2b09      	cmp	r3, #9
 800f4f6:	dc06      	bgt.n	800f506 <etharp_find_entry+0x272>
      /* recycle oldest pending */
      i = old_pending;
 800f4f8:	2314      	movs	r3, #20
 800f4fa:	18fb      	adds	r3, r7, r3
 800f4fc:	2217      	movs	r2, #23
 800f4fe:	18ba      	adds	r2, r7, r2
 800f500:	7812      	ldrb	r2, [r2, #0]
 800f502:	701a      	strb	r2, [r3, #0]
 800f504:	e00f      	b.n	800f526 <etharp_find_entry+0x292>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800f506:	2311      	movs	r3, #17
 800f508:	18fb      	adds	r3, r7, r3
 800f50a:	781b      	ldrb	r3, [r3, #0]
 800f50c:	b25b      	sxtb	r3, r3
 800f50e:	2b09      	cmp	r3, #9
 800f510:	dc06      	bgt.n	800f520 <etharp_find_entry+0x28c>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800f512:	2314      	movs	r3, #20
 800f514:	18fb      	adds	r3, r7, r3
 800f516:	2211      	movs	r2, #17
 800f518:	18ba      	adds	r2, r7, r2
 800f51a:	7812      	ldrb	r2, [r2, #0]
 800f51c:	701a      	strb	r2, [r3, #0]
 800f51e:	e002      	b.n	800f526 <etharp_find_entry+0x292>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
 800f520:	2301      	movs	r3, #1
 800f522:	425b      	negs	r3, r3
 800f524:	e02b      	b.n	800f57e <etharp_find_entry+0x2ea>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
    etharp_free_entry(i);
 800f526:	2314      	movs	r3, #20
 800f528:	18fb      	adds	r3, r7, r3
 800f52a:	781b      	ldrb	r3, [r3, #0]
 800f52c:	0018      	movs	r0, r3
 800f52e:	f7ff fe01 	bl	800f134 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800f532:	2314      	movs	r3, #20
 800f534:	18fb      	adds	r3, r7, r3
 800f536:	781a      	ldrb	r2, [r3, #0]
 800f538:	0013      	movs	r3, r2
 800f53a:	009b      	lsls	r3, r3, #2
 800f53c:	189b      	adds	r3, r3, r2
 800f53e:	009b      	lsls	r3, r3, #2
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	2b00      	cmp	r3, #0
 800f544:	d00c      	beq.n	800f560 <etharp_find_entry+0x2cc>
    /* set IP address */
    ip_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800f546:	2314      	movs	r3, #20
 800f548:	18fb      	adds	r3, r7, r3
 800f54a:	781a      	ldrb	r2, [r3, #0]
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	6819      	ldr	r1, [r3, #0]
 800f550:	480d      	ldr	r0, [pc, #52]	; (800f588 <etharp_find_entry+0x2f4>)
 800f552:	0013      	movs	r3, r2
 800f554:	009b      	lsls	r3, r3, #2
 800f556:	189b      	adds	r3, r3, r2
 800f558:	009b      	lsls	r3, r3, #2
 800f55a:	18c3      	adds	r3, r0, r3
 800f55c:	3304      	adds	r3, #4
 800f55e:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800f560:	2014      	movs	r0, #20
 800f562:	183b      	adds	r3, r7, r0
 800f564:	781a      	ldrb	r2, [r3, #0]
 800f566:	4908      	ldr	r1, [pc, #32]	; (800f588 <etharp_find_entry+0x2f4>)
 800f568:	0013      	movs	r3, r2
 800f56a:	009b      	lsls	r3, r3, #2
 800f56c:	189b      	adds	r3, r3, r2
 800f56e:	009b      	lsls	r3, r3, #2
 800f570:	18cb      	adds	r3, r1, r3
 800f572:	3313      	adds	r3, #19
 800f574:	2200      	movs	r2, #0
 800f576:	701a      	strb	r2, [r3, #0]
  return (err_t)i;
 800f578:	183b      	adds	r3, r7, r0
 800f57a:	781b      	ldrb	r3, [r3, #0]
 800f57c:	b25b      	sxtb	r3, r3
}
 800f57e:	0018      	movs	r0, r3
 800f580:	46bd      	mov	sp, r7
 800f582:	b006      	add	sp, #24
 800f584:	bd80      	pop	{r7, pc}
 800f586:	46c0      	nop			; (mov r8, r8)
 800f588:	20002748 	.word	0x20002748

0800f58c <etharp_send_ip>:
 * @params dst the destination MAC address to be copied into the ethernet header
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
static err_t
etharp_send_ip(struct netif *netif, struct pbuf *p, struct eth_addr *src, struct eth_addr *dst)
{
 800f58c:	b580      	push	{r7, lr}
 800f58e:	b086      	sub	sp, #24
 800f590:	af00      	add	r7, sp, #0
 800f592:	60f8      	str	r0, [r7, #12]
 800f594:	60b9      	str	r1, [r7, #8]
 800f596:	607a      	str	r2, [r7, #4]
 800f598:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr = (struct eth_hdr *)p->payload;
 800f59a:	68bb      	ldr	r3, [r7, #8]
 800f59c:	685b      	ldr	r3, [r3, #4]
 800f59e:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETHARP_HWADDR_LEN for etharp!",
              (netif->hwaddr_len == ETHARP_HWADDR_LEN));
  ETHADDR32_COPY(&ethhdr->dest, dst);
 800f5a0:	697b      	ldr	r3, [r7, #20]
 800f5a2:	6839      	ldr	r1, [r7, #0]
 800f5a4:	2206      	movs	r2, #6
 800f5a6:	0018      	movs	r0, r3
 800f5a8:	f002 fd55 	bl	8012056 <memcpy>
  ETHADDR16_COPY(&ethhdr->src, src);
 800f5ac:	697b      	ldr	r3, [r7, #20]
 800f5ae:	3306      	adds	r3, #6
 800f5b0:	6879      	ldr	r1, [r7, #4]
 800f5b2:	2206      	movs	r2, #6
 800f5b4:	0018      	movs	r0, r3
 800f5b6:	f002 fd4e 	bl	8012056 <memcpy>
  ethhdr->type = PP_HTONS(ETHTYPE_IP);
 800f5ba:	697b      	ldr	r3, [r7, #20]
 800f5bc:	7b1a      	ldrb	r2, [r3, #12]
 800f5be:	2100      	movs	r1, #0
 800f5c0:	400a      	ands	r2, r1
 800f5c2:	1c11      	adds	r1, r2, #0
 800f5c4:	2208      	movs	r2, #8
 800f5c6:	430a      	orrs	r2, r1
 800f5c8:	731a      	strb	r2, [r3, #12]
 800f5ca:	7b5a      	ldrb	r2, [r3, #13]
 800f5cc:	2100      	movs	r1, #0
 800f5ce:	400a      	ands	r2, r1
 800f5d0:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_send_ip: sending packet %p\n", (void *)p));
  /* send the packet */
  return netif->linkoutput(netif, p);
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	699b      	ldr	r3, [r3, #24]
 800f5d6:	68b9      	ldr	r1, [r7, #8]
 800f5d8:	68fa      	ldr	r2, [r7, #12]
 800f5da:	0010      	movs	r0, r2
 800f5dc:	4798      	blx	r3
 800f5de:	0003      	movs	r3, r0
}
 800f5e0:	0018      	movs	r0, r3
 800f5e2:	46bd      	mov	sp, r7
 800f5e4:	b006      	add	sp, #24
 800f5e6:	bd80      	pop	{r7, pc}

0800f5e8 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, ip_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800f5e8:	b5b0      	push	{r4, r5, r7, lr}
 800f5ea:	b086      	sub	sp, #24
 800f5ec:	af00      	add	r7, sp, #0
 800f5ee:	60f8      	str	r0, [r7, #12]
 800f5f0:	60b9      	str	r1, [r7, #8]
 800f5f2:	607a      	str	r2, [r7, #4]
 800f5f4:	001a      	movs	r2, r3
 800f5f6:	1cfb      	adds	r3, r7, #3
 800f5f8:	701a      	strb	r2, [r3, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    ethaddr->addr[0], ethaddr->addr[1], ethaddr->addr[2],
    ethaddr->addr[3], ethaddr->addr[4], ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip_addr_isany(ipaddr) ||
 800f5fa:	68bb      	ldr	r3, [r7, #8]
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d012      	beq.n	800f626 <etharp_update_arp_entry+0x3e>
 800f600:	68bb      	ldr	r3, [r7, #8]
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	2b00      	cmp	r3, #0
 800f606:	d00e      	beq.n	800f626 <etharp_update_arp_entry+0x3e>
      ip_addr_isbroadcast(ipaddr, netif) ||
 800f608:	68bb      	ldr	r3, [r7, #8]
 800f60a:	681b      	ldr	r3, [r3, #0]
 800f60c:	68fa      	ldr	r2, [r7, #12]
 800f60e:	0011      	movs	r1, r2
 800f610:	0018      	movs	r0, r3
 800f612:	f7fe fe2f 	bl	800e274 <ip4_addr_isbroadcast>
 800f616:	1e03      	subs	r3, r0, #0
  if (ip_addr_isany(ipaddr) ||
 800f618:	d105      	bne.n	800f626 <etharp_update_arp_entry+0x3e>
      ip_addr_ismulticast(ipaddr)) {
 800f61a:	68bb      	ldr	r3, [r7, #8]
 800f61c:	681b      	ldr	r3, [r3, #0]
 800f61e:	22f0      	movs	r2, #240	; 0xf0
 800f620:	4013      	ands	r3, r2
      ip_addr_isbroadcast(ipaddr, netif) ||
 800f622:	2be0      	cmp	r3, #224	; 0xe0
 800f624:	d102      	bne.n	800f62c <etharp_update_arp_entry+0x44>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800f626:	230e      	movs	r3, #14
 800f628:	425b      	negs	r3, r3
 800f62a:	e08a      	b.n	800f742 <etharp_update_arp_entry+0x15a>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags);
 800f62c:	2517      	movs	r5, #23
 800f62e:	197c      	adds	r4, r7, r5
 800f630:	1cfb      	adds	r3, r7, #3
 800f632:	781a      	ldrb	r2, [r3, #0]
 800f634:	68bb      	ldr	r3, [r7, #8]
 800f636:	0011      	movs	r1, r2
 800f638:	0018      	movs	r0, r3
 800f63a:	f7ff fe2b 	bl	800f294 <etharp_find_entry>
 800f63e:	0003      	movs	r3, r0
 800f640:	7023      	strb	r3, [r4, #0]
  /* bail out if no entry could be found */
  if (i < 0) {
 800f642:	197b      	adds	r3, r7, r5
 800f644:	781b      	ldrb	r3, [r3, #0]
 800f646:	2b7f      	cmp	r3, #127	; 0x7f
 800f648:	d904      	bls.n	800f654 <etharp_update_arp_entry+0x6c>
    return (err_t)i;
 800f64a:	2317      	movs	r3, #23
 800f64c:	18fb      	adds	r3, r7, r3
 800f64e:	781b      	ldrb	r3, [r3, #0]
 800f650:	b25b      	sxtb	r3, r3
 800f652:	e076      	b.n	800f742 <etharp_update_arp_entry+0x15a>
  }

#if ETHARP_SUPPORT_STATIC_ENTRIES
  if (flags & ETHARP_FLAG_STATIC_ENTRY) {
 800f654:	1cfb      	adds	r3, r7, #3
 800f656:	781b      	ldrb	r3, [r3, #0]
 800f658:	2204      	movs	r2, #4
 800f65a:	4013      	ands	r3, r2
 800f65c:	d00d      	beq.n	800f67a <etharp_update_arp_entry+0x92>
    /* record static type */
    arp_table[i].state = ETHARP_STATE_STATIC;
 800f65e:	2317      	movs	r3, #23
 800f660:	18fb      	adds	r3, r7, r3
 800f662:	2200      	movs	r2, #0
 800f664:	569a      	ldrsb	r2, [r3, r2]
 800f666:	4939      	ldr	r1, [pc, #228]	; (800f74c <etharp_update_arp_entry+0x164>)
 800f668:	0013      	movs	r3, r2
 800f66a:	009b      	lsls	r3, r3, #2
 800f66c:	189b      	adds	r3, r3, r2
 800f66e:	009b      	lsls	r3, r3, #2
 800f670:	18cb      	adds	r3, r1, r3
 800f672:	3312      	adds	r3, #18
 800f674:	2204      	movs	r2, #4
 800f676:	701a      	strb	r2, [r3, #0]
 800f678:	e00c      	b.n	800f694 <etharp_update_arp_entry+0xac>
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800f67a:	2317      	movs	r3, #23
 800f67c:	18fb      	adds	r3, r7, r3
 800f67e:	2200      	movs	r2, #0
 800f680:	569a      	ldrsb	r2, [r3, r2]
 800f682:	4932      	ldr	r1, [pc, #200]	; (800f74c <etharp_update_arp_entry+0x164>)
 800f684:	0013      	movs	r3, r2
 800f686:	009b      	lsls	r3, r3, #2
 800f688:	189b      	adds	r3, r3, r2
 800f68a:	009b      	lsls	r3, r3, #2
 800f68c:	18cb      	adds	r3, r1, r3
 800f68e:	3312      	adds	r3, #18
 800f690:	2202      	movs	r2, #2
 800f692:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800f694:	2417      	movs	r4, #23
 800f696:	193b      	adds	r3, r7, r4
 800f698:	2200      	movs	r2, #0
 800f69a:	569a      	ldrsb	r2, [r3, r2]
 800f69c:	492b      	ldr	r1, [pc, #172]	; (800f74c <etharp_update_arp_entry+0x164>)
 800f69e:	0013      	movs	r3, r2
 800f6a0:	009b      	lsls	r3, r3, #2
 800f6a2:	189b      	adds	r3, r3, r2
 800f6a4:	009b      	lsls	r3, r3, #2
 800f6a6:	18cb      	adds	r3, r1, r3
 800f6a8:	3308      	adds	r3, #8
 800f6aa:	68fa      	ldr	r2, [r7, #12]
 800f6ac:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  snmp_insert_arpidx_tree(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 800f6ae:	193b      	adds	r3, r7, r4
 800f6b0:	2200      	movs	r2, #0
 800f6b2:	569a      	ldrsb	r2, [r3, r2]
 800f6b4:	0013      	movs	r3, r2
 800f6b6:	009b      	lsls	r3, r3, #2
 800f6b8:	189b      	adds	r3, r3, r2
 800f6ba:	009b      	lsls	r3, r3, #2
 800f6bc:	3308      	adds	r3, #8
 800f6be:	001a      	movs	r2, r3
 800f6c0:	4b22      	ldr	r3, [pc, #136]	; (800f74c <etharp_update_arp_entry+0x164>)
 800f6c2:	18d3      	adds	r3, r2, r3
 800f6c4:	3304      	adds	r3, #4
 800f6c6:	6879      	ldr	r1, [r7, #4]
 800f6c8:	2206      	movs	r2, #6
 800f6ca:	0018      	movs	r0, r3
 800f6cc:	f002 fcc3 	bl	8012056 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800f6d0:	193b      	adds	r3, r7, r4
 800f6d2:	2200      	movs	r2, #0
 800f6d4:	569a      	ldrsb	r2, [r3, r2]
 800f6d6:	491d      	ldr	r1, [pc, #116]	; (800f74c <etharp_update_arp_entry+0x164>)
 800f6d8:	0013      	movs	r3, r2
 800f6da:	009b      	lsls	r3, r3, #2
 800f6dc:	189b      	adds	r3, r3, r2
 800f6de:	009b      	lsls	r3, r3, #2
 800f6e0:	18cb      	adds	r3, r1, r3
 800f6e2:	3313      	adds	r3, #19
 800f6e4:	2200      	movs	r2, #0
 800f6e6:	701a      	strb	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800f6e8:	193b      	adds	r3, r7, r4
 800f6ea:	2200      	movs	r2, #0
 800f6ec:	569a      	ldrsb	r2, [r3, r2]
 800f6ee:	4917      	ldr	r1, [pc, #92]	; (800f74c <etharp_update_arp_entry+0x164>)
 800f6f0:	0013      	movs	r3, r2
 800f6f2:	009b      	lsls	r3, r3, #2
 800f6f4:	189b      	adds	r3, r3, r2
 800f6f6:	009b      	lsls	r3, r3, #2
 800f6f8:	585b      	ldr	r3, [r3, r1]
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	d020      	beq.n	800f740 <etharp_update_arp_entry+0x158>
    struct pbuf *p = arp_table[i].q;
 800f6fe:	2017      	movs	r0, #23
 800f700:	183b      	adds	r3, r7, r0
 800f702:	2200      	movs	r2, #0
 800f704:	569a      	ldrsb	r2, [r3, r2]
 800f706:	4911      	ldr	r1, [pc, #68]	; (800f74c <etharp_update_arp_entry+0x164>)
 800f708:	0013      	movs	r3, r2
 800f70a:	009b      	lsls	r3, r3, #2
 800f70c:	189b      	adds	r3, r3, r2
 800f70e:	009b      	lsls	r3, r3, #2
 800f710:	585b      	ldr	r3, [r3, r1]
 800f712:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800f714:	183b      	adds	r3, r7, r0
 800f716:	2200      	movs	r2, #0
 800f718:	569a      	ldrsb	r2, [r3, r2]
 800f71a:	490c      	ldr	r1, [pc, #48]	; (800f74c <etharp_update_arp_entry+0x164>)
 800f71c:	0013      	movs	r3, r2
 800f71e:	009b      	lsls	r3, r3, #2
 800f720:	189b      	adds	r3, r3, r2
 800f722:	009b      	lsls	r3, r3, #2
 800f724:	2200      	movs	r2, #0
 800f726:	505a      	str	r2, [r3, r1]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    etharp_send_ip(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr);
 800f728:	68fb      	ldr	r3, [r7, #12]
 800f72a:	3323      	adds	r3, #35	; 0x23
 800f72c:	001a      	movs	r2, r3
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	6939      	ldr	r1, [r7, #16]
 800f732:	68f8      	ldr	r0, [r7, #12]
 800f734:	f7ff ff2a 	bl	800f58c <etharp_send_ip>
    /* free the queued IP packet */
    pbuf_free(p);
 800f738:	693b      	ldr	r3, [r7, #16]
 800f73a:	0018      	movs	r0, r3
 800f73c:	f7f7 fb2a 	bl	8006d94 <pbuf_free>
  }
  return ERR_OK;
 800f740:	2300      	movs	r3, #0
}
 800f742:	0018      	movs	r0, r3
 800f744:	46bd      	mov	sp, r7
 800f746:	b006      	add	sp, #24
 800f748:	bdb0      	pop	{r4, r5, r7, pc}
 800f74a:	46c0      	nop			; (mov r8, r8)
 800f74c:	20002748 	.word	0x20002748

0800f750 <etharp_arp_input>:
 *
 * @see pbuf_free()
 */
static void
etharp_arp_input(struct netif *netif, struct eth_addr *ethaddr, struct pbuf *p)
{
 800f750:	b590      	push	{r4, r7, lr}
 800f752:	b08b      	sub	sp, #44	; 0x2c
 800f754:	af00      	add	r7, sp, #0
 800f756:	60f8      	str	r0, [r7, #12]
 800f758:	60b9      	str	r1, [r7, #8]
 800f75a:	607a      	str	r2, [r7, #4]
  u8_t for_us;
#if LWIP_AUTOIP
  const u8_t * ethdst_hwaddr;
#endif /* LWIP_AUTOIP */

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800f75c:	68fb      	ldr	r3, [r7, #12]
 800f75e:	2b00      	cmp	r3, #0
 800f760:	d100      	bne.n	800f764 <etharp_arp_input+0x14>
 800f762:	e0f5      	b.n	800f950 <etharp_arp_input+0x200>

  /* drop short ARP packets: we have to check for p->len instead of p->tot_len here
     since a struct etharp_hdr is pointed to p->payload, so it musn't be chained! */
  if (p->len < SIZEOF_ETHARP_PACKET) {
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	895b      	ldrh	r3, [r3, #10]
 800f768:	2b29      	cmp	r3, #41	; 0x29
 800f76a:	d810      	bhi.n	800f78e <etharp_arp_input+0x3e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_arp_input: packet dropped, too short (%"S16_F"/%"S16_F")\n", p->tot_len,
      (s16_t)SIZEOF_ETHARP_PACKET));
    ETHARP_STATS_INC(etharp.lenerr);
 800f76c:	4b7a      	ldr	r3, [pc, #488]	; (800f958 <etharp_arp_input+0x208>)
 800f76e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800f770:	3301      	adds	r3, #1
 800f772:	b29a      	uxth	r2, r3
 800f774:	4b78      	ldr	r3, [pc, #480]	; (800f958 <etharp_arp_input+0x208>)
 800f776:	845a      	strh	r2, [r3, #34]	; 0x22
    ETHARP_STATS_INC(etharp.drop);
 800f778:	4b77      	ldr	r3, [pc, #476]	; (800f958 <etharp_arp_input+0x208>)
 800f77a:	8bdb      	ldrh	r3, [r3, #30]
 800f77c:	3301      	adds	r3, #1
 800f77e:	b29a      	uxth	r2, r3
 800f780:	4b75      	ldr	r3, [pc, #468]	; (800f958 <etharp_arp_input+0x208>)
 800f782:	83da      	strh	r2, [r3, #30]
    pbuf_free(p);
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	0018      	movs	r0, r3
 800f788:	f7f7 fb04 	bl	8006d94 <pbuf_free>
    return;
 800f78c:	e0e1      	b.n	800f952 <etharp_arp_input+0x202>
  }

  ethhdr = (struct eth_hdr *)p->payload;
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	685b      	ldr	r3, [r3, #4]
 800f792:	623b      	str	r3, [r7, #32]
  hdr = (struct etharp_hdr *)((u8_t*)ethhdr + SIZEOF_ETH_HDR);
 800f794:	6a3b      	ldr	r3, [r7, #32]
 800f796:	330e      	adds	r3, #14
 800f798:	61fb      	str	r3, [r7, #28]
    hdr = (struct etharp_hdr *)(((u8_t*)ethhdr) + SIZEOF_ETH_HDR + SIZEOF_VLAN_HDR);
  }
#endif /* ETHARP_SUPPORT_VLAN */

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 800f79a:	69fb      	ldr	r3, [r7, #28]
 800f79c:	781a      	ldrb	r2, [r3, #0]
 800f79e:	785b      	ldrb	r3, [r3, #1]
 800f7a0:	021b      	lsls	r3, r3, #8
 800f7a2:	4313      	orrs	r3, r2
 800f7a4:	b29a      	uxth	r2, r3
 800f7a6:	2380      	movs	r3, #128	; 0x80
 800f7a8:	005b      	lsls	r3, r3, #1
 800f7aa:	429a      	cmp	r2, r3
 800f7ac:	d10f      	bne.n	800f7ce <etharp_arp_input+0x7e>
      (hdr->hwlen != ETHARP_HWADDR_LEN) ||
 800f7ae:	69fb      	ldr	r3, [r7, #28]
 800f7b0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 800f7b2:	2b06      	cmp	r3, #6
 800f7b4:	d10b      	bne.n	800f7ce <etharp_arp_input+0x7e>
      (hdr->protolen != sizeof(ip_addr_t)) ||
 800f7b6:	69fb      	ldr	r3, [r7, #28]
 800f7b8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETHARP_HWADDR_LEN) ||
 800f7ba:	2b04      	cmp	r3, #4
 800f7bc:	d107      	bne.n	800f7ce <etharp_arp_input+0x7e>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800f7be:	69fb      	ldr	r3, [r7, #28]
 800f7c0:	789a      	ldrb	r2, [r3, #2]
 800f7c2:	78db      	ldrb	r3, [r3, #3]
 800f7c4:	021b      	lsls	r3, r3, #8
 800f7c6:	4313      	orrs	r3, r2
 800f7c8:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip_addr_t)) ||
 800f7ca:	2b08      	cmp	r3, #8
 800f7cc:	d010      	beq.n	800f7f0 <etharp_arp_input+0xa0>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_arp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, hdr->hwlen, hdr->proto, hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
 800f7ce:	4b62      	ldr	r3, [pc, #392]	; (800f958 <etharp_arp_input+0x208>)
 800f7d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f7d2:	3301      	adds	r3, #1
 800f7d4:	b29a      	uxth	r2, r3
 800f7d6:	4b60      	ldr	r3, [pc, #384]	; (800f958 <etharp_arp_input+0x208>)
 800f7d8:	851a      	strh	r2, [r3, #40]	; 0x28
    ETHARP_STATS_INC(etharp.drop);
 800f7da:	4b5f      	ldr	r3, [pc, #380]	; (800f958 <etharp_arp_input+0x208>)
 800f7dc:	8bdb      	ldrh	r3, [r3, #30]
 800f7de:	3301      	adds	r3, #1
 800f7e0:	b29a      	uxth	r2, r3
 800f7e2:	4b5d      	ldr	r3, [pc, #372]	; (800f958 <etharp_arp_input+0x208>)
 800f7e4:	83da      	strh	r2, [r3, #30]
    pbuf_free(p);
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	0018      	movs	r0, r3
 800f7ea:	f7f7 fad3 	bl	8006d94 <pbuf_free>
    return;
 800f7ee:	e0b0      	b.n	800f952 <etharp_arp_input+0x202>
  }
  ETHARP_STATS_INC(etharp.recv);
 800f7f0:	4b59      	ldr	r3, [pc, #356]	; (800f958 <etharp_arp_input+0x208>)
 800f7f2:	8b5b      	ldrh	r3, [r3, #26]
 800f7f4:	3301      	adds	r3, #1
 800f7f6:	b29a      	uxth	r2, r3
 800f7f8:	4b57      	ldr	r3, [pc, #348]	; (800f958 <etharp_arp_input+0x208>)
 800f7fa:	835a      	strh	r2, [r3, #26]
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip_addr2 to aligned ip_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 800f7fc:	69fb      	ldr	r3, [r7, #28]
 800f7fe:	330e      	adds	r3, #14
 800f800:	0019      	movs	r1, r3
 800f802:	2318      	movs	r3, #24
 800f804:	18fb      	adds	r3, r7, r3
 800f806:	2204      	movs	r2, #4
 800f808:	0018      	movs	r0, r3
 800f80a:	f002 fc24 	bl	8012056 <memcpy>
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 800f80e:	69fb      	ldr	r3, [r7, #28]
 800f810:	3318      	adds	r3, #24
 800f812:	0019      	movs	r1, r3
 800f814:	2314      	movs	r3, #20
 800f816:	18fb      	adds	r3, r7, r3
 800f818:	2204      	movs	r2, #4
 800f81a:	0018      	movs	r0, r3
 800f81c:	f002 fc1b 	bl	8012056 <memcpy>

  /* this interface is not configured? */
  if (ip_addr_isany(&netif->ip_addr)) {
 800f820:	68fb      	ldr	r3, [r7, #12]
 800f822:	3304      	adds	r3, #4
 800f824:	2b00      	cmp	r3, #0
 800f826:	d003      	beq.n	800f830 <etharp_arp_input+0xe0>
 800f828:	68fb      	ldr	r3, [r7, #12]
 800f82a:	685b      	ldr	r3, [r3, #4]
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d104      	bne.n	800f83a <etharp_arp_input+0xea>
    for_us = 0;
 800f830:	2327      	movs	r3, #39	; 0x27
 800f832:	18fb      	adds	r3, r7, r3
 800f834:	2200      	movs	r2, #0
 800f836:	701a      	strb	r2, [r3, #0]
 800f838:	e009      	b.n	800f84e <etharp_arp_input+0xfe>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip_addr_cmp(&dipaddr, &(netif->ip_addr));
 800f83a:	697a      	ldr	r2, [r7, #20]
 800f83c:	68fb      	ldr	r3, [r7, #12]
 800f83e:	685b      	ldr	r3, [r3, #4]
 800f840:	1ad3      	subs	r3, r2, r3
 800f842:	425a      	negs	r2, r3
 800f844:	4153      	adcs	r3, r2
 800f846:	b2da      	uxtb	r2, r3
 800f848:	2327      	movs	r3, #39	; 0x27
 800f84a:	18fb      	adds	r3, r7, r3
 800f84c:	701a      	strb	r2, [r3, #0]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800f84e:	69fb      	ldr	r3, [r7, #28]
 800f850:	3308      	adds	r3, #8
 800f852:	001a      	movs	r2, r3
 800f854:	2327      	movs	r3, #39	; 0x27
 800f856:	18fb      	adds	r3, r7, r3
 800f858:	781b      	ldrb	r3, [r3, #0]
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	d001      	beq.n	800f862 <etharp_arp_input+0x112>
 800f85e:	2301      	movs	r3, #1
 800f860:	e000      	b.n	800f864 <etharp_arp_input+0x114>
 800f862:	2302      	movs	r3, #2
 800f864:	2118      	movs	r1, #24
 800f866:	1879      	adds	r1, r7, r1
 800f868:	68f8      	ldr	r0, [r7, #12]
 800f86a:	f7ff febd 	bl	800f5e8 <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800f86e:	69fb      	ldr	r3, [r7, #28]
 800f870:	799a      	ldrb	r2, [r3, #6]
 800f872:	79db      	ldrb	r3, [r3, #7]
 800f874:	021b      	lsls	r3, r3, #8
 800f876:	4313      	orrs	r3, r2
 800f878:	b29b      	uxth	r3, r3
 800f87a:	2280      	movs	r2, #128	; 0x80
 800f87c:	0052      	lsls	r2, r2, #1
 800f87e:	4293      	cmp	r3, r2
 800f880:	d004      	beq.n	800f88c <etharp_arp_input+0x13c>
 800f882:	2280      	movs	r2, #128	; 0x80
 800f884:	0092      	lsls	r2, r2, #2
 800f886:	4293      	cmp	r3, r2
 800f888:	d05c      	beq.n	800f944 <etharp_arp_input+0x1f4>
 800f88a:	e054      	b.n	800f936 <etharp_arp_input+0x1e6>
     * reply. In any case, we time-stamp any existing ARP entry,
     * and possiby send out an IP packet that was queued on it. */

    LWIP_DEBUGF (ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_arp_input: incoming ARP request\n"));
    /* ARP request for our address? */
    if (for_us) {
 800f88c:	2327      	movs	r3, #39	; 0x27
 800f88e:	18fb      	adds	r3, r7, r3
 800f890:	781b      	ldrb	r3, [r3, #0]
 800f892:	2b00      	cmp	r3, #0
 800f894:	d057      	beq.n	800f946 <etharp_arp_input+0x1f6>

      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_arp_input: replying to ARP request for our IP address\n"));
      /* Re-use pbuf to send ARP reply.
         Since we are re-using an existing pbuf, we can't call etharp_raw since
         that would allocate a new pbuf. */
      hdr->opcode = htons(ARP_REPLY);
 800f896:	2002      	movs	r0, #2
 800f898:	f7f6 fa34 	bl	8005d04 <lwip_htons>
 800f89c:	0003      	movs	r3, r0
 800f89e:	001a      	movs	r2, r3
 800f8a0:	69fb      	ldr	r3, [r7, #28]
 800f8a2:	21ff      	movs	r1, #255	; 0xff
 800f8a4:	4011      	ands	r1, r2
 800f8a6:	000c      	movs	r4, r1
 800f8a8:	7999      	ldrb	r1, [r3, #6]
 800f8aa:	2000      	movs	r0, #0
 800f8ac:	4001      	ands	r1, r0
 800f8ae:	1c08      	adds	r0, r1, #0
 800f8b0:	1c21      	adds	r1, r4, #0
 800f8b2:	4301      	orrs	r1, r0
 800f8b4:	7199      	strb	r1, [r3, #6]
 800f8b6:	0a12      	lsrs	r2, r2, #8
 800f8b8:	b290      	uxth	r0, r2
 800f8ba:	79da      	ldrb	r2, [r3, #7]
 800f8bc:	2100      	movs	r1, #0
 800f8be:	400a      	ands	r2, r1
 800f8c0:	1c11      	adds	r1, r2, #0
 800f8c2:	1c02      	adds	r2, r0, #0
 800f8c4:	430a      	orrs	r2, r1
 800f8c6:	71da      	strb	r2, [r3, #7]

      IPADDR2_COPY(&hdr->dipaddr, &hdr->sipaddr);
 800f8c8:	69fb      	ldr	r3, [r7, #28]
 800f8ca:	3318      	adds	r3, #24
 800f8cc:	0018      	movs	r0, r3
 800f8ce:	69fb      	ldr	r3, [r7, #28]
 800f8d0:	330e      	adds	r3, #14
 800f8d2:	2204      	movs	r2, #4
 800f8d4:	0019      	movs	r1, r3
 800f8d6:	f002 fbbe 	bl	8012056 <memcpy>
      IPADDR2_COPY(&hdr->sipaddr, &netif->ip_addr);
 800f8da:	69fb      	ldr	r3, [r7, #28]
 800f8dc:	330e      	adds	r3, #14
 800f8de:	0018      	movs	r0, r3
 800f8e0:	68fb      	ldr	r3, [r7, #12]
 800f8e2:	3304      	adds	r3, #4
 800f8e4:	2204      	movs	r2, #4
 800f8e6:	0019      	movs	r1, r3
 800f8e8:	f002 fbb5 	bl	8012056 <memcpy>
       * 'sender IP address' MUST be sent using link-layer broadcast instead of
       * link-layer unicast. (See RFC3927 Section 2.5, last paragraph) */
      ethdst_hwaddr = ip_addr_islinklocal(&netif->ip_addr) ? (u8_t*)(ethbroadcast.addr) : hdr->shwaddr.addr;
#endif /* LWIP_AUTOIP */

      ETHADDR16_COPY(&hdr->dhwaddr, &hdr->shwaddr);
 800f8ec:	69fb      	ldr	r3, [r7, #28]
 800f8ee:	3312      	adds	r3, #18
 800f8f0:	0018      	movs	r0, r3
 800f8f2:	69fb      	ldr	r3, [r7, #28]
 800f8f4:	3308      	adds	r3, #8
 800f8f6:	2206      	movs	r2, #6
 800f8f8:	0019      	movs	r1, r3
 800f8fa:	f002 fbac 	bl	8012056 <memcpy>
#if LWIP_AUTOIP
      ETHADDR16_COPY(&ethhdr->dest, ethdst_hwaddr);
#else  /* LWIP_AUTOIP */
      ETHADDR16_COPY(&ethhdr->dest, &hdr->shwaddr);
 800f8fe:	6a38      	ldr	r0, [r7, #32]
 800f900:	69fb      	ldr	r3, [r7, #28]
 800f902:	3308      	adds	r3, #8
 800f904:	2206      	movs	r2, #6
 800f906:	0019      	movs	r1, r3
 800f908:	f002 fba5 	bl	8012056 <memcpy>
#endif /* LWIP_AUTOIP */
      ETHADDR16_COPY(&hdr->shwaddr, ethaddr);
 800f90c:	69fb      	ldr	r3, [r7, #28]
 800f90e:	3308      	adds	r3, #8
 800f910:	68b9      	ldr	r1, [r7, #8]
 800f912:	2206      	movs	r2, #6
 800f914:	0018      	movs	r0, r3
 800f916:	f002 fb9e 	bl	8012056 <memcpy>
      ETHADDR16_COPY(&ethhdr->src, ethaddr);
 800f91a:	6a3b      	ldr	r3, [r7, #32]
 800f91c:	3306      	adds	r3, #6
 800f91e:	68b9      	ldr	r1, [r7, #8]
 800f920:	2206      	movs	r2, #6
 800f922:	0018      	movs	r0, r3
 800f924:	f002 fb97 	bl	8012056 <memcpy>

      /* hwtype, hwaddr_len, proto, protolen and the type in the ethernet header
         are already correct, we tested that before */

      /* return ARP reply */
      netif->linkoutput(netif, p);
 800f928:	68fb      	ldr	r3, [r7, #12]
 800f92a:	699b      	ldr	r3, [r3, #24]
 800f92c:	6879      	ldr	r1, [r7, #4]
 800f92e:	68fa      	ldr	r2, [r7, #12]
 800f930:	0010      	movs	r0, r2
 800f932:	4798      	blx	r3
    /* request was not directed to us */
    } else {
      /* { for_us == 0 and netif->ip_addr.addr != 0 } */
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_arp_input: ARP request was not for us.\n"));
    }
    break;
 800f934:	e007      	b.n	800f946 <etharp_arp_input+0x1f6>
    dhcp_arp_reply(netif, &sipaddr);
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_arp_input: ARP unknown opcode type %"S16_F"\n", htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
 800f936:	4b08      	ldr	r3, [pc, #32]	; (800f958 <etharp_arp_input+0x208>)
 800f938:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800f93a:	3301      	adds	r3, #1
 800f93c:	b29a      	uxth	r2, r3
 800f93e:	4b06      	ldr	r3, [pc, #24]	; (800f958 <etharp_arp_input+0x208>)
 800f940:	859a      	strh	r2, [r3, #44]	; 0x2c
    break;
 800f942:	e000      	b.n	800f946 <etharp_arp_input+0x1f6>
    break;
 800f944:	46c0      	nop			; (mov r8, r8)
  }
  /* free ARP packet */
  pbuf_free(p);
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	0018      	movs	r0, r3
 800f94a:	f7f7 fa23 	bl	8006d94 <pbuf_free>
 800f94e:	e000      	b.n	800f952 <etharp_arp_input+0x202>
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800f950:	46c0      	nop			; (mov r8, r8)
}
 800f952:	46bd      	mov	sp, r7
 800f954:	b00b      	add	sp, #44	; 0x2c
 800f956:	bd90      	pop	{r4, r7, pc}
 800f958:	2000340c 	.word	0x2000340c

0800f95c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 800f95c:	b590      	push	{r4, r7, lr}
 800f95e:	b085      	sub	sp, #20
 800f960:	af00      	add	r7, sp, #0
 800f962:	60f8      	str	r0, [r7, #12]
 800f964:	60b9      	str	r1, [r7, #8]
 800f966:	1dfb      	adds	r3, r7, #7
 800f968:	701a      	strb	r2, [r3, #0]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800f96a:	1dfb      	adds	r3, r7, #7
 800f96c:	781a      	ldrb	r2, [r3, #0]
 800f96e:	0013      	movs	r3, r2
 800f970:	009b      	lsls	r3, r3, #2
 800f972:	189b      	adds	r3, r3, r2
 800f974:	009b      	lsls	r3, r3, #2
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if ((arp_table[arp_idx].state == ETHARP_STATE_STABLE) && 
 800f976:	1dfb      	adds	r3, r7, #7
 800f978:	781a      	ldrb	r2, [r3, #0]
 800f97a:	4924      	ldr	r1, [pc, #144]	; (800fa0c <etharp_output_to_arp_index+0xb0>)
 800f97c:	0013      	movs	r3, r2
 800f97e:	009b      	lsls	r3, r3, #2
 800f980:	189b      	adds	r3, r3, r2
 800f982:	009b      	lsls	r3, r3, #2
 800f984:	18cb      	adds	r3, r1, r3
 800f986:	3312      	adds	r3, #18
 800f988:	781b      	ldrb	r3, [r3, #0]
 800f98a:	2b02      	cmp	r3, #2
 800f98c:	d126      	bne.n	800f9dc <etharp_output_to_arp_index+0x80>
      (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED)) {
 800f98e:	1dfb      	adds	r3, r7, #7
 800f990:	781a      	ldrb	r2, [r3, #0]
 800f992:	491e      	ldr	r1, [pc, #120]	; (800fa0c <etharp_output_to_arp_index+0xb0>)
 800f994:	0013      	movs	r3, r2
 800f996:	009b      	lsls	r3, r3, #2
 800f998:	189b      	adds	r3, r3, r2
 800f99a:	009b      	lsls	r3, r3, #2
 800f99c:	18cb      	adds	r3, r1, r3
 800f99e:	3313      	adds	r3, #19
 800f9a0:	781b      	ldrb	r3, [r3, #0]
  if ((arp_table[arp_idx].state == ETHARP_STATE_STABLE) && 
 800f9a2:	2be3      	cmp	r3, #227	; 0xe3
 800f9a4:	d91a      	bls.n	800f9dc <etharp_output_to_arp_index+0x80>
    if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800f9a6:	1dfb      	adds	r3, r7, #7
 800f9a8:	781a      	ldrb	r2, [r3, #0]
 800f9aa:	0013      	movs	r3, r2
 800f9ac:	009b      	lsls	r3, r3, #2
 800f9ae:	189b      	adds	r3, r3, r2
 800f9b0:	009b      	lsls	r3, r3, #2
 800f9b2:	4a16      	ldr	r2, [pc, #88]	; (800fa0c <etharp_output_to_arp_index+0xb0>)
 800f9b4:	189b      	adds	r3, r3, r2
 800f9b6:	1d1a      	adds	r2, r3, #4
 800f9b8:	68fb      	ldr	r3, [r7, #12]
 800f9ba:	0011      	movs	r1, r2
 800f9bc:	0018      	movs	r0, r3
 800f9be:	f000 fb15 	bl	800ffec <etharp_request>
 800f9c2:	1e03      	subs	r3, r0, #0
 800f9c4:	d10a      	bne.n	800f9dc <etharp_output_to_arp_index+0x80>
      arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING;
 800f9c6:	1dfb      	adds	r3, r7, #7
 800f9c8:	781a      	ldrb	r2, [r3, #0]
 800f9ca:	4910      	ldr	r1, [pc, #64]	; (800fa0c <etharp_output_to_arp_index+0xb0>)
 800f9cc:	0013      	movs	r3, r2
 800f9ce:	009b      	lsls	r3, r3, #2
 800f9d0:	189b      	adds	r3, r3, r2
 800f9d2:	009b      	lsls	r3, r3, #2
 800f9d4:	18cb      	adds	r3, r1, r3
 800f9d6:	3312      	adds	r3, #18
 800f9d8:	2203      	movs	r2, #3
 800f9da:	701a      	strb	r2, [r3, #0]
    }
  }
  
  return etharp_send_ip(netif, q, (struct eth_addr*)(netif->hwaddr),
 800f9dc:	68fb      	ldr	r3, [r7, #12]
 800f9de:	3323      	adds	r3, #35	; 0x23
 800f9e0:	001c      	movs	r4, r3
    &arp_table[arp_idx].ethaddr);
 800f9e2:	1dfb      	adds	r3, r7, #7
 800f9e4:	781a      	ldrb	r2, [r3, #0]
  return etharp_send_ip(netif, q, (struct eth_addr*)(netif->hwaddr),
 800f9e6:	0013      	movs	r3, r2
 800f9e8:	009b      	lsls	r3, r3, #2
 800f9ea:	189b      	adds	r3, r3, r2
 800f9ec:	009b      	lsls	r3, r3, #2
 800f9ee:	3308      	adds	r3, #8
 800f9f0:	001a      	movs	r2, r3
 800f9f2:	4b06      	ldr	r3, [pc, #24]	; (800fa0c <etharp_output_to_arp_index+0xb0>)
 800f9f4:	18d3      	adds	r3, r2, r3
 800f9f6:	3304      	adds	r3, #4
 800f9f8:	68b9      	ldr	r1, [r7, #8]
 800f9fa:	68f8      	ldr	r0, [r7, #12]
 800f9fc:	0022      	movs	r2, r4
 800f9fe:	f7ff fdc5 	bl	800f58c <etharp_send_ip>
 800fa02:	0003      	movs	r3, r0
}
 800fa04:	0018      	movs	r0, r3
 800fa06:	46bd      	mov	sp, r7
 800fa08:	b005      	add	sp, #20
 800fa0a:	bd90      	pop	{r4, r7, pc}
 800fa0c:	20002748 	.word	0x20002748

0800fa10 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or etharp_send_ip().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, ip_addr_t *ipaddr)
{
 800fa10:	b580      	push	{r7, lr}
 800fa12:	b088      	sub	sp, #32
 800fa14:	af00      	add	r7, sp, #0
 800fa16:	60f8      	str	r0, [r7, #12]
 800fa18:	60b9      	str	r1, [r7, #8]
 800fa1a:	607a      	str	r2, [r7, #4]
  struct eth_addr *dest;
  struct eth_addr mcastaddr;
  ip_addr_t *dst_addr = ipaddr;
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	61bb      	str	r3, [r7, #24]
  LWIP_ASSERT("netif != NULL", netif != NULL);
  LWIP_ASSERT("q != NULL", q != NULL);
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);

  /* make room for Ethernet header - should not fail */
  if (pbuf_header(q, sizeof(struct eth_hdr)) != 0) {
 800fa20:	68bb      	ldr	r3, [r7, #8]
 800fa22:	210e      	movs	r1, #14
 800fa24:	0018      	movs	r0, r3
 800fa26:	f7f7 f92e 	bl	8006c86 <pbuf_header>
 800fa2a:	1e03      	subs	r3, r0, #0
 800fa2c:	d008      	beq.n	800fa40 <etharp_output+0x30>
    /* bail out */
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_output: could not allocate room for header.\n"));
    LINK_STATS_INC(link.lenerr);
 800fa2e:	4b6b      	ldr	r3, [pc, #428]	; (800fbdc <etharp_output+0x1cc>)
 800fa30:	895b      	ldrh	r3, [r3, #10]
 800fa32:	3301      	adds	r3, #1
 800fa34:	b29a      	uxth	r2, r3
 800fa36:	4b69      	ldr	r3, [pc, #420]	; (800fbdc <etharp_output+0x1cc>)
 800fa38:	815a      	strh	r2, [r3, #10]
    return ERR_BUF;
 800fa3a:	2302      	movs	r3, #2
 800fa3c:	425b      	negs	r3, r3
 800fa3e:	e0c9      	b.n	800fbd4 <etharp_output+0x1c4>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip_addr_isbroadcast(ipaddr, netif)) {
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	681b      	ldr	r3, [r3, #0]
 800fa44:	68fa      	ldr	r2, [r7, #12]
 800fa46:	0011      	movs	r1, r2
 800fa48:	0018      	movs	r0, r3
 800fa4a:	f7fe fc13 	bl	800e274 <ip4_addr_isbroadcast>
 800fa4e:	1e03      	subs	r3, r0, #0
 800fa50:	d002      	beq.n	800fa58 <etharp_output+0x48>
    /* broadcast on Ethernet also */
    dest = (struct eth_addr *)&ethbroadcast;
 800fa52:	4b63      	ldr	r3, [pc, #396]	; (800fbe0 <etharp_output+0x1d0>)
 800fa54:	61fb      	str	r3, [r7, #28]
 800fa56:	e0b4      	b.n	800fbc2 <etharp_output+0x1b2>
  /* multicast destination IP address? */
  } else if (ip_addr_ismulticast(ipaddr)) {
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	22f0      	movs	r2, #240	; 0xf0
 800fa5e:	4013      	ands	r3, r2
 800fa60:	2be0      	cmp	r3, #224	; 0xe0
 800fa62:	d11c      	bne.n	800fa9e <etharp_output+0x8e>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_MULTICAST_ADDR_0;
 800fa64:	2110      	movs	r1, #16
 800fa66:	187b      	adds	r3, r7, r1
 800fa68:	2201      	movs	r2, #1
 800fa6a:	701a      	strb	r2, [r3, #0]
    mcastaddr.addr[1] = LL_MULTICAST_ADDR_1;
 800fa6c:	187b      	adds	r3, r7, r1
 800fa6e:	2200      	movs	r2, #0
 800fa70:	705a      	strb	r2, [r3, #1]
    mcastaddr.addr[2] = LL_MULTICAST_ADDR_2;
 800fa72:	187b      	adds	r3, r7, r1
 800fa74:	225e      	movs	r2, #94	; 0x5e
 800fa76:	709a      	strb	r2, [r3, #2]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	3301      	adds	r3, #1
 800fa7c:	781b      	ldrb	r3, [r3, #0]
 800fa7e:	227f      	movs	r2, #127	; 0x7f
 800fa80:	4013      	ands	r3, r2
 800fa82:	b2da      	uxtb	r2, r3
 800fa84:	187b      	adds	r3, r7, r1
 800fa86:	70da      	strb	r2, [r3, #3]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	789a      	ldrb	r2, [r3, #2]
 800fa8c:	187b      	adds	r3, r7, r1
 800fa8e:	711a      	strb	r2, [r3, #4]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	78da      	ldrb	r2, [r3, #3]
 800fa94:	187b      	adds	r3, r7, r1
 800fa96:	715a      	strb	r2, [r3, #5]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800fa98:	187b      	adds	r3, r7, r1
 800fa9a:	61fb      	str	r3, [r7, #28]
 800fa9c:	e091      	b.n	800fbc2 <etharp_output+0x1b2>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip_addr_netcmp(ipaddr, &(netif->ip_addr), &(netif->netmask)) &&
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	681a      	ldr	r2, [r3, #0]
 800faa2:	68fb      	ldr	r3, [r7, #12]
 800faa4:	685b      	ldr	r3, [r3, #4]
 800faa6:	405a      	eors	r2, r3
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	689b      	ldr	r3, [r3, #8]
 800faac:	4013      	ands	r3, r2
 800faae:	d015      	beq.n	800fadc <etharp_output+0xcc>
        !ip_addr_islinklocal(ipaddr)) {
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	681b      	ldr	r3, [r3, #0]
 800fab4:	041b      	lsls	r3, r3, #16
 800fab6:	0c1b      	lsrs	r3, r3, #16
    if (!ip_addr_netcmp(ipaddr, &(netif->ip_addr), &(netif->netmask)) &&
 800fab8:	4a4a      	ldr	r2, [pc, #296]	; (800fbe4 <etharp_output+0x1d4>)
 800faba:	4293      	cmp	r3, r2
 800fabc:	d00e      	beq.n	800fadc <etharp_output+0xcc>
         router for forwarding". */
      if (!ip_addr_islinklocal(&iphdr->src))
#endif /* LWIP_AUTOIP */
      {
        /* interface has default gateway? */
        if (!ip_addr_isany(&netif->gw)) {
 800fabe:	68fb      	ldr	r3, [r7, #12]
 800fac0:	330c      	adds	r3, #12
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	d007      	beq.n	800fad6 <etharp_output+0xc6>
 800fac6:	68fb      	ldr	r3, [r7, #12]
 800fac8:	68db      	ldr	r3, [r3, #12]
 800faca:	2b00      	cmp	r3, #0
 800facc:	d003      	beq.n	800fad6 <etharp_output+0xc6>
          /* send to hardware address of default gateway IP address */
          dst_addr = &(netif->gw);
 800face:	68fb      	ldr	r3, [r7, #12]
 800fad0:	330c      	adds	r3, #12
 800fad2:	61bb      	str	r3, [r7, #24]
 800fad4:	e002      	b.n	800fadc <etharp_output+0xcc>
        /* no default gateway available */
        } else {
          /* no route to destination error (default gateway missing) */
          return ERR_RTE;
 800fad6:	2304      	movs	r3, #4
 800fad8:	425b      	negs	r3, r3
 800fada:	e07b      	b.n	800fbd4 <etharp_output+0x1c4>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800fadc:	4b42      	ldr	r3, [pc, #264]	; (800fbe8 <etharp_output+0x1d8>)
 800fade:	781b      	ldrb	r3, [r3, #0]
 800fae0:	0019      	movs	r1, r3
 800fae2:	4a42      	ldr	r2, [pc, #264]	; (800fbec <etharp_output+0x1dc>)
 800fae4:	000b      	movs	r3, r1
 800fae6:	009b      	lsls	r3, r3, #2
 800fae8:	185b      	adds	r3, r3, r1
 800faea:	009b      	lsls	r3, r3, #2
 800faec:	18d3      	adds	r3, r2, r3
 800faee:	3312      	adds	r3, #18
 800faf0:	781b      	ldrb	r3, [r3, #0]
 800faf2:	2b01      	cmp	r3, #1
 800faf4:	d91d      	bls.n	800fb32 <etharp_output+0x122>
            (ip_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800faf6:	69bb      	ldr	r3, [r7, #24]
 800faf8:	681a      	ldr	r2, [r3, #0]
 800fafa:	4b3b      	ldr	r3, [pc, #236]	; (800fbe8 <etharp_output+0x1d8>)
 800fafc:	781b      	ldrb	r3, [r3, #0]
 800fafe:	0018      	movs	r0, r3
 800fb00:	493a      	ldr	r1, [pc, #232]	; (800fbec <etharp_output+0x1dc>)
 800fb02:	0003      	movs	r3, r0
 800fb04:	009b      	lsls	r3, r3, #2
 800fb06:	181b      	adds	r3, r3, r0
 800fb08:	009b      	lsls	r3, r3, #2
 800fb0a:	18cb      	adds	r3, r1, r3
 800fb0c:	3304      	adds	r3, #4
 800fb0e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800fb10:	429a      	cmp	r2, r3
 800fb12:	d10e      	bne.n	800fb32 <etharp_output+0x122>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
 800fb14:	4b31      	ldr	r3, [pc, #196]	; (800fbdc <etharp_output+0x1cc>)
 800fb16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800fb18:	3301      	adds	r3, #1
 800fb1a:	b29a      	uxth	r2, r3
 800fb1c:	4b2f      	ldr	r3, [pc, #188]	; (800fbdc <etharp_output+0x1cc>)
 800fb1e:	85da      	strh	r2, [r3, #46]	; 0x2e
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800fb20:	4b31      	ldr	r3, [pc, #196]	; (800fbe8 <etharp_output+0x1d8>)
 800fb22:	781a      	ldrb	r2, [r3, #0]
 800fb24:	68b9      	ldr	r1, [r7, #8]
 800fb26:	68fb      	ldr	r3, [r7, #12]
 800fb28:	0018      	movs	r0, r3
 800fb2a:	f7ff ff17 	bl	800f95c <etharp_output_to_arp_index>
 800fb2e:	0003      	movs	r3, r0
 800fb30:	e050      	b.n	800fbd4 <etharp_output+0x1c4>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800fb32:	2317      	movs	r3, #23
 800fb34:	18fb      	adds	r3, r7, r3
 800fb36:	2200      	movs	r2, #0
 800fb38:	701a      	strb	r2, [r3, #0]
 800fb3a:	e034      	b.n	800fba6 <etharp_output+0x196>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800fb3c:	2317      	movs	r3, #23
 800fb3e:	18fb      	adds	r3, r7, r3
 800fb40:	2200      	movs	r2, #0
 800fb42:	569a      	ldrsb	r2, [r3, r2]
 800fb44:	4929      	ldr	r1, [pc, #164]	; (800fbec <etharp_output+0x1dc>)
 800fb46:	0013      	movs	r3, r2
 800fb48:	009b      	lsls	r3, r3, #2
 800fb4a:	189b      	adds	r3, r3, r2
 800fb4c:	009b      	lsls	r3, r3, #2
 800fb4e:	18cb      	adds	r3, r1, r3
 800fb50:	3312      	adds	r3, #18
 800fb52:	781b      	ldrb	r3, [r3, #0]
 800fb54:	2b01      	cmp	r3, #1
 800fb56:	d91d      	bls.n	800fb94 <etharp_output+0x184>
          (ip_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800fb58:	69bb      	ldr	r3, [r7, #24]
 800fb5a:	6819      	ldr	r1, [r3, #0]
 800fb5c:	2317      	movs	r3, #23
 800fb5e:	18fb      	adds	r3, r7, r3
 800fb60:	2200      	movs	r2, #0
 800fb62:	569a      	ldrsb	r2, [r3, r2]
 800fb64:	4821      	ldr	r0, [pc, #132]	; (800fbec <etharp_output+0x1dc>)
 800fb66:	0013      	movs	r3, r2
 800fb68:	009b      	lsls	r3, r3, #2
 800fb6a:	189b      	adds	r3, r3, r2
 800fb6c:	009b      	lsls	r3, r3, #2
 800fb6e:	18c3      	adds	r3, r0, r3
 800fb70:	3304      	adds	r3, #4
 800fb72:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800fb74:	4299      	cmp	r1, r3
 800fb76:	d10d      	bne.n	800fb94 <etharp_output+0x184>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 800fb78:	2117      	movs	r1, #23
 800fb7a:	187b      	adds	r3, r7, r1
 800fb7c:	781a      	ldrb	r2, [r3, #0]
 800fb7e:	4b1a      	ldr	r3, [pc, #104]	; (800fbe8 <etharp_output+0x1d8>)
 800fb80:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800fb82:	187b      	adds	r3, r7, r1
 800fb84:	781a      	ldrb	r2, [r3, #0]
 800fb86:	68b9      	ldr	r1, [r7, #8]
 800fb88:	68fb      	ldr	r3, [r7, #12]
 800fb8a:	0018      	movs	r0, r3
 800fb8c:	f7ff fee6 	bl	800f95c <etharp_output_to_arp_index>
 800fb90:	0003      	movs	r3, r0
 800fb92:	e01f      	b.n	800fbd4 <etharp_output+0x1c4>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800fb94:	2117      	movs	r1, #23
 800fb96:	187b      	adds	r3, r7, r1
 800fb98:	781b      	ldrb	r3, [r3, #0]
 800fb9a:	b25b      	sxtb	r3, r3
 800fb9c:	b2db      	uxtb	r3, r3
 800fb9e:	3301      	adds	r3, #1
 800fba0:	b2da      	uxtb	r2, r3
 800fba2:	187b      	adds	r3, r7, r1
 800fba4:	701a      	strb	r2, [r3, #0]
 800fba6:	2317      	movs	r3, #23
 800fba8:	18fb      	adds	r3, r7, r3
 800fbaa:	781b      	ldrb	r3, [r3, #0]
 800fbac:	b25b      	sxtb	r3, r3
 800fbae:	2b09      	cmp	r3, #9
 800fbb0:	ddc4      	ble.n	800fb3c <etharp_output+0x12c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800fbb2:	68ba      	ldr	r2, [r7, #8]
 800fbb4:	69b9      	ldr	r1, [r7, #24]
 800fbb6:	68fb      	ldr	r3, [r7, #12]
 800fbb8:	0018      	movs	r0, r3
 800fbba:	f000 f819 	bl	800fbf0 <etharp_query>
 800fbbe:	0003      	movs	r3, r0
 800fbc0:	e008      	b.n	800fbd4 <etharp_output+0x1c4>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return etharp_send_ip(netif, q, (struct eth_addr*)(netif->hwaddr), dest);
 800fbc2:	68fb      	ldr	r3, [r7, #12]
 800fbc4:	3323      	adds	r3, #35	; 0x23
 800fbc6:	001a      	movs	r2, r3
 800fbc8:	69fb      	ldr	r3, [r7, #28]
 800fbca:	68b9      	ldr	r1, [r7, #8]
 800fbcc:	68f8      	ldr	r0, [r7, #12]
 800fbce:	f7ff fcdd 	bl	800f58c <etharp_send_ip>
 800fbd2:	0003      	movs	r3, r0
}
 800fbd4:	0018      	movs	r0, r3
 800fbd6:	46bd      	mov	sp, r7
 800fbd8:	b008      	add	sp, #32
 800fbda:	bd80      	pop	{r7, pc}
 800fbdc:	2000340c 	.word	0x2000340c
 800fbe0:	0801ca50 	.word	0x0801ca50
 800fbe4:	0000fea9 	.word	0x0000fea9
 800fbe8:	20002810 	.word	0x20002810
 800fbec:	20002748 	.word	0x20002748

0800fbf0 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, ip_addr_t *ipaddr, struct pbuf *q)
{
 800fbf0:	b5b0      	push	{r4, r5, r7, lr}
 800fbf2:	b08a      	sub	sp, #40	; 0x28
 800fbf4:	af00      	add	r7, sp, #0
 800fbf6:	60f8      	str	r0, [r7, #12]
 800fbf8:	60b9      	str	r1, [r7, #8]
 800fbfa:	607a      	str	r2, [r7, #4]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 800fbfc:	68fb      	ldr	r3, [r7, #12]
 800fbfe:	3323      	adds	r3, #35	; 0x23
 800fc00:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_MEM;
 800fc02:	2327      	movs	r3, #39	; 0x27
 800fc04:	18fb      	adds	r3, r7, r3
 800fc06:	22ff      	movs	r2, #255	; 0xff
 800fc08:	701a      	strb	r2, [r3, #0]
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip_addr_isbroadcast(ipaddr, netif) ||
 800fc0a:	68bb      	ldr	r3, [r7, #8]
 800fc0c:	681b      	ldr	r3, [r3, #0]
 800fc0e:	68fa      	ldr	r2, [r7, #12]
 800fc10:	0011      	movs	r1, r2
 800fc12:	0018      	movs	r0, r3
 800fc14:	f7fe fb2e 	bl	800e274 <ip4_addr_isbroadcast>
 800fc18:	1e03      	subs	r3, r0, #0
 800fc1a:	d10c      	bne.n	800fc36 <etharp_query+0x46>
      ip_addr_ismulticast(ipaddr) ||
 800fc1c:	68bb      	ldr	r3, [r7, #8]
 800fc1e:	681b      	ldr	r3, [r3, #0]
 800fc20:	22f0      	movs	r2, #240	; 0xf0
 800fc22:	4013      	ands	r3, r2
  if (ip_addr_isbroadcast(ipaddr, netif) ||
 800fc24:	2be0      	cmp	r3, #224	; 0xe0
 800fc26:	d006      	beq.n	800fc36 <etharp_query+0x46>
      ip_addr_ismulticast(ipaddr) ||
 800fc28:	68bb      	ldr	r3, [r7, #8]
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	d003      	beq.n	800fc36 <etharp_query+0x46>
      ip_addr_isany(ipaddr)) {
 800fc2e:	68bb      	ldr	r3, [r7, #8]
 800fc30:	681b      	ldr	r3, [r3, #0]
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	d102      	bne.n	800fc3c <etharp_query+0x4c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800fc36:	230e      	movs	r3, #14
 800fc38:	425b      	negs	r3, r3
 800fc3a:	e116      	b.n	800fe6a <etharp_query+0x27a>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD);
 800fc3c:	2517      	movs	r5, #23
 800fc3e:	197c      	adds	r4, r7, r5
 800fc40:	68bb      	ldr	r3, [r7, #8]
 800fc42:	2101      	movs	r1, #1
 800fc44:	0018      	movs	r0, r3
 800fc46:	f7ff fb25 	bl	800f294 <etharp_find_entry>
 800fc4a:	0003      	movs	r3, r0
 800fc4c:	7023      	strb	r3, [r4, #0]

  /* could not find or create entry? */
  if (i < 0) {
 800fc4e:	197b      	adds	r3, r7, r5
 800fc50:	781b      	ldrb	r3, [r3, #0]
 800fc52:	2b7f      	cmp	r3, #127	; 0x7f
 800fc54:	d90d      	bls.n	800fc72 <etharp_query+0x82>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	d005      	beq.n	800fc68 <etharp_query+0x78>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
 800fc5c:	4b85      	ldr	r3, [pc, #532]	; (800fe74 <etharp_query+0x284>)
 800fc5e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800fc60:	3301      	adds	r3, #1
 800fc62:	b29a      	uxth	r2, r3
 800fc64:	4b83      	ldr	r3, [pc, #524]	; (800fe74 <etharp_query+0x284>)
 800fc66:	849a      	strh	r2, [r3, #36]	; 0x24
    }
    return (err_t)i;
 800fc68:	2317      	movs	r3, #23
 800fc6a:	18fb      	adds	r3, r7, r3
 800fc6c:	781b      	ldrb	r3, [r3, #0]
 800fc6e:	b25b      	sxtb	r3, r3
 800fc70:	e0fb      	b.n	800fe6a <etharp_query+0x27a>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800fc72:	2317      	movs	r3, #23
 800fc74:	18fb      	adds	r3, r7, r3
 800fc76:	2200      	movs	r2, #0
 800fc78:	569a      	ldrsb	r2, [r3, r2]
 800fc7a:	497f      	ldr	r1, [pc, #508]	; (800fe78 <etharp_query+0x288>)
 800fc7c:	0013      	movs	r3, r2
 800fc7e:	009b      	lsls	r3, r3, #2
 800fc80:	189b      	adds	r3, r3, r2
 800fc82:	009b      	lsls	r3, r3, #2
 800fc84:	18cb      	adds	r3, r1, r3
 800fc86:	3312      	adds	r3, #18
 800fc88:	781b      	ldrb	r3, [r3, #0]
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	d10c      	bne.n	800fca8 <etharp_query+0xb8>
    arp_table[i].state = ETHARP_STATE_PENDING;
 800fc8e:	2317      	movs	r3, #23
 800fc90:	18fb      	adds	r3, r7, r3
 800fc92:	2200      	movs	r2, #0
 800fc94:	569a      	ldrsb	r2, [r3, r2]
 800fc96:	4978      	ldr	r1, [pc, #480]	; (800fe78 <etharp_query+0x288>)
 800fc98:	0013      	movs	r3, r2
 800fc9a:	009b      	lsls	r3, r3, #2
 800fc9c:	189b      	adds	r3, r3, r2
 800fc9e:	009b      	lsls	r3, r3, #2
 800fca0:	18cb      	adds	r3, r1, r3
 800fca2:	3312      	adds	r3, #18
 800fca4:	2201      	movs	r2, #1
 800fca6:	701a      	strb	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800fca8:	2317      	movs	r3, #23
 800fcaa:	18fb      	adds	r3, r7, r3
 800fcac:	2200      	movs	r2, #0
 800fcae:	569a      	ldrsb	r2, [r3, r2]
 800fcb0:	4971      	ldr	r1, [pc, #452]	; (800fe78 <etharp_query+0x288>)
 800fcb2:	0013      	movs	r3, r2
 800fcb4:	009b      	lsls	r3, r3, #2
 800fcb6:	189b      	adds	r3, r3, r2
 800fcb8:	009b      	lsls	r3, r3, #2
 800fcba:	18cb      	adds	r3, r1, r3
 800fcbc:	3312      	adds	r3, #18
 800fcbe:	781b      	ldrb	r3, [r3, #0]
 800fcc0:	2b01      	cmp	r3, #1
 800fcc2:	d007      	beq.n	800fcd4 <etharp_query+0xe4>
 800fcc4:	2317      	movs	r3, #23
 800fcc6:	18fb      	adds	r3, r7, r3
 800fcc8:	2200      	movs	r2, #0
 800fcca:	569a      	ldrsb	r2, [r3, r2]
 800fccc:	0013      	movs	r3, r2
 800fcce:	009b      	lsls	r3, r3, #2
 800fcd0:	189b      	adds	r3, r3, r2
 800fcd2:	009b      	lsls	r3, r3, #2
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a pending entry? or an implicit query request? */
  if ((arp_table[i].state == ETHARP_STATE_PENDING) || (q == NULL)) {
 800fcd4:	2317      	movs	r3, #23
 800fcd6:	18fb      	adds	r3, r7, r3
 800fcd8:	2200      	movs	r2, #0
 800fcda:	569a      	ldrsb	r2, [r3, r2]
 800fcdc:	4966      	ldr	r1, [pc, #408]	; (800fe78 <etharp_query+0x288>)
 800fcde:	0013      	movs	r3, r2
 800fce0:	009b      	lsls	r3, r3, #2
 800fce2:	189b      	adds	r3, r3, r2
 800fce4:	009b      	lsls	r3, r3, #2
 800fce6:	18cb      	adds	r3, r1, r3
 800fce8:	3312      	adds	r3, #18
 800fcea:	781b      	ldrb	r3, [r3, #0]
 800fcec:	2b01      	cmp	r3, #1
 800fcee:	d002      	beq.n	800fcf6 <etharp_query+0x106>
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d111      	bne.n	800fd1a <etharp_query+0x12a>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800fcf6:	2327      	movs	r3, #39	; 0x27
 800fcf8:	18fc      	adds	r4, r7, r3
 800fcfa:	68ba      	ldr	r2, [r7, #8]
 800fcfc:	68fb      	ldr	r3, [r7, #12]
 800fcfe:	0011      	movs	r1, r2
 800fd00:	0018      	movs	r0, r3
 800fd02:	f000 f973 	bl	800ffec <etharp_request>
 800fd06:	0003      	movs	r3, r0
 800fd08:	7023      	strb	r3, [r4, #0]
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	d104      	bne.n	800fd1a <etharp_query+0x12a>
      return result;
 800fd10:	2327      	movs	r3, #39	; 0x27
 800fd12:	18fb      	adds	r3, r7, r3
 800fd14:	781b      	ldrb	r3, [r3, #0]
 800fd16:	b25b      	sxtb	r3, r3
 800fd18:	e0a7      	b.n	800fe6a <etharp_query+0x27a>
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800fd1a:	2317      	movs	r3, #23
 800fd1c:	18fb      	adds	r3, r7, r3
 800fd1e:	2200      	movs	r2, #0
 800fd20:	569a      	ldrsb	r2, [r3, r2]
 800fd22:	4955      	ldr	r1, [pc, #340]	; (800fe78 <etharp_query+0x288>)
 800fd24:	0013      	movs	r3, r2
 800fd26:	009b      	lsls	r3, r3, #2
 800fd28:	189b      	adds	r3, r3, r2
 800fd2a:	009b      	lsls	r3, r3, #2
 800fd2c:	18cb      	adds	r3, r1, r3
 800fd2e:	3312      	adds	r3, #18
 800fd30:	781b      	ldrb	r3, [r3, #0]
 800fd32:	2b01      	cmp	r3, #1
 800fd34:	d91a      	bls.n	800fd6c <etharp_query+0x17c>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 800fd36:	2117      	movs	r1, #23
 800fd38:	187b      	adds	r3, r7, r1
 800fd3a:	781a      	ldrb	r2, [r3, #0]
 800fd3c:	4b4f      	ldr	r3, [pc, #316]	; (800fe7c <etharp_query+0x28c>)
 800fd3e:	701a      	strb	r2, [r3, #0]
    /* send the packet */
    result = etharp_send_ip(netif, q, srcaddr, &(arp_table[i].ethaddr));
 800fd40:	187b      	adds	r3, r7, r1
 800fd42:	2200      	movs	r2, #0
 800fd44:	569a      	ldrsb	r2, [r3, r2]
 800fd46:	0013      	movs	r3, r2
 800fd48:	009b      	lsls	r3, r3, #2
 800fd4a:	189b      	adds	r3, r3, r2
 800fd4c:	009b      	lsls	r3, r3, #2
 800fd4e:	3308      	adds	r3, #8
 800fd50:	001a      	movs	r2, r3
 800fd52:	4b49      	ldr	r3, [pc, #292]	; (800fe78 <etharp_query+0x288>)
 800fd54:	18d3      	adds	r3, r2, r3
 800fd56:	3304      	adds	r3, #4
 800fd58:	2227      	movs	r2, #39	; 0x27
 800fd5a:	18bc      	adds	r4, r7, r2
 800fd5c:	69ba      	ldr	r2, [r7, #24]
 800fd5e:	6879      	ldr	r1, [r7, #4]
 800fd60:	68f8      	ldr	r0, [r7, #12]
 800fd62:	f7ff fc13 	bl	800f58c <etharp_send_ip>
 800fd66:	0003      	movs	r3, r0
 800fd68:	7023      	strb	r3, [r4, #0]
 800fd6a:	e07a      	b.n	800fe62 <etharp_query+0x272>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800fd6c:	2317      	movs	r3, #23
 800fd6e:	18fb      	adds	r3, r7, r3
 800fd70:	2200      	movs	r2, #0
 800fd72:	569a      	ldrsb	r2, [r3, r2]
 800fd74:	4940      	ldr	r1, [pc, #256]	; (800fe78 <etharp_query+0x288>)
 800fd76:	0013      	movs	r3, r2
 800fd78:	009b      	lsls	r3, r3, #2
 800fd7a:	189b      	adds	r3, r3, r2
 800fd7c:	009b      	lsls	r3, r3, #2
 800fd7e:	18cb      	adds	r3, r1, r3
 800fd80:	3312      	adds	r3, #18
 800fd82:	781b      	ldrb	r3, [r3, #0]
 800fd84:	2b01      	cmp	r3, #1
 800fd86:	d000      	beq.n	800fd8a <etharp_query+0x19a>
 800fd88:	e06b      	b.n	800fe62 <etharp_query+0x272>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800fd8a:	2300      	movs	r3, #0
 800fd8c:	61fb      	str	r3, [r7, #28]
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400) 
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	623b      	str	r3, [r7, #32]
    while (p) {
 800fd92:	e009      	b.n	800fda8 <etharp_query+0x1b8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
      if(p->type != PBUF_ROM) {
 800fd94:	6a3b      	ldr	r3, [r7, #32]
 800fd96:	7b1b      	ldrb	r3, [r3, #12]
 800fd98:	2b01      	cmp	r3, #1
 800fd9a:	d002      	beq.n	800fda2 <etharp_query+0x1b2>
        copy_needed = 1;
 800fd9c:	2301      	movs	r3, #1
 800fd9e:	61fb      	str	r3, [r7, #28]
        break;
 800fda0:	e005      	b.n	800fdae <etharp_query+0x1be>
      }
      p = p->next;
 800fda2:	6a3b      	ldr	r3, [r7, #32]
 800fda4:	681b      	ldr	r3, [r3, #0]
 800fda6:	623b      	str	r3, [r7, #32]
    while (p) {
 800fda8:	6a3b      	ldr	r3, [r7, #32]
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	d1f2      	bne.n	800fd94 <etharp_query+0x1a4>
    }
    if(copy_needed) {
 800fdae:	69fb      	ldr	r3, [r7, #28]
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	d01a      	beq.n	800fdea <etharp_query+0x1fa>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_RAW, p->tot_len, PBUF_RAM);
 800fdb4:	6a3b      	ldr	r3, [r7, #32]
 800fdb6:	891b      	ldrh	r3, [r3, #8]
 800fdb8:	2200      	movs	r2, #0
 800fdba:	0019      	movs	r1, r3
 800fdbc:	2003      	movs	r0, #3
 800fdbe:	f7f6 fd5d 	bl	800687c <pbuf_alloc>
 800fdc2:	0003      	movs	r3, r0
 800fdc4:	623b      	str	r3, [r7, #32]
      if(p != NULL) {
 800fdc6:	6a3b      	ldr	r3, [r7, #32]
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	d014      	beq.n	800fdf6 <etharp_query+0x206>
        if (pbuf_copy(p, q) != ERR_OK) {
 800fdcc:	687a      	ldr	r2, [r7, #4]
 800fdce:	6a3b      	ldr	r3, [r7, #32]
 800fdd0:	0011      	movs	r1, r2
 800fdd2:	0018      	movs	r0, r3
 800fdd4:	f7f7 f8bd 	bl	8006f52 <pbuf_copy>
 800fdd8:	1e03      	subs	r3, r0, #0
 800fdda:	d00c      	beq.n	800fdf6 <etharp_query+0x206>
          pbuf_free(p);
 800fddc:	6a3b      	ldr	r3, [r7, #32]
 800fdde:	0018      	movs	r0, r3
 800fde0:	f7f6 ffd8 	bl	8006d94 <pbuf_free>
          p = NULL;
 800fde4:	2300      	movs	r3, #0
 800fde6:	623b      	str	r3, [r7, #32]
 800fde8:	e005      	b.n	800fdf6 <etharp_query+0x206>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	623b      	str	r3, [r7, #32]
      pbuf_ref(p);
 800fdee:	6a3b      	ldr	r3, [r7, #32]
 800fdf0:	0018      	movs	r0, r3
 800fdf2:	f7f7 f85d 	bl	8006eb0 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800fdf6:	6a3b      	ldr	r3, [r7, #32]
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	d028      	beq.n	800fe4e <etharp_query+0x25e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800fdfc:	2317      	movs	r3, #23
 800fdfe:	18fb      	adds	r3, r7, r3
 800fe00:	2200      	movs	r2, #0
 800fe02:	569a      	ldrsb	r2, [r3, r2]
 800fe04:	491c      	ldr	r1, [pc, #112]	; (800fe78 <etharp_query+0x288>)
 800fe06:	0013      	movs	r3, r2
 800fe08:	009b      	lsls	r3, r3, #2
 800fe0a:	189b      	adds	r3, r3, r2
 800fe0c:	009b      	lsls	r3, r3, #2
 800fe0e:	585b      	ldr	r3, [r3, r1]
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	d00c      	beq.n	800fe2e <etharp_query+0x23e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
 800fe14:	2317      	movs	r3, #23
 800fe16:	18fb      	adds	r3, r7, r3
 800fe18:	2200      	movs	r2, #0
 800fe1a:	569a      	ldrsb	r2, [r3, r2]
 800fe1c:	4916      	ldr	r1, [pc, #88]	; (800fe78 <etharp_query+0x288>)
 800fe1e:	0013      	movs	r3, r2
 800fe20:	009b      	lsls	r3, r3, #2
 800fe22:	189b      	adds	r3, r3, r2
 800fe24:	009b      	lsls	r3, r3, #2
 800fe26:	585b      	ldr	r3, [r3, r1]
 800fe28:	0018      	movs	r0, r3
 800fe2a:	f7f6 ffb3 	bl	8006d94 <pbuf_free>
      }
      arp_table[i].q = p;
 800fe2e:	2317      	movs	r3, #23
 800fe30:	18fb      	adds	r3, r7, r3
 800fe32:	2200      	movs	r2, #0
 800fe34:	569a      	ldrsb	r2, [r3, r2]
 800fe36:	4910      	ldr	r1, [pc, #64]	; (800fe78 <etharp_query+0x288>)
 800fe38:	0013      	movs	r3, r2
 800fe3a:	009b      	lsls	r3, r3, #2
 800fe3c:	189b      	adds	r3, r3, r2
 800fe3e:	009b      	lsls	r3, r3, #2
 800fe40:	6a3a      	ldr	r2, [r7, #32]
 800fe42:	505a      	str	r2, [r3, r1]
      result = ERR_OK;
 800fe44:	2327      	movs	r3, #39	; 0x27
 800fe46:	18fb      	adds	r3, r7, r3
 800fe48:	2200      	movs	r2, #0
 800fe4a:	701a      	strb	r2, [r3, #0]
 800fe4c:	e009      	b.n	800fe62 <etharp_query+0x272>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
 800fe4e:	4b09      	ldr	r3, [pc, #36]	; (800fe74 <etharp_query+0x284>)
 800fe50:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800fe52:	3301      	adds	r3, #1
 800fe54:	b29a      	uxth	r2, r3
 800fe56:	4b07      	ldr	r3, [pc, #28]	; (800fe74 <etharp_query+0x284>)
 800fe58:	849a      	strh	r2, [r3, #36]	; 0x24
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800fe5a:	2327      	movs	r3, #39	; 0x27
 800fe5c:	18fb      	adds	r3, r7, r3
 800fe5e:	22ff      	movs	r2, #255	; 0xff
 800fe60:	701a      	strb	r2, [r3, #0]
    }
  }
  return result;
 800fe62:	2327      	movs	r3, #39	; 0x27
 800fe64:	18fb      	adds	r3, r7, r3
 800fe66:	781b      	ldrb	r3, [r3, #0]
 800fe68:	b25b      	sxtb	r3, r3
}
 800fe6a:	0018      	movs	r0, r3
 800fe6c:	46bd      	mov	sp, r7
 800fe6e:	b00a      	add	sp, #40	; 0x28
 800fe70:	bdb0      	pop	{r4, r5, r7, pc}
 800fe72:	46c0      	nop			; (mov r8, r8)
 800fe74:	2000340c 	.word	0x2000340c
 800fe78:	20002748 	.word	0x20002748
 800fe7c:	20002810 	.word	0x20002810

0800fe80 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800fe80:	b5b0      	push	{r4, r5, r7, lr}
 800fe82:	b088      	sub	sp, #32
 800fe84:	af00      	add	r7, sp, #0
 800fe86:	60f8      	str	r0, [r7, #12]
 800fe88:	60b9      	str	r1, [r7, #8]
 800fe8a:	607a      	str	r2, [r7, #4]
 800fe8c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800fe8e:	231f      	movs	r3, #31
 800fe90:	18fb      	adds	r3, r7, r3
 800fe92:	2200      	movs	r2, #0
 800fe94:	701a      	strb	r2, [r3, #0]
#endif /* LWIP_AUTOIP */

  LWIP_ASSERT("netif != NULL", netif != NULL);

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_RAW, SIZEOF_ETHARP_PACKET, PBUF_RAM);
 800fe96:	2200      	movs	r2, #0
 800fe98:	212a      	movs	r1, #42	; 0x2a
 800fe9a:	2003      	movs	r0, #3
 800fe9c:	f7f6 fcee 	bl	800687c <pbuf_alloc>
 800fea0:	0003      	movs	r3, r0
 800fea2:	61bb      	str	r3, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800fea4:	69bb      	ldr	r3, [r7, #24]
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	d108      	bne.n	800febc <etharp_raw+0x3c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
 800feaa:	4b4f      	ldr	r3, [pc, #316]	; (800ffe8 <etharp_raw+0x168>)
 800feac:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800feae:	3301      	adds	r3, #1
 800feb0:	b29a      	uxth	r2, r3
 800feb2:	4b4d      	ldr	r3, [pc, #308]	; (800ffe8 <etharp_raw+0x168>)
 800feb4:	849a      	strh	r2, [r3, #36]	; 0x24
    return ERR_MEM;
 800feb6:	2301      	movs	r3, #1
 800feb8:	425b      	negs	r3, r3
 800feba:	e090      	b.n	800ffde <etharp_raw+0x15e>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
              (p->len >= SIZEOF_ETHARP_PACKET));

  ethhdr = (struct eth_hdr *)p->payload;
 800febc:	69bb      	ldr	r3, [r7, #24]
 800febe:	685b      	ldr	r3, [r3, #4]
 800fec0:	617b      	str	r3, [r7, #20]
  hdr = (struct etharp_hdr *)((u8_t*)ethhdr + SIZEOF_ETH_HDR);
 800fec2:	697b      	ldr	r3, [r7, #20]
 800fec4:	330e      	adds	r3, #14
 800fec6:	613b      	str	r3, [r7, #16]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = htons(opcode);
 800fec8:	233c      	movs	r3, #60	; 0x3c
 800feca:	18fb      	adds	r3, r7, r3
 800fecc:	881b      	ldrh	r3, [r3, #0]
 800fece:	0018      	movs	r0, r3
 800fed0:	f7f5 ff18 	bl	8005d04 <lwip_htons>
 800fed4:	0003      	movs	r3, r0
 800fed6:	001a      	movs	r2, r3
 800fed8:	693b      	ldr	r3, [r7, #16]
 800feda:	21ff      	movs	r1, #255	; 0xff
 800fedc:	4011      	ands	r1, r2
 800fede:	000c      	movs	r4, r1
 800fee0:	7999      	ldrb	r1, [r3, #6]
 800fee2:	2000      	movs	r0, #0
 800fee4:	4001      	ands	r1, r0
 800fee6:	1c08      	adds	r0, r1, #0
 800fee8:	1c21      	adds	r1, r4, #0
 800feea:	4301      	orrs	r1, r0
 800feec:	7199      	strb	r1, [r3, #6]
 800feee:	0a12      	lsrs	r2, r2, #8
 800fef0:	b290      	uxth	r0, r2
 800fef2:	79da      	ldrb	r2, [r3, #7]
 800fef4:	2100      	movs	r1, #0
 800fef6:	400a      	ands	r2, r1
 800fef8:	1c11      	adds	r1, r2, #0
 800fefa:	1c02      	adds	r2, r0, #0
 800fefc:	430a      	orrs	r2, r1
 800fefe:	71da      	strb	r2, [r3, #7]
   * 'sender IP address' MUST be sent using link-layer broadcast instead of
   * link-layer unicast. (See RFC3927 Section 2.5, last paragraph) */
  ethdst_hwaddr = ip_addr_islinklocal(ipsrc_addr) ? (u8_t*)(ethbroadcast.addr) : ethdst_addr->addr;
#endif /* LWIP_AUTOIP */
  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 800ff00:	693b      	ldr	r3, [r7, #16]
 800ff02:	3308      	adds	r3, #8
 800ff04:	6839      	ldr	r1, [r7, #0]
 800ff06:	2206      	movs	r2, #6
 800ff08:	0018      	movs	r0, r3
 800ff0a:	f002 f8a4 	bl	8012056 <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 800ff0e:	693b      	ldr	r3, [r7, #16]
 800ff10:	3312      	adds	r3, #18
 800ff12:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ff14:	2206      	movs	r2, #6
 800ff16:	0018      	movs	r0, r3
 800ff18:	f002 f89d 	bl	8012056 <memcpy>
  /* Write the Ethernet MAC-Addresses */
#if LWIP_AUTOIP
  ETHADDR16_COPY(&ethhdr->dest, ethdst_hwaddr);
#else  /* LWIP_AUTOIP */
  ETHADDR16_COPY(&ethhdr->dest, ethdst_addr);
 800ff1c:	697b      	ldr	r3, [r7, #20]
 800ff1e:	6879      	ldr	r1, [r7, #4]
 800ff20:	2206      	movs	r2, #6
 800ff22:	0018      	movs	r0, r3
 800ff24:	f002 f897 	bl	8012056 <memcpy>
#endif /* LWIP_AUTOIP */
  ETHADDR16_COPY(&ethhdr->src, ethsrc_addr);
 800ff28:	697b      	ldr	r3, [r7, #20]
 800ff2a:	3306      	adds	r3, #6
 800ff2c:	68b9      	ldr	r1, [r7, #8]
 800ff2e:	2206      	movs	r2, #6
 800ff30:	0018      	movs	r0, r3
 800ff32:	f002 f890 	bl	8012056 <memcpy>
  /* Copy struct ip_addr2 to aligned ip_addr, to support compilers without
   * structure packing. */ 
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 800ff36:	693b      	ldr	r3, [r7, #16]
 800ff38:	330e      	adds	r3, #14
 800ff3a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ff3c:	2204      	movs	r2, #4
 800ff3e:	0018      	movs	r0, r3
 800ff40:	f002 f889 	bl	8012056 <memcpy>
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 800ff44:	693b      	ldr	r3, [r7, #16]
 800ff46:	3318      	adds	r3, #24
 800ff48:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ff4a:	2204      	movs	r2, #4
 800ff4c:	0018      	movs	r0, r3
 800ff4e:	f002 f882 	bl	8012056 <memcpy>

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 800ff52:	693b      	ldr	r3, [r7, #16]
 800ff54:	781a      	ldrb	r2, [r3, #0]
 800ff56:	2100      	movs	r1, #0
 800ff58:	400a      	ands	r2, r1
 800ff5a:	701a      	strb	r2, [r3, #0]
 800ff5c:	785a      	ldrb	r2, [r3, #1]
 800ff5e:	2100      	movs	r1, #0
 800ff60:	400a      	ands	r2, r1
 800ff62:	1c11      	adds	r1, r2, #0
 800ff64:	2201      	movs	r2, #1
 800ff66:	430a      	orrs	r2, r1
 800ff68:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800ff6a:	693b      	ldr	r3, [r7, #16]
 800ff6c:	789a      	ldrb	r2, [r3, #2]
 800ff6e:	2100      	movs	r1, #0
 800ff70:	400a      	ands	r2, r1
 800ff72:	1c11      	adds	r1, r2, #0
 800ff74:	2208      	movs	r2, #8
 800ff76:	430a      	orrs	r2, r1
 800ff78:	709a      	strb	r2, [r3, #2]
 800ff7a:	78da      	ldrb	r2, [r3, #3]
 800ff7c:	2100      	movs	r1, #0
 800ff7e:	400a      	ands	r2, r1
 800ff80:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETHARP_HWADDR_LEN;
 800ff82:	693b      	ldr	r3, [r7, #16]
 800ff84:	2206      	movs	r2, #6
 800ff86:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip_addr_t);
 800ff88:	693b      	ldr	r3, [r7, #16]
 800ff8a:	2204      	movs	r2, #4
 800ff8c:	715a      	strb	r2, [r3, #5]

  ethhdr->type = PP_HTONS(ETHTYPE_ARP);
 800ff8e:	697b      	ldr	r3, [r7, #20]
 800ff90:	7b1a      	ldrb	r2, [r3, #12]
 800ff92:	2100      	movs	r1, #0
 800ff94:	400a      	ands	r2, r1
 800ff96:	1c11      	adds	r1, r2, #0
 800ff98:	2208      	movs	r2, #8
 800ff9a:	430a      	orrs	r2, r1
 800ff9c:	731a      	strb	r2, [r3, #12]
 800ff9e:	7b5a      	ldrb	r2, [r3, #13]
 800ffa0:	2100      	movs	r1, #0
 800ffa2:	400a      	ands	r2, r1
 800ffa4:	1c11      	adds	r1, r2, #0
 800ffa6:	2206      	movs	r2, #6
 800ffa8:	430a      	orrs	r2, r1
 800ffaa:	735a      	strb	r2, [r3, #13]
  /* send ARP query */
  result = netif->linkoutput(netif, p);
 800ffac:	68fb      	ldr	r3, [r7, #12]
 800ffae:	699b      	ldr	r3, [r3, #24]
 800ffb0:	251f      	movs	r5, #31
 800ffb2:	197c      	adds	r4, r7, r5
 800ffb4:	69b9      	ldr	r1, [r7, #24]
 800ffb6:	68fa      	ldr	r2, [r7, #12]
 800ffb8:	0010      	movs	r0, r2
 800ffba:	4798      	blx	r3
 800ffbc:	0003      	movs	r3, r0
 800ffbe:	7023      	strb	r3, [r4, #0]
  ETHARP_STATS_INC(etharp.xmit);
 800ffc0:	4b09      	ldr	r3, [pc, #36]	; (800ffe8 <etharp_raw+0x168>)
 800ffc2:	8b1b      	ldrh	r3, [r3, #24]
 800ffc4:	3301      	adds	r3, #1
 800ffc6:	b29a      	uxth	r2, r3
 800ffc8:	4b07      	ldr	r3, [pc, #28]	; (800ffe8 <etharp_raw+0x168>)
 800ffca:	831a      	strh	r2, [r3, #24]
  /* free ARP query packet */
  pbuf_free(p);
 800ffcc:	69bb      	ldr	r3, [r7, #24]
 800ffce:	0018      	movs	r0, r3
 800ffd0:	f7f6 fee0 	bl	8006d94 <pbuf_free>
  p = NULL;
 800ffd4:	2300      	movs	r3, #0
 800ffd6:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800ffd8:	197b      	adds	r3, r7, r5
 800ffda:	781b      	ldrb	r3, [r3, #0]
 800ffdc:	b25b      	sxtb	r3, r3
}
 800ffde:	0018      	movs	r0, r3
 800ffe0:	46bd      	mov	sp, r7
 800ffe2:	b008      	add	sp, #32
 800ffe4:	bdb0      	pop	{r4, r5, r7, pc}
 800ffe6:	46c0      	nop			; (mov r8, r8)
 800ffe8:	2000340c 	.word	0x2000340c

0800ffec <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, ip_addr_t *ipaddr)
{
 800ffec:	b5b0      	push	{r4, r5, r7, lr}
 800ffee:	b086      	sub	sp, #24
 800fff0:	af04      	add	r7, sp, #16
 800fff2:	6078      	str	r0, [r7, #4]
 800fff4:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, &ethbroadcast,
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	3323      	adds	r3, #35	; 0x23
 800fffa:	0019      	movs	r1, r3
                    (struct eth_addr *)netif->hwaddr, &netif->ip_addr, &ethzero,
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	3323      	adds	r3, #35	; 0x23
 8010000:	001d      	movs	r5, r3
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, &ethbroadcast,
 8010006:	4c09      	ldr	r4, [pc, #36]	; (801002c <etharp_request+0x40>)
 8010008:	6878      	ldr	r0, [r7, #4]
 801000a:	2201      	movs	r2, #1
 801000c:	9203      	str	r2, [sp, #12]
 801000e:	683a      	ldr	r2, [r7, #0]
 8010010:	9202      	str	r2, [sp, #8]
 8010012:	4a07      	ldr	r2, [pc, #28]	; (8010030 <etharp_request+0x44>)
 8010014:	9201      	str	r2, [sp, #4]
 8010016:	9300      	str	r3, [sp, #0]
 8010018:	002b      	movs	r3, r5
 801001a:	0022      	movs	r2, r4
 801001c:	f7ff ff30 	bl	800fe80 <etharp_raw>
 8010020:	0003      	movs	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8010022:	0018      	movs	r0, r3
 8010024:	46bd      	mov	sp, r7
 8010026:	b002      	add	sp, #8
 8010028:	bdb0      	pop	{r4, r5, r7, pc}
 801002a:	46c0      	nop			; (mov r8, r8)
 801002c:	0801ca50 	.word	0x0801ca50
 8010030:	0801ca58 	.word	0x0801ca58

08010034 <ethernet_input>:
 * @param p the recevied packet, p->payload pointing to the ethernet header
 * @param netif the network interface on which the packet was received
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8010034:	b580      	push	{r7, lr}
 8010036:	b086      	sub	sp, #24
 8010038:	af00      	add	r7, sp, #0
 801003a:	6078      	str	r0, [r7, #4]
 801003c:	6039      	str	r1, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
 801003e:	2316      	movs	r3, #22
 8010040:	18fb      	adds	r3, r7, r3
 8010042:	220e      	movs	r2, #14
 8010044:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	895b      	ldrh	r3, [r3, #10]
 801004a:	2b0e      	cmp	r3, #14
 801004c:	d80c      	bhi.n	8010068 <ethernet_input+0x34>
    /* a packet with only an ethernet header (or less) is not valid for us */
    ETHARP_STATS_INC(etharp.proterr);
 801004e:	4b49      	ldr	r3, [pc, #292]	; (8010174 <ethernet_input+0x140>)
 8010050:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010052:	3301      	adds	r3, #1
 8010054:	b29a      	uxth	r2, r3
 8010056:	4b47      	ldr	r3, [pc, #284]	; (8010174 <ethernet_input+0x140>)
 8010058:	851a      	strh	r2, [r3, #40]	; 0x28
    ETHARP_STATS_INC(etharp.drop);
 801005a:	4b46      	ldr	r3, [pc, #280]	; (8010174 <ethernet_input+0x140>)
 801005c:	8bdb      	ldrh	r3, [r3, #30]
 801005e:	3301      	adds	r3, #1
 8010060:	b29a      	uxth	r2, r3
 8010062:	4b44      	ldr	r3, [pc, #272]	; (8010174 <ethernet_input+0x140>)
 8010064:	83da      	strh	r2, [r3, #30]
    goto free_and_return;
 8010066:	e07c      	b.n	8010162 <ethernet_input+0x12e>
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	685b      	ldr	r3, [r3, #4]
 801006c:	613b      	str	r3, [r7, #16]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0], (unsigned)ethhdr->src.addr[1], (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3], (unsigned)ethhdr->src.addr[4], (unsigned)ethhdr->src.addr[5],
     (unsigned)htons(ethhdr->type)));

  type = ethhdr->type;
 801006e:	230e      	movs	r3, #14
 8010070:	18fa      	adds	r2, r7, r3
 8010072:	693b      	ldr	r3, [r7, #16]
 8010074:	7b19      	ldrb	r1, [r3, #12]
 8010076:	7b5b      	ldrb	r3, [r3, #13]
 8010078:	021b      	lsls	r3, r3, #8
 801007a:	430b      	orrs	r3, r1
 801007c:	8013      	strh	r3, [r2, #0]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801007e:	693b      	ldr	r3, [r7, #16]
 8010080:	781b      	ldrb	r3, [r3, #0]
 8010082:	001a      	movs	r2, r3
 8010084:	2301      	movs	r3, #1
 8010086:	4013      	ands	r3, r2
 8010088:	d022      	beq.n	80100d0 <ethernet_input+0x9c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_MULTICAST_ADDR_0) {
 801008a:	693b      	ldr	r3, [r7, #16]
 801008c:	781b      	ldrb	r3, [r3, #0]
 801008e:	2b01      	cmp	r3, #1
 8010090:	d10f      	bne.n	80100b2 <ethernet_input+0x7e>
      if ((ethhdr->dest.addr[1] == LL_MULTICAST_ADDR_1) &&
 8010092:	693b      	ldr	r3, [r7, #16]
 8010094:	785b      	ldrb	r3, [r3, #1]
 8010096:	2b00      	cmp	r3, #0
 8010098:	d11a      	bne.n	80100d0 <ethernet_input+0x9c>
          (ethhdr->dest.addr[2] == LL_MULTICAST_ADDR_2)) {
 801009a:	693b      	ldr	r3, [r7, #16]
 801009c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_MULTICAST_ADDR_1) &&
 801009e:	2b5e      	cmp	r3, #94	; 0x5e
 80100a0:	d116      	bne.n	80100d0 <ethernet_input+0x9c>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	7b5b      	ldrb	r3, [r3, #13]
 80100a6:	2210      	movs	r2, #16
 80100a8:	4313      	orrs	r3, r2
 80100aa:	b2da      	uxtb	r2, r3
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	735a      	strb	r2, [r3, #13]
 80100b0:	e00e      	b.n	80100d0 <ethernet_input+0x9c>
      }
    } else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80100b2:	693b      	ldr	r3, [r7, #16]
 80100b4:	4930      	ldr	r1, [pc, #192]	; (8010178 <ethernet_input+0x144>)
 80100b6:	2206      	movs	r2, #6
 80100b8:	0018      	movs	r0, r3
 80100ba:	f001 ffbd 	bl	8012038 <memcmp>
 80100be:	1e03      	subs	r3, r0, #0
 80100c0:	d106      	bne.n	80100d0 <ethernet_input+0x9c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	7b5b      	ldrb	r3, [r3, #13]
 80100c6:	2208      	movs	r2, #8
 80100c8:	4313      	orrs	r3, r2
 80100ca:	b2da      	uxtb	r2, r3
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80100d0:	230e      	movs	r3, #14
 80100d2:	18fb      	adds	r3, r7, r3
 80100d4:	881b      	ldrh	r3, [r3, #0]
 80100d6:	2b08      	cmp	r3, #8
 80100d8:	d004      	beq.n	80100e4 <ethernet_input+0xb0>
 80100da:	22c1      	movs	r2, #193	; 0xc1
 80100dc:	00d2      	lsls	r2, r2, #3
 80100de:	4293      	cmp	r3, r2
 80100e0:	d01b      	beq.n	801011a <ethernet_input+0xe6>
 80100e2:	e02a      	b.n	801013a <ethernet_input+0x106>
#if LWIP_ARP
    /* IP packet? */
    case PP_HTONS(ETHTYPE_IP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80100e4:	683b      	ldr	r3, [r7, #0]
 80100e6:	2229      	movs	r2, #41	; 0x29
 80100e8:	5c9b      	ldrb	r3, [r3, r2]
 80100ea:	001a      	movs	r2, r3
 80100ec:	2320      	movs	r3, #32
 80100ee:	4013      	ands	r3, r2
 80100f0:	d032      	beq.n	8010158 <ethernet_input+0x124>
#if ETHARP_TRUST_IP_MAC
      /* update ARP table */
      etharp_ip_input(netif, p);
#endif /* ETHARP_TRUST_IP_MAC */
      /* skip Ethernet header */
      if(pbuf_header(p, -ip_hdr_offset)) {
 80100f2:	2316      	movs	r3, #22
 80100f4:	18fb      	adds	r3, r7, r3
 80100f6:	881b      	ldrh	r3, [r3, #0]
 80100f8:	425b      	negs	r3, r3
 80100fa:	b29b      	uxth	r3, r3
 80100fc:	b21a      	sxth	r2, r3
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	0011      	movs	r1, r2
 8010102:	0018      	movs	r0, r3
 8010104:	f7f6 fdbf 	bl	8006c86 <pbuf_header>
 8010108:	1e03      	subs	r3, r0, #0
 801010a:	d127      	bne.n	801015c <ethernet_input+0x128>
        LWIP_ASSERT("Can't move over header in packet", 0);
        goto free_and_return;
      } else {
        /* pass to IP layer */
        ip_input(p, netif);
 801010c:	683a      	ldr	r2, [r7, #0]
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	0011      	movs	r1, r2
 8010112:	0018      	movs	r0, r3
 8010114:	f7fd fcd8 	bl	800dac8 <ip_input>
      }
      break;
 8010118:	e01c      	b.n	8010154 <ethernet_input+0x120>
      
    case PP_HTONS(ETHTYPE_ARP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801011a:	683b      	ldr	r3, [r7, #0]
 801011c:	2229      	movs	r2, #41	; 0x29
 801011e:	5c9b      	ldrb	r3, [r3, r2]
 8010120:	001a      	movs	r2, r3
 8010122:	2320      	movs	r3, #32
 8010124:	4013      	ands	r3, r2
 8010126:	d01b      	beq.n	8010160 <ethernet_input+0x12c>
        goto free_and_return;
      }
      /* pass p to ARP module */
      etharp_arp_input(netif, (struct eth_addr*)(netif->hwaddr), p);
 8010128:	683b      	ldr	r3, [r7, #0]
 801012a:	3323      	adds	r3, #35	; 0x23
 801012c:	0019      	movs	r1, r3
 801012e:	687a      	ldr	r2, [r7, #4]
 8010130:	683b      	ldr	r3, [r7, #0]
 8010132:	0018      	movs	r0, r3
 8010134:	f7ff fb0c 	bl	800f750 <etharp_arp_input>
      break;
 8010138:	e00c      	b.n	8010154 <ethernet_input+0x120>
      pppoe_data_input(netif, p);
      break;
#endif /* PPPOE_SUPPORT */

    default:
      ETHARP_STATS_INC(etharp.proterr);
 801013a:	4b0e      	ldr	r3, [pc, #56]	; (8010174 <ethernet_input+0x140>)
 801013c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801013e:	3301      	adds	r3, #1
 8010140:	b29a      	uxth	r2, r3
 8010142:	4b0c      	ldr	r3, [pc, #48]	; (8010174 <ethernet_input+0x140>)
 8010144:	851a      	strh	r2, [r3, #40]	; 0x28
      ETHARP_STATS_INC(etharp.drop);
 8010146:	4b0b      	ldr	r3, [pc, #44]	; (8010174 <ethernet_input+0x140>)
 8010148:	8bdb      	ldrh	r3, [r3, #30]
 801014a:	3301      	adds	r3, #1
 801014c:	b29a      	uxth	r2, r3
 801014e:	4b09      	ldr	r3, [pc, #36]	; (8010174 <ethernet_input+0x140>)
 8010150:	83da      	strh	r2, [r3, #30]
      goto free_and_return;
 8010152:	e006      	b.n	8010162 <ethernet_input+0x12e>
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8010154:	2300      	movs	r3, #0
 8010156:	e009      	b.n	801016c <ethernet_input+0x138>
        goto free_and_return;
 8010158:	46c0      	nop			; (mov r8, r8)
 801015a:	e002      	b.n	8010162 <ethernet_input+0x12e>
        goto free_and_return;
 801015c:	46c0      	nop			; (mov r8, r8)
 801015e:	e000      	b.n	8010162 <ethernet_input+0x12e>
        goto free_and_return;
 8010160:	46c0      	nop			; (mov r8, r8)

free_and_return:
  pbuf_free(p);
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	0018      	movs	r0, r3
 8010166:	f7f6 fe15 	bl	8006d94 <pbuf_free>
  return ERR_OK;
 801016a:	2300      	movs	r3, #0
}
 801016c:	0018      	movs	r0, r3
 801016e:	46bd      	mov	sp, r7
 8010170:	b006      	add	sp, #24
 8010172:	bd80      	pop	{r7, pc}
 8010174:	2000340c 	.word	0x2000340c
 8010178:	0801ca50 	.word	0x0801ca50

0801017c <usb_ecm_recv_callback>:
    entries               /* entries */
};

/* this function is called by usbd_ecm.c during an ISR; it must not block */
void usb_ecm_recv_callback(const uint8_t *data, int size)
{
 801017c:	b580      	push	{r7, lr}
 801017e:	b082      	sub	sp, #8
 8010180:	af00      	add	r7, sp, #0
 8010182:	6078      	str	r0, [r7, #4]
 8010184:	6039      	str	r1, [r7, #0]
  if (received_frame)
 8010186:	4b13      	ldr	r3, [pc, #76]	; (80101d4 <usb_ecm_recv_callback+0x58>)
 8010188:	681b      	ldr	r3, [r3, #0]
 801018a:	2b00      	cmp	r3, #0
 801018c:	d11e      	bne.n	80101cc <usb_ecm_recv_callback+0x50>
    return;

  received_frame = pbuf_alloc(PBUF_RAW, size, PBUF_POOL);
 801018e:	683b      	ldr	r3, [r7, #0]
 8010190:	b29b      	uxth	r3, r3
 8010192:	2203      	movs	r2, #3
 8010194:	0019      	movs	r1, r3
 8010196:	2003      	movs	r0, #3
 8010198:	f7f6 fb70 	bl	800687c <pbuf_alloc>
 801019c:	0002      	movs	r2, r0
 801019e:	4b0d      	ldr	r3, [pc, #52]	; (80101d4 <usb_ecm_recv_callback+0x58>)
 80101a0:	601a      	str	r2, [r3, #0]
  if (!received_frame)
 80101a2:	4b0c      	ldr	r3, [pc, #48]	; (80101d4 <usb_ecm_recv_callback+0x58>)
 80101a4:	681b      	ldr	r3, [r3, #0]
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	d102      	bne.n	80101b0 <usb_ecm_recv_callback+0x34>
  {
    usb_ecm_recv_renew();
 80101aa:	f001 fc91 	bl	8011ad0 <usb_ecm_recv_renew>
    return;
 80101ae:	e00e      	b.n	80101ce <usb_ecm_recv_callback+0x52>
  }

  memcpy(received_frame->payload, data, size);
 80101b0:	4b08      	ldr	r3, [pc, #32]	; (80101d4 <usb_ecm_recv_callback+0x58>)
 80101b2:	681b      	ldr	r3, [r3, #0]
 80101b4:	685b      	ldr	r3, [r3, #4]
 80101b6:	683a      	ldr	r2, [r7, #0]
 80101b8:	6879      	ldr	r1, [r7, #4]
 80101ba:	0018      	movs	r0, r3
 80101bc:	f001 ff4b 	bl	8012056 <memcpy>
  received_frame->len = size;
 80101c0:	4b04      	ldr	r3, [pc, #16]	; (80101d4 <usb_ecm_recv_callback+0x58>)
 80101c2:	681b      	ldr	r3, [r3, #0]
 80101c4:	683a      	ldr	r2, [r7, #0]
 80101c6:	b292      	uxth	r2, r2
 80101c8:	815a      	strh	r2, [r3, #10]
 80101ca:	e000      	b.n	80101ce <usb_ecm_recv_callback+0x52>
    return;
 80101cc:	46c0      	nop			; (mov r8, r8)
}
 80101ce:	46bd      	mov	sp, r7
 80101d0:	b002      	add	sp, #8
 80101d2:	bd80      	pop	{r7, pc}
 80101d4:	20002848 	.word	0x20002848

080101d8 <sys_now>:

uint32_t sys_now()
{
 80101d8:	b580      	push	{r7, lr}
 80101da:	af00      	add	r7, sp, #0
    return (uint32_t)mtime();
 80101dc:	f000 fa02 	bl	80105e4 <mtime>
 80101e0:	0003      	movs	r3, r0
}
 80101e2:	0018      	movs	r0, r3
 80101e4:	46bd      	mov	sp, r7
 80101e6:	bd80      	pop	{r7, pc}

080101e8 <tcp_timer_proc>:

TIMER_PROC(tcp_timer, TCP_TMR_INTERVAL, 1, NULL)
{
 80101e8:	b580      	push	{r7, lr}
 80101ea:	b082      	sub	sp, #8
 80101ec:	af00      	add	r7, sp, #0
 80101ee:	6078      	str	r0, [r7, #4]
    tcp_tmr();
 80101f0:	f7f7 f858 	bl	80072a4 <tcp_tmr>
}
 80101f4:	46c0      	nop			; (mov r8, r8)
 80101f6:	46bd      	mov	sp, r7
 80101f8:	b002      	add	sp, #8
 80101fa:	bd80      	pop	{r7, pc}

080101fc <output_fn>:

err_t output_fn(struct netif *netif, struct pbuf *p, ip_addr_t *ipaddr)
{
 80101fc:	b580      	push	{r7, lr}
 80101fe:	b084      	sub	sp, #16
 8010200:	af00      	add	r7, sp, #0
 8010202:	60f8      	str	r0, [r7, #12]
 8010204:	60b9      	str	r1, [r7, #8]
 8010206:	607a      	str	r2, [r7, #4]
    return etharp_output(netif, p, ipaddr);
 8010208:	687a      	ldr	r2, [r7, #4]
 801020a:	68b9      	ldr	r1, [r7, #8]
 801020c:	68fb      	ldr	r3, [r7, #12]
 801020e:	0018      	movs	r0, r3
 8010210:	f7ff fbfe 	bl	800fa10 <etharp_output>
 8010214:	0003      	movs	r3, r0
}
 8010216:	0018      	movs	r0, r3
 8010218:	46bd      	mov	sp, r7
 801021a:	b004      	add	sp, #16
 801021c:	bd80      	pop	{r7, pc}

0801021e <linkoutput_fn>:

err_t linkoutput_fn(struct netif *netif, struct pbuf *p)
{
 801021e:	b580      	push	{r7, lr}
 8010220:	b084      	sub	sp, #16
 8010222:	af00      	add	r7, sp, #0
 8010224:	6078      	str	r0, [r7, #4]
 8010226:	6039      	str	r1, [r7, #0]
    int i;
    for (i = 0; i < 200; i++)
 8010228:	2300      	movs	r3, #0
 801022a:	60fb      	str	r3, [r7, #12]
 801022c:	e009      	b.n	8010242 <linkoutput_fn+0x24>
    {
        if (usb_ecm_can_xmit()) goto ready;
 801022e:	f001 fe09 	bl	8011e44 <usb_ecm_can_xmit>
 8010232:	1e03      	subs	r3, r0, #0
 8010234:	d10b      	bne.n	801024e <linkoutput_fn+0x30>
        msleep(1);
 8010236:	2001      	movs	r0, #1
 8010238:	f000 f9dc 	bl	80105f4 <msleep>
    for (i = 0; i < 200; i++)
 801023c:	68fb      	ldr	r3, [r7, #12]
 801023e:	3301      	adds	r3, #1
 8010240:	60fb      	str	r3, [r7, #12]
 8010242:	68fb      	ldr	r3, [r7, #12]
 8010244:	2bc7      	cmp	r3, #199	; 0xc7
 8010246:	ddf2      	ble.n	801022e <linkoutput_fn+0x10>
    }
    return ERR_USE;
 8010248:	2308      	movs	r3, #8
 801024a:	425b      	negs	r3, r3
 801024c:	e005      	b.n	801025a <linkoutput_fn+0x3c>
        if (usb_ecm_can_xmit()) goto ready;
 801024e:	46c0      	nop			; (mov r8, r8)
ready:
    usb_ecm_xmit_packet(p);
 8010250:	683b      	ldr	r3, [r7, #0]
 8010252:	0018      	movs	r0, r3
 8010254:	f001 fe08 	bl	8011e68 <usb_ecm_xmit_packet>
    return ERR_OK;
 8010258:	2300      	movs	r3, #0
}
 801025a:	0018      	movs	r0, r3
 801025c:	46bd      	mov	sp, r7
 801025e:	b004      	add	sp, #16
 8010260:	bd80      	pop	{r7, pc}
	...

08010264 <netif_init_cb>:

err_t netif_init_cb(struct netif *netif)
{
 8010264:	b580      	push	{r7, lr}
 8010266:	b082      	sub	sp, #8
 8010268:	af00      	add	r7, sp, #0
 801026a:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("netif != NULL", (netif != NULL));
    netif->mtu = ECM_MTU;
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	2280      	movs	r2, #128	; 0x80
 8010270:	0052      	lsls	r2, r2, #1
 8010272:	841a      	strh	r2, [r3, #32]
    netif->flags = NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP | NETIF_FLAG_LINK_UP | NETIF_FLAG_UP;
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	2229      	movs	r2, #41	; 0x29
 8010278:	2133      	movs	r1, #51	; 0x33
 801027a:	5499      	strb	r1, [r3, r2]
    netif->state = NULL;
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	2200      	movs	r2, #0
 8010280:	61da      	str	r2, [r3, #28]
    netif->name[0] = 'E';
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	222a      	movs	r2, #42	; 0x2a
 8010286:	2145      	movs	r1, #69	; 0x45
 8010288:	5499      	strb	r1, [r3, r2]
    netif->name[1] = 'X';
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	222b      	movs	r2, #43	; 0x2b
 801028e:	2158      	movs	r1, #88	; 0x58
 8010290:	5499      	strb	r1, [r3, r2]
    netif->linkoutput = linkoutput_fn;
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	4a04      	ldr	r2, [pc, #16]	; (80102a8 <netif_init_cb+0x44>)
 8010296:	619a      	str	r2, [r3, #24]
    netif->output = output_fn;
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	4a04      	ldr	r2, [pc, #16]	; (80102ac <netif_init_cb+0x48>)
 801029c:	615a      	str	r2, [r3, #20]
    return ERR_OK;
 801029e:	2300      	movs	r3, #0
}
 80102a0:	0018      	movs	r0, r3
 80102a2:	46bd      	mov	sp, r7
 80102a4:	b002      	add	sp, #8
 80102a6:	bd80      	pop	{r7, pc}
 80102a8:	0801021f 	.word	0x0801021f
 80102ac:	080101fd 	.word	0x080101fd

080102b0 <init_lwip>:

#define PADDR(ptr) ((ip_addr_t *)ptr)

static void init_lwip()
{
 80102b0:	b590      	push	{r4, r7, lr}
 80102b2:	b087      	sub	sp, #28
 80102b4:	af04      	add	r7, sp, #16
    struct netif  *netif = &netif_data;
 80102b6:	4b16      	ldr	r3, [pc, #88]	; (8010310 <init_lwip+0x60>)
 80102b8:	607b      	str	r3, [r7, #4]

    lwip_init();
 80102ba:	f7f5 fd6f 	bl	8005d9c <lwip_init>
    netif->hwaddr_len = 6;
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	2222      	movs	r2, #34	; 0x22
 80102c2:	2106      	movs	r1, #6
 80102c4:	5499      	strb	r1, [r3, r2]
    memcpy(netif->hwaddr, hwaddr, 6);
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	3323      	adds	r3, #35	; 0x23
 80102ca:	001a      	movs	r2, r3
 80102cc:	4b11      	ldr	r3, [pc, #68]	; (8010314 <init_lwip+0x64>)
 80102ce:	0010      	movs	r0, r2
 80102d0:	0019      	movs	r1, r3
 80102d2:	2306      	movs	r3, #6
 80102d4:	001a      	movs	r2, r3
 80102d6:	f001 febe 	bl	8012056 <memcpy>

    netif = netif_add(netif, PADDR(ipaddr), PADDR(netmask), PADDR(gateway), NULL, netif_init_cb, ip_input);
 80102da:	4c0f      	ldr	r4, [pc, #60]	; (8010318 <init_lwip+0x68>)
 80102dc:	4a0f      	ldr	r2, [pc, #60]	; (801031c <init_lwip+0x6c>)
 80102de:	4910      	ldr	r1, [pc, #64]	; (8010320 <init_lwip+0x70>)
 80102e0:	6878      	ldr	r0, [r7, #4]
 80102e2:	4b10      	ldr	r3, [pc, #64]	; (8010324 <init_lwip+0x74>)
 80102e4:	9302      	str	r3, [sp, #8]
 80102e6:	4b10      	ldr	r3, [pc, #64]	; (8010328 <init_lwip+0x78>)
 80102e8:	9301      	str	r3, [sp, #4]
 80102ea:	2300      	movs	r3, #0
 80102ec:	9300      	str	r3, [sp, #0]
 80102ee:	0023      	movs	r3, r4
 80102f0:	f7f6 f9ce 	bl	8006690 <netif_add>
 80102f4:	0003      	movs	r3, r0
 80102f6:	607b      	str	r3, [r7, #4]
    netif_set_default(netif);
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	0018      	movs	r0, r3
 80102fc:	f7f6 faa6 	bl	800684c <netif_set_default>

    stmr_add(&tcp_timer);
 8010300:	4b0a      	ldr	r3, [pc, #40]	; (801032c <init_lwip+0x7c>)
 8010302:	0018      	movs	r0, r3
 8010304:	f000 f9ca 	bl	801069c <stmr_add>
}
 8010308:	46c0      	nop			; (mov r8, r8)
 801030a:	46bd      	mov	sp, r7
 801030c:	b003      	add	sp, #12
 801030e:	bd90      	pop	{r4, r7, pc}
 8010310:	20002814 	.word	0x20002814
 8010314:	2000001c 	.word	0x2000001c
 8010318:	20002844 	.word	0x20002844
 801031c:	20000028 	.word	0x20000028
 8010320:	20000024 	.word	0x20000024
 8010324:	0800dac9 	.word	0x0800dac9
 8010328:	08010265 	.word	0x08010265
 801032c:	20000080 	.word	0x20000080

08010330 <dns_query_proc>:


bool dns_query_proc(const char *name, ip_addr_t *addr)
{
 8010330:	b580      	push	{r7, lr}
 8010332:	b082      	sub	sp, #8
 8010334:	af00      	add	r7, sp, #0
 8010336:	6078      	str	r0, [r7, #4]
 8010338:	6039      	str	r1, [r7, #0]
    if (strcmp(name, "run.stm") == 0 || strcmp(name, "www.run.stm") == 0)
 801033a:	4a0d      	ldr	r2, [pc, #52]	; (8010370 <dns_query_proc+0x40>)
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	0011      	movs	r1, r2
 8010340:	0018      	movs	r0, r3
 8010342:	f7ef fee1 	bl	8000108 <strcmp>
 8010346:	1e03      	subs	r3, r0, #0
 8010348:	d007      	beq.n	801035a <dns_query_proc+0x2a>
 801034a:	4a0a      	ldr	r2, [pc, #40]	; (8010374 <dns_query_proc+0x44>)
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	0011      	movs	r1, r2
 8010350:	0018      	movs	r0, r3
 8010352:	f7ef fed9 	bl	8000108 <strcmp>
 8010356:	1e03      	subs	r3, r0, #0
 8010358:	d105      	bne.n	8010366 <dns_query_proc+0x36>
    {
        addr->addr = *(uint32_t *)ipaddr;
 801035a:	4b07      	ldr	r3, [pc, #28]	; (8010378 <dns_query_proc+0x48>)
 801035c:	681a      	ldr	r2, [r3, #0]
 801035e:	683b      	ldr	r3, [r7, #0]
 8010360:	601a      	str	r2, [r3, #0]
        return true;
 8010362:	2301      	movs	r3, #1
 8010364:	e000      	b.n	8010368 <dns_query_proc+0x38>
    }
    return false;
 8010366:	2300      	movs	r3, #0
}
 8010368:	0018      	movs	r0, r3
 801036a:	46bd      	mov	sp, r7
 801036c:	b002      	add	sp, #8
 801036e:	bd80      	pop	{r7, pc}
 8010370:	08012a10 	.word	0x08012a10
 8010374:	08012a18 	.word	0x08012a18
 8010378:	20000024 	.word	0x20000024

0801037c <state_cgi_handler>:



const char *state_cgi_handler(int index, int n_params, char *params[], char *values[])
{
 801037c:	b580      	push	{r7, lr}
 801037e:	b084      	sub	sp, #16
 8010380:	af00      	add	r7, sp, #0
 8010382:	60f8      	str	r0, [r7, #12]
 8010384:	60b9      	str	r1, [r7, #8]
 8010386:	607a      	str	r2, [r7, #4]
 8010388:	603b      	str	r3, [r7, #0]
    return "/state.shtml";
 801038a:	4b02      	ldr	r3, [pc, #8]	; (8010394 <state_cgi_handler+0x18>)
}
 801038c:	0018      	movs	r0, r3
 801038e:	46bd      	mov	sp, r7
 8010390:	b004      	add	sp, #16
 8010392:	bd80      	pop	{r7, pc}
 8010394:	08012a24 	.word	0x08012a24

08010398 <ctl_cgi_handler>:
bool alpha = false;
bool bravo = false;
bool charlie = false;

const char *ctl_cgi_handler(int index, int n_params, char *params[], char *values[])
{
 8010398:	b580      	push	{r7, lr}
 801039a:	b086      	sub	sp, #24
 801039c:	af00      	add	r7, sp, #0
 801039e:	60f8      	str	r0, [r7, #12]
 80103a0:	60b9      	str	r1, [r7, #8]
 80103a2:	607a      	str	r2, [r7, #4]
 80103a4:	603b      	str	r3, [r7, #0]
    int i;
    for (i = 0; i < n_params; i++)
 80103a6:	2300      	movs	r3, #0
 80103a8:	617b      	str	r3, [r7, #20]
 80103aa:	e04a      	b.n	8010442 <ctl_cgi_handler+0xaa>
    {
        if (strcmp(params[i], "a") == 0) alpha = *values[i] == '1';
 80103ac:	697b      	ldr	r3, [r7, #20]
 80103ae:	009b      	lsls	r3, r3, #2
 80103b0:	687a      	ldr	r2, [r7, #4]
 80103b2:	18d3      	adds	r3, r2, r3
 80103b4:	681b      	ldr	r3, [r3, #0]
 80103b6:	4a27      	ldr	r2, [pc, #156]	; (8010454 <ctl_cgi_handler+0xbc>)
 80103b8:	0011      	movs	r1, r2
 80103ba:	0018      	movs	r0, r3
 80103bc:	f7ef fea4 	bl	8000108 <strcmp>
 80103c0:	1e03      	subs	r3, r0, #0
 80103c2:	d10b      	bne.n	80103dc <ctl_cgi_handler+0x44>
 80103c4:	697b      	ldr	r3, [r7, #20]
 80103c6:	009b      	lsls	r3, r3, #2
 80103c8:	683a      	ldr	r2, [r7, #0]
 80103ca:	18d3      	adds	r3, r2, r3
 80103cc:	681b      	ldr	r3, [r3, #0]
 80103ce:	781b      	ldrb	r3, [r3, #0]
 80103d0:	3b31      	subs	r3, #49	; 0x31
 80103d2:	425a      	negs	r2, r3
 80103d4:	4153      	adcs	r3, r2
 80103d6:	b2da      	uxtb	r2, r3
 80103d8:	4b1f      	ldr	r3, [pc, #124]	; (8010458 <ctl_cgi_handler+0xc0>)
 80103da:	701a      	strb	r2, [r3, #0]
        if (strcmp(params[i], "b") == 0) bravo = *values[i] == '1';
 80103dc:	697b      	ldr	r3, [r7, #20]
 80103de:	009b      	lsls	r3, r3, #2
 80103e0:	687a      	ldr	r2, [r7, #4]
 80103e2:	18d3      	adds	r3, r2, r3
 80103e4:	681b      	ldr	r3, [r3, #0]
 80103e6:	4a1d      	ldr	r2, [pc, #116]	; (801045c <ctl_cgi_handler+0xc4>)
 80103e8:	0011      	movs	r1, r2
 80103ea:	0018      	movs	r0, r3
 80103ec:	f7ef fe8c 	bl	8000108 <strcmp>
 80103f0:	1e03      	subs	r3, r0, #0
 80103f2:	d10b      	bne.n	801040c <ctl_cgi_handler+0x74>
 80103f4:	697b      	ldr	r3, [r7, #20]
 80103f6:	009b      	lsls	r3, r3, #2
 80103f8:	683a      	ldr	r2, [r7, #0]
 80103fa:	18d3      	adds	r3, r2, r3
 80103fc:	681b      	ldr	r3, [r3, #0]
 80103fe:	781b      	ldrb	r3, [r3, #0]
 8010400:	3b31      	subs	r3, #49	; 0x31
 8010402:	425a      	negs	r2, r3
 8010404:	4153      	adcs	r3, r2
 8010406:	b2da      	uxtb	r2, r3
 8010408:	4b15      	ldr	r3, [pc, #84]	; (8010460 <ctl_cgi_handler+0xc8>)
 801040a:	701a      	strb	r2, [r3, #0]
        if (strcmp(params[i], "c") == 0) charlie = *values[i] == '1';
 801040c:	697b      	ldr	r3, [r7, #20]
 801040e:	009b      	lsls	r3, r3, #2
 8010410:	687a      	ldr	r2, [r7, #4]
 8010412:	18d3      	adds	r3, r2, r3
 8010414:	681b      	ldr	r3, [r3, #0]
 8010416:	4a13      	ldr	r2, [pc, #76]	; (8010464 <ctl_cgi_handler+0xcc>)
 8010418:	0011      	movs	r1, r2
 801041a:	0018      	movs	r0, r3
 801041c:	f7ef fe74 	bl	8000108 <strcmp>
 8010420:	1e03      	subs	r3, r0, #0
 8010422:	d10b      	bne.n	801043c <ctl_cgi_handler+0xa4>
 8010424:	697b      	ldr	r3, [r7, #20]
 8010426:	009b      	lsls	r3, r3, #2
 8010428:	683a      	ldr	r2, [r7, #0]
 801042a:	18d3      	adds	r3, r2, r3
 801042c:	681b      	ldr	r3, [r3, #0]
 801042e:	781b      	ldrb	r3, [r3, #0]
 8010430:	3b31      	subs	r3, #49	; 0x31
 8010432:	425a      	negs	r2, r3
 8010434:	4153      	adcs	r3, r2
 8010436:	b2da      	uxtb	r2, r3
 8010438:	4b0b      	ldr	r3, [pc, #44]	; (8010468 <ctl_cgi_handler+0xd0>)
 801043a:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < n_params; i++)
 801043c:	697b      	ldr	r3, [r7, #20]
 801043e:	3301      	adds	r3, #1
 8010440:	617b      	str	r3, [r7, #20]
 8010442:	697a      	ldr	r2, [r7, #20]
 8010444:	68bb      	ldr	r3, [r7, #8]
 8010446:	429a      	cmp	r2, r3
 8010448:	dbb0      	blt.n	80103ac <ctl_cgi_handler+0x14>
    }

    return "/state.shtml";
 801044a:	4b08      	ldr	r3, [pc, #32]	; (801046c <ctl_cgi_handler+0xd4>)
}
 801044c:	0018      	movs	r0, r3
 801044e:	46bd      	mov	sp, r7
 8010450:	b006      	add	sp, #24
 8010452:	bd80      	pop	{r7, pc}
 8010454:	08012a34 	.word	0x08012a34
 8010458:	2000284c 	.word	0x2000284c
 801045c:	08012a38 	.word	0x08012a38
 8010460:	2000284d 	.word	0x2000284d
 8010464:	08012a3c 	.word	0x08012a3c
 8010468:	2000284e 	.word	0x2000284e
 801046c:	08012a24 	.word	0x08012a24

08010470 <ssi_handler>:
    { "/state.cgi", state_cgi_handler },
    { "/ctl.cgi",   ctl_cgi_handler },
};

static u16_t ssi_handler(int index, char *insert, int ins_len)
{
 8010470:	b590      	push	{r4, r7, lr}
 8010472:	b087      	sub	sp, #28
 8010474:	af00      	add	r7, sp, #0
 8010476:	60f8      	str	r0, [r7, #12]
 8010478:	60b9      	str	r1, [r7, #8]
 801047a:	607a      	str	r2, [r7, #4]
    int res;

    if (ins_len < 32) return 0;
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	2b1f      	cmp	r3, #31
 8010480:	dc01      	bgt.n	8010486 <ssi_handler+0x16>
 8010482:	2300      	movs	r3, #0
 8010484:	e034      	b.n	80104f0 <ssi_handler+0x80>

    switch (index)
 8010486:	68fb      	ldr	r3, [r7, #12]
 8010488:	2b01      	cmp	r3, #1
 801048a:	d014      	beq.n	80104b6 <ssi_handler+0x46>
 801048c:	dc02      	bgt.n	8010494 <ssi_handler+0x24>
 801048e:	2b00      	cmp	r3, #0
 8010490:	d005      	beq.n	801049e <ssi_handler+0x2e>
 8010492:	e02b      	b.n	80104ec <ssi_handler+0x7c>
 8010494:	2b02      	cmp	r3, #2
 8010496:	d017      	beq.n	80104c8 <ssi_handler+0x58>
 8010498:	2b03      	cmp	r3, #3
 801049a:	d01e      	beq.n	80104da <ssi_handler+0x6a>
 801049c:	e026      	b.n	80104ec <ssi_handler+0x7c>
    {
    case 0: /* systick */
        res = snprintf(insert, ins_len, "%u", (unsigned)mtime());
 801049e:	687c      	ldr	r4, [r7, #4]
 80104a0:	f000 f8a0 	bl	80105e4 <mtime>
 80104a4:	0003      	movs	r3, r0
 80104a6:	4a14      	ldr	r2, [pc, #80]	; (80104f8 <ssi_handler+0x88>)
 80104a8:	68b8      	ldr	r0, [r7, #8]
 80104aa:	0021      	movs	r1, r4
 80104ac:	f001 fde4 	bl	8012078 <sniprintf>
 80104b0:	0003      	movs	r3, r0
 80104b2:	617b      	str	r3, [r7, #20]
        break;
 80104b4:	e01a      	b.n	80104ec <ssi_handler+0x7c>
    case 1: /* alpha */
        *insert = '0' + (alpha & 1);
 80104b6:	4b11      	ldr	r3, [pc, #68]	; (80104fc <ssi_handler+0x8c>)
 80104b8:	781b      	ldrb	r3, [r3, #0]
 80104ba:	3330      	adds	r3, #48	; 0x30
 80104bc:	b2da      	uxtb	r2, r3
 80104be:	68bb      	ldr	r3, [r7, #8]
 80104c0:	701a      	strb	r2, [r3, #0]
        res = 1;
 80104c2:	2301      	movs	r3, #1
 80104c4:	617b      	str	r3, [r7, #20]
        break;
 80104c6:	e011      	b.n	80104ec <ssi_handler+0x7c>
    case 2: /* bravo */
        *insert = '0' + (bravo & 1);
 80104c8:	4b0d      	ldr	r3, [pc, #52]	; (8010500 <ssi_handler+0x90>)
 80104ca:	781b      	ldrb	r3, [r3, #0]
 80104cc:	3330      	adds	r3, #48	; 0x30
 80104ce:	b2da      	uxtb	r2, r3
 80104d0:	68bb      	ldr	r3, [r7, #8]
 80104d2:	701a      	strb	r2, [r3, #0]
        res = 1;
 80104d4:	2301      	movs	r3, #1
 80104d6:	617b      	str	r3, [r7, #20]
        break;
 80104d8:	e008      	b.n	80104ec <ssi_handler+0x7c>
    case 3: /* charlie */
        *insert = '0' + (charlie & 1);
 80104da:	4b0a      	ldr	r3, [pc, #40]	; (8010504 <ssi_handler+0x94>)
 80104dc:	781b      	ldrb	r3, [r3, #0]
 80104de:	3330      	adds	r3, #48	; 0x30
 80104e0:	b2da      	uxtb	r2, r3
 80104e2:	68bb      	ldr	r3, [r7, #8]
 80104e4:	701a      	strb	r2, [r3, #0]
        res = 1;
 80104e6:	2301      	movs	r3, #1
 80104e8:	617b      	str	r3, [r7, #20]
        break;
 80104ea:	46c0      	nop			; (mov r8, r8)
    }

    return res;
 80104ec:	697b      	ldr	r3, [r7, #20]
 80104ee:	b29b      	uxth	r3, r3
}
 80104f0:	0018      	movs	r0, r3
 80104f2:	46bd      	mov	sp, r7
 80104f4:	b007      	add	sp, #28
 80104f6:	bd90      	pop	{r4, r7, pc}
 80104f8:	08012a78 	.word	0x08012a78
 80104fc:	2000284c 	.word	0x2000284c
 8010500:	2000284d 	.word	0x2000284d
 8010504:	2000284e 	.word	0x2000284e

08010508 <service_traffic>:

static void service_traffic(void)
{
 8010508:	b580      	push	{r7, lr}
 801050a:	b082      	sub	sp, #8
 801050c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 801050e:	b672      	cpsid	i
  struct pbuf *frame;

  /* retrieve and clear var set by usb_ecm_recv_callback() in ISR */
  __disable_irq();
  frame = received_frame;
 8010510:	4b0d      	ldr	r3, [pc, #52]	; (8010548 <service_traffic+0x40>)
 8010512:	681b      	ldr	r3, [r3, #0]
 8010514:	607b      	str	r3, [r7, #4]
  received_frame = NULL;
 8010516:	4b0c      	ldr	r3, [pc, #48]	; (8010548 <service_traffic+0x40>)
 8010518:	2200      	movs	r2, #0
 801051a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 801051c:	b662      	cpsie	i
  __enable_irq();

  if (!frame)
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	2b00      	cmp	r3, #0
 8010522:	d00c      	beq.n	801053e <service_traffic+0x36>
    return; /* no packet was received */

  /* packet was received, so handle it */
  ethernet_input(frame, &netif_data);
 8010524:	4a09      	ldr	r2, [pc, #36]	; (801054c <service_traffic+0x44>)
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	0011      	movs	r1, r2
 801052a:	0018      	movs	r0, r3
 801052c:	f7ff fd82 	bl	8010034 <ethernet_input>
  pbuf_free(frame);
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	0018      	movs	r0, r3
 8010534:	f7f6 fc2e 	bl	8006d94 <pbuf_free>

  /* tell usbd_ecm.c it is OK to receive another packet */
  usb_ecm_recv_renew();
 8010538:	f001 faca 	bl	8011ad0 <usb_ecm_recv_renew>
 801053c:	e000      	b.n	8010540 <service_traffic+0x38>
    return; /* no packet was received */
 801053e:	46c0      	nop			; (mov r8, r8)
}
 8010540:	46bd      	mov	sp, r7
 8010542:	b002      	add	sp, #8
 8010544:	bd80      	pop	{r7, pc}
 8010546:	46c0      	nop			; (mov r8, r8)
 8010548:	20002848 	.word	0x20002848
 801054c:	20002814 	.word	0x20002814

08010550 <ecm_main_init>:

void ecm_main_init()
{
 8010550:	b580      	push	{r7, lr}
 8010552:	af00      	add	r7, sp, #0
	  time_init();
 8010554:	f000 f841 	bl	80105da <time_init>
	  init_lwip();
 8010558:	f7ff feaa 	bl	80102b0 <init_lwip>

	  while (!netif_is_up(&netif_data));
 801055c:	46c0      	nop			; (mov r8, r8)
 801055e:	4b13      	ldr	r3, [pc, #76]	; (80105ac <ecm_main_init+0x5c>)
 8010560:	2229      	movs	r2, #41	; 0x29
 8010562:	5c9b      	ldrb	r3, [r3, r2]
 8010564:	001a      	movs	r2, r3
 8010566:	2301      	movs	r3, #1
 8010568:	4013      	ands	r3, r2
 801056a:	d0f8      	beq.n	801055e <ecm_main_init+0xe>

	  while (dhserv_init(&dhcp_config) != ERR_OK);
 801056c:	46c0      	nop			; (mov r8, r8)
 801056e:	4b10      	ldr	r3, [pc, #64]	; (80105b0 <ecm_main_init+0x60>)
 8010570:	0018      	movs	r0, r3
 8010572:	f7f3 fdc1 	bl	80040f8 <dhserv_init>
 8010576:	1e03      	subs	r3, r0, #0
 8010578:	d1f9      	bne.n	801056e <ecm_main_init+0x1e>

	  while (dnserv_init(PADDR(ipaddr), 53, dns_query_proc) != ERR_OK);
 801057a:	46c0      	nop			; (mov r8, r8)
 801057c:	4a0d      	ldr	r2, [pc, #52]	; (80105b4 <ecm_main_init+0x64>)
 801057e:	4b0e      	ldr	r3, [pc, #56]	; (80105b8 <ecm_main_init+0x68>)
 8010580:	2135      	movs	r1, #53	; 0x35
 8010582:	0018      	movs	r0, r3
 8010584:	f7f4 f816 	bl	80045b4 <dnserv_init>
 8010588:	1e03      	subs	r3, r0, #0
 801058a:	d1f7      	bne.n	801057c <ecm_main_init+0x2c>

	  http_set_cgi_handlers(cgi_uri_table, sizeof(cgi_uri_table) / sizeof(*cgi_uri_table));
 801058c:	4b0b      	ldr	r3, [pc, #44]	; (80105bc <ecm_main_init+0x6c>)
 801058e:	2102      	movs	r1, #2
 8010590:	0018      	movs	r0, r3
 8010592:	f7f5 fba3 	bl	8005cdc <http_set_cgi_handlers>
	  http_set_ssi_handler(ssi_handler, ssi_tags_table, sizeof(ssi_tags_table) / sizeof(*ssi_tags_table));
 8010596:	490a      	ldr	r1, [pc, #40]	; (80105c0 <ecm_main_init+0x70>)
 8010598:	4b0a      	ldr	r3, [pc, #40]	; (80105c4 <ecm_main_init+0x74>)
 801059a:	2204      	movs	r2, #4
 801059c:	0018      	movs	r0, r3
 801059e:	f7f5 fb83 	bl	8005ca8 <http_set_ssi_handler>
	  httpd_init();
 80105a2:	f7f5 fb75 	bl	8005c90 <httpd_init>
}
 80105a6:	46c0      	nop			; (mov r8, r8)
 80105a8:	46bd      	mov	sp, r7
 80105aa:	bd80      	pop	{r7, pc}
 80105ac:	20002814 	.word	0x20002814
 80105b0:	20000068 	.word	0x20000068
 80105b4:	08010331 	.word	0x08010331
 80105b8:	20000024 	.word	0x20000024
 80105bc:	0801ca60 	.word	0x0801ca60
 80105c0:	20000098 	.word	0x20000098
 80105c4:	08010471 	.word	0x08010471

080105c8 <ecm_main_loop>:

void ecm_main_loop()
{
 80105c8:	b580      	push	{r7, lr}
 80105ca:	af00      	add	r7, sp, #0
	service_traffic();
 80105cc:	f7ff ff9c 	bl	8010508 <service_traffic>
	stmr();
 80105d0:	f000 f82e 	bl	8010630 <stmr>
}
 80105d4:	46c0      	nop			; (mov r8, r8)
 80105d6:	46bd      	mov	sp, r7
 80105d8:	bd80      	pop	{r7, pc}

080105da <time_init>:

volatile uint32_t sysTimeTicks;
volatile uint32_t sysTimeDelayCounter;

void time_init(void)
{
 80105da:	b580      	push	{r7, lr}
 80105dc:	af00      	add	r7, sp, #0
//    if (SysTick_Config(SystemCoreClock / 1000))
//        while (1) {} /* Capture error */
}
 80105de:	46c0      	nop			; (mov r8, r8)
 80105e0:	46bd      	mov	sp, r7
 80105e2:	bd80      	pop	{r7, pc}

080105e4 <mtime>:
  //  msAddition++; /* +1 ms */
//}


uint32_t mtime(void)
{
 80105e4:	b580      	push	{r7, lr}
 80105e6:	af00      	add	r7, sp, #0
    res = msAddition;
    ctrl = SysTick->CTRL;
    if (ctrl & SysTick_CTRL_COUNTFLAG_Msk)
        goto read;
	*/
    return HAL_GetTick();
 80105e8:	f7f0 f898 	bl	800071c <HAL_GetTick>
 80105ec:	0003      	movs	r3, r0
}
 80105ee:	0018      	movs	r0, r3
 80105f0:	46bd      	mov	sp, r7
 80105f2:	bd80      	pop	{r7, pc}

080105f4 <msleep>:

void msleep(int ms)
{
 80105f4:	b580      	push	{r7, lr}
 80105f6:	b084      	sub	sp, #16
 80105f8:	af00      	add	r7, sp, #0
 80105fa:	6078      	str	r0, [r7, #4]
    uint32_t t = mtime();
 80105fc:	f7ff fff2 	bl	80105e4 <mtime>
 8010600:	0003      	movs	r3, r0
 8010602:	60fb      	str	r3, [r7, #12]
    while (true)
    {
        uint32_t t1 = mtime();
 8010604:	f7ff ffee 	bl	80105e4 <mtime>
 8010608:	0003      	movs	r3, r0
 801060a:	60bb      	str	r3, [r7, #8]
        if (t1 - t >= ms) break;
 801060c:	68ba      	ldr	r2, [r7, #8]
 801060e:	68fb      	ldr	r3, [r7, #12]
 8010610:	1ad2      	subs	r2, r2, r3
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	429a      	cmp	r2, r3
 8010616:	d204      	bcs.n	8010622 <msleep+0x2e>
        if (t1 < t) break; /* overflow */
 8010618:	68ba      	ldr	r2, [r7, #8]
 801061a:	68fb      	ldr	r3, [r7, #12]
 801061c:	429a      	cmp	r2, r3
 801061e:	d302      	bcc.n	8010626 <msleep+0x32>
    {
 8010620:	e7f0      	b.n	8010604 <msleep+0x10>
        if (t1 - t >= ms) break;
 8010622:	46c0      	nop			; (mov r8, r8)
 8010624:	e000      	b.n	8010628 <msleep+0x34>
        if (t1 < t) break; /* overflow */
 8010626:	46c0      	nop			; (mov r8, r8)
    }
}
 8010628:	46c0      	nop			; (mov r8, r8)
 801062a:	46bd      	mov	sp, r7
 801062c:	b004      	add	sp, #16
 801062e:	bd80      	pop	{r7, pc}

08010630 <stmr>:

static stmr_t *stmrs = NULL;

void stmr(void)
{
 8010630:	b580      	push	{r7, lr}
 8010632:	b084      	sub	sp, #16
 8010634:	af00      	add	r7, sp, #0
    stmr_t *tmr;
    uint32_t time;
    time = mtime();
 8010636:	f7ff ffd5 	bl	80105e4 <mtime>
 801063a:	0003      	movs	r3, r0
 801063c:	60bb      	str	r3, [r7, #8]
    tmr = stmrs;
 801063e:	4b16      	ldr	r3, [pc, #88]	; (8010698 <stmr+0x68>)
 8010640:	681b      	ldr	r3, [r3, #0]
 8010642:	60fb      	str	r3, [r7, #12]
    while (tmr != NULL)
 8010644:	e021      	b.n	801068a <stmr+0x5a>
    {
        stmr_t *t;
        uint32_t elapsed;
        t = tmr;
 8010646:	68fb      	ldr	r3, [r7, #12]
 8010648:	607b      	str	r3, [r7, #4]
        tmr = tmr->next;
 801064a:	68fb      	ldr	r3, [r7, #12]
 801064c:	695b      	ldr	r3, [r3, #20]
 801064e:	60fb      	str	r3, [r7, #12]
        if ((t->flags & STMR_ACTIVE) == 0)
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	689b      	ldr	r3, [r3, #8]
 8010654:	2201      	movs	r2, #1
 8010656:	4013      	ands	r3, r2
 8010658:	d100      	bne.n	801065c <stmr+0x2c>
            continue;
 801065a:	e016      	b.n	801068a <stmr+0x5a>
        elapsed = time;
 801065c:	68bb      	ldr	r3, [r7, #8]
 801065e:	603b      	str	r3, [r7, #0]
        elapsed -= t->event;
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	685b      	ldr	r3, [r3, #4]
 8010664:	683a      	ldr	r2, [r7, #0]
 8010666:	1ad3      	subs	r3, r2, r3
 8010668:	603b      	str	r3, [r7, #0]
        if (elapsed < t->period)
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	681b      	ldr	r3, [r3, #0]
 801066e:	683a      	ldr	r2, [r7, #0]
 8010670:	429a      	cmp	r2, r3
 8010672:	d200      	bcs.n	8010676 <stmr+0x46>
            continue;
 8010674:	e009      	b.n	801068a <stmr+0x5a>
        t->proc(t);
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	691b      	ldr	r3, [r3, #16]
 801067a:	687a      	ldr	r2, [r7, #4]
 801067c:	0010      	movs	r0, r2
 801067e:	4798      	blx	r3
        t->event = mtime();
 8010680:	f7ff ffb0 	bl	80105e4 <mtime>
 8010684:	0002      	movs	r2, r0
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	605a      	str	r2, [r3, #4]
    while (tmr != NULL)
 801068a:	68fb      	ldr	r3, [r7, #12]
 801068c:	2b00      	cmp	r3, #0
 801068e:	d1da      	bne.n	8010646 <stmr+0x16>
    }
}
 8010690:	46c0      	nop			; (mov r8, r8)
 8010692:	46bd      	mov	sp, r7
 8010694:	b004      	add	sp, #16
 8010696:	bd80      	pop	{r7, pc}
 8010698:	20002850 	.word	0x20002850

0801069c <stmr_add>:
    tmr->next = stmrs;
    stmrs = tmr;
}

void stmr_add(stmr_t *tmr)
{
 801069c:	b580      	push	{r7, lr}
 801069e:	b082      	sub	sp, #8
 80106a0:	af00      	add	r7, sp, #0
 80106a2:	6078      	str	r0, [r7, #4]
    tmr->next = stmrs;
 80106a4:	4b05      	ldr	r3, [pc, #20]	; (80106bc <stmr_add+0x20>)
 80106a6:	681a      	ldr	r2, [r3, #0]
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	615a      	str	r2, [r3, #20]
    stmrs = tmr;
 80106ac:	4b03      	ldr	r3, [pc, #12]	; (80106bc <stmr_add+0x20>)
 80106ae:	687a      	ldr	r2, [r7, #4]
 80106b0:	601a      	str	r2, [r3, #0]
}
 80106b2:	46c0      	nop			; (mov r8, r8)
 80106b4:	46bd      	mov	sp, r7
 80106b6:	b002      	add	sp, #8
 80106b8:	bd80      	pop	{r7, pc}
 80106ba:	46c0      	nop			; (mov r8, r8)
 80106bc:	20002850 	.word	0x20002850

080106c0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80106c0:	b580      	push	{r7, lr}
 80106c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &VCP_Desc, 0) != USBD_OK)
 80106c4:	4913      	ldr	r1, [pc, #76]	; (8010714 <MX_USB_DEVICE_Init+0x54>)
 80106c6:	4b14      	ldr	r3, [pc, #80]	; (8010718 <MX_USB_DEVICE_Init+0x58>)
 80106c8:	2200      	movs	r2, #0
 80106ca:	0018      	movs	r0, r3
 80106cc:	f000 fa5b 	bl	8010b86 <USBD_Init>
 80106d0:	1e03      	subs	r3, r0, #0
 80106d2:	d001      	beq.n	80106d8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80106d4:	f7ef ff1c 	bl	8000510 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_ECM) != USBD_OK)
 80106d8:	4a10      	ldr	r2, [pc, #64]	; (801071c <MX_USB_DEVICE_Init+0x5c>)
 80106da:	4b0f      	ldr	r3, [pc, #60]	; (8010718 <MX_USB_DEVICE_Init+0x58>)
 80106dc:	0011      	movs	r1, r2
 80106de:	0018      	movs	r0, r3
 80106e0:	f000 fa82 	bl	8010be8 <USBD_RegisterClass>
 80106e4:	1e03      	subs	r3, r0, #0
 80106e6:	d001      	beq.n	80106ec <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 80106e8:	f7ef ff12 	bl	8000510 <Error_Handler>
  }
  if (USBD_ECM_RegisterInterface(&hUsbDeviceFS) != USBD_OK)
 80106ec:	4b0a      	ldr	r3, [pc, #40]	; (8010718 <MX_USB_DEVICE_Init+0x58>)
 80106ee:	0018      	movs	r0, r3
 80106f0:	f001 fb6e 	bl	8011dd0 <USBD_ECM_RegisterInterface>
 80106f4:	1e03      	subs	r3, r0, #0
 80106f6:	d001      	beq.n	80106fc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80106f8:	f7ef ff0a 	bl	8000510 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80106fc:	4b06      	ldr	r3, [pc, #24]	; (8010718 <MX_USB_DEVICE_Init+0x58>)
 80106fe:	0018      	movs	r0, r3
 8010700:	f000 fa93 	bl	8010c2a <USBD_Start>
 8010704:	1e03      	subs	r3, r0, #0
 8010706:	d001      	beq.n	801070c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8010708:	f7ef ff02 	bl	8000510 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801070c:	46c0      	nop			; (mov r8, r8)
 801070e:	46bd      	mov	sp, r7
 8010710:	bd80      	pop	{r7, pc}
 8010712:	46c0      	nop			; (mov r8, r8)
 8010714:	0801ca98 	.word	0x0801ca98
 8010718:	20003558 	.word	0x20003558
 801071c:	0801cb14 	.word	0x0801cb14

08010720 <HAL_PCD_MspInit>:
  */
#ifndef GPIO_SPEED_HIGH
#define GPIO_SPEED_HIGH GPIO_SPEED_FREQ_HIGH
#endif
void HAL_PCD_MspInit(PCD_HandleTypeDef *hpcd)
{
 8010720:	b580      	push	{r7, lr}
 8010722:	b08a      	sub	sp, #40	; 0x28
 8010724:	af00      	add	r7, sp, #0
 8010726:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIOA clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8010728:	4b1f      	ldr	r3, [pc, #124]	; (80107a8 <HAL_PCD_MspInit+0x88>)
 801072a:	695a      	ldr	r2, [r3, #20]
 801072c:	4b1e      	ldr	r3, [pc, #120]	; (80107a8 <HAL_PCD_MspInit+0x88>)
 801072e:	2180      	movs	r1, #128	; 0x80
 8010730:	0289      	lsls	r1, r1, #10
 8010732:	430a      	orrs	r2, r1
 8010734:	615a      	str	r2, [r3, #20]
 8010736:	4b1c      	ldr	r3, [pc, #112]	; (80107a8 <HAL_PCD_MspInit+0x88>)
 8010738:	695a      	ldr	r2, [r3, #20]
 801073a:	2380      	movs	r3, #128	; 0x80
 801073c:	029b      	lsls	r3, r3, #10
 801073e:	4013      	ands	r3, r2
 8010740:	613b      	str	r3, [r7, #16]
 8010742:	693b      	ldr	r3, [r7, #16]
  
  /* Configure USB DM and DP pins.
     This is optional, and maintained only for user guidance. */
  GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
 8010744:	2114      	movs	r1, #20
 8010746:	187b      	adds	r3, r7, r1
 8010748:	22c0      	movs	r2, #192	; 0xc0
 801074a:	0152      	lsls	r2, r2, #5
 801074c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801074e:	187b      	adds	r3, r7, r1
 8010750:	2202      	movs	r2, #2
 8010752:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010754:	187b      	adds	r3, r7, r1
 8010756:	2200      	movs	r2, #0
 8010758:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 801075a:	187b      	adds	r3, r7, r1
 801075c:	2203      	movs	r2, #3
 801075e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF2_USB;
 8010760:	187b      	adds	r3, r7, r1
 8010762:	2202      	movs	r2, #2
 8010764:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 8010766:	187a      	adds	r2, r7, r1
 8010768:	2390      	movs	r3, #144	; 0x90
 801076a:	05db      	lsls	r3, r3, #23
 801076c:	0011      	movs	r1, r2
 801076e:	0018      	movs	r0, r3
 8010770:	f7f0 f8bc 	bl	80008ec <HAL_GPIO_Init>
  
  /* Enable USB FS Clock */
  __HAL_RCC_USB_CLK_ENABLE();
 8010774:	4b0c      	ldr	r3, [pc, #48]	; (80107a8 <HAL_PCD_MspInit+0x88>)
 8010776:	69da      	ldr	r2, [r3, #28]
 8010778:	4b0b      	ldr	r3, [pc, #44]	; (80107a8 <HAL_PCD_MspInit+0x88>)
 801077a:	2180      	movs	r1, #128	; 0x80
 801077c:	0409      	lsls	r1, r1, #16
 801077e:	430a      	orrs	r2, r1
 8010780:	61da      	str	r2, [r3, #28]
 8010782:	4b09      	ldr	r3, [pc, #36]	; (80107a8 <HAL_PCD_MspInit+0x88>)
 8010784:	69da      	ldr	r2, [r3, #28]
 8010786:	2380      	movs	r3, #128	; 0x80
 8010788:	041b      	lsls	r3, r3, #16
 801078a:	4013      	ands	r3, r2
 801078c:	60fb      	str	r3, [r7, #12]
 801078e:	68fb      	ldr	r3, [r7, #12]
  
  /* Set USB FS Interrupt priority */
  HAL_NVIC_SetPriority(USB_IRQn, 3 /* hard-coded: customize if needed */, 0);
 8010790:	2200      	movs	r2, #0
 8010792:	2103      	movs	r1, #3
 8010794:	201f      	movs	r0, #31
 8010796:	f7f0 f877 	bl	8000888 <HAL_NVIC_SetPriority>
  
  /* Enable USB FS Interrupt */
  HAL_NVIC_EnableIRQ(USB_IRQn);
 801079a:	201f      	movs	r0, #31
 801079c:	f7f0 f889 	bl	80008b2 <HAL_NVIC_EnableIRQ>
}
 80107a0:	46c0      	nop			; (mov r8, r8)
 80107a2:	46bd      	mov	sp, r7
 80107a4:	b00a      	add	sp, #40	; 0x28
 80107a6:	bd80      	pop	{r7, pc}
 80107a8:	40021000 	.word	0x40021000

080107ac <HAL_PCD_SetupStageCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 80107ac:	b580      	push	{r7, lr}
 80107ae:	b082      	sub	sp, #8
 80107b0:	af00      	add	r7, sp, #0
 80107b2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage(hpcd->pData, (uint8_t *)hpcd->Setup);
 80107b4:	687a      	ldr	r2, [r7, #4]
 80107b6:	239c      	movs	r3, #156	; 0x9c
 80107b8:	009b      	lsls	r3, r3, #2
 80107ba:	58d2      	ldr	r2, [r2, r3]
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	218c      	movs	r1, #140	; 0x8c
 80107c0:	0089      	lsls	r1, r1, #2
 80107c2:	468c      	mov	ip, r1
 80107c4:	4463      	add	r3, ip
 80107c6:	0019      	movs	r1, r3
 80107c8:	0010      	movs	r0, r2
 80107ca:	f000 fa79 	bl	8010cc0 <USBD_LL_SetupStage>
}
 80107ce:	46c0      	nop			; (mov r8, r8)
 80107d0:	46bd      	mov	sp, r7
 80107d2:	b002      	add	sp, #8
 80107d4:	bd80      	pop	{r7, pc}

080107d6 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80107d6:	b580      	push	{r7, lr}
 80107d8:	b082      	sub	sp, #8
 80107da:	af00      	add	r7, sp, #0
 80107dc:	6078      	str	r0, [r7, #4]
 80107de:	000a      	movs	r2, r1
 80107e0:	1cfb      	adds	r3, r7, #3
 80107e2:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage(hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80107e4:	687a      	ldr	r2, [r7, #4]
 80107e6:	239c      	movs	r3, #156	; 0x9c
 80107e8:	009b      	lsls	r3, r3, #2
 80107ea:	58d0      	ldr	r0, [r2, r3]
 80107ec:	1cfb      	adds	r3, r7, #3
 80107ee:	781a      	ldrb	r2, [r3, #0]
 80107f0:	6879      	ldr	r1, [r7, #4]
 80107f2:	239e      	movs	r3, #158	; 0x9e
 80107f4:	005b      	lsls	r3, r3, #1
 80107f6:	0152      	lsls	r2, r2, #5
 80107f8:	188a      	adds	r2, r1, r2
 80107fa:	18d3      	adds	r3, r2, r3
 80107fc:	681a      	ldr	r2, [r3, #0]
 80107fe:	1cfb      	adds	r3, r7, #3
 8010800:	781b      	ldrb	r3, [r3, #0]
 8010802:	0019      	movs	r1, r3
 8010804:	f000 fab8 	bl	8010d78 <USBD_LL_DataOutStage>
}
 8010808:	46c0      	nop			; (mov r8, r8)
 801080a:	46bd      	mov	sp, r7
 801080c:	b002      	add	sp, #8
 801080e:	bd80      	pop	{r7, pc}

08010810 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8010810:	b580      	push	{r7, lr}
 8010812:	b082      	sub	sp, #8
 8010814:	af00      	add	r7, sp, #0
 8010816:	6078      	str	r0, [r7, #4]
 8010818:	000a      	movs	r2, r1
 801081a:	1cfb      	adds	r3, r7, #3
 801081c:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage(hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801081e:	687a      	ldr	r2, [r7, #4]
 8010820:	239c      	movs	r3, #156	; 0x9c
 8010822:	009b      	lsls	r3, r3, #2
 8010824:	58d0      	ldr	r0, [r2, r3]
 8010826:	1cfb      	adds	r3, r7, #3
 8010828:	781b      	ldrb	r3, [r3, #0]
 801082a:	687a      	ldr	r2, [r7, #4]
 801082c:	015b      	lsls	r3, r3, #5
 801082e:	18d3      	adds	r3, r2, r3
 8010830:	333c      	adds	r3, #60	; 0x3c
 8010832:	681a      	ldr	r2, [r3, #0]
 8010834:	1cfb      	adds	r3, r7, #3
 8010836:	781b      	ldrb	r3, [r3, #0]
 8010838:	0019      	movs	r1, r3
 801083a:	f000 fb06 	bl	8010e4a <USBD_LL_DataInStage>
}
 801083e:	46c0      	nop			; (mov r8, r8)
 8010840:	46bd      	mov	sp, r7
 8010842:	b002      	add	sp, #8
 8010844:	bd80      	pop	{r7, pc}

08010846 <HAL_PCD_SOFCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8010846:	b580      	push	{r7, lr}
 8010848:	b082      	sub	sp, #8
 801084a:	af00      	add	r7, sp, #0
 801084c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF(hpcd->pData);
 801084e:	687a      	ldr	r2, [r7, #4]
 8010850:	239c      	movs	r3, #156	; 0x9c
 8010852:	009b      	lsls	r3, r3, #2
 8010854:	58d3      	ldr	r3, [r2, r3]
 8010856:	0018      	movs	r0, r3
 8010858:	f000 fbc1 	bl	8010fde <USBD_LL_SOF>
}
 801085c:	46c0      	nop			; (mov r8, r8)
 801085e:	46bd      	mov	sp, r7
 8010860:	b002      	add	sp, #8
 8010862:	bd80      	pop	{r7, pc}

08010864 <HAL_PCD_ResetCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{   
 8010864:	b580      	push	{r7, lr}
 8010866:	b082      	sub	sp, #8
 8010868:	af00      	add	r7, sp, #0
 801086a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetSpeed(hpcd->pData, USBD_SPEED_FULL);
 801086c:	687a      	ldr	r2, [r7, #4]
 801086e:	239c      	movs	r3, #156	; 0x9c
 8010870:	009b      	lsls	r3, r3, #2
 8010872:	58d3      	ldr	r3, [r2, r3]
 8010874:	2101      	movs	r1, #1
 8010876:	0018      	movs	r0, r3
 8010878:	f000 fba1 	bl	8010fbe <USBD_LL_SetSpeed>
  /* Reset Device */
  USBD_LL_Reset(hpcd->pData);
 801087c:	687a      	ldr	r2, [r7, #4]
 801087e:	239c      	movs	r3, #156	; 0x9c
 8010880:	009b      	lsls	r3, r3, #2
 8010882:	58d3      	ldr	r3, [r2, r3]
 8010884:	0018      	movs	r0, r3
 8010886:	f000 fb67 	bl	8010f58 <USBD_LL_Reset>
}
 801088a:	46c0      	nop			; (mov r8, r8)
 801088c:	46bd      	mov	sp, r7
 801088e:	b002      	add	sp, #8
 8010890:	bd80      	pop	{r7, pc}

08010892 <HAL_PCD_SuspendCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8010892:	b580      	push	{r7, lr}
 8010894:	b082      	sub	sp, #8
 8010896:	af00      	add	r7, sp, #0
 8010898:	6078      	str	r0, [r7, #4]
}
 801089a:	46c0      	nop			; (mov r8, r8)
 801089c:	46bd      	mov	sp, r7
 801089e:	b002      	add	sp, #8
 80108a0:	bd80      	pop	{r7, pc}

080108a2 <HAL_PCD_ResumeCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 80108a2:	b580      	push	{r7, lr}
 80108a4:	b082      	sub	sp, #8
 80108a6:	af00      	add	r7, sp, #0
 80108a8:	6078      	str	r0, [r7, #4]
}
 80108aa:	46c0      	nop			; (mov r8, r8)
 80108ac:	46bd      	mov	sp, r7
 80108ae:	b002      	add	sp, #8
 80108b0:	bd80      	pop	{r7, pc}
	...

080108b4 <USBD_LL_Init>:
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80108b4:	b580      	push	{r7, lr}
 80108b6:	b084      	sub	sp, #16
 80108b8:	af00      	add	r7, sp, #0
 80108ba:	6078      	str	r0, [r7, #4]
  uint32_t pma_address;

  /* Set LL Driver parameters */
  hpcd.Instance = USB;
 80108bc:	4b21      	ldr	r3, [pc, #132]	; (8010944 <USBD_LL_Init+0x90>)
 80108be:	4a22      	ldr	r2, [pc, #136]	; (8010948 <USBD_LL_Init+0x94>)
 80108c0:	601a      	str	r2, [r3, #0]
  hpcd.Init.ep0_mps = 0x40;
 80108c2:	4b20      	ldr	r3, [pc, #128]	; (8010944 <USBD_LL_Init+0x90>)
 80108c4:	2240      	movs	r2, #64	; 0x40
 80108c6:	60da      	str	r2, [r3, #12]
  hpcd.Init.phy_itface = PCD_PHY_EMBEDDED;
 80108c8:	4b1e      	ldr	r3, [pc, #120]	; (8010944 <USBD_LL_Init+0x90>)
 80108ca:	2202      	movs	r2, #2
 80108cc:	611a      	str	r2, [r3, #16]
  hpcd.Init.speed = PCD_SPEED_FULL;
 80108ce:	4b1d      	ldr	r3, [pc, #116]	; (8010944 <USBD_LL_Init+0x90>)
 80108d0:	2202      	movs	r2, #2
 80108d2:	609a      	str	r2, [r3, #8]
  /* Link The driver to the stack */
  hpcd.pData = pdev;
 80108d4:	4a1b      	ldr	r2, [pc, #108]	; (8010944 <USBD_LL_Init+0x90>)
 80108d6:	239c      	movs	r3, #156	; 0x9c
 80108d8:	009b      	lsls	r3, r3, #2
 80108da:	6879      	ldr	r1, [r7, #4]
 80108dc:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd;
 80108de:	687a      	ldr	r2, [r7, #4]
 80108e0:	2387      	movs	r3, #135	; 0x87
 80108e2:	009b      	lsls	r3, r3, #2
 80108e4:	4917      	ldr	r1, [pc, #92]	; (8010944 <USBD_LL_Init+0x90>)
 80108e6:	50d1      	str	r1, [r2, r3]
  /* Initialize LL Driver */
  HAL_PCD_Init(pdev->pData);
 80108e8:	687a      	ldr	r2, [r7, #4]
 80108ea:	2387      	movs	r3, #135	; 0x87
 80108ec:	009b      	lsls	r3, r3, #2
 80108ee:	58d3      	ldr	r3, [r2, r3]
 80108f0:	0018      	movs	r0, r3
 80108f2:	f7f0 f973 	bl	8000bdc <HAL_PCD_Init>
  /*
  start address for PMA allocation:
  ST's USB stack forces a BTABLE_ADDRESS at the start of PMA memory.  The BTABLE occupied 8 bytes per endpoint.
  we position the EP buffers starting immediately after this
  */
  pma_address = 8 * MAX((sizeof(hpcd.IN_ep) / sizeof(*hpcd.IN_ep)), (sizeof(hpcd.OUT_ep) / sizeof(*hpcd.OUT_ep)));
 80108f6:	2340      	movs	r3, #64	; 0x40
 80108f8:	60fb      	str	r3, [r7, #12]

  /* PMA allocation for EP0 */
  HAL_PCDEx_PMAConfig(pdev->pData, 0x00, PCD_SNG_BUF, pma_address =+ USB_MAX_EP0_SIZE);
 80108fa:	687a      	ldr	r2, [r7, #4]
 80108fc:	2387      	movs	r3, #135	; 0x87
 80108fe:	009b      	lsls	r3, r3, #2
 8010900:	58d0      	ldr	r0, [r2, r3]
 8010902:	2340      	movs	r3, #64	; 0x40
 8010904:	60fb      	str	r3, [r7, #12]
 8010906:	68fb      	ldr	r3, [r7, #12]
 8010908:	2200      	movs	r2, #0
 801090a:	2100      	movs	r1, #0
 801090c:	f7f1 f908 	bl	8001b20 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig(pdev->pData, 0x80, PCD_SNG_BUF, pma_address =+ USB_MAX_EP0_SIZE);
 8010910:	687a      	ldr	r2, [r7, #4]
 8010912:	2387      	movs	r3, #135	; 0x87
 8010914:	009b      	lsls	r3, r3, #2
 8010916:	58d0      	ldr	r0, [r2, r3]
 8010918:	2340      	movs	r3, #64	; 0x40
 801091a:	60fb      	str	r3, [r7, #12]
 801091c:	68fb      	ldr	r3, [r7, #12]
 801091e:	2200      	movs	r2, #0
 8010920:	2180      	movs	r1, #128	; 0x80
 8010922:	f7f1 f8fd 	bl	8001b20 <HAL_PCDEx_PMAConfig>

  /* PMA allocation for other endpoints */
  USBD_ECM_PMAConfig(pdev->pData, &pma_address);
 8010926:	687a      	ldr	r2, [r7, #4]
 8010928:	2387      	movs	r3, #135	; 0x87
 801092a:	009b      	lsls	r3, r3, #2
 801092c:	58d3      	ldr	r3, [r2, r3]
 801092e:	220c      	movs	r2, #12
 8010930:	18ba      	adds	r2, r7, r2
 8010932:	0011      	movs	r1, r2
 8010934:	0018      	movs	r0, r3
 8010936:	f001 fa54 	bl	8011de2 <USBD_ECM_PMAConfig>

  return USBD_OK;
 801093a:	2300      	movs	r3, #0
}
 801093c:	0018      	movs	r0, r3
 801093e:	46bd      	mov	sp, r7
 8010940:	b004      	add	sp, #16
 8010942:	bd80      	pop	{r7, pc}
 8010944:	20003778 	.word	0x20003778
 8010948:	40005c00 	.word	0x40005c00

0801094c <USBD_LL_Start>:
  * @brief  Starts the Low Level portion of the Device driver. 
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801094c:	b580      	push	{r7, lr}
 801094e:	b082      	sub	sp, #8
 8010950:	af00      	add	r7, sp, #0
 8010952:	6078      	str	r0, [r7, #4]
  HAL_PCD_Start(pdev->pData);
 8010954:	687a      	ldr	r2, [r7, #4]
 8010956:	2387      	movs	r3, #135	; 0x87
 8010958:	009b      	lsls	r3, r3, #2
 801095a:	58d3      	ldr	r3, [r2, r3]
 801095c:	0018      	movs	r0, r3
 801095e:	f7f0 fa21 	bl	8000da4 <HAL_PCD_Start>
  return USBD_OK;
 8010962:	2300      	movs	r3, #0
}
 8010964:	0018      	movs	r0, r3
 8010966:	46bd      	mov	sp, r7
 8010968:	b002      	add	sp, #8
 801096a:	bd80      	pop	{r7, pc}

0801096c <USBD_LL_OpenEP>:
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev,
                                  uint8_t ep_addr,
                                  uint8_t ep_type,
                                  uint16_t ep_mps)
{
 801096c:	b590      	push	{r4, r7, lr}
 801096e:	b083      	sub	sp, #12
 8010970:	af00      	add	r7, sp, #0
 8010972:	6078      	str	r0, [r7, #4]
 8010974:	000c      	movs	r4, r1
 8010976:	0010      	movs	r0, r2
 8010978:	0019      	movs	r1, r3
 801097a:	1cfb      	adds	r3, r7, #3
 801097c:	1c22      	adds	r2, r4, #0
 801097e:	701a      	strb	r2, [r3, #0]
 8010980:	1cbb      	adds	r3, r7, #2
 8010982:	1c02      	adds	r2, r0, #0
 8010984:	701a      	strb	r2, [r3, #0]
 8010986:	003b      	movs	r3, r7
 8010988:	1c0a      	adds	r2, r1, #0
 801098a:	801a      	strh	r2, [r3, #0]
  HAL_PCD_EP_Open(pdev->pData,
 801098c:	687a      	ldr	r2, [r7, #4]
 801098e:	2387      	movs	r3, #135	; 0x87
 8010990:	009b      	lsls	r3, r3, #2
 8010992:	58d0      	ldr	r0, [r2, r3]
 8010994:	1cbb      	adds	r3, r7, #2
 8010996:	781c      	ldrb	r4, [r3, #0]
 8010998:	003b      	movs	r3, r7
 801099a:	881a      	ldrh	r2, [r3, #0]
 801099c:	1cfb      	adds	r3, r7, #3
 801099e:	7819      	ldrb	r1, [r3, #0]
 80109a0:	0023      	movs	r3, r4
 80109a2:	f7f0 fbd8 	bl	8001156 <HAL_PCD_EP_Open>
                  ep_addr,
                  ep_mps,
                  ep_type);
  
  return USBD_OK;
 80109a6:	2300      	movs	r3, #0
}
 80109a8:	0018      	movs	r0, r3
 80109aa:	46bd      	mov	sp, r7
 80109ac:	b003      	add	sp, #12
 80109ae:	bd90      	pop	{r4, r7, pc}

080109b0 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80109b0:	b580      	push	{r7, lr}
 80109b2:	b082      	sub	sp, #8
 80109b4:	af00      	add	r7, sp, #0
 80109b6:	6078      	str	r0, [r7, #4]
 80109b8:	000a      	movs	r2, r1
 80109ba:	1cfb      	adds	r3, r7, #3
 80109bc:	701a      	strb	r2, [r3, #0]
  HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80109be:	687a      	ldr	r2, [r7, #4]
 80109c0:	2387      	movs	r3, #135	; 0x87
 80109c2:	009b      	lsls	r3, r3, #2
 80109c4:	58d2      	ldr	r2, [r2, r3]
 80109c6:	1cfb      	adds	r3, r7, #3
 80109c8:	781b      	ldrb	r3, [r3, #0]
 80109ca:	0019      	movs	r1, r3
 80109cc:	0010      	movs	r0, r2
 80109ce:	f7f0 fc34 	bl	800123a <HAL_PCD_EP_Close>
  return USBD_OK;
 80109d2:	2300      	movs	r3, #0
}
 80109d4:	0018      	movs	r0, r3
 80109d6:	46bd      	mov	sp, r7
 80109d8:	b002      	add	sp, #8
 80109da:	bd80      	pop	{r7, pc}

080109dc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80109dc:	b580      	push	{r7, lr}
 80109de:	b082      	sub	sp, #8
 80109e0:	af00      	add	r7, sp, #0
 80109e2:	6078      	str	r0, [r7, #4]
 80109e4:	000a      	movs	r2, r1
 80109e6:	1cfb      	adds	r3, r7, #3
 80109e8:	701a      	strb	r2, [r3, #0]
  HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80109ea:	687a      	ldr	r2, [r7, #4]
 80109ec:	2387      	movs	r3, #135	; 0x87
 80109ee:	009b      	lsls	r3, r3, #2
 80109f0:	58d2      	ldr	r2, [r2, r3]
 80109f2:	1cfb      	adds	r3, r7, #3
 80109f4:	781b      	ldrb	r3, [r3, #0]
 80109f6:	0019      	movs	r1, r3
 80109f8:	0010      	movs	r0, r2
 80109fa:	f7f0 fcff 	bl	80013fc <HAL_PCD_EP_SetStall>
  return USBD_OK;
 80109fe:	2300      	movs	r3, #0
}
 8010a00:	0018      	movs	r0, r3
 8010a02:	46bd      	mov	sp, r7
 8010a04:	b002      	add	sp, #8
 8010a06:	bd80      	pop	{r7, pc}

08010a08 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010a08:	b580      	push	{r7, lr}
 8010a0a:	b082      	sub	sp, #8
 8010a0c:	af00      	add	r7, sp, #0
 8010a0e:	6078      	str	r0, [r7, #4]
 8010a10:	000a      	movs	r2, r1
 8010a12:	1cfb      	adds	r3, r7, #3
 8010a14:	701a      	strb	r2, [r3, #0]
  HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8010a16:	687a      	ldr	r2, [r7, #4]
 8010a18:	2387      	movs	r3, #135	; 0x87
 8010a1a:	009b      	lsls	r3, r3, #2
 8010a1c:	58d2      	ldr	r2, [r2, r3]
 8010a1e:	1cfb      	adds	r3, r7, #3
 8010a20:	781b      	ldrb	r3, [r3, #0]
 8010a22:	0019      	movs	r1, r3
 8010a24:	0010      	movs	r0, r2
 8010a26:	f7f0 fd4f 	bl	80014c8 <HAL_PCD_EP_ClrStall>
  return USBD_OK; 
 8010a2a:	2300      	movs	r3, #0
}
 8010a2c:	0018      	movs	r0, r3
 8010a2e:	46bd      	mov	sp, r7
 8010a30:	b002      	add	sp, #8
 8010a32:	bd80      	pop	{r7, pc}

08010a34 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010a34:	b580      	push	{r7, lr}
 8010a36:	b084      	sub	sp, #16
 8010a38:	af00      	add	r7, sp, #0
 8010a3a:	6078      	str	r0, [r7, #4]
 8010a3c:	000a      	movs	r2, r1
 8010a3e:	1cfb      	adds	r3, r7, #3
 8010a40:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8010a42:	687a      	ldr	r2, [r7, #4]
 8010a44:	2387      	movs	r3, #135	; 0x87
 8010a46:	009b      	lsls	r3, r3, #2
 8010a48:	58d3      	ldr	r3, [r2, r3]
 8010a4a:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8010a4c:	1cfb      	adds	r3, r7, #3
 8010a4e:	781b      	ldrb	r3, [r3, #0]
 8010a50:	b25b      	sxtb	r3, r3
 8010a52:	2b00      	cmp	r3, #0
 8010a54:	da0a      	bge.n	8010a6c <USBD_LL_IsStallEP+0x38>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010a56:	1cfb      	adds	r3, r7, #3
 8010a58:	781b      	ldrb	r3, [r3, #0]
 8010a5a:	227f      	movs	r2, #127	; 0x7f
 8010a5c:	4013      	ands	r3, r2
 8010a5e:	68fa      	ldr	r2, [r7, #12]
 8010a60:	212a      	movs	r1, #42	; 0x2a
 8010a62:	015b      	lsls	r3, r3, #5
 8010a64:	18d3      	adds	r3, r2, r3
 8010a66:	185b      	adds	r3, r3, r1
 8010a68:	781b      	ldrb	r3, [r3, #0]
 8010a6a:	e00a      	b.n	8010a82 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8010a6c:	1cfb      	adds	r3, r7, #3
 8010a6e:	781b      	ldrb	r3, [r3, #0]
 8010a70:	227f      	movs	r2, #127	; 0x7f
 8010a72:	401a      	ands	r2, r3
 8010a74:	68f9      	ldr	r1, [r7, #12]
 8010a76:	2395      	movs	r3, #149	; 0x95
 8010a78:	005b      	lsls	r3, r3, #1
 8010a7a:	0152      	lsls	r2, r2, #5
 8010a7c:	188a      	adds	r2, r1, r2
 8010a7e:	18d3      	adds	r3, r2, r3
 8010a80:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010a82:	0018      	movs	r0, r3
 8010a84:	46bd      	mov	sp, r7
 8010a86:	b004      	add	sp, #16
 8010a88:	bd80      	pop	{r7, pc}

08010a8a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010a8a:	b580      	push	{r7, lr}
 8010a8c:	b082      	sub	sp, #8
 8010a8e:	af00      	add	r7, sp, #0
 8010a90:	6078      	str	r0, [r7, #4]
 8010a92:	000a      	movs	r2, r1
 8010a94:	1cfb      	adds	r3, r7, #3
 8010a96:	701a      	strb	r2, [r3, #0]
  HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010a98:	687a      	ldr	r2, [r7, #4]
 8010a9a:	2387      	movs	r3, #135	; 0x87
 8010a9c:	009b      	lsls	r3, r3, #2
 8010a9e:	58d2      	ldr	r2, [r2, r3]
 8010aa0:	1cfb      	adds	r3, r7, #3
 8010aa2:	781b      	ldrb	r3, [r3, #0]
 8010aa4:	0019      	movs	r1, r3
 8010aa6:	0010      	movs	r0, r2
 8010aa8:	f7f0 fb2a 	bl	8001100 <HAL_PCD_SetAddress>
  return USBD_OK; 
 8010aac:	2300      	movs	r3, #0
}
 8010aae:	0018      	movs	r0, r3
 8010ab0:	46bd      	mov	sp, r7
 8010ab2:	b002      	add	sp, #8
 8010ab4:	bd80      	pop	{r7, pc}

08010ab6 <USBD_LL_Transmit>:
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, 
                                    uint8_t ep_addr,
                                    uint8_t *pbuf,
                                    uint16_t size)
{
 8010ab6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010ab8:	b087      	sub	sp, #28
 8010aba:	af00      	add	r7, sp, #0
 8010abc:	60f8      	str	r0, [r7, #12]
 8010abe:	0008      	movs	r0, r1
 8010ac0:	607a      	str	r2, [r7, #4]
 8010ac2:	0019      	movs	r1, r3
 8010ac4:	260b      	movs	r6, #11
 8010ac6:	19bb      	adds	r3, r7, r6
 8010ac8:	1c02      	adds	r2, r0, #0
 8010aca:	701a      	strb	r2, [r3, #0]
 8010acc:	2408      	movs	r4, #8
 8010ace:	193b      	adds	r3, r7, r4
 8010ad0:	1c0a      	adds	r2, r1, #0
 8010ad2:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef outcome;
  outcome = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8010ad4:	68fa      	ldr	r2, [r7, #12]
 8010ad6:	2387      	movs	r3, #135	; 0x87
 8010ad8:	009b      	lsls	r3, r3, #2
 8010ada:	58d0      	ldr	r0, [r2, r3]
 8010adc:	193b      	adds	r3, r7, r4
 8010ade:	881d      	ldrh	r5, [r3, #0]
 8010ae0:	2317      	movs	r3, #23
 8010ae2:	18fc      	adds	r4, r7, r3
 8010ae4:	687a      	ldr	r2, [r7, #4]
 8010ae6:	19bb      	adds	r3, r7, r6
 8010ae8:	7819      	ldrb	r1, [r3, #0]
 8010aea:	002b      	movs	r3, r5
 8010aec:	f7f0 fc46 	bl	800137c <HAL_PCD_EP_Transmit>
 8010af0:	0003      	movs	r3, r0
 8010af2:	7023      	strb	r3, [r4, #0]
  return (HAL_OK == outcome) ? USBD_OK : USBD_BUSY;
 8010af4:	2317      	movs	r3, #23
 8010af6:	18fb      	adds	r3, r7, r3
 8010af8:	781b      	ldrb	r3, [r3, #0]
 8010afa:	1e5a      	subs	r2, r3, #1
 8010afc:	4193      	sbcs	r3, r2
 8010afe:	b2db      	uxtb	r3, r3
}
 8010b00:	0018      	movs	r0, r3
 8010b02:	46bd      	mov	sp, r7
 8010b04:	b007      	add	sp, #28
 8010b06:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010b08 <USBD_LL_PrepareReceive>:
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, 
                                          uint8_t ep_addr,
                                          uint8_t *pbuf,
                                          uint16_t size)
{
 8010b08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010b0a:	b087      	sub	sp, #28
 8010b0c:	af00      	add	r7, sp, #0
 8010b0e:	60f8      	str	r0, [r7, #12]
 8010b10:	0008      	movs	r0, r1
 8010b12:	607a      	str	r2, [r7, #4]
 8010b14:	0019      	movs	r1, r3
 8010b16:	260b      	movs	r6, #11
 8010b18:	19bb      	adds	r3, r7, r6
 8010b1a:	1c02      	adds	r2, r0, #0
 8010b1c:	701a      	strb	r2, [r3, #0]
 8010b1e:	2408      	movs	r4, #8
 8010b20:	193b      	adds	r3, r7, r4
 8010b22:	1c0a      	adds	r2, r1, #0
 8010b24:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef outcome;
  outcome = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8010b26:	68fa      	ldr	r2, [r7, #12]
 8010b28:	2387      	movs	r3, #135	; 0x87
 8010b2a:	009b      	lsls	r3, r3, #2
 8010b2c:	58d0      	ldr	r0, [r2, r3]
 8010b2e:	193b      	adds	r3, r7, r4
 8010b30:	881d      	ldrh	r5, [r3, #0]
 8010b32:	2317      	movs	r3, #23
 8010b34:	18fc      	adds	r4, r7, r3
 8010b36:	687a      	ldr	r2, [r7, #4]
 8010b38:	19bb      	adds	r3, r7, r6
 8010b3a:	7819      	ldrb	r1, [r3, #0]
 8010b3c:	002b      	movs	r3, r5
 8010b3e:	f7f0 fbc7 	bl	80012d0 <HAL_PCD_EP_Receive>
 8010b42:	0003      	movs	r3, r0
 8010b44:	7023      	strb	r3, [r4, #0]
  return (HAL_OK == outcome) ? USBD_OK : USBD_BUSY;
 8010b46:	2317      	movs	r3, #23
 8010b48:	18fb      	adds	r3, r7, r3
 8010b4a:	781b      	ldrb	r3, [r3, #0]
 8010b4c:	1e5a      	subs	r2, r3, #1
 8010b4e:	4193      	sbcs	r3, r2
 8010b50:	b2db      	uxtb	r3, r3
}
 8010b52:	0018      	movs	r0, r3
 8010b54:	46bd      	mov	sp, r7
 8010b56:	b007      	add	sp, #28
 8010b58:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010b5a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010b5a:	b580      	push	{r7, lr}
 8010b5c:	b082      	sub	sp, #8
 8010b5e:	af00      	add	r7, sp, #0
 8010b60:	6078      	str	r0, [r7, #4]
 8010b62:	000a      	movs	r2, r1
 8010b64:	1cfb      	adds	r3, r7, #3
 8010b66:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount(pdev->pData, ep_addr);
 8010b68:	687a      	ldr	r2, [r7, #4]
 8010b6a:	2387      	movs	r3, #135	; 0x87
 8010b6c:	009b      	lsls	r3, r3, #2
 8010b6e:	58d2      	ldr	r2, [r2, r3]
 8010b70:	1cfb      	adds	r3, r7, #3
 8010b72:	781b      	ldrb	r3, [r3, #0]
 8010b74:	0019      	movs	r1, r3
 8010b76:	0010      	movs	r0, r2
 8010b78:	f7f0 fbeb 	bl	8001352 <HAL_PCD_EP_GetRxCount>
 8010b7c:	0003      	movs	r3, r0
}
 8010b7e:	0018      	movs	r0, r3
 8010b80:	46bd      	mov	sp, r7
 8010b82:	b002      	add	sp, #8
 8010b84:	bd80      	pop	{r7, pc}

08010b86 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, const USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8010b86:	b580      	push	{r7, lr}
 8010b88:	b084      	sub	sp, #16
 8010b8a:	af00      	add	r7, sp, #0
 8010b8c:	60f8      	str	r0, [r7, #12]
 8010b8e:	60b9      	str	r1, [r7, #8]
 8010b90:	1dfb      	adds	r3, r7, #7
 8010b92:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8010b94:	68fb      	ldr	r3, [r7, #12]
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	d101      	bne.n	8010b9e <USBD_Init+0x18>
  {
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
 8010b9a:	2302      	movs	r3, #2
 8010b9c:	e020      	b.n	8010be0 <USBD_Init+0x5a>
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8010b9e:	68fa      	ldr	r2, [r7, #12]
 8010ba0:	2384      	movs	r3, #132	; 0x84
 8010ba2:	009b      	lsls	r3, r3, #2
 8010ba4:	58d3      	ldr	r3, [r2, r3]
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	d004      	beq.n	8010bb4 <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 8010baa:	68fa      	ldr	r2, [r7, #12]
 8010bac:	2384      	movs	r3, #132	; 0x84
 8010bae:	009b      	lsls	r3, r3, #2
 8010bb0:	2100      	movs	r1, #0
 8010bb2:	50d1      	str	r1, [r2, r3]
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8010bb4:	68bb      	ldr	r3, [r7, #8]
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	d004      	beq.n	8010bc4 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8010bba:	68fa      	ldr	r2, [r7, #12]
 8010bbc:	2383      	movs	r3, #131	; 0x83
 8010bbe:	009b      	lsls	r3, r3, #2
 8010bc0:	68b9      	ldr	r1, [r7, #8]
 8010bc2:	50d1      	str	r1, [r2, r3]
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8010bc4:	68fa      	ldr	r2, [r7, #12]
 8010bc6:	23fe      	movs	r3, #254	; 0xfe
 8010bc8:	005b      	lsls	r3, r3, #1
 8010bca:	2101      	movs	r1, #1
 8010bcc:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 8010bce:	68fb      	ldr	r3, [r7, #12]
 8010bd0:	1dfa      	adds	r2, r7, #7
 8010bd2:	7812      	ldrb	r2, [r2, #0]
 8010bd4:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8010bd6:	68fb      	ldr	r3, [r7, #12]
 8010bd8:	0018      	movs	r0, r3
 8010bda:	f7ff fe6b 	bl	80108b4 <USBD_LL_Init>
  
  return USBD_OK; 
 8010bde:	2300      	movs	r3, #0
}
 8010be0:	0018      	movs	r0, r3
 8010be2:	46bd      	mov	sp, r7
 8010be4:	b004      	add	sp, #16
 8010be6:	bd80      	pop	{r7, pc}

08010be8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, const USBD_ClassTypeDef *pclass)
{
 8010be8:	b580      	push	{r7, lr}
 8010bea:	b084      	sub	sp, #16
 8010bec:	af00      	add	r7, sp, #0
 8010bee:	6078      	str	r0, [r7, #4]
 8010bf0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8010bf2:	230f      	movs	r3, #15
 8010bf4:	18fb      	adds	r3, r7, r3
 8010bf6:	2200      	movs	r2, #0
 8010bf8:	701a      	strb	r2, [r3, #0]
  if(pclass != 0)
 8010bfa:	683b      	ldr	r3, [r7, #0]
 8010bfc:	2b00      	cmp	r3, #0
 8010bfe:	d009      	beq.n	8010c14 <USBD_RegisterClass+0x2c>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8010c00:	687a      	ldr	r2, [r7, #4]
 8010c02:	2384      	movs	r3, #132	; 0x84
 8010c04:	009b      	lsls	r3, r3, #2
 8010c06:	6839      	ldr	r1, [r7, #0]
 8010c08:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 8010c0a:	230f      	movs	r3, #15
 8010c0c:	18fb      	adds	r3, r7, r3
 8010c0e:	2200      	movs	r2, #0
 8010c10:	701a      	strb	r2, [r3, #0]
 8010c12:	e003      	b.n	8010c1c <USBD_RegisterClass+0x34>
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 8010c14:	230f      	movs	r3, #15
 8010c16:	18fb      	adds	r3, r7, r3
 8010c18:	2202      	movs	r2, #2
 8010c1a:	701a      	strb	r2, [r3, #0]
  }
  
  return status;
 8010c1c:	230f      	movs	r3, #15
 8010c1e:	18fb      	adds	r3, r7, r3
 8010c20:	781b      	ldrb	r3, [r3, #0]
}
 8010c22:	0018      	movs	r0, r3
 8010c24:	46bd      	mov	sp, r7
 8010c26:	b004      	add	sp, #16
 8010c28:	bd80      	pop	{r7, pc}

08010c2a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8010c2a:	b580      	push	{r7, lr}
 8010c2c:	b082      	sub	sp, #8
 8010c2e:	af00      	add	r7, sp, #0
 8010c30:	6078      	str	r0, [r7, #4]
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	0018      	movs	r0, r3
 8010c36:	f7ff fe89 	bl	801094c <USBD_LL_Start>
  
  return USBD_OK;  
 8010c3a:	2300      	movs	r3, #0
}
 8010c3c:	0018      	movs	r0, r3
 8010c3e:	46bd      	mov	sp, r7
 8010c40:	b002      	add	sp, #8
 8010c42:	bd80      	pop	{r7, pc}

08010c44 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8010c44:	b580      	push	{r7, lr}
 8010c46:	b084      	sub	sp, #16
 8010c48:	af00      	add	r7, sp, #0
 8010c4a:	6078      	str	r0, [r7, #4]
 8010c4c:	000a      	movs	r2, r1
 8010c4e:	1cfb      	adds	r3, r7, #3
 8010c50:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8010c52:	230f      	movs	r3, #15
 8010c54:	18fb      	adds	r3, r7, r3
 8010c56:	2202      	movs	r2, #2
 8010c58:	701a      	strb	r2, [r3, #0]
  
  if(pdev->pClass != NULL)
 8010c5a:	687a      	ldr	r2, [r7, #4]
 8010c5c:	2384      	movs	r3, #132	; 0x84
 8010c5e:	009b      	lsls	r3, r3, #2
 8010c60:	58d3      	ldr	r3, [r2, r3]
 8010c62:	2b00      	cmp	r3, #0
 8010c64:	d00f      	beq.n	8010c86 <USBD_SetClassConfig+0x42>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 8010c66:	687a      	ldr	r2, [r7, #4]
 8010c68:	2384      	movs	r3, #132	; 0x84
 8010c6a:	009b      	lsls	r3, r3, #2
 8010c6c:	58d3      	ldr	r3, [r2, r3]
 8010c6e:	681b      	ldr	r3, [r3, #0]
 8010c70:	1cfa      	adds	r2, r7, #3
 8010c72:	7811      	ldrb	r1, [r2, #0]
 8010c74:	687a      	ldr	r2, [r7, #4]
 8010c76:	0010      	movs	r0, r2
 8010c78:	4798      	blx	r3
 8010c7a:	1e03      	subs	r3, r0, #0
 8010c7c:	d103      	bne.n	8010c86 <USBD_SetClassConfig+0x42>
    {
      ret = USBD_OK;
 8010c7e:	230f      	movs	r3, #15
 8010c80:	18fb      	adds	r3, r7, r3
 8010c82:	2200      	movs	r2, #0
 8010c84:	701a      	strb	r2, [r3, #0]
    }
  }
  return ret; 
 8010c86:	230f      	movs	r3, #15
 8010c88:	18fb      	adds	r3, r7, r3
 8010c8a:	781b      	ldrb	r3, [r3, #0]
}
 8010c8c:	0018      	movs	r0, r3
 8010c8e:	46bd      	mov	sp, r7
 8010c90:	b004      	add	sp, #16
 8010c92:	bd80      	pop	{r7, pc}

08010c94 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8010c94:	b580      	push	{r7, lr}
 8010c96:	b082      	sub	sp, #8
 8010c98:	af00      	add	r7, sp, #0
 8010c9a:	6078      	str	r0, [r7, #4]
 8010c9c:	000a      	movs	r2, r1
 8010c9e:	1cfb      	adds	r3, r7, #3
 8010ca0:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 8010ca2:	687a      	ldr	r2, [r7, #4]
 8010ca4:	2384      	movs	r3, #132	; 0x84
 8010ca6:	009b      	lsls	r3, r3, #2
 8010ca8:	58d3      	ldr	r3, [r2, r3]
 8010caa:	685b      	ldr	r3, [r3, #4]
 8010cac:	1cfa      	adds	r2, r7, #3
 8010cae:	7811      	ldrb	r1, [r2, #0]
 8010cb0:	687a      	ldr	r2, [r7, #4]
 8010cb2:	0010      	movs	r0, r2
 8010cb4:	4798      	blx	r3
  return USBD_OK;
 8010cb6:	2300      	movs	r3, #0
}
 8010cb8:	0018      	movs	r0, r3
 8010cba:	46bd      	mov	sp, r7
 8010cbc:	b002      	add	sp, #8
 8010cbe:	bd80      	pop	{r7, pc}

08010cc0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8010cc0:	b580      	push	{r7, lr}
 8010cc2:	b082      	sub	sp, #8
 8010cc4:	af00      	add	r7, sp, #0
 8010cc6:	6078      	str	r0, [r7, #4]
 8010cc8:	6039      	str	r1, [r7, #0]

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	2281      	movs	r2, #129	; 0x81
 8010cce:	0092      	lsls	r2, r2, #2
 8010cd0:	4694      	mov	ip, r2
 8010cd2:	4463      	add	r3, ip
 8010cd4:	683a      	ldr	r2, [r7, #0]
 8010cd6:	0011      	movs	r1, r2
 8010cd8:	0018      	movs	r0, r3
 8010cda:	f000 fd76 	bl	80117ca <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 8010cde:	687a      	ldr	r2, [r7, #4]
 8010ce0:	23fa      	movs	r3, #250	; 0xfa
 8010ce2:	005b      	lsls	r3, r3, #1
 8010ce4:	2101      	movs	r1, #1
 8010ce6:	50d1      	str	r1, [r2, r3]
  pdev->ep0_data_len = pdev->request.wLength;
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	4a22      	ldr	r2, [pc, #136]	; (8010d74 <USBD_LL_SetupStage+0xb4>)
 8010cec:	5a9b      	ldrh	r3, [r3, r2]
 8010cee:	0019      	movs	r1, r3
 8010cf0:	687a      	ldr	r2, [r7, #4]
 8010cf2:	23fc      	movs	r3, #252	; 0xfc
 8010cf4:	005b      	lsls	r3, r3, #1
 8010cf6:	50d1      	str	r1, [r2, r3]
  
  switch (pdev->request.bmRequest & 0x1F) 
 8010cf8:	687a      	ldr	r2, [r7, #4]
 8010cfa:	2381      	movs	r3, #129	; 0x81
 8010cfc:	009b      	lsls	r3, r3, #2
 8010cfe:	5cd3      	ldrb	r3, [r2, r3]
 8010d00:	001a      	movs	r2, r3
 8010d02:	231f      	movs	r3, #31
 8010d04:	4013      	ands	r3, r2
 8010d06:	2b01      	cmp	r3, #1
 8010d08:	d00d      	beq.n	8010d26 <USBD_LL_SetupStage+0x66>
 8010d0a:	2b02      	cmp	r3, #2
 8010d0c:	d015      	beq.n	8010d3a <USBD_LL_SetupStage+0x7a>
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	d11d      	bne.n	8010d4e <USBD_LL_SetupStage+0x8e>
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &pdev->request);
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	2281      	movs	r2, #129	; 0x81
 8010d16:	0092      	lsls	r2, r2, #2
 8010d18:	189a      	adds	r2, r3, r2
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	0011      	movs	r1, r2
 8010d1e:	0018      	movs	r0, r3
 8010d20:	f000 f97c 	bl	801101c <USBD_StdDevReq>
    break;
 8010d24:	e020      	b.n	8010d68 <USBD_LL_SetupStage+0xa8>
    
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &pdev->request);
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	2281      	movs	r2, #129	; 0x81
 8010d2a:	0092      	lsls	r2, r2, #2
 8010d2c:	189a      	adds	r2, r3, r2
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	0011      	movs	r1, r2
 8010d32:	0018      	movs	r0, r3
 8010d34:	f000 f9c6 	bl	80110c4 <USBD_StdItfReq>
    break;
 8010d38:	e016      	b.n	8010d68 <USBD_LL_SetupStage+0xa8>
    
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	2281      	movs	r2, #129	; 0x81
 8010d3e:	0092      	lsls	r2, r2, #2
 8010d40:	189a      	adds	r2, r3, r2
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	0011      	movs	r1, r2
 8010d46:	0018      	movs	r0, r3
 8010d48:	f000 f9fb 	bl	8011142 <USBD_StdEPReq>
    break;
 8010d4c:	e00c      	b.n	8010d68 <USBD_LL_SetupStage+0xa8>
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 8010d4e:	687a      	ldr	r2, [r7, #4]
 8010d50:	2381      	movs	r3, #129	; 0x81
 8010d52:	009b      	lsls	r3, r3, #2
 8010d54:	5cd3      	ldrb	r3, [r2, r3]
 8010d56:	227f      	movs	r2, #127	; 0x7f
 8010d58:	4393      	bics	r3, r2
 8010d5a:	b2da      	uxtb	r2, r3
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	0011      	movs	r1, r2
 8010d60:	0018      	movs	r0, r3
 8010d62:	f7ff fe3b 	bl	80109dc <USBD_LL_StallEP>
    break;
 8010d66:	46c0      	nop			; (mov r8, r8)
  }  
  return USBD_OK;  
 8010d68:	2300      	movs	r3, #0
}
 8010d6a:	0018      	movs	r0, r3
 8010d6c:	46bd      	mov	sp, r7
 8010d6e:	b002      	add	sp, #8
 8010d70:	bd80      	pop	{r7, pc}
 8010d72:	46c0      	nop			; (mov r8, r8)
 8010d74:	0000020a 	.word	0x0000020a

08010d78 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 8010d78:	b580      	push	{r7, lr}
 8010d7a:	b086      	sub	sp, #24
 8010d7c:	af00      	add	r7, sp, #0
 8010d7e:	60f8      	str	r0, [r7, #12]
 8010d80:	607a      	str	r2, [r7, #4]
 8010d82:	200b      	movs	r0, #11
 8010d84:	183b      	adds	r3, r7, r0
 8010d86:	1c0a      	adds	r2, r1, #0
 8010d88:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 8010d8a:	183b      	adds	r3, r7, r0
 8010d8c:	781b      	ldrb	r3, [r3, #0]
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	d13e      	bne.n	8010e10 <USBD_LL_DataOutStage+0x98>
  {
    pep = &pdev->ep_out[0];
 8010d92:	68fb      	ldr	r3, [r7, #12]
 8010d94:	3305      	adds	r3, #5
 8010d96:	33ff      	adds	r3, #255	; 0xff
 8010d98:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8010d9a:	68fa      	ldr	r2, [r7, #12]
 8010d9c:	23fa      	movs	r3, #250	; 0xfa
 8010d9e:	005b      	lsls	r3, r3, #1
 8010da0:	58d3      	ldr	r3, [r2, r3]
 8010da2:	2b03      	cmp	r3, #3
 8010da4:	d14c      	bne.n	8010e40 <USBD_LL_DataOutStage+0xc8>
    {
      if(pep->rem_length > pep->maxpacket)
 8010da6:	697b      	ldr	r3, [r7, #20]
 8010da8:	689a      	ldr	r2, [r3, #8]
 8010daa:	697b      	ldr	r3, [r7, #20]
 8010dac:	68db      	ldr	r3, [r3, #12]
 8010dae:	429a      	cmp	r2, r3
 8010db0:	d914      	bls.n	8010ddc <USBD_LL_DataOutStage+0x64>
      {
        pep->rem_length -=  pep->maxpacket;
 8010db2:	697b      	ldr	r3, [r7, #20]
 8010db4:	689a      	ldr	r2, [r3, #8]
 8010db6:	697b      	ldr	r3, [r7, #20]
 8010db8:	68db      	ldr	r3, [r3, #12]
 8010dba:	1ad2      	subs	r2, r2, r3
 8010dbc:	697b      	ldr	r3, [r7, #20]
 8010dbe:	609a      	str	r2, [r3, #8]
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 8010dc0:	697b      	ldr	r3, [r7, #20]
 8010dc2:	68da      	ldr	r2, [r3, #12]
 8010dc4:	697b      	ldr	r3, [r7, #20]
 8010dc6:	689b      	ldr	r3, [r3, #8]
 8010dc8:	429a      	cmp	r2, r3
 8010dca:	d900      	bls.n	8010dce <USBD_LL_DataOutStage+0x56>
 8010dcc:	001a      	movs	r2, r3
        USBD_CtlContinueRx (pdev, 
 8010dce:	b292      	uxth	r2, r2
 8010dd0:	6879      	ldr	r1, [r7, #4]
 8010dd2:	68fb      	ldr	r3, [r7, #12]
 8010dd4:	0018      	movs	r0, r3
 8010dd6:	f001 f8ca 	bl	8011f6e <USBD_CtlContinueRx>
 8010dda:	e031      	b.n	8010e40 <USBD_LL_DataOutStage+0xc8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8010ddc:	68fa      	ldr	r2, [r7, #12]
 8010dde:	2384      	movs	r3, #132	; 0x84
 8010de0:	009b      	lsls	r3, r3, #2
 8010de2:	58d3      	ldr	r3, [r2, r3]
 8010de4:	691b      	ldr	r3, [r3, #16]
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	d00d      	beq.n	8010e06 <USBD_LL_DataOutStage+0x8e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8010dea:	68fa      	ldr	r2, [r7, #12]
 8010dec:	23fe      	movs	r3, #254	; 0xfe
 8010dee:	005b      	lsls	r3, r3, #1
 8010df0:	5cd3      	ldrb	r3, [r2, r3]
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8010df2:	2b03      	cmp	r3, #3
 8010df4:	d107      	bne.n	8010e06 <USBD_LL_DataOutStage+0x8e>
        {
          pdev->pClass->EP0_RxReady(pdev); 
 8010df6:	68fa      	ldr	r2, [r7, #12]
 8010df8:	2384      	movs	r3, #132	; 0x84
 8010dfa:	009b      	lsls	r3, r3, #2
 8010dfc:	58d3      	ldr	r3, [r2, r3]
 8010dfe:	691b      	ldr	r3, [r3, #16]
 8010e00:	68fa      	ldr	r2, [r7, #12]
 8010e02:	0010      	movs	r0, r2
 8010e04:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8010e06:	68fb      	ldr	r3, [r7, #12]
 8010e08:	0018      	movs	r0, r3
 8010e0a:	f001 f8c3 	bl	8011f94 <USBD_CtlSendStatus>
 8010e0e:	e017      	b.n	8010e40 <USBD_LL_DataOutStage+0xc8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL)&&
 8010e10:	68fa      	ldr	r2, [r7, #12]
 8010e12:	2384      	movs	r3, #132	; 0x84
 8010e14:	009b      	lsls	r3, r3, #2
 8010e16:	58d3      	ldr	r3, [r2, r3]
 8010e18:	699b      	ldr	r3, [r3, #24]
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	d010      	beq.n	8010e40 <USBD_LL_DataOutStage+0xc8>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8010e1e:	68fa      	ldr	r2, [r7, #12]
 8010e20:	23fe      	movs	r3, #254	; 0xfe
 8010e22:	005b      	lsls	r3, r3, #1
 8010e24:	5cd3      	ldrb	r3, [r2, r3]
  else if((pdev->pClass->DataOut != NULL)&&
 8010e26:	2b03      	cmp	r3, #3
 8010e28:	d10a      	bne.n	8010e40 <USBD_LL_DataOutStage+0xc8>
  {
    pdev->pClass->DataOut(pdev, epnum); 
 8010e2a:	68fa      	ldr	r2, [r7, #12]
 8010e2c:	2384      	movs	r3, #132	; 0x84
 8010e2e:	009b      	lsls	r3, r3, #2
 8010e30:	58d3      	ldr	r3, [r2, r3]
 8010e32:	699b      	ldr	r3, [r3, #24]
 8010e34:	220b      	movs	r2, #11
 8010e36:	18ba      	adds	r2, r7, r2
 8010e38:	7811      	ldrb	r1, [r2, #0]
 8010e3a:	68fa      	ldr	r2, [r7, #12]
 8010e3c:	0010      	movs	r0, r2
 8010e3e:	4798      	blx	r3
  }  
  return USBD_OK;
 8010e40:	2300      	movs	r3, #0
}
 8010e42:	0018      	movs	r0, r3
 8010e44:	46bd      	mov	sp, r7
 8010e46:	b006      	add	sp, #24
 8010e48:	bd80      	pop	{r7, pc}

08010e4a <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 8010e4a:	b580      	push	{r7, lr}
 8010e4c:	b086      	sub	sp, #24
 8010e4e:	af00      	add	r7, sp, #0
 8010e50:	60f8      	str	r0, [r7, #12]
 8010e52:	607a      	str	r2, [r7, #4]
 8010e54:	200b      	movs	r0, #11
 8010e56:	183b      	adds	r3, r7, r0
 8010e58:	1c0a      	adds	r2, r1, #0
 8010e5a:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 8010e5c:	183b      	adds	r3, r7, r0
 8010e5e:	781b      	ldrb	r3, [r3, #0]
 8010e60:	2b00      	cmp	r3, #0
 8010e62:	d15c      	bne.n	8010f1e <USBD_LL_DataInStage+0xd4>
  {
    pep = &pdev->ep_in[0];
 8010e64:	68fb      	ldr	r3, [r7, #12]
 8010e66:	3314      	adds	r3, #20
 8010e68:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8010e6a:	68fa      	ldr	r2, [r7, #12]
 8010e6c:	23fa      	movs	r3, #250	; 0xfa
 8010e6e:	005b      	lsls	r3, r3, #1
 8010e70:	58d3      	ldr	r3, [r2, r3]
 8010e72:	2b02      	cmp	r3, #2
 8010e74:	d16b      	bne.n	8010f4e <USBD_LL_DataInStage+0x104>
    {
      if(pep->rem_length > pep->maxpacket)
 8010e76:	697b      	ldr	r3, [r7, #20]
 8010e78:	689a      	ldr	r2, [r3, #8]
 8010e7a:	697b      	ldr	r3, [r7, #20]
 8010e7c:	68db      	ldr	r3, [r3, #12]
 8010e7e:	429a      	cmp	r2, r3
 8010e80:	d90f      	bls.n	8010ea2 <USBD_LL_DataInStage+0x58>
      {
        pep->rem_length -=  pep->maxpacket;
 8010e82:	697b      	ldr	r3, [r7, #20]
 8010e84:	689a      	ldr	r2, [r3, #8]
 8010e86:	697b      	ldr	r3, [r7, #20]
 8010e88:	68db      	ldr	r3, [r3, #12]
 8010e8a:	1ad2      	subs	r2, r2, r3
 8010e8c:	697b      	ldr	r3, [r7, #20]
 8010e8e:	609a      	str	r2, [r3, #8]
        
        USBD_CtlContinueSendData (pdev, 
                                  pdata, 
                                  pep->rem_length);
 8010e90:	697b      	ldr	r3, [r7, #20]
 8010e92:	689b      	ldr	r3, [r3, #8]
        USBD_CtlContinueSendData (pdev, 
 8010e94:	b29a      	uxth	r2, r3
 8010e96:	6879      	ldr	r1, [r7, #4]
 8010e98:	68fb      	ldr	r3, [r7, #12]
 8010e9a:	0018      	movs	r0, r3
 8010e9c:	f001 f854 	bl	8011f48 <USBD_CtlContinueSendData>
 8010ea0:	e055      	b.n	8010f4e <USBD_LL_DataInStage+0x104>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0) &&
 8010ea2:	697b      	ldr	r3, [r7, #20]
 8010ea4:	685a      	ldr	r2, [r3, #4]
 8010ea6:	697b      	ldr	r3, [r7, #20]
 8010ea8:	68db      	ldr	r3, [r3, #12]
 8010eaa:	0019      	movs	r1, r3
 8010eac:	0010      	movs	r0, r2
 8010eae:	f7ef f9c3 	bl	8000238 <__aeabi_uidivmod>
 8010eb2:	1e0b      	subs	r3, r1, #0
 8010eb4:	d119      	bne.n	8010eea <USBD_LL_DataInStage+0xa0>
           (pep->total_length >= pep->maxpacket) &&
 8010eb6:	697b      	ldr	r3, [r7, #20]
 8010eb8:	685a      	ldr	r2, [r3, #4]
 8010eba:	697b      	ldr	r3, [r7, #20]
 8010ebc:	68db      	ldr	r3, [r3, #12]
        if((pep->total_length % pep->maxpacket == 0) &&
 8010ebe:	429a      	cmp	r2, r3
 8010ec0:	d313      	bcc.n	8010eea <USBD_LL_DataInStage+0xa0>
             (pep->total_length < pdev->ep0_data_len ))
 8010ec2:	697b      	ldr	r3, [r7, #20]
 8010ec4:	685a      	ldr	r2, [r3, #4]
 8010ec6:	68f9      	ldr	r1, [r7, #12]
 8010ec8:	23fc      	movs	r3, #252	; 0xfc
 8010eca:	005b      	lsls	r3, r3, #1
 8010ecc:	58cb      	ldr	r3, [r1, r3]
           (pep->total_length >= pep->maxpacket) &&
 8010ece:	429a      	cmp	r2, r3
 8010ed0:	d20b      	bcs.n	8010eea <USBD_LL_DataInStage+0xa0>
        {
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
 8010ed2:	68fb      	ldr	r3, [r7, #12]
 8010ed4:	2200      	movs	r2, #0
 8010ed6:	2100      	movs	r1, #0
 8010ed8:	0018      	movs	r0, r3
 8010eda:	f001 f835 	bl	8011f48 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 8010ede:	68fa      	ldr	r2, [r7, #12]
 8010ee0:	23fc      	movs	r3, #252	; 0xfc
 8010ee2:	005b      	lsls	r3, r3, #1
 8010ee4:	2100      	movs	r1, #0
 8010ee6:	50d1      	str	r1, [r2, r3]
 8010ee8:	e031      	b.n	8010f4e <USBD_LL_DataInStage+0x104>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8010eea:	68fa      	ldr	r2, [r7, #12]
 8010eec:	2384      	movs	r3, #132	; 0x84
 8010eee:	009b      	lsls	r3, r3, #2
 8010ef0:	58d3      	ldr	r3, [r2, r3]
 8010ef2:	68db      	ldr	r3, [r3, #12]
 8010ef4:	2b00      	cmp	r3, #0
 8010ef6:	d00d      	beq.n	8010f14 <USBD_LL_DataInStage+0xca>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8010ef8:	68fa      	ldr	r2, [r7, #12]
 8010efa:	23fe      	movs	r3, #254	; 0xfe
 8010efc:	005b      	lsls	r3, r3, #1
 8010efe:	5cd3      	ldrb	r3, [r2, r3]
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8010f00:	2b03      	cmp	r3, #3
 8010f02:	d107      	bne.n	8010f14 <USBD_LL_DataInStage+0xca>
          {
            pdev->pClass->EP0_TxSent(pdev); 
 8010f04:	68fa      	ldr	r2, [r7, #12]
 8010f06:	2384      	movs	r3, #132	; 0x84
 8010f08:	009b      	lsls	r3, r3, #2
 8010f0a:	58d3      	ldr	r3, [r2, r3]
 8010f0c:	68db      	ldr	r3, [r3, #12]
 8010f0e:	68fa      	ldr	r2, [r7, #12]
 8010f10:	0010      	movs	r0, r2
 8010f12:	4798      	blx	r3
          }          
          USBD_CtlReceiveStatus(pdev);
 8010f14:	68fb      	ldr	r3, [r7, #12]
 8010f16:	0018      	movs	r0, r3
 8010f18:	f001 f850 	bl	8011fbc <USBD_CtlReceiveStatus>
 8010f1c:	e017      	b.n	8010f4e <USBD_LL_DataInStage+0x104>
        }
      }
    }
  }
  else if((pdev->pClass->DataIn != NULL)&& 
 8010f1e:	68fa      	ldr	r2, [r7, #12]
 8010f20:	2384      	movs	r3, #132	; 0x84
 8010f22:	009b      	lsls	r3, r3, #2
 8010f24:	58d3      	ldr	r3, [r2, r3]
 8010f26:	695b      	ldr	r3, [r3, #20]
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	d010      	beq.n	8010f4e <USBD_LL_DataInStage+0x104>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8010f2c:	68fa      	ldr	r2, [r7, #12]
 8010f2e:	23fe      	movs	r3, #254	; 0xfe
 8010f30:	005b      	lsls	r3, r3, #1
 8010f32:	5cd3      	ldrb	r3, [r2, r3]
  else if((pdev->pClass->DataIn != NULL)&& 
 8010f34:	2b03      	cmp	r3, #3
 8010f36:	d10a      	bne.n	8010f4e <USBD_LL_DataInStage+0x104>
  {
    pdev->pClass->DataIn(pdev, epnum); 
 8010f38:	68fa      	ldr	r2, [r7, #12]
 8010f3a:	2384      	movs	r3, #132	; 0x84
 8010f3c:	009b      	lsls	r3, r3, #2
 8010f3e:	58d3      	ldr	r3, [r2, r3]
 8010f40:	695b      	ldr	r3, [r3, #20]
 8010f42:	220b      	movs	r2, #11
 8010f44:	18ba      	adds	r2, r7, r2
 8010f46:	7811      	ldrb	r1, [r2, #0]
 8010f48:	68fa      	ldr	r2, [r7, #12]
 8010f4a:	0010      	movs	r0, r2
 8010f4c:	4798      	blx	r3
  }  
  return USBD_OK;
 8010f4e:	2300      	movs	r3, #0
}
 8010f50:	0018      	movs	r0, r3
 8010f52:	46bd      	mov	sp, r7
 8010f54:	b006      	add	sp, #24
 8010f56:	bd80      	pop	{r7, pc}

08010f58 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8010f58:	b580      	push	{r7, lr}
 8010f5a:	b082      	sub	sp, #8
 8010f5c:	af00      	add	r7, sp, #0
 8010f5e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8010f60:	6878      	ldr	r0, [r7, #4]
 8010f62:	2340      	movs	r3, #64	; 0x40
 8010f64:	2200      	movs	r2, #0
 8010f66:	2100      	movs	r1, #0
 8010f68:	f7ff fd00 	bl	801096c <USBD_LL_OpenEP>
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8010f6c:	687a      	ldr	r2, [r7, #4]
 8010f6e:	2388      	movs	r3, #136	; 0x88
 8010f70:	005b      	lsls	r3, r3, #1
 8010f72:	2140      	movs	r1, #64	; 0x40
 8010f74:	50d1      	str	r1, [r2, r3]
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8010f76:	6878      	ldr	r0, [r7, #4]
 8010f78:	2340      	movs	r3, #64	; 0x40
 8010f7a:	2200      	movs	r2, #0
 8010f7c:	2180      	movs	r1, #128	; 0x80
 8010f7e:	f7ff fcf5 	bl	801096c <USBD_LL_OpenEP>
              0x80,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	2240      	movs	r2, #64	; 0x40
 8010f86:	621a      	str	r2, [r3, #32]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010f88:	687a      	ldr	r2, [r7, #4]
 8010f8a:	23fe      	movs	r3, #254	; 0xfe
 8010f8c:	005b      	lsls	r3, r3, #1
 8010f8e:	2101      	movs	r1, #1
 8010f90:	54d1      	strb	r1, [r2, r3]
  
  if (pdev->pClassData) 
 8010f92:	687a      	ldr	r2, [r7, #4]
 8010f94:	2385      	movs	r3, #133	; 0x85
 8010f96:	009b      	lsls	r3, r3, #2
 8010f98:	58d3      	ldr	r3, [r2, r3]
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	d00a      	beq.n	8010fb4 <USBD_LL_Reset+0x5c>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8010f9e:	687a      	ldr	r2, [r7, #4]
 8010fa0:	2384      	movs	r3, #132	; 0x84
 8010fa2:	009b      	lsls	r3, r3, #2
 8010fa4:	58d3      	ldr	r3, [r2, r3]
 8010fa6:	685a      	ldr	r2, [r3, #4]
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	685b      	ldr	r3, [r3, #4]
 8010fac:	b2d9      	uxtb	r1, r3
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	0018      	movs	r0, r3
 8010fb2:	4790      	blx	r2
 
  
  return USBD_OK;
 8010fb4:	2300      	movs	r3, #0
}
 8010fb6:	0018      	movs	r0, r3
 8010fb8:	46bd      	mov	sp, r7
 8010fba:	b002      	add	sp, #8
 8010fbc:	bd80      	pop	{r7, pc}

08010fbe <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8010fbe:	b580      	push	{r7, lr}
 8010fc0:	b082      	sub	sp, #8
 8010fc2:	af00      	add	r7, sp, #0
 8010fc4:	6078      	str	r0, [r7, #4]
 8010fc6:	000a      	movs	r2, r1
 8010fc8:	1cfb      	adds	r3, r7, #3
 8010fca:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	1cfa      	adds	r2, r7, #3
 8010fd0:	7812      	ldrb	r2, [r2, #0]
 8010fd2:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8010fd4:	2300      	movs	r3, #0
}
 8010fd6:	0018      	movs	r0, r3
 8010fd8:	46bd      	mov	sp, r7
 8010fda:	b002      	add	sp, #8
 8010fdc:	bd80      	pop	{r7, pc}

08010fde <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8010fde:	b580      	push	{r7, lr}
 8010fe0:	b082      	sub	sp, #8
 8010fe2:	af00      	add	r7, sp, #0
 8010fe4:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8010fe6:	687a      	ldr	r2, [r7, #4]
 8010fe8:	23fe      	movs	r3, #254	; 0xfe
 8010fea:	005b      	lsls	r3, r3, #1
 8010fec:	5cd3      	ldrb	r3, [r2, r3]
 8010fee:	2b03      	cmp	r3, #3
 8010ff0:	d10e      	bne.n	8011010 <USBD_LL_SOF+0x32>
  {
    if(pdev->pClass->SOF != NULL)
 8010ff2:	687a      	ldr	r2, [r7, #4]
 8010ff4:	2384      	movs	r3, #132	; 0x84
 8010ff6:	009b      	lsls	r3, r3, #2
 8010ff8:	58d3      	ldr	r3, [r2, r3]
 8010ffa:	69db      	ldr	r3, [r3, #28]
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	d007      	beq.n	8011010 <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 8011000:	687a      	ldr	r2, [r7, #4]
 8011002:	2384      	movs	r3, #132	; 0x84
 8011004:	009b      	lsls	r3, r3, #2
 8011006:	58d3      	ldr	r3, [r2, r3]
 8011008:	69db      	ldr	r3, [r3, #28]
 801100a:	687a      	ldr	r2, [r7, #4]
 801100c:	0010      	movs	r0, r2
 801100e:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8011010:	2300      	movs	r3, #0
}
 8011012:	0018      	movs	r0, r3
 8011014:	46bd      	mov	sp, r7
 8011016:	b002      	add	sp, #8
 8011018:	bd80      	pop	{r7, pc}
	...

0801101c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 801101c:	b580      	push	{r7, lr}
 801101e:	b084      	sub	sp, #16
 8011020:	af00      	add	r7, sp, #0
 8011022:	6078      	str	r0, [r7, #4]
 8011024:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;  
 8011026:	230f      	movs	r3, #15
 8011028:	18fb      	adds	r3, r7, r3
 801102a:	2200      	movs	r2, #0
 801102c:	701a      	strb	r2, [r3, #0]
  
  switch (req->bRequest) 
 801102e:	683b      	ldr	r3, [r7, #0]
 8011030:	785b      	ldrb	r3, [r3, #1]
 8011032:	2b09      	cmp	r3, #9
 8011034:	d835      	bhi.n	80110a2 <USBD_StdDevReq+0x86>
 8011036:	009a      	lsls	r2, r3, #2
 8011038:	4b21      	ldr	r3, [pc, #132]	; (80110c0 <USBD_StdDevReq+0xa4>)
 801103a:	18d3      	adds	r3, r2, r3
 801103c:	681b      	ldr	r3, [r3, #0]
 801103e:	469f      	mov	pc, r3
  {
  case USB_REQ_GET_DESCRIPTOR: 
    
    USBD_GetDescriptor (pdev, req) ;
 8011040:	683a      	ldr	r2, [r7, #0]
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	0011      	movs	r1, r2
 8011046:	0018      	movs	r0, r3
 8011048:	f000 f97f 	bl	801134a <USBD_GetDescriptor>
    break;
 801104c:	e030      	b.n	80110b0 <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_ADDRESS:                      
    USBD_SetAddress(pdev, req);
 801104e:	683a      	ldr	r2, [r7, #0]
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	0011      	movs	r1, r2
 8011054:	0018      	movs	r0, r3
 8011056:	f000 fa19 	bl	801148c <USBD_SetAddress>
    break;
 801105a:	e029      	b.n	80110b0 <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_CONFIGURATION:                    
    USBD_SetConfig (pdev , req);
 801105c:	683a      	ldr	r2, [r7, #0]
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	0011      	movs	r1, r2
 8011062:	0018      	movs	r0, r3
 8011064:	f000 fa60 	bl	8011528 <USBD_SetConfig>
    break;
 8011068:	e022      	b.n	80110b0 <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_CONFIGURATION:                 
    USBD_GetConfig (pdev , req);
 801106a:	683a      	ldr	r2, [r7, #0]
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	0011      	movs	r1, r2
 8011070:	0018      	movs	r0, r3
 8011072:	f000 faf5 	bl	8011660 <USBD_GetConfig>
    break;
 8011076:	e01b      	b.n	80110b0 <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_STATUS:                                  
    USBD_GetStatus (pdev , req);
 8011078:	683a      	ldr	r2, [r7, #0]
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	0011      	movs	r1, r2
 801107e:	0018      	movs	r0, r3
 8011080:	f000 fb26 	bl	80116d0 <USBD_GetStatus>
    break;
 8011084:	e014      	b.n	80110b0 <USBD_StdDevReq+0x94>
    
    
  case USB_REQ_SET_FEATURE:   
    USBD_SetFeature (pdev , req);    
 8011086:	683a      	ldr	r2, [r7, #0]
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	0011      	movs	r1, r2
 801108c:	0018      	movs	r0, r3
 801108e:	f000 fb4e 	bl	801172e <USBD_SetFeature>
    break;
 8011092:	e00d      	b.n	80110b0 <USBD_StdDevReq+0x94>
    
  case USB_REQ_CLEAR_FEATURE:                                   
    USBD_ClrFeature (pdev , req);
 8011094:	683a      	ldr	r2, [r7, #0]
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	0011      	movs	r1, r2
 801109a:	0018      	movs	r0, r3
 801109c:	f000 fb66 	bl	801176c <USBD_ClrFeature>
    break;
 80110a0:	e006      	b.n	80110b0 <USBD_StdDevReq+0x94>
    
  default:  
    USBD_CtlError(pdev , req);
 80110a2:	683a      	ldr	r2, [r7, #0]
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	0011      	movs	r1, r2
 80110a8:	0018      	movs	r0, r3
 80110aa:	f000 fbc9 	bl	8011840 <USBD_CtlError>
    break;
 80110ae:	46c0      	nop			; (mov r8, r8)
  }
  
  return ret;
 80110b0:	230f      	movs	r3, #15
 80110b2:	18fb      	adds	r3, r7, r3
 80110b4:	781b      	ldrb	r3, [r3, #0]
}
 80110b6:	0018      	movs	r0, r3
 80110b8:	46bd      	mov	sp, r7
 80110ba:	b004      	add	sp, #16
 80110bc:	bd80      	pop	{r7, pc}
 80110be:	46c0      	nop			; (mov r8, r8)
 80110c0:	0801ca70 	.word	0x0801ca70

080110c4 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80110c4:	b580      	push	{r7, lr}
 80110c6:	b084      	sub	sp, #16
 80110c8:	af00      	add	r7, sp, #0
 80110ca:	6078      	str	r0, [r7, #4]
 80110cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK; 
 80110ce:	230f      	movs	r3, #15
 80110d0:	18fb      	adds	r3, r7, r3
 80110d2:	2200      	movs	r2, #0
 80110d4:	701a      	strb	r2, [r3, #0]
  
  switch (pdev->dev_state) 
 80110d6:	687a      	ldr	r2, [r7, #4]
 80110d8:	23fe      	movs	r3, #254	; 0xfe
 80110da:	005b      	lsls	r3, r3, #1
 80110dc:	5cd3      	ldrb	r3, [r2, r3]
 80110de:	2b03      	cmp	r3, #3
 80110e0:	d122      	bne.n	8011128 <USBD_StdItfReq+0x64>
  {
  case USBD_STATE_CONFIGURED:
    
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 80110e2:	683b      	ldr	r3, [r7, #0]
 80110e4:	889b      	ldrh	r3, [r3, #4]
 80110e6:	b2db      	uxtb	r3, r3
 80110e8:	2b02      	cmp	r3, #2
 80110ea:	d816      	bhi.n	801111a <USBD_StdItfReq+0x56>
    {
      pdev->pClass->Setup (pdev, req); 
 80110ec:	687a      	ldr	r2, [r7, #4]
 80110ee:	2384      	movs	r3, #132	; 0x84
 80110f0:	009b      	lsls	r3, r3, #2
 80110f2:	58d3      	ldr	r3, [r2, r3]
 80110f4:	689b      	ldr	r3, [r3, #8]
 80110f6:	6839      	ldr	r1, [r7, #0]
 80110f8:	687a      	ldr	r2, [r7, #4]
 80110fa:	0010      	movs	r0, r2
 80110fc:	4798      	blx	r3
      
      if((req->wLength == 0)&& (ret == USBD_OK))
 80110fe:	683b      	ldr	r3, [r7, #0]
 8011100:	88db      	ldrh	r3, [r3, #6]
 8011102:	2b00      	cmp	r3, #0
 8011104:	d117      	bne.n	8011136 <USBD_StdItfReq+0x72>
 8011106:	230f      	movs	r3, #15
 8011108:	18fb      	adds	r3, r7, r3
 801110a:	781b      	ldrb	r3, [r3, #0]
 801110c:	2b00      	cmp	r3, #0
 801110e:	d112      	bne.n	8011136 <USBD_StdItfReq+0x72>
      {
         USBD_CtlSendStatus(pdev);
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	0018      	movs	r0, r3
 8011114:	f000 ff3e 	bl	8011f94 <USBD_CtlSendStatus>
    } 
    else 
    {                                               
       USBD_CtlError(pdev , req);
    }
    break;
 8011118:	e00d      	b.n	8011136 <USBD_StdItfReq+0x72>
       USBD_CtlError(pdev , req);
 801111a:	683a      	ldr	r2, [r7, #0]
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	0011      	movs	r1, r2
 8011120:	0018      	movs	r0, r3
 8011122:	f000 fb8d 	bl	8011840 <USBD_CtlError>
    break;
 8011126:	e006      	b.n	8011136 <USBD_StdItfReq+0x72>
    
  default:
     USBD_CtlError(pdev , req);
 8011128:	683a      	ldr	r2, [r7, #0]
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	0011      	movs	r1, r2
 801112e:	0018      	movs	r0, r3
 8011130:	f000 fb86 	bl	8011840 <USBD_CtlError>
    break;
 8011134:	e000      	b.n	8011138 <USBD_StdItfReq+0x74>
    break;
 8011136:	46c0      	nop			; (mov r8, r8)
  }
  return USBD_OK;
 8011138:	2300      	movs	r3, #0
}
 801113a:	0018      	movs	r0, r3
 801113c:	46bd      	mov	sp, r7
 801113e:	b004      	add	sp, #16
 8011140:	bd80      	pop	{r7, pc}

08011142 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8011142:	b580      	push	{r7, lr}
 8011144:	b084      	sub	sp, #16
 8011146:	af00      	add	r7, sp, #0
 8011148:	6078      	str	r0, [r7, #4]
 801114a:	6039      	str	r1, [r7, #0]
  
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
 801114c:	230f      	movs	r3, #15
 801114e:	18fb      	adds	r3, r7, r3
 8011150:	2200      	movs	r2, #0
 8011152:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
 8011154:	683b      	ldr	r3, [r7, #0]
 8011156:	889a      	ldrh	r2, [r3, #4]
 8011158:	230e      	movs	r3, #14
 801115a:	18fb      	adds	r3, r7, r3
 801115c:	701a      	strb	r2, [r3, #0]
  
  switch (req->bRequest) 
 801115e:	683b      	ldr	r3, [r7, #0]
 8011160:	785b      	ldrb	r3, [r3, #1]
 8011162:	2b01      	cmp	r3, #1
 8011164:	d04e      	beq.n	8011204 <USBD_StdEPReq+0xc2>
 8011166:	2b03      	cmp	r3, #3
 8011168:	d003      	beq.n	8011172 <USBD_StdEPReq+0x30>
 801116a:	2b00      	cmp	r3, #0
 801116c:	d100      	bne.n	8011170 <USBD_StdEPReq+0x2e>
 801116e:	e090      	b.n	8011292 <USBD_StdEPReq+0x150>
      break;
    }
    break;
    
  default:
    break;
 8011170:	e0e4      	b.n	801133c <USBD_StdEPReq+0x1fa>
    switch (pdev->dev_state) 
 8011172:	687a      	ldr	r2, [r7, #4]
 8011174:	23fe      	movs	r3, #254	; 0xfe
 8011176:	005b      	lsls	r3, r3, #1
 8011178:	5cd3      	ldrb	r3, [r2, r3]
 801117a:	2b02      	cmp	r3, #2
 801117c:	d002      	beq.n	8011184 <USBD_StdEPReq+0x42>
 801117e:	2b03      	cmp	r3, #3
 8011180:	d013      	beq.n	80111aa <USBD_StdEPReq+0x68>
 8011182:	e036      	b.n	80111f2 <USBD_StdEPReq+0xb0>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8011184:	230e      	movs	r3, #14
 8011186:	18fb      	adds	r3, r7, r3
 8011188:	781b      	ldrb	r3, [r3, #0]
 801118a:	2b00      	cmp	r3, #0
 801118c:	d038      	beq.n	8011200 <USBD_StdEPReq+0xbe>
 801118e:	230e      	movs	r3, #14
 8011190:	18fb      	adds	r3, r7, r3
 8011192:	781b      	ldrb	r3, [r3, #0]
 8011194:	2b80      	cmp	r3, #128	; 0x80
 8011196:	d033      	beq.n	8011200 <USBD_StdEPReq+0xbe>
        USBD_LL_StallEP(pdev , ep_addr);
 8011198:	230e      	movs	r3, #14
 801119a:	18fb      	adds	r3, r7, r3
 801119c:	781a      	ldrb	r2, [r3, #0]
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	0011      	movs	r1, r2
 80111a2:	0018      	movs	r0, r3
 80111a4:	f7ff fc1a 	bl	80109dc <USBD_LL_StallEP>
      break;	
 80111a8:	e02a      	b.n	8011200 <USBD_StdEPReq+0xbe>
      if (req->wValue == USB_FEATURE_EP_HALT)
 80111aa:	683b      	ldr	r3, [r7, #0]
 80111ac:	885b      	ldrh	r3, [r3, #2]
 80111ae:	2b00      	cmp	r3, #0
 80111b0:	d111      	bne.n	80111d6 <USBD_StdEPReq+0x94>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 80111b2:	230e      	movs	r3, #14
 80111b4:	18fb      	adds	r3, r7, r3
 80111b6:	781b      	ldrb	r3, [r3, #0]
 80111b8:	2b00      	cmp	r3, #0
 80111ba:	d00c      	beq.n	80111d6 <USBD_StdEPReq+0x94>
 80111bc:	230e      	movs	r3, #14
 80111be:	18fb      	adds	r3, r7, r3
 80111c0:	781b      	ldrb	r3, [r3, #0]
 80111c2:	2b80      	cmp	r3, #128	; 0x80
 80111c4:	d007      	beq.n	80111d6 <USBD_StdEPReq+0x94>
          USBD_LL_StallEP(pdev , ep_addr);
 80111c6:	230e      	movs	r3, #14
 80111c8:	18fb      	adds	r3, r7, r3
 80111ca:	781a      	ldrb	r2, [r3, #0]
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	0011      	movs	r1, r2
 80111d0:	0018      	movs	r0, r3
 80111d2:	f7ff fc03 	bl	80109dc <USBD_LL_StallEP>
      pdev->pClass->Setup (pdev, req);   
 80111d6:	687a      	ldr	r2, [r7, #4]
 80111d8:	2384      	movs	r3, #132	; 0x84
 80111da:	009b      	lsls	r3, r3, #2
 80111dc:	58d3      	ldr	r3, [r2, r3]
 80111de:	689b      	ldr	r3, [r3, #8]
 80111e0:	6839      	ldr	r1, [r7, #0]
 80111e2:	687a      	ldr	r2, [r7, #4]
 80111e4:	0010      	movs	r0, r2
 80111e6:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	0018      	movs	r0, r3
 80111ec:	f000 fed2 	bl	8011f94 <USBD_CtlSendStatus>
      break;
 80111f0:	e007      	b.n	8011202 <USBD_StdEPReq+0xc0>
      USBD_CtlError(pdev , req);
 80111f2:	683a      	ldr	r2, [r7, #0]
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	0011      	movs	r1, r2
 80111f8:	0018      	movs	r0, r3
 80111fa:	f000 fb21 	bl	8011840 <USBD_CtlError>
      break;    
 80111fe:	e000      	b.n	8011202 <USBD_StdEPReq+0xc0>
      break;	
 8011200:	46c0      	nop			; (mov r8, r8)
    break;
 8011202:	e09b      	b.n	801133c <USBD_StdEPReq+0x1fa>
    switch (pdev->dev_state) 
 8011204:	687a      	ldr	r2, [r7, #4]
 8011206:	23fe      	movs	r3, #254	; 0xfe
 8011208:	005b      	lsls	r3, r3, #1
 801120a:	5cd3      	ldrb	r3, [r2, r3]
 801120c:	2b02      	cmp	r3, #2
 801120e:	d002      	beq.n	8011216 <USBD_StdEPReq+0xd4>
 8011210:	2b03      	cmp	r3, #3
 8011212:	d013      	beq.n	801123c <USBD_StdEPReq+0xfa>
 8011214:	e032      	b.n	801127c <USBD_StdEPReq+0x13a>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8011216:	230e      	movs	r3, #14
 8011218:	18fb      	adds	r3, r7, r3
 801121a:	781b      	ldrb	r3, [r3, #0]
 801121c:	2b00      	cmp	r3, #0
 801121e:	d034      	beq.n	801128a <USBD_StdEPReq+0x148>
 8011220:	230e      	movs	r3, #14
 8011222:	18fb      	adds	r3, r7, r3
 8011224:	781b      	ldrb	r3, [r3, #0]
 8011226:	2b80      	cmp	r3, #128	; 0x80
 8011228:	d02f      	beq.n	801128a <USBD_StdEPReq+0x148>
        USBD_LL_StallEP(pdev , ep_addr);
 801122a:	230e      	movs	r3, #14
 801122c:	18fb      	adds	r3, r7, r3
 801122e:	781a      	ldrb	r2, [r3, #0]
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	0011      	movs	r1, r2
 8011234:	0018      	movs	r0, r3
 8011236:	f7ff fbd1 	bl	80109dc <USBD_LL_StallEP>
      break;	
 801123a:	e026      	b.n	801128a <USBD_StdEPReq+0x148>
      if (req->wValue == USB_FEATURE_EP_HALT)
 801123c:	683b      	ldr	r3, [r7, #0]
 801123e:	885b      	ldrh	r3, [r3, #2]
 8011240:	2b00      	cmp	r3, #0
 8011242:	d124      	bne.n	801128e <USBD_StdEPReq+0x14c>
        if ((ep_addr & 0x7F) != 0x00) 
 8011244:	230e      	movs	r3, #14
 8011246:	18fb      	adds	r3, r7, r3
 8011248:	781b      	ldrb	r3, [r3, #0]
 801124a:	227f      	movs	r2, #127	; 0x7f
 801124c:	4013      	ands	r3, r2
 801124e:	d010      	beq.n	8011272 <USBD_StdEPReq+0x130>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 8011250:	230e      	movs	r3, #14
 8011252:	18fb      	adds	r3, r7, r3
 8011254:	781a      	ldrb	r2, [r3, #0]
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	0011      	movs	r1, r2
 801125a:	0018      	movs	r0, r3
 801125c:	f7ff fbd4 	bl	8010a08 <USBD_LL_ClearStallEP>
          pdev->pClass->Setup (pdev, req);
 8011260:	687a      	ldr	r2, [r7, #4]
 8011262:	2384      	movs	r3, #132	; 0x84
 8011264:	009b      	lsls	r3, r3, #2
 8011266:	58d3      	ldr	r3, [r2, r3]
 8011268:	689b      	ldr	r3, [r3, #8]
 801126a:	6839      	ldr	r1, [r7, #0]
 801126c:	687a      	ldr	r2, [r7, #4]
 801126e:	0010      	movs	r0, r2
 8011270:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	0018      	movs	r0, r3
 8011276:	f000 fe8d 	bl	8011f94 <USBD_CtlSendStatus>
      break;
 801127a:	e008      	b.n	801128e <USBD_StdEPReq+0x14c>
      USBD_CtlError(pdev , req);
 801127c:	683a      	ldr	r2, [r7, #0]
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	0011      	movs	r1, r2
 8011282:	0018      	movs	r0, r3
 8011284:	f000 fadc 	bl	8011840 <USBD_CtlError>
      break;    
 8011288:	e002      	b.n	8011290 <USBD_StdEPReq+0x14e>
      break;	
 801128a:	46c0      	nop			; (mov r8, r8)
 801128c:	e056      	b.n	801133c <USBD_StdEPReq+0x1fa>
      break;
 801128e:	46c0      	nop			; (mov r8, r8)
    break;
 8011290:	e054      	b.n	801133c <USBD_StdEPReq+0x1fa>
    switch (pdev->dev_state) 
 8011292:	687a      	ldr	r2, [r7, #4]
 8011294:	23fe      	movs	r3, #254	; 0xfe
 8011296:	005b      	lsls	r3, r3, #1
 8011298:	5cd3      	ldrb	r3, [r2, r3]
 801129a:	2b02      	cmp	r3, #2
 801129c:	d002      	beq.n	80112a4 <USBD_StdEPReq+0x162>
 801129e:	2b03      	cmp	r3, #3
 80112a0:	d00f      	beq.n	80112c2 <USBD_StdEPReq+0x180>
 80112a2:	e042      	b.n	801132a <USBD_StdEPReq+0x1e8>
      if ((ep_addr & 0x7F) != 0x00) 
 80112a4:	230e      	movs	r3, #14
 80112a6:	18fb      	adds	r3, r7, r3
 80112a8:	781b      	ldrb	r3, [r3, #0]
 80112aa:	227f      	movs	r2, #127	; 0x7f
 80112ac:	4013      	ands	r3, r2
 80112ae:	d043      	beq.n	8011338 <USBD_StdEPReq+0x1f6>
        USBD_LL_StallEP(pdev , ep_addr);
 80112b0:	230e      	movs	r3, #14
 80112b2:	18fb      	adds	r3, r7, r3
 80112b4:	781a      	ldrb	r2, [r3, #0]
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	0011      	movs	r1, r2
 80112ba:	0018      	movs	r0, r3
 80112bc:	f7ff fb8e 	bl	80109dc <USBD_LL_StallEP>
      break;	
 80112c0:	e03a      	b.n	8011338 <USBD_StdEPReq+0x1f6>
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 80112c2:	230e      	movs	r3, #14
 80112c4:	18fb      	adds	r3, r7, r3
 80112c6:	781b      	ldrb	r3, [r3, #0]
 80112c8:	b25b      	sxtb	r3, r3
 80112ca:	2b00      	cmp	r3, #0
 80112cc:	da0a      	bge.n	80112e4 <USBD_StdEPReq+0x1a2>
 80112ce:	230e      	movs	r3, #14
 80112d0:	18fb      	adds	r3, r7, r3
 80112d2:	781b      	ldrb	r3, [r3, #0]
 80112d4:	227f      	movs	r2, #127	; 0x7f
 80112d6:	4013      	ands	r3, r2
 80112d8:	3301      	adds	r3, #1
 80112da:	011b      	lsls	r3, r3, #4
 80112dc:	687a      	ldr	r2, [r7, #4]
 80112de:	18d3      	adds	r3, r2, r3
 80112e0:	3304      	adds	r3, #4
 80112e2:	e009      	b.n	80112f8 <USBD_StdEPReq+0x1b6>
                                         &pdev->ep_out[ep_addr & 0x7F];
 80112e4:	230e      	movs	r3, #14
 80112e6:	18fb      	adds	r3, r7, r3
 80112e8:	781b      	ldrb	r3, [r3, #0]
 80112ea:	227f      	movs	r2, #127	; 0x7f
 80112ec:	4013      	ands	r3, r2
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 80112ee:	3310      	adds	r3, #16
 80112f0:	011b      	lsls	r3, r3, #4
 80112f2:	687a      	ldr	r2, [r7, #4]
 80112f4:	18d3      	adds	r3, r2, r3
 80112f6:	3304      	adds	r3, #4
 80112f8:	60bb      	str	r3, [r7, #8]
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 80112fa:	230e      	movs	r3, #14
 80112fc:	18fb      	adds	r3, r7, r3
 80112fe:	781a      	ldrb	r2, [r3, #0]
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	0011      	movs	r1, r2
 8011304:	0018      	movs	r0, r3
 8011306:	f7ff fb95 	bl	8010a34 <USBD_LL_IsStallEP>
 801130a:	1e03      	subs	r3, r0, #0
 801130c:	d003      	beq.n	8011316 <USBD_StdEPReq+0x1d4>
        pep->status = 0x0001;     
 801130e:	68bb      	ldr	r3, [r7, #8]
 8011310:	2201      	movs	r2, #1
 8011312:	601a      	str	r2, [r3, #0]
 8011314:	e002      	b.n	801131c <USBD_StdEPReq+0x1da>
        pep->status = 0x0000;  
 8011316:	68bb      	ldr	r3, [r7, #8]
 8011318:	2200      	movs	r2, #0
 801131a:	601a      	str	r2, [r3, #0]
                        (uint8_t *)&pep->status,
 801131c:	68b9      	ldr	r1, [r7, #8]
      USBD_CtlSendData (pdev,
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	2202      	movs	r2, #2
 8011322:	0018      	movs	r0, r3
 8011324:	f000 fdf0 	bl	8011f08 <USBD_CtlSendData>
      break;
 8011328:	e007      	b.n	801133a <USBD_StdEPReq+0x1f8>
      USBD_CtlError(pdev , req);
 801132a:	683a      	ldr	r2, [r7, #0]
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	0011      	movs	r1, r2
 8011330:	0018      	movs	r0, r3
 8011332:	f000 fa85 	bl	8011840 <USBD_CtlError>
      break;
 8011336:	e000      	b.n	801133a <USBD_StdEPReq+0x1f8>
      break;	
 8011338:	46c0      	nop			; (mov r8, r8)
    break;
 801133a:	46c0      	nop			; (mov r8, r8)
  }
  return ret;
 801133c:	230f      	movs	r3, #15
 801133e:	18fb      	adds	r3, r7, r3
 8011340:	781b      	ldrb	r3, [r3, #0]
}
 8011342:	0018      	movs	r0, r3
 8011344:	46bd      	mov	sp, r7
 8011346:	b004      	add	sp, #16
 8011348:	bd80      	pop	{r7, pc}

0801134a <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev , 
                               USBD_SetupReqTypedef *req)
{
 801134a:	b580      	push	{r7, lr}
 801134c:	b084      	sub	sp, #16
 801134e:	af00      	add	r7, sp, #0
 8011350:	6078      	str	r0, [r7, #4]
 8011352:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;
  
    
  switch (req->wValue >> 8)
 8011354:	683b      	ldr	r3, [r7, #0]
 8011356:	885b      	ldrh	r3, [r3, #2]
 8011358:	0a1b      	lsrs	r3, r3, #8
 801135a:	b29b      	uxth	r3, r3
 801135c:	2b02      	cmp	r3, #2
 801135e:	d011      	beq.n	8011384 <USBD_GetDescriptor+0x3a>
 8011360:	2b03      	cmp	r3, #3
 8011362:	d01b      	beq.n	801139c <USBD_GetDescriptor+0x52>
 8011364:	2b01      	cmp	r3, #1
 8011366:	d167      	bne.n	8011438 <USBD_GetDescriptor+0xee>
  {
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8011368:	687a      	ldr	r2, [r7, #4]
 801136a:	2383      	movs	r3, #131	; 0x83
 801136c:	009b      	lsls	r3, r3, #2
 801136e:	58d3      	ldr	r3, [r2, r3]
 8011370:	681b      	ldr	r3, [r3, #0]
 8011372:	687a      	ldr	r2, [r7, #4]
 8011374:	7c12      	ldrb	r2, [r2, #16]
 8011376:	210a      	movs	r1, #10
 8011378:	1879      	adds	r1, r7, r1
 801137a:	0010      	movs	r0, r2
 801137c:	4798      	blx	r3
 801137e:	0003      	movs	r3, r0
 8011380:	60fb      	str	r3, [r7, #12]
    break;
 8011382:	e060      	b.n	8011446 <USBD_GetDescriptor+0xfc>
    
  case USB_DESC_TYPE_CONFIGURATION:     
    pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8011384:	687a      	ldr	r2, [r7, #4]
 8011386:	2384      	movs	r3, #132	; 0x84
 8011388:	009b      	lsls	r3, r3, #2
 801138a:	58d3      	ldr	r3, [r2, r3]
 801138c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801138e:	220a      	movs	r2, #10
 8011390:	18ba      	adds	r2, r7, r2
 8011392:	0010      	movs	r0, r2
 8011394:	4798      	blx	r3
 8011396:	0003      	movs	r3, r0
 8011398:	60fb      	str	r3, [r7, #12]
    break;
 801139a:	e054      	b.n	8011446 <USBD_GetDescriptor+0xfc>
    
  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 801139c:	683b      	ldr	r3, [r7, #0]
 801139e:	885b      	ldrh	r3, [r3, #2]
 80113a0:	b2db      	uxtb	r3, r3
 80113a2:	2b01      	cmp	r3, #1
 80113a4:	d016      	beq.n	80113d4 <USBD_GetDescriptor+0x8a>
 80113a6:	dc02      	bgt.n	80113ae <USBD_GetDescriptor+0x64>
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	d005      	beq.n	80113b8 <USBD_GetDescriptor+0x6e>
 80113ac:	e03c      	b.n	8011428 <USBD_GetDescriptor+0xde>
 80113ae:	2b02      	cmp	r3, #2
 80113b0:	d01e      	beq.n	80113f0 <USBD_GetDescriptor+0xa6>
 80113b2:	2b03      	cmp	r3, #3
 80113b4:	d02a      	beq.n	801140c <USBD_GetDescriptor+0xc2>
 80113b6:	e037      	b.n	8011428 <USBD_GetDescriptor+0xde>
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 80113b8:	687a      	ldr	r2, [r7, #4]
 80113ba:	2383      	movs	r3, #131	; 0x83
 80113bc:	009b      	lsls	r3, r3, #2
 80113be:	58d3      	ldr	r3, [r2, r3]
 80113c0:	685b      	ldr	r3, [r3, #4]
 80113c2:	687a      	ldr	r2, [r7, #4]
 80113c4:	7c12      	ldrb	r2, [r2, #16]
 80113c6:	210a      	movs	r1, #10
 80113c8:	1879      	adds	r1, r7, r1
 80113ca:	0010      	movs	r0, r2
 80113cc:	4798      	blx	r3
 80113ce:	0003      	movs	r3, r0
 80113d0:	60fb      	str	r3, [r7, #12]
      break;
 80113d2:	e030      	b.n	8011436 <USBD_GetDescriptor+0xec>
      
    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80113d4:	687a      	ldr	r2, [r7, #4]
 80113d6:	2383      	movs	r3, #131	; 0x83
 80113d8:	009b      	lsls	r3, r3, #2
 80113da:	58d3      	ldr	r3, [r2, r3]
 80113dc:	689b      	ldr	r3, [r3, #8]
 80113de:	687a      	ldr	r2, [r7, #4]
 80113e0:	7c12      	ldrb	r2, [r2, #16]
 80113e2:	210a      	movs	r1, #10
 80113e4:	1879      	adds	r1, r7, r1
 80113e6:	0010      	movs	r0, r2
 80113e8:	4798      	blx	r3
 80113ea:	0003      	movs	r3, r0
 80113ec:	60fb      	str	r3, [r7, #12]
      break;
 80113ee:	e022      	b.n	8011436 <USBD_GetDescriptor+0xec>
      
    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80113f0:	687a      	ldr	r2, [r7, #4]
 80113f2:	2383      	movs	r3, #131	; 0x83
 80113f4:	009b      	lsls	r3, r3, #2
 80113f6:	58d3      	ldr	r3, [r2, r3]
 80113f8:	68db      	ldr	r3, [r3, #12]
 80113fa:	687a      	ldr	r2, [r7, #4]
 80113fc:	7c12      	ldrb	r2, [r2, #16]
 80113fe:	210a      	movs	r1, #10
 8011400:	1879      	adds	r1, r7, r1
 8011402:	0010      	movs	r0, r2
 8011404:	4798      	blx	r3
 8011406:	0003      	movs	r3, r0
 8011408:	60fb      	str	r3, [r7, #12]
      break;
 801140a:	e014      	b.n	8011436 <USBD_GetDescriptor+0xec>
      
    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801140c:	687a      	ldr	r2, [r7, #4]
 801140e:	2383      	movs	r3, #131	; 0x83
 8011410:	009b      	lsls	r3, r3, #2
 8011412:	58d3      	ldr	r3, [r2, r3]
 8011414:	691b      	ldr	r3, [r3, #16]
 8011416:	687a      	ldr	r2, [r7, #4]
 8011418:	7c12      	ldrb	r2, [r2, #16]
 801141a:	210a      	movs	r1, #10
 801141c:	1879      	adds	r1, r7, r1
 801141e:	0010      	movs	r0, r2
 8011420:	4798      	blx	r3
 8011422:	0003      	movs	r3, r0
 8011424:	60fb      	str	r3, [r7, #12]
      break;
 8011426:	e006      	b.n	8011436 <USBD_GetDescriptor+0xec>
      
    default:
       USBD_CtlError(pdev , req);
 8011428:	683a      	ldr	r2, [r7, #0]
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	0011      	movs	r1, r2
 801142e:	0018      	movs	r0, r3
 8011430:	f000 fa06 	bl	8011840 <USBD_CtlError>
      return;
 8011434:	e027      	b.n	8011486 <USBD_GetDescriptor+0x13c>
    }
    break;
 8011436:	e006      	b.n	8011446 <USBD_GetDescriptor+0xfc>

  default: 
     USBD_CtlError(pdev , req);
 8011438:	683a      	ldr	r2, [r7, #0]
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	0011      	movs	r1, r2
 801143e:	0018      	movs	r0, r3
 8011440:	f000 f9fe 	bl	8011840 <USBD_CtlError>
    return;
 8011444:	e01f      	b.n	8011486 <USBD_GetDescriptor+0x13c>
  }
  
  if((len != 0)&& (req->wLength != 0))
 8011446:	230a      	movs	r3, #10
 8011448:	18fb      	adds	r3, r7, r3
 801144a:	881b      	ldrh	r3, [r3, #0]
 801144c:	2b00      	cmp	r3, #0
 801144e:	d01a      	beq.n	8011486 <USBD_GetDescriptor+0x13c>
 8011450:	683b      	ldr	r3, [r7, #0]
 8011452:	88db      	ldrh	r3, [r3, #6]
 8011454:	2b00      	cmp	r3, #0
 8011456:	d016      	beq.n	8011486 <USBD_GetDescriptor+0x13c>
  {
    
    len = MIN(len , req->wLength);
 8011458:	683b      	ldr	r3, [r7, #0]
 801145a:	88da      	ldrh	r2, [r3, #6]
 801145c:	230a      	movs	r3, #10
 801145e:	18fb      	adds	r3, r7, r3
 8011460:	881b      	ldrh	r3, [r3, #0]
 8011462:	1c18      	adds	r0, r3, #0
 8011464:	1c11      	adds	r1, r2, #0
 8011466:	b28a      	uxth	r2, r1
 8011468:	b283      	uxth	r3, r0
 801146a:	429a      	cmp	r2, r3
 801146c:	d900      	bls.n	8011470 <USBD_GetDescriptor+0x126>
 801146e:	1c01      	adds	r1, r0, #0
 8011470:	b28a      	uxth	r2, r1
 8011472:	210a      	movs	r1, #10
 8011474:	187b      	adds	r3, r7, r1
 8011476:	801a      	strh	r2, [r3, #0]
    
    USBD_CtlSendData (pdev, 
 8011478:	187b      	adds	r3, r7, r1
 801147a:	881a      	ldrh	r2, [r3, #0]
 801147c:	68f9      	ldr	r1, [r7, #12]
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	0018      	movs	r0, r3
 8011482:	f000 fd41 	bl	8011f08 <USBD_CtlSendData>
                      pbuf,
                      len);
  }
  
}
 8011486:	46bd      	mov	sp, r7
 8011488:	b004      	add	sp, #16
 801148a:	bd80      	pop	{r7, pc}

0801148c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 801148c:	b590      	push	{r4, r7, lr}
 801148e:	b085      	sub	sp, #20
 8011490:	af00      	add	r7, sp, #0
 8011492:	6078      	str	r0, [r7, #4]
 8011494:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 8011496:	683b      	ldr	r3, [r7, #0]
 8011498:	889b      	ldrh	r3, [r3, #4]
 801149a:	2b00      	cmp	r3, #0
 801149c:	d13a      	bne.n	8011514 <USBD_SetAddress+0x88>
 801149e:	683b      	ldr	r3, [r7, #0]
 80114a0:	88db      	ldrh	r3, [r3, #6]
 80114a2:	2b00      	cmp	r3, #0
 80114a4:	d136      	bne.n	8011514 <USBD_SetAddress+0x88>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 80114a6:	683b      	ldr	r3, [r7, #0]
 80114a8:	885b      	ldrh	r3, [r3, #2]
 80114aa:	b2da      	uxtb	r2, r3
 80114ac:	230f      	movs	r3, #15
 80114ae:	18fb      	adds	r3, r7, r3
 80114b0:	217f      	movs	r1, #127	; 0x7f
 80114b2:	400a      	ands	r2, r1
 80114b4:	701a      	strb	r2, [r3, #0]
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80114b6:	687a      	ldr	r2, [r7, #4]
 80114b8:	23fe      	movs	r3, #254	; 0xfe
 80114ba:	005b      	lsls	r3, r3, #1
 80114bc:	5cd3      	ldrb	r3, [r2, r3]
 80114be:	2b03      	cmp	r3, #3
 80114c0:	d106      	bne.n	80114d0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev , req);
 80114c2:	683a      	ldr	r2, [r7, #0]
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	0011      	movs	r1, r2
 80114c8:	0018      	movs	r0, r3
 80114ca:	f000 f9b9 	bl	8011840 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80114ce:	e027      	b.n	8011520 <USBD_SetAddress+0x94>
    } 
    else 
    {
      pdev->dev_address = dev_addr;
 80114d0:	687a      	ldr	r2, [r7, #4]
 80114d2:	240f      	movs	r4, #15
 80114d4:	1939      	adds	r1, r7, r4
 80114d6:	23ff      	movs	r3, #255	; 0xff
 80114d8:	005b      	lsls	r3, r3, #1
 80114da:	7809      	ldrb	r1, [r1, #0]
 80114dc:	54d1      	strb	r1, [r2, r3]
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 80114de:	193b      	adds	r3, r7, r4
 80114e0:	781a      	ldrb	r2, [r3, #0]
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	0011      	movs	r1, r2
 80114e6:	0018      	movs	r0, r3
 80114e8:	f7ff facf 	bl	8010a8a <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	0018      	movs	r0, r3
 80114f0:	f000 fd50 	bl	8011f94 <USBD_CtlSendStatus>
      
      if (dev_addr != 0) 
 80114f4:	193b      	adds	r3, r7, r4
 80114f6:	781b      	ldrb	r3, [r3, #0]
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	d005      	beq.n	8011508 <USBD_SetAddress+0x7c>
      {
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 80114fc:	687a      	ldr	r2, [r7, #4]
 80114fe:	23fe      	movs	r3, #254	; 0xfe
 8011500:	005b      	lsls	r3, r3, #1
 8011502:	2102      	movs	r1, #2
 8011504:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8011506:	e00b      	b.n	8011520 <USBD_SetAddress+0x94>
      } 
      else 
      {
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 8011508:	687a      	ldr	r2, [r7, #4]
 801150a:	23fe      	movs	r3, #254	; 0xfe
 801150c:	005b      	lsls	r3, r3, #1
 801150e:	2101      	movs	r1, #1
 8011510:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8011512:	e005      	b.n	8011520 <USBD_SetAddress+0x94>
      }
    }
  } 
  else 
  {
     USBD_CtlError(pdev , req);                        
 8011514:	683a      	ldr	r2, [r7, #0]
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	0011      	movs	r1, r2
 801151a:	0018      	movs	r0, r3
 801151c:	f000 f990 	bl	8011840 <USBD_CtlError>
  } 
}
 8011520:	46c0      	nop			; (mov r8, r8)
 8011522:	46bd      	mov	sp, r7
 8011524:	b005      	add	sp, #20
 8011526:	bd90      	pop	{r4, r7, pc}

08011528 <USBD_SetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 8011528:	b580      	push	{r7, lr}
 801152a:	b082      	sub	sp, #8
 801152c:	af00      	add	r7, sp, #0
 801152e:	6078      	str	r0, [r7, #4]
 8011530:	6039      	str	r1, [r7, #0]
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 8011532:	683b      	ldr	r3, [r7, #0]
 8011534:	885b      	ldrh	r3, [r3, #2]
 8011536:	b2da      	uxtb	r2, r3
 8011538:	4b48      	ldr	r3, [pc, #288]	; (801165c <USBD_SetConfig+0x134>)
 801153a:	701a      	strb	r2, [r3, #0]
  
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 801153c:	4b47      	ldr	r3, [pc, #284]	; (801165c <USBD_SetConfig+0x134>)
 801153e:	781b      	ldrb	r3, [r3, #0]
 8011540:	2b01      	cmp	r3, #1
 8011542:	d906      	bls.n	8011552 <USBD_SetConfig+0x2a>
  {            
     USBD_CtlError(pdev , req);                              
 8011544:	683a      	ldr	r2, [r7, #0]
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	0011      	movs	r1, r2
 801154a:	0018      	movs	r0, r3
 801154c:	f000 f978 	bl	8011840 <USBD_CtlError>
 8011550:	e081      	b.n	8011656 <USBD_SetConfig+0x12e>
  } 
  else 
  {
    switch (pdev->dev_state) 
 8011552:	687a      	ldr	r2, [r7, #4]
 8011554:	23fe      	movs	r3, #254	; 0xfe
 8011556:	005b      	lsls	r3, r3, #1
 8011558:	5cd3      	ldrb	r3, [r2, r3]
 801155a:	2b02      	cmp	r3, #2
 801155c:	d002      	beq.n	8011564 <USBD_SetConfig+0x3c>
 801155e:	2b03      	cmp	r3, #3
 8011560:	d029      	beq.n	80115b6 <USBD_SetConfig+0x8e>
 8011562:	e071      	b.n	8011648 <USBD_SetConfig+0x120>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx) 
 8011564:	4b3d      	ldr	r3, [pc, #244]	; (801165c <USBD_SetConfig+0x134>)
 8011566:	781b      	ldrb	r3, [r3, #0]
 8011568:	2b00      	cmp	r3, #0
 801156a:	d01f      	beq.n	80115ac <USBD_SetConfig+0x84>
      {                                			   							   							   				
        pdev->dev_config = cfgidx;
 801156c:	4b3b      	ldr	r3, [pc, #236]	; (801165c <USBD_SetConfig+0x134>)
 801156e:	781b      	ldrb	r3, [r3, #0]
 8011570:	001a      	movs	r2, r3
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8011576:	687a      	ldr	r2, [r7, #4]
 8011578:	23fe      	movs	r3, #254	; 0xfe
 801157a:	005b      	lsls	r3, r3, #1
 801157c:	2103      	movs	r1, #3
 801157e:	54d1      	strb	r1, [r2, r3]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8011580:	4b36      	ldr	r3, [pc, #216]	; (801165c <USBD_SetConfig+0x134>)
 8011582:	781a      	ldrb	r2, [r3, #0]
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	0011      	movs	r1, r2
 8011588:	0018      	movs	r0, r3
 801158a:	f7ff fb5b 	bl	8010c44 <USBD_SetClassConfig>
 801158e:	0003      	movs	r3, r0
 8011590:	2b02      	cmp	r3, #2
 8011592:	d106      	bne.n	80115a2 <USBD_SetConfig+0x7a>
        {
          USBD_CtlError(pdev , req);  
 8011594:	683a      	ldr	r2, [r7, #0]
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	0011      	movs	r1, r2
 801159a:	0018      	movs	r0, r3
 801159c:	f000 f950 	bl	8011840 <USBD_CtlError>
          return;
 80115a0:	e059      	b.n	8011656 <USBD_SetConfig+0x12e>
        }
        USBD_CtlSendStatus(pdev);
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	0018      	movs	r0, r3
 80115a6:	f000 fcf5 	bl	8011f94 <USBD_CtlSendStatus>
      }
      else 
      {
         USBD_CtlSendStatus(pdev);
      }
      break;
 80115aa:	e054      	b.n	8011656 <USBD_SetConfig+0x12e>
         USBD_CtlSendStatus(pdev);
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	0018      	movs	r0, r3
 80115b0:	f000 fcf0 	bl	8011f94 <USBD_CtlSendStatus>
      break;
 80115b4:	e04f      	b.n	8011656 <USBD_SetConfig+0x12e>
      
    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0) 
 80115b6:	4b29      	ldr	r3, [pc, #164]	; (801165c <USBD_SetConfig+0x134>)
 80115b8:	781b      	ldrb	r3, [r3, #0]
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	d115      	bne.n	80115ea <USBD_SetConfig+0xc2>
      {                           
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80115be:	687a      	ldr	r2, [r7, #4]
 80115c0:	23fe      	movs	r3, #254	; 0xfe
 80115c2:	005b      	lsls	r3, r3, #1
 80115c4:	2102      	movs	r1, #2
 80115c6:	54d1      	strb	r1, [r2, r3]
        pdev->dev_config = cfgidx;          
 80115c8:	4b24      	ldr	r3, [pc, #144]	; (801165c <USBD_SetConfig+0x134>)
 80115ca:	781b      	ldrb	r3, [r3, #0]
 80115cc:	001a      	movs	r2, r3
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 80115d2:	4b22      	ldr	r3, [pc, #136]	; (801165c <USBD_SetConfig+0x134>)
 80115d4:	781a      	ldrb	r2, [r3, #0]
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	0011      	movs	r1, r2
 80115da:	0018      	movs	r0, r3
 80115dc:	f7ff fb5a 	bl	8010c94 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	0018      	movs	r0, r3
 80115e4:	f000 fcd6 	bl	8011f94 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 80115e8:	e035      	b.n	8011656 <USBD_SetConfig+0x12e>
      else  if (cfgidx != pdev->dev_config) 
 80115ea:	4b1c      	ldr	r3, [pc, #112]	; (801165c <USBD_SetConfig+0x134>)
 80115ec:	781b      	ldrb	r3, [r3, #0]
 80115ee:	001a      	movs	r2, r3
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	685b      	ldr	r3, [r3, #4]
 80115f4:	429a      	cmp	r2, r3
 80115f6:	d022      	beq.n	801163e <USBD_SetConfig+0x116>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	685b      	ldr	r3, [r3, #4]
 80115fc:	b2da      	uxtb	r2, r3
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	0011      	movs	r1, r2
 8011602:	0018      	movs	r0, r3
 8011604:	f7ff fb46 	bl	8010c94 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8011608:	4b14      	ldr	r3, [pc, #80]	; (801165c <USBD_SetConfig+0x134>)
 801160a:	781b      	ldrb	r3, [r3, #0]
 801160c:	001a      	movs	r2, r3
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8011612:	4b12      	ldr	r3, [pc, #72]	; (801165c <USBD_SetConfig+0x134>)
 8011614:	781a      	ldrb	r2, [r3, #0]
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	0011      	movs	r1, r2
 801161a:	0018      	movs	r0, r3
 801161c:	f7ff fb12 	bl	8010c44 <USBD_SetClassConfig>
 8011620:	0003      	movs	r3, r0
 8011622:	2b02      	cmp	r3, #2
 8011624:	d106      	bne.n	8011634 <USBD_SetConfig+0x10c>
          USBD_CtlError(pdev , req);  
 8011626:	683a      	ldr	r2, [r7, #0]
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	0011      	movs	r1, r2
 801162c:	0018      	movs	r0, r3
 801162e:	f000 f907 	bl	8011840 <USBD_CtlError>
          return;
 8011632:	e010      	b.n	8011656 <USBD_SetConfig+0x12e>
        USBD_CtlSendStatus(pdev);
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	0018      	movs	r0, r3
 8011638:	f000 fcac 	bl	8011f94 <USBD_CtlSendStatus>
      break;
 801163c:	e00b      	b.n	8011656 <USBD_SetConfig+0x12e>
        USBD_CtlSendStatus(pdev);
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	0018      	movs	r0, r3
 8011642:	f000 fca7 	bl	8011f94 <USBD_CtlSendStatus>
      break;
 8011646:	e006      	b.n	8011656 <USBD_SetConfig+0x12e>
      
    default:					
       USBD_CtlError(pdev , req);                     
 8011648:	683a      	ldr	r2, [r7, #0]
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	0011      	movs	r1, r2
 801164e:	0018      	movs	r0, r3
 8011650:	f000 f8f6 	bl	8011840 <USBD_CtlError>
      break;
 8011654:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 8011656:	46bd      	mov	sp, r7
 8011658:	b002      	add	sp, #8
 801165a:	bd80      	pop	{r7, pc}
 801165c:	20002854 	.word	0x20002854

08011660 <USBD_GetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 8011660:	b580      	push	{r7, lr}
 8011662:	b082      	sub	sp, #8
 8011664:	af00      	add	r7, sp, #0
 8011666:	6078      	str	r0, [r7, #4]
 8011668:	6039      	str	r1, [r7, #0]

  if (req->wLength != 1) 
 801166a:	683b      	ldr	r3, [r7, #0]
 801166c:	88db      	ldrh	r3, [r3, #6]
 801166e:	2b01      	cmp	r3, #1
 8011670:	d006      	beq.n	8011680 <USBD_GetConfig+0x20>
  {                   
     USBD_CtlError(pdev , req);
 8011672:	683a      	ldr	r2, [r7, #0]
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	0011      	movs	r1, r2
 8011678:	0018      	movs	r0, r3
 801167a:	f000 f8e1 	bl	8011840 <USBD_CtlError>
    default:
       USBD_CtlError(pdev , req);
      break;
    }
  }
}
 801167e:	e023      	b.n	80116c8 <USBD_GetConfig+0x68>
    switch (pdev->dev_state )  
 8011680:	687a      	ldr	r2, [r7, #4]
 8011682:	23fe      	movs	r3, #254	; 0xfe
 8011684:	005b      	lsls	r3, r3, #1
 8011686:	5cd3      	ldrb	r3, [r2, r3]
 8011688:	2b02      	cmp	r3, #2
 801168a:	d002      	beq.n	8011692 <USBD_GetConfig+0x32>
 801168c:	2b03      	cmp	r3, #3
 801168e:	d00c      	beq.n	80116aa <USBD_GetConfig+0x4a>
 8011690:	e013      	b.n	80116ba <USBD_GetConfig+0x5a>
      pdev->dev_default_config = 0;
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	2200      	movs	r2, #0
 8011696:	609a      	str	r2, [r3, #8]
                        (uint8_t *)&pdev->dev_default_config,
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	3308      	adds	r3, #8
 801169c:	0019      	movs	r1, r3
      USBD_CtlSendData (pdev, 
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	2201      	movs	r2, #1
 80116a2:	0018      	movs	r0, r3
 80116a4:	f000 fc30 	bl	8011f08 <USBD_CtlSendData>
      break;
 80116a8:	e00e      	b.n	80116c8 <USBD_GetConfig+0x68>
                        (uint8_t *)&pdev->dev_config,
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	1d19      	adds	r1, r3, #4
      USBD_CtlSendData (pdev, 
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	2201      	movs	r2, #1
 80116b2:	0018      	movs	r0, r3
 80116b4:	f000 fc28 	bl	8011f08 <USBD_CtlSendData>
      break;
 80116b8:	e006      	b.n	80116c8 <USBD_GetConfig+0x68>
       USBD_CtlError(pdev , req);
 80116ba:	683a      	ldr	r2, [r7, #0]
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	0011      	movs	r1, r2
 80116c0:	0018      	movs	r0, r3
 80116c2:	f000 f8bd 	bl	8011840 <USBD_CtlError>
      break;
 80116c6:	46c0      	nop			; (mov r8, r8)
}
 80116c8:	46c0      	nop			; (mov r8, r8)
 80116ca:	46bd      	mov	sp, r7
 80116cc:	b002      	add	sp, #8
 80116ce:	bd80      	pop	{r7, pc}

080116d0 <USBD_GetStatus>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 80116d0:	b580      	push	{r7, lr}
 80116d2:	b082      	sub	sp, #8
 80116d4:	af00      	add	r7, sp, #0
 80116d6:	6078      	str	r0, [r7, #4]
 80116d8:	6039      	str	r1, [r7, #0]
  
    
  switch (pdev->dev_state) 
 80116da:	687a      	ldr	r2, [r7, #4]
 80116dc:	23fe      	movs	r3, #254	; 0xfe
 80116de:	005b      	lsls	r3, r3, #1
 80116e0:	5cd3      	ldrb	r3, [r2, r3]
 80116e2:	3b02      	subs	r3, #2
 80116e4:	2b01      	cmp	r3, #1
 80116e6:	d817      	bhi.n	8011718 <USBD_GetStatus+0x48>
  case USBD_STATE_CONFIGURED:
    
#if ( USBD_SELF_POWERED == 1)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
#else
    pdev->dev_config_status = 0;                                   
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	2200      	movs	r2, #0
 80116ec:	60da      	str	r2, [r3, #12]
#endif
                      
    if (pdev->dev_remote_wakeup) 
 80116ee:	687a      	ldr	r2, [r7, #4]
 80116f0:	2380      	movs	r3, #128	; 0x80
 80116f2:	009b      	lsls	r3, r3, #2
 80116f4:	58d3      	ldr	r3, [r2, r3]
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	d005      	beq.n	8011706 <USBD_GetStatus+0x36>
    {
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	68db      	ldr	r3, [r3, #12]
 80116fe:	2202      	movs	r2, #2
 8011700:	431a      	orrs	r2, r3
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	60da      	str	r2, [r3, #12]
    }
    
    USBD_CtlSendData (pdev, 
                      (uint8_t *)& pdev->dev_config_status,
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	330c      	adds	r3, #12
 801170a:	0019      	movs	r1, r3
    USBD_CtlSendData (pdev, 
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	2202      	movs	r2, #2
 8011710:	0018      	movs	r0, r3
 8011712:	f000 fbf9 	bl	8011f08 <USBD_CtlSendData>
                      2);
    break;
 8011716:	e006      	b.n	8011726 <USBD_GetStatus+0x56>
    
  default :
    USBD_CtlError(pdev , req);                        
 8011718:	683a      	ldr	r2, [r7, #0]
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	0011      	movs	r1, r2
 801171e:	0018      	movs	r0, r3
 8011720:	f000 f88e 	bl	8011840 <USBD_CtlError>
    break;
 8011724:	46c0      	nop			; (mov r8, r8)
  }
}
 8011726:	46c0      	nop			; (mov r8, r8)
 8011728:	46bd      	mov	sp, r7
 801172a:	b002      	add	sp, #8
 801172c:	bd80      	pop	{r7, pc}

0801172e <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 801172e:	b580      	push	{r7, lr}
 8011730:	b082      	sub	sp, #8
 8011732:	af00      	add	r7, sp, #0
 8011734:	6078      	str	r0, [r7, #4]
 8011736:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8011738:	683b      	ldr	r3, [r7, #0]
 801173a:	885b      	ldrh	r3, [r3, #2]
 801173c:	2b01      	cmp	r3, #1
 801173e:	d111      	bne.n	8011764 <USBD_SetFeature+0x36>
  {
    pdev->dev_remote_wakeup = 1;  
 8011740:	687a      	ldr	r2, [r7, #4]
 8011742:	2380      	movs	r3, #128	; 0x80
 8011744:	009b      	lsls	r3, r3, #2
 8011746:	2101      	movs	r1, #1
 8011748:	50d1      	str	r1, [r2, r3]
    pdev->pClass->Setup (pdev, req);   
 801174a:	687a      	ldr	r2, [r7, #4]
 801174c:	2384      	movs	r3, #132	; 0x84
 801174e:	009b      	lsls	r3, r3, #2
 8011750:	58d3      	ldr	r3, [r2, r3]
 8011752:	689b      	ldr	r3, [r3, #8]
 8011754:	6839      	ldr	r1, [r7, #0]
 8011756:	687a      	ldr	r2, [r7, #4]
 8011758:	0010      	movs	r0, r2
 801175a:	4798      	blx	r3
    USBD_CtlSendStatus(pdev);
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	0018      	movs	r0, r3
 8011760:	f000 fc18 	bl	8011f94 <USBD_CtlSendStatus>
  }

}
 8011764:	46c0      	nop			; (mov r8, r8)
 8011766:	46bd      	mov	sp, r7
 8011768:	b002      	add	sp, #8
 801176a:	bd80      	pop	{r7, pc}

0801176c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 801176c:	b580      	push	{r7, lr}
 801176e:	b082      	sub	sp, #8
 8011770:	af00      	add	r7, sp, #0
 8011772:	6078      	str	r0, [r7, #4]
 8011774:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8011776:	687a      	ldr	r2, [r7, #4]
 8011778:	23fe      	movs	r3, #254	; 0xfe
 801177a:	005b      	lsls	r3, r3, #1
 801177c:	5cd3      	ldrb	r3, [r2, r3]
 801177e:	3b02      	subs	r3, #2
 8011780:	2b01      	cmp	r3, #1
 8011782:	d816      	bhi.n	80117b2 <USBD_ClrFeature+0x46>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 8011784:	683b      	ldr	r3, [r7, #0]
 8011786:	885b      	ldrh	r3, [r3, #2]
 8011788:	2b01      	cmp	r3, #1
 801178a:	d119      	bne.n	80117c0 <USBD_ClrFeature+0x54>
    {
      pdev->dev_remote_wakeup = 0; 
 801178c:	687a      	ldr	r2, [r7, #4]
 801178e:	2380      	movs	r3, #128	; 0x80
 8011790:	009b      	lsls	r3, r3, #2
 8011792:	2100      	movs	r1, #0
 8011794:	50d1      	str	r1, [r2, r3]
      pdev->pClass->Setup (pdev, req);   
 8011796:	687a      	ldr	r2, [r7, #4]
 8011798:	2384      	movs	r3, #132	; 0x84
 801179a:	009b      	lsls	r3, r3, #2
 801179c:	58d3      	ldr	r3, [r2, r3]
 801179e:	689b      	ldr	r3, [r3, #8]
 80117a0:	6839      	ldr	r1, [r7, #0]
 80117a2:	687a      	ldr	r2, [r7, #4]
 80117a4:	0010      	movs	r0, r2
 80117a6:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	0018      	movs	r0, r3
 80117ac:	f000 fbf2 	bl	8011f94 <USBD_CtlSendStatus>
    }
    break;
 80117b0:	e006      	b.n	80117c0 <USBD_ClrFeature+0x54>
    
  default :
     USBD_CtlError(pdev , req);
 80117b2:	683a      	ldr	r2, [r7, #0]
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	0011      	movs	r1, r2
 80117b8:	0018      	movs	r0, r3
 80117ba:	f000 f841 	bl	8011840 <USBD_CtlError>
    break;
 80117be:	e000      	b.n	80117c2 <USBD_ClrFeature+0x56>
    break;
 80117c0:	46c0      	nop			; (mov r8, r8)
  }
}
 80117c2:	46c0      	nop			; (mov r8, r8)
 80117c4:	46bd      	mov	sp, r7
 80117c6:	b002      	add	sp, #8
 80117c8:	bd80      	pop	{r7, pc}

080117ca <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80117ca:	b580      	push	{r7, lr}
 80117cc:	b082      	sub	sp, #8
 80117ce:	af00      	add	r7, sp, #0
 80117d0:	6078      	str	r0, [r7, #4]
 80117d2:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 80117d4:	683b      	ldr	r3, [r7, #0]
 80117d6:	781a      	ldrb	r2, [r3, #0]
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 80117dc:	683b      	ldr	r3, [r7, #0]
 80117de:	785a      	ldrb	r2, [r3, #1]
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 80117e4:	683b      	ldr	r3, [r7, #0]
 80117e6:	3302      	adds	r3, #2
 80117e8:	781b      	ldrb	r3, [r3, #0]
 80117ea:	b29a      	uxth	r2, r3
 80117ec:	683b      	ldr	r3, [r7, #0]
 80117ee:	3303      	adds	r3, #3
 80117f0:	781b      	ldrb	r3, [r3, #0]
 80117f2:	b29b      	uxth	r3, r3
 80117f4:	021b      	lsls	r3, r3, #8
 80117f6:	b29b      	uxth	r3, r3
 80117f8:	18d3      	adds	r3, r2, r3
 80117fa:	b29a      	uxth	r2, r3
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8011800:	683b      	ldr	r3, [r7, #0]
 8011802:	3304      	adds	r3, #4
 8011804:	781b      	ldrb	r3, [r3, #0]
 8011806:	b29a      	uxth	r2, r3
 8011808:	683b      	ldr	r3, [r7, #0]
 801180a:	3305      	adds	r3, #5
 801180c:	781b      	ldrb	r3, [r3, #0]
 801180e:	b29b      	uxth	r3, r3
 8011810:	021b      	lsls	r3, r3, #8
 8011812:	b29b      	uxth	r3, r3
 8011814:	18d3      	adds	r3, r2, r3
 8011816:	b29a      	uxth	r2, r3
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 801181c:	683b      	ldr	r3, [r7, #0]
 801181e:	3306      	adds	r3, #6
 8011820:	781b      	ldrb	r3, [r3, #0]
 8011822:	b29a      	uxth	r2, r3
 8011824:	683b      	ldr	r3, [r7, #0]
 8011826:	3307      	adds	r3, #7
 8011828:	781b      	ldrb	r3, [r3, #0]
 801182a:	b29b      	uxth	r3, r3
 801182c:	021b      	lsls	r3, r3, #8
 801182e:	b29b      	uxth	r3, r3
 8011830:	18d3      	adds	r3, r2, r3
 8011832:	b29a      	uxth	r2, r3
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	80da      	strh	r2, [r3, #6]

}
 8011838:	46c0      	nop			; (mov r8, r8)
 801183a:	46bd      	mov	sp, r7
 801183c:	b002      	add	sp, #8
 801183e:	bd80      	pop	{r7, pc}

08011840 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8011840:	b580      	push	{r7, lr}
 8011842:	b082      	sub	sp, #8
 8011844:	af00      	add	r7, sp, #0
 8011846:	6078      	str	r0, [r7, #4]
 8011848:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80);
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	2180      	movs	r1, #128	; 0x80
 801184e:	0018      	movs	r0, r3
 8011850:	f7ff f8c4 	bl	80109dc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	2100      	movs	r1, #0
 8011858:	0018      	movs	r0, r3
 801185a:	f7ff f8bf 	bl	80109dc <USBD_LL_StallEP>
}
 801185e:	46c0      	nop			; (mov r8, r8)
 8011860:	46bd      	mov	sp, r7
 8011862:	b002      	add	sp, #8
 8011864:	bd80      	pop	{r7, pc}

08011866 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8011866:	b590      	push	{r4, r7, lr}
 8011868:	b087      	sub	sp, #28
 801186a:	af00      	add	r7, sp, #0
 801186c:	60f8      	str	r0, [r7, #12]
 801186e:	60b9      	str	r1, [r7, #8]
 8011870:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0;
 8011872:	2317      	movs	r3, #23
 8011874:	18fb      	adds	r3, r7, r3
 8011876:	2200      	movs	r2, #0
 8011878:	701a      	strb	r2, [r3, #0]
  
  if (desc != NULL) 
 801187a:	68fb      	ldr	r3, [r7, #12]
 801187c:	2b00      	cmp	r3, #0
 801187e:	d03e      	beq.n	80118fe <USBD_GetString+0x98>
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
 8011880:	68fb      	ldr	r3, [r7, #12]
 8011882:	0018      	movs	r0, r3
 8011884:	f000 f83f 	bl	8011906 <USBD_GetLen>
 8011888:	0003      	movs	r3, r0
 801188a:	3301      	adds	r3, #1
 801188c:	b29b      	uxth	r3, r3
 801188e:	18db      	adds	r3, r3, r3
 8011890:	b29a      	uxth	r2, r3
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *len;
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	8819      	ldrh	r1, [r3, #0]
 801189a:	2417      	movs	r4, #23
 801189c:	193b      	adds	r3, r7, r4
 801189e:	781b      	ldrb	r3, [r3, #0]
 80118a0:	193a      	adds	r2, r7, r4
 80118a2:	1c58      	adds	r0, r3, #1
 80118a4:	7010      	strb	r0, [r2, #0]
 80118a6:	001a      	movs	r2, r3
 80118a8:	68bb      	ldr	r3, [r7, #8]
 80118aa:	189b      	adds	r3, r3, r2
 80118ac:	b2ca      	uxtb	r2, r1
 80118ae:	701a      	strb	r2, [r3, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 80118b0:	193b      	adds	r3, r7, r4
 80118b2:	781b      	ldrb	r3, [r3, #0]
 80118b4:	193a      	adds	r2, r7, r4
 80118b6:	1c59      	adds	r1, r3, #1
 80118b8:	7011      	strb	r1, [r2, #0]
 80118ba:	001a      	movs	r2, r3
 80118bc:	68bb      	ldr	r3, [r7, #8]
 80118be:	189b      	adds	r3, r3, r2
 80118c0:	2203      	movs	r2, #3
 80118c2:	701a      	strb	r2, [r3, #0]
    
    while (*desc != '\0') 
 80118c4:	e017      	b.n	80118f6 <USBD_GetString+0x90>
    {
      unicode[idx++] = *desc++;
 80118c6:	68fb      	ldr	r3, [r7, #12]
 80118c8:	1c5a      	adds	r2, r3, #1
 80118ca:	60fa      	str	r2, [r7, #12]
 80118cc:	2417      	movs	r4, #23
 80118ce:	193a      	adds	r2, r7, r4
 80118d0:	7812      	ldrb	r2, [r2, #0]
 80118d2:	1939      	adds	r1, r7, r4
 80118d4:	1c50      	adds	r0, r2, #1
 80118d6:	7008      	strb	r0, [r1, #0]
 80118d8:	0011      	movs	r1, r2
 80118da:	68ba      	ldr	r2, [r7, #8]
 80118dc:	1852      	adds	r2, r2, r1
 80118de:	781b      	ldrb	r3, [r3, #0]
 80118e0:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0x00;
 80118e2:	193b      	adds	r3, r7, r4
 80118e4:	781b      	ldrb	r3, [r3, #0]
 80118e6:	193a      	adds	r2, r7, r4
 80118e8:	1c59      	adds	r1, r3, #1
 80118ea:	7011      	strb	r1, [r2, #0]
 80118ec:	001a      	movs	r2, r3
 80118ee:	68bb      	ldr	r3, [r7, #8]
 80118f0:	189b      	adds	r3, r3, r2
 80118f2:	2200      	movs	r2, #0
 80118f4:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0') 
 80118f6:	68fb      	ldr	r3, [r7, #12]
 80118f8:	781b      	ldrb	r3, [r3, #0]
 80118fa:	2b00      	cmp	r3, #0
 80118fc:	d1e3      	bne.n	80118c6 <USBD_GetString+0x60>
    }
  } 
}
 80118fe:	46c0      	nop			; (mov r8, r8)
 8011900:	46bd      	mov	sp, r7
 8011902:	b007      	add	sp, #28
 8011904:	bd90      	pop	{r4, r7, pc}

08011906 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8011906:	b580      	push	{r7, lr}
 8011908:	b084      	sub	sp, #16
 801190a:	af00      	add	r7, sp, #0
 801190c:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0;
 801190e:	230f      	movs	r3, #15
 8011910:	18fb      	adds	r3, r7, r3
 8011912:	2200      	movs	r2, #0
 8011914:	701a      	strb	r2, [r3, #0]

    while (*buf != '\0') 
 8011916:	e008      	b.n	801192a <USBD_GetLen+0x24>
    {
        len++;
 8011918:	210f      	movs	r1, #15
 801191a:	187b      	adds	r3, r7, r1
 801191c:	781a      	ldrb	r2, [r3, #0]
 801191e:	187b      	adds	r3, r7, r1
 8011920:	3201      	adds	r2, #1
 8011922:	701a      	strb	r2, [r3, #0]
        buf++;
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	3301      	adds	r3, #1
 8011928:	607b      	str	r3, [r7, #4]
    while (*buf != '\0') 
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	781b      	ldrb	r3, [r3, #0]
 801192e:	2b00      	cmp	r3, #0
 8011930:	d1f2      	bne.n	8011918 <USBD_GetLen+0x12>
    }

    return len;
 8011932:	230f      	movs	r3, #15
 8011934:	18fb      	adds	r3, r7, r3
 8011936:	781b      	ldrb	r3, [r3, #0]
}
 8011938:	0018      	movs	r0, r3
 801193a:	46bd      	mov	sp, r7
 801193c:	b004      	add	sp, #16
 801193e:	bd80      	pop	{r7, pc}

08011940 <USBD_VCP_DeviceDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
static uint8_t *USBD_VCP_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011940:	b580      	push	{r7, lr}
 8011942:	b082      	sub	sp, #8
 8011944:	af00      	add	r7, sp, #0
 8011946:	0002      	movs	r2, r0
 8011948:	6039      	str	r1, [r7, #0]
 801194a:	1dfb      	adds	r3, r7, #7
 801194c:	701a      	strb	r2, [r3, #0]
  *length = sizeof(hUSBDDeviceDesc);
 801194e:	683b      	ldr	r3, [r7, #0]
 8011950:	2212      	movs	r2, #18
 8011952:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)&hUSBDDeviceDesc;
 8011954:	4b02      	ldr	r3, [pc, #8]	; (8011960 <USBD_VCP_DeviceDescriptor+0x20>)
}
 8011956:	0018      	movs	r0, r3
 8011958:	46bd      	mov	sp, r7
 801195a:	b002      	add	sp, #8
 801195c:	bd80      	pop	{r7, pc}
 801195e:	46c0      	nop			; (mov r8, r8)
 8011960:	0801caac 	.word	0x0801caac

08011964 <USBD_VCP_LangIDStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
static uint8_t *USBD_VCP_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011964:	b580      	push	{r7, lr}
 8011966:	b082      	sub	sp, #8
 8011968:	af00      	add	r7, sp, #0
 801196a:	0002      	movs	r2, r0
 801196c:	6039      	str	r1, [r7, #0]
 801196e:	1dfb      	adds	r3, r7, #7
 8011970:	701a      	strb	r2, [r3, #0]
  *length = sizeof(USBD_LangIDDesc);  
 8011972:	683b      	ldr	r3, [r7, #0]
 8011974:	2204      	movs	r2, #4
 8011976:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_LangIDDesc;
 8011978:	4b02      	ldr	r3, [pc, #8]	; (8011984 <USBD_VCP_LangIDStrDescriptor+0x20>)
}
 801197a:	0018      	movs	r0, r3
 801197c:	46bd      	mov	sp, r7
 801197e:	b002      	add	sp, #8
 8011980:	bd80      	pop	{r7, pc}
 8011982:	46c0      	nop			; (mov r8, r8)
 8011984:	0801cb10 	.word	0x0801cb10

08011988 <USBD_VCP_ProductStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
static uint8_t *USBD_VCP_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011988:	b580      	push	{r7, lr}
 801198a:	b082      	sub	sp, #8
 801198c:	af00      	add	r7, sp, #0
 801198e:	0002      	movs	r2, r0
 8011990:	6039      	str	r1, [r7, #0]
 8011992:	1dfb      	adds	r3, r7, #7
 8011994:	701a      	strb	r2, [r3, #0]
  USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);    
 8011996:	683a      	ldr	r2, [r7, #0]
 8011998:	4904      	ldr	r1, [pc, #16]	; (80119ac <USBD_VCP_ProductStrDescriptor+0x24>)
 801199a:	4b05      	ldr	r3, [pc, #20]	; (80119b0 <USBD_VCP_ProductStrDescriptor+0x28>)
 801199c:	0018      	movs	r0, r3
 801199e:	f7ff ff62 	bl	8011866 <USBD_GetString>
  return USBD_StrDesc;
 80119a2:	4b02      	ldr	r3, [pc, #8]	; (80119ac <USBD_VCP_ProductStrDescriptor+0x24>)
}
 80119a4:	0018      	movs	r0, r3
 80119a6:	46bd      	mov	sp, r7
 80119a8:	b002      	add	sp, #8
 80119aa:	bd80      	pop	{r7, pc}
 80119ac:	20002858 	.word	0x20002858
 80119b0:	08012a7c 	.word	0x08012a7c

080119b4 <USBD_VCP_ManufacturerStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
static uint8_t *USBD_VCP_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80119b4:	b580      	push	{r7, lr}
 80119b6:	b082      	sub	sp, #8
 80119b8:	af00      	add	r7, sp, #0
 80119ba:	0002      	movs	r2, r0
 80119bc:	6039      	str	r1, [r7, #0]
 80119be:	1dfb      	adds	r3, r7, #7
 80119c0:	701a      	strb	r2, [r3, #0]
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80119c2:	683a      	ldr	r2, [r7, #0]
 80119c4:	4904      	ldr	r1, [pc, #16]	; (80119d8 <USBD_VCP_ManufacturerStrDescriptor+0x24>)
 80119c6:	4b05      	ldr	r3, [pc, #20]	; (80119dc <USBD_VCP_ManufacturerStrDescriptor+0x28>)
 80119c8:	0018      	movs	r0, r3
 80119ca:	f7ff ff4c 	bl	8011866 <USBD_GetString>
  return USBD_StrDesc;
 80119ce:	4b02      	ldr	r3, [pc, #8]	; (80119d8 <USBD_VCP_ManufacturerStrDescriptor+0x24>)
}
 80119d0:	0018      	movs	r0, r3
 80119d2:	46bd      	mov	sp, r7
 80119d4:	b002      	add	sp, #8
 80119d6:	bd80      	pop	{r7, pc}
 80119d8:	20002858 	.word	0x20002858
 80119dc:	08012a80 	.word	0x08012a80

080119e0 <USBD_VCP_SerialStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
static uint8_t *USBD_VCP_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80119e0:	b580      	push	{r7, lr}
 80119e2:	b084      	sub	sp, #16
 80119e4:	af00      	add	r7, sp, #0
 80119e6:	0002      	movs	r2, r0
 80119e8:	6039      	str	r1, [r7, #0]
 80119ea:	1dfb      	adds	r3, r7, #7
 80119ec:	701a      	strb	r2, [r3, #0]
  
  /*
  for some peculiar reason, ST doesn't define the unique ID registers in the HAL include files
  the DEVICE_ID registers are documented in Chapter 33 of the RM0091 Reference Manual
  */
  deviceserial = *(uint32_t*)(0x1FFFF7B0); /*DEVICE_ID2*/
 80119ee:	4b0e      	ldr	r3, [pc, #56]	; (8011a28 <USBD_VCP_SerialStrDescriptor+0x48>)
 80119f0:	681b      	ldr	r3, [r3, #0]
 80119f2:	60fb      	str	r3, [r7, #12]
  
  USBD_StrDesc[0] = *length = 2 + 8*2 + 4*2;
 80119f4:	683b      	ldr	r3, [r7, #0]
 80119f6:	221a      	movs	r2, #26
 80119f8:	801a      	strh	r2, [r3, #0]
 80119fa:	4b0c      	ldr	r3, [pc, #48]	; (8011a2c <USBD_VCP_SerialStrDescriptor+0x4c>)
 80119fc:	221a      	movs	r2, #26
 80119fe:	701a      	strb	r2, [r3, #0]
  USBD_StrDesc[1] = USB_DESC_TYPE_STRING;
 8011a00:	4b0a      	ldr	r3, [pc, #40]	; (8011a2c <USBD_VCP_SerialStrDescriptor+0x4c>)
 8011a02:	2203      	movs	r2, #3
 8011a04:	705a      	strb	r2, [r3, #1]
  /* set upper bits to ensure classification as locally administered */
  IntToUnicode (0x02020000, &USBD_StrDesc[2], 4);
 8011a06:	4b0a      	ldr	r3, [pc, #40]	; (8011a30 <USBD_VCP_SerialStrDescriptor+0x50>)
 8011a08:	480a      	ldr	r0, [pc, #40]	; (8011a34 <USBD_VCP_SerialStrDescriptor+0x54>)
 8011a0a:	2204      	movs	r2, #4
 8011a0c:	0019      	movs	r1, r3
 8011a0e:	f000 f815 	bl	8011a3c <IntToUnicode>
  /* set lower 32-bits using silicon serial number */
  IntToUnicode (deviceserial, &USBD_StrDesc[10], 8);
 8011a12:	4909      	ldr	r1, [pc, #36]	; (8011a38 <USBD_VCP_SerialStrDescriptor+0x58>)
 8011a14:	68fb      	ldr	r3, [r7, #12]
 8011a16:	2208      	movs	r2, #8
 8011a18:	0018      	movs	r0, r3
 8011a1a:	f000 f80f 	bl	8011a3c <IntToUnicode>
  return USBD_StrDesc;  
 8011a1e:	4b03      	ldr	r3, [pc, #12]	; (8011a2c <USBD_VCP_SerialStrDescriptor+0x4c>)
}
 8011a20:	0018      	movs	r0, r3
 8011a22:	46bd      	mov	sp, r7
 8011a24:	b004      	add	sp, #16
 8011a26:	bd80      	pop	{r7, pc}
 8011a28:	1ffff7b0 	.word	0x1ffff7b0
 8011a2c:	20002858 	.word	0x20002858
 8011a30:	2000285a 	.word	0x2000285a
 8011a34:	02020000 	.word	0x02020000
 8011a38:	20002862 	.word	0x20002862

08011a3c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode (uint32_t value, uint8_t *pbuf, uint8_t len)
{
 8011a3c:	b580      	push	{r7, lr}
 8011a3e:	b086      	sub	sp, #24
 8011a40:	af00      	add	r7, sp, #0
 8011a42:	60f8      	str	r0, [r7, #12]
 8011a44:	60b9      	str	r1, [r7, #8]
 8011a46:	1dfb      	adds	r3, r7, #7
 8011a48:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 8011a4a:	2117      	movs	r1, #23
 8011a4c:	187b      	adds	r3, r7, r1
 8011a4e:	2200      	movs	r2, #0
 8011a50:	701a      	strb	r2, [r3, #0]
  
  for( idx = 0 ; idx < len ; idx ++)
 8011a52:	187b      	adds	r3, r7, r1
 8011a54:	2200      	movs	r2, #0
 8011a56:	701a      	strb	r2, [r3, #0]
 8011a58:	e02f      	b.n	8011aba <IntToUnicode+0x7e>
  {
    if( ((value >> 28)) < 0xA )
 8011a5a:	68fb      	ldr	r3, [r7, #12]
 8011a5c:	0f1b      	lsrs	r3, r3, #28
 8011a5e:	2b09      	cmp	r3, #9
 8011a60:	d80d      	bhi.n	8011a7e <IntToUnicode+0x42>
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
 8011a62:	68fb      	ldr	r3, [r7, #12]
 8011a64:	0f1b      	lsrs	r3, r3, #28
 8011a66:	b2da      	uxtb	r2, r3
 8011a68:	2317      	movs	r3, #23
 8011a6a:	18fb      	adds	r3, r7, r3
 8011a6c:	781b      	ldrb	r3, [r3, #0]
 8011a6e:	005b      	lsls	r3, r3, #1
 8011a70:	0019      	movs	r1, r3
 8011a72:	68bb      	ldr	r3, [r7, #8]
 8011a74:	185b      	adds	r3, r3, r1
 8011a76:	3230      	adds	r2, #48	; 0x30
 8011a78:	b2d2      	uxtb	r2, r2
 8011a7a:	701a      	strb	r2, [r3, #0]
 8011a7c:	e00c      	b.n	8011a98 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 8011a7e:	68fb      	ldr	r3, [r7, #12]
 8011a80:	0f1b      	lsrs	r3, r3, #28
 8011a82:	b2da      	uxtb	r2, r3
 8011a84:	2317      	movs	r3, #23
 8011a86:	18fb      	adds	r3, r7, r3
 8011a88:	781b      	ldrb	r3, [r3, #0]
 8011a8a:	005b      	lsls	r3, r3, #1
 8011a8c:	0019      	movs	r1, r3
 8011a8e:	68bb      	ldr	r3, [r7, #8]
 8011a90:	185b      	adds	r3, r3, r1
 8011a92:	3237      	adds	r2, #55	; 0x37
 8011a94:	b2d2      	uxtb	r2, r2
 8011a96:	701a      	strb	r2, [r3, #0]
    }
    
    value = value << 4;
 8011a98:	68fb      	ldr	r3, [r7, #12]
 8011a9a:	011b      	lsls	r3, r3, #4
 8011a9c:	60fb      	str	r3, [r7, #12]
    
    pbuf[ 2* idx + 1] = 0;
 8011a9e:	2117      	movs	r1, #23
 8011aa0:	187b      	adds	r3, r7, r1
 8011aa2:	781b      	ldrb	r3, [r3, #0]
 8011aa4:	005b      	lsls	r3, r3, #1
 8011aa6:	3301      	adds	r3, #1
 8011aa8:	68ba      	ldr	r2, [r7, #8]
 8011aaa:	18d3      	adds	r3, r2, r3
 8011aac:	2200      	movs	r2, #0
 8011aae:	701a      	strb	r2, [r3, #0]
  for( idx = 0 ; idx < len ; idx ++)
 8011ab0:	187b      	adds	r3, r7, r1
 8011ab2:	781a      	ldrb	r2, [r3, #0]
 8011ab4:	187b      	adds	r3, r7, r1
 8011ab6:	3201      	adds	r2, #1
 8011ab8:	701a      	strb	r2, [r3, #0]
 8011aba:	2317      	movs	r3, #23
 8011abc:	18fa      	adds	r2, r7, r3
 8011abe:	1dfb      	adds	r3, r7, #7
 8011ac0:	7812      	ldrb	r2, [r2, #0]
 8011ac2:	781b      	ldrb	r3, [r3, #0]
 8011ac4:	429a      	cmp	r2, r3
 8011ac6:	d3c8      	bcc.n	8011a5a <IntToUnicode+0x1e>
  }
}
 8011ac8:	46c0      	nop			; (mov r8, r8)
 8011aca:	46bd      	mov	sp, r7
 8011acc:	b006      	add	sp, #24
 8011ace:	bd80      	pop	{r7, pc}

08011ad0 <usb_ecm_recv_renew>:
static int ecm_tx_remaining;
static int ecm_tx_busy;
static int copy_length;

void usb_ecm_recv_renew(void)
{
 8011ad0:	b590      	push	{r4, r7, lr}
 8011ad2:	b083      	sub	sp, #12
 8011ad4:	af00      	add	r7, sp, #0
  USBD_StatusTypeDef outcome;

  outcome = USBD_LL_PrepareReceive(registered_pdev, ECM_DATA_OUT_EP, ecm_rx_buffer + ecm_rx_index, ECM_DATA_OUT_SZ);
 8011ad6:	4b0c      	ldr	r3, [pc, #48]	; (8011b08 <usb_ecm_recv_renew+0x38>)
 8011ad8:	6818      	ldr	r0, [r3, #0]
 8011ada:	4b0c      	ldr	r3, [pc, #48]	; (8011b0c <usb_ecm_recv_renew+0x3c>)
 8011adc:	681b      	ldr	r3, [r3, #0]
 8011ade:	001a      	movs	r2, r3
 8011ae0:	4b0b      	ldr	r3, [pc, #44]	; (8011b10 <usb_ecm_recv_renew+0x40>)
 8011ae2:	18d2      	adds	r2, r2, r3
 8011ae4:	1dfc      	adds	r4, r7, #7
 8011ae6:	2340      	movs	r3, #64	; 0x40
 8011ae8:	2103      	movs	r1, #3
 8011aea:	f7ff f80d 	bl	8010b08 <USBD_LL_PrepareReceive>
 8011aee:	0003      	movs	r3, r0
 8011af0:	7023      	strb	r3, [r4, #0]

  OutboundTransferNeedsRenewal = (USBD_OK != outcome); /* set if the HAL was busy so that we know to retry it */
 8011af2:	1dfb      	adds	r3, r7, #7
 8011af4:	781b      	ldrb	r3, [r3, #0]
 8011af6:	1e5a      	subs	r2, r3, #1
 8011af8:	4193      	sbcs	r3, r2
 8011afa:	b2da      	uxtb	r2, r3
 8011afc:	4b05      	ldr	r3, [pc, #20]	; (8011b14 <usb_ecm_recv_renew+0x44>)
 8011afe:	701a      	strb	r2, [r3, #0]
}
 8011b00:	46c0      	nop			; (mov r8, r8)
 8011b02:	46bd      	mov	sp, r7
 8011b04:	b003      	add	sp, #12
 8011b06:	bd90      	pop	{r4, r7, pc}
 8011b08:	20002958 	.word	0x20002958
 8011b0c:	20002b7c 	.word	0x20002b7c
 8011b10:	2000295c 	.word	0x2000295c
 8011b14:	20002b81 	.word	0x20002b81

08011b18 <USBD_ECM_Init>:

static uint8_t USBD_ECM_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011b18:	b580      	push	{r7, lr}
 8011b1a:	b082      	sub	sp, #8
 8011b1c:	af00      	add	r7, sp, #0
 8011b1e:	6078      	str	r0, [r7, #4]
 8011b20:	000a      	movs	r2, r1
 8011b22:	1cfb      	adds	r3, r7, #3
 8011b24:	701a      	strb	r2, [r3, #0]
  registered_pdev = pdev;
 8011b26:	4b14      	ldr	r3, [pc, #80]	; (8011b78 <USBD_ECM_Init+0x60>)
 8011b28:	687a      	ldr	r2, [r7, #4]
 8011b2a:	601a      	str	r2, [r3, #0]

  /* Open EP IN */
  USBD_LL_OpenEP(pdev, ECM_DATA_IN_EP, USBD_EP_TYPE_BULK, ECM_DATA_IN_SZ);
 8011b2c:	6878      	ldr	r0, [r7, #4]
 8011b2e:	2340      	movs	r3, #64	; 0x40
 8011b30:	2202      	movs	r2, #2
 8011b32:	2182      	movs	r1, #130	; 0x82
 8011b34:	f7fe ff1a 	bl	801096c <USBD_LL_OpenEP>
  
  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, ECM_DATA_OUT_EP, USBD_EP_TYPE_BULK, ECM_DATA_OUT_SZ);
 8011b38:	6878      	ldr	r0, [r7, #4]
 8011b3a:	2340      	movs	r3, #64	; 0x40
 8011b3c:	2202      	movs	r2, #2
 8011b3e:	2103      	movs	r1, #3
 8011b40:	f7fe ff14 	bl	801096c <USBD_LL_OpenEP>

  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, ECM_NOTIFICATION_IN_EP, USBD_EP_TYPE_INTR, ECM_NOTIFICATION_IN_SZ);
 8011b44:	6878      	ldr	r0, [r7, #4]
 8011b46:	2340      	movs	r3, #64	; 0x40
 8011b48:	2203      	movs	r2, #3
 8011b4a:	2181      	movs	r1, #129	; 0x81
 8011b4c:	f7fe ff0e 	bl	801096c <USBD_LL_OpenEP>

  usb_ecm_recv_renew();
 8011b50:	f7ff ffbe 	bl	8011ad0 <usb_ecm_recv_renew>
  can_xmit = true;
 8011b54:	4b09      	ldr	r3, [pc, #36]	; (8011b7c <USBD_ECM_Init+0x64>)
 8011b56:	2201      	movs	r2, #1
 8011b58:	701a      	strb	r2, [r3, #0]
  OutboundTransferNeedsRenewal = false;
 8011b5a:	4b09      	ldr	r3, [pc, #36]	; (8011b80 <USBD_ECM_Init+0x68>)
 8011b5c:	2200      	movs	r2, #0
 8011b5e:	701a      	strb	r2, [r3, #0]
  ecm_tx_busy = 0;
 8011b60:	4b08      	ldr	r3, [pc, #32]	; (8011b84 <USBD_ECM_Init+0x6c>)
 8011b62:	2200      	movs	r2, #0
 8011b64:	601a      	str	r2, [r3, #0]
  ecm_tx_remaining = 0;
 8011b66:	4b08      	ldr	r3, [pc, #32]	; (8011b88 <USBD_ECM_Init+0x70>)
 8011b68:	2200      	movs	r2, #0
 8011b6a:	601a      	str	r2, [r3, #0]

  return USBD_OK;
 8011b6c:	2300      	movs	r3, #0
}
 8011b6e:	0018      	movs	r0, r3
 8011b70:	46bd      	mov	sp, r7
 8011b72:	b002      	add	sp, #8
 8011b74:	bd80      	pop	{r7, pc}
 8011b76:	46c0      	nop			; (mov r8, r8)
 8011b78:	20002958 	.word	0x20002958
 8011b7c:	20002b80 	.word	0x20002b80
 8011b80:	20002b81 	.word	0x20002b81
 8011b84:	20002b8c 	.word	0x20002b8c
 8011b88:	20002b88 	.word	0x20002b88

08011b8c <USBD_ECM_DeInit>:

static uint8_t USBD_ECM_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011b8c:	b580      	push	{r7, lr}
 8011b8e:	b082      	sub	sp, #8
 8011b90:	af00      	add	r7, sp, #0
 8011b92:	6078      	str	r0, [r7, #4]
 8011b94:	000a      	movs	r2, r1
 8011b96:	1cfb      	adds	r3, r7, #3
 8011b98:	701a      	strb	r2, [r3, #0]
  registered_pdev = NULL;
 8011b9a:	4b0d      	ldr	r3, [pc, #52]	; (8011bd0 <USBD_ECM_DeInit+0x44>)
 8011b9c:	2200      	movs	r2, #0
 8011b9e:	601a      	str	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, ECM_DATA_IN_EP);
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	2182      	movs	r1, #130	; 0x82
 8011ba4:	0018      	movs	r0, r3
 8011ba6:	f7fe ff03 	bl	80109b0 <USBD_LL_CloseEP>

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, ECM_DATA_OUT_EP);
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	2103      	movs	r1, #3
 8011bae:	0018      	movs	r0, r3
 8011bb0:	f7fe fefe 	bl	80109b0 <USBD_LL_CloseEP>

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, ECM_NOTIFICATION_IN_EP);
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	2181      	movs	r1, #129	; 0x81
 8011bb8:	0018      	movs	r0, r3
 8011bba:	f7fe fef9 	bl	80109b0 <USBD_LL_CloseEP>

  can_xmit = false;
 8011bbe:	4b05      	ldr	r3, [pc, #20]	; (8011bd4 <USBD_ECM_DeInit+0x48>)
 8011bc0:	2200      	movs	r2, #0
 8011bc2:	701a      	strb	r2, [r3, #0]

  return USBD_OK;
 8011bc4:	2300      	movs	r3, #0
}
 8011bc6:	0018      	movs	r0, r3
 8011bc8:	46bd      	mov	sp, r7
 8011bca:	b002      	add	sp, #8
 8011bcc:	bd80      	pop	{r7, pc}
 8011bce:	46c0      	nop			; (mov r8, r8)
 8011bd0:	20002958 	.word	0x20002958
 8011bd4:	20002b80 	.word	0x20002b80

08011bd8 <USBD_ECM_Setup>:

static uint8_t USBD_ECM_Setup (USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011bd8:	b580      	push	{r7, lr}
 8011bda:	b082      	sub	sp, #8
 8011bdc:	af00      	add	r7, sp, #0
 8011bde:	6078      	str	r0, [r7, #4]
 8011be0:	6039      	str	r1, [r7, #0]
  if (0x43 /* SET_ETHERNET_PACKET_FILTER */ == req->bRequest)
 8011be2:	683b      	ldr	r3, [r7, #0]
 8011be4:	785b      	ldrb	r3, [r3, #1]
 8011be6:	2b43      	cmp	r3, #67	; 0x43
 8011be8:	d109      	bne.n	8011bfe <USBD_ECM_Setup+0x26>
  {
    notify.wIndex = req->wIndex;
 8011bea:	683b      	ldr	r3, [r7, #0]
 8011bec:	889a      	ldrh	r2, [r3, #4]
 8011bee:	4b06      	ldr	r3, [pc, #24]	; (8011c08 <USBD_ECM_Setup+0x30>)
 8011bf0:	809a      	strh	r2, [r3, #4]
    USBD_LL_Transmit(pdev, ECM_NOTIFICATION_IN_EP, (uint8_t *)&notify, sizeof(notify));
 8011bf2:	4a05      	ldr	r2, [pc, #20]	; (8011c08 <USBD_ECM_Setup+0x30>)
 8011bf4:	6878      	ldr	r0, [r7, #4]
 8011bf6:	2308      	movs	r3, #8
 8011bf8:	2181      	movs	r1, #129	; 0x81
 8011bfa:	f7fe ff5c 	bl	8010ab6 <USBD_LL_Transmit>
  }

  return USBD_OK;
 8011bfe:	2300      	movs	r3, #0
}
 8011c00:	0018      	movs	r0, r3
 8011c02:	46bd      	mov	sp, r7
 8011c04:	b002      	add	sp, #8
 8011c06:	bd80      	pop	{r7, pc}
 8011c08:	200000a8 	.word	0x200000a8

08011c0c <ecm_incoming_attempt>:

static void ecm_incoming_attempt(void)
{
 8011c0c:	b580      	push	{r7, lr}
 8011c0e:	b082      	sub	sp, #8
 8011c10:	af00      	add	r7, sp, #0
  int chunk_size;

  if (!ecm_tx_remaining || ecm_tx_busy)
 8011c12:	4b16      	ldr	r3, [pc, #88]	; (8011c6c <ecm_incoming_attempt+0x60>)
 8011c14:	681b      	ldr	r3, [r3, #0]
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	d024      	beq.n	8011c64 <ecm_incoming_attempt+0x58>
 8011c1a:	4b15      	ldr	r3, [pc, #84]	; (8011c70 <ecm_incoming_attempt+0x64>)
 8011c1c:	681b      	ldr	r3, [r3, #0]
 8011c1e:	2b00      	cmp	r3, #0
 8011c20:	d120      	bne.n	8011c64 <ecm_incoming_attempt+0x58>
    return;

  chunk_size = ecm_tx_remaining;
 8011c22:	4b12      	ldr	r3, [pc, #72]	; (8011c6c <ecm_incoming_attempt+0x60>)
 8011c24:	681b      	ldr	r3, [r3, #0]
 8011c26:	607b      	str	r3, [r7, #4]
  if (chunk_size > ECM_DATA_IN_SZ)
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	2b40      	cmp	r3, #64	; 0x40
 8011c2c:	dd01      	ble.n	8011c32 <ecm_incoming_attempt+0x26>
    chunk_size = ECM_DATA_IN_SZ;
 8011c2e:	2340      	movs	r3, #64	; 0x40
 8011c30:	607b      	str	r3, [r7, #4]

  /* ST stack always returns a success code, so reading the return value is pointless */
  USBD_LL_Transmit(registered_pdev, ECM_DATA_IN_EP, ecm_tx_ptr, chunk_size);
 8011c32:	4b10      	ldr	r3, [pc, #64]	; (8011c74 <ecm_incoming_attempt+0x68>)
 8011c34:	6818      	ldr	r0, [r3, #0]
 8011c36:	4b10      	ldr	r3, [pc, #64]	; (8011c78 <ecm_incoming_attempt+0x6c>)
 8011c38:	681a      	ldr	r2, [r3, #0]
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	b29b      	uxth	r3, r3
 8011c3e:	2182      	movs	r1, #130	; 0x82
 8011c40:	f7fe ff39 	bl	8010ab6 <USBD_LL_Transmit>

  ecm_tx_ptr += chunk_size;
 8011c44:	4b0c      	ldr	r3, [pc, #48]	; (8011c78 <ecm_incoming_attempt+0x6c>)
 8011c46:	681a      	ldr	r2, [r3, #0]
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	18d2      	adds	r2, r2, r3
 8011c4c:	4b0a      	ldr	r3, [pc, #40]	; (8011c78 <ecm_incoming_attempt+0x6c>)
 8011c4e:	601a      	str	r2, [r3, #0]
  ecm_tx_remaining -= chunk_size;
 8011c50:	4b06      	ldr	r3, [pc, #24]	; (8011c6c <ecm_incoming_attempt+0x60>)
 8011c52:	681a      	ldr	r2, [r3, #0]
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	1ad2      	subs	r2, r2, r3
 8011c58:	4b04      	ldr	r3, [pc, #16]	; (8011c6c <ecm_incoming_attempt+0x60>)
 8011c5a:	601a      	str	r2, [r3, #0]
  ecm_tx_busy = 1;
 8011c5c:	4b04      	ldr	r3, [pc, #16]	; (8011c70 <ecm_incoming_attempt+0x64>)
 8011c5e:	2201      	movs	r2, #1
 8011c60:	601a      	str	r2, [r3, #0]
 8011c62:	e000      	b.n	8011c66 <ecm_incoming_attempt+0x5a>
    return;
 8011c64:	46c0      	nop			; (mov r8, r8)
}
 8011c66:	46bd      	mov	sp, r7
 8011c68:	b002      	add	sp, #8
 8011c6a:	bd80      	pop	{r7, pc}
 8011c6c:	20002b88 	.word	0x20002b88
 8011c70:	20002b8c 	.word	0x20002b8c
 8011c74:	20002958 	.word	0x20002958
 8011c78:	20002b84 	.word	0x20002b84

08011c7c <USBD_ECM_DataIn>:

static uint8_t USBD_ECM_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8011c7c:	b580      	push	{r7, lr}
 8011c7e:	b082      	sub	sp, #8
 8011c80:	af00      	add	r7, sp, #0
 8011c82:	6078      	str	r0, [r7, #4]
 8011c84:	000a      	movs	r2, r1
 8011c86:	1cfb      	adds	r3, r7, #3
 8011c88:	701a      	strb	r2, [r3, #0]
  if (ECM_DATA_IN_EP == (epnum | 0x80))
 8011c8a:	1cfb      	adds	r3, r7, #3
 8011c8c:	781b      	ldrb	r3, [r3, #0]
 8011c8e:	2280      	movs	r2, #128	; 0x80
 8011c90:	4252      	negs	r2, r2
 8011c92:	4313      	orrs	r3, r2
 8011c94:	b2db      	uxtb	r3, r3
 8011c96:	2b82      	cmp	r3, #130	; 0x82
 8011c98:	d10b      	bne.n	8011cb2 <USBD_ECM_DataIn+0x36>
  {
    ecm_tx_busy = 0;
 8011c9a:	4b08      	ldr	r3, [pc, #32]	; (8011cbc <USBD_ECM_DataIn+0x40>)
 8011c9c:	2200      	movs	r2, #0
 8011c9e:	601a      	str	r2, [r3, #0]
    if (0 == ecm_tx_remaining)
 8011ca0:	4b07      	ldr	r3, [pc, #28]	; (8011cc0 <USBD_ECM_DataIn+0x44>)
 8011ca2:	681b      	ldr	r3, [r3, #0]
 8011ca4:	2b00      	cmp	r3, #0
 8011ca6:	d102      	bne.n	8011cae <USBD_ECM_DataIn+0x32>
      can_xmit = true;
 8011ca8:	4b06      	ldr	r3, [pc, #24]	; (8011cc4 <USBD_ECM_DataIn+0x48>)
 8011caa:	2201      	movs	r2, #1
 8011cac:	701a      	strb	r2, [r3, #0]
    ecm_incoming_attempt();
 8011cae:	f7ff ffad 	bl	8011c0c <ecm_incoming_attempt>
  }

  return USBD_OK;
 8011cb2:	2300      	movs	r3, #0
}
 8011cb4:	0018      	movs	r0, r3
 8011cb6:	46bd      	mov	sp, r7
 8011cb8:	b002      	add	sp, #8
 8011cba:	bd80      	pop	{r7, pc}
 8011cbc:	20002b8c 	.word	0x20002b8c
 8011cc0:	20002b88 	.word	0x20002b88
 8011cc4:	20002b80 	.word	0x20002b80

08011cc8 <USBD_ECM_DataOut>:

static uint8_t USBD_ECM_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{      
 8011cc8:	b580      	push	{r7, lr}
 8011cca:	b084      	sub	sp, #16
 8011ccc:	af00      	add	r7, sp, #0
 8011cce:	6078      	str	r0, [r7, #4]
 8011cd0:	000a      	movs	r2, r1
 8011cd2:	1cfb      	adds	r3, r7, #3
 8011cd4:	701a      	strb	r2, [r3, #0]
  uint32_t RxLength;

  if (ECM_DATA_OUT_EP != epnum)
 8011cd6:	1cfb      	adds	r3, r7, #3
 8011cd8:	781b      	ldrb	r3, [r3, #0]
 8011cda:	2b03      	cmp	r3, #3
 8011cdc:	d001      	beq.n	8011ce2 <USBD_ECM_DataOut+0x1a>
    return USBD_OK;
 8011cde:	2300      	movs	r3, #0
 8011ce0:	e021      	b.n	8011d26 <USBD_ECM_DataOut+0x5e>

  /* Get the received data length */
  RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8011ce2:	1cfb      	adds	r3, r7, #3
 8011ce4:	781a      	ldrb	r2, [r3, #0]
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	0011      	movs	r1, r2
 8011cea:	0018      	movs	r0, r3
 8011cec:	f7fe ff35 	bl	8010b5a <USBD_LL_GetRxDataSize>
 8011cf0:	0003      	movs	r3, r0
 8011cf2:	60fb      	str	r3, [r7, #12]

  ecm_rx_index += RxLength;
 8011cf4:	4b0e      	ldr	r3, [pc, #56]	; (8011d30 <USBD_ECM_DataOut+0x68>)
 8011cf6:	681b      	ldr	r3, [r3, #0]
 8011cf8:	001a      	movs	r2, r3
 8011cfa:	68fb      	ldr	r3, [r7, #12]
 8011cfc:	18d3      	adds	r3, r2, r3
 8011cfe:	001a      	movs	r2, r3
 8011d00:	4b0b      	ldr	r3, [pc, #44]	; (8011d30 <USBD_ECM_DataOut+0x68>)
 8011d02:	601a      	str	r2, [r3, #0]

  if (RxLength < ECM_DATA_OUT_SZ)
 8011d04:	68fb      	ldr	r3, [r7, #12]
 8011d06:	2b3f      	cmp	r3, #63	; 0x3f
 8011d08:	d80a      	bhi.n	8011d20 <USBD_ECM_DataOut+0x58>
  {
    usb_ecm_recv_callback(ecm_rx_buffer, ecm_rx_index);
 8011d0a:	4b09      	ldr	r3, [pc, #36]	; (8011d30 <USBD_ECM_DataOut+0x68>)
 8011d0c:	681a      	ldr	r2, [r3, #0]
 8011d0e:	4b09      	ldr	r3, [pc, #36]	; (8011d34 <USBD_ECM_DataOut+0x6c>)
 8011d10:	0011      	movs	r1, r2
 8011d12:	0018      	movs	r0, r3
 8011d14:	f7fe fa32 	bl	801017c <usb_ecm_recv_callback>
    ecm_rx_index = 0;
 8011d18:	4b05      	ldr	r3, [pc, #20]	; (8011d30 <USBD_ECM_DataOut+0x68>)
 8011d1a:	2200      	movs	r2, #0
 8011d1c:	601a      	str	r2, [r3, #0]
 8011d1e:	e001      	b.n	8011d24 <USBD_ECM_DataOut+0x5c>
  }
  else
  {
    /* Initiate next USB packet transfer */
    usb_ecm_recv_renew();
 8011d20:	f7ff fed6 	bl	8011ad0 <usb_ecm_recv_renew>
  }

  return USBD_OK;
 8011d24:	2300      	movs	r3, #0
}
 8011d26:	0018      	movs	r0, r3
 8011d28:	46bd      	mov	sp, r7
 8011d2a:	b004      	add	sp, #16
 8011d2c:	bd80      	pop	{r7, pc}
 8011d2e:	46c0      	nop			; (mov r8, r8)
 8011d30:	20002b7c 	.word	0x20002b7c
 8011d34:	2000295c 	.word	0x2000295c

08011d38 <USBD_ECM_SOF>:

static uint8_t USBD_ECM_SOF (USBD_HandleTypeDef *pdev)
{
 8011d38:	b580      	push	{r7, lr}
 8011d3a:	b082      	sub	sp, #8
 8011d3c:	af00      	add	r7, sp, #0
 8011d3e:	6078      	str	r0, [r7, #4]
  /* mop up for any failed USBD_LL_PrepareReceive() call */
  if (OutboundTransferNeedsRenewal)
 8011d40:	4b11      	ldr	r3, [pc, #68]	; (8011d88 <USBD_ECM_SOF+0x50>)
 8011d42:	781b      	ldrb	r3, [r3, #0]
 8011d44:	2b00      	cmp	r3, #0
 8011d46:	d001      	beq.n	8011d4c <USBD_ECM_SOF+0x14>
    usb_ecm_recv_renew();
 8011d48:	f7ff fec2 	bl	8011ad0 <usb_ecm_recv_renew>

  if (ecm_tx_busy)
 8011d4c:	4b0f      	ldr	r3, [pc, #60]	; (8011d8c <USBD_ECM_SOF+0x54>)
 8011d4e:	681b      	ldr	r3, [r3, #0]
 8011d50:	2b00      	cmp	r3, #0
 8011d52:	d012      	beq.n	8011d7a <USBD_ECM_SOF+0x42>
  {
    /* ugly hack for ST stack sometimes not providing the DataOut callback */
    if (++ecm_tx_busy > 32)
 8011d54:	4b0d      	ldr	r3, [pc, #52]	; (8011d8c <USBD_ECM_SOF+0x54>)
 8011d56:	681b      	ldr	r3, [r3, #0]
 8011d58:	1c5a      	adds	r2, r3, #1
 8011d5a:	4b0c      	ldr	r3, [pc, #48]	; (8011d8c <USBD_ECM_SOF+0x54>)
 8011d5c:	601a      	str	r2, [r3, #0]
 8011d5e:	4b0b      	ldr	r3, [pc, #44]	; (8011d8c <USBD_ECM_SOF+0x54>)
 8011d60:	681b      	ldr	r3, [r3, #0]
 8011d62:	2b20      	cmp	r3, #32
 8011d64:	dd09      	ble.n	8011d7a <USBD_ECM_SOF+0x42>
    {
      ecm_tx_busy = 0;
 8011d66:	4b09      	ldr	r3, [pc, #36]	; (8011d8c <USBD_ECM_SOF+0x54>)
 8011d68:	2200      	movs	r2, #0
 8011d6a:	601a      	str	r2, [r3, #0]
      if (0 == ecm_tx_remaining)
 8011d6c:	4b08      	ldr	r3, [pc, #32]	; (8011d90 <USBD_ECM_SOF+0x58>)
 8011d6e:	681b      	ldr	r3, [r3, #0]
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	d102      	bne.n	8011d7a <USBD_ECM_SOF+0x42>
        can_xmit = true;
 8011d74:	4b07      	ldr	r3, [pc, #28]	; (8011d94 <USBD_ECM_SOF+0x5c>)
 8011d76:	2201      	movs	r2, #1
 8011d78:	701a      	strb	r2, [r3, #0]
    }
  }

  ecm_incoming_attempt();
 8011d7a:	f7ff ff47 	bl	8011c0c <ecm_incoming_attempt>

  return USBD_OK;
 8011d7e:	2300      	movs	r3, #0
}
 8011d80:	0018      	movs	r0, r3
 8011d82:	46bd      	mov	sp, r7
 8011d84:	b002      	add	sp, #8
 8011d86:	bd80      	pop	{r7, pc}
 8011d88:	20002b81 	.word	0x20002b81
 8011d8c:	20002b8c 	.word	0x20002b8c
 8011d90:	20002b88 	.word	0x20002b88
 8011d94:	20002b80 	.word	0x20002b80

08011d98 <USBD_ECM_EP0_RxReady>:

static uint8_t USBD_ECM_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
 8011d98:	b580      	push	{r7, lr}
 8011d9a:	b082      	sub	sp, #8
 8011d9c:	af00      	add	r7, sp, #0
 8011d9e:	6078      	str	r0, [r7, #4]
  return USBD_OK;
 8011da0:	2300      	movs	r3, #0
}
 8011da2:	0018      	movs	r0, r3
 8011da4:	46bd      	mov	sp, r7
 8011da6:	b002      	add	sp, #8
 8011da8:	bd80      	pop	{r7, pc}
	...

08011dac <USBD_ECM_GetFSCfgDesc>:

static const uint8_t *USBD_ECM_GetFSCfgDesc (uint16_t *length)
{
 8011dac:	b580      	push	{r7, lr}
 8011dae:	b082      	sub	sp, #8
 8011db0:	af00      	add	r7, sp, #0
 8011db2:	6078      	str	r0, [r7, #4]
  *length = USBD_CfgFSDesc_len;
 8011db4:	4b04      	ldr	r3, [pc, #16]	; (8011dc8 <USBD_ECM_GetFSCfgDesc+0x1c>)
 8011db6:	881a      	ldrh	r2, [r3, #0]
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	801a      	strh	r2, [r3, #0]
  return USBD_CfgFSDesc_pnt;
 8011dbc:	4b03      	ldr	r3, [pc, #12]	; (8011dcc <USBD_ECM_GetFSCfgDesc+0x20>)
 8011dbe:	681b      	ldr	r3, [r3, #0]
}
 8011dc0:	0018      	movs	r0, r3
 8011dc2:	46bd      	mov	sp, r7
 8011dc4:	b002      	add	sp, #8
 8011dc6:	bd80      	pop	{r7, pc}
 8011dc8:	0801cb0c 	.word	0x0801cb0c
 8011dcc:	0801cb08 	.word	0x0801cb08

08011dd0 <USBD_ECM_RegisterInterface>:

uint8_t USBD_ECM_RegisterInterface(USBD_HandleTypeDef *pdev)
{
 8011dd0:	b580      	push	{r7, lr}
 8011dd2:	b082      	sub	sp, #8
 8011dd4:	af00      	add	r7, sp, #0
 8011dd6:	6078      	str	r0, [r7, #4]
  unsigned index;

  return USBD_OK;
 8011dd8:	2300      	movs	r3, #0
}
 8011dda:	0018      	movs	r0, r3
 8011ddc:	46bd      	mov	sp, r7
 8011dde:	b002      	add	sp, #8
 8011de0:	bd80      	pop	{r7, pc}

08011de2 <USBD_ECM_PMAConfig>:

void USBD_ECM_PMAConfig(PCD_HandleTypeDef *hpcd, uint32_t *pma_address)
{
 8011de2:	b580      	push	{r7, lr}
 8011de4:	b082      	sub	sp, #8
 8011de6:	af00      	add	r7, sp, #0
 8011de8:	6078      	str	r0, [r7, #4]
 8011dea:	6039      	str	r1, [r7, #0]
  /* allocate PMA memory for all endpoints associated with ECM */
  HAL_PCDEx_PMAConfig(hpcd, ECM_DATA_IN_EP,  PCD_SNG_BUF, *pma_address);
 8011dec:	683b      	ldr	r3, [r7, #0]
 8011dee:	681b      	ldr	r3, [r3, #0]
 8011df0:	6878      	ldr	r0, [r7, #4]
 8011df2:	2200      	movs	r2, #0
 8011df4:	2182      	movs	r1, #130	; 0x82
 8011df6:	f7ef fe93 	bl	8001b20 <HAL_PCDEx_PMAConfig>
  *pma_address += ECM_DATA_IN_SZ;
 8011dfa:	683b      	ldr	r3, [r7, #0]
 8011dfc:	681b      	ldr	r3, [r3, #0]
 8011dfe:	3340      	adds	r3, #64	; 0x40
 8011e00:	001a      	movs	r2, r3
 8011e02:	683b      	ldr	r3, [r7, #0]
 8011e04:	601a      	str	r2, [r3, #0]
  HAL_PCDEx_PMAConfig(hpcd, ECM_DATA_OUT_EP, PCD_SNG_BUF, *pma_address);
 8011e06:	683b      	ldr	r3, [r7, #0]
 8011e08:	681b      	ldr	r3, [r3, #0]
 8011e0a:	6878      	ldr	r0, [r7, #4]
 8011e0c:	2200      	movs	r2, #0
 8011e0e:	2103      	movs	r1, #3
 8011e10:	f7ef fe86 	bl	8001b20 <HAL_PCDEx_PMAConfig>
  *pma_address += ECM_DATA_OUT_SZ;
 8011e14:	683b      	ldr	r3, [r7, #0]
 8011e16:	681b      	ldr	r3, [r3, #0]
 8011e18:	3340      	adds	r3, #64	; 0x40
 8011e1a:	001a      	movs	r2, r3
 8011e1c:	683b      	ldr	r3, [r7, #0]
 8011e1e:	601a      	str	r2, [r3, #0]
  HAL_PCDEx_PMAConfig(hpcd, ECM_NOTIFICATION_IN_EP,  PCD_SNG_BUF, *pma_address);
 8011e20:	683b      	ldr	r3, [r7, #0]
 8011e22:	681b      	ldr	r3, [r3, #0]
 8011e24:	6878      	ldr	r0, [r7, #4]
 8011e26:	2200      	movs	r2, #0
 8011e28:	2181      	movs	r1, #129	; 0x81
 8011e2a:	f7ef fe79 	bl	8001b20 <HAL_PCDEx_PMAConfig>
  *pma_address += ECM_NOTIFICATION_IN_SZ;
 8011e2e:	683b      	ldr	r3, [r7, #0]
 8011e30:	681b      	ldr	r3, [r3, #0]
 8011e32:	3340      	adds	r3, #64	; 0x40
 8011e34:	001a      	movs	r2, r3
 8011e36:	683b      	ldr	r3, [r7, #0]
 8011e38:	601a      	str	r2, [r3, #0]
}
 8011e3a:	46c0      	nop			; (mov r8, r8)
 8011e3c:	46bd      	mov	sp, r7
 8011e3e:	b002      	add	sp, #8
 8011e40:	bd80      	pop	{r7, pc}
	...

08011e44 <usb_ecm_can_xmit>:

bool usb_ecm_can_xmit(void)
{
 8011e44:	b580      	push	{r7, lr}
 8011e46:	b082      	sub	sp, #8
 8011e48:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8011e4a:	b672      	cpsid	i
  bool outcome;

  __disable_irq();
  outcome = can_xmit;
 8011e4c:	1dfb      	adds	r3, r7, #7
 8011e4e:	4a05      	ldr	r2, [pc, #20]	; (8011e64 <usb_ecm_can_xmit+0x20>)
 8011e50:	7812      	ldrb	r2, [r2, #0]
 8011e52:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8011e54:	b662      	cpsie	i
  __enable_irq();

  return outcome;
 8011e56:	1dfb      	adds	r3, r7, #7
 8011e58:	781b      	ldrb	r3, [r3, #0]
}
 8011e5a:	0018      	movs	r0, r3
 8011e5c:	46bd      	mov	sp, r7
 8011e5e:	b002      	add	sp, #8
 8011e60:	bd80      	pop	{r7, pc}
 8011e62:	46c0      	nop			; (mov r8, r8)
 8011e64:	20002b80 	.word	0x20002b80

08011e68 <usb_ecm_xmit_packet>:

void usb_ecm_xmit_packet(struct pbuf *p)
{
 8011e68:	b580      	push	{r7, lr}
 8011e6a:	b086      	sub	sp, #24
 8011e6c:	af00      	add	r7, sp, #0
 8011e6e:	6078      	str	r0, [r7, #4]
  struct pbuf *q;
  int packet_size;
  uint8_t *data;

  if (!registered_pdev || !can_xmit)
 8011e70:	4b1f      	ldr	r3, [pc, #124]	; (8011ef0 <usb_ecm_xmit_packet+0x88>)
 8011e72:	681b      	ldr	r3, [r3, #0]
 8011e74:	2b00      	cmp	r3, #0
 8011e76:	d037      	beq.n	8011ee8 <usb_ecm_xmit_packet+0x80>
 8011e78:	4b1e      	ldr	r3, [pc, #120]	; (8011ef4 <usb_ecm_xmit_packet+0x8c>)
 8011e7a:	781b      	ldrb	r3, [r3, #0]
 8011e7c:	2201      	movs	r2, #1
 8011e7e:	4053      	eors	r3, r2
 8011e80:	b2db      	uxtb	r3, r3
 8011e82:	2b00      	cmp	r3, #0
 8011e84:	d130      	bne.n	8011ee8 <usb_ecm_xmit_packet+0x80>
    return;

  data = ecm_tx_buffer;
 8011e86:	4b1c      	ldr	r3, [pc, #112]	; (8011ef8 <usb_ecm_xmit_packet+0x90>)
 8011e88:	60fb      	str	r3, [r7, #12]
  packet_size = 0;
 8011e8a:	2300      	movs	r3, #0
 8011e8c:	613b      	str	r3, [r7, #16]
  for(q = p; q != NULL; q = q->next)
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	617b      	str	r3, [r7, #20]
 8011e92:	e017      	b.n	8011ec4 <usb_ecm_xmit_packet+0x5c>
  {
      memcpy(data, q->payload, q->len);
 8011e94:	697b      	ldr	r3, [r7, #20]
 8011e96:	6859      	ldr	r1, [r3, #4]
 8011e98:	697b      	ldr	r3, [r7, #20]
 8011e9a:	895b      	ldrh	r3, [r3, #10]
 8011e9c:	001a      	movs	r2, r3
 8011e9e:	68fb      	ldr	r3, [r7, #12]
 8011ea0:	0018      	movs	r0, r3
 8011ea2:	f000 f8d8 	bl	8012056 <memcpy>
      data += q->len;
 8011ea6:	697b      	ldr	r3, [r7, #20]
 8011ea8:	895b      	ldrh	r3, [r3, #10]
 8011eaa:	001a      	movs	r2, r3
 8011eac:	68fb      	ldr	r3, [r7, #12]
 8011eae:	189b      	adds	r3, r3, r2
 8011eb0:	60fb      	str	r3, [r7, #12]
      packet_size += q->len;
 8011eb2:	697b      	ldr	r3, [r7, #20]
 8011eb4:	895b      	ldrh	r3, [r3, #10]
 8011eb6:	001a      	movs	r2, r3
 8011eb8:	693b      	ldr	r3, [r7, #16]
 8011eba:	189b      	adds	r3, r3, r2
 8011ebc:	613b      	str	r3, [r7, #16]
  for(q = p; q != NULL; q = q->next)
 8011ebe:	697b      	ldr	r3, [r7, #20]
 8011ec0:	681b      	ldr	r3, [r3, #0]
 8011ec2:	617b      	str	r3, [r7, #20]
 8011ec4:	697b      	ldr	r3, [r7, #20]
 8011ec6:	2b00      	cmp	r3, #0
 8011ec8:	d1e4      	bne.n	8011e94 <usb_ecm_xmit_packet+0x2c>
  __ASM volatile ("cpsid i" : : : "memory");
 8011eca:	b672      	cpsid	i
  }

  __disable_irq();
  can_xmit = false;
 8011ecc:	4b09      	ldr	r3, [pc, #36]	; (8011ef4 <usb_ecm_xmit_packet+0x8c>)
 8011ece:	2200      	movs	r2, #0
 8011ed0:	701a      	strb	r2, [r3, #0]
  ecm_tx_ptr = ecm_tx_buffer;
 8011ed2:	4b0a      	ldr	r3, [pc, #40]	; (8011efc <usb_ecm_xmit_packet+0x94>)
 8011ed4:	4a08      	ldr	r2, [pc, #32]	; (8011ef8 <usb_ecm_xmit_packet+0x90>)
 8011ed6:	601a      	str	r2, [r3, #0]
  ecm_tx_remaining = packet_size;
 8011ed8:	4b09      	ldr	r3, [pc, #36]	; (8011f00 <usb_ecm_xmit_packet+0x98>)
 8011eda:	693a      	ldr	r2, [r7, #16]
 8011edc:	601a      	str	r2, [r3, #0]
  copy_length = packet_size;
 8011ede:	4b09      	ldr	r3, [pc, #36]	; (8011f04 <usb_ecm_xmit_packet+0x9c>)
 8011ee0:	693a      	ldr	r2, [r7, #16]
 8011ee2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8011ee4:	b662      	cpsie	i
 8011ee6:	e000      	b.n	8011eea <usb_ecm_xmit_packet+0x82>
    return;
 8011ee8:	46c0      	nop			; (mov r8, r8)
  __enable_irq();
}
 8011eea:	46bd      	mov	sp, r7
 8011eec:	b006      	add	sp, #24
 8011eee:	bd80      	pop	{r7, pc}
 8011ef0:	20002958 	.word	0x20002958
 8011ef4:	20002b80 	.word	0x20002b80
 8011ef8:	20002a6c 	.word	0x20002a6c
 8011efc:	20002b84 	.word	0x20002b84
 8011f00:	20002b88 	.word	0x20002b88
 8011f04:	20002b90 	.word	0x20002b90

08011f08 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8011f08:	b580      	push	{r7, lr}
 8011f0a:	b084      	sub	sp, #16
 8011f0c:	af00      	add	r7, sp, #0
 8011f0e:	60f8      	str	r0, [r7, #12]
 8011f10:	60b9      	str	r1, [r7, #8]
 8011f12:	1dbb      	adds	r3, r7, #6
 8011f14:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8011f16:	68fa      	ldr	r2, [r7, #12]
 8011f18:	23fa      	movs	r3, #250	; 0xfa
 8011f1a:	005b      	lsls	r3, r3, #1
 8011f1c:	2102      	movs	r1, #2
 8011f1e:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 8011f20:	1dbb      	adds	r3, r7, #6
 8011f22:	881a      	ldrh	r2, [r3, #0]
 8011f24:	68fb      	ldr	r3, [r7, #12]
 8011f26:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length   = len;
 8011f28:	1dbb      	adds	r3, r7, #6
 8011f2a:	881a      	ldrh	r2, [r3, #0]
 8011f2c:	68fb      	ldr	r3, [r7, #12]
 8011f2e:	61da      	str	r2, [r3, #28]
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8011f30:	1dbb      	adds	r3, r7, #6
 8011f32:	881b      	ldrh	r3, [r3, #0]
 8011f34:	68ba      	ldr	r2, [r7, #8]
 8011f36:	68f8      	ldr	r0, [r7, #12]
 8011f38:	2100      	movs	r1, #0
 8011f3a:	f7fe fdbc 	bl	8010ab6 <USBD_LL_Transmit>
  
  return USBD_OK;
 8011f3e:	2300      	movs	r3, #0
}
 8011f40:	0018      	movs	r0, r3
 8011f42:	46bd      	mov	sp, r7
 8011f44:	b004      	add	sp, #16
 8011f46:	bd80      	pop	{r7, pc}

08011f48 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 8011f48:	b580      	push	{r7, lr}
 8011f4a:	b084      	sub	sp, #16
 8011f4c:	af00      	add	r7, sp, #0
 8011f4e:	60f8      	str	r0, [r7, #12]
 8011f50:	60b9      	str	r1, [r7, #8]
 8011f52:	1dbb      	adds	r3, r7, #6
 8011f54:	801a      	strh	r2, [r3, #0]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 8011f56:	1dbb      	adds	r3, r7, #6
 8011f58:	881b      	ldrh	r3, [r3, #0]
 8011f5a:	68ba      	ldr	r2, [r7, #8]
 8011f5c:	68f8      	ldr	r0, [r7, #12]
 8011f5e:	2100      	movs	r1, #0
 8011f60:	f7fe fda9 	bl	8010ab6 <USBD_LL_Transmit>
  
  return USBD_OK;
 8011f64:	2300      	movs	r3, #0
}
 8011f66:	0018      	movs	r0, r3
 8011f68:	46bd      	mov	sp, r7
 8011f6a:	b004      	add	sp, #16
 8011f6c:	bd80      	pop	{r7, pc}

08011f6e <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 8011f6e:	b580      	push	{r7, lr}
 8011f70:	b084      	sub	sp, #16
 8011f72:	af00      	add	r7, sp, #0
 8011f74:	60f8      	str	r0, [r7, #12]
 8011f76:	60b9      	str	r1, [r7, #8]
 8011f78:	1dbb      	adds	r3, r7, #6
 8011f7a:	801a      	strh	r2, [r3, #0]

  USBD_LL_PrepareReceive (pdev,
 8011f7c:	1dbb      	adds	r3, r7, #6
 8011f7e:	881b      	ldrh	r3, [r3, #0]
 8011f80:	68ba      	ldr	r2, [r7, #8]
 8011f82:	68f8      	ldr	r0, [r7, #12]
 8011f84:	2100      	movs	r1, #0
 8011f86:	f7fe fdbf 	bl	8010b08 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
 8011f8a:	2300      	movs	r3, #0
}
 8011f8c:	0018      	movs	r0, r3
 8011f8e:	46bd      	mov	sp, r7
 8011f90:	b004      	add	sp, #16
 8011f92:	bd80      	pop	{r7, pc}

08011f94 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 8011f94:	b580      	push	{r7, lr}
 8011f96:	b082      	sub	sp, #8
 8011f98:	af00      	add	r7, sp, #0
 8011f9a:	6078      	str	r0, [r7, #4]

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8011f9c:	687a      	ldr	r2, [r7, #4]
 8011f9e:	23fa      	movs	r3, #250	; 0xfa
 8011fa0:	005b      	lsls	r3, r3, #1
 8011fa2:	2104      	movs	r1, #4
 8011fa4:	50d1      	str	r1, [r2, r3]
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 8011fa6:	6878      	ldr	r0, [r7, #4]
 8011fa8:	2300      	movs	r3, #0
 8011faa:	2200      	movs	r2, #0
 8011fac:	2100      	movs	r1, #0
 8011fae:	f7fe fd82 	bl	8010ab6 <USBD_LL_Transmit>
  
  return USBD_OK;
 8011fb2:	2300      	movs	r3, #0
}
 8011fb4:	0018      	movs	r0, r3
 8011fb6:	46bd      	mov	sp, r7
 8011fb8:	b002      	add	sp, #8
 8011fba:	bd80      	pop	{r7, pc}

08011fbc <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 8011fbc:	b580      	push	{r7, lr}
 8011fbe:	b082      	sub	sp, #8
 8011fc0:	af00      	add	r7, sp, #0
 8011fc2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 8011fc4:	687a      	ldr	r2, [r7, #4]
 8011fc6:	23fa      	movs	r3, #250	; 0xfa
 8011fc8:	005b      	lsls	r3, r3, #1
 8011fca:	2105      	movs	r1, #5
 8011fcc:	50d1      	str	r1, [r2, r3]
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 8011fce:	6878      	ldr	r0, [r7, #4]
 8011fd0:	2300      	movs	r3, #0
 8011fd2:	2200      	movs	r2, #0
 8011fd4:	2100      	movs	r1, #0
 8011fd6:	f7fe fd97 	bl	8010b08 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
 8011fda:	2300      	movs	r3, #0
}
 8011fdc:	0018      	movs	r0, r3
 8011fde:	46bd      	mov	sp, r7
 8011fe0:	b002      	add	sp, #8
 8011fe2:	bd80      	pop	{r7, pc}

08011fe4 <__errno>:
 8011fe4:	4b01      	ldr	r3, [pc, #4]	; (8011fec <__errno+0x8>)
 8011fe6:	6818      	ldr	r0, [r3, #0]
 8011fe8:	4770      	bx	lr
 8011fea:	46c0      	nop			; (mov r8, r8)
 8011fec:	200000b0 	.word	0x200000b0

08011ff0 <__libc_init_array>:
 8011ff0:	b570      	push	{r4, r5, r6, lr}
 8011ff2:	2600      	movs	r6, #0
 8011ff4:	4d0c      	ldr	r5, [pc, #48]	; (8012028 <__libc_init_array+0x38>)
 8011ff6:	4c0d      	ldr	r4, [pc, #52]	; (801202c <__libc_init_array+0x3c>)
 8011ff8:	1b64      	subs	r4, r4, r5
 8011ffa:	10a4      	asrs	r4, r4, #2
 8011ffc:	42a6      	cmp	r6, r4
 8011ffe:	d109      	bne.n	8012014 <__libc_init_array+0x24>
 8012000:	2600      	movs	r6, #0
 8012002:	f000 fc81 	bl	8012908 <_init>
 8012006:	4d0a      	ldr	r5, [pc, #40]	; (8012030 <__libc_init_array+0x40>)
 8012008:	4c0a      	ldr	r4, [pc, #40]	; (8012034 <__libc_init_array+0x44>)
 801200a:	1b64      	subs	r4, r4, r5
 801200c:	10a4      	asrs	r4, r4, #2
 801200e:	42a6      	cmp	r6, r4
 8012010:	d105      	bne.n	801201e <__libc_init_array+0x2e>
 8012012:	bd70      	pop	{r4, r5, r6, pc}
 8012014:	00b3      	lsls	r3, r6, #2
 8012016:	58eb      	ldr	r3, [r5, r3]
 8012018:	4798      	blx	r3
 801201a:	3601      	adds	r6, #1
 801201c:	e7ee      	b.n	8011ffc <__libc_init_array+0xc>
 801201e:	00b3      	lsls	r3, r6, #2
 8012020:	58eb      	ldr	r3, [r5, r3]
 8012022:	4798      	blx	r3
 8012024:	3601      	adds	r6, #1
 8012026:	e7f2      	b.n	801200e <__libc_init_array+0x1e>
 8012028:	0801cb74 	.word	0x0801cb74
 801202c:	0801cb74 	.word	0x0801cb74
 8012030:	0801cb74 	.word	0x0801cb74
 8012034:	0801cb78 	.word	0x0801cb78

08012038 <memcmp>:
 8012038:	b530      	push	{r4, r5, lr}
 801203a:	2400      	movs	r4, #0
 801203c:	42a2      	cmp	r2, r4
 801203e:	d101      	bne.n	8012044 <memcmp+0xc>
 8012040:	2000      	movs	r0, #0
 8012042:	e005      	b.n	8012050 <memcmp+0x18>
 8012044:	5d03      	ldrb	r3, [r0, r4]
 8012046:	1c65      	adds	r5, r4, #1
 8012048:	5d0c      	ldrb	r4, [r1, r4]
 801204a:	42a3      	cmp	r3, r4
 801204c:	d001      	beq.n	8012052 <memcmp+0x1a>
 801204e:	1b18      	subs	r0, r3, r4
 8012050:	bd30      	pop	{r4, r5, pc}
 8012052:	002c      	movs	r4, r5
 8012054:	e7f2      	b.n	801203c <memcmp+0x4>

08012056 <memcpy>:
 8012056:	2300      	movs	r3, #0
 8012058:	b510      	push	{r4, lr}
 801205a:	429a      	cmp	r2, r3
 801205c:	d100      	bne.n	8012060 <memcpy+0xa>
 801205e:	bd10      	pop	{r4, pc}
 8012060:	5ccc      	ldrb	r4, [r1, r3]
 8012062:	54c4      	strb	r4, [r0, r3]
 8012064:	3301      	adds	r3, #1
 8012066:	e7f8      	b.n	801205a <memcpy+0x4>

08012068 <memset>:
 8012068:	0003      	movs	r3, r0
 801206a:	1812      	adds	r2, r2, r0
 801206c:	4293      	cmp	r3, r2
 801206e:	d100      	bne.n	8012072 <memset+0xa>
 8012070:	4770      	bx	lr
 8012072:	7019      	strb	r1, [r3, #0]
 8012074:	3301      	adds	r3, #1
 8012076:	e7f9      	b.n	801206c <memset+0x4>

08012078 <sniprintf>:
 8012078:	b40c      	push	{r2, r3}
 801207a:	b530      	push	{r4, r5, lr}
 801207c:	4b16      	ldr	r3, [pc, #88]	; (80120d8 <sniprintf+0x60>)
 801207e:	b09d      	sub	sp, #116	; 0x74
 8012080:	1e0c      	subs	r4, r1, #0
 8012082:	681d      	ldr	r5, [r3, #0]
 8012084:	da08      	bge.n	8012098 <sniprintf+0x20>
 8012086:	238b      	movs	r3, #139	; 0x8b
 8012088:	2001      	movs	r0, #1
 801208a:	602b      	str	r3, [r5, #0]
 801208c:	4240      	negs	r0, r0
 801208e:	b01d      	add	sp, #116	; 0x74
 8012090:	bc30      	pop	{r4, r5}
 8012092:	bc08      	pop	{r3}
 8012094:	b002      	add	sp, #8
 8012096:	4718      	bx	r3
 8012098:	2382      	movs	r3, #130	; 0x82
 801209a:	a902      	add	r1, sp, #8
 801209c:	009b      	lsls	r3, r3, #2
 801209e:	818b      	strh	r3, [r1, #12]
 80120a0:	2300      	movs	r3, #0
 80120a2:	9002      	str	r0, [sp, #8]
 80120a4:	6108      	str	r0, [r1, #16]
 80120a6:	429c      	cmp	r4, r3
 80120a8:	d000      	beq.n	80120ac <sniprintf+0x34>
 80120aa:	1e63      	subs	r3, r4, #1
 80120ac:	608b      	str	r3, [r1, #8]
 80120ae:	614b      	str	r3, [r1, #20]
 80120b0:	2301      	movs	r3, #1
 80120b2:	425b      	negs	r3, r3
 80120b4:	81cb      	strh	r3, [r1, #14]
 80120b6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80120b8:	ab21      	add	r3, sp, #132	; 0x84
 80120ba:	0028      	movs	r0, r5
 80120bc:	9301      	str	r3, [sp, #4]
 80120be:	f000 f8a7 	bl	8012210 <_svfiprintf_r>
 80120c2:	1c43      	adds	r3, r0, #1
 80120c4:	da01      	bge.n	80120ca <sniprintf+0x52>
 80120c6:	238b      	movs	r3, #139	; 0x8b
 80120c8:	602b      	str	r3, [r5, #0]
 80120ca:	2c00      	cmp	r4, #0
 80120cc:	d0df      	beq.n	801208e <sniprintf+0x16>
 80120ce:	2300      	movs	r3, #0
 80120d0:	9a02      	ldr	r2, [sp, #8]
 80120d2:	7013      	strb	r3, [r2, #0]
 80120d4:	e7db      	b.n	801208e <sniprintf+0x16>
 80120d6:	46c0      	nop			; (mov r8, r8)
 80120d8:	200000b0 	.word	0x200000b0

080120dc <strchr>:
 80120dc:	b2c9      	uxtb	r1, r1
 80120de:	7803      	ldrb	r3, [r0, #0]
 80120e0:	2b00      	cmp	r3, #0
 80120e2:	d004      	beq.n	80120ee <strchr+0x12>
 80120e4:	428b      	cmp	r3, r1
 80120e6:	d100      	bne.n	80120ea <strchr+0xe>
 80120e8:	4770      	bx	lr
 80120ea:	3001      	adds	r0, #1
 80120ec:	e7f7      	b.n	80120de <strchr+0x2>
 80120ee:	424b      	negs	r3, r1
 80120f0:	4159      	adcs	r1, r3
 80120f2:	4249      	negs	r1, r1
 80120f4:	4008      	ands	r0, r1
 80120f6:	e7f7      	b.n	80120e8 <strchr+0xc>

080120f8 <strncmp>:
 80120f8:	2300      	movs	r3, #0
 80120fa:	b530      	push	{r4, r5, lr}
 80120fc:	429a      	cmp	r2, r3
 80120fe:	d00a      	beq.n	8012116 <strncmp+0x1e>
 8012100:	3a01      	subs	r2, #1
 8012102:	5cc4      	ldrb	r4, [r0, r3]
 8012104:	5ccd      	ldrb	r5, [r1, r3]
 8012106:	42ac      	cmp	r4, r5
 8012108:	d104      	bne.n	8012114 <strncmp+0x1c>
 801210a:	4293      	cmp	r3, r2
 801210c:	d002      	beq.n	8012114 <strncmp+0x1c>
 801210e:	3301      	adds	r3, #1
 8012110:	2c00      	cmp	r4, #0
 8012112:	d1f6      	bne.n	8012102 <strncmp+0xa>
 8012114:	1b63      	subs	r3, r4, r5
 8012116:	0018      	movs	r0, r3
 8012118:	bd30      	pop	{r4, r5, pc}

0801211a <strstr>:
 801211a:	b510      	push	{r4, lr}
 801211c:	7803      	ldrb	r3, [r0, #0]
 801211e:	2b00      	cmp	r3, #0
 8012120:	d10f      	bne.n	8012142 <strstr+0x28>
 8012122:	780b      	ldrb	r3, [r1, #0]
 8012124:	425a      	negs	r2, r3
 8012126:	4153      	adcs	r3, r2
 8012128:	425b      	negs	r3, r3
 801212a:	4018      	ands	r0, r3
 801212c:	bd10      	pop	{r4, pc}
 801212e:	2300      	movs	r3, #0
 8012130:	5cca      	ldrb	r2, [r1, r3]
 8012132:	2a00      	cmp	r2, #0
 8012134:	d0fa      	beq.n	801212c <strstr+0x12>
 8012136:	5cc4      	ldrb	r4, [r0, r3]
 8012138:	4294      	cmp	r4, r2
 801213a:	d101      	bne.n	8012140 <strstr+0x26>
 801213c:	3301      	adds	r3, #1
 801213e:	e7f7      	b.n	8012130 <strstr+0x16>
 8012140:	3001      	adds	r0, #1
 8012142:	7803      	ldrb	r3, [r0, #0]
 8012144:	2b00      	cmp	r3, #0
 8012146:	d1f2      	bne.n	801212e <strstr+0x14>
 8012148:	0018      	movs	r0, r3
 801214a:	e7ef      	b.n	801212c <strstr+0x12>

0801214c <__ssputs_r>:
 801214c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801214e:	688e      	ldr	r6, [r1, #8]
 8012150:	b085      	sub	sp, #20
 8012152:	0007      	movs	r7, r0
 8012154:	000c      	movs	r4, r1
 8012156:	9203      	str	r2, [sp, #12]
 8012158:	9301      	str	r3, [sp, #4]
 801215a:	429e      	cmp	r6, r3
 801215c:	d83c      	bhi.n	80121d8 <__ssputs_r+0x8c>
 801215e:	2390      	movs	r3, #144	; 0x90
 8012160:	898a      	ldrh	r2, [r1, #12]
 8012162:	00db      	lsls	r3, r3, #3
 8012164:	421a      	tst	r2, r3
 8012166:	d034      	beq.n	80121d2 <__ssputs_r+0x86>
 8012168:	2503      	movs	r5, #3
 801216a:	6909      	ldr	r1, [r1, #16]
 801216c:	6823      	ldr	r3, [r4, #0]
 801216e:	1a5b      	subs	r3, r3, r1
 8012170:	9302      	str	r3, [sp, #8]
 8012172:	6963      	ldr	r3, [r4, #20]
 8012174:	9802      	ldr	r0, [sp, #8]
 8012176:	435d      	muls	r5, r3
 8012178:	0feb      	lsrs	r3, r5, #31
 801217a:	195d      	adds	r5, r3, r5
 801217c:	9b01      	ldr	r3, [sp, #4]
 801217e:	106d      	asrs	r5, r5, #1
 8012180:	3301      	adds	r3, #1
 8012182:	181b      	adds	r3, r3, r0
 8012184:	42ab      	cmp	r3, r5
 8012186:	d900      	bls.n	801218a <__ssputs_r+0x3e>
 8012188:	001d      	movs	r5, r3
 801218a:	0553      	lsls	r3, r2, #21
 801218c:	d532      	bpl.n	80121f4 <__ssputs_r+0xa8>
 801218e:	0029      	movs	r1, r5
 8012190:	0038      	movs	r0, r7
 8012192:	f000 fb19 	bl	80127c8 <_malloc_r>
 8012196:	1e06      	subs	r6, r0, #0
 8012198:	d109      	bne.n	80121ae <__ssputs_r+0x62>
 801219a:	230c      	movs	r3, #12
 801219c:	603b      	str	r3, [r7, #0]
 801219e:	2340      	movs	r3, #64	; 0x40
 80121a0:	2001      	movs	r0, #1
 80121a2:	89a2      	ldrh	r2, [r4, #12]
 80121a4:	4240      	negs	r0, r0
 80121a6:	4313      	orrs	r3, r2
 80121a8:	81a3      	strh	r3, [r4, #12]
 80121aa:	b005      	add	sp, #20
 80121ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80121ae:	9a02      	ldr	r2, [sp, #8]
 80121b0:	6921      	ldr	r1, [r4, #16]
 80121b2:	f7ff ff50 	bl	8012056 <memcpy>
 80121b6:	89a3      	ldrh	r3, [r4, #12]
 80121b8:	4a14      	ldr	r2, [pc, #80]	; (801220c <__ssputs_r+0xc0>)
 80121ba:	401a      	ands	r2, r3
 80121bc:	2380      	movs	r3, #128	; 0x80
 80121be:	4313      	orrs	r3, r2
 80121c0:	81a3      	strh	r3, [r4, #12]
 80121c2:	9b02      	ldr	r3, [sp, #8]
 80121c4:	6126      	str	r6, [r4, #16]
 80121c6:	18f6      	adds	r6, r6, r3
 80121c8:	6026      	str	r6, [r4, #0]
 80121ca:	6165      	str	r5, [r4, #20]
 80121cc:	9e01      	ldr	r6, [sp, #4]
 80121ce:	1aed      	subs	r5, r5, r3
 80121d0:	60a5      	str	r5, [r4, #8]
 80121d2:	9b01      	ldr	r3, [sp, #4]
 80121d4:	429e      	cmp	r6, r3
 80121d6:	d900      	bls.n	80121da <__ssputs_r+0x8e>
 80121d8:	9e01      	ldr	r6, [sp, #4]
 80121da:	0032      	movs	r2, r6
 80121dc:	9903      	ldr	r1, [sp, #12]
 80121de:	6820      	ldr	r0, [r4, #0]
 80121e0:	f000 fa95 	bl	801270e <memmove>
 80121e4:	68a3      	ldr	r3, [r4, #8]
 80121e6:	2000      	movs	r0, #0
 80121e8:	1b9b      	subs	r3, r3, r6
 80121ea:	60a3      	str	r3, [r4, #8]
 80121ec:	6823      	ldr	r3, [r4, #0]
 80121ee:	199e      	adds	r6, r3, r6
 80121f0:	6026      	str	r6, [r4, #0]
 80121f2:	e7da      	b.n	80121aa <__ssputs_r+0x5e>
 80121f4:	002a      	movs	r2, r5
 80121f6:	0038      	movs	r0, r7
 80121f8:	f000 fb44 	bl	8012884 <_realloc_r>
 80121fc:	1e06      	subs	r6, r0, #0
 80121fe:	d1e0      	bne.n	80121c2 <__ssputs_r+0x76>
 8012200:	6921      	ldr	r1, [r4, #16]
 8012202:	0038      	movs	r0, r7
 8012204:	f000 fa96 	bl	8012734 <_free_r>
 8012208:	e7c7      	b.n	801219a <__ssputs_r+0x4e>
 801220a:	46c0      	nop			; (mov r8, r8)
 801220c:	fffffb7f 	.word	0xfffffb7f

08012210 <_svfiprintf_r>:
 8012210:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012212:	b0a1      	sub	sp, #132	; 0x84
 8012214:	9003      	str	r0, [sp, #12]
 8012216:	001d      	movs	r5, r3
 8012218:	898b      	ldrh	r3, [r1, #12]
 801221a:	000f      	movs	r7, r1
 801221c:	0016      	movs	r6, r2
 801221e:	061b      	lsls	r3, r3, #24
 8012220:	d511      	bpl.n	8012246 <_svfiprintf_r+0x36>
 8012222:	690b      	ldr	r3, [r1, #16]
 8012224:	2b00      	cmp	r3, #0
 8012226:	d10e      	bne.n	8012246 <_svfiprintf_r+0x36>
 8012228:	2140      	movs	r1, #64	; 0x40
 801222a:	f000 facd 	bl	80127c8 <_malloc_r>
 801222e:	6038      	str	r0, [r7, #0]
 8012230:	6138      	str	r0, [r7, #16]
 8012232:	2800      	cmp	r0, #0
 8012234:	d105      	bne.n	8012242 <_svfiprintf_r+0x32>
 8012236:	230c      	movs	r3, #12
 8012238:	9a03      	ldr	r2, [sp, #12]
 801223a:	3801      	subs	r0, #1
 801223c:	6013      	str	r3, [r2, #0]
 801223e:	b021      	add	sp, #132	; 0x84
 8012240:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012242:	2340      	movs	r3, #64	; 0x40
 8012244:	617b      	str	r3, [r7, #20]
 8012246:	2300      	movs	r3, #0
 8012248:	ac08      	add	r4, sp, #32
 801224a:	6163      	str	r3, [r4, #20]
 801224c:	3320      	adds	r3, #32
 801224e:	7663      	strb	r3, [r4, #25]
 8012250:	3310      	adds	r3, #16
 8012252:	76a3      	strb	r3, [r4, #26]
 8012254:	9507      	str	r5, [sp, #28]
 8012256:	0035      	movs	r5, r6
 8012258:	782b      	ldrb	r3, [r5, #0]
 801225a:	2b00      	cmp	r3, #0
 801225c:	d001      	beq.n	8012262 <_svfiprintf_r+0x52>
 801225e:	2b25      	cmp	r3, #37	; 0x25
 8012260:	d146      	bne.n	80122f0 <_svfiprintf_r+0xe0>
 8012262:	1bab      	subs	r3, r5, r6
 8012264:	9305      	str	r3, [sp, #20]
 8012266:	d00c      	beq.n	8012282 <_svfiprintf_r+0x72>
 8012268:	0032      	movs	r2, r6
 801226a:	0039      	movs	r1, r7
 801226c:	9803      	ldr	r0, [sp, #12]
 801226e:	f7ff ff6d 	bl	801214c <__ssputs_r>
 8012272:	1c43      	adds	r3, r0, #1
 8012274:	d100      	bne.n	8012278 <_svfiprintf_r+0x68>
 8012276:	e0ae      	b.n	80123d6 <_svfiprintf_r+0x1c6>
 8012278:	6962      	ldr	r2, [r4, #20]
 801227a:	9b05      	ldr	r3, [sp, #20]
 801227c:	4694      	mov	ip, r2
 801227e:	4463      	add	r3, ip
 8012280:	6163      	str	r3, [r4, #20]
 8012282:	782b      	ldrb	r3, [r5, #0]
 8012284:	2b00      	cmp	r3, #0
 8012286:	d100      	bne.n	801228a <_svfiprintf_r+0x7a>
 8012288:	e0a5      	b.n	80123d6 <_svfiprintf_r+0x1c6>
 801228a:	2201      	movs	r2, #1
 801228c:	2300      	movs	r3, #0
 801228e:	4252      	negs	r2, r2
 8012290:	6062      	str	r2, [r4, #4]
 8012292:	a904      	add	r1, sp, #16
 8012294:	3254      	adds	r2, #84	; 0x54
 8012296:	1852      	adds	r2, r2, r1
 8012298:	1c6e      	adds	r6, r5, #1
 801229a:	6023      	str	r3, [r4, #0]
 801229c:	60e3      	str	r3, [r4, #12]
 801229e:	60a3      	str	r3, [r4, #8]
 80122a0:	7013      	strb	r3, [r2, #0]
 80122a2:	65a3      	str	r3, [r4, #88]	; 0x58
 80122a4:	7831      	ldrb	r1, [r6, #0]
 80122a6:	2205      	movs	r2, #5
 80122a8:	4853      	ldr	r0, [pc, #332]	; (80123f8 <_svfiprintf_r+0x1e8>)
 80122aa:	f000 fa25 	bl	80126f8 <memchr>
 80122ae:	1c75      	adds	r5, r6, #1
 80122b0:	2800      	cmp	r0, #0
 80122b2:	d11f      	bne.n	80122f4 <_svfiprintf_r+0xe4>
 80122b4:	6822      	ldr	r2, [r4, #0]
 80122b6:	06d3      	lsls	r3, r2, #27
 80122b8:	d504      	bpl.n	80122c4 <_svfiprintf_r+0xb4>
 80122ba:	2353      	movs	r3, #83	; 0x53
 80122bc:	a904      	add	r1, sp, #16
 80122be:	185b      	adds	r3, r3, r1
 80122c0:	2120      	movs	r1, #32
 80122c2:	7019      	strb	r1, [r3, #0]
 80122c4:	0713      	lsls	r3, r2, #28
 80122c6:	d504      	bpl.n	80122d2 <_svfiprintf_r+0xc2>
 80122c8:	2353      	movs	r3, #83	; 0x53
 80122ca:	a904      	add	r1, sp, #16
 80122cc:	185b      	adds	r3, r3, r1
 80122ce:	212b      	movs	r1, #43	; 0x2b
 80122d0:	7019      	strb	r1, [r3, #0]
 80122d2:	7833      	ldrb	r3, [r6, #0]
 80122d4:	2b2a      	cmp	r3, #42	; 0x2a
 80122d6:	d016      	beq.n	8012306 <_svfiprintf_r+0xf6>
 80122d8:	0035      	movs	r5, r6
 80122da:	2100      	movs	r1, #0
 80122dc:	200a      	movs	r0, #10
 80122de:	68e3      	ldr	r3, [r4, #12]
 80122e0:	782a      	ldrb	r2, [r5, #0]
 80122e2:	1c6e      	adds	r6, r5, #1
 80122e4:	3a30      	subs	r2, #48	; 0x30
 80122e6:	2a09      	cmp	r2, #9
 80122e8:	d94e      	bls.n	8012388 <_svfiprintf_r+0x178>
 80122ea:	2900      	cmp	r1, #0
 80122ec:	d018      	beq.n	8012320 <_svfiprintf_r+0x110>
 80122ee:	e010      	b.n	8012312 <_svfiprintf_r+0x102>
 80122f0:	3501      	adds	r5, #1
 80122f2:	e7b1      	b.n	8012258 <_svfiprintf_r+0x48>
 80122f4:	4b40      	ldr	r3, [pc, #256]	; (80123f8 <_svfiprintf_r+0x1e8>)
 80122f6:	6822      	ldr	r2, [r4, #0]
 80122f8:	1ac0      	subs	r0, r0, r3
 80122fa:	2301      	movs	r3, #1
 80122fc:	4083      	lsls	r3, r0
 80122fe:	4313      	orrs	r3, r2
 8012300:	6023      	str	r3, [r4, #0]
 8012302:	002e      	movs	r6, r5
 8012304:	e7ce      	b.n	80122a4 <_svfiprintf_r+0x94>
 8012306:	9b07      	ldr	r3, [sp, #28]
 8012308:	1d19      	adds	r1, r3, #4
 801230a:	681b      	ldr	r3, [r3, #0]
 801230c:	9107      	str	r1, [sp, #28]
 801230e:	2b00      	cmp	r3, #0
 8012310:	db01      	blt.n	8012316 <_svfiprintf_r+0x106>
 8012312:	930b      	str	r3, [sp, #44]	; 0x2c
 8012314:	e004      	b.n	8012320 <_svfiprintf_r+0x110>
 8012316:	425b      	negs	r3, r3
 8012318:	60e3      	str	r3, [r4, #12]
 801231a:	2302      	movs	r3, #2
 801231c:	4313      	orrs	r3, r2
 801231e:	6023      	str	r3, [r4, #0]
 8012320:	782b      	ldrb	r3, [r5, #0]
 8012322:	2b2e      	cmp	r3, #46	; 0x2e
 8012324:	d10a      	bne.n	801233c <_svfiprintf_r+0x12c>
 8012326:	786b      	ldrb	r3, [r5, #1]
 8012328:	2b2a      	cmp	r3, #42	; 0x2a
 801232a:	d135      	bne.n	8012398 <_svfiprintf_r+0x188>
 801232c:	9b07      	ldr	r3, [sp, #28]
 801232e:	3502      	adds	r5, #2
 8012330:	1d1a      	adds	r2, r3, #4
 8012332:	681b      	ldr	r3, [r3, #0]
 8012334:	9207      	str	r2, [sp, #28]
 8012336:	2b00      	cmp	r3, #0
 8012338:	db2b      	blt.n	8012392 <_svfiprintf_r+0x182>
 801233a:	9309      	str	r3, [sp, #36]	; 0x24
 801233c:	4e2f      	ldr	r6, [pc, #188]	; (80123fc <_svfiprintf_r+0x1ec>)
 801233e:	7829      	ldrb	r1, [r5, #0]
 8012340:	2203      	movs	r2, #3
 8012342:	0030      	movs	r0, r6
 8012344:	f000 f9d8 	bl	80126f8 <memchr>
 8012348:	2800      	cmp	r0, #0
 801234a:	d006      	beq.n	801235a <_svfiprintf_r+0x14a>
 801234c:	2340      	movs	r3, #64	; 0x40
 801234e:	1b80      	subs	r0, r0, r6
 8012350:	4083      	lsls	r3, r0
 8012352:	6822      	ldr	r2, [r4, #0]
 8012354:	3501      	adds	r5, #1
 8012356:	4313      	orrs	r3, r2
 8012358:	6023      	str	r3, [r4, #0]
 801235a:	7829      	ldrb	r1, [r5, #0]
 801235c:	2206      	movs	r2, #6
 801235e:	4828      	ldr	r0, [pc, #160]	; (8012400 <_svfiprintf_r+0x1f0>)
 8012360:	1c6e      	adds	r6, r5, #1
 8012362:	7621      	strb	r1, [r4, #24]
 8012364:	f000 f9c8 	bl	80126f8 <memchr>
 8012368:	2800      	cmp	r0, #0
 801236a:	d03c      	beq.n	80123e6 <_svfiprintf_r+0x1d6>
 801236c:	4b25      	ldr	r3, [pc, #148]	; (8012404 <_svfiprintf_r+0x1f4>)
 801236e:	2b00      	cmp	r3, #0
 8012370:	d125      	bne.n	80123be <_svfiprintf_r+0x1ae>
 8012372:	2207      	movs	r2, #7
 8012374:	9b07      	ldr	r3, [sp, #28]
 8012376:	3307      	adds	r3, #7
 8012378:	4393      	bics	r3, r2
 801237a:	3308      	adds	r3, #8
 801237c:	9307      	str	r3, [sp, #28]
 801237e:	6963      	ldr	r3, [r4, #20]
 8012380:	9a04      	ldr	r2, [sp, #16]
 8012382:	189b      	adds	r3, r3, r2
 8012384:	6163      	str	r3, [r4, #20]
 8012386:	e766      	b.n	8012256 <_svfiprintf_r+0x46>
 8012388:	4343      	muls	r3, r0
 801238a:	2101      	movs	r1, #1
 801238c:	189b      	adds	r3, r3, r2
 801238e:	0035      	movs	r5, r6
 8012390:	e7a6      	b.n	80122e0 <_svfiprintf_r+0xd0>
 8012392:	2301      	movs	r3, #1
 8012394:	425b      	negs	r3, r3
 8012396:	e7d0      	b.n	801233a <_svfiprintf_r+0x12a>
 8012398:	2300      	movs	r3, #0
 801239a:	200a      	movs	r0, #10
 801239c:	001a      	movs	r2, r3
 801239e:	3501      	adds	r5, #1
 80123a0:	6063      	str	r3, [r4, #4]
 80123a2:	7829      	ldrb	r1, [r5, #0]
 80123a4:	1c6e      	adds	r6, r5, #1
 80123a6:	3930      	subs	r1, #48	; 0x30
 80123a8:	2909      	cmp	r1, #9
 80123aa:	d903      	bls.n	80123b4 <_svfiprintf_r+0x1a4>
 80123ac:	2b00      	cmp	r3, #0
 80123ae:	d0c5      	beq.n	801233c <_svfiprintf_r+0x12c>
 80123b0:	9209      	str	r2, [sp, #36]	; 0x24
 80123b2:	e7c3      	b.n	801233c <_svfiprintf_r+0x12c>
 80123b4:	4342      	muls	r2, r0
 80123b6:	2301      	movs	r3, #1
 80123b8:	1852      	adds	r2, r2, r1
 80123ba:	0035      	movs	r5, r6
 80123bc:	e7f1      	b.n	80123a2 <_svfiprintf_r+0x192>
 80123be:	ab07      	add	r3, sp, #28
 80123c0:	9300      	str	r3, [sp, #0]
 80123c2:	003a      	movs	r2, r7
 80123c4:	4b10      	ldr	r3, [pc, #64]	; (8012408 <_svfiprintf_r+0x1f8>)
 80123c6:	0021      	movs	r1, r4
 80123c8:	9803      	ldr	r0, [sp, #12]
 80123ca:	e000      	b.n	80123ce <_svfiprintf_r+0x1be>
 80123cc:	bf00      	nop
 80123ce:	9004      	str	r0, [sp, #16]
 80123d0:	9b04      	ldr	r3, [sp, #16]
 80123d2:	3301      	adds	r3, #1
 80123d4:	d1d3      	bne.n	801237e <_svfiprintf_r+0x16e>
 80123d6:	89bb      	ldrh	r3, [r7, #12]
 80123d8:	980d      	ldr	r0, [sp, #52]	; 0x34
 80123da:	065b      	lsls	r3, r3, #25
 80123dc:	d400      	bmi.n	80123e0 <_svfiprintf_r+0x1d0>
 80123de:	e72e      	b.n	801223e <_svfiprintf_r+0x2e>
 80123e0:	2001      	movs	r0, #1
 80123e2:	4240      	negs	r0, r0
 80123e4:	e72b      	b.n	801223e <_svfiprintf_r+0x2e>
 80123e6:	ab07      	add	r3, sp, #28
 80123e8:	9300      	str	r3, [sp, #0]
 80123ea:	003a      	movs	r2, r7
 80123ec:	4b06      	ldr	r3, [pc, #24]	; (8012408 <_svfiprintf_r+0x1f8>)
 80123ee:	0021      	movs	r1, r4
 80123f0:	9803      	ldr	r0, [sp, #12]
 80123f2:	f000 f879 	bl	80124e8 <_printf_i>
 80123f6:	e7ea      	b.n	80123ce <_svfiprintf_r+0x1be>
 80123f8:	0801cb40 	.word	0x0801cb40
 80123fc:	0801cb46 	.word	0x0801cb46
 8012400:	0801cb4a 	.word	0x0801cb4a
 8012404:	00000000 	.word	0x00000000
 8012408:	0801214d 	.word	0x0801214d

0801240c <_printf_common>:
 801240c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801240e:	0015      	movs	r5, r2
 8012410:	9301      	str	r3, [sp, #4]
 8012412:	688a      	ldr	r2, [r1, #8]
 8012414:	690b      	ldr	r3, [r1, #16]
 8012416:	9000      	str	r0, [sp, #0]
 8012418:	000c      	movs	r4, r1
 801241a:	4293      	cmp	r3, r2
 801241c:	da00      	bge.n	8012420 <_printf_common+0x14>
 801241e:	0013      	movs	r3, r2
 8012420:	0022      	movs	r2, r4
 8012422:	602b      	str	r3, [r5, #0]
 8012424:	3243      	adds	r2, #67	; 0x43
 8012426:	7812      	ldrb	r2, [r2, #0]
 8012428:	2a00      	cmp	r2, #0
 801242a:	d001      	beq.n	8012430 <_printf_common+0x24>
 801242c:	3301      	adds	r3, #1
 801242e:	602b      	str	r3, [r5, #0]
 8012430:	6823      	ldr	r3, [r4, #0]
 8012432:	069b      	lsls	r3, r3, #26
 8012434:	d502      	bpl.n	801243c <_printf_common+0x30>
 8012436:	682b      	ldr	r3, [r5, #0]
 8012438:	3302      	adds	r3, #2
 801243a:	602b      	str	r3, [r5, #0]
 801243c:	2706      	movs	r7, #6
 801243e:	6823      	ldr	r3, [r4, #0]
 8012440:	401f      	ands	r7, r3
 8012442:	d027      	beq.n	8012494 <_printf_common+0x88>
 8012444:	0023      	movs	r3, r4
 8012446:	3343      	adds	r3, #67	; 0x43
 8012448:	781b      	ldrb	r3, [r3, #0]
 801244a:	1e5a      	subs	r2, r3, #1
 801244c:	4193      	sbcs	r3, r2
 801244e:	6822      	ldr	r2, [r4, #0]
 8012450:	0692      	lsls	r2, r2, #26
 8012452:	d430      	bmi.n	80124b6 <_printf_common+0xaa>
 8012454:	0022      	movs	r2, r4
 8012456:	9901      	ldr	r1, [sp, #4]
 8012458:	3243      	adds	r2, #67	; 0x43
 801245a:	9800      	ldr	r0, [sp, #0]
 801245c:	9e08      	ldr	r6, [sp, #32]
 801245e:	47b0      	blx	r6
 8012460:	1c43      	adds	r3, r0, #1
 8012462:	d025      	beq.n	80124b0 <_printf_common+0xa4>
 8012464:	2306      	movs	r3, #6
 8012466:	6820      	ldr	r0, [r4, #0]
 8012468:	682a      	ldr	r2, [r5, #0]
 801246a:	68e1      	ldr	r1, [r4, #12]
 801246c:	4003      	ands	r3, r0
 801246e:	2500      	movs	r5, #0
 8012470:	2b04      	cmp	r3, #4
 8012472:	d103      	bne.n	801247c <_printf_common+0x70>
 8012474:	1a8d      	subs	r5, r1, r2
 8012476:	43eb      	mvns	r3, r5
 8012478:	17db      	asrs	r3, r3, #31
 801247a:	401d      	ands	r5, r3
 801247c:	68a3      	ldr	r3, [r4, #8]
 801247e:	6922      	ldr	r2, [r4, #16]
 8012480:	4293      	cmp	r3, r2
 8012482:	dd01      	ble.n	8012488 <_printf_common+0x7c>
 8012484:	1a9b      	subs	r3, r3, r2
 8012486:	18ed      	adds	r5, r5, r3
 8012488:	2700      	movs	r7, #0
 801248a:	42bd      	cmp	r5, r7
 801248c:	d120      	bne.n	80124d0 <_printf_common+0xc4>
 801248e:	2000      	movs	r0, #0
 8012490:	e010      	b.n	80124b4 <_printf_common+0xa8>
 8012492:	3701      	adds	r7, #1
 8012494:	68e3      	ldr	r3, [r4, #12]
 8012496:	682a      	ldr	r2, [r5, #0]
 8012498:	1a9b      	subs	r3, r3, r2
 801249a:	42bb      	cmp	r3, r7
 801249c:	ddd2      	ble.n	8012444 <_printf_common+0x38>
 801249e:	0022      	movs	r2, r4
 80124a0:	2301      	movs	r3, #1
 80124a2:	3219      	adds	r2, #25
 80124a4:	9901      	ldr	r1, [sp, #4]
 80124a6:	9800      	ldr	r0, [sp, #0]
 80124a8:	9e08      	ldr	r6, [sp, #32]
 80124aa:	47b0      	blx	r6
 80124ac:	1c43      	adds	r3, r0, #1
 80124ae:	d1f0      	bne.n	8012492 <_printf_common+0x86>
 80124b0:	2001      	movs	r0, #1
 80124b2:	4240      	negs	r0, r0
 80124b4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80124b6:	2030      	movs	r0, #48	; 0x30
 80124b8:	18e1      	adds	r1, r4, r3
 80124ba:	3143      	adds	r1, #67	; 0x43
 80124bc:	7008      	strb	r0, [r1, #0]
 80124be:	0021      	movs	r1, r4
 80124c0:	1c5a      	adds	r2, r3, #1
 80124c2:	3145      	adds	r1, #69	; 0x45
 80124c4:	7809      	ldrb	r1, [r1, #0]
 80124c6:	18a2      	adds	r2, r4, r2
 80124c8:	3243      	adds	r2, #67	; 0x43
 80124ca:	3302      	adds	r3, #2
 80124cc:	7011      	strb	r1, [r2, #0]
 80124ce:	e7c1      	b.n	8012454 <_printf_common+0x48>
 80124d0:	0022      	movs	r2, r4
 80124d2:	2301      	movs	r3, #1
 80124d4:	321a      	adds	r2, #26
 80124d6:	9901      	ldr	r1, [sp, #4]
 80124d8:	9800      	ldr	r0, [sp, #0]
 80124da:	9e08      	ldr	r6, [sp, #32]
 80124dc:	47b0      	blx	r6
 80124de:	1c43      	adds	r3, r0, #1
 80124e0:	d0e6      	beq.n	80124b0 <_printf_common+0xa4>
 80124e2:	3701      	adds	r7, #1
 80124e4:	e7d1      	b.n	801248a <_printf_common+0x7e>
	...

080124e8 <_printf_i>:
 80124e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80124ea:	b089      	sub	sp, #36	; 0x24
 80124ec:	9204      	str	r2, [sp, #16]
 80124ee:	000a      	movs	r2, r1
 80124f0:	3243      	adds	r2, #67	; 0x43
 80124f2:	9305      	str	r3, [sp, #20]
 80124f4:	9003      	str	r0, [sp, #12]
 80124f6:	9202      	str	r2, [sp, #8]
 80124f8:	7e0a      	ldrb	r2, [r1, #24]
 80124fa:	000c      	movs	r4, r1
 80124fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80124fe:	2a6e      	cmp	r2, #110	; 0x6e
 8012500:	d100      	bne.n	8012504 <_printf_i+0x1c>
 8012502:	e086      	b.n	8012612 <_printf_i+0x12a>
 8012504:	d81f      	bhi.n	8012546 <_printf_i+0x5e>
 8012506:	2a63      	cmp	r2, #99	; 0x63
 8012508:	d033      	beq.n	8012572 <_printf_i+0x8a>
 801250a:	d808      	bhi.n	801251e <_printf_i+0x36>
 801250c:	2a00      	cmp	r2, #0
 801250e:	d100      	bne.n	8012512 <_printf_i+0x2a>
 8012510:	e08c      	b.n	801262c <_printf_i+0x144>
 8012512:	2a58      	cmp	r2, #88	; 0x58
 8012514:	d04d      	beq.n	80125b2 <_printf_i+0xca>
 8012516:	0025      	movs	r5, r4
 8012518:	3542      	adds	r5, #66	; 0x42
 801251a:	702a      	strb	r2, [r5, #0]
 801251c:	e030      	b.n	8012580 <_printf_i+0x98>
 801251e:	2a64      	cmp	r2, #100	; 0x64
 8012520:	d001      	beq.n	8012526 <_printf_i+0x3e>
 8012522:	2a69      	cmp	r2, #105	; 0x69
 8012524:	d1f7      	bne.n	8012516 <_printf_i+0x2e>
 8012526:	6819      	ldr	r1, [r3, #0]
 8012528:	6825      	ldr	r5, [r4, #0]
 801252a:	1d0a      	adds	r2, r1, #4
 801252c:	0628      	lsls	r0, r5, #24
 801252e:	d529      	bpl.n	8012584 <_printf_i+0x9c>
 8012530:	6808      	ldr	r0, [r1, #0]
 8012532:	601a      	str	r2, [r3, #0]
 8012534:	2800      	cmp	r0, #0
 8012536:	da03      	bge.n	8012540 <_printf_i+0x58>
 8012538:	232d      	movs	r3, #45	; 0x2d
 801253a:	9a02      	ldr	r2, [sp, #8]
 801253c:	4240      	negs	r0, r0
 801253e:	7013      	strb	r3, [r2, #0]
 8012540:	4e6b      	ldr	r6, [pc, #428]	; (80126f0 <_printf_i+0x208>)
 8012542:	270a      	movs	r7, #10
 8012544:	e04f      	b.n	80125e6 <_printf_i+0xfe>
 8012546:	2a73      	cmp	r2, #115	; 0x73
 8012548:	d074      	beq.n	8012634 <_printf_i+0x14c>
 801254a:	d808      	bhi.n	801255e <_printf_i+0x76>
 801254c:	2a6f      	cmp	r2, #111	; 0x6f
 801254e:	d01f      	beq.n	8012590 <_printf_i+0xa8>
 8012550:	2a70      	cmp	r2, #112	; 0x70
 8012552:	d1e0      	bne.n	8012516 <_printf_i+0x2e>
 8012554:	2220      	movs	r2, #32
 8012556:	6809      	ldr	r1, [r1, #0]
 8012558:	430a      	orrs	r2, r1
 801255a:	6022      	str	r2, [r4, #0]
 801255c:	e003      	b.n	8012566 <_printf_i+0x7e>
 801255e:	2a75      	cmp	r2, #117	; 0x75
 8012560:	d016      	beq.n	8012590 <_printf_i+0xa8>
 8012562:	2a78      	cmp	r2, #120	; 0x78
 8012564:	d1d7      	bne.n	8012516 <_printf_i+0x2e>
 8012566:	0022      	movs	r2, r4
 8012568:	2178      	movs	r1, #120	; 0x78
 801256a:	3245      	adds	r2, #69	; 0x45
 801256c:	7011      	strb	r1, [r2, #0]
 801256e:	4e61      	ldr	r6, [pc, #388]	; (80126f4 <_printf_i+0x20c>)
 8012570:	e022      	b.n	80125b8 <_printf_i+0xd0>
 8012572:	0025      	movs	r5, r4
 8012574:	681a      	ldr	r2, [r3, #0]
 8012576:	3542      	adds	r5, #66	; 0x42
 8012578:	1d11      	adds	r1, r2, #4
 801257a:	6019      	str	r1, [r3, #0]
 801257c:	6813      	ldr	r3, [r2, #0]
 801257e:	702b      	strb	r3, [r5, #0]
 8012580:	2301      	movs	r3, #1
 8012582:	e065      	b.n	8012650 <_printf_i+0x168>
 8012584:	6808      	ldr	r0, [r1, #0]
 8012586:	601a      	str	r2, [r3, #0]
 8012588:	0669      	lsls	r1, r5, #25
 801258a:	d5d3      	bpl.n	8012534 <_printf_i+0x4c>
 801258c:	b200      	sxth	r0, r0
 801258e:	e7d1      	b.n	8012534 <_printf_i+0x4c>
 8012590:	6819      	ldr	r1, [r3, #0]
 8012592:	6825      	ldr	r5, [r4, #0]
 8012594:	1d08      	adds	r0, r1, #4
 8012596:	6018      	str	r0, [r3, #0]
 8012598:	6808      	ldr	r0, [r1, #0]
 801259a:	062e      	lsls	r6, r5, #24
 801259c:	d505      	bpl.n	80125aa <_printf_i+0xc2>
 801259e:	4e54      	ldr	r6, [pc, #336]	; (80126f0 <_printf_i+0x208>)
 80125a0:	2708      	movs	r7, #8
 80125a2:	2a6f      	cmp	r2, #111	; 0x6f
 80125a4:	d01b      	beq.n	80125de <_printf_i+0xf6>
 80125a6:	270a      	movs	r7, #10
 80125a8:	e019      	b.n	80125de <_printf_i+0xf6>
 80125aa:	066d      	lsls	r5, r5, #25
 80125ac:	d5f7      	bpl.n	801259e <_printf_i+0xb6>
 80125ae:	b280      	uxth	r0, r0
 80125b0:	e7f5      	b.n	801259e <_printf_i+0xb6>
 80125b2:	3145      	adds	r1, #69	; 0x45
 80125b4:	4e4e      	ldr	r6, [pc, #312]	; (80126f0 <_printf_i+0x208>)
 80125b6:	700a      	strb	r2, [r1, #0]
 80125b8:	6818      	ldr	r0, [r3, #0]
 80125ba:	6822      	ldr	r2, [r4, #0]
 80125bc:	1d01      	adds	r1, r0, #4
 80125be:	6800      	ldr	r0, [r0, #0]
 80125c0:	6019      	str	r1, [r3, #0]
 80125c2:	0615      	lsls	r5, r2, #24
 80125c4:	d521      	bpl.n	801260a <_printf_i+0x122>
 80125c6:	07d3      	lsls	r3, r2, #31
 80125c8:	d502      	bpl.n	80125d0 <_printf_i+0xe8>
 80125ca:	2320      	movs	r3, #32
 80125cc:	431a      	orrs	r2, r3
 80125ce:	6022      	str	r2, [r4, #0]
 80125d0:	2710      	movs	r7, #16
 80125d2:	2800      	cmp	r0, #0
 80125d4:	d103      	bne.n	80125de <_printf_i+0xf6>
 80125d6:	2320      	movs	r3, #32
 80125d8:	6822      	ldr	r2, [r4, #0]
 80125da:	439a      	bics	r2, r3
 80125dc:	6022      	str	r2, [r4, #0]
 80125de:	0023      	movs	r3, r4
 80125e0:	2200      	movs	r2, #0
 80125e2:	3343      	adds	r3, #67	; 0x43
 80125e4:	701a      	strb	r2, [r3, #0]
 80125e6:	6863      	ldr	r3, [r4, #4]
 80125e8:	60a3      	str	r3, [r4, #8]
 80125ea:	2b00      	cmp	r3, #0
 80125ec:	db58      	blt.n	80126a0 <_printf_i+0x1b8>
 80125ee:	2204      	movs	r2, #4
 80125f0:	6821      	ldr	r1, [r4, #0]
 80125f2:	4391      	bics	r1, r2
 80125f4:	6021      	str	r1, [r4, #0]
 80125f6:	2800      	cmp	r0, #0
 80125f8:	d154      	bne.n	80126a4 <_printf_i+0x1bc>
 80125fa:	9d02      	ldr	r5, [sp, #8]
 80125fc:	2b00      	cmp	r3, #0
 80125fe:	d05a      	beq.n	80126b6 <_printf_i+0x1ce>
 8012600:	0025      	movs	r5, r4
 8012602:	7833      	ldrb	r3, [r6, #0]
 8012604:	3542      	adds	r5, #66	; 0x42
 8012606:	702b      	strb	r3, [r5, #0]
 8012608:	e055      	b.n	80126b6 <_printf_i+0x1ce>
 801260a:	0655      	lsls	r5, r2, #25
 801260c:	d5db      	bpl.n	80125c6 <_printf_i+0xde>
 801260e:	b280      	uxth	r0, r0
 8012610:	e7d9      	b.n	80125c6 <_printf_i+0xde>
 8012612:	681a      	ldr	r2, [r3, #0]
 8012614:	680d      	ldr	r5, [r1, #0]
 8012616:	1d10      	adds	r0, r2, #4
 8012618:	6949      	ldr	r1, [r1, #20]
 801261a:	6018      	str	r0, [r3, #0]
 801261c:	6813      	ldr	r3, [r2, #0]
 801261e:	062e      	lsls	r6, r5, #24
 8012620:	d501      	bpl.n	8012626 <_printf_i+0x13e>
 8012622:	6019      	str	r1, [r3, #0]
 8012624:	e002      	b.n	801262c <_printf_i+0x144>
 8012626:	066d      	lsls	r5, r5, #25
 8012628:	d5fb      	bpl.n	8012622 <_printf_i+0x13a>
 801262a:	8019      	strh	r1, [r3, #0]
 801262c:	2300      	movs	r3, #0
 801262e:	9d02      	ldr	r5, [sp, #8]
 8012630:	6123      	str	r3, [r4, #16]
 8012632:	e04f      	b.n	80126d4 <_printf_i+0x1ec>
 8012634:	681a      	ldr	r2, [r3, #0]
 8012636:	1d11      	adds	r1, r2, #4
 8012638:	6019      	str	r1, [r3, #0]
 801263a:	6815      	ldr	r5, [r2, #0]
 801263c:	2100      	movs	r1, #0
 801263e:	6862      	ldr	r2, [r4, #4]
 8012640:	0028      	movs	r0, r5
 8012642:	f000 f859 	bl	80126f8 <memchr>
 8012646:	2800      	cmp	r0, #0
 8012648:	d001      	beq.n	801264e <_printf_i+0x166>
 801264a:	1b40      	subs	r0, r0, r5
 801264c:	6060      	str	r0, [r4, #4]
 801264e:	6863      	ldr	r3, [r4, #4]
 8012650:	6123      	str	r3, [r4, #16]
 8012652:	2300      	movs	r3, #0
 8012654:	9a02      	ldr	r2, [sp, #8]
 8012656:	7013      	strb	r3, [r2, #0]
 8012658:	e03c      	b.n	80126d4 <_printf_i+0x1ec>
 801265a:	6923      	ldr	r3, [r4, #16]
 801265c:	002a      	movs	r2, r5
 801265e:	9904      	ldr	r1, [sp, #16]
 8012660:	9803      	ldr	r0, [sp, #12]
 8012662:	9d05      	ldr	r5, [sp, #20]
 8012664:	47a8      	blx	r5
 8012666:	1c43      	adds	r3, r0, #1
 8012668:	d03e      	beq.n	80126e8 <_printf_i+0x200>
 801266a:	6823      	ldr	r3, [r4, #0]
 801266c:	079b      	lsls	r3, r3, #30
 801266e:	d415      	bmi.n	801269c <_printf_i+0x1b4>
 8012670:	9b07      	ldr	r3, [sp, #28]
 8012672:	68e0      	ldr	r0, [r4, #12]
 8012674:	4298      	cmp	r0, r3
 8012676:	da39      	bge.n	80126ec <_printf_i+0x204>
 8012678:	0018      	movs	r0, r3
 801267a:	e037      	b.n	80126ec <_printf_i+0x204>
 801267c:	0022      	movs	r2, r4
 801267e:	2301      	movs	r3, #1
 8012680:	3219      	adds	r2, #25
 8012682:	9904      	ldr	r1, [sp, #16]
 8012684:	9803      	ldr	r0, [sp, #12]
 8012686:	9e05      	ldr	r6, [sp, #20]
 8012688:	47b0      	blx	r6
 801268a:	1c43      	adds	r3, r0, #1
 801268c:	d02c      	beq.n	80126e8 <_printf_i+0x200>
 801268e:	3501      	adds	r5, #1
 8012690:	68e3      	ldr	r3, [r4, #12]
 8012692:	9a07      	ldr	r2, [sp, #28]
 8012694:	1a9b      	subs	r3, r3, r2
 8012696:	42ab      	cmp	r3, r5
 8012698:	dcf0      	bgt.n	801267c <_printf_i+0x194>
 801269a:	e7e9      	b.n	8012670 <_printf_i+0x188>
 801269c:	2500      	movs	r5, #0
 801269e:	e7f7      	b.n	8012690 <_printf_i+0x1a8>
 80126a0:	2800      	cmp	r0, #0
 80126a2:	d0ad      	beq.n	8012600 <_printf_i+0x118>
 80126a4:	9d02      	ldr	r5, [sp, #8]
 80126a6:	0039      	movs	r1, r7
 80126a8:	f7ed fdc6 	bl	8000238 <__aeabi_uidivmod>
 80126ac:	5c73      	ldrb	r3, [r6, r1]
 80126ae:	3d01      	subs	r5, #1
 80126b0:	702b      	strb	r3, [r5, #0]
 80126b2:	2800      	cmp	r0, #0
 80126b4:	d1f7      	bne.n	80126a6 <_printf_i+0x1be>
 80126b6:	2f08      	cmp	r7, #8
 80126b8:	d109      	bne.n	80126ce <_printf_i+0x1e6>
 80126ba:	6823      	ldr	r3, [r4, #0]
 80126bc:	07db      	lsls	r3, r3, #31
 80126be:	d506      	bpl.n	80126ce <_printf_i+0x1e6>
 80126c0:	6863      	ldr	r3, [r4, #4]
 80126c2:	6922      	ldr	r2, [r4, #16]
 80126c4:	4293      	cmp	r3, r2
 80126c6:	dc02      	bgt.n	80126ce <_printf_i+0x1e6>
 80126c8:	2330      	movs	r3, #48	; 0x30
 80126ca:	3d01      	subs	r5, #1
 80126cc:	702b      	strb	r3, [r5, #0]
 80126ce:	9b02      	ldr	r3, [sp, #8]
 80126d0:	1b5b      	subs	r3, r3, r5
 80126d2:	6123      	str	r3, [r4, #16]
 80126d4:	9b05      	ldr	r3, [sp, #20]
 80126d6:	aa07      	add	r2, sp, #28
 80126d8:	9300      	str	r3, [sp, #0]
 80126da:	0021      	movs	r1, r4
 80126dc:	9b04      	ldr	r3, [sp, #16]
 80126de:	9803      	ldr	r0, [sp, #12]
 80126e0:	f7ff fe94 	bl	801240c <_printf_common>
 80126e4:	1c43      	adds	r3, r0, #1
 80126e6:	d1b8      	bne.n	801265a <_printf_i+0x172>
 80126e8:	2001      	movs	r0, #1
 80126ea:	4240      	negs	r0, r0
 80126ec:	b009      	add	sp, #36	; 0x24
 80126ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80126f0:	0801cb51 	.word	0x0801cb51
 80126f4:	0801cb62 	.word	0x0801cb62

080126f8 <memchr>:
 80126f8:	b2c9      	uxtb	r1, r1
 80126fa:	1882      	adds	r2, r0, r2
 80126fc:	4290      	cmp	r0, r2
 80126fe:	d101      	bne.n	8012704 <memchr+0xc>
 8012700:	2000      	movs	r0, #0
 8012702:	4770      	bx	lr
 8012704:	7803      	ldrb	r3, [r0, #0]
 8012706:	428b      	cmp	r3, r1
 8012708:	d0fb      	beq.n	8012702 <memchr+0xa>
 801270a:	3001      	adds	r0, #1
 801270c:	e7f6      	b.n	80126fc <memchr+0x4>

0801270e <memmove>:
 801270e:	b510      	push	{r4, lr}
 8012710:	4288      	cmp	r0, r1
 8012712:	d902      	bls.n	801271a <memmove+0xc>
 8012714:	188b      	adds	r3, r1, r2
 8012716:	4298      	cmp	r0, r3
 8012718:	d303      	bcc.n	8012722 <memmove+0x14>
 801271a:	2300      	movs	r3, #0
 801271c:	e007      	b.n	801272e <memmove+0x20>
 801271e:	5c8b      	ldrb	r3, [r1, r2]
 8012720:	5483      	strb	r3, [r0, r2]
 8012722:	3a01      	subs	r2, #1
 8012724:	d2fb      	bcs.n	801271e <memmove+0x10>
 8012726:	bd10      	pop	{r4, pc}
 8012728:	5ccc      	ldrb	r4, [r1, r3]
 801272a:	54c4      	strb	r4, [r0, r3]
 801272c:	3301      	adds	r3, #1
 801272e:	429a      	cmp	r2, r3
 8012730:	d1fa      	bne.n	8012728 <memmove+0x1a>
 8012732:	e7f8      	b.n	8012726 <memmove+0x18>

08012734 <_free_r>:
 8012734:	b570      	push	{r4, r5, r6, lr}
 8012736:	0005      	movs	r5, r0
 8012738:	2900      	cmp	r1, #0
 801273a:	d010      	beq.n	801275e <_free_r+0x2a>
 801273c:	1f0c      	subs	r4, r1, #4
 801273e:	6823      	ldr	r3, [r4, #0]
 8012740:	2b00      	cmp	r3, #0
 8012742:	da00      	bge.n	8012746 <_free_r+0x12>
 8012744:	18e4      	adds	r4, r4, r3
 8012746:	0028      	movs	r0, r5
 8012748:	f000 f8d4 	bl	80128f4 <__malloc_lock>
 801274c:	4a1d      	ldr	r2, [pc, #116]	; (80127c4 <_free_r+0x90>)
 801274e:	6813      	ldr	r3, [r2, #0]
 8012750:	2b00      	cmp	r3, #0
 8012752:	d105      	bne.n	8012760 <_free_r+0x2c>
 8012754:	6063      	str	r3, [r4, #4]
 8012756:	6014      	str	r4, [r2, #0]
 8012758:	0028      	movs	r0, r5
 801275a:	f000 f8cc 	bl	80128f6 <__malloc_unlock>
 801275e:	bd70      	pop	{r4, r5, r6, pc}
 8012760:	42a3      	cmp	r3, r4
 8012762:	d909      	bls.n	8012778 <_free_r+0x44>
 8012764:	6821      	ldr	r1, [r4, #0]
 8012766:	1860      	adds	r0, r4, r1
 8012768:	4283      	cmp	r3, r0
 801276a:	d1f3      	bne.n	8012754 <_free_r+0x20>
 801276c:	6818      	ldr	r0, [r3, #0]
 801276e:	685b      	ldr	r3, [r3, #4]
 8012770:	1841      	adds	r1, r0, r1
 8012772:	6021      	str	r1, [r4, #0]
 8012774:	e7ee      	b.n	8012754 <_free_r+0x20>
 8012776:	0013      	movs	r3, r2
 8012778:	685a      	ldr	r2, [r3, #4]
 801277a:	2a00      	cmp	r2, #0
 801277c:	d001      	beq.n	8012782 <_free_r+0x4e>
 801277e:	42a2      	cmp	r2, r4
 8012780:	d9f9      	bls.n	8012776 <_free_r+0x42>
 8012782:	6819      	ldr	r1, [r3, #0]
 8012784:	1858      	adds	r0, r3, r1
 8012786:	42a0      	cmp	r0, r4
 8012788:	d10b      	bne.n	80127a2 <_free_r+0x6e>
 801278a:	6820      	ldr	r0, [r4, #0]
 801278c:	1809      	adds	r1, r1, r0
 801278e:	1858      	adds	r0, r3, r1
 8012790:	6019      	str	r1, [r3, #0]
 8012792:	4282      	cmp	r2, r0
 8012794:	d1e0      	bne.n	8012758 <_free_r+0x24>
 8012796:	6810      	ldr	r0, [r2, #0]
 8012798:	6852      	ldr	r2, [r2, #4]
 801279a:	1841      	adds	r1, r0, r1
 801279c:	6019      	str	r1, [r3, #0]
 801279e:	605a      	str	r2, [r3, #4]
 80127a0:	e7da      	b.n	8012758 <_free_r+0x24>
 80127a2:	42a0      	cmp	r0, r4
 80127a4:	d902      	bls.n	80127ac <_free_r+0x78>
 80127a6:	230c      	movs	r3, #12
 80127a8:	602b      	str	r3, [r5, #0]
 80127aa:	e7d5      	b.n	8012758 <_free_r+0x24>
 80127ac:	6821      	ldr	r1, [r4, #0]
 80127ae:	1860      	adds	r0, r4, r1
 80127b0:	4282      	cmp	r2, r0
 80127b2:	d103      	bne.n	80127bc <_free_r+0x88>
 80127b4:	6810      	ldr	r0, [r2, #0]
 80127b6:	6852      	ldr	r2, [r2, #4]
 80127b8:	1841      	adds	r1, r0, r1
 80127ba:	6021      	str	r1, [r4, #0]
 80127bc:	6062      	str	r2, [r4, #4]
 80127be:	605c      	str	r4, [r3, #4]
 80127c0:	e7ca      	b.n	8012758 <_free_r+0x24>
 80127c2:	46c0      	nop			; (mov r8, r8)
 80127c4:	20002b94 	.word	0x20002b94

080127c8 <_malloc_r>:
 80127c8:	2303      	movs	r3, #3
 80127ca:	b570      	push	{r4, r5, r6, lr}
 80127cc:	1ccd      	adds	r5, r1, #3
 80127ce:	439d      	bics	r5, r3
 80127d0:	3508      	adds	r5, #8
 80127d2:	0006      	movs	r6, r0
 80127d4:	2d0c      	cmp	r5, #12
 80127d6:	d21e      	bcs.n	8012816 <_malloc_r+0x4e>
 80127d8:	250c      	movs	r5, #12
 80127da:	42a9      	cmp	r1, r5
 80127dc:	d81d      	bhi.n	801281a <_malloc_r+0x52>
 80127de:	0030      	movs	r0, r6
 80127e0:	f000 f888 	bl	80128f4 <__malloc_lock>
 80127e4:	4a25      	ldr	r2, [pc, #148]	; (801287c <_malloc_r+0xb4>)
 80127e6:	6814      	ldr	r4, [r2, #0]
 80127e8:	0021      	movs	r1, r4
 80127ea:	2900      	cmp	r1, #0
 80127ec:	d119      	bne.n	8012822 <_malloc_r+0x5a>
 80127ee:	4c24      	ldr	r4, [pc, #144]	; (8012880 <_malloc_r+0xb8>)
 80127f0:	6823      	ldr	r3, [r4, #0]
 80127f2:	2b00      	cmp	r3, #0
 80127f4:	d103      	bne.n	80127fe <_malloc_r+0x36>
 80127f6:	0030      	movs	r0, r6
 80127f8:	f000 f86a 	bl	80128d0 <_sbrk_r>
 80127fc:	6020      	str	r0, [r4, #0]
 80127fe:	0029      	movs	r1, r5
 8012800:	0030      	movs	r0, r6
 8012802:	f000 f865 	bl	80128d0 <_sbrk_r>
 8012806:	1c43      	adds	r3, r0, #1
 8012808:	d12b      	bne.n	8012862 <_malloc_r+0x9a>
 801280a:	230c      	movs	r3, #12
 801280c:	0030      	movs	r0, r6
 801280e:	6033      	str	r3, [r6, #0]
 8012810:	f000 f871 	bl	80128f6 <__malloc_unlock>
 8012814:	e003      	b.n	801281e <_malloc_r+0x56>
 8012816:	2d00      	cmp	r5, #0
 8012818:	dadf      	bge.n	80127da <_malloc_r+0x12>
 801281a:	230c      	movs	r3, #12
 801281c:	6033      	str	r3, [r6, #0]
 801281e:	2000      	movs	r0, #0
 8012820:	bd70      	pop	{r4, r5, r6, pc}
 8012822:	680b      	ldr	r3, [r1, #0]
 8012824:	1b5b      	subs	r3, r3, r5
 8012826:	d419      	bmi.n	801285c <_malloc_r+0x94>
 8012828:	2b0b      	cmp	r3, #11
 801282a:	d903      	bls.n	8012834 <_malloc_r+0x6c>
 801282c:	600b      	str	r3, [r1, #0]
 801282e:	18cc      	adds	r4, r1, r3
 8012830:	6025      	str	r5, [r4, #0]
 8012832:	e003      	b.n	801283c <_malloc_r+0x74>
 8012834:	684b      	ldr	r3, [r1, #4]
 8012836:	428c      	cmp	r4, r1
 8012838:	d10d      	bne.n	8012856 <_malloc_r+0x8e>
 801283a:	6013      	str	r3, [r2, #0]
 801283c:	0030      	movs	r0, r6
 801283e:	f000 f85a 	bl	80128f6 <__malloc_unlock>
 8012842:	0020      	movs	r0, r4
 8012844:	2207      	movs	r2, #7
 8012846:	300b      	adds	r0, #11
 8012848:	1d23      	adds	r3, r4, #4
 801284a:	4390      	bics	r0, r2
 801284c:	1ac3      	subs	r3, r0, r3
 801284e:	d0e7      	beq.n	8012820 <_malloc_r+0x58>
 8012850:	425a      	negs	r2, r3
 8012852:	50e2      	str	r2, [r4, r3]
 8012854:	e7e4      	b.n	8012820 <_malloc_r+0x58>
 8012856:	6063      	str	r3, [r4, #4]
 8012858:	000c      	movs	r4, r1
 801285a:	e7ef      	b.n	801283c <_malloc_r+0x74>
 801285c:	000c      	movs	r4, r1
 801285e:	6849      	ldr	r1, [r1, #4]
 8012860:	e7c3      	b.n	80127ea <_malloc_r+0x22>
 8012862:	2303      	movs	r3, #3
 8012864:	1cc4      	adds	r4, r0, #3
 8012866:	439c      	bics	r4, r3
 8012868:	42a0      	cmp	r0, r4
 801286a:	d0e1      	beq.n	8012830 <_malloc_r+0x68>
 801286c:	1a21      	subs	r1, r4, r0
 801286e:	0030      	movs	r0, r6
 8012870:	f000 f82e 	bl	80128d0 <_sbrk_r>
 8012874:	1c43      	adds	r3, r0, #1
 8012876:	d1db      	bne.n	8012830 <_malloc_r+0x68>
 8012878:	e7c7      	b.n	801280a <_malloc_r+0x42>
 801287a:	46c0      	nop			; (mov r8, r8)
 801287c:	20002b94 	.word	0x20002b94
 8012880:	20002b98 	.word	0x20002b98

08012884 <_realloc_r>:
 8012884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012886:	0007      	movs	r7, r0
 8012888:	000d      	movs	r5, r1
 801288a:	0016      	movs	r6, r2
 801288c:	2900      	cmp	r1, #0
 801288e:	d105      	bne.n	801289c <_realloc_r+0x18>
 8012890:	0011      	movs	r1, r2
 8012892:	f7ff ff99 	bl	80127c8 <_malloc_r>
 8012896:	0004      	movs	r4, r0
 8012898:	0020      	movs	r0, r4
 801289a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801289c:	2a00      	cmp	r2, #0
 801289e:	d103      	bne.n	80128a8 <_realloc_r+0x24>
 80128a0:	f7ff ff48 	bl	8012734 <_free_r>
 80128a4:	0034      	movs	r4, r6
 80128a6:	e7f7      	b.n	8012898 <_realloc_r+0x14>
 80128a8:	f000 f826 	bl	80128f8 <_malloc_usable_size_r>
 80128ac:	002c      	movs	r4, r5
 80128ae:	42b0      	cmp	r0, r6
 80128b0:	d2f2      	bcs.n	8012898 <_realloc_r+0x14>
 80128b2:	0031      	movs	r1, r6
 80128b4:	0038      	movs	r0, r7
 80128b6:	f7ff ff87 	bl	80127c8 <_malloc_r>
 80128ba:	1e04      	subs	r4, r0, #0
 80128bc:	d0ec      	beq.n	8012898 <_realloc_r+0x14>
 80128be:	0029      	movs	r1, r5
 80128c0:	0032      	movs	r2, r6
 80128c2:	f7ff fbc8 	bl	8012056 <memcpy>
 80128c6:	0029      	movs	r1, r5
 80128c8:	0038      	movs	r0, r7
 80128ca:	f7ff ff33 	bl	8012734 <_free_r>
 80128ce:	e7e3      	b.n	8012898 <_realloc_r+0x14>

080128d0 <_sbrk_r>:
 80128d0:	2300      	movs	r3, #0
 80128d2:	b570      	push	{r4, r5, r6, lr}
 80128d4:	4c06      	ldr	r4, [pc, #24]	; (80128f0 <_sbrk_r+0x20>)
 80128d6:	0005      	movs	r5, r0
 80128d8:	0008      	movs	r0, r1
 80128da:	6023      	str	r3, [r4, #0]
 80128dc:	f7ed fe68 	bl	80005b0 <_sbrk>
 80128e0:	1c43      	adds	r3, r0, #1
 80128e2:	d103      	bne.n	80128ec <_sbrk_r+0x1c>
 80128e4:	6823      	ldr	r3, [r4, #0]
 80128e6:	2b00      	cmp	r3, #0
 80128e8:	d000      	beq.n	80128ec <_sbrk_r+0x1c>
 80128ea:	602b      	str	r3, [r5, #0]
 80128ec:	bd70      	pop	{r4, r5, r6, pc}
 80128ee:	46c0      	nop			; (mov r8, r8)
 80128f0:	200039ec 	.word	0x200039ec

080128f4 <__malloc_lock>:
 80128f4:	4770      	bx	lr

080128f6 <__malloc_unlock>:
 80128f6:	4770      	bx	lr

080128f8 <_malloc_usable_size_r>:
 80128f8:	1f0b      	subs	r3, r1, #4
 80128fa:	681b      	ldr	r3, [r3, #0]
 80128fc:	1f18      	subs	r0, r3, #4
 80128fe:	2b00      	cmp	r3, #0
 8012900:	da01      	bge.n	8012906 <_malloc_usable_size_r+0xe>
 8012902:	580b      	ldr	r3, [r1, r0]
 8012904:	18c0      	adds	r0, r0, r3
 8012906:	4770      	bx	lr

08012908 <_init>:
 8012908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801290a:	46c0      	nop			; (mov r8, r8)
 801290c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801290e:	bc08      	pop	{r3}
 8012910:	469e      	mov	lr, r3
 8012912:	4770      	bx	lr

08012914 <_fini>:
 8012914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012916:	46c0      	nop			; (mov r8, r8)
 8012918:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801291a:	bc08      	pop	{r3}
 801291c:	469e      	mov	lr, r3
 801291e:	4770      	bx	lr
