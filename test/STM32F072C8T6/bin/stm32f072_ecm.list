
stm32f072_ecm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fc1c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001cc  0800fcdc  0800fcdc  0001fcdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fea8  0800fea8  0002009c  2**0
                  CONTENTS
  4 .ARM          00000000  0800fea8  0800fea8  0002009c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800fea8  0800fea8  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fea8  0800fea8  0001fea8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800feac  0800feac  0001feac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  0800feb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000369c  2000009c  0800ff4c  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003738  0800ff4c  00023738  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029068  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005bb1  00000000  00000000  0004912c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012c8  00000000  00000000  0004ece0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000010e0  00000000  00000000  0004ffa8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001cd20  00000000  00000000  00051088  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000169ee  00000000  00000000  0006dda8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00082af5  00000000  00000000  00084796  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010728b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e20  00000000  00000000  00107308  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000009c 	.word	0x2000009c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800fcc4 	.word	0x0800fcc4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000a0 	.word	0x200000a0
 8000104:	0800fcc4 	.word	0x0800fcc4

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <strlen>:
 800011c:	2300      	movs	r3, #0
 800011e:	5cc2      	ldrb	r2, [r0, r3]
 8000120:	3301      	adds	r3, #1
 8000122:	2a00      	cmp	r2, #0
 8000124:	d1fb      	bne.n	800011e <strlen+0x2>
 8000126:	1e58      	subs	r0, r3, #1
 8000128:	4770      	bx	lr
	...

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800041c:	f000 f8f8 	bl	8000610 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000420:	f000 f809 	bl	8000436 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000424:	f000 f85c 	bl	80004e0 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000428:	f00d ff76 	bl	800e318 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  ecm_main_init();
 800042c:	f00d fece 	bl	800e1cc <ecm_main_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ecm_main_loop();
 8000430:	f00d fef6 	bl	800e220 <ecm_main_loop>
 8000434:	e7fc      	b.n	8000430 <main+0x18>

08000436 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000436:	b590      	push	{r4, r7, lr}
 8000438:	b099      	sub	sp, #100	; 0x64
 800043a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800043c:	242c      	movs	r4, #44	; 0x2c
 800043e:	193b      	adds	r3, r7, r4
 8000440:	0018      	movs	r0, r3
 8000442:	2334      	movs	r3, #52	; 0x34
 8000444:	001a      	movs	r2, r3
 8000446:	2100      	movs	r1, #0
 8000448:	f00f fc34 	bl	800fcb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800044c:	231c      	movs	r3, #28
 800044e:	18fb      	adds	r3, r7, r3
 8000450:	0018      	movs	r0, r3
 8000452:	2310      	movs	r3, #16
 8000454:	001a      	movs	r2, r3
 8000456:	2100      	movs	r1, #0
 8000458:	f00f fc2c 	bl	800fcb4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800045c:	003b      	movs	r3, r7
 800045e:	0018      	movs	r0, r3
 8000460:	231c      	movs	r3, #28
 8000462:	001a      	movs	r2, r3
 8000464:	2100      	movs	r1, #0
 8000466:	f00f fc25 	bl	800fcb4 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 800046a:	193b      	adds	r3, r7, r4
 800046c:	2220      	movs	r2, #32
 800046e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000470:	193b      	adds	r3, r7, r4
 8000472:	2201      	movs	r2, #1
 8000474:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000476:	193b      	adds	r3, r7, r4
 8000478:	2200      	movs	r2, #0
 800047a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800047c:	193b      	adds	r3, r7, r4
 800047e:	0018      	movs	r0, r3
 8000480:	f001 fba0 	bl	8001bc4 <HAL_RCC_OscConfig>
 8000484:	1e03      	subs	r3, r0, #0
 8000486:	d001      	beq.n	800048c <SystemClock_Config+0x56>
  {
    Error_Handler();
 8000488:	f000 f842 	bl	8000510 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800048c:	211c      	movs	r1, #28
 800048e:	187b      	adds	r3, r7, r1
 8000490:	2207      	movs	r2, #7
 8000492:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8000494:	187b      	adds	r3, r7, r1
 8000496:	2203      	movs	r2, #3
 8000498:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800049a:	187b      	adds	r3, r7, r1
 800049c:	2200      	movs	r2, #0
 800049e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004a0:	187b      	adds	r3, r7, r1
 80004a2:	2200      	movs	r2, #0
 80004a4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80004a6:	187b      	adds	r3, r7, r1
 80004a8:	2101      	movs	r1, #1
 80004aa:	0018      	movs	r0, r3
 80004ac:	f001 ff10 	bl	80022d0 <HAL_RCC_ClockConfig>
 80004b0:	1e03      	subs	r3, r0, #0
 80004b2:	d001      	beq.n	80004b8 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80004b4:	f000 f82c 	bl	8000510 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80004b8:	003b      	movs	r3, r7
 80004ba:	2280      	movs	r2, #128	; 0x80
 80004bc:	0292      	lsls	r2, r2, #10
 80004be:	601a      	str	r2, [r3, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80004c0:	003b      	movs	r3, r7
 80004c2:	2200      	movs	r2, #0
 80004c4:	619a      	str	r2, [r3, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004c6:	003b      	movs	r3, r7
 80004c8:	0018      	movs	r0, r3
 80004ca:	f002 f859 	bl	8002580 <HAL_RCCEx_PeriphCLKConfig>
 80004ce:	1e03      	subs	r3, r0, #0
 80004d0:	d001      	beq.n	80004d6 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80004d2:	f000 f81d 	bl	8000510 <Error_Handler>
  }
}
 80004d6:	46c0      	nop			; (mov r8, r8)
 80004d8:	46bd      	mov	sp, r7
 80004da:	b019      	add	sp, #100	; 0x64
 80004dc:	bd90      	pop	{r4, r7, pc}
	...

080004e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004e6:	4b09      	ldr	r3, [pc, #36]	; (800050c <MX_GPIO_Init+0x2c>)
 80004e8:	695a      	ldr	r2, [r3, #20]
 80004ea:	4b08      	ldr	r3, [pc, #32]	; (800050c <MX_GPIO_Init+0x2c>)
 80004ec:	2180      	movs	r1, #128	; 0x80
 80004ee:	0289      	lsls	r1, r1, #10
 80004f0:	430a      	orrs	r2, r1
 80004f2:	615a      	str	r2, [r3, #20]
 80004f4:	4b05      	ldr	r3, [pc, #20]	; (800050c <MX_GPIO_Init+0x2c>)
 80004f6:	695a      	ldr	r2, [r3, #20]
 80004f8:	2380      	movs	r3, #128	; 0x80
 80004fa:	029b      	lsls	r3, r3, #10
 80004fc:	4013      	ands	r3, r2
 80004fe:	607b      	str	r3, [r7, #4]
 8000500:	687b      	ldr	r3, [r7, #4]

}
 8000502:	46c0      	nop			; (mov r8, r8)
 8000504:	46bd      	mov	sp, r7
 8000506:	b002      	add	sp, #8
 8000508:	bd80      	pop	{r7, pc}
 800050a:	46c0      	nop			; (mov r8, r8)
 800050c:	40021000 	.word	0x40021000

08000510 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000514:	46c0      	nop			; (mov r8, r8)
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}
	...

0800051c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000522:	4b0f      	ldr	r3, [pc, #60]	; (8000560 <HAL_MspInit+0x44>)
 8000524:	699a      	ldr	r2, [r3, #24]
 8000526:	4b0e      	ldr	r3, [pc, #56]	; (8000560 <HAL_MspInit+0x44>)
 8000528:	2101      	movs	r1, #1
 800052a:	430a      	orrs	r2, r1
 800052c:	619a      	str	r2, [r3, #24]
 800052e:	4b0c      	ldr	r3, [pc, #48]	; (8000560 <HAL_MspInit+0x44>)
 8000530:	699b      	ldr	r3, [r3, #24]
 8000532:	2201      	movs	r2, #1
 8000534:	4013      	ands	r3, r2
 8000536:	607b      	str	r3, [r7, #4]
 8000538:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800053a:	4b09      	ldr	r3, [pc, #36]	; (8000560 <HAL_MspInit+0x44>)
 800053c:	69da      	ldr	r2, [r3, #28]
 800053e:	4b08      	ldr	r3, [pc, #32]	; (8000560 <HAL_MspInit+0x44>)
 8000540:	2180      	movs	r1, #128	; 0x80
 8000542:	0549      	lsls	r1, r1, #21
 8000544:	430a      	orrs	r2, r1
 8000546:	61da      	str	r2, [r3, #28]
 8000548:	4b05      	ldr	r3, [pc, #20]	; (8000560 <HAL_MspInit+0x44>)
 800054a:	69da      	ldr	r2, [r3, #28]
 800054c:	2380      	movs	r3, #128	; 0x80
 800054e:	055b      	lsls	r3, r3, #21
 8000550:	4013      	ands	r3, r2
 8000552:	603b      	str	r3, [r7, #0]
 8000554:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000556:	46c0      	nop			; (mov r8, r8)
 8000558:	46bd      	mov	sp, r7
 800055a:	b002      	add	sp, #8
 800055c:	bd80      	pop	{r7, pc}
 800055e:	46c0      	nop			; (mov r8, r8)
 8000560:	40021000 	.word	0x40021000

08000564 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000568:	46c0      	nop			; (mov r8, r8)
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}

0800056e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800056e:	b580      	push	{r7, lr}
 8000570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000572:	e7fe      	b.n	8000572 <HardFault_Handler+0x4>

08000574 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000578:	46c0      	nop			; (mov r8, r8)
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}

0800057e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800057e:	b580      	push	{r7, lr}
 8000580:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000582:	46c0      	nop			; (mov r8, r8)
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}

08000588 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800058c:	f000 f888 	bl	80006a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000590:	46c0      	nop			; (mov r8, r8)
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
	...

08000598 <USB_IRQHandler>:

/**
  * @brief This function handles USB global interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800059c:	4b03      	ldr	r3, [pc, #12]	; (80005ac <USB_IRQHandler+0x14>)
 800059e:	0018      	movs	r0, r3
 80005a0:	f000 fbfa 	bl	8000d98 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 80005a4:	46c0      	nop			; (mov r8, r8)
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	46c0      	nop			; (mov r8, r8)
 80005ac:	200034c4 	.word	0x200034c4

080005b0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80005b4:	46c0      	nop			; (mov r8, r8)
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
	...

080005bc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005bc:	480d      	ldr	r0, [pc, #52]	; (80005f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005be:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005c0:	480d      	ldr	r0, [pc, #52]	; (80005f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80005c2:	490e      	ldr	r1, [pc, #56]	; (80005fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80005c4:	4a0e      	ldr	r2, [pc, #56]	; (8000600 <LoopForever+0xe>)
  movs r3, #0
 80005c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005c8:	e002      	b.n	80005d0 <LoopCopyDataInit>

080005ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005ce:	3304      	adds	r3, #4

080005d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005d4:	d3f9      	bcc.n	80005ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005d6:	4a0b      	ldr	r2, [pc, #44]	; (8000604 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005d8:	4c0b      	ldr	r4, [pc, #44]	; (8000608 <LoopForever+0x16>)
  movs r3, #0
 80005da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005dc:	e001      	b.n	80005e2 <LoopFillZerobss>

080005de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005e0:	3204      	adds	r2, #4

080005e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005e4:	d3fb      	bcc.n	80005de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80005e6:	f7ff ffe3 	bl	80005b0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80005ea:	f00f fb27 	bl	800fc3c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005ee:	f7ff ff13 	bl	8000418 <main>

080005f2 <LoopForever>:

LoopForever:
    b LoopForever
 80005f2:	e7fe      	b.n	80005f2 <LoopForever>
  ldr   r0, =_estack
 80005f4:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80005f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005fc:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8000600:	0800feb0 	.word	0x0800feb0
  ldr r2, =_sbss
 8000604:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8000608:	20003738 	.word	0x20003738

0800060c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800060c:	e7fe      	b.n	800060c <ADC1_COMP_IRQHandler>
	...

08000610 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000614:	4b07      	ldr	r3, [pc, #28]	; (8000634 <HAL_Init+0x24>)
 8000616:	681a      	ldr	r2, [r3, #0]
 8000618:	4b06      	ldr	r3, [pc, #24]	; (8000634 <HAL_Init+0x24>)
 800061a:	2110      	movs	r1, #16
 800061c:	430a      	orrs	r2, r1
 800061e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000620:	2000      	movs	r0, #0
 8000622:	f000 f809 	bl	8000638 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000626:	f7ff ff79 	bl	800051c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800062a:	2300      	movs	r3, #0
}
 800062c:	0018      	movs	r0, r3
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	46c0      	nop			; (mov r8, r8)
 8000634:	40022000 	.word	0x40022000

08000638 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000638:	b590      	push	{r4, r7, lr}
 800063a:	b083      	sub	sp, #12
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000640:	4b14      	ldr	r3, [pc, #80]	; (8000694 <HAL_InitTick+0x5c>)
 8000642:	681c      	ldr	r4, [r3, #0]
 8000644:	4b14      	ldr	r3, [pc, #80]	; (8000698 <HAL_InitTick+0x60>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	0019      	movs	r1, r3
 800064a:	23fa      	movs	r3, #250	; 0xfa
 800064c:	0098      	lsls	r0, r3, #2
 800064e:	f7ff fd6d 	bl	800012c <__udivsi3>
 8000652:	0003      	movs	r3, r0
 8000654:	0019      	movs	r1, r3
 8000656:	0020      	movs	r0, r4
 8000658:	f7ff fd68 	bl	800012c <__udivsi3>
 800065c:	0003      	movs	r3, r0
 800065e:	0018      	movs	r0, r3
 8000660:	f000 f90b 	bl	800087a <HAL_SYSTICK_Config>
 8000664:	1e03      	subs	r3, r0, #0
 8000666:	d001      	beq.n	800066c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000668:	2301      	movs	r3, #1
 800066a:	e00f      	b.n	800068c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	2b03      	cmp	r3, #3
 8000670:	d80b      	bhi.n	800068a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000672:	6879      	ldr	r1, [r7, #4]
 8000674:	2301      	movs	r3, #1
 8000676:	425b      	negs	r3, r3
 8000678:	2200      	movs	r2, #0
 800067a:	0018      	movs	r0, r3
 800067c:	f000 f8d8 	bl	8000830 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000680:	4b06      	ldr	r3, [pc, #24]	; (800069c <HAL_InitTick+0x64>)
 8000682:	687a      	ldr	r2, [r7, #4]
 8000684:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000686:	2300      	movs	r3, #0
 8000688:	e000      	b.n	800068c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800068a:	2301      	movs	r3, #1
}
 800068c:	0018      	movs	r0, r3
 800068e:	46bd      	mov	sp, r7
 8000690:	b003      	add	sp, #12
 8000692:	bd90      	pop	{r4, r7, pc}
 8000694:	20000000 	.word	0x20000000
 8000698:	20000008 	.word	0x20000008
 800069c:	20000004 	.word	0x20000004

080006a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006a4:	4b05      	ldr	r3, [pc, #20]	; (80006bc <HAL_IncTick+0x1c>)
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	001a      	movs	r2, r3
 80006aa:	4b05      	ldr	r3, [pc, #20]	; (80006c0 <HAL_IncTick+0x20>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	18d2      	adds	r2, r2, r3
 80006b0:	4b03      	ldr	r3, [pc, #12]	; (80006c0 <HAL_IncTick+0x20>)
 80006b2:	601a      	str	r2, [r3, #0]
}
 80006b4:	46c0      	nop			; (mov r8, r8)
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	46c0      	nop			; (mov r8, r8)
 80006bc:	20000008 	.word	0x20000008
 80006c0:	200028f0 	.word	0x200028f0

080006c4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  return uwTick;
 80006c8:	4b02      	ldr	r3, [pc, #8]	; (80006d4 <HAL_GetTick+0x10>)
 80006ca:	681b      	ldr	r3, [r3, #0]
}
 80006cc:	0018      	movs	r0, r3
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	46c0      	nop			; (mov r8, r8)
 80006d4:	200028f0 	.word	0x200028f0

080006d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	0002      	movs	r2, r0
 80006e0:	1dfb      	adds	r3, r7, #7
 80006e2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80006e4:	1dfb      	adds	r3, r7, #7
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	2b7f      	cmp	r3, #127	; 0x7f
 80006ea:	d809      	bhi.n	8000700 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006ec:	1dfb      	adds	r3, r7, #7
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	001a      	movs	r2, r3
 80006f2:	231f      	movs	r3, #31
 80006f4:	401a      	ands	r2, r3
 80006f6:	4b04      	ldr	r3, [pc, #16]	; (8000708 <__NVIC_EnableIRQ+0x30>)
 80006f8:	2101      	movs	r1, #1
 80006fa:	4091      	lsls	r1, r2
 80006fc:	000a      	movs	r2, r1
 80006fe:	601a      	str	r2, [r3, #0]
  }
}
 8000700:	46c0      	nop			; (mov r8, r8)
 8000702:	46bd      	mov	sp, r7
 8000704:	b002      	add	sp, #8
 8000706:	bd80      	pop	{r7, pc}
 8000708:	e000e100 	.word	0xe000e100

0800070c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800070c:	b590      	push	{r4, r7, lr}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0
 8000712:	0002      	movs	r2, r0
 8000714:	6039      	str	r1, [r7, #0]
 8000716:	1dfb      	adds	r3, r7, #7
 8000718:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800071a:	1dfb      	adds	r3, r7, #7
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	2b7f      	cmp	r3, #127	; 0x7f
 8000720:	d828      	bhi.n	8000774 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000722:	4a2f      	ldr	r2, [pc, #188]	; (80007e0 <__NVIC_SetPriority+0xd4>)
 8000724:	1dfb      	adds	r3, r7, #7
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	b25b      	sxtb	r3, r3
 800072a:	089b      	lsrs	r3, r3, #2
 800072c:	33c0      	adds	r3, #192	; 0xc0
 800072e:	009b      	lsls	r3, r3, #2
 8000730:	589b      	ldr	r3, [r3, r2]
 8000732:	1dfa      	adds	r2, r7, #7
 8000734:	7812      	ldrb	r2, [r2, #0]
 8000736:	0011      	movs	r1, r2
 8000738:	2203      	movs	r2, #3
 800073a:	400a      	ands	r2, r1
 800073c:	00d2      	lsls	r2, r2, #3
 800073e:	21ff      	movs	r1, #255	; 0xff
 8000740:	4091      	lsls	r1, r2
 8000742:	000a      	movs	r2, r1
 8000744:	43d2      	mvns	r2, r2
 8000746:	401a      	ands	r2, r3
 8000748:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800074a:	683b      	ldr	r3, [r7, #0]
 800074c:	019b      	lsls	r3, r3, #6
 800074e:	22ff      	movs	r2, #255	; 0xff
 8000750:	401a      	ands	r2, r3
 8000752:	1dfb      	adds	r3, r7, #7
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	0018      	movs	r0, r3
 8000758:	2303      	movs	r3, #3
 800075a:	4003      	ands	r3, r0
 800075c:	00db      	lsls	r3, r3, #3
 800075e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000760:	481f      	ldr	r0, [pc, #124]	; (80007e0 <__NVIC_SetPriority+0xd4>)
 8000762:	1dfb      	adds	r3, r7, #7
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	b25b      	sxtb	r3, r3
 8000768:	089b      	lsrs	r3, r3, #2
 800076a:	430a      	orrs	r2, r1
 800076c:	33c0      	adds	r3, #192	; 0xc0
 800076e:	009b      	lsls	r3, r3, #2
 8000770:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000772:	e031      	b.n	80007d8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000774:	4a1b      	ldr	r2, [pc, #108]	; (80007e4 <__NVIC_SetPriority+0xd8>)
 8000776:	1dfb      	adds	r3, r7, #7
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	0019      	movs	r1, r3
 800077c:	230f      	movs	r3, #15
 800077e:	400b      	ands	r3, r1
 8000780:	3b08      	subs	r3, #8
 8000782:	089b      	lsrs	r3, r3, #2
 8000784:	3306      	adds	r3, #6
 8000786:	009b      	lsls	r3, r3, #2
 8000788:	18d3      	adds	r3, r2, r3
 800078a:	3304      	adds	r3, #4
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	1dfa      	adds	r2, r7, #7
 8000790:	7812      	ldrb	r2, [r2, #0]
 8000792:	0011      	movs	r1, r2
 8000794:	2203      	movs	r2, #3
 8000796:	400a      	ands	r2, r1
 8000798:	00d2      	lsls	r2, r2, #3
 800079a:	21ff      	movs	r1, #255	; 0xff
 800079c:	4091      	lsls	r1, r2
 800079e:	000a      	movs	r2, r1
 80007a0:	43d2      	mvns	r2, r2
 80007a2:	401a      	ands	r2, r3
 80007a4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	019b      	lsls	r3, r3, #6
 80007aa:	22ff      	movs	r2, #255	; 0xff
 80007ac:	401a      	ands	r2, r3
 80007ae:	1dfb      	adds	r3, r7, #7
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	0018      	movs	r0, r3
 80007b4:	2303      	movs	r3, #3
 80007b6:	4003      	ands	r3, r0
 80007b8:	00db      	lsls	r3, r3, #3
 80007ba:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007bc:	4809      	ldr	r0, [pc, #36]	; (80007e4 <__NVIC_SetPriority+0xd8>)
 80007be:	1dfb      	adds	r3, r7, #7
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	001c      	movs	r4, r3
 80007c4:	230f      	movs	r3, #15
 80007c6:	4023      	ands	r3, r4
 80007c8:	3b08      	subs	r3, #8
 80007ca:	089b      	lsrs	r3, r3, #2
 80007cc:	430a      	orrs	r2, r1
 80007ce:	3306      	adds	r3, #6
 80007d0:	009b      	lsls	r3, r3, #2
 80007d2:	18c3      	adds	r3, r0, r3
 80007d4:	3304      	adds	r3, #4
 80007d6:	601a      	str	r2, [r3, #0]
}
 80007d8:	46c0      	nop			; (mov r8, r8)
 80007da:	46bd      	mov	sp, r7
 80007dc:	b003      	add	sp, #12
 80007de:	bd90      	pop	{r4, r7, pc}
 80007e0:	e000e100 	.word	0xe000e100
 80007e4:	e000ed00 	.word	0xe000ed00

080007e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	3b01      	subs	r3, #1
 80007f4:	4a0c      	ldr	r2, [pc, #48]	; (8000828 <SysTick_Config+0x40>)
 80007f6:	4293      	cmp	r3, r2
 80007f8:	d901      	bls.n	80007fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007fa:	2301      	movs	r3, #1
 80007fc:	e010      	b.n	8000820 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007fe:	4b0b      	ldr	r3, [pc, #44]	; (800082c <SysTick_Config+0x44>)
 8000800:	687a      	ldr	r2, [r7, #4]
 8000802:	3a01      	subs	r2, #1
 8000804:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000806:	2301      	movs	r3, #1
 8000808:	425b      	negs	r3, r3
 800080a:	2103      	movs	r1, #3
 800080c:	0018      	movs	r0, r3
 800080e:	f7ff ff7d 	bl	800070c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000812:	4b06      	ldr	r3, [pc, #24]	; (800082c <SysTick_Config+0x44>)
 8000814:	2200      	movs	r2, #0
 8000816:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000818:	4b04      	ldr	r3, [pc, #16]	; (800082c <SysTick_Config+0x44>)
 800081a:	2207      	movs	r2, #7
 800081c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800081e:	2300      	movs	r3, #0
}
 8000820:	0018      	movs	r0, r3
 8000822:	46bd      	mov	sp, r7
 8000824:	b002      	add	sp, #8
 8000826:	bd80      	pop	{r7, pc}
 8000828:	00ffffff 	.word	0x00ffffff
 800082c:	e000e010 	.word	0xe000e010

08000830 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000830:	b580      	push	{r7, lr}
 8000832:	b084      	sub	sp, #16
 8000834:	af00      	add	r7, sp, #0
 8000836:	60b9      	str	r1, [r7, #8]
 8000838:	607a      	str	r2, [r7, #4]
 800083a:	210f      	movs	r1, #15
 800083c:	187b      	adds	r3, r7, r1
 800083e:	1c02      	adds	r2, r0, #0
 8000840:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000842:	68ba      	ldr	r2, [r7, #8]
 8000844:	187b      	adds	r3, r7, r1
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	b25b      	sxtb	r3, r3
 800084a:	0011      	movs	r1, r2
 800084c:	0018      	movs	r0, r3
 800084e:	f7ff ff5d 	bl	800070c <__NVIC_SetPriority>
}
 8000852:	46c0      	nop			; (mov r8, r8)
 8000854:	46bd      	mov	sp, r7
 8000856:	b004      	add	sp, #16
 8000858:	bd80      	pop	{r7, pc}

0800085a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800085a:	b580      	push	{r7, lr}
 800085c:	b082      	sub	sp, #8
 800085e:	af00      	add	r7, sp, #0
 8000860:	0002      	movs	r2, r0
 8000862:	1dfb      	adds	r3, r7, #7
 8000864:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000866:	1dfb      	adds	r3, r7, #7
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	b25b      	sxtb	r3, r3
 800086c:	0018      	movs	r0, r3
 800086e:	f7ff ff33 	bl	80006d8 <__NVIC_EnableIRQ>
}
 8000872:	46c0      	nop			; (mov r8, r8)
 8000874:	46bd      	mov	sp, r7
 8000876:	b002      	add	sp, #8
 8000878:	bd80      	pop	{r7, pc}

0800087a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800087a:	b580      	push	{r7, lr}
 800087c:	b082      	sub	sp, #8
 800087e:	af00      	add	r7, sp, #0
 8000880:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	0018      	movs	r0, r3
 8000886:	f7ff ffaf 	bl	80007e8 <SysTick_Config>
 800088a:	0003      	movs	r3, r0
}
 800088c:	0018      	movs	r0, r3
 800088e:	46bd      	mov	sp, r7
 8000890:	b002      	add	sp, #8
 8000892:	bd80      	pop	{r7, pc}

08000894 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000894:	b580      	push	{r7, lr}
 8000896:	b086      	sub	sp, #24
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
 800089c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800089e:	2300      	movs	r3, #0
 80008a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008a2:	e155      	b.n	8000b50 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	2101      	movs	r1, #1
 80008aa:	697a      	ldr	r2, [r7, #20]
 80008ac:	4091      	lsls	r1, r2
 80008ae:	000a      	movs	r2, r1
 80008b0:	4013      	ands	r3, r2
 80008b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d100      	bne.n	80008bc <HAL_GPIO_Init+0x28>
 80008ba:	e146      	b.n	8000b4a <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	685b      	ldr	r3, [r3, #4]
 80008c0:	2b02      	cmp	r3, #2
 80008c2:	d003      	beq.n	80008cc <HAL_GPIO_Init+0x38>
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	685b      	ldr	r3, [r3, #4]
 80008c8:	2b12      	cmp	r3, #18
 80008ca:	d123      	bne.n	8000914 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80008cc:	697b      	ldr	r3, [r7, #20]
 80008ce:	08da      	lsrs	r2, r3, #3
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	3208      	adds	r2, #8
 80008d4:	0092      	lsls	r2, r2, #2
 80008d6:	58d3      	ldr	r3, [r2, r3]
 80008d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80008da:	697b      	ldr	r3, [r7, #20]
 80008dc:	2207      	movs	r2, #7
 80008de:	4013      	ands	r3, r2
 80008e0:	009b      	lsls	r3, r3, #2
 80008e2:	220f      	movs	r2, #15
 80008e4:	409a      	lsls	r2, r3
 80008e6:	0013      	movs	r3, r2
 80008e8:	43da      	mvns	r2, r3
 80008ea:	693b      	ldr	r3, [r7, #16]
 80008ec:	4013      	ands	r3, r2
 80008ee:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	691a      	ldr	r2, [r3, #16]
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	2107      	movs	r1, #7
 80008f8:	400b      	ands	r3, r1
 80008fa:	009b      	lsls	r3, r3, #2
 80008fc:	409a      	lsls	r2, r3
 80008fe:	0013      	movs	r3, r2
 8000900:	693a      	ldr	r2, [r7, #16]
 8000902:	4313      	orrs	r3, r2
 8000904:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000906:	697b      	ldr	r3, [r7, #20]
 8000908:	08da      	lsrs	r2, r3, #3
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	3208      	adds	r2, #8
 800090e:	0092      	lsls	r2, r2, #2
 8000910:	6939      	ldr	r1, [r7, #16]
 8000912:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800091a:	697b      	ldr	r3, [r7, #20]
 800091c:	005b      	lsls	r3, r3, #1
 800091e:	2203      	movs	r2, #3
 8000920:	409a      	lsls	r2, r3
 8000922:	0013      	movs	r3, r2
 8000924:	43da      	mvns	r2, r3
 8000926:	693b      	ldr	r3, [r7, #16]
 8000928:	4013      	ands	r3, r2
 800092a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	685b      	ldr	r3, [r3, #4]
 8000930:	2203      	movs	r2, #3
 8000932:	401a      	ands	r2, r3
 8000934:	697b      	ldr	r3, [r7, #20]
 8000936:	005b      	lsls	r3, r3, #1
 8000938:	409a      	lsls	r2, r3
 800093a:	0013      	movs	r3, r2
 800093c:	693a      	ldr	r2, [r7, #16]
 800093e:	4313      	orrs	r3, r2
 8000940:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	693a      	ldr	r2, [r7, #16]
 8000946:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	685b      	ldr	r3, [r3, #4]
 800094c:	2b01      	cmp	r3, #1
 800094e:	d00b      	beq.n	8000968 <HAL_GPIO_Init+0xd4>
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	685b      	ldr	r3, [r3, #4]
 8000954:	2b02      	cmp	r3, #2
 8000956:	d007      	beq.n	8000968 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800095c:	2b11      	cmp	r3, #17
 800095e:	d003      	beq.n	8000968 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	685b      	ldr	r3, [r3, #4]
 8000964:	2b12      	cmp	r3, #18
 8000966:	d130      	bne.n	80009ca <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	689b      	ldr	r3, [r3, #8]
 800096c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800096e:	697b      	ldr	r3, [r7, #20]
 8000970:	005b      	lsls	r3, r3, #1
 8000972:	2203      	movs	r2, #3
 8000974:	409a      	lsls	r2, r3
 8000976:	0013      	movs	r3, r2
 8000978:	43da      	mvns	r2, r3
 800097a:	693b      	ldr	r3, [r7, #16]
 800097c:	4013      	ands	r3, r2
 800097e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	68da      	ldr	r2, [r3, #12]
 8000984:	697b      	ldr	r3, [r7, #20]
 8000986:	005b      	lsls	r3, r3, #1
 8000988:	409a      	lsls	r2, r3
 800098a:	0013      	movs	r3, r2
 800098c:	693a      	ldr	r2, [r7, #16]
 800098e:	4313      	orrs	r3, r2
 8000990:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	693a      	ldr	r2, [r7, #16]
 8000996:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	685b      	ldr	r3, [r3, #4]
 800099c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800099e:	2201      	movs	r2, #1
 80009a0:	697b      	ldr	r3, [r7, #20]
 80009a2:	409a      	lsls	r2, r3
 80009a4:	0013      	movs	r3, r2
 80009a6:	43da      	mvns	r2, r3
 80009a8:	693b      	ldr	r3, [r7, #16]
 80009aa:	4013      	ands	r3, r2
 80009ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	685b      	ldr	r3, [r3, #4]
 80009b2:	091b      	lsrs	r3, r3, #4
 80009b4:	2201      	movs	r2, #1
 80009b6:	401a      	ands	r2, r3
 80009b8:	697b      	ldr	r3, [r7, #20]
 80009ba:	409a      	lsls	r2, r3
 80009bc:	0013      	movs	r3, r2
 80009be:	693a      	ldr	r2, [r7, #16]
 80009c0:	4313      	orrs	r3, r2
 80009c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	693a      	ldr	r2, [r7, #16]
 80009c8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	68db      	ldr	r3, [r3, #12]
 80009ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80009d0:	697b      	ldr	r3, [r7, #20]
 80009d2:	005b      	lsls	r3, r3, #1
 80009d4:	2203      	movs	r2, #3
 80009d6:	409a      	lsls	r2, r3
 80009d8:	0013      	movs	r3, r2
 80009da:	43da      	mvns	r2, r3
 80009dc:	693b      	ldr	r3, [r7, #16]
 80009de:	4013      	ands	r3, r2
 80009e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	689a      	ldr	r2, [r3, #8]
 80009e6:	697b      	ldr	r3, [r7, #20]
 80009e8:	005b      	lsls	r3, r3, #1
 80009ea:	409a      	lsls	r2, r3
 80009ec:	0013      	movs	r3, r2
 80009ee:	693a      	ldr	r2, [r7, #16]
 80009f0:	4313      	orrs	r3, r2
 80009f2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	693a      	ldr	r2, [r7, #16]
 80009f8:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	685a      	ldr	r2, [r3, #4]
 80009fe:	2380      	movs	r3, #128	; 0x80
 8000a00:	055b      	lsls	r3, r3, #21
 8000a02:	4013      	ands	r3, r2
 8000a04:	d100      	bne.n	8000a08 <HAL_GPIO_Init+0x174>
 8000a06:	e0a0      	b.n	8000b4a <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a08:	4b57      	ldr	r3, [pc, #348]	; (8000b68 <HAL_GPIO_Init+0x2d4>)
 8000a0a:	699a      	ldr	r2, [r3, #24]
 8000a0c:	4b56      	ldr	r3, [pc, #344]	; (8000b68 <HAL_GPIO_Init+0x2d4>)
 8000a0e:	2101      	movs	r1, #1
 8000a10:	430a      	orrs	r2, r1
 8000a12:	619a      	str	r2, [r3, #24]
 8000a14:	4b54      	ldr	r3, [pc, #336]	; (8000b68 <HAL_GPIO_Init+0x2d4>)
 8000a16:	699b      	ldr	r3, [r3, #24]
 8000a18:	2201      	movs	r2, #1
 8000a1a:	4013      	ands	r3, r2
 8000a1c:	60bb      	str	r3, [r7, #8]
 8000a1e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000a20:	4a52      	ldr	r2, [pc, #328]	; (8000b6c <HAL_GPIO_Init+0x2d8>)
 8000a22:	697b      	ldr	r3, [r7, #20]
 8000a24:	089b      	lsrs	r3, r3, #2
 8000a26:	3302      	adds	r3, #2
 8000a28:	009b      	lsls	r3, r3, #2
 8000a2a:	589b      	ldr	r3, [r3, r2]
 8000a2c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a2e:	697b      	ldr	r3, [r7, #20]
 8000a30:	2203      	movs	r2, #3
 8000a32:	4013      	ands	r3, r2
 8000a34:	009b      	lsls	r3, r3, #2
 8000a36:	220f      	movs	r2, #15
 8000a38:	409a      	lsls	r2, r3
 8000a3a:	0013      	movs	r3, r2
 8000a3c:	43da      	mvns	r2, r3
 8000a3e:	693b      	ldr	r3, [r7, #16]
 8000a40:	4013      	ands	r3, r2
 8000a42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a44:	687a      	ldr	r2, [r7, #4]
 8000a46:	2390      	movs	r3, #144	; 0x90
 8000a48:	05db      	lsls	r3, r3, #23
 8000a4a:	429a      	cmp	r2, r3
 8000a4c:	d019      	beq.n	8000a82 <HAL_GPIO_Init+0x1ee>
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	4a47      	ldr	r2, [pc, #284]	; (8000b70 <HAL_GPIO_Init+0x2dc>)
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d013      	beq.n	8000a7e <HAL_GPIO_Init+0x1ea>
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	4a46      	ldr	r2, [pc, #280]	; (8000b74 <HAL_GPIO_Init+0x2e0>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d00d      	beq.n	8000a7a <HAL_GPIO_Init+0x1e6>
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	4a45      	ldr	r2, [pc, #276]	; (8000b78 <HAL_GPIO_Init+0x2e4>)
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d007      	beq.n	8000a76 <HAL_GPIO_Init+0x1e2>
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	4a44      	ldr	r2, [pc, #272]	; (8000b7c <HAL_GPIO_Init+0x2e8>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d101      	bne.n	8000a72 <HAL_GPIO_Init+0x1de>
 8000a6e:	2304      	movs	r3, #4
 8000a70:	e008      	b.n	8000a84 <HAL_GPIO_Init+0x1f0>
 8000a72:	2305      	movs	r3, #5
 8000a74:	e006      	b.n	8000a84 <HAL_GPIO_Init+0x1f0>
 8000a76:	2303      	movs	r3, #3
 8000a78:	e004      	b.n	8000a84 <HAL_GPIO_Init+0x1f0>
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	e002      	b.n	8000a84 <HAL_GPIO_Init+0x1f0>
 8000a7e:	2301      	movs	r3, #1
 8000a80:	e000      	b.n	8000a84 <HAL_GPIO_Init+0x1f0>
 8000a82:	2300      	movs	r3, #0
 8000a84:	697a      	ldr	r2, [r7, #20]
 8000a86:	2103      	movs	r1, #3
 8000a88:	400a      	ands	r2, r1
 8000a8a:	0092      	lsls	r2, r2, #2
 8000a8c:	4093      	lsls	r3, r2
 8000a8e:	693a      	ldr	r2, [r7, #16]
 8000a90:	4313      	orrs	r3, r2
 8000a92:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a94:	4935      	ldr	r1, [pc, #212]	; (8000b6c <HAL_GPIO_Init+0x2d8>)
 8000a96:	697b      	ldr	r3, [r7, #20]
 8000a98:	089b      	lsrs	r3, r3, #2
 8000a9a:	3302      	adds	r3, #2
 8000a9c:	009b      	lsls	r3, r3, #2
 8000a9e:	693a      	ldr	r2, [r7, #16]
 8000aa0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000aa2:	4b37      	ldr	r3, [pc, #220]	; (8000b80 <HAL_GPIO_Init+0x2ec>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	43da      	mvns	r2, r3
 8000aac:	693b      	ldr	r3, [r7, #16]
 8000aae:	4013      	ands	r3, r2
 8000ab0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	685a      	ldr	r2, [r3, #4]
 8000ab6:	2380      	movs	r3, #128	; 0x80
 8000ab8:	025b      	lsls	r3, r3, #9
 8000aba:	4013      	ands	r3, r2
 8000abc:	d003      	beq.n	8000ac6 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8000abe:	693a      	ldr	r2, [r7, #16]
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	4313      	orrs	r3, r2
 8000ac4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000ac6:	4b2e      	ldr	r3, [pc, #184]	; (8000b80 <HAL_GPIO_Init+0x2ec>)
 8000ac8:	693a      	ldr	r2, [r7, #16]
 8000aca:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000acc:	4b2c      	ldr	r3, [pc, #176]	; (8000b80 <HAL_GPIO_Init+0x2ec>)
 8000ace:	685b      	ldr	r3, [r3, #4]
 8000ad0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	43da      	mvns	r2, r3
 8000ad6:	693b      	ldr	r3, [r7, #16]
 8000ad8:	4013      	ands	r3, r2
 8000ada:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	685a      	ldr	r2, [r3, #4]
 8000ae0:	2380      	movs	r3, #128	; 0x80
 8000ae2:	029b      	lsls	r3, r3, #10
 8000ae4:	4013      	ands	r3, r2
 8000ae6:	d003      	beq.n	8000af0 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8000ae8:	693a      	ldr	r2, [r7, #16]
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	4313      	orrs	r3, r2
 8000aee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000af0:	4b23      	ldr	r3, [pc, #140]	; (8000b80 <HAL_GPIO_Init+0x2ec>)
 8000af2:	693a      	ldr	r2, [r7, #16]
 8000af4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000af6:	4b22      	ldr	r3, [pc, #136]	; (8000b80 <HAL_GPIO_Init+0x2ec>)
 8000af8:	689b      	ldr	r3, [r3, #8]
 8000afa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	43da      	mvns	r2, r3
 8000b00:	693b      	ldr	r3, [r7, #16]
 8000b02:	4013      	ands	r3, r2
 8000b04:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	685a      	ldr	r2, [r3, #4]
 8000b0a:	2380      	movs	r3, #128	; 0x80
 8000b0c:	035b      	lsls	r3, r3, #13
 8000b0e:	4013      	ands	r3, r2
 8000b10:	d003      	beq.n	8000b1a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000b12:	693a      	ldr	r2, [r7, #16]
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	4313      	orrs	r3, r2
 8000b18:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000b1a:	4b19      	ldr	r3, [pc, #100]	; (8000b80 <HAL_GPIO_Init+0x2ec>)
 8000b1c:	693a      	ldr	r2, [r7, #16]
 8000b1e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000b20:	4b17      	ldr	r3, [pc, #92]	; (8000b80 <HAL_GPIO_Init+0x2ec>)
 8000b22:	68db      	ldr	r3, [r3, #12]
 8000b24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	43da      	mvns	r2, r3
 8000b2a:	693b      	ldr	r3, [r7, #16]
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	685a      	ldr	r2, [r3, #4]
 8000b34:	2380      	movs	r3, #128	; 0x80
 8000b36:	039b      	lsls	r3, r3, #14
 8000b38:	4013      	ands	r3, r2
 8000b3a:	d003      	beq.n	8000b44 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000b3c:	693a      	ldr	r2, [r7, #16]
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	4313      	orrs	r3, r2
 8000b42:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000b44:	4b0e      	ldr	r3, [pc, #56]	; (8000b80 <HAL_GPIO_Init+0x2ec>)
 8000b46:	693a      	ldr	r2, [r7, #16]
 8000b48:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000b4a:	697b      	ldr	r3, [r7, #20]
 8000b4c:	3301      	adds	r3, #1
 8000b4e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	681a      	ldr	r2, [r3, #0]
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	40da      	lsrs	r2, r3
 8000b58:	1e13      	subs	r3, r2, #0
 8000b5a:	d000      	beq.n	8000b5e <HAL_GPIO_Init+0x2ca>
 8000b5c:	e6a2      	b.n	80008a4 <HAL_GPIO_Init+0x10>
  } 
}
 8000b5e:	46c0      	nop			; (mov r8, r8)
 8000b60:	46bd      	mov	sp, r7
 8000b62:	b006      	add	sp, #24
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	46c0      	nop			; (mov r8, r8)
 8000b68:	40021000 	.word	0x40021000
 8000b6c:	40010000 	.word	0x40010000
 8000b70:	48000400 	.word	0x48000400
 8000b74:	48000800 	.word	0x48000800
 8000b78:	48000c00 	.word	0x48000c00
 8000b7c:	48001000 	.word	0x48001000
 8000b80:	40010400 	.word	0x40010400

08000b84 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000b84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b86:	b08b      	sub	sp, #44	; 0x2c
 8000b88:	af06      	add	r7, sp, #24
 8000b8a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d101      	bne.n	8000b96 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000b92:	2301      	movs	r3, #1
 8000b94:	e0d4      	b.n	8000d40 <HAL_PCD_Init+0x1bc>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	4a6b      	ldr	r2, [pc, #428]	; (8000d48 <HAL_PCD_Init+0x1c4>)
 8000b9a:	5c9b      	ldrb	r3, [r3, r2]
 8000b9c:	b2db      	uxtb	r3, r3
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d108      	bne.n	8000bb4 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000ba2:	687a      	ldr	r2, [r7, #4]
 8000ba4:	238a      	movs	r3, #138	; 0x8a
 8000ba6:	009b      	lsls	r3, r3, #2
 8000ba8:	2100      	movs	r1, #0
 8000baa:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	0018      	movs	r0, r3
 8000bb0:	f00d fbe2 	bl	800e378 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	4a64      	ldr	r2, [pc, #400]	; (8000d48 <HAL_PCD_Init+0x1c4>)
 8000bb8:	2103      	movs	r1, #3
 8000bba:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	0018      	movs	r0, r3
 8000bc2:	f001 fdf7 	bl	80027b4 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000bc6:	230f      	movs	r3, #15
 8000bc8:	18fb      	adds	r3, r7, r3
 8000bca:	2200      	movs	r2, #0
 8000bcc:	701a      	strb	r2, [r3, #0]
 8000bce:	e043      	b.n	8000c58 <HAL_PCD_Init+0xd4>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000bd0:	200f      	movs	r0, #15
 8000bd2:	183b      	adds	r3, r7, r0
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	687a      	ldr	r2, [r7, #4]
 8000bd8:	2129      	movs	r1, #41	; 0x29
 8000bda:	015b      	lsls	r3, r3, #5
 8000bdc:	18d3      	adds	r3, r2, r3
 8000bde:	185b      	adds	r3, r3, r1
 8000be0:	2201      	movs	r2, #1
 8000be2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000be4:	183b      	adds	r3, r7, r0
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	687a      	ldr	r2, [r7, #4]
 8000bea:	2128      	movs	r1, #40	; 0x28
 8000bec:	015b      	lsls	r3, r3, #5
 8000bee:	18d3      	adds	r3, r2, r3
 8000bf0:	185b      	adds	r3, r3, r1
 8000bf2:	183a      	adds	r2, r7, r0
 8000bf4:	7812      	ldrb	r2, [r2, #0]
 8000bf6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000bf8:	183b      	adds	r3, r7, r0
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	183a      	adds	r2, r7, r0
 8000bfe:	7812      	ldrb	r2, [r2, #0]
 8000c00:	b291      	uxth	r1, r2
 8000c02:	687a      	ldr	r2, [r7, #4]
 8000c04:	015b      	lsls	r3, r3, #5
 8000c06:	18d3      	adds	r3, r2, r3
 8000c08:	3336      	adds	r3, #54	; 0x36
 8000c0a:	1c0a      	adds	r2, r1, #0
 8000c0c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000c0e:	183b      	adds	r3, r7, r0
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	687a      	ldr	r2, [r7, #4]
 8000c14:	212b      	movs	r1, #43	; 0x2b
 8000c16:	015b      	lsls	r3, r3, #5
 8000c18:	18d3      	adds	r3, r2, r3
 8000c1a:	185b      	adds	r3, r3, r1
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000c20:	183b      	adds	r3, r7, r0
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	687a      	ldr	r2, [r7, #4]
 8000c26:	015b      	lsls	r3, r3, #5
 8000c28:	18d3      	adds	r3, r2, r3
 8000c2a:	3338      	adds	r3, #56	; 0x38
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000c30:	183b      	adds	r3, r7, r0
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	687a      	ldr	r2, [r7, #4]
 8000c36:	015b      	lsls	r3, r3, #5
 8000c38:	18d3      	adds	r3, r2, r3
 8000c3a:	333c      	adds	r3, #60	; 0x3c
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000c40:	183b      	adds	r3, r7, r0
 8000c42:	781a      	ldrb	r2, [r3, #0]
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	3202      	adds	r2, #2
 8000c48:	0152      	lsls	r2, r2, #5
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	50d1      	str	r1, [r2, r3]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c4e:	183b      	adds	r3, r7, r0
 8000c50:	781a      	ldrb	r2, [r3, #0]
 8000c52:	183b      	adds	r3, r7, r0
 8000c54:	3201      	adds	r2, #1
 8000c56:	701a      	strb	r2, [r3, #0]
 8000c58:	230f      	movs	r3, #15
 8000c5a:	18fb      	adds	r3, r7, r3
 8000c5c:	781a      	ldrb	r2, [r3, #0]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	429a      	cmp	r2, r3
 8000c64:	d3b4      	bcc.n	8000bd0 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c66:	230f      	movs	r3, #15
 8000c68:	18fb      	adds	r3, r7, r3
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	701a      	strb	r2, [r3, #0]
 8000c6e:	e03f      	b.n	8000cf0 <HAL_PCD_Init+0x16c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000c70:	200f      	movs	r0, #15
 8000c72:	183b      	adds	r3, r7, r0
 8000c74:	781a      	ldrb	r2, [r3, #0]
 8000c76:	6879      	ldr	r1, [r7, #4]
 8000c78:	232a      	movs	r3, #42	; 0x2a
 8000c7a:	33ff      	adds	r3, #255	; 0xff
 8000c7c:	0152      	lsls	r2, r2, #5
 8000c7e:	188a      	adds	r2, r1, r2
 8000c80:	18d3      	adds	r3, r2, r3
 8000c82:	2200      	movs	r2, #0
 8000c84:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000c86:	183b      	adds	r3, r7, r0
 8000c88:	781a      	ldrb	r2, [r3, #0]
 8000c8a:	6879      	ldr	r1, [r7, #4]
 8000c8c:	2394      	movs	r3, #148	; 0x94
 8000c8e:	005b      	lsls	r3, r3, #1
 8000c90:	0152      	lsls	r2, r2, #5
 8000c92:	188a      	adds	r2, r1, r2
 8000c94:	18d3      	adds	r3, r2, r3
 8000c96:	183a      	adds	r2, r7, r0
 8000c98:	7812      	ldrb	r2, [r2, #0]
 8000c9a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000c9c:	183b      	adds	r3, r7, r0
 8000c9e:	781a      	ldrb	r2, [r3, #0]
 8000ca0:	6879      	ldr	r1, [r7, #4]
 8000ca2:	232c      	movs	r3, #44	; 0x2c
 8000ca4:	33ff      	adds	r3, #255	; 0xff
 8000ca6:	0152      	lsls	r2, r2, #5
 8000ca8:	188a      	adds	r2, r1, r2
 8000caa:	18d3      	adds	r3, r2, r3
 8000cac:	2200      	movs	r2, #0
 8000cae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000cb0:	183b      	adds	r3, r7, r0
 8000cb2:	781a      	ldrb	r2, [r3, #0]
 8000cb4:	6879      	ldr	r1, [r7, #4]
 8000cb6:	239c      	movs	r3, #156	; 0x9c
 8000cb8:	005b      	lsls	r3, r3, #1
 8000cba:	0152      	lsls	r2, r2, #5
 8000cbc:	188a      	adds	r2, r1, r2
 8000cbe:	18d3      	adds	r3, r2, r3
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000cc4:	183b      	adds	r3, r7, r0
 8000cc6:	781a      	ldrb	r2, [r3, #0]
 8000cc8:	6879      	ldr	r1, [r7, #4]
 8000cca:	239e      	movs	r3, #158	; 0x9e
 8000ccc:	005b      	lsls	r3, r3, #1
 8000cce:	0152      	lsls	r2, r2, #5
 8000cd0:	188a      	adds	r2, r1, r2
 8000cd2:	18d3      	adds	r3, r2, r3
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000cd8:	183b      	adds	r3, r7, r0
 8000cda:	781a      	ldrb	r2, [r3, #0]
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	320a      	adds	r2, #10
 8000ce0:	0152      	lsls	r2, r2, #5
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	50d1      	str	r1, [r2, r3]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ce6:	183b      	adds	r3, r7, r0
 8000ce8:	781a      	ldrb	r2, [r3, #0]
 8000cea:	183b      	adds	r3, r7, r0
 8000cec:	3201      	adds	r2, #1
 8000cee:	701a      	strb	r2, [r3, #0]
 8000cf0:	230f      	movs	r3, #15
 8000cf2:	18fb      	adds	r3, r7, r3
 8000cf4:	781a      	ldrb	r2, [r3, #0]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	429a      	cmp	r2, r3
 8000cfc:	d3b8      	bcc.n	8000c70 <HAL_PCD_Init+0xec>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	6818      	ldr	r0, [r3, #0]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	466a      	mov	r2, sp
 8000d06:	0011      	movs	r1, r2
 8000d08:	001a      	movs	r2, r3
 8000d0a:	3210      	adds	r2, #16
 8000d0c:	ca70      	ldmia	r2!, {r4, r5, r6}
 8000d0e:	c170      	stmia	r1!, {r4, r5, r6}
 8000d10:	ca30      	ldmia	r2!, {r4, r5}
 8000d12:	c130      	stmia	r1!, {r4, r5}
 8000d14:	6859      	ldr	r1, [r3, #4]
 8000d16:	689a      	ldr	r2, [r3, #8]
 8000d18:	68db      	ldr	r3, [r3, #12]
 8000d1a:	f001 fd6b 	bl	80027f4 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	2224      	movs	r2, #36	; 0x24
 8000d22:	2100      	movs	r1, #0
 8000d24:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	4a07      	ldr	r2, [pc, #28]	; (8000d48 <HAL_PCD_Init+0x1c4>)
 8000d2a:	2101      	movs	r1, #1
 8000d2c:	5499      	strb	r1, [r3, r2]
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	69db      	ldr	r3, [r3, #28]
 8000d32:	2b01      	cmp	r3, #1
 8000d34:	d103      	bne.n	8000d3e <HAL_PCD_Init+0x1ba>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	0018      	movs	r0, r3
 8000d3a:	f000 ff0d 	bl	8001b58 <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 8000d3e:	2300      	movs	r3, #0
}
 8000d40:	0018      	movs	r0, r3
 8000d42:	46bd      	mov	sp, r7
 8000d44:	b005      	add	sp, #20
 8000d46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d48:	00000229 	.word	0x00000229

08000d4c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000d54:	687a      	ldr	r2, [r7, #4]
 8000d56:	238a      	movs	r3, #138	; 0x8a
 8000d58:	009b      	lsls	r3, r3, #2
 8000d5a:	5cd3      	ldrb	r3, [r2, r3]
 8000d5c:	2b01      	cmp	r3, #1
 8000d5e:	d101      	bne.n	8000d64 <HAL_PCD_Start+0x18>
 8000d60:	2302      	movs	r3, #2
 8000d62:	e014      	b.n	8000d8e <HAL_PCD_Start+0x42>
 8000d64:	687a      	ldr	r2, [r7, #4]
 8000d66:	238a      	movs	r3, #138	; 0x8a
 8000d68:	009b      	lsls	r3, r3, #2
 8000d6a:	2101      	movs	r1, #1
 8000d6c:	54d1      	strb	r1, [r2, r3]
  (void)USB_DevConnect(hpcd->Instance);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	0018      	movs	r0, r3
 8000d74:	f002 fd96 	bl	80038a4 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	0018      	movs	r0, r3
 8000d7e:	f001 fcff 	bl	8002780 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8000d82:	687a      	ldr	r2, [r7, #4]
 8000d84:	238a      	movs	r3, #138	; 0x8a
 8000d86:	009b      	lsls	r3, r3, #2
 8000d88:	2100      	movs	r1, #0
 8000d8a:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8000d8c:	2300      	movs	r3, #0
}
 8000d8e:	0018      	movs	r0, r3
 8000d90:	46bd      	mov	sp, r7
 8000d92:	b002      	add	sp, #8
 8000d94:	bd80      	pop	{r7, pc}
	...

08000d98 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	0018      	movs	r0, r3
 8000da6:	f002 fd93 	bl	80038d0 <USB_ReadInterrupts>
 8000daa:	0002      	movs	r2, r0
 8000dac:	2380      	movs	r3, #128	; 0x80
 8000dae:	021b      	lsls	r3, r3, #8
 8000db0:	401a      	ands	r2, r3
 8000db2:	2380      	movs	r3, #128	; 0x80
 8000db4:	021b      	lsls	r3, r3, #8
 8000db6:	429a      	cmp	r2, r3
 8000db8:	d103      	bne.n	8000dc2 <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	0018      	movs	r0, r3
 8000dbe:	f000 fbaf 	bl	8001520 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	0018      	movs	r0, r3
 8000dc8:	f002 fd82 	bl	80038d0 <USB_ReadInterrupts>
 8000dcc:	0002      	movs	r2, r0
 8000dce:	2380      	movs	r3, #128	; 0x80
 8000dd0:	00db      	lsls	r3, r3, #3
 8000dd2:	401a      	ands	r2, r3
 8000dd4:	2380      	movs	r3, #128	; 0x80
 8000dd6:	00db      	lsls	r3, r3, #3
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	d114      	bne.n	8000e06 <HAL_PCD_IRQHandler+0x6e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	2244      	movs	r2, #68	; 0x44
 8000de2:	5a9b      	ldrh	r3, [r3, r2]
 8000de4:	b29a      	uxth	r2, r3
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	49a8      	ldr	r1, [pc, #672]	; (800108c <HAL_PCD_IRQHandler+0x2f4>)
 8000dec:	400a      	ands	r2, r1
 8000dee:	b291      	uxth	r1, r2
 8000df0:	2244      	movs	r2, #68	; 0x44
 8000df2:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	0018      	movs	r0, r3
 8000df8:	f00d fb60 	bl	800e4bc <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	2100      	movs	r1, #0
 8000e00:	0018      	movs	r0, r3
 8000e02:	f000 f951 	bl	80010a8 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	0018      	movs	r0, r3
 8000e0c:	f002 fd60 	bl	80038d0 <USB_ReadInterrupts>
 8000e10:	0002      	movs	r2, r0
 8000e12:	2380      	movs	r3, #128	; 0x80
 8000e14:	01db      	lsls	r3, r3, #7
 8000e16:	401a      	ands	r2, r3
 8000e18:	2380      	movs	r3, #128	; 0x80
 8000e1a:	01db      	lsls	r3, r3, #7
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	d10b      	bne.n	8000e38 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	2244      	movs	r2, #68	; 0x44
 8000e26:	5a9b      	ldrh	r3, [r3, r2]
 8000e28:	b29a      	uxth	r2, r3
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4998      	ldr	r1, [pc, #608]	; (8001090 <HAL_PCD_IRQHandler+0x2f8>)
 8000e30:	400a      	ands	r2, r1
 8000e32:	b291      	uxth	r1, r2
 8000e34:	2244      	movs	r2, #68	; 0x44
 8000e36:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	0018      	movs	r0, r3
 8000e3e:	f002 fd47 	bl	80038d0 <USB_ReadInterrupts>
 8000e42:	0002      	movs	r2, r0
 8000e44:	2380      	movs	r3, #128	; 0x80
 8000e46:	019b      	lsls	r3, r3, #6
 8000e48:	401a      	ands	r2, r3
 8000e4a:	2380      	movs	r3, #128	; 0x80
 8000e4c:	019b      	lsls	r3, r3, #6
 8000e4e:	429a      	cmp	r2, r3
 8000e50:	d10b      	bne.n	8000e6a <HAL_PCD_IRQHandler+0xd2>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	2244      	movs	r2, #68	; 0x44
 8000e58:	5a9b      	ldrh	r3, [r3, r2]
 8000e5a:	b29a      	uxth	r2, r3
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	498c      	ldr	r1, [pc, #560]	; (8001094 <HAL_PCD_IRQHandler+0x2fc>)
 8000e62:	400a      	ands	r2, r1
 8000e64:	b291      	uxth	r1, r2
 8000e66:	2244      	movs	r2, #68	; 0x44
 8000e68:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	0018      	movs	r0, r3
 8000e70:	f002 fd2e 	bl	80038d0 <USB_ReadInterrupts>
 8000e74:	0002      	movs	r2, r0
 8000e76:	2380      	movs	r3, #128	; 0x80
 8000e78:	015b      	lsls	r3, r3, #5
 8000e7a:	401a      	ands	r2, r3
 8000e7c:	2380      	movs	r3, #128	; 0x80
 8000e7e:	015b      	lsls	r3, r3, #5
 8000e80:	429a      	cmp	r2, r3
 8000e82:	d137      	bne.n	8000ef4 <HAL_PCD_IRQHandler+0x15c>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	2240      	movs	r2, #64	; 0x40
 8000e8a:	5a9b      	ldrh	r3, [r3, r2]
 8000e8c:	b29a      	uxth	r2, r3
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	2104      	movs	r1, #4
 8000e94:	438a      	bics	r2, r1
 8000e96:	b291      	uxth	r1, r2
 8000e98:	2240      	movs	r2, #64	; 0x40
 8000e9a:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	2240      	movs	r2, #64	; 0x40
 8000ea2:	5a9b      	ldrh	r3, [r3, r2]
 8000ea4:	b29a      	uxth	r2, r3
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	2108      	movs	r1, #8
 8000eac:	438a      	bics	r2, r1
 8000eae:	b291      	uxth	r1, r2
 8000eb0:	2240      	movs	r2, #64	; 0x40
 8000eb2:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 8000eb4:	687a      	ldr	r2, [r7, #4]
 8000eb6:	2398      	movs	r3, #152	; 0x98
 8000eb8:	009b      	lsls	r3, r3, #2
 8000eba:	5cd3      	ldrb	r3, [r2, r3]
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	d109      	bne.n	8000ed4 <HAL_PCD_IRQHandler+0x13c>
    {
      hpcd->LPM_State = LPM_L0;
 8000ec0:	687a      	ldr	r2, [r7, #4]
 8000ec2:	2398      	movs	r3, #152	; 0x98
 8000ec4:	009b      	lsls	r3, r3, #2
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2100      	movs	r1, #0
 8000ece:	0018      	movs	r0, r3
 8000ed0:	f000 fe6c 	bl	8001bac <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	0018      	movs	r0, r3
 8000ed8:	f00d fb0f 	bl	800e4fa <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	2244      	movs	r2, #68	; 0x44
 8000ee2:	5a9b      	ldrh	r3, [r3, r2]
 8000ee4:	b29a      	uxth	r2, r3
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	496b      	ldr	r1, [pc, #428]	; (8001098 <HAL_PCD_IRQHandler+0x300>)
 8000eec:	400a      	ands	r2, r1
 8000eee:	b291      	uxth	r1, r2
 8000ef0:	2244      	movs	r2, #68	; 0x44
 8000ef2:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	0018      	movs	r0, r3
 8000efa:	f002 fce9 	bl	80038d0 <USB_ReadInterrupts>
 8000efe:	0002      	movs	r2, r0
 8000f00:	2380      	movs	r3, #128	; 0x80
 8000f02:	011b      	lsls	r3, r3, #4
 8000f04:	401a      	ands	r2, r3
 8000f06:	2380      	movs	r3, #128	; 0x80
 8000f08:	011b      	lsls	r3, r3, #4
 8000f0a:	429a      	cmp	r2, r3
 8000f0c:	d134      	bne.n	8000f78 <HAL_PCD_IRQHandler+0x1e0>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	2240      	movs	r2, #64	; 0x40
 8000f14:	5a9b      	ldrh	r3, [r3, r2]
 8000f16:	b29a      	uxth	r2, r3
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	2108      	movs	r1, #8
 8000f1e:	430a      	orrs	r2, r1
 8000f20:	b291      	uxth	r1, r2
 8000f22:	2240      	movs	r2, #64	; 0x40
 8000f24:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	2244      	movs	r2, #68	; 0x44
 8000f2c:	5a9b      	ldrh	r3, [r3, r2]
 8000f2e:	b29a      	uxth	r2, r3
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4959      	ldr	r1, [pc, #356]	; (800109c <HAL_PCD_IRQHandler+0x304>)
 8000f36:	400a      	ands	r2, r1
 8000f38:	b291      	uxth	r1, r2
 8000f3a:	2244      	movs	r2, #68	; 0x44
 8000f3c:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	2240      	movs	r2, #64	; 0x40
 8000f44:	5a9b      	ldrh	r3, [r3, r2]
 8000f46:	b29a      	uxth	r2, r3
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	2104      	movs	r1, #4
 8000f4e:	430a      	orrs	r2, r1
 8000f50:	b291      	uxth	r1, r2
 8000f52:	2240      	movs	r2, #64	; 0x40
 8000f54:	5299      	strh	r1, [r3, r2]

    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP) == 0U)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	0018      	movs	r0, r3
 8000f5c:	f002 fcb8 	bl	80038d0 <USB_ReadInterrupts>
 8000f60:	0002      	movs	r2, r0
 8000f62:	2380      	movs	r3, #128	; 0x80
 8000f64:	015b      	lsls	r3, r3, #5
 8000f66:	401a      	ands	r2, r3
 8000f68:	2380      	movs	r3, #128	; 0x80
 8000f6a:	015b      	lsls	r3, r3, #5
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	d003      	beq.n	8000f78 <HAL_PCD_IRQHandler+0x1e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	0018      	movs	r0, r3
 8000f74:	f00d fab9 	bl	800e4ea <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	0018      	movs	r0, r3
 8000f7e:	f002 fca7 	bl	80038d0 <USB_ReadInterrupts>
 8000f82:	0002      	movs	r2, r0
 8000f84:	2380      	movs	r3, #128	; 0x80
 8000f86:	4013      	ands	r3, r2
 8000f88:	2b80      	cmp	r3, #128	; 0x80
 8000f8a:	d145      	bne.n	8001018 <HAL_PCD_IRQHandler+0x280>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	2244      	movs	r2, #68	; 0x44
 8000f92:	5a9b      	ldrh	r3, [r3, r2]
 8000f94:	b29a      	uxth	r2, r3
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	2180      	movs	r1, #128	; 0x80
 8000f9c:	438a      	bics	r2, r1
 8000f9e:	b291      	uxth	r1, r2
 8000fa0:	2244      	movs	r2, #68	; 0x44
 8000fa2:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 8000fa4:	687a      	ldr	r2, [r7, #4]
 8000fa6:	2398      	movs	r3, #152	; 0x98
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	5cd3      	ldrb	r3, [r2, r3]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d12f      	bne.n	8001010 <HAL_PCD_IRQHandler+0x278>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	2240      	movs	r2, #64	; 0x40
 8000fb6:	5a9b      	ldrh	r3, [r3, r2]
 8000fb8:	b29a      	uxth	r2, r3
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	2104      	movs	r1, #4
 8000fc0:	430a      	orrs	r2, r1
 8000fc2:	b291      	uxth	r1, r2
 8000fc4:	2240      	movs	r2, #64	; 0x40
 8000fc6:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	2240      	movs	r2, #64	; 0x40
 8000fce:	5a9b      	ldrh	r3, [r3, r2]
 8000fd0:	b29a      	uxth	r2, r3
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	2108      	movs	r1, #8
 8000fd8:	430a      	orrs	r2, r1
 8000fda:	b291      	uxth	r1, r2
 8000fdc:	2240      	movs	r2, #64	; 0x40
 8000fde:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8000fe0:	687a      	ldr	r2, [r7, #4]
 8000fe2:	2398      	movs	r3, #152	; 0x98
 8000fe4:	009b      	lsls	r3, r3, #2
 8000fe6:	2101      	movs	r1, #1
 8000fe8:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	2254      	movs	r2, #84	; 0x54
 8000ff0:	5a9b      	ldrh	r3, [r3, r2]
 8000ff2:	b29b      	uxth	r3, r3
 8000ff4:	089b      	lsrs	r3, r3, #2
 8000ff6:	223c      	movs	r2, #60	; 0x3c
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	0019      	movs	r1, r3
 8000ffc:	687a      	ldr	r2, [r7, #4]
 8000ffe:	2399      	movs	r3, #153	; 0x99
 8001000:	009b      	lsls	r3, r3, #2
 8001002:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2101      	movs	r1, #1
 8001008:	0018      	movs	r0, r3
 800100a:	f000 fdcf 	bl	8001bac <HAL_PCDEx_LPM_Callback>
 800100e:	e003      	b.n	8001018 <HAL_PCD_IRQHandler+0x280>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	0018      	movs	r0, r3
 8001014:	f00d fa69 	bl	800e4ea <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	0018      	movs	r0, r3
 800101e:	f002 fc57 	bl	80038d0 <USB_ReadInterrupts>
 8001022:	0002      	movs	r2, r0
 8001024:	2380      	movs	r3, #128	; 0x80
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	401a      	ands	r2, r3
 800102a:	2380      	movs	r3, #128	; 0x80
 800102c:	009b      	lsls	r3, r3, #2
 800102e:	429a      	cmp	r2, r3
 8001030:	d10f      	bne.n	8001052 <HAL_PCD_IRQHandler+0x2ba>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	2244      	movs	r2, #68	; 0x44
 8001038:	5a9b      	ldrh	r3, [r3, r2]
 800103a:	b29a      	uxth	r2, r3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4917      	ldr	r1, [pc, #92]	; (80010a0 <HAL_PCD_IRQHandler+0x308>)
 8001042:	400a      	ands	r2, r1
 8001044:	b291      	uxth	r1, r2
 8001046:	2244      	movs	r2, #68	; 0x44
 8001048:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	0018      	movs	r0, r3
 800104e:	f00d fa26 	bl	800e49e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	0018      	movs	r0, r3
 8001058:	f002 fc3a 	bl	80038d0 <USB_ReadInterrupts>
 800105c:	0002      	movs	r2, r0
 800105e:	2380      	movs	r3, #128	; 0x80
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	401a      	ands	r2, r3
 8001064:	2380      	movs	r3, #128	; 0x80
 8001066:	005b      	lsls	r3, r3, #1
 8001068:	429a      	cmp	r2, r3
 800106a:	d10b      	bne.n	8001084 <HAL_PCD_IRQHandler+0x2ec>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	2244      	movs	r2, #68	; 0x44
 8001072:	5a9b      	ldrh	r3, [r3, r2]
 8001074:	b29a      	uxth	r2, r3
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	490a      	ldr	r1, [pc, #40]	; (80010a4 <HAL_PCD_IRQHandler+0x30c>)
 800107c:	400a      	ands	r2, r1
 800107e:	b291      	uxth	r1, r2
 8001080:	2244      	movs	r2, #68	; 0x44
 8001082:	5299      	strh	r1, [r3, r2]
  }
}
 8001084:	46c0      	nop			; (mov r8, r8)
 8001086:	46bd      	mov	sp, r7
 8001088:	b002      	add	sp, #8
 800108a:	bd80      	pop	{r7, pc}
 800108c:	fffffbff 	.word	0xfffffbff
 8001090:	ffffbfff 	.word	0xffffbfff
 8001094:	ffffdfff 	.word	0xffffdfff
 8001098:	ffffefff 	.word	0xffffefff
 800109c:	fffff7ff 	.word	0xfffff7ff
 80010a0:	fffffdff 	.word	0xfffffdff
 80010a4:	fffffeff 	.word	0xfffffeff

080010a8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	000a      	movs	r2, r1
 80010b2:	1cfb      	adds	r3, r7, #3
 80010b4:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 80010b6:	687a      	ldr	r2, [r7, #4]
 80010b8:	238a      	movs	r3, #138	; 0x8a
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	5cd3      	ldrb	r3, [r2, r3]
 80010be:	2b01      	cmp	r3, #1
 80010c0:	d101      	bne.n	80010c6 <HAL_PCD_SetAddress+0x1e>
 80010c2:	2302      	movs	r3, #2
 80010c4:	e017      	b.n	80010f6 <HAL_PCD_SetAddress+0x4e>
 80010c6:	687a      	ldr	r2, [r7, #4]
 80010c8:	238a      	movs	r3, #138	; 0x8a
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	2101      	movs	r1, #1
 80010ce:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	1cfa      	adds	r2, r7, #3
 80010d4:	2124      	movs	r1, #36	; 0x24
 80010d6:	7812      	ldrb	r2, [r2, #0]
 80010d8:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	1cfb      	adds	r3, r7, #3
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	0019      	movs	r1, r3
 80010e4:	0010      	movs	r0, r2
 80010e6:	f002 fbc9 	bl	800387c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80010ea:	687a      	ldr	r2, [r7, #4]
 80010ec:	238a      	movs	r3, #138	; 0x8a
 80010ee:	009b      	lsls	r3, r3, #2
 80010f0:	2100      	movs	r1, #0
 80010f2:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 80010f4:	2300      	movs	r3, #0
}
 80010f6:	0018      	movs	r0, r3
 80010f8:	46bd      	mov	sp, r7
 80010fa:	b002      	add	sp, #8
 80010fc:	bd80      	pop	{r7, pc}

080010fe <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80010fe:	b590      	push	{r4, r7, lr}
 8001100:	b085      	sub	sp, #20
 8001102:	af00      	add	r7, sp, #0
 8001104:	6078      	str	r0, [r7, #4]
 8001106:	000c      	movs	r4, r1
 8001108:	0010      	movs	r0, r2
 800110a:	0019      	movs	r1, r3
 800110c:	1cfb      	adds	r3, r7, #3
 800110e:	1c22      	adds	r2, r4, #0
 8001110:	701a      	strb	r2, [r3, #0]
 8001112:	003b      	movs	r3, r7
 8001114:	1c02      	adds	r2, r0, #0
 8001116:	801a      	strh	r2, [r3, #0]
 8001118:	1cbb      	adds	r3, r7, #2
 800111a:	1c0a      	adds	r2, r1, #0
 800111c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 800111e:	230b      	movs	r3, #11
 8001120:	18fb      	adds	r3, r7, r3
 8001122:	2200      	movs	r2, #0
 8001124:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001126:	1cfb      	adds	r3, r7, #3
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	b25b      	sxtb	r3, r3
 800112c:	2b00      	cmp	r3, #0
 800112e:	da0c      	bge.n	800114a <HAL_PCD_EP_Open+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001130:	1cfb      	adds	r3, r7, #3
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	2207      	movs	r2, #7
 8001136:	4013      	ands	r3, r2
 8001138:	015b      	lsls	r3, r3, #5
 800113a:	3328      	adds	r3, #40	; 0x28
 800113c:	687a      	ldr	r2, [r7, #4]
 800113e:	18d3      	adds	r3, r2, r3
 8001140:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	2201      	movs	r2, #1
 8001146:	705a      	strb	r2, [r3, #1]
 8001148:	e00c      	b.n	8001164 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800114a:	1cfb      	adds	r3, r7, #3
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	2207      	movs	r2, #7
 8001150:	4013      	ands	r3, r2
 8001152:	015b      	lsls	r3, r3, #5
 8001154:	3329      	adds	r3, #41	; 0x29
 8001156:	33ff      	adds	r3, #255	; 0xff
 8001158:	687a      	ldr	r2, [r7, #4]
 800115a:	18d3      	adds	r3, r2, r3
 800115c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	2200      	movs	r2, #0
 8001162:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001164:	1cfb      	adds	r3, r7, #3
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	2207      	movs	r2, #7
 800116a:	4013      	ands	r3, r2
 800116c:	b2da      	uxtb	r2, r3
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001172:	003b      	movs	r3, r7
 8001174:	881a      	ldrh	r2, [r3, #0]
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	1cba      	adds	r2, r7, #2
 800117e:	7812      	ldrb	r2, [r2, #0]
 8001180:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	785b      	ldrb	r3, [r3, #1]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d004      	beq.n	8001194 <HAL_PCD_EP_Open+0x96>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	b29a      	uxth	r2, r3
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001194:	1cbb      	adds	r3, r7, #2
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	2b02      	cmp	r3, #2
 800119a:	d102      	bne.n	80011a2 <HAL_PCD_EP_Open+0xa4>
  {
    ep->data_pid_start = 0U;
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	2200      	movs	r2, #0
 80011a0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80011a2:	687a      	ldr	r2, [r7, #4]
 80011a4:	238a      	movs	r3, #138	; 0x8a
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	5cd3      	ldrb	r3, [r2, r3]
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	d101      	bne.n	80011b2 <HAL_PCD_EP_Open+0xb4>
 80011ae:	2302      	movs	r3, #2
 80011b0:	e013      	b.n	80011da <HAL_PCD_EP_Open+0xdc>
 80011b2:	687a      	ldr	r2, [r7, #4]
 80011b4:	238a      	movs	r3, #138	; 0x8a
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	2101      	movs	r1, #1
 80011ba:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	68fa      	ldr	r2, [r7, #12]
 80011c2:	0011      	movs	r1, r2
 80011c4:	0018      	movs	r0, r3
 80011c6:	f001 fb45 	bl	8002854 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80011ca:	687a      	ldr	r2, [r7, #4]
 80011cc:	238a      	movs	r3, #138	; 0x8a
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	2100      	movs	r1, #0
 80011d2:	54d1      	strb	r1, [r2, r3]

  return ret;
 80011d4:	230b      	movs	r3, #11
 80011d6:	18fb      	adds	r3, r7, r3
 80011d8:	781b      	ldrb	r3, [r3, #0]
}
 80011da:	0018      	movs	r0, r3
 80011dc:	46bd      	mov	sp, r7
 80011de:	b005      	add	sp, #20
 80011e0:	bd90      	pop	{r4, r7, pc}

080011e2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80011e2:	b580      	push	{r7, lr}
 80011e4:	b084      	sub	sp, #16
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
 80011ea:	000a      	movs	r2, r1
 80011ec:	1cfb      	adds	r3, r7, #3
 80011ee:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80011f0:	1cfb      	adds	r3, r7, #3
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	b25b      	sxtb	r3, r3
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	da0c      	bge.n	8001214 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80011fa:	1cfb      	adds	r3, r7, #3
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	2207      	movs	r2, #7
 8001200:	4013      	ands	r3, r2
 8001202:	015b      	lsls	r3, r3, #5
 8001204:	3328      	adds	r3, #40	; 0x28
 8001206:	687a      	ldr	r2, [r7, #4]
 8001208:	18d3      	adds	r3, r2, r3
 800120a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	2201      	movs	r2, #1
 8001210:	705a      	strb	r2, [r3, #1]
 8001212:	e00c      	b.n	800122e <HAL_PCD_EP_Close+0x4c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001214:	1cfb      	adds	r3, r7, #3
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	2207      	movs	r2, #7
 800121a:	4013      	ands	r3, r2
 800121c:	015b      	lsls	r3, r3, #5
 800121e:	3329      	adds	r3, #41	; 0x29
 8001220:	33ff      	adds	r3, #255	; 0xff
 8001222:	687a      	ldr	r2, [r7, #4]
 8001224:	18d3      	adds	r3, r2, r3
 8001226:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	2200      	movs	r2, #0
 800122c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800122e:	1cfb      	adds	r3, r7, #3
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	2207      	movs	r2, #7
 8001234:	4013      	ands	r3, r2
 8001236:	b2da      	uxtb	r2, r3
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800123c:	687a      	ldr	r2, [r7, #4]
 800123e:	238a      	movs	r3, #138	; 0x8a
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	5cd3      	ldrb	r3, [r2, r3]
 8001244:	2b01      	cmp	r3, #1
 8001246:	d101      	bne.n	800124c <HAL_PCD_EP_Close+0x6a>
 8001248:	2302      	movs	r3, #2
 800124a:	e011      	b.n	8001270 <HAL_PCD_EP_Close+0x8e>
 800124c:	687a      	ldr	r2, [r7, #4]
 800124e:	238a      	movs	r3, #138	; 0x8a
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	2101      	movs	r1, #1
 8001254:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	68fa      	ldr	r2, [r7, #12]
 800125c:	0011      	movs	r1, r2
 800125e:	0018      	movs	r0, r3
 8001260:	f001 fdf0 	bl	8002e44 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001264:	687a      	ldr	r2, [r7, #4]
 8001266:	238a      	movs	r3, #138	; 0x8a
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	2100      	movs	r1, #0
 800126c:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 800126e:	2300      	movs	r3, #0
}
 8001270:	0018      	movs	r0, r3
 8001272:	46bd      	mov	sp, r7
 8001274:	b004      	add	sp, #16
 8001276:	bd80      	pop	{r7, pc}

08001278 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b086      	sub	sp, #24
 800127c:	af00      	add	r7, sp, #0
 800127e:	60f8      	str	r0, [r7, #12]
 8001280:	607a      	str	r2, [r7, #4]
 8001282:	603b      	str	r3, [r7, #0]
 8001284:	200b      	movs	r0, #11
 8001286:	183b      	adds	r3, r7, r0
 8001288:	1c0a      	adds	r2, r1, #0
 800128a:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800128c:	0001      	movs	r1, r0
 800128e:	187b      	adds	r3, r7, r1
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	2207      	movs	r2, #7
 8001294:	4013      	ands	r3, r2
 8001296:	015b      	lsls	r3, r3, #5
 8001298:	3329      	adds	r3, #41	; 0x29
 800129a:	33ff      	adds	r3, #255	; 0xff
 800129c:	68fa      	ldr	r2, [r7, #12]
 800129e:	18d3      	adds	r3, r2, r3
 80012a0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	687a      	ldr	r2, [r7, #4]
 80012a6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	683a      	ldr	r2, [r7, #0]
 80012ac:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	2200      	movs	r2, #0
 80012b2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	2200      	movs	r2, #0
 80012b8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80012ba:	187b      	adds	r3, r7, r1
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	2207      	movs	r2, #7
 80012c0:	4013      	ands	r3, r2
 80012c2:	b2da      	uxtb	r2, r3
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80012c8:	187b      	adds	r3, r7, r1
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	2207      	movs	r2, #7
 80012ce:	4013      	ands	r3, r2
 80012d0:	d107      	bne.n	80012e2 <HAL_PCD_EP_Receive+0x6a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	697a      	ldr	r2, [r7, #20]
 80012d8:	0011      	movs	r1, r2
 80012da:	0018      	movs	r0, r3
 80012dc:	f001 ff28 	bl	8003130 <USB_EPStartXfer>
 80012e0:	e006      	b.n	80012f0 <HAL_PCD_EP_Receive+0x78>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	697a      	ldr	r2, [r7, #20]
 80012e8:	0011      	movs	r1, r2
 80012ea:	0018      	movs	r0, r3
 80012ec:	f001 ff20 	bl	8003130 <USB_EPStartXfer>
  }

  return HAL_OK;
 80012f0:	2300      	movs	r3, #0
}
 80012f2:	0018      	movs	r0, r3
 80012f4:	46bd      	mov	sp, r7
 80012f6:	b006      	add	sp, #24
 80012f8:	bd80      	pop	{r7, pc}

080012fa <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80012fa:	b580      	push	{r7, lr}
 80012fc:	b082      	sub	sp, #8
 80012fe:	af00      	add	r7, sp, #0
 8001300:	6078      	str	r0, [r7, #4]
 8001302:	000a      	movs	r2, r1
 8001304:	1cfb      	adds	r3, r7, #3
 8001306:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001308:	1cfb      	adds	r3, r7, #3
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	2207      	movs	r2, #7
 800130e:	4013      	ands	r3, r2
 8001310:	687a      	ldr	r2, [r7, #4]
 8001312:	330a      	adds	r3, #10
 8001314:	015b      	lsls	r3, r3, #5
 8001316:	18d3      	adds	r3, r2, r3
 8001318:	3304      	adds	r3, #4
 800131a:	681b      	ldr	r3, [r3, #0]
}
 800131c:	0018      	movs	r0, r3
 800131e:	46bd      	mov	sp, r7
 8001320:	b002      	add	sp, #8
 8001322:	bd80      	pop	{r7, pc}

08001324 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b086      	sub	sp, #24
 8001328:	af00      	add	r7, sp, #0
 800132a:	60f8      	str	r0, [r7, #12]
 800132c:	607a      	str	r2, [r7, #4]
 800132e:	603b      	str	r3, [r7, #0]
 8001330:	200b      	movs	r0, #11
 8001332:	183b      	adds	r3, r7, r0
 8001334:	1c0a      	adds	r2, r1, #0
 8001336:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001338:	0001      	movs	r1, r0
 800133a:	187b      	adds	r3, r7, r1
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	2207      	movs	r2, #7
 8001340:	4013      	ands	r3, r2
 8001342:	015b      	lsls	r3, r3, #5
 8001344:	3328      	adds	r3, #40	; 0x28
 8001346:	68fa      	ldr	r2, [r7, #12]
 8001348:	18d3      	adds	r3, r2, r3
 800134a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	687a      	ldr	r2, [r7, #4]
 8001350:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	683a      	ldr	r2, [r7, #0]
 8001356:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	2200      	movs	r2, #0
 800135c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	2201      	movs	r2, #1
 8001362:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001364:	187b      	adds	r3, r7, r1
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	2207      	movs	r2, #7
 800136a:	4013      	ands	r3, r2
 800136c:	b2da      	uxtb	r2, r3
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001372:	187b      	adds	r3, r7, r1
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	2207      	movs	r2, #7
 8001378:	4013      	ands	r3, r2
 800137a:	d107      	bne.n	800138c <HAL_PCD_EP_Transmit+0x68>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	697a      	ldr	r2, [r7, #20]
 8001382:	0011      	movs	r1, r2
 8001384:	0018      	movs	r0, r3
 8001386:	f001 fed3 	bl	8003130 <USB_EPStartXfer>
 800138a:	e006      	b.n	800139a <HAL_PCD_EP_Transmit+0x76>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	697a      	ldr	r2, [r7, #20]
 8001392:	0011      	movs	r1, r2
 8001394:	0018      	movs	r0, r3
 8001396:	f001 fecb 	bl	8003130 <USB_EPStartXfer>
  }

  return HAL_OK;
 800139a:	2300      	movs	r3, #0
}
 800139c:	0018      	movs	r0, r3
 800139e:	46bd      	mov	sp, r7
 80013a0:	b006      	add	sp, #24
 80013a2:	bd80      	pop	{r7, pc}

080013a4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	000a      	movs	r2, r1
 80013ae:	1cfb      	adds	r3, r7, #3
 80013b0:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80013b2:	1cfb      	adds	r3, r7, #3
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	2207      	movs	r2, #7
 80013b8:	401a      	ands	r2, r3
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	429a      	cmp	r2, r3
 80013c0:	d901      	bls.n	80013c6 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e050      	b.n	8001468 <HAL_PCD_EP_SetStall+0xc4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80013c6:	1cfb      	adds	r3, r7, #3
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	b25b      	sxtb	r3, r3
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	da0c      	bge.n	80013ea <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80013d0:	1cfb      	adds	r3, r7, #3
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	2207      	movs	r2, #7
 80013d6:	4013      	ands	r3, r2
 80013d8:	015b      	lsls	r3, r3, #5
 80013da:	3328      	adds	r3, #40	; 0x28
 80013dc:	687a      	ldr	r2, [r7, #4]
 80013de:	18d3      	adds	r3, r2, r3
 80013e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	2201      	movs	r2, #1
 80013e6:	705a      	strb	r2, [r3, #1]
 80013e8:	e00a      	b.n	8001400 <HAL_PCD_EP_SetStall+0x5c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80013ea:	1cfb      	adds	r3, r7, #3
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	015b      	lsls	r3, r3, #5
 80013f0:	3329      	adds	r3, #41	; 0x29
 80013f2:	33ff      	adds	r3, #255	; 0xff
 80013f4:	687a      	ldr	r2, [r7, #4]
 80013f6:	18d3      	adds	r3, r2, r3
 80013f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	2200      	movs	r2, #0
 80013fe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	2201      	movs	r2, #1
 8001404:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001406:	1cfb      	adds	r3, r7, #3
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	2207      	movs	r2, #7
 800140c:	4013      	ands	r3, r2
 800140e:	b2da      	uxtb	r2, r3
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001414:	687a      	ldr	r2, [r7, #4]
 8001416:	238a      	movs	r3, #138	; 0x8a
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	5cd3      	ldrb	r3, [r2, r3]
 800141c:	2b01      	cmp	r3, #1
 800141e:	d101      	bne.n	8001424 <HAL_PCD_EP_SetStall+0x80>
 8001420:	2302      	movs	r3, #2
 8001422:	e021      	b.n	8001468 <HAL_PCD_EP_SetStall+0xc4>
 8001424:	687a      	ldr	r2, [r7, #4]
 8001426:	238a      	movs	r3, #138	; 0x8a
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	2101      	movs	r1, #1
 800142c:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	68fa      	ldr	r2, [r7, #12]
 8001434:	0011      	movs	r1, r2
 8001436:	0018      	movs	r0, r3
 8001438:	f002 f94c 	bl	80036d4 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800143c:	1cfb      	adds	r3, r7, #3
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	2207      	movs	r2, #7
 8001442:	4013      	ands	r3, r2
 8001444:	d10a      	bne.n	800145c <HAL_PCD_EP_SetStall+0xb8>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	218c      	movs	r1, #140	; 0x8c
 800144e:	0089      	lsls	r1, r1, #2
 8001450:	468c      	mov	ip, r1
 8001452:	4463      	add	r3, ip
 8001454:	0019      	movs	r1, r3
 8001456:	0010      	movs	r0, r2
 8001458:	f002 fa48 	bl	80038ec <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 800145c:	687a      	ldr	r2, [r7, #4]
 800145e:	238a      	movs	r3, #138	; 0x8a
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	2100      	movs	r1, #0
 8001464:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8001466:	2300      	movs	r3, #0
}
 8001468:	0018      	movs	r0, r3
 800146a:	46bd      	mov	sp, r7
 800146c:	b004      	add	sp, #16
 800146e:	bd80      	pop	{r7, pc}

08001470 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	000a      	movs	r2, r1
 800147a:	1cfb      	adds	r3, r7, #3
 800147c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800147e:	1cfb      	adds	r3, r7, #3
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	220f      	movs	r2, #15
 8001484:	401a      	ands	r2, r3
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	429a      	cmp	r2, r3
 800148c:	d901      	bls.n	8001492 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e042      	b.n	8001518 <HAL_PCD_EP_ClrStall+0xa8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001492:	1cfb      	adds	r3, r7, #3
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	b25b      	sxtb	r3, r3
 8001498:	2b00      	cmp	r3, #0
 800149a:	da0c      	bge.n	80014b6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800149c:	1cfb      	adds	r3, r7, #3
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	2207      	movs	r2, #7
 80014a2:	4013      	ands	r3, r2
 80014a4:	015b      	lsls	r3, r3, #5
 80014a6:	3328      	adds	r3, #40	; 0x28
 80014a8:	687a      	ldr	r2, [r7, #4]
 80014aa:	18d3      	adds	r3, r2, r3
 80014ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	2201      	movs	r2, #1
 80014b2:	705a      	strb	r2, [r3, #1]
 80014b4:	e00c      	b.n	80014d0 <HAL_PCD_EP_ClrStall+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80014b6:	1cfb      	adds	r3, r7, #3
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	2207      	movs	r2, #7
 80014bc:	4013      	ands	r3, r2
 80014be:	015b      	lsls	r3, r3, #5
 80014c0:	3329      	adds	r3, #41	; 0x29
 80014c2:	33ff      	adds	r3, #255	; 0xff
 80014c4:	687a      	ldr	r2, [r7, #4]
 80014c6:	18d3      	adds	r3, r2, r3
 80014c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	2200      	movs	r2, #0
 80014ce:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	2200      	movs	r2, #0
 80014d4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80014d6:	1cfb      	adds	r3, r7, #3
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	2207      	movs	r2, #7
 80014dc:	4013      	ands	r3, r2
 80014de:	b2da      	uxtb	r2, r3
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80014e4:	687a      	ldr	r2, [r7, #4]
 80014e6:	238a      	movs	r3, #138	; 0x8a
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	5cd3      	ldrb	r3, [r2, r3]
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d101      	bne.n	80014f4 <HAL_PCD_EP_ClrStall+0x84>
 80014f0:	2302      	movs	r3, #2
 80014f2:	e011      	b.n	8001518 <HAL_PCD_EP_ClrStall+0xa8>
 80014f4:	687a      	ldr	r2, [r7, #4]
 80014f6:	238a      	movs	r3, #138	; 0x8a
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	2101      	movs	r1, #1
 80014fc:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	68fa      	ldr	r2, [r7, #12]
 8001504:	0011      	movs	r1, r2
 8001506:	0018      	movs	r0, r3
 8001508:	f002 f926 	bl	8003758 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800150c:	687a      	ldr	r2, [r7, #4]
 800150e:	238a      	movs	r3, #138	; 0x8a
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	2100      	movs	r1, #0
 8001514:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8001516:	2300      	movs	r3, #0
}
 8001518:	0018      	movs	r0, r3
 800151a:	46bd      	mov	sp, r7
 800151c:	b004      	add	sp, #16
 800151e:	bd80      	pop	{r7, pc}

08001520 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001520:	b590      	push	{r4, r7, lr}
 8001522:	b089      	sub	sp, #36	; 0x24
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001528:	e2b3      	b.n	8001a92 <PCD_EP_ISR_Handler+0x572>
  {
    wIstr = hpcd->Instance->ISTR;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	2016      	movs	r0, #22
 8001530:	183b      	adds	r3, r7, r0
 8001532:	2144      	movs	r1, #68	; 0x44
 8001534:	5a52      	ldrh	r2, [r2, r1]
 8001536:	801a      	strh	r2, [r3, #0]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001538:	183b      	adds	r3, r7, r0
 800153a:	881b      	ldrh	r3, [r3, #0]
 800153c:	b2da      	uxtb	r2, r3
 800153e:	2015      	movs	r0, #21
 8001540:	183b      	adds	r3, r7, r0
 8001542:	210f      	movs	r1, #15
 8001544:	400a      	ands	r2, r1
 8001546:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8001548:	183b      	adds	r3, r7, r0
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d000      	beq.n	8001552 <PCD_EP_ISR_Handler+0x32>
 8001550:	e141      	b.n	80017d6 <PCD_EP_ISR_Handler+0x2b6>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001552:	2316      	movs	r3, #22
 8001554:	18fb      	adds	r3, r7, r3
 8001556:	881b      	ldrh	r3, [r3, #0]
 8001558:	2210      	movs	r2, #16
 800155a:	4013      	ands	r3, r2
 800155c:	d14e      	bne.n	80015fc <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	881b      	ldrh	r3, [r3, #0]
 8001564:	b29b      	uxth	r3, r3
 8001566:	4aca      	ldr	r2, [pc, #808]	; (8001890 <PCD_EP_ISR_Handler+0x370>)
 8001568:	4013      	ands	r3, r2
 800156a:	b29c      	uxth	r4, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4ac8      	ldr	r2, [pc, #800]	; (8001894 <PCD_EP_ISR_Handler+0x374>)
 8001572:	4322      	orrs	r2, r4
 8001574:	b292      	uxth	r2, r2
 8001576:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	3328      	adds	r3, #40	; 0x28
 800157c:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	2250      	movs	r2, #80	; 0x50
 8001584:	5a9b      	ldrh	r3, [r3, r2]
 8001586:	b29b      	uxth	r3, r3
 8001588:	001a      	movs	r2, r3
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	00db      	lsls	r3, r3, #3
 8001590:	18d2      	adds	r2, r2, r3
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	18d3      	adds	r3, r2, r3
 8001598:	4abf      	ldr	r2, [pc, #764]	; (8001898 <PCD_EP_ISR_Handler+0x378>)
 800159a:	4694      	mov	ip, r2
 800159c:	4463      	add	r3, ip
 800159e:	881b      	ldrh	r3, [r3, #0]
 80015a0:	059b      	lsls	r3, r3, #22
 80015a2:	0d9a      	lsrs	r2, r3, #22
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	695a      	ldr	r2, [r3, #20]
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	69db      	ldr	r3, [r3, #28]
 80015b0:	18d2      	adds	r2, r2, r3
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2100      	movs	r1, #0
 80015ba:	0018      	movs	r0, r3
 80015bc:	f00c ff54 	bl	800e468 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2224      	movs	r2, #36	; 0x24
 80015c4:	5c9b      	ldrb	r3, [r3, r2]
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d100      	bne.n	80015ce <PCD_EP_ISR_Handler+0xae>
 80015cc:	e261      	b.n	8001a92 <PCD_EP_ISR_Handler+0x572>
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	699b      	ldr	r3, [r3, #24]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d000      	beq.n	80015d8 <PCD_EP_ISR_Handler+0xb8>
 80015d6:	e25c      	b.n	8001a92 <PCD_EP_ISR_Handler+0x572>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2224      	movs	r2, #36	; 0x24
 80015dc:	5c9b      	ldrb	r3, [r3, r2]
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	2280      	movs	r2, #128	; 0x80
 80015e2:	4252      	negs	r2, r2
 80015e4:	4313      	orrs	r3, r2
 80015e6:	b2da      	uxtb	r2, r3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	b291      	uxth	r1, r2
 80015ee:	224c      	movs	r2, #76	; 0x4c
 80015f0:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2224      	movs	r2, #36	; 0x24
 80015f6:	2100      	movs	r1, #0
 80015f8:	5499      	strb	r1, [r3, r2]
 80015fa:	e24a      	b.n	8001a92 <PCD_EP_ISR_Handler+0x572>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	3329      	adds	r3, #41	; 0x29
 8001600:	33ff      	adds	r3, #255	; 0xff
 8001602:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	2112      	movs	r1, #18
 800160a:	187b      	adds	r3, r7, r1
 800160c:	8812      	ldrh	r2, [r2, #0]
 800160e:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001610:	187b      	adds	r3, r7, r1
 8001612:	881a      	ldrh	r2, [r3, #0]
 8001614:	2380      	movs	r3, #128	; 0x80
 8001616:	011b      	lsls	r3, r3, #4
 8001618:	4013      	ands	r3, r2
 800161a:	d033      	beq.n	8001684 <PCD_EP_ISR_Handler+0x164>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	2250      	movs	r2, #80	; 0x50
 8001622:	5a9b      	ldrh	r3, [r3, r2]
 8001624:	b29b      	uxth	r3, r3
 8001626:	001a      	movs	r2, r3
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	00db      	lsls	r3, r3, #3
 800162e:	18d2      	adds	r2, r2, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	18d3      	adds	r3, r2, r3
 8001636:	4a99      	ldr	r2, [pc, #612]	; (800189c <PCD_EP_ISR_Handler+0x37c>)
 8001638:	4694      	mov	ip, r2
 800163a:	4463      	add	r3, ip
 800163c:	881b      	ldrh	r3, [r3, #0]
 800163e:	059b      	lsls	r3, r3, #22
 8001640:	0d9a      	lsrs	r2, r3, #22
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6818      	ldr	r0, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	228c      	movs	r2, #140	; 0x8c
 800164e:	0092      	lsls	r2, r2, #2
 8001650:	1899      	adds	r1, r3, r2
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800165a:	b29b      	uxth	r3, r3
 800165c:	f002 f993 	bl	8003986 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	881b      	ldrh	r3, [r3, #0]
 8001666:	b29b      	uxth	r3, r3
 8001668:	4a8d      	ldr	r2, [pc, #564]	; (80018a0 <PCD_EP_ISR_Handler+0x380>)
 800166a:	4013      	ands	r3, r2
 800166c:	b29c      	uxth	r4, r3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	2280      	movs	r2, #128	; 0x80
 8001674:	4322      	orrs	r2, r4
 8001676:	b292      	uxth	r2, r2
 8001678:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	0018      	movs	r0, r3
 800167e:	f00c fec1 	bl	800e404 <HAL_PCD_SetupStageCallback>
 8001682:	e206      	b.n	8001a92 <PCD_EP_ISR_Handler+0x572>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001684:	2312      	movs	r3, #18
 8001686:	18fb      	adds	r3, r7, r3
 8001688:	2200      	movs	r2, #0
 800168a:	5e9b      	ldrsh	r3, [r3, r2]
 800168c:	2b00      	cmp	r3, #0
 800168e:	db00      	blt.n	8001692 <PCD_EP_ISR_Handler+0x172>
 8001690:	e1ff      	b.n	8001a92 <PCD_EP_ISR_Handler+0x572>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	881b      	ldrh	r3, [r3, #0]
 8001698:	b29b      	uxth	r3, r3
 800169a:	4a81      	ldr	r2, [pc, #516]	; (80018a0 <PCD_EP_ISR_Handler+0x380>)
 800169c:	4013      	ands	r3, r2
 800169e:	b29c      	uxth	r4, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	2280      	movs	r2, #128	; 0x80
 80016a6:	4322      	orrs	r2, r4
 80016a8:	b292      	uxth	r2, r2
 80016aa:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	2250      	movs	r2, #80	; 0x50
 80016b2:	5a9b      	ldrh	r3, [r3, r2]
 80016b4:	b29b      	uxth	r3, r3
 80016b6:	001a      	movs	r2, r3
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	00db      	lsls	r3, r3, #3
 80016be:	18d2      	adds	r2, r2, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	18d3      	adds	r3, r2, r3
 80016c6:	4a75      	ldr	r2, [pc, #468]	; (800189c <PCD_EP_ISR_Handler+0x37c>)
 80016c8:	4694      	mov	ip, r2
 80016ca:	4463      	add	r3, ip
 80016cc:	881b      	ldrh	r3, [r3, #0]
 80016ce:	059b      	lsls	r3, r3, #22
 80016d0:	0d9a      	lsrs	r2, r3, #22
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	69db      	ldr	r3, [r3, #28]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d01a      	beq.n	8001714 <PCD_EP_ISR_Handler+0x1f4>
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	695b      	ldr	r3, [r3, #20]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d016      	beq.n	8001714 <PCD_EP_ISR_Handler+0x1f4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6818      	ldr	r0, [r3, #0]
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	6959      	ldr	r1, [r3, #20]
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80016f6:	b29b      	uxth	r3, r3
 80016f8:	f002 f945 	bl	8003986 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	695a      	ldr	r2, [r3, #20]
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	69db      	ldr	r3, [r3, #28]
 8001704:	18d2      	adds	r2, r2, r3
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2100      	movs	r1, #0
 800170e:	0018      	movs	r0, r3
 8001710:	f00c fe8d 	bl	800e42e <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	001c      	movs	r4, r3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	2250      	movs	r2, #80	; 0x50
 8001720:	5a9b      	ldrh	r3, [r3, r2]
 8001722:	b29b      	uxth	r3, r3
 8001724:	18e4      	adds	r4, r4, r3
 8001726:	4b5d      	ldr	r3, [pc, #372]	; (800189c <PCD_EP_ISR_Handler+0x37c>)
 8001728:	18e3      	adds	r3, r4, r3
 800172a:	60bb      	str	r3, [r7, #8]
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	691b      	ldr	r3, [r3, #16]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d10e      	bne.n	8001752 <PCD_EP_ISR_Handler+0x232>
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	881b      	ldrh	r3, [r3, #0]
 8001738:	4a5a      	ldr	r2, [pc, #360]	; (80018a4 <PCD_EP_ISR_Handler+0x384>)
 800173a:	4013      	ands	r3, r2
 800173c:	b29a      	uxth	r2, r3
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	801a      	strh	r2, [r3, #0]
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	881b      	ldrh	r3, [r3, #0]
 8001746:	4a53      	ldr	r2, [pc, #332]	; (8001894 <PCD_EP_ISR_Handler+0x374>)
 8001748:	4313      	orrs	r3, r2
 800174a:	b29a      	uxth	r2, r3
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	801a      	strh	r2, [r3, #0]
 8001750:	e02b      	b.n	80017aa <PCD_EP_ISR_Handler+0x28a>
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	691b      	ldr	r3, [r3, #16]
 8001756:	2b3e      	cmp	r3, #62	; 0x3e
 8001758:	d812      	bhi.n	8001780 <PCD_EP_ISR_Handler+0x260>
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	691b      	ldr	r3, [r3, #16]
 800175e:	085b      	lsrs	r3, r3, #1
 8001760:	61bb      	str	r3, [r7, #24]
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	691b      	ldr	r3, [r3, #16]
 8001766:	2201      	movs	r2, #1
 8001768:	4013      	ands	r3, r2
 800176a:	d002      	beq.n	8001772 <PCD_EP_ISR_Handler+0x252>
 800176c:	69bb      	ldr	r3, [r7, #24]
 800176e:	3301      	adds	r3, #1
 8001770:	61bb      	str	r3, [r7, #24]
 8001772:	69bb      	ldr	r3, [r7, #24]
 8001774:	b29b      	uxth	r3, r3
 8001776:	029b      	lsls	r3, r3, #10
 8001778:	b29a      	uxth	r2, r3
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	801a      	strh	r2, [r3, #0]
 800177e:	e014      	b.n	80017aa <PCD_EP_ISR_Handler+0x28a>
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	691b      	ldr	r3, [r3, #16]
 8001784:	095b      	lsrs	r3, r3, #5
 8001786:	61bb      	str	r3, [r7, #24]
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	691b      	ldr	r3, [r3, #16]
 800178c:	221f      	movs	r2, #31
 800178e:	4013      	ands	r3, r2
 8001790:	d102      	bne.n	8001798 <PCD_EP_ISR_Handler+0x278>
 8001792:	69bb      	ldr	r3, [r7, #24]
 8001794:	3b01      	subs	r3, #1
 8001796:	61bb      	str	r3, [r7, #24]
 8001798:	69bb      	ldr	r3, [r7, #24]
 800179a:	b29b      	uxth	r3, r3
 800179c:	029b      	lsls	r3, r3, #10
 800179e:	b29b      	uxth	r3, r3
 80017a0:	4a3c      	ldr	r2, [pc, #240]	; (8001894 <PCD_EP_ISR_Handler+0x374>)
 80017a2:	4313      	orrs	r3, r2
 80017a4:	b29a      	uxth	r2, r3
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	881b      	ldrh	r3, [r3, #0]
 80017b0:	b29b      	uxth	r3, r3
 80017b2:	4a3d      	ldr	r2, [pc, #244]	; (80018a8 <PCD_EP_ISR_Handler+0x388>)
 80017b4:	4013      	ands	r3, r2
 80017b6:	b29c      	uxth	r4, r3
 80017b8:	2380      	movs	r3, #128	; 0x80
 80017ba:	015b      	lsls	r3, r3, #5
 80017bc:	4063      	eors	r3, r4
 80017be:	b29c      	uxth	r4, r3
 80017c0:	2380      	movs	r3, #128	; 0x80
 80017c2:	019b      	lsls	r3, r3, #6
 80017c4:	4063      	eors	r3, r4
 80017c6:	b29c      	uxth	r4, r3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a37      	ldr	r2, [pc, #220]	; (80018ac <PCD_EP_ISR_Handler+0x38c>)
 80017ce:	4322      	orrs	r2, r4
 80017d0:	b292      	uxth	r2, r2
 80017d2:	801a      	strh	r2, [r3, #0]
 80017d4:	e15d      	b.n	8001a92 <PCD_EP_ISR_Handler+0x572>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	001a      	movs	r2, r3
 80017dc:	2315      	movs	r3, #21
 80017de:	18fb      	adds	r3, r7, r3
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	18d2      	adds	r2, r2, r3
 80017e6:	2112      	movs	r1, #18
 80017e8:	187b      	adds	r3, r7, r1
 80017ea:	8812      	ldrh	r2, [r2, #0]
 80017ec:	801a      	strh	r2, [r3, #0]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80017ee:	187b      	adds	r3, r7, r1
 80017f0:	2200      	movs	r2, #0
 80017f2:	5e9b      	ldrsh	r3, [r3, r2]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	db00      	blt.n	80017fa <PCD_EP_ISR_Handler+0x2da>
 80017f8:	e0f5      	b.n	80019e6 <PCD_EP_ISR_Handler+0x4c6>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	001a      	movs	r2, r3
 8001800:	2115      	movs	r1, #21
 8001802:	187b      	adds	r3, r7, r1
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	18d3      	adds	r3, r2, r3
 800180a:	881b      	ldrh	r3, [r3, #0]
 800180c:	b29b      	uxth	r3, r3
 800180e:	4a24      	ldr	r2, [pc, #144]	; (80018a0 <PCD_EP_ISR_Handler+0x380>)
 8001810:	4013      	ands	r3, r2
 8001812:	b29c      	uxth	r4, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	001a      	movs	r2, r3
 800181a:	187b      	adds	r3, r7, r1
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	18d3      	adds	r3, r2, r3
 8001822:	2280      	movs	r2, #128	; 0x80
 8001824:	4322      	orrs	r2, r4
 8001826:	b292      	uxth	r2, r2
 8001828:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800182a:	187b      	adds	r3, r7, r1
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	015b      	lsls	r3, r3, #5
 8001830:	3329      	adds	r3, #41	; 0x29
 8001832:	33ff      	adds	r3, #255	; 0xff
 8001834:	687a      	ldr	r2, [r7, #4]
 8001836:	18d3      	adds	r3, r2, r3
 8001838:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	7b1b      	ldrb	r3, [r3, #12]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d136      	bne.n	80018b0 <PCD_EP_ISR_Handler+0x390>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	2250      	movs	r2, #80	; 0x50
 8001848:	5a9b      	ldrh	r3, [r3, r2]
 800184a:	b29b      	uxth	r3, r3
 800184c:	001a      	movs	r2, r3
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	00db      	lsls	r3, r3, #3
 8001854:	18d2      	adds	r2, r2, r3
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	18d3      	adds	r3, r2, r3
 800185c:	4a0f      	ldr	r2, [pc, #60]	; (800189c <PCD_EP_ISR_Handler+0x37c>)
 800185e:	4694      	mov	ip, r2
 8001860:	4463      	add	r3, ip
 8001862:	881a      	ldrh	r2, [r3, #0]
 8001864:	211e      	movs	r1, #30
 8001866:	187b      	adds	r3, r7, r1
 8001868:	0592      	lsls	r2, r2, #22
 800186a:	0d92      	lsrs	r2, r2, #22
 800186c:	801a      	strh	r2, [r3, #0]
          if (count != 0U)
 800186e:	187b      	adds	r3, r7, r1
 8001870:	881b      	ldrh	r3, [r3, #0]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d100      	bne.n	8001878 <PCD_EP_ISR_Handler+0x358>
 8001876:	e08b      	b.n	8001990 <PCD_EP_ISR_Handler+0x470>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6818      	ldr	r0, [r3, #0]
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	6959      	ldr	r1, [r3, #20]
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	88da      	ldrh	r2, [r3, #6]
 8001884:	231e      	movs	r3, #30
 8001886:	18fb      	adds	r3, r7, r3
 8001888:	881b      	ldrh	r3, [r3, #0]
 800188a:	f002 f87c 	bl	8003986 <USB_ReadPMA>
 800188e:	e07f      	b.n	8001990 <PCD_EP_ISR_Handler+0x470>
 8001890:	ffff8f0f 	.word	0xffff8f0f
 8001894:	ffff8000 	.word	0xffff8000
 8001898:	00000402 	.word	0x00000402
 800189c:	00000406 	.word	0x00000406
 80018a0:	00000f8f 	.word	0x00000f8f
 80018a4:	ffff83ff 	.word	0xffff83ff
 80018a8:	ffffbf8f 	.word	0xffffbf8f
 80018ac:	ffff8080 	.word	0xffff8080
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	001a      	movs	r2, r3
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	18d3      	adds	r3, r2, r3
 80018be:	881b      	ldrh	r3, [r3, #0]
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	001a      	movs	r2, r3
 80018c4:	2380      	movs	r3, #128	; 0x80
 80018c6:	01db      	lsls	r3, r3, #7
 80018c8:	4013      	ands	r3, r2
 80018ca:	d025      	beq.n	8001918 <PCD_EP_ISR_Handler+0x3f8>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	2250      	movs	r2, #80	; 0x50
 80018d2:	5a9b      	ldrh	r3, [r3, r2]
 80018d4:	b29b      	uxth	r3, r3
 80018d6:	001a      	movs	r2, r3
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	00db      	lsls	r3, r3, #3
 80018de:	18d2      	adds	r2, r2, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	18d3      	adds	r3, r2, r3
 80018e6:	4a72      	ldr	r2, [pc, #456]	; (8001ab0 <PCD_EP_ISR_Handler+0x590>)
 80018e8:	4694      	mov	ip, r2
 80018ea:	4463      	add	r3, ip
 80018ec:	881a      	ldrh	r2, [r3, #0]
 80018ee:	211e      	movs	r1, #30
 80018f0:	187b      	adds	r3, r7, r1
 80018f2:	0592      	lsls	r2, r2, #22
 80018f4:	0d92      	lsrs	r2, r2, #22
 80018f6:	801a      	strh	r2, [r3, #0]
            if (count != 0U)
 80018f8:	187b      	adds	r3, r7, r1
 80018fa:	881b      	ldrh	r3, [r3, #0]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d030      	beq.n	8001962 <PCD_EP_ISR_Handler+0x442>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6818      	ldr	r0, [r3, #0]
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	6959      	ldr	r1, [r3, #20]
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	891a      	ldrh	r2, [r3, #8]
 800190c:	231e      	movs	r3, #30
 800190e:	18fb      	adds	r3, r7, r3
 8001910:	881b      	ldrh	r3, [r3, #0]
 8001912:	f002 f838 	bl	8003986 <USB_ReadPMA>
 8001916:	e024      	b.n	8001962 <PCD_EP_ISR_Handler+0x442>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	2250      	movs	r2, #80	; 0x50
 800191e:	5a9b      	ldrh	r3, [r3, r2]
 8001920:	b29b      	uxth	r3, r3
 8001922:	001a      	movs	r2, r3
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	00db      	lsls	r3, r3, #3
 800192a:	18d2      	adds	r2, r2, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	18d3      	adds	r3, r2, r3
 8001932:	4a60      	ldr	r2, [pc, #384]	; (8001ab4 <PCD_EP_ISR_Handler+0x594>)
 8001934:	4694      	mov	ip, r2
 8001936:	4463      	add	r3, ip
 8001938:	881a      	ldrh	r2, [r3, #0]
 800193a:	211e      	movs	r1, #30
 800193c:	187b      	adds	r3, r7, r1
 800193e:	0592      	lsls	r2, r2, #22
 8001940:	0d92      	lsrs	r2, r2, #22
 8001942:	801a      	strh	r2, [r3, #0]
            if (count != 0U)
 8001944:	187b      	adds	r3, r7, r1
 8001946:	881b      	ldrh	r3, [r3, #0]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d00a      	beq.n	8001962 <PCD_EP_ISR_Handler+0x442>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6818      	ldr	r0, [r3, #0]
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	6959      	ldr	r1, [r3, #20]
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	895a      	ldrh	r2, [r3, #10]
 8001958:	231e      	movs	r3, #30
 800195a:	18fb      	adds	r3, r7, r3
 800195c:	881b      	ldrh	r3, [r3, #0]
 800195e:	f002 f812 	bl	8003986 <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	001a      	movs	r2, r3
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	18d3      	adds	r3, r2, r3
 8001970:	881b      	ldrh	r3, [r3, #0]
 8001972:	b29b      	uxth	r3, r3
 8001974:	4a50      	ldr	r2, [pc, #320]	; (8001ab8 <PCD_EP_ISR_Handler+0x598>)
 8001976:	4013      	ands	r3, r2
 8001978:	b29c      	uxth	r4, r3
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	001a      	movs	r2, r3
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	18d3      	adds	r3, r2, r3
 8001988:	4a4c      	ldr	r2, [pc, #304]	; (8001abc <PCD_EP_ISR_Handler+0x59c>)
 800198a:	4322      	orrs	r2, r4
 800198c:	b292      	uxth	r2, r2
 800198e:	801a      	strh	r2, [r3, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	69da      	ldr	r2, [r3, #28]
 8001994:	211e      	movs	r1, #30
 8001996:	187b      	adds	r3, r7, r1
 8001998:	881b      	ldrh	r3, [r3, #0]
 800199a:	18d2      	adds	r2, r2, r3
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	695a      	ldr	r2, [r3, #20]
 80019a4:	187b      	adds	r3, r7, r1
 80019a6:	881b      	ldrh	r3, [r3, #0]
 80019a8:	18d2      	adds	r2, r2, r3
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	699b      	ldr	r3, [r3, #24]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d006      	beq.n	80019c4 <PCD_EP_ISR_Handler+0x4a4>
 80019b6:	231e      	movs	r3, #30
 80019b8:	18fb      	adds	r3, r7, r3
 80019ba:	881a      	ldrh	r2, [r3, #0]
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	691b      	ldr	r3, [r3, #16]
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d207      	bcs.n	80019d4 <PCD_EP_ISR_Handler+0x4b4>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	781a      	ldrb	r2, [r3, #0]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	0011      	movs	r1, r2
 80019cc:	0018      	movs	r0, r3
 80019ce:	f00c fd2e 	bl	800e42e <HAL_PCD_DataOutStageCallback>
 80019d2:	e008      	b.n	80019e6 <PCD_EP_ISR_Handler+0x4c6>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	7819      	ldrb	r1, [r3, #0]
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	695a      	ldr	r2, [r3, #20]
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	699b      	ldr	r3, [r3, #24]
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f7ff fc49 	bl	8001278 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80019e6:	2312      	movs	r3, #18
 80019e8:	18fb      	adds	r3, r7, r3
 80019ea:	881b      	ldrh	r3, [r3, #0]
 80019ec:	2280      	movs	r2, #128	; 0x80
 80019ee:	4013      	ands	r3, r2
 80019f0:	d04f      	beq.n	8001a92 <PCD_EP_ISR_Handler+0x572>
      {
        ep = &hpcd->IN_ep[epindex];
 80019f2:	2115      	movs	r1, #21
 80019f4:	187b      	adds	r3, r7, r1
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	015b      	lsls	r3, r3, #5
 80019fa:	3328      	adds	r3, #40	; 0x28
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	18d3      	adds	r3, r2, r3
 8001a00:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	001a      	movs	r2, r3
 8001a08:	187b      	adds	r3, r7, r1
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	18d3      	adds	r3, r2, r3
 8001a10:	881b      	ldrh	r3, [r3, #0]
 8001a12:	b29b      	uxth	r3, r3
 8001a14:	4a2a      	ldr	r2, [pc, #168]	; (8001ac0 <PCD_EP_ISR_Handler+0x5a0>)
 8001a16:	4013      	ands	r3, r2
 8001a18:	b29c      	uxth	r4, r3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	001a      	movs	r2, r3
 8001a20:	187b      	adds	r3, r7, r1
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	18d3      	adds	r3, r2, r3
 8001a28:	4a26      	ldr	r2, [pc, #152]	; (8001ac4 <PCD_EP_ISR_Handler+0x5a4>)
 8001a2a:	4322      	orrs	r2, r4
 8001a2c:	b292      	uxth	r2, r2
 8001a2e:	801a      	strh	r2, [r3, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2250      	movs	r2, #80	; 0x50
 8001a36:	5a9b      	ldrh	r3, [r3, r2]
 8001a38:	b29b      	uxth	r3, r3
 8001a3a:	001a      	movs	r2, r3
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	00db      	lsls	r3, r3, #3
 8001a42:	18d2      	adds	r2, r2, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	18d3      	adds	r3, r2, r3
 8001a4a:	4a19      	ldr	r2, [pc, #100]	; (8001ab0 <PCD_EP_ISR_Handler+0x590>)
 8001a4c:	4694      	mov	ip, r2
 8001a4e:	4463      	add	r3, ip
 8001a50:	881b      	ldrh	r3, [r3, #0]
 8001a52:	059b      	lsls	r3, r3, #22
 8001a54:	0d9a      	lsrs	r2, r3, #22
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	695a      	ldr	r2, [r3, #20]
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	69db      	ldr	r3, [r3, #28]
 8001a62:	18d2      	adds	r2, r2, r3
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	699b      	ldr	r3, [r3, #24]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d107      	bne.n	8001a80 <PCD_EP_ISR_Handler+0x560>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	781a      	ldrb	r2, [r3, #0]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	0011      	movs	r1, r2
 8001a78:	0018      	movs	r0, r3
 8001a7a:	f00c fcf5 	bl	800e468 <HAL_PCD_DataInStageCallback>
 8001a7e:	e008      	b.n	8001a92 <PCD_EP_ISR_Handler+0x572>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	7819      	ldrb	r1, [r3, #0]
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	695a      	ldr	r2, [r3, #20]
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	699b      	ldr	r3, [r3, #24]
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f7ff fc49 	bl	8001324 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	2244      	movs	r2, #68	; 0x44
 8001a98:	5a9b      	ldrh	r3, [r3, r2]
 8001a9a:	b29b      	uxth	r3, r3
 8001a9c:	b21b      	sxth	r3, r3
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	da00      	bge.n	8001aa4 <PCD_EP_ISR_Handler+0x584>
 8001aa2:	e542      	b.n	800152a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	0018      	movs	r0, r3
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	b009      	add	sp, #36	; 0x24
 8001aac:	bd90      	pop	{r4, r7, pc}
 8001aae:	46c0      	nop			; (mov r8, r8)
 8001ab0:	00000402 	.word	0x00000402
 8001ab4:	00000406 	.word	0x00000406
 8001ab8:	ffff8f8f 	.word	0xffff8f8f
 8001abc:	ffff80c0 	.word	0xffff80c0
 8001ac0:	ffff8f0f 	.word	0xffff8f0f
 8001ac4:	ffff8000 	.word	0xffff8000

08001ac8 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8001ac8:	b590      	push	{r4, r7, lr}
 8001aca:	b087      	sub	sp, #28
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	60f8      	str	r0, [r7, #12]
 8001ad0:	0008      	movs	r0, r1
 8001ad2:	0011      	movs	r1, r2
 8001ad4:	607b      	str	r3, [r7, #4]
 8001ad6:	240a      	movs	r4, #10
 8001ad8:	193b      	adds	r3, r7, r4
 8001ada:	1c02      	adds	r2, r0, #0
 8001adc:	801a      	strh	r2, [r3, #0]
 8001ade:	2308      	movs	r3, #8
 8001ae0:	18fb      	adds	r3, r7, r3
 8001ae2:	1c0a      	adds	r2, r1, #0
 8001ae4:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8001ae6:	193b      	adds	r3, r7, r4
 8001ae8:	881b      	ldrh	r3, [r3, #0]
 8001aea:	2280      	movs	r2, #128	; 0x80
 8001aec:	4013      	ands	r3, r2
 8001aee:	b29b      	uxth	r3, r3
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d00a      	beq.n	8001b0a <HAL_PCDEx_PMAConfig+0x42>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001af4:	230a      	movs	r3, #10
 8001af6:	18fb      	adds	r3, r7, r3
 8001af8:	881b      	ldrh	r3, [r3, #0]
 8001afa:	2207      	movs	r2, #7
 8001afc:	4013      	ands	r3, r2
 8001afe:	015b      	lsls	r3, r3, #5
 8001b00:	3328      	adds	r3, #40	; 0x28
 8001b02:	68fa      	ldr	r2, [r7, #12]
 8001b04:	18d3      	adds	r3, r2, r3
 8001b06:	617b      	str	r3, [r7, #20]
 8001b08:	e008      	b.n	8001b1c <HAL_PCDEx_PMAConfig+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001b0a:	230a      	movs	r3, #10
 8001b0c:	18fb      	adds	r3, r7, r3
 8001b0e:	881b      	ldrh	r3, [r3, #0]
 8001b10:	015b      	lsls	r3, r3, #5
 8001b12:	3329      	adds	r3, #41	; 0x29
 8001b14:	33ff      	adds	r3, #255	; 0xff
 8001b16:	68fa      	ldr	r2, [r7, #12]
 8001b18:	18d3      	adds	r3, r2, r3
 8001b1a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8001b1c:	2308      	movs	r3, #8
 8001b1e:	18fb      	adds	r3, r7, r3
 8001b20:	881b      	ldrh	r3, [r3, #0]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d107      	bne.n	8001b36 <HAL_PCDEx_PMAConfig+0x6e>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	b29a      	uxth	r2, r3
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	80da      	strh	r2, [r3, #6]
 8001b34:	e00b      	b.n	8001b4e <HAL_PCDEx_PMAConfig+0x86>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	2201      	movs	r2, #1
 8001b3a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	b29a      	uxth	r2, r3
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	0c1b      	lsrs	r3, r3, #16
 8001b48:	b29a      	uxth	r2, r3
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8001b4e:	2300      	movs	r3, #0
}
 8001b50:	0018      	movs	r0, r3
 8001b52:	46bd      	mov	sp, r7
 8001b54:	b007      	add	sp, #28
 8001b56:	bd90      	pop	{r4, r7, pc}

08001b58 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	239a      	movs	r3, #154	; 0x9a
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	2101      	movs	r1, #1
 8001b6e:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8001b70:	687a      	ldr	r2, [r7, #4]
 8001b72:	2398      	movs	r3, #152	; 0x98
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	2100      	movs	r1, #0
 8001b78:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	2254      	movs	r2, #84	; 0x54
 8001b7e:	5a9b      	ldrh	r3, [r3, r2]
 8001b80:	b29b      	uxth	r3, r3
 8001b82:	2201      	movs	r2, #1
 8001b84:	4313      	orrs	r3, r2
 8001b86:	b299      	uxth	r1, r3
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	2254      	movs	r2, #84	; 0x54
 8001b8c:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	2254      	movs	r2, #84	; 0x54
 8001b92:	5a9b      	ldrh	r3, [r3, r2]
 8001b94:	b29b      	uxth	r3, r3
 8001b96:	2202      	movs	r2, #2
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	b299      	uxth	r1, r3
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	2254      	movs	r2, #84	; 0x54
 8001ba0:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8001ba2:	2300      	movs	r3, #0
}
 8001ba4:	0018      	movs	r0, r3
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	b004      	add	sp, #16
 8001baa:	bd80      	pop	{r7, pc}

08001bac <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	000a      	movs	r2, r1
 8001bb6:	1cfb      	adds	r3, r7, #3
 8001bb8:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8001bba:	46c0      	nop			; (mov r8, r8)
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	b002      	add	sp, #8
 8001bc0:	bd80      	pop	{r7, pc}
	...

08001bc4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b088      	sub	sp, #32
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d102      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	f000 fb76 	bl	80022c4 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	2201      	movs	r2, #1
 8001bde:	4013      	ands	r3, r2
 8001be0:	d100      	bne.n	8001be4 <HAL_RCC_OscConfig+0x20>
 8001be2:	e08e      	b.n	8001d02 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001be4:	4bc5      	ldr	r3, [pc, #788]	; (8001efc <HAL_RCC_OscConfig+0x338>)
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	220c      	movs	r2, #12
 8001bea:	4013      	ands	r3, r2
 8001bec:	2b04      	cmp	r3, #4
 8001bee:	d00e      	beq.n	8001c0e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001bf0:	4bc2      	ldr	r3, [pc, #776]	; (8001efc <HAL_RCC_OscConfig+0x338>)
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	220c      	movs	r2, #12
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	2b08      	cmp	r3, #8
 8001bfa:	d117      	bne.n	8001c2c <HAL_RCC_OscConfig+0x68>
 8001bfc:	4bbf      	ldr	r3, [pc, #764]	; (8001efc <HAL_RCC_OscConfig+0x338>)
 8001bfe:	685a      	ldr	r2, [r3, #4]
 8001c00:	23c0      	movs	r3, #192	; 0xc0
 8001c02:	025b      	lsls	r3, r3, #9
 8001c04:	401a      	ands	r2, r3
 8001c06:	2380      	movs	r3, #128	; 0x80
 8001c08:	025b      	lsls	r3, r3, #9
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d10e      	bne.n	8001c2c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c0e:	4bbb      	ldr	r3, [pc, #748]	; (8001efc <HAL_RCC_OscConfig+0x338>)
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	2380      	movs	r3, #128	; 0x80
 8001c14:	029b      	lsls	r3, r3, #10
 8001c16:	4013      	ands	r3, r2
 8001c18:	d100      	bne.n	8001c1c <HAL_RCC_OscConfig+0x58>
 8001c1a:	e071      	b.n	8001d00 <HAL_RCC_OscConfig+0x13c>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d000      	beq.n	8001c26 <HAL_RCC_OscConfig+0x62>
 8001c24:	e06c      	b.n	8001d00 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	f000 fb4c 	bl	80022c4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d107      	bne.n	8001c44 <HAL_RCC_OscConfig+0x80>
 8001c34:	4bb1      	ldr	r3, [pc, #708]	; (8001efc <HAL_RCC_OscConfig+0x338>)
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	4bb0      	ldr	r3, [pc, #704]	; (8001efc <HAL_RCC_OscConfig+0x338>)
 8001c3a:	2180      	movs	r1, #128	; 0x80
 8001c3c:	0249      	lsls	r1, r1, #9
 8001c3e:	430a      	orrs	r2, r1
 8001c40:	601a      	str	r2, [r3, #0]
 8001c42:	e02f      	b.n	8001ca4 <HAL_RCC_OscConfig+0xe0>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d10c      	bne.n	8001c66 <HAL_RCC_OscConfig+0xa2>
 8001c4c:	4bab      	ldr	r3, [pc, #684]	; (8001efc <HAL_RCC_OscConfig+0x338>)
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	4baa      	ldr	r3, [pc, #680]	; (8001efc <HAL_RCC_OscConfig+0x338>)
 8001c52:	49ab      	ldr	r1, [pc, #684]	; (8001f00 <HAL_RCC_OscConfig+0x33c>)
 8001c54:	400a      	ands	r2, r1
 8001c56:	601a      	str	r2, [r3, #0]
 8001c58:	4ba8      	ldr	r3, [pc, #672]	; (8001efc <HAL_RCC_OscConfig+0x338>)
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	4ba7      	ldr	r3, [pc, #668]	; (8001efc <HAL_RCC_OscConfig+0x338>)
 8001c5e:	49a9      	ldr	r1, [pc, #676]	; (8001f04 <HAL_RCC_OscConfig+0x340>)
 8001c60:	400a      	ands	r2, r1
 8001c62:	601a      	str	r2, [r3, #0]
 8001c64:	e01e      	b.n	8001ca4 <HAL_RCC_OscConfig+0xe0>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	2b05      	cmp	r3, #5
 8001c6c:	d10e      	bne.n	8001c8c <HAL_RCC_OscConfig+0xc8>
 8001c6e:	4ba3      	ldr	r3, [pc, #652]	; (8001efc <HAL_RCC_OscConfig+0x338>)
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	4ba2      	ldr	r3, [pc, #648]	; (8001efc <HAL_RCC_OscConfig+0x338>)
 8001c74:	2180      	movs	r1, #128	; 0x80
 8001c76:	02c9      	lsls	r1, r1, #11
 8001c78:	430a      	orrs	r2, r1
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	4b9f      	ldr	r3, [pc, #636]	; (8001efc <HAL_RCC_OscConfig+0x338>)
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	4b9e      	ldr	r3, [pc, #632]	; (8001efc <HAL_RCC_OscConfig+0x338>)
 8001c82:	2180      	movs	r1, #128	; 0x80
 8001c84:	0249      	lsls	r1, r1, #9
 8001c86:	430a      	orrs	r2, r1
 8001c88:	601a      	str	r2, [r3, #0]
 8001c8a:	e00b      	b.n	8001ca4 <HAL_RCC_OscConfig+0xe0>
 8001c8c:	4b9b      	ldr	r3, [pc, #620]	; (8001efc <HAL_RCC_OscConfig+0x338>)
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	4b9a      	ldr	r3, [pc, #616]	; (8001efc <HAL_RCC_OscConfig+0x338>)
 8001c92:	499b      	ldr	r1, [pc, #620]	; (8001f00 <HAL_RCC_OscConfig+0x33c>)
 8001c94:	400a      	ands	r2, r1
 8001c96:	601a      	str	r2, [r3, #0]
 8001c98:	4b98      	ldr	r3, [pc, #608]	; (8001efc <HAL_RCC_OscConfig+0x338>)
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	4b97      	ldr	r3, [pc, #604]	; (8001efc <HAL_RCC_OscConfig+0x338>)
 8001c9e:	4999      	ldr	r1, [pc, #612]	; (8001f04 <HAL_RCC_OscConfig+0x340>)
 8001ca0:	400a      	ands	r2, r1
 8001ca2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d014      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cac:	f7fe fd0a 	bl	80006c4 <HAL_GetTick>
 8001cb0:	0003      	movs	r3, r0
 8001cb2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cb4:	e008      	b.n	8001cc8 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cb6:	f7fe fd05 	bl	80006c4 <HAL_GetTick>
 8001cba:	0002      	movs	r2, r0
 8001cbc:	69bb      	ldr	r3, [r7, #24]
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	2b64      	cmp	r3, #100	; 0x64
 8001cc2:	d901      	bls.n	8001cc8 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	e2fd      	b.n	80022c4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cc8:	4b8c      	ldr	r3, [pc, #560]	; (8001efc <HAL_RCC_OscConfig+0x338>)
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	2380      	movs	r3, #128	; 0x80
 8001cce:	029b      	lsls	r3, r3, #10
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	d0f0      	beq.n	8001cb6 <HAL_RCC_OscConfig+0xf2>
 8001cd4:	e015      	b.n	8001d02 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd6:	f7fe fcf5 	bl	80006c4 <HAL_GetTick>
 8001cda:	0003      	movs	r3, r0
 8001cdc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cde:	e008      	b.n	8001cf2 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ce0:	f7fe fcf0 	bl	80006c4 <HAL_GetTick>
 8001ce4:	0002      	movs	r2, r0
 8001ce6:	69bb      	ldr	r3, [r7, #24]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	2b64      	cmp	r3, #100	; 0x64
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e2e8      	b.n	80022c4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cf2:	4b82      	ldr	r3, [pc, #520]	; (8001efc <HAL_RCC_OscConfig+0x338>)
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	2380      	movs	r3, #128	; 0x80
 8001cf8:	029b      	lsls	r3, r3, #10
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	d1f0      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x11c>
 8001cfe:	e000      	b.n	8001d02 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d00:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	2202      	movs	r2, #2
 8001d08:	4013      	ands	r3, r2
 8001d0a:	d100      	bne.n	8001d0e <HAL_RCC_OscConfig+0x14a>
 8001d0c:	e06c      	b.n	8001de8 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001d0e:	4b7b      	ldr	r3, [pc, #492]	; (8001efc <HAL_RCC_OscConfig+0x338>)
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	220c      	movs	r2, #12
 8001d14:	4013      	ands	r3, r2
 8001d16:	d00e      	beq.n	8001d36 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001d18:	4b78      	ldr	r3, [pc, #480]	; (8001efc <HAL_RCC_OscConfig+0x338>)
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	220c      	movs	r2, #12
 8001d1e:	4013      	ands	r3, r2
 8001d20:	2b08      	cmp	r3, #8
 8001d22:	d11f      	bne.n	8001d64 <HAL_RCC_OscConfig+0x1a0>
 8001d24:	4b75      	ldr	r3, [pc, #468]	; (8001efc <HAL_RCC_OscConfig+0x338>)
 8001d26:	685a      	ldr	r2, [r3, #4]
 8001d28:	23c0      	movs	r3, #192	; 0xc0
 8001d2a:	025b      	lsls	r3, r3, #9
 8001d2c:	401a      	ands	r2, r3
 8001d2e:	2380      	movs	r3, #128	; 0x80
 8001d30:	021b      	lsls	r3, r3, #8
 8001d32:	429a      	cmp	r2, r3
 8001d34:	d116      	bne.n	8001d64 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d36:	4b71      	ldr	r3, [pc, #452]	; (8001efc <HAL_RCC_OscConfig+0x338>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	2202      	movs	r2, #2
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	d005      	beq.n	8001d4c <HAL_RCC_OscConfig+0x188>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d001      	beq.n	8001d4c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e2bb      	b.n	80022c4 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d4c:	4b6b      	ldr	r3, [pc, #428]	; (8001efc <HAL_RCC_OscConfig+0x338>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	22f8      	movs	r2, #248	; 0xf8
 8001d52:	4393      	bics	r3, r2
 8001d54:	0019      	movs	r1, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	691b      	ldr	r3, [r3, #16]
 8001d5a:	00da      	lsls	r2, r3, #3
 8001d5c:	4b67      	ldr	r3, [pc, #412]	; (8001efc <HAL_RCC_OscConfig+0x338>)
 8001d5e:	430a      	orrs	r2, r1
 8001d60:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d62:	e041      	b.n	8001de8 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d024      	beq.n	8001db6 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d6c:	4b63      	ldr	r3, [pc, #396]	; (8001efc <HAL_RCC_OscConfig+0x338>)
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	4b62      	ldr	r3, [pc, #392]	; (8001efc <HAL_RCC_OscConfig+0x338>)
 8001d72:	2101      	movs	r1, #1
 8001d74:	430a      	orrs	r2, r1
 8001d76:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d78:	f7fe fca4 	bl	80006c4 <HAL_GetTick>
 8001d7c:	0003      	movs	r3, r0
 8001d7e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d80:	e008      	b.n	8001d94 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d82:	f7fe fc9f 	bl	80006c4 <HAL_GetTick>
 8001d86:	0002      	movs	r2, r0
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	d901      	bls.n	8001d94 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001d90:	2303      	movs	r3, #3
 8001d92:	e297      	b.n	80022c4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d94:	4b59      	ldr	r3, [pc, #356]	; (8001efc <HAL_RCC_OscConfig+0x338>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	2202      	movs	r2, #2
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	d0f1      	beq.n	8001d82 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d9e:	4b57      	ldr	r3, [pc, #348]	; (8001efc <HAL_RCC_OscConfig+0x338>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	22f8      	movs	r2, #248	; 0xf8
 8001da4:	4393      	bics	r3, r2
 8001da6:	0019      	movs	r1, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	691b      	ldr	r3, [r3, #16]
 8001dac:	00da      	lsls	r2, r3, #3
 8001dae:	4b53      	ldr	r3, [pc, #332]	; (8001efc <HAL_RCC_OscConfig+0x338>)
 8001db0:	430a      	orrs	r2, r1
 8001db2:	601a      	str	r2, [r3, #0]
 8001db4:	e018      	b.n	8001de8 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001db6:	4b51      	ldr	r3, [pc, #324]	; (8001efc <HAL_RCC_OscConfig+0x338>)
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	4b50      	ldr	r3, [pc, #320]	; (8001efc <HAL_RCC_OscConfig+0x338>)
 8001dbc:	2101      	movs	r1, #1
 8001dbe:	438a      	bics	r2, r1
 8001dc0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc2:	f7fe fc7f 	bl	80006c4 <HAL_GetTick>
 8001dc6:	0003      	movs	r3, r0
 8001dc8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dca:	e008      	b.n	8001dde <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dcc:	f7fe fc7a 	bl	80006c4 <HAL_GetTick>
 8001dd0:	0002      	movs	r2, r0
 8001dd2:	69bb      	ldr	r3, [r7, #24]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	d901      	bls.n	8001dde <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e272      	b.n	80022c4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dde:	4b47      	ldr	r3, [pc, #284]	; (8001efc <HAL_RCC_OscConfig+0x338>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	2202      	movs	r2, #2
 8001de4:	4013      	ands	r3, r2
 8001de6:	d1f1      	bne.n	8001dcc <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2208      	movs	r2, #8
 8001dee:	4013      	ands	r3, r2
 8001df0:	d036      	beq.n	8001e60 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	69db      	ldr	r3, [r3, #28]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d019      	beq.n	8001e2e <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dfa:	4b40      	ldr	r3, [pc, #256]	; (8001efc <HAL_RCC_OscConfig+0x338>)
 8001dfc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001dfe:	4b3f      	ldr	r3, [pc, #252]	; (8001efc <HAL_RCC_OscConfig+0x338>)
 8001e00:	2101      	movs	r1, #1
 8001e02:	430a      	orrs	r2, r1
 8001e04:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e06:	f7fe fc5d 	bl	80006c4 <HAL_GetTick>
 8001e0a:	0003      	movs	r3, r0
 8001e0c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e0e:	e008      	b.n	8001e22 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e10:	f7fe fc58 	bl	80006c4 <HAL_GetTick>
 8001e14:	0002      	movs	r2, r0
 8001e16:	69bb      	ldr	r3, [r7, #24]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e250      	b.n	80022c4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e22:	4b36      	ldr	r3, [pc, #216]	; (8001efc <HAL_RCC_OscConfig+0x338>)
 8001e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e26:	2202      	movs	r2, #2
 8001e28:	4013      	ands	r3, r2
 8001e2a:	d0f1      	beq.n	8001e10 <HAL_RCC_OscConfig+0x24c>
 8001e2c:	e018      	b.n	8001e60 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e2e:	4b33      	ldr	r3, [pc, #204]	; (8001efc <HAL_RCC_OscConfig+0x338>)
 8001e30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e32:	4b32      	ldr	r3, [pc, #200]	; (8001efc <HAL_RCC_OscConfig+0x338>)
 8001e34:	2101      	movs	r1, #1
 8001e36:	438a      	bics	r2, r1
 8001e38:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e3a:	f7fe fc43 	bl	80006c4 <HAL_GetTick>
 8001e3e:	0003      	movs	r3, r0
 8001e40:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e42:	e008      	b.n	8001e56 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e44:	f7fe fc3e 	bl	80006c4 <HAL_GetTick>
 8001e48:	0002      	movs	r2, r0
 8001e4a:	69bb      	ldr	r3, [r7, #24]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d901      	bls.n	8001e56 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e236      	b.n	80022c4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e56:	4b29      	ldr	r3, [pc, #164]	; (8001efc <HAL_RCC_OscConfig+0x338>)
 8001e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5a:	2202      	movs	r2, #2
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	d1f1      	bne.n	8001e44 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	2204      	movs	r2, #4
 8001e66:	4013      	ands	r3, r2
 8001e68:	d100      	bne.n	8001e6c <HAL_RCC_OscConfig+0x2a8>
 8001e6a:	e0b5      	b.n	8001fd8 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e6c:	231f      	movs	r3, #31
 8001e6e:	18fb      	adds	r3, r7, r3
 8001e70:	2200      	movs	r2, #0
 8001e72:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e74:	4b21      	ldr	r3, [pc, #132]	; (8001efc <HAL_RCC_OscConfig+0x338>)
 8001e76:	69da      	ldr	r2, [r3, #28]
 8001e78:	2380      	movs	r3, #128	; 0x80
 8001e7a:	055b      	lsls	r3, r3, #21
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	d111      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e80:	4b1e      	ldr	r3, [pc, #120]	; (8001efc <HAL_RCC_OscConfig+0x338>)
 8001e82:	69da      	ldr	r2, [r3, #28]
 8001e84:	4b1d      	ldr	r3, [pc, #116]	; (8001efc <HAL_RCC_OscConfig+0x338>)
 8001e86:	2180      	movs	r1, #128	; 0x80
 8001e88:	0549      	lsls	r1, r1, #21
 8001e8a:	430a      	orrs	r2, r1
 8001e8c:	61da      	str	r2, [r3, #28]
 8001e8e:	4b1b      	ldr	r3, [pc, #108]	; (8001efc <HAL_RCC_OscConfig+0x338>)
 8001e90:	69da      	ldr	r2, [r3, #28]
 8001e92:	2380      	movs	r3, #128	; 0x80
 8001e94:	055b      	lsls	r3, r3, #21
 8001e96:	4013      	ands	r3, r2
 8001e98:	60fb      	str	r3, [r7, #12]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001e9c:	231f      	movs	r3, #31
 8001e9e:	18fb      	adds	r3, r7, r3
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ea4:	4b18      	ldr	r3, [pc, #96]	; (8001f08 <HAL_RCC_OscConfig+0x344>)
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	2380      	movs	r3, #128	; 0x80
 8001eaa:	005b      	lsls	r3, r3, #1
 8001eac:	4013      	ands	r3, r2
 8001eae:	d11a      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001eb0:	4b15      	ldr	r3, [pc, #84]	; (8001f08 <HAL_RCC_OscConfig+0x344>)
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	4b14      	ldr	r3, [pc, #80]	; (8001f08 <HAL_RCC_OscConfig+0x344>)
 8001eb6:	2180      	movs	r1, #128	; 0x80
 8001eb8:	0049      	lsls	r1, r1, #1
 8001eba:	430a      	orrs	r2, r1
 8001ebc:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ebe:	f7fe fc01 	bl	80006c4 <HAL_GetTick>
 8001ec2:	0003      	movs	r3, r0
 8001ec4:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ec6:	e008      	b.n	8001eda <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ec8:	f7fe fbfc 	bl	80006c4 <HAL_GetTick>
 8001ecc:	0002      	movs	r2, r0
 8001ece:	69bb      	ldr	r3, [r7, #24]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	2b64      	cmp	r3, #100	; 0x64
 8001ed4:	d901      	bls.n	8001eda <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e1f4      	b.n	80022c4 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eda:	4b0b      	ldr	r3, [pc, #44]	; (8001f08 <HAL_RCC_OscConfig+0x344>)
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	2380      	movs	r3, #128	; 0x80
 8001ee0:	005b      	lsls	r3, r3, #1
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	d0f0      	beq.n	8001ec8 <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d10e      	bne.n	8001f0c <HAL_RCC_OscConfig+0x348>
 8001eee:	4b03      	ldr	r3, [pc, #12]	; (8001efc <HAL_RCC_OscConfig+0x338>)
 8001ef0:	6a1a      	ldr	r2, [r3, #32]
 8001ef2:	4b02      	ldr	r3, [pc, #8]	; (8001efc <HAL_RCC_OscConfig+0x338>)
 8001ef4:	2101      	movs	r1, #1
 8001ef6:	430a      	orrs	r2, r1
 8001ef8:	621a      	str	r2, [r3, #32]
 8001efa:	e035      	b.n	8001f68 <HAL_RCC_OscConfig+0x3a4>
 8001efc:	40021000 	.word	0x40021000
 8001f00:	fffeffff 	.word	0xfffeffff
 8001f04:	fffbffff 	.word	0xfffbffff
 8001f08:	40007000 	.word	0x40007000
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d10c      	bne.n	8001f2e <HAL_RCC_OscConfig+0x36a>
 8001f14:	4bca      	ldr	r3, [pc, #808]	; (8002240 <HAL_RCC_OscConfig+0x67c>)
 8001f16:	6a1a      	ldr	r2, [r3, #32]
 8001f18:	4bc9      	ldr	r3, [pc, #804]	; (8002240 <HAL_RCC_OscConfig+0x67c>)
 8001f1a:	2101      	movs	r1, #1
 8001f1c:	438a      	bics	r2, r1
 8001f1e:	621a      	str	r2, [r3, #32]
 8001f20:	4bc7      	ldr	r3, [pc, #796]	; (8002240 <HAL_RCC_OscConfig+0x67c>)
 8001f22:	6a1a      	ldr	r2, [r3, #32]
 8001f24:	4bc6      	ldr	r3, [pc, #792]	; (8002240 <HAL_RCC_OscConfig+0x67c>)
 8001f26:	2104      	movs	r1, #4
 8001f28:	438a      	bics	r2, r1
 8001f2a:	621a      	str	r2, [r3, #32]
 8001f2c:	e01c      	b.n	8001f68 <HAL_RCC_OscConfig+0x3a4>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	2b05      	cmp	r3, #5
 8001f34:	d10c      	bne.n	8001f50 <HAL_RCC_OscConfig+0x38c>
 8001f36:	4bc2      	ldr	r3, [pc, #776]	; (8002240 <HAL_RCC_OscConfig+0x67c>)
 8001f38:	6a1a      	ldr	r2, [r3, #32]
 8001f3a:	4bc1      	ldr	r3, [pc, #772]	; (8002240 <HAL_RCC_OscConfig+0x67c>)
 8001f3c:	2104      	movs	r1, #4
 8001f3e:	430a      	orrs	r2, r1
 8001f40:	621a      	str	r2, [r3, #32]
 8001f42:	4bbf      	ldr	r3, [pc, #764]	; (8002240 <HAL_RCC_OscConfig+0x67c>)
 8001f44:	6a1a      	ldr	r2, [r3, #32]
 8001f46:	4bbe      	ldr	r3, [pc, #760]	; (8002240 <HAL_RCC_OscConfig+0x67c>)
 8001f48:	2101      	movs	r1, #1
 8001f4a:	430a      	orrs	r2, r1
 8001f4c:	621a      	str	r2, [r3, #32]
 8001f4e:	e00b      	b.n	8001f68 <HAL_RCC_OscConfig+0x3a4>
 8001f50:	4bbb      	ldr	r3, [pc, #748]	; (8002240 <HAL_RCC_OscConfig+0x67c>)
 8001f52:	6a1a      	ldr	r2, [r3, #32]
 8001f54:	4bba      	ldr	r3, [pc, #744]	; (8002240 <HAL_RCC_OscConfig+0x67c>)
 8001f56:	2101      	movs	r1, #1
 8001f58:	438a      	bics	r2, r1
 8001f5a:	621a      	str	r2, [r3, #32]
 8001f5c:	4bb8      	ldr	r3, [pc, #736]	; (8002240 <HAL_RCC_OscConfig+0x67c>)
 8001f5e:	6a1a      	ldr	r2, [r3, #32]
 8001f60:	4bb7      	ldr	r3, [pc, #732]	; (8002240 <HAL_RCC_OscConfig+0x67c>)
 8001f62:	2104      	movs	r1, #4
 8001f64:	438a      	bics	r2, r1
 8001f66:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d014      	beq.n	8001f9a <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f70:	f7fe fba8 	bl	80006c4 <HAL_GetTick>
 8001f74:	0003      	movs	r3, r0
 8001f76:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f78:	e009      	b.n	8001f8e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f7a:	f7fe fba3 	bl	80006c4 <HAL_GetTick>
 8001f7e:	0002      	movs	r2, r0
 8001f80:	69bb      	ldr	r3, [r7, #24]
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	4aaf      	ldr	r2, [pc, #700]	; (8002244 <HAL_RCC_OscConfig+0x680>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d901      	bls.n	8001f8e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	e19a      	b.n	80022c4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f8e:	4bac      	ldr	r3, [pc, #688]	; (8002240 <HAL_RCC_OscConfig+0x67c>)
 8001f90:	6a1b      	ldr	r3, [r3, #32]
 8001f92:	2202      	movs	r2, #2
 8001f94:	4013      	ands	r3, r2
 8001f96:	d0f0      	beq.n	8001f7a <HAL_RCC_OscConfig+0x3b6>
 8001f98:	e013      	b.n	8001fc2 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f9a:	f7fe fb93 	bl	80006c4 <HAL_GetTick>
 8001f9e:	0003      	movs	r3, r0
 8001fa0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fa2:	e009      	b.n	8001fb8 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fa4:	f7fe fb8e 	bl	80006c4 <HAL_GetTick>
 8001fa8:	0002      	movs	r2, r0
 8001faa:	69bb      	ldr	r3, [r7, #24]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	4aa5      	ldr	r2, [pc, #660]	; (8002244 <HAL_RCC_OscConfig+0x680>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d901      	bls.n	8001fb8 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	e185      	b.n	80022c4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fb8:	4ba1      	ldr	r3, [pc, #644]	; (8002240 <HAL_RCC_OscConfig+0x67c>)
 8001fba:	6a1b      	ldr	r3, [r3, #32]
 8001fbc:	2202      	movs	r2, #2
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	d1f0      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001fc2:	231f      	movs	r3, #31
 8001fc4:	18fb      	adds	r3, r7, r3
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d105      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fcc:	4b9c      	ldr	r3, [pc, #624]	; (8002240 <HAL_RCC_OscConfig+0x67c>)
 8001fce:	69da      	ldr	r2, [r3, #28]
 8001fd0:	4b9b      	ldr	r3, [pc, #620]	; (8002240 <HAL_RCC_OscConfig+0x67c>)
 8001fd2:	499d      	ldr	r1, [pc, #628]	; (8002248 <HAL_RCC_OscConfig+0x684>)
 8001fd4:	400a      	ands	r2, r1
 8001fd6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	2210      	movs	r2, #16
 8001fde:	4013      	ands	r3, r2
 8001fe0:	d063      	beq.n	80020aa <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	695b      	ldr	r3, [r3, #20]
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d12a      	bne.n	8002040 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001fea:	4b95      	ldr	r3, [pc, #596]	; (8002240 <HAL_RCC_OscConfig+0x67c>)
 8001fec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fee:	4b94      	ldr	r3, [pc, #592]	; (8002240 <HAL_RCC_OscConfig+0x67c>)
 8001ff0:	2104      	movs	r1, #4
 8001ff2:	430a      	orrs	r2, r1
 8001ff4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001ff6:	4b92      	ldr	r3, [pc, #584]	; (8002240 <HAL_RCC_OscConfig+0x67c>)
 8001ff8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ffa:	4b91      	ldr	r3, [pc, #580]	; (8002240 <HAL_RCC_OscConfig+0x67c>)
 8001ffc:	2101      	movs	r1, #1
 8001ffe:	430a      	orrs	r2, r1
 8002000:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002002:	f7fe fb5f 	bl	80006c4 <HAL_GetTick>
 8002006:	0003      	movs	r3, r0
 8002008:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800200a:	e008      	b.n	800201e <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800200c:	f7fe fb5a 	bl	80006c4 <HAL_GetTick>
 8002010:	0002      	movs	r2, r0
 8002012:	69bb      	ldr	r3, [r7, #24]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	2b02      	cmp	r3, #2
 8002018:	d901      	bls.n	800201e <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800201a:	2303      	movs	r3, #3
 800201c:	e152      	b.n	80022c4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800201e:	4b88      	ldr	r3, [pc, #544]	; (8002240 <HAL_RCC_OscConfig+0x67c>)
 8002020:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002022:	2202      	movs	r2, #2
 8002024:	4013      	ands	r3, r2
 8002026:	d0f1      	beq.n	800200c <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002028:	4b85      	ldr	r3, [pc, #532]	; (8002240 <HAL_RCC_OscConfig+0x67c>)
 800202a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800202c:	22f8      	movs	r2, #248	; 0xf8
 800202e:	4393      	bics	r3, r2
 8002030:	0019      	movs	r1, r3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	699b      	ldr	r3, [r3, #24]
 8002036:	00da      	lsls	r2, r3, #3
 8002038:	4b81      	ldr	r3, [pc, #516]	; (8002240 <HAL_RCC_OscConfig+0x67c>)
 800203a:	430a      	orrs	r2, r1
 800203c:	635a      	str	r2, [r3, #52]	; 0x34
 800203e:	e034      	b.n	80020aa <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	695b      	ldr	r3, [r3, #20]
 8002044:	3305      	adds	r3, #5
 8002046:	d111      	bne.n	800206c <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002048:	4b7d      	ldr	r3, [pc, #500]	; (8002240 <HAL_RCC_OscConfig+0x67c>)
 800204a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800204c:	4b7c      	ldr	r3, [pc, #496]	; (8002240 <HAL_RCC_OscConfig+0x67c>)
 800204e:	2104      	movs	r1, #4
 8002050:	438a      	bics	r2, r1
 8002052:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002054:	4b7a      	ldr	r3, [pc, #488]	; (8002240 <HAL_RCC_OscConfig+0x67c>)
 8002056:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002058:	22f8      	movs	r2, #248	; 0xf8
 800205a:	4393      	bics	r3, r2
 800205c:	0019      	movs	r1, r3
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	699b      	ldr	r3, [r3, #24]
 8002062:	00da      	lsls	r2, r3, #3
 8002064:	4b76      	ldr	r3, [pc, #472]	; (8002240 <HAL_RCC_OscConfig+0x67c>)
 8002066:	430a      	orrs	r2, r1
 8002068:	635a      	str	r2, [r3, #52]	; 0x34
 800206a:	e01e      	b.n	80020aa <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800206c:	4b74      	ldr	r3, [pc, #464]	; (8002240 <HAL_RCC_OscConfig+0x67c>)
 800206e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002070:	4b73      	ldr	r3, [pc, #460]	; (8002240 <HAL_RCC_OscConfig+0x67c>)
 8002072:	2104      	movs	r1, #4
 8002074:	430a      	orrs	r2, r1
 8002076:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002078:	4b71      	ldr	r3, [pc, #452]	; (8002240 <HAL_RCC_OscConfig+0x67c>)
 800207a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800207c:	4b70      	ldr	r3, [pc, #448]	; (8002240 <HAL_RCC_OscConfig+0x67c>)
 800207e:	2101      	movs	r1, #1
 8002080:	438a      	bics	r2, r1
 8002082:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002084:	f7fe fb1e 	bl	80006c4 <HAL_GetTick>
 8002088:	0003      	movs	r3, r0
 800208a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800208c:	e008      	b.n	80020a0 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800208e:	f7fe fb19 	bl	80006c4 <HAL_GetTick>
 8002092:	0002      	movs	r2, r0
 8002094:	69bb      	ldr	r3, [r7, #24]
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	2b02      	cmp	r3, #2
 800209a:	d901      	bls.n	80020a0 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 800209c:	2303      	movs	r3, #3
 800209e:	e111      	b.n	80022c4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80020a0:	4b67      	ldr	r3, [pc, #412]	; (8002240 <HAL_RCC_OscConfig+0x67c>)
 80020a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020a4:	2202      	movs	r2, #2
 80020a6:	4013      	ands	r3, r2
 80020a8:	d1f1      	bne.n	800208e <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	2220      	movs	r2, #32
 80020b0:	4013      	ands	r3, r2
 80020b2:	d05c      	beq.n	800216e <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80020b4:	4b62      	ldr	r3, [pc, #392]	; (8002240 <HAL_RCC_OscConfig+0x67c>)
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	220c      	movs	r2, #12
 80020ba:	4013      	ands	r3, r2
 80020bc:	2b0c      	cmp	r3, #12
 80020be:	d00e      	beq.n	80020de <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80020c0:	4b5f      	ldr	r3, [pc, #380]	; (8002240 <HAL_RCC_OscConfig+0x67c>)
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	220c      	movs	r2, #12
 80020c6:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80020c8:	2b08      	cmp	r3, #8
 80020ca:	d114      	bne.n	80020f6 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80020cc:	4b5c      	ldr	r3, [pc, #368]	; (8002240 <HAL_RCC_OscConfig+0x67c>)
 80020ce:	685a      	ldr	r2, [r3, #4]
 80020d0:	23c0      	movs	r3, #192	; 0xc0
 80020d2:	025b      	lsls	r3, r3, #9
 80020d4:	401a      	ands	r2, r3
 80020d6:	23c0      	movs	r3, #192	; 0xc0
 80020d8:	025b      	lsls	r3, r3, #9
 80020da:	429a      	cmp	r2, r3
 80020dc:	d10b      	bne.n	80020f6 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80020de:	4b58      	ldr	r3, [pc, #352]	; (8002240 <HAL_RCC_OscConfig+0x67c>)
 80020e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020e2:	2380      	movs	r3, #128	; 0x80
 80020e4:	025b      	lsls	r3, r3, #9
 80020e6:	4013      	ands	r3, r2
 80020e8:	d040      	beq.n	800216c <HAL_RCC_OscConfig+0x5a8>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6a1b      	ldr	r3, [r3, #32]
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d03c      	beq.n	800216c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e0e6      	b.n	80022c4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6a1b      	ldr	r3, [r3, #32]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d01b      	beq.n	8002136 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80020fe:	4b50      	ldr	r3, [pc, #320]	; (8002240 <HAL_RCC_OscConfig+0x67c>)
 8002100:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002102:	4b4f      	ldr	r3, [pc, #316]	; (8002240 <HAL_RCC_OscConfig+0x67c>)
 8002104:	2180      	movs	r1, #128	; 0x80
 8002106:	0249      	lsls	r1, r1, #9
 8002108:	430a      	orrs	r2, r1
 800210a:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800210c:	f7fe fada 	bl	80006c4 <HAL_GetTick>
 8002110:	0003      	movs	r3, r0
 8002112:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002114:	e008      	b.n	8002128 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002116:	f7fe fad5 	bl	80006c4 <HAL_GetTick>
 800211a:	0002      	movs	r2, r0
 800211c:	69bb      	ldr	r3, [r7, #24]
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	2b02      	cmp	r3, #2
 8002122:	d901      	bls.n	8002128 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8002124:	2303      	movs	r3, #3
 8002126:	e0cd      	b.n	80022c4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002128:	4b45      	ldr	r3, [pc, #276]	; (8002240 <HAL_RCC_OscConfig+0x67c>)
 800212a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800212c:	2380      	movs	r3, #128	; 0x80
 800212e:	025b      	lsls	r3, r3, #9
 8002130:	4013      	ands	r3, r2
 8002132:	d0f0      	beq.n	8002116 <HAL_RCC_OscConfig+0x552>
 8002134:	e01b      	b.n	800216e <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002136:	4b42      	ldr	r3, [pc, #264]	; (8002240 <HAL_RCC_OscConfig+0x67c>)
 8002138:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800213a:	4b41      	ldr	r3, [pc, #260]	; (8002240 <HAL_RCC_OscConfig+0x67c>)
 800213c:	4943      	ldr	r1, [pc, #268]	; (800224c <HAL_RCC_OscConfig+0x688>)
 800213e:	400a      	ands	r2, r1
 8002140:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002142:	f7fe fabf 	bl	80006c4 <HAL_GetTick>
 8002146:	0003      	movs	r3, r0
 8002148:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800214a:	e008      	b.n	800215e <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800214c:	f7fe faba 	bl	80006c4 <HAL_GetTick>
 8002150:	0002      	movs	r2, r0
 8002152:	69bb      	ldr	r3, [r7, #24]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	2b02      	cmp	r3, #2
 8002158:	d901      	bls.n	800215e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e0b2      	b.n	80022c4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800215e:	4b38      	ldr	r3, [pc, #224]	; (8002240 <HAL_RCC_OscConfig+0x67c>)
 8002160:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002162:	2380      	movs	r3, #128	; 0x80
 8002164:	025b      	lsls	r3, r3, #9
 8002166:	4013      	ands	r3, r2
 8002168:	d1f0      	bne.n	800214c <HAL_RCC_OscConfig+0x588>
 800216a:	e000      	b.n	800216e <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800216c:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002172:	2b00      	cmp	r3, #0
 8002174:	d100      	bne.n	8002178 <HAL_RCC_OscConfig+0x5b4>
 8002176:	e0a4      	b.n	80022c2 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002178:	4b31      	ldr	r3, [pc, #196]	; (8002240 <HAL_RCC_OscConfig+0x67c>)
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	220c      	movs	r2, #12
 800217e:	4013      	ands	r3, r2
 8002180:	2b08      	cmp	r3, #8
 8002182:	d100      	bne.n	8002186 <HAL_RCC_OscConfig+0x5c2>
 8002184:	e078      	b.n	8002278 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218a:	2b02      	cmp	r3, #2
 800218c:	d14c      	bne.n	8002228 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800218e:	4b2c      	ldr	r3, [pc, #176]	; (8002240 <HAL_RCC_OscConfig+0x67c>)
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	4b2b      	ldr	r3, [pc, #172]	; (8002240 <HAL_RCC_OscConfig+0x67c>)
 8002194:	492e      	ldr	r1, [pc, #184]	; (8002250 <HAL_RCC_OscConfig+0x68c>)
 8002196:	400a      	ands	r2, r1
 8002198:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800219a:	f7fe fa93 	bl	80006c4 <HAL_GetTick>
 800219e:	0003      	movs	r3, r0
 80021a0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021a2:	e008      	b.n	80021b6 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021a4:	f7fe fa8e 	bl	80006c4 <HAL_GetTick>
 80021a8:	0002      	movs	r2, r0
 80021aa:	69bb      	ldr	r3, [r7, #24]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d901      	bls.n	80021b6 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e086      	b.n	80022c4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021b6:	4b22      	ldr	r3, [pc, #136]	; (8002240 <HAL_RCC_OscConfig+0x67c>)
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	2380      	movs	r3, #128	; 0x80
 80021bc:	049b      	lsls	r3, r3, #18
 80021be:	4013      	ands	r3, r2
 80021c0:	d1f0      	bne.n	80021a4 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021c2:	4b1f      	ldr	r3, [pc, #124]	; (8002240 <HAL_RCC_OscConfig+0x67c>)
 80021c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c6:	220f      	movs	r2, #15
 80021c8:	4393      	bics	r3, r2
 80021ca:	0019      	movs	r1, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021d0:	4b1b      	ldr	r3, [pc, #108]	; (8002240 <HAL_RCC_OscConfig+0x67c>)
 80021d2:	430a      	orrs	r2, r1
 80021d4:	62da      	str	r2, [r3, #44]	; 0x2c
 80021d6:	4b1a      	ldr	r3, [pc, #104]	; (8002240 <HAL_RCC_OscConfig+0x67c>)
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	4a1e      	ldr	r2, [pc, #120]	; (8002254 <HAL_RCC_OscConfig+0x690>)
 80021dc:	4013      	ands	r3, r2
 80021de:	0019      	movs	r1, r3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021e8:	431a      	orrs	r2, r3
 80021ea:	4b15      	ldr	r3, [pc, #84]	; (8002240 <HAL_RCC_OscConfig+0x67c>)
 80021ec:	430a      	orrs	r2, r1
 80021ee:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021f0:	4b13      	ldr	r3, [pc, #76]	; (8002240 <HAL_RCC_OscConfig+0x67c>)
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	4b12      	ldr	r3, [pc, #72]	; (8002240 <HAL_RCC_OscConfig+0x67c>)
 80021f6:	2180      	movs	r1, #128	; 0x80
 80021f8:	0449      	lsls	r1, r1, #17
 80021fa:	430a      	orrs	r2, r1
 80021fc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021fe:	f7fe fa61 	bl	80006c4 <HAL_GetTick>
 8002202:	0003      	movs	r3, r0
 8002204:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002206:	e008      	b.n	800221a <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002208:	f7fe fa5c 	bl	80006c4 <HAL_GetTick>
 800220c:	0002      	movs	r2, r0
 800220e:	69bb      	ldr	r3, [r7, #24]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	2b02      	cmp	r3, #2
 8002214:	d901      	bls.n	800221a <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e054      	b.n	80022c4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800221a:	4b09      	ldr	r3, [pc, #36]	; (8002240 <HAL_RCC_OscConfig+0x67c>)
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	2380      	movs	r3, #128	; 0x80
 8002220:	049b      	lsls	r3, r3, #18
 8002222:	4013      	ands	r3, r2
 8002224:	d0f0      	beq.n	8002208 <HAL_RCC_OscConfig+0x644>
 8002226:	e04c      	b.n	80022c2 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002228:	4b05      	ldr	r3, [pc, #20]	; (8002240 <HAL_RCC_OscConfig+0x67c>)
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	4b04      	ldr	r3, [pc, #16]	; (8002240 <HAL_RCC_OscConfig+0x67c>)
 800222e:	4908      	ldr	r1, [pc, #32]	; (8002250 <HAL_RCC_OscConfig+0x68c>)
 8002230:	400a      	ands	r2, r1
 8002232:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002234:	f7fe fa46 	bl	80006c4 <HAL_GetTick>
 8002238:	0003      	movs	r3, r0
 800223a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800223c:	e015      	b.n	800226a <HAL_RCC_OscConfig+0x6a6>
 800223e:	46c0      	nop			; (mov r8, r8)
 8002240:	40021000 	.word	0x40021000
 8002244:	00001388 	.word	0x00001388
 8002248:	efffffff 	.word	0xefffffff
 800224c:	fffeffff 	.word	0xfffeffff
 8002250:	feffffff 	.word	0xfeffffff
 8002254:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002258:	f7fe fa34 	bl	80006c4 <HAL_GetTick>
 800225c:	0002      	movs	r2, r0
 800225e:	69bb      	ldr	r3, [r7, #24]
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	2b02      	cmp	r3, #2
 8002264:	d901      	bls.n	800226a <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	e02c      	b.n	80022c4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800226a:	4b18      	ldr	r3, [pc, #96]	; (80022cc <HAL_RCC_OscConfig+0x708>)
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	2380      	movs	r3, #128	; 0x80
 8002270:	049b      	lsls	r3, r3, #18
 8002272:	4013      	ands	r3, r2
 8002274:	d1f0      	bne.n	8002258 <HAL_RCC_OscConfig+0x694>
 8002276:	e024      	b.n	80022c2 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800227c:	2b01      	cmp	r3, #1
 800227e:	d101      	bne.n	8002284 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e01f      	b.n	80022c4 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002284:	4b11      	ldr	r3, [pc, #68]	; (80022cc <HAL_RCC_OscConfig+0x708>)
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800228a:	4b10      	ldr	r3, [pc, #64]	; (80022cc <HAL_RCC_OscConfig+0x708>)
 800228c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800228e:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002290:	697a      	ldr	r2, [r7, #20]
 8002292:	23c0      	movs	r3, #192	; 0xc0
 8002294:	025b      	lsls	r3, r3, #9
 8002296:	401a      	ands	r2, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800229c:	429a      	cmp	r2, r3
 800229e:	d10e      	bne.n	80022be <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	220f      	movs	r2, #15
 80022a4:	401a      	ands	r2, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d107      	bne.n	80022be <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80022ae:	697a      	ldr	r2, [r7, #20]
 80022b0:	23f0      	movs	r3, #240	; 0xf0
 80022b2:	039b      	lsls	r3, r3, #14
 80022b4:	401a      	ands	r2, r3
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d001      	beq.n	80022c2 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e000      	b.n	80022c4 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80022c2:	2300      	movs	r3, #0
}
 80022c4:	0018      	movs	r0, r3
 80022c6:	46bd      	mov	sp, r7
 80022c8:	b008      	add	sp, #32
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	40021000 	.word	0x40021000

080022d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b084      	sub	sp, #16
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d101      	bne.n	80022e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e0bf      	b.n	8002464 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022e4:	4b61      	ldr	r3, [pc, #388]	; (800246c <HAL_RCC_ClockConfig+0x19c>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	2201      	movs	r2, #1
 80022ea:	4013      	ands	r3, r2
 80022ec:	683a      	ldr	r2, [r7, #0]
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d911      	bls.n	8002316 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022f2:	4b5e      	ldr	r3, [pc, #376]	; (800246c <HAL_RCC_ClockConfig+0x19c>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	2201      	movs	r2, #1
 80022f8:	4393      	bics	r3, r2
 80022fa:	0019      	movs	r1, r3
 80022fc:	4b5b      	ldr	r3, [pc, #364]	; (800246c <HAL_RCC_ClockConfig+0x19c>)
 80022fe:	683a      	ldr	r2, [r7, #0]
 8002300:	430a      	orrs	r2, r1
 8002302:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002304:	4b59      	ldr	r3, [pc, #356]	; (800246c <HAL_RCC_ClockConfig+0x19c>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	2201      	movs	r2, #1
 800230a:	4013      	ands	r3, r2
 800230c:	683a      	ldr	r2, [r7, #0]
 800230e:	429a      	cmp	r2, r3
 8002310:	d001      	beq.n	8002316 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e0a6      	b.n	8002464 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	2202      	movs	r2, #2
 800231c:	4013      	ands	r3, r2
 800231e:	d015      	beq.n	800234c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	2204      	movs	r2, #4
 8002326:	4013      	ands	r3, r2
 8002328:	d006      	beq.n	8002338 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800232a:	4b51      	ldr	r3, [pc, #324]	; (8002470 <HAL_RCC_ClockConfig+0x1a0>)
 800232c:	685a      	ldr	r2, [r3, #4]
 800232e:	4b50      	ldr	r3, [pc, #320]	; (8002470 <HAL_RCC_ClockConfig+0x1a0>)
 8002330:	21e0      	movs	r1, #224	; 0xe0
 8002332:	00c9      	lsls	r1, r1, #3
 8002334:	430a      	orrs	r2, r1
 8002336:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002338:	4b4d      	ldr	r3, [pc, #308]	; (8002470 <HAL_RCC_ClockConfig+0x1a0>)
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	22f0      	movs	r2, #240	; 0xf0
 800233e:	4393      	bics	r3, r2
 8002340:	0019      	movs	r1, r3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	689a      	ldr	r2, [r3, #8]
 8002346:	4b4a      	ldr	r3, [pc, #296]	; (8002470 <HAL_RCC_ClockConfig+0x1a0>)
 8002348:	430a      	orrs	r2, r1
 800234a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2201      	movs	r2, #1
 8002352:	4013      	ands	r3, r2
 8002354:	d04c      	beq.n	80023f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	2b01      	cmp	r3, #1
 800235c:	d107      	bne.n	800236e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800235e:	4b44      	ldr	r3, [pc, #272]	; (8002470 <HAL_RCC_ClockConfig+0x1a0>)
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	2380      	movs	r3, #128	; 0x80
 8002364:	029b      	lsls	r3, r3, #10
 8002366:	4013      	ands	r3, r2
 8002368:	d120      	bne.n	80023ac <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e07a      	b.n	8002464 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	2b02      	cmp	r3, #2
 8002374:	d107      	bne.n	8002386 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002376:	4b3e      	ldr	r3, [pc, #248]	; (8002470 <HAL_RCC_ClockConfig+0x1a0>)
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	2380      	movs	r3, #128	; 0x80
 800237c:	049b      	lsls	r3, r3, #18
 800237e:	4013      	ands	r3, r2
 8002380:	d114      	bne.n	80023ac <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e06e      	b.n	8002464 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	2b03      	cmp	r3, #3
 800238c:	d107      	bne.n	800239e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800238e:	4b38      	ldr	r3, [pc, #224]	; (8002470 <HAL_RCC_ClockConfig+0x1a0>)
 8002390:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002392:	2380      	movs	r3, #128	; 0x80
 8002394:	025b      	lsls	r3, r3, #9
 8002396:	4013      	ands	r3, r2
 8002398:	d108      	bne.n	80023ac <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e062      	b.n	8002464 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800239e:	4b34      	ldr	r3, [pc, #208]	; (8002470 <HAL_RCC_ClockConfig+0x1a0>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	2202      	movs	r2, #2
 80023a4:	4013      	ands	r3, r2
 80023a6:	d101      	bne.n	80023ac <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e05b      	b.n	8002464 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023ac:	4b30      	ldr	r3, [pc, #192]	; (8002470 <HAL_RCC_ClockConfig+0x1a0>)
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	2203      	movs	r2, #3
 80023b2:	4393      	bics	r3, r2
 80023b4:	0019      	movs	r1, r3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	685a      	ldr	r2, [r3, #4]
 80023ba:	4b2d      	ldr	r3, [pc, #180]	; (8002470 <HAL_RCC_ClockConfig+0x1a0>)
 80023bc:	430a      	orrs	r2, r1
 80023be:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023c0:	f7fe f980 	bl	80006c4 <HAL_GetTick>
 80023c4:	0003      	movs	r3, r0
 80023c6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023c8:	e009      	b.n	80023de <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023ca:	f7fe f97b 	bl	80006c4 <HAL_GetTick>
 80023ce:	0002      	movs	r2, r0
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	4a27      	ldr	r2, [pc, #156]	; (8002474 <HAL_RCC_ClockConfig+0x1a4>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d901      	bls.n	80023de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023da:	2303      	movs	r3, #3
 80023dc:	e042      	b.n	8002464 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023de:	4b24      	ldr	r3, [pc, #144]	; (8002470 <HAL_RCC_ClockConfig+0x1a0>)
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	220c      	movs	r2, #12
 80023e4:	401a      	ands	r2, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d1ec      	bne.n	80023ca <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023f0:	4b1e      	ldr	r3, [pc, #120]	; (800246c <HAL_RCC_ClockConfig+0x19c>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2201      	movs	r2, #1
 80023f6:	4013      	ands	r3, r2
 80023f8:	683a      	ldr	r2, [r7, #0]
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d211      	bcs.n	8002422 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023fe:	4b1b      	ldr	r3, [pc, #108]	; (800246c <HAL_RCC_ClockConfig+0x19c>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	2201      	movs	r2, #1
 8002404:	4393      	bics	r3, r2
 8002406:	0019      	movs	r1, r3
 8002408:	4b18      	ldr	r3, [pc, #96]	; (800246c <HAL_RCC_ClockConfig+0x19c>)
 800240a:	683a      	ldr	r2, [r7, #0]
 800240c:	430a      	orrs	r2, r1
 800240e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002410:	4b16      	ldr	r3, [pc, #88]	; (800246c <HAL_RCC_ClockConfig+0x19c>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2201      	movs	r2, #1
 8002416:	4013      	ands	r3, r2
 8002418:	683a      	ldr	r2, [r7, #0]
 800241a:	429a      	cmp	r2, r3
 800241c:	d001      	beq.n	8002422 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e020      	b.n	8002464 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	2204      	movs	r2, #4
 8002428:	4013      	ands	r3, r2
 800242a:	d009      	beq.n	8002440 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800242c:	4b10      	ldr	r3, [pc, #64]	; (8002470 <HAL_RCC_ClockConfig+0x1a0>)
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	4a11      	ldr	r2, [pc, #68]	; (8002478 <HAL_RCC_ClockConfig+0x1a8>)
 8002432:	4013      	ands	r3, r2
 8002434:	0019      	movs	r1, r3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	68da      	ldr	r2, [r3, #12]
 800243a:	4b0d      	ldr	r3, [pc, #52]	; (8002470 <HAL_RCC_ClockConfig+0x1a0>)
 800243c:	430a      	orrs	r2, r1
 800243e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002440:	f000 f820 	bl	8002484 <HAL_RCC_GetSysClockFreq>
 8002444:	0001      	movs	r1, r0
 8002446:	4b0a      	ldr	r3, [pc, #40]	; (8002470 <HAL_RCC_ClockConfig+0x1a0>)
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	091b      	lsrs	r3, r3, #4
 800244c:	220f      	movs	r2, #15
 800244e:	4013      	ands	r3, r2
 8002450:	4a0a      	ldr	r2, [pc, #40]	; (800247c <HAL_RCC_ClockConfig+0x1ac>)
 8002452:	5cd3      	ldrb	r3, [r2, r3]
 8002454:	000a      	movs	r2, r1
 8002456:	40da      	lsrs	r2, r3
 8002458:	4b09      	ldr	r3, [pc, #36]	; (8002480 <HAL_RCC_ClockConfig+0x1b0>)
 800245a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800245c:	2000      	movs	r0, #0
 800245e:	f7fe f8eb 	bl	8000638 <HAL_InitTick>
  
  return HAL_OK;
 8002462:	2300      	movs	r3, #0
}
 8002464:	0018      	movs	r0, r3
 8002466:	46bd      	mov	sp, r7
 8002468:	b004      	add	sp, #16
 800246a:	bd80      	pop	{r7, pc}
 800246c:	40022000 	.word	0x40022000
 8002470:	40021000 	.word	0x40021000
 8002474:	00001388 	.word	0x00001388
 8002478:	fffff8ff 	.word	0xfffff8ff
 800247c:	0800fd28 	.word	0x0800fd28
 8002480:	20000000 	.word	0x20000000

08002484 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002484:	b590      	push	{r4, r7, lr}
 8002486:	b08f      	sub	sp, #60	; 0x3c
 8002488:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800248a:	2314      	movs	r3, #20
 800248c:	18fb      	adds	r3, r7, r3
 800248e:	4a37      	ldr	r2, [pc, #220]	; (800256c <HAL_RCC_GetSysClockFreq+0xe8>)
 8002490:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002492:	c313      	stmia	r3!, {r0, r1, r4}
 8002494:	6812      	ldr	r2, [r2, #0]
 8002496:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002498:	1d3b      	adds	r3, r7, #4
 800249a:	4a35      	ldr	r2, [pc, #212]	; (8002570 <HAL_RCC_GetSysClockFreq+0xec>)
 800249c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800249e:	c313      	stmia	r3!, {r0, r1, r4}
 80024a0:	6812      	ldr	r2, [r2, #0]
 80024a2:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80024a4:	2300      	movs	r3, #0
 80024a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024a8:	2300      	movs	r3, #0
 80024aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80024ac:	2300      	movs	r3, #0
 80024ae:	637b      	str	r3, [r7, #52]	; 0x34
 80024b0:	2300      	movs	r3, #0
 80024b2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80024b4:	2300      	movs	r3, #0
 80024b6:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80024b8:	4b2e      	ldr	r3, [pc, #184]	; (8002574 <HAL_RCC_GetSysClockFreq+0xf0>)
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80024be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024c0:	220c      	movs	r2, #12
 80024c2:	4013      	ands	r3, r2
 80024c4:	2b08      	cmp	r3, #8
 80024c6:	d006      	beq.n	80024d6 <HAL_RCC_GetSysClockFreq+0x52>
 80024c8:	2b0c      	cmp	r3, #12
 80024ca:	d043      	beq.n	8002554 <HAL_RCC_GetSysClockFreq+0xd0>
 80024cc:	2b04      	cmp	r3, #4
 80024ce:	d144      	bne.n	800255a <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80024d0:	4b29      	ldr	r3, [pc, #164]	; (8002578 <HAL_RCC_GetSysClockFreq+0xf4>)
 80024d2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80024d4:	e044      	b.n	8002560 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80024d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024d8:	0c9b      	lsrs	r3, r3, #18
 80024da:	220f      	movs	r2, #15
 80024dc:	4013      	ands	r3, r2
 80024de:	2214      	movs	r2, #20
 80024e0:	18ba      	adds	r2, r7, r2
 80024e2:	5cd3      	ldrb	r3, [r2, r3]
 80024e4:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80024e6:	4b23      	ldr	r3, [pc, #140]	; (8002574 <HAL_RCC_GetSysClockFreq+0xf0>)
 80024e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ea:	220f      	movs	r2, #15
 80024ec:	4013      	ands	r3, r2
 80024ee:	1d3a      	adds	r2, r7, #4
 80024f0:	5cd3      	ldrb	r3, [r2, r3]
 80024f2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80024f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024f6:	23c0      	movs	r3, #192	; 0xc0
 80024f8:	025b      	lsls	r3, r3, #9
 80024fa:	401a      	ands	r2, r3
 80024fc:	2380      	movs	r3, #128	; 0x80
 80024fe:	025b      	lsls	r3, r3, #9
 8002500:	429a      	cmp	r2, r3
 8002502:	d109      	bne.n	8002518 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002504:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002506:	481c      	ldr	r0, [pc, #112]	; (8002578 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002508:	f7fd fe10 	bl	800012c <__udivsi3>
 800250c:	0003      	movs	r3, r0
 800250e:	001a      	movs	r2, r3
 8002510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002512:	4353      	muls	r3, r2
 8002514:	637b      	str	r3, [r7, #52]	; 0x34
 8002516:	e01a      	b.n	800254e <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002518:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800251a:	23c0      	movs	r3, #192	; 0xc0
 800251c:	025b      	lsls	r3, r3, #9
 800251e:	401a      	ands	r2, r3
 8002520:	23c0      	movs	r3, #192	; 0xc0
 8002522:	025b      	lsls	r3, r3, #9
 8002524:	429a      	cmp	r2, r3
 8002526:	d109      	bne.n	800253c <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002528:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800252a:	4814      	ldr	r0, [pc, #80]	; (800257c <HAL_RCC_GetSysClockFreq+0xf8>)
 800252c:	f7fd fdfe 	bl	800012c <__udivsi3>
 8002530:	0003      	movs	r3, r0
 8002532:	001a      	movs	r2, r3
 8002534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002536:	4353      	muls	r3, r2
 8002538:	637b      	str	r3, [r7, #52]	; 0x34
 800253a:	e008      	b.n	800254e <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800253c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800253e:	480e      	ldr	r0, [pc, #56]	; (8002578 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002540:	f7fd fdf4 	bl	800012c <__udivsi3>
 8002544:	0003      	movs	r3, r0
 8002546:	001a      	movs	r2, r3
 8002548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254a:	4353      	muls	r3, r2
 800254c:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800254e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002550:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002552:	e005      	b.n	8002560 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002554:	4b09      	ldr	r3, [pc, #36]	; (800257c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002556:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002558:	e002      	b.n	8002560 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800255a:	4b07      	ldr	r3, [pc, #28]	; (8002578 <HAL_RCC_GetSysClockFreq+0xf4>)
 800255c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800255e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002562:	0018      	movs	r0, r3
 8002564:	46bd      	mov	sp, r7
 8002566:	b00f      	add	sp, #60	; 0x3c
 8002568:	bd90      	pop	{r4, r7, pc}
 800256a:	46c0      	nop			; (mov r8, r8)
 800256c:	0800fcdc 	.word	0x0800fcdc
 8002570:	0800fcec 	.word	0x0800fcec
 8002574:	40021000 	.word	0x40021000
 8002578:	007a1200 	.word	0x007a1200
 800257c:	02dc6c00 	.word	0x02dc6c00

08002580 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b086      	sub	sp, #24
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002588:	2300      	movs	r3, #0
 800258a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800258c:	2300      	movs	r3, #0
 800258e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	2380      	movs	r3, #128	; 0x80
 8002596:	025b      	lsls	r3, r3, #9
 8002598:	4013      	ands	r3, r2
 800259a:	d100      	bne.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800259c:	e08f      	b.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800259e:	2317      	movs	r3, #23
 80025a0:	18fb      	adds	r3, r7, r3
 80025a2:	2200      	movs	r2, #0
 80025a4:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025a6:	4b6f      	ldr	r3, [pc, #444]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80025a8:	69da      	ldr	r2, [r3, #28]
 80025aa:	2380      	movs	r3, #128	; 0x80
 80025ac:	055b      	lsls	r3, r3, #21
 80025ae:	4013      	ands	r3, r2
 80025b0:	d111      	bne.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80025b2:	4b6c      	ldr	r3, [pc, #432]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80025b4:	69da      	ldr	r2, [r3, #28]
 80025b6:	4b6b      	ldr	r3, [pc, #428]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80025b8:	2180      	movs	r1, #128	; 0x80
 80025ba:	0549      	lsls	r1, r1, #21
 80025bc:	430a      	orrs	r2, r1
 80025be:	61da      	str	r2, [r3, #28]
 80025c0:	4b68      	ldr	r3, [pc, #416]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80025c2:	69da      	ldr	r2, [r3, #28]
 80025c4:	2380      	movs	r3, #128	; 0x80
 80025c6:	055b      	lsls	r3, r3, #21
 80025c8:	4013      	ands	r3, r2
 80025ca:	60bb      	str	r3, [r7, #8]
 80025cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025ce:	2317      	movs	r3, #23
 80025d0:	18fb      	adds	r3, r7, r3
 80025d2:	2201      	movs	r2, #1
 80025d4:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025d6:	4b64      	ldr	r3, [pc, #400]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	2380      	movs	r3, #128	; 0x80
 80025dc:	005b      	lsls	r3, r3, #1
 80025de:	4013      	ands	r3, r2
 80025e0:	d11a      	bne.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025e2:	4b61      	ldr	r3, [pc, #388]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	4b60      	ldr	r3, [pc, #384]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80025e8:	2180      	movs	r1, #128	; 0x80
 80025ea:	0049      	lsls	r1, r1, #1
 80025ec:	430a      	orrs	r2, r1
 80025ee:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025f0:	f7fe f868 	bl	80006c4 <HAL_GetTick>
 80025f4:	0003      	movs	r3, r0
 80025f6:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025f8:	e008      	b.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025fa:	f7fe f863 	bl	80006c4 <HAL_GetTick>
 80025fe:	0002      	movs	r2, r0
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	2b64      	cmp	r3, #100	; 0x64
 8002606:	d901      	bls.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8002608:	2303      	movs	r3, #3
 800260a:	e0a6      	b.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x1da>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800260c:	4b56      	ldr	r3, [pc, #344]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	2380      	movs	r3, #128	; 0x80
 8002612:	005b      	lsls	r3, r3, #1
 8002614:	4013      	ands	r3, r2
 8002616:	d0f0      	beq.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002618:	4b52      	ldr	r3, [pc, #328]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800261a:	6a1a      	ldr	r2, [r3, #32]
 800261c:	23c0      	movs	r3, #192	; 0xc0
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	4013      	ands	r3, r2
 8002622:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d034      	beq.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x114>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685a      	ldr	r2, [r3, #4]
 800262e:	23c0      	movs	r3, #192	; 0xc0
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	4013      	ands	r3, r2
 8002634:	68fa      	ldr	r2, [r7, #12]
 8002636:	429a      	cmp	r2, r3
 8002638:	d02c      	beq.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800263a:	4b4a      	ldr	r3, [pc, #296]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800263c:	6a1b      	ldr	r3, [r3, #32]
 800263e:	4a4b      	ldr	r2, [pc, #300]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8002640:	4013      	ands	r3, r2
 8002642:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002644:	4b47      	ldr	r3, [pc, #284]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002646:	6a1a      	ldr	r2, [r3, #32]
 8002648:	4b46      	ldr	r3, [pc, #280]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800264a:	2180      	movs	r1, #128	; 0x80
 800264c:	0249      	lsls	r1, r1, #9
 800264e:	430a      	orrs	r2, r1
 8002650:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002652:	4b44      	ldr	r3, [pc, #272]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002654:	6a1a      	ldr	r2, [r3, #32]
 8002656:	4b43      	ldr	r3, [pc, #268]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002658:	4945      	ldr	r1, [pc, #276]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 800265a:	400a      	ands	r2, r1
 800265c:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800265e:	4b41      	ldr	r3, [pc, #260]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002660:	68fa      	ldr	r2, [r7, #12]
 8002662:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2201      	movs	r2, #1
 8002668:	4013      	ands	r3, r2
 800266a:	d013      	beq.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800266c:	f7fe f82a 	bl	80006c4 <HAL_GetTick>
 8002670:	0003      	movs	r3, r0
 8002672:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002674:	e009      	b.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002676:	f7fe f825 	bl	80006c4 <HAL_GetTick>
 800267a:	0002      	movs	r2, r0
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	4a3c      	ldr	r2, [pc, #240]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d901      	bls.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8002686:	2303      	movs	r3, #3
 8002688:	e067      	b.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x1da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800268a:	4b36      	ldr	r3, [pc, #216]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800268c:	6a1b      	ldr	r3, [r3, #32]
 800268e:	2202      	movs	r2, #2
 8002690:	4013      	ands	r3, r2
 8002692:	d0f0      	beq.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002694:	4b33      	ldr	r3, [pc, #204]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002696:	6a1b      	ldr	r3, [r3, #32]
 8002698:	4a34      	ldr	r2, [pc, #208]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 800269a:	4013      	ands	r3, r2
 800269c:	0019      	movs	r1, r3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685a      	ldr	r2, [r3, #4]
 80026a2:	4b30      	ldr	r3, [pc, #192]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80026a4:	430a      	orrs	r2, r1
 80026a6:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80026a8:	2317      	movs	r3, #23
 80026aa:	18fb      	adds	r3, r7, r3
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d105      	bne.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026b2:	4b2c      	ldr	r3, [pc, #176]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80026b4:	69da      	ldr	r2, [r3, #28]
 80026b6:	4b2b      	ldr	r3, [pc, #172]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80026b8:	492f      	ldr	r1, [pc, #188]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80026ba:	400a      	ands	r2, r1
 80026bc:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	2201      	movs	r2, #1
 80026c4:	4013      	ands	r3, r2
 80026c6:	d009      	beq.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80026c8:	4b26      	ldr	r3, [pc, #152]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80026ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026cc:	2203      	movs	r2, #3
 80026ce:	4393      	bics	r3, r2
 80026d0:	0019      	movs	r1, r3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	689a      	ldr	r2, [r3, #8]
 80026d6:	4b23      	ldr	r3, [pc, #140]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80026d8:	430a      	orrs	r2, r1
 80026da:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2202      	movs	r2, #2
 80026e2:	4013      	ands	r3, r2
 80026e4:	d009      	beq.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80026e6:	4b1f      	ldr	r3, [pc, #124]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80026e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ea:	4a24      	ldr	r2, [pc, #144]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80026ec:	4013      	ands	r3, r2
 80026ee:	0019      	movs	r1, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	68da      	ldr	r2, [r3, #12]
 80026f4:	4b1b      	ldr	r3, [pc, #108]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80026f6:	430a      	orrs	r2, r1
 80026f8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	2220      	movs	r2, #32
 8002700:	4013      	ands	r3, r2
 8002702:	d009      	beq.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002704:	4b17      	ldr	r3, [pc, #92]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002708:	2210      	movs	r2, #16
 800270a:	4393      	bics	r3, r2
 800270c:	0019      	movs	r1, r3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	691a      	ldr	r2, [r3, #16]
 8002712:	4b14      	ldr	r3, [pc, #80]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002714:	430a      	orrs	r2, r1
 8002716:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	2380      	movs	r3, #128	; 0x80
 800271e:	029b      	lsls	r3, r3, #10
 8002720:	4013      	ands	r3, r2
 8002722:	d009      	beq.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002724:	4b0f      	ldr	r3, [pc, #60]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002728:	2280      	movs	r2, #128	; 0x80
 800272a:	4393      	bics	r3, r2
 800272c:	0019      	movs	r1, r3
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	699a      	ldr	r2, [r3, #24]
 8002732:	4b0c      	ldr	r3, [pc, #48]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002734:	430a      	orrs	r2, r1
 8002736:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	2380      	movs	r3, #128	; 0x80
 800273e:	00db      	lsls	r3, r3, #3
 8002740:	4013      	ands	r3, r2
 8002742:	d009      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002744:	4b07      	ldr	r3, [pc, #28]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002748:	2240      	movs	r2, #64	; 0x40
 800274a:	4393      	bics	r3, r2
 800274c:	0019      	movs	r1, r3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	695a      	ldr	r2, [r3, #20]
 8002752:	4b04      	ldr	r3, [pc, #16]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002754:	430a      	orrs	r2, r1
 8002756:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002758:	2300      	movs	r3, #0
}
 800275a:	0018      	movs	r0, r3
 800275c:	46bd      	mov	sp, r7
 800275e:	b006      	add	sp, #24
 8002760:	bd80      	pop	{r7, pc}
 8002762:	46c0      	nop			; (mov r8, r8)
 8002764:	40021000 	.word	0x40021000
 8002768:	40007000 	.word	0x40007000
 800276c:	fffffcff 	.word	0xfffffcff
 8002770:	fffeffff 	.word	0xfffeffff
 8002774:	00001388 	.word	0x00001388
 8002778:	efffffff 	.word	0xefffffff
 800277c:	fffcffff 	.word	0xfffcffff

08002780 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002788:	210e      	movs	r1, #14
 800278a:	187b      	adds	r3, r7, r1
 800278c:	4a08      	ldr	r2, [pc, #32]	; (80027b0 <USB_EnableGlobalInt+0x30>)
 800278e:	801a      	strh	r2, [r3, #0]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2240      	movs	r2, #64	; 0x40
 8002794:	5a9b      	ldrh	r3, [r3, r2]
 8002796:	b29a      	uxth	r2, r3
 8002798:	187b      	adds	r3, r7, r1
 800279a:	881b      	ldrh	r3, [r3, #0]
 800279c:	4313      	orrs	r3, r2
 800279e:	b299      	uxth	r1, r3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2240      	movs	r2, #64	; 0x40
 80027a4:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80027a6:	2300      	movs	r3, #0
}
 80027a8:	0018      	movs	r0, r3
 80027aa:	46bd      	mov	sp, r7
 80027ac:	b004      	add	sp, #16
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	ffffbf80 	.word	0xffffbf80

080027b4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80027bc:	210e      	movs	r1, #14
 80027be:	187b      	adds	r3, r7, r1
 80027c0:	4a0b      	ldr	r2, [pc, #44]	; (80027f0 <USB_DisableGlobalInt+0x3c>)
 80027c2:	801a      	strh	r2, [r3, #0]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2240      	movs	r2, #64	; 0x40
 80027c8:	5a9b      	ldrh	r3, [r3, r2]
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	b21b      	sxth	r3, r3
 80027ce:	187a      	adds	r2, r7, r1
 80027d0:	2100      	movs	r1, #0
 80027d2:	5e52      	ldrsh	r2, [r2, r1]
 80027d4:	43d2      	mvns	r2, r2
 80027d6:	b212      	sxth	r2, r2
 80027d8:	4013      	ands	r3, r2
 80027da:	b21b      	sxth	r3, r3
 80027dc:	b299      	uxth	r1, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2240      	movs	r2, #64	; 0x40
 80027e2:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	0018      	movs	r0, r3
 80027e8:	46bd      	mov	sp, r7
 80027ea:	b004      	add	sp, #16
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	46c0      	nop			; (mov r8, r8)
 80027f0:	ffffbf80 	.word	0xffffbf80

080027f4 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80027f4:	b084      	sub	sp, #16
 80027f6:	b590      	push	{r4, r7, lr}
 80027f8:	46c6      	mov	lr, r8
 80027fa:	b500      	push	{lr}
 80027fc:	b082      	sub	sp, #8
 80027fe:	af00      	add	r7, sp, #0
 8002800:	6078      	str	r0, [r7, #4]
 8002802:	2004      	movs	r0, #4
 8002804:	2410      	movs	r4, #16
 8002806:	46a4      	mov	ip, r4
 8002808:	2408      	movs	r4, #8
 800280a:	46a0      	mov	r8, r4
 800280c:	44b8      	add	r8, r7
 800280e:	44c4      	add	ip, r8
 8002810:	4460      	add	r0, ip
 8002812:	6001      	str	r1, [r0, #0]
 8002814:	6042      	str	r2, [r0, #4]
 8002816:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2240      	movs	r2, #64	; 0x40
 800281c:	2101      	movs	r1, #1
 800281e:	5299      	strh	r1, [r3, r2]

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2240      	movs	r2, #64	; 0x40
 8002824:	2100      	movs	r1, #0
 8002826:	5299      	strh	r1, [r3, r2]

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2244      	movs	r2, #68	; 0x44
 800282c:	2100      	movs	r1, #0
 800282e:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2250      	movs	r2, #80	; 0x50
 8002834:	2100      	movs	r1, #0
 8002836:	5299      	strh	r1, [r3, r2]

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	0018      	movs	r0, r3
 800283c:	f7ff ffa0 	bl	8002780 <USB_EnableGlobalInt>

  return HAL_OK;
 8002840:	2300      	movs	r3, #0
}
 8002842:	0018      	movs	r0, r3
 8002844:	46bd      	mov	sp, r7
 8002846:	b002      	add	sp, #8
 8002848:	bc04      	pop	{r2}
 800284a:	4690      	mov	r8, r2
 800284c:	bc90      	pop	{r4, r7}
 800284e:	bc08      	pop	{r3}
 8002850:	b004      	add	sp, #16
 8002852:	4718      	bx	r3

08002854 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002854:	b590      	push	{r4, r7, lr}
 8002856:	b087      	sub	sp, #28
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800285e:	2317      	movs	r3, #23
 8002860:	18fb      	adds	r3, r7, r3
 8002862:	2200      	movs	r2, #0
 8002864:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	18d3      	adds	r3, r2, r3
 8002870:	881b      	ldrh	r3, [r3, #0]
 8002872:	b29a      	uxth	r2, r3
 8002874:	2314      	movs	r3, #20
 8002876:	18fb      	adds	r3, r7, r3
 8002878:	49b2      	ldr	r1, [pc, #712]	; (8002b44 <USB_ActivateEndpoint+0x2f0>)
 800287a:	400a      	ands	r2, r1
 800287c:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	78db      	ldrb	r3, [r3, #3]
 8002882:	2b01      	cmp	r3, #1
 8002884:	d020      	beq.n	80028c8 <USB_ActivateEndpoint+0x74>
 8002886:	dc02      	bgt.n	800288e <USB_ActivateEndpoint+0x3a>
 8002888:	2b00      	cmp	r3, #0
 800288a:	d005      	beq.n	8002898 <USB_ActivateEndpoint+0x44>
 800288c:	e025      	b.n	80028da <USB_ActivateEndpoint+0x86>
 800288e:	2b02      	cmp	r3, #2
 8002890:	d00b      	beq.n	80028aa <USB_ActivateEndpoint+0x56>
 8002892:	2b03      	cmp	r3, #3
 8002894:	d00f      	beq.n	80028b6 <USB_ActivateEndpoint+0x62>
 8002896:	e020      	b.n	80028da <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8002898:	2214      	movs	r2, #20
 800289a:	18bb      	adds	r3, r7, r2
 800289c:	18ba      	adds	r2, r7, r2
 800289e:	8812      	ldrh	r2, [r2, #0]
 80028a0:	2180      	movs	r1, #128	; 0x80
 80028a2:	0089      	lsls	r1, r1, #2
 80028a4:	430a      	orrs	r2, r1
 80028a6:	801a      	strh	r2, [r3, #0]
      break;
 80028a8:	e01c      	b.n	80028e4 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 80028aa:	2214      	movs	r2, #20
 80028ac:	18bb      	adds	r3, r7, r2
 80028ae:	18ba      	adds	r2, r7, r2
 80028b0:	8812      	ldrh	r2, [r2, #0]
 80028b2:	801a      	strh	r2, [r3, #0]
      break;
 80028b4:	e016      	b.n	80028e4 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80028b6:	2214      	movs	r2, #20
 80028b8:	18bb      	adds	r3, r7, r2
 80028ba:	18ba      	adds	r2, r7, r2
 80028bc:	8812      	ldrh	r2, [r2, #0]
 80028be:	21c0      	movs	r1, #192	; 0xc0
 80028c0:	00c9      	lsls	r1, r1, #3
 80028c2:	430a      	orrs	r2, r1
 80028c4:	801a      	strh	r2, [r3, #0]
      break;
 80028c6:	e00d      	b.n	80028e4 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80028c8:	2214      	movs	r2, #20
 80028ca:	18bb      	adds	r3, r7, r2
 80028cc:	18ba      	adds	r2, r7, r2
 80028ce:	8812      	ldrh	r2, [r2, #0]
 80028d0:	2180      	movs	r1, #128	; 0x80
 80028d2:	00c9      	lsls	r1, r1, #3
 80028d4:	430a      	orrs	r2, r1
 80028d6:	801a      	strh	r2, [r3, #0]
      break;
 80028d8:	e004      	b.n	80028e4 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 80028da:	2317      	movs	r3, #23
 80028dc:	18fb      	adds	r3, r7, r3
 80028de:	2201      	movs	r2, #1
 80028e0:	701a      	strb	r2, [r3, #0]
      break;
 80028e2:	46c0      	nop			; (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	18d3      	adds	r3, r2, r3
 80028ee:	2214      	movs	r2, #20
 80028f0:	18ba      	adds	r2, r7, r2
 80028f2:	8812      	ldrh	r2, [r2, #0]
 80028f4:	4994      	ldr	r1, [pc, #592]	; (8002b48 <USB_ActivateEndpoint+0x2f4>)
 80028f6:	430a      	orrs	r2, r1
 80028f8:	b292      	uxth	r2, r2
 80028fa:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	18d3      	adds	r3, r2, r3
 8002906:	881b      	ldrh	r3, [r3, #0]
 8002908:	b29b      	uxth	r3, r3
 800290a:	b21b      	sxth	r3, r3
 800290c:	4a8f      	ldr	r2, [pc, #572]	; (8002b4c <USB_ActivateEndpoint+0x2f8>)
 800290e:	4013      	ands	r3, r2
 8002910:	b21a      	sxth	r2, r3
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	b21b      	sxth	r3, r3
 8002918:	4313      	orrs	r3, r2
 800291a:	b21b      	sxth	r3, r3
 800291c:	b29c      	uxth	r4, r3
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	18d3      	adds	r3, r2, r3
 8002928:	4a87      	ldr	r2, [pc, #540]	; (8002b48 <USB_ActivateEndpoint+0x2f4>)
 800292a:	4322      	orrs	r2, r4
 800292c:	b292      	uxth	r2, r2
 800292e:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	7b1b      	ldrb	r3, [r3, #12]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d000      	beq.n	800293a <USB_ActivateEndpoint+0xe6>
 8002938:	e11a      	b.n	8002b70 <USB_ActivateEndpoint+0x31c>
  {
    if (ep->is_in != 0U)
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	785b      	ldrb	r3, [r3, #1]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d062      	beq.n	8002a08 <USB_ActivateEndpoint+0x1b4>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002942:	687c      	ldr	r4, [r7, #4]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2250      	movs	r2, #80	; 0x50
 8002948:	5a9b      	ldrh	r3, [r3, r2]
 800294a:	b29b      	uxth	r3, r3
 800294c:	18e4      	adds	r4, r4, r3
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	00db      	lsls	r3, r3, #3
 8002954:	18e3      	adds	r3, r4, r3
 8002956:	2280      	movs	r2, #128	; 0x80
 8002958:	00d2      	lsls	r2, r2, #3
 800295a:	4694      	mov	ip, r2
 800295c:	4463      	add	r3, ip
 800295e:	001c      	movs	r4, r3
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	88db      	ldrh	r3, [r3, #6]
 8002964:	085b      	lsrs	r3, r3, #1
 8002966:	b29b      	uxth	r3, r3
 8002968:	18db      	adds	r3, r3, r3
 800296a:	b29b      	uxth	r3, r3
 800296c:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	18d3      	adds	r3, r2, r3
 8002978:	881b      	ldrh	r3, [r3, #0]
 800297a:	b29c      	uxth	r4, r3
 800297c:	0022      	movs	r2, r4
 800297e:	2340      	movs	r3, #64	; 0x40
 8002980:	4013      	ands	r3, r2
 8002982:	d012      	beq.n	80029aa <USB_ActivateEndpoint+0x156>
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	18d3      	adds	r3, r2, r3
 800298e:	881b      	ldrh	r3, [r3, #0]
 8002990:	b29b      	uxth	r3, r3
 8002992:	4a6e      	ldr	r2, [pc, #440]	; (8002b4c <USB_ActivateEndpoint+0x2f8>)
 8002994:	4013      	ands	r3, r2
 8002996:	b29c      	uxth	r4, r3
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	781b      	ldrb	r3, [r3, #0]
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	18d3      	adds	r3, r2, r3
 80029a2:	4a6b      	ldr	r2, [pc, #428]	; (8002b50 <USB_ActivateEndpoint+0x2fc>)
 80029a4:	4322      	orrs	r2, r4
 80029a6:	b292      	uxth	r2, r2
 80029a8:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	78db      	ldrb	r3, [r3, #3]
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d016      	beq.n	80029e0 <USB_ActivateEndpoint+0x18c>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	18d3      	adds	r3, r2, r3
 80029bc:	881b      	ldrh	r3, [r3, #0]
 80029be:	b29b      	uxth	r3, r3
 80029c0:	4a64      	ldr	r2, [pc, #400]	; (8002b54 <USB_ActivateEndpoint+0x300>)
 80029c2:	4013      	ands	r3, r2
 80029c4:	b29c      	uxth	r4, r3
 80029c6:	2320      	movs	r3, #32
 80029c8:	4063      	eors	r3, r4
 80029ca:	b29c      	uxth	r4, r3
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	18d3      	adds	r3, r2, r3
 80029d6:	4a5c      	ldr	r2, [pc, #368]	; (8002b48 <USB_ActivateEndpoint+0x2f4>)
 80029d8:	4322      	orrs	r2, r4
 80029da:	b292      	uxth	r2, r2
 80029dc:	801a      	strh	r2, [r3, #0]
 80029de:	e21a      	b.n	8002e16 <USB_ActivateEndpoint+0x5c2>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	18d3      	adds	r3, r2, r3
 80029ea:	881b      	ldrh	r3, [r3, #0]
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	4a59      	ldr	r2, [pc, #356]	; (8002b54 <USB_ActivateEndpoint+0x300>)
 80029f0:	4013      	ands	r3, r2
 80029f2:	b29c      	uxth	r4, r3
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	18d3      	adds	r3, r2, r3
 80029fe:	4a52      	ldr	r2, [pc, #328]	; (8002b48 <USB_ActivateEndpoint+0x2f4>)
 8002a00:	4322      	orrs	r2, r4
 8002a02:	b292      	uxth	r2, r2
 8002a04:	801a      	strh	r2, [r3, #0]
 8002a06:	e206      	b.n	8002e16 <USB_ActivateEndpoint+0x5c2>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002a08:	687c      	ldr	r4, [r7, #4]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2250      	movs	r2, #80	; 0x50
 8002a0e:	5a9b      	ldrh	r3, [r3, r2]
 8002a10:	b29b      	uxth	r3, r3
 8002a12:	18e4      	adds	r4, r4, r3
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	00db      	lsls	r3, r3, #3
 8002a1a:	18e3      	adds	r3, r4, r3
 8002a1c:	4a4e      	ldr	r2, [pc, #312]	; (8002b58 <USB_ActivateEndpoint+0x304>)
 8002a1e:	4694      	mov	ip, r2
 8002a20:	4463      	add	r3, ip
 8002a22:	001c      	movs	r4, r3
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	88db      	ldrh	r3, [r3, #6]
 8002a28:	085b      	lsrs	r3, r3, #1
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	18db      	adds	r3, r3, r3
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002a32:	687c      	ldr	r4, [r7, #4]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2250      	movs	r2, #80	; 0x50
 8002a38:	5a9b      	ldrh	r3, [r3, r2]
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	18e4      	adds	r4, r4, r3
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	00db      	lsls	r3, r3, #3
 8002a44:	18e3      	adds	r3, r4, r3
 8002a46:	4a45      	ldr	r2, [pc, #276]	; (8002b5c <USB_ActivateEndpoint+0x308>)
 8002a48:	4694      	mov	ip, r2
 8002a4a:	4463      	add	r3, ip
 8002a4c:	60fb      	str	r3, [r7, #12]
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	691b      	ldr	r3, [r3, #16]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d10e      	bne.n	8002a74 <USB_ActivateEndpoint+0x220>
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	881b      	ldrh	r3, [r3, #0]
 8002a5a:	4a41      	ldr	r2, [pc, #260]	; (8002b60 <USB_ActivateEndpoint+0x30c>)
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	b29a      	uxth	r2, r3
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	801a      	strh	r2, [r3, #0]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	881b      	ldrh	r3, [r3, #0]
 8002a68:	4a3e      	ldr	r2, [pc, #248]	; (8002b64 <USB_ActivateEndpoint+0x310>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	b29a      	uxth	r2, r3
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	801a      	strh	r2, [r3, #0]
 8002a72:	e02b      	b.n	8002acc <USB_ActivateEndpoint+0x278>
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	691b      	ldr	r3, [r3, #16]
 8002a78:	2b3e      	cmp	r3, #62	; 0x3e
 8002a7a:	d812      	bhi.n	8002aa2 <USB_ActivateEndpoint+0x24e>
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	691b      	ldr	r3, [r3, #16]
 8002a80:	085b      	lsrs	r3, r3, #1
 8002a82:	613b      	str	r3, [r7, #16]
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	691b      	ldr	r3, [r3, #16]
 8002a88:	2201      	movs	r2, #1
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	d002      	beq.n	8002a94 <USB_ActivateEndpoint+0x240>
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	3301      	adds	r3, #1
 8002a92:	613b      	str	r3, [r7, #16]
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	b29b      	uxth	r3, r3
 8002a98:	029b      	lsls	r3, r3, #10
 8002a9a:	b29a      	uxth	r2, r3
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	801a      	strh	r2, [r3, #0]
 8002aa0:	e014      	b.n	8002acc <USB_ActivateEndpoint+0x278>
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	691b      	ldr	r3, [r3, #16]
 8002aa6:	095b      	lsrs	r3, r3, #5
 8002aa8:	613b      	str	r3, [r7, #16]
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	691b      	ldr	r3, [r3, #16]
 8002aae:	221f      	movs	r2, #31
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	d102      	bne.n	8002aba <USB_ActivateEndpoint+0x266>
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	3b01      	subs	r3, #1
 8002ab8:	613b      	str	r3, [r7, #16]
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	029b      	lsls	r3, r3, #10
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	4a28      	ldr	r2, [pc, #160]	; (8002b64 <USB_ActivateEndpoint+0x310>)
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	b29a      	uxth	r2, r3
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	18d3      	adds	r3, r2, r3
 8002ad6:	881b      	ldrh	r3, [r3, #0]
 8002ad8:	b29c      	uxth	r4, r3
 8002ada:	0022      	movs	r2, r4
 8002adc:	2380      	movs	r3, #128	; 0x80
 8002ade:	01db      	lsls	r3, r3, #7
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	d012      	beq.n	8002b0a <USB_ActivateEndpoint+0x2b6>
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	18d3      	adds	r3, r2, r3
 8002aee:	881b      	ldrh	r3, [r3, #0]
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	4a16      	ldr	r2, [pc, #88]	; (8002b4c <USB_ActivateEndpoint+0x2f8>)
 8002af4:	4013      	ands	r3, r2
 8002af6:	b29c      	uxth	r4, r3
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	781b      	ldrb	r3, [r3, #0]
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	18d3      	adds	r3, r2, r3
 8002b02:	4a19      	ldr	r2, [pc, #100]	; (8002b68 <USB_ActivateEndpoint+0x314>)
 8002b04:	4322      	orrs	r2, r4
 8002b06:	b292      	uxth	r2, r2
 8002b08:	801a      	strh	r2, [r3, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	18d3      	adds	r3, r2, r3
 8002b14:	881b      	ldrh	r3, [r3, #0]
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	4a14      	ldr	r2, [pc, #80]	; (8002b6c <USB_ActivateEndpoint+0x318>)
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	b29c      	uxth	r4, r3
 8002b1e:	2380      	movs	r3, #128	; 0x80
 8002b20:	015b      	lsls	r3, r3, #5
 8002b22:	4063      	eors	r3, r4
 8002b24:	b29c      	uxth	r4, r3
 8002b26:	2380      	movs	r3, #128	; 0x80
 8002b28:	019b      	lsls	r3, r3, #6
 8002b2a:	4063      	eors	r3, r4
 8002b2c:	b29c      	uxth	r4, r3
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	781b      	ldrb	r3, [r3, #0]
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	18d3      	adds	r3, r2, r3
 8002b38:	4a03      	ldr	r2, [pc, #12]	; (8002b48 <USB_ActivateEndpoint+0x2f4>)
 8002b3a:	4322      	orrs	r2, r4
 8002b3c:	b292      	uxth	r2, r2
 8002b3e:	801a      	strh	r2, [r3, #0]
 8002b40:	e169      	b.n	8002e16 <USB_ActivateEndpoint+0x5c2>
 8002b42:	46c0      	nop			; (mov r8, r8)
 8002b44:	ffff898f 	.word	0xffff898f
 8002b48:	ffff8080 	.word	0xffff8080
 8002b4c:	ffff8f8f 	.word	0xffff8f8f
 8002b50:	ffff80c0 	.word	0xffff80c0
 8002b54:	ffff8fbf 	.word	0xffff8fbf
 8002b58:	00000404 	.word	0x00000404
 8002b5c:	00000406 	.word	0x00000406
 8002b60:	ffff83ff 	.word	0xffff83ff
 8002b64:	ffff8000 	.word	0xffff8000
 8002b68:	ffffc080 	.word	0xffffc080
 8002b6c:	ffffbf8f 	.word	0xffffbf8f
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	18d3      	adds	r3, r2, r3
 8002b7a:	881b      	ldrh	r3, [r3, #0]
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	4aa9      	ldr	r2, [pc, #676]	; (8002e24 <USB_ActivateEndpoint+0x5d0>)
 8002b80:	4013      	ands	r3, r2
 8002b82:	b29c      	uxth	r4, r3
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	18d3      	adds	r3, r2, r3
 8002b8e:	4aa6      	ldr	r2, [pc, #664]	; (8002e28 <USB_ActivateEndpoint+0x5d4>)
 8002b90:	4322      	orrs	r2, r4
 8002b92:	b292      	uxth	r2, r2
 8002b94:	801a      	strh	r2, [r3, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8002b96:	687c      	ldr	r4, [r7, #4]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2250      	movs	r2, #80	; 0x50
 8002b9c:	5a9b      	ldrh	r3, [r3, r2]
 8002b9e:	b29b      	uxth	r3, r3
 8002ba0:	18e4      	adds	r4, r4, r3
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	00db      	lsls	r3, r3, #3
 8002ba8:	18e3      	adds	r3, r4, r3
 8002baa:	2280      	movs	r2, #128	; 0x80
 8002bac:	00d2      	lsls	r2, r2, #3
 8002bae:	4694      	mov	ip, r2
 8002bb0:	4463      	add	r3, ip
 8002bb2:	001c      	movs	r4, r3
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	891b      	ldrh	r3, [r3, #8]
 8002bb8:	085b      	lsrs	r3, r3, #1
 8002bba:	b29b      	uxth	r3, r3
 8002bbc:	18db      	adds	r3, r3, r3
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	8023      	strh	r3, [r4, #0]
 8002bc2:	687c      	ldr	r4, [r7, #4]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2250      	movs	r2, #80	; 0x50
 8002bc8:	5a9b      	ldrh	r3, [r3, r2]
 8002bca:	b29b      	uxth	r3, r3
 8002bcc:	18e4      	adds	r4, r4, r3
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	00db      	lsls	r3, r3, #3
 8002bd4:	18e3      	adds	r3, r4, r3
 8002bd6:	4a95      	ldr	r2, [pc, #596]	; (8002e2c <USB_ActivateEndpoint+0x5d8>)
 8002bd8:	4694      	mov	ip, r2
 8002bda:	4463      	add	r3, ip
 8002bdc:	001c      	movs	r4, r3
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	895b      	ldrh	r3, [r3, #10]
 8002be2:	085b      	lsrs	r3, r3, #1
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	18db      	adds	r3, r3, r3
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	785b      	ldrb	r3, [r3, #1]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d000      	beq.n	8002bf6 <USB_ActivateEndpoint+0x3a2>
 8002bf4:	e07e      	b.n	8002cf4 <USB_ActivateEndpoint+0x4a0>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	18d3      	adds	r3, r2, r3
 8002c00:	881b      	ldrh	r3, [r3, #0]
 8002c02:	b29c      	uxth	r4, r3
 8002c04:	0022      	movs	r2, r4
 8002c06:	2380      	movs	r3, #128	; 0x80
 8002c08:	01db      	lsls	r3, r3, #7
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	d012      	beq.n	8002c34 <USB_ActivateEndpoint+0x3e0>
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	18d3      	adds	r3, r2, r3
 8002c18:	881b      	ldrh	r3, [r3, #0]
 8002c1a:	b29b      	uxth	r3, r3
 8002c1c:	4a81      	ldr	r2, [pc, #516]	; (8002e24 <USB_ActivateEndpoint+0x5d0>)
 8002c1e:	4013      	ands	r3, r2
 8002c20:	b29c      	uxth	r4, r3
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	18d3      	adds	r3, r2, r3
 8002c2c:	4a80      	ldr	r2, [pc, #512]	; (8002e30 <USB_ActivateEndpoint+0x5dc>)
 8002c2e:	4322      	orrs	r2, r4
 8002c30:	b292      	uxth	r2, r2
 8002c32:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002c34:	687a      	ldr	r2, [r7, #4]
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	781b      	ldrb	r3, [r3, #0]
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	18d3      	adds	r3, r2, r3
 8002c3e:	881b      	ldrh	r3, [r3, #0]
 8002c40:	b29c      	uxth	r4, r3
 8002c42:	0022      	movs	r2, r4
 8002c44:	2340      	movs	r3, #64	; 0x40
 8002c46:	4013      	ands	r3, r2
 8002c48:	d012      	beq.n	8002c70 <USB_ActivateEndpoint+0x41c>
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	18d3      	adds	r3, r2, r3
 8002c54:	881b      	ldrh	r3, [r3, #0]
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	4a72      	ldr	r2, [pc, #456]	; (8002e24 <USB_ActivateEndpoint+0x5d0>)
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	b29c      	uxth	r4, r3
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	18d3      	adds	r3, r2, r3
 8002c68:	4a72      	ldr	r2, [pc, #456]	; (8002e34 <USB_ActivateEndpoint+0x5e0>)
 8002c6a:	4322      	orrs	r2, r4
 8002c6c:	b292      	uxth	r2, r2
 8002c6e:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8002c70:	687a      	ldr	r2, [r7, #4]
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	18d3      	adds	r3, r2, r3
 8002c7a:	881b      	ldrh	r3, [r3, #0]
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	4a69      	ldr	r2, [pc, #420]	; (8002e24 <USB_ActivateEndpoint+0x5d0>)
 8002c80:	4013      	ands	r3, r2
 8002c82:	b29c      	uxth	r4, r3
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	781b      	ldrb	r3, [r3, #0]
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	18d3      	adds	r3, r2, r3
 8002c8e:	4a69      	ldr	r2, [pc, #420]	; (8002e34 <USB_ActivateEndpoint+0x5e0>)
 8002c90:	4322      	orrs	r2, r4
 8002c92:	b292      	uxth	r2, r2
 8002c94:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	18d3      	adds	r3, r2, r3
 8002ca0:	881b      	ldrh	r3, [r3, #0]
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	4a64      	ldr	r2, [pc, #400]	; (8002e38 <USB_ActivateEndpoint+0x5e4>)
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	b29c      	uxth	r4, r3
 8002caa:	2380      	movs	r3, #128	; 0x80
 8002cac:	015b      	lsls	r3, r3, #5
 8002cae:	4063      	eors	r3, r4
 8002cb0:	b29c      	uxth	r4, r3
 8002cb2:	2380      	movs	r3, #128	; 0x80
 8002cb4:	019b      	lsls	r3, r3, #6
 8002cb6:	4063      	eors	r3, r4
 8002cb8:	b29c      	uxth	r4, r3
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	18d3      	adds	r3, r2, r3
 8002cc4:	4a5d      	ldr	r2, [pc, #372]	; (8002e3c <USB_ActivateEndpoint+0x5e8>)
 8002cc6:	4322      	orrs	r2, r4
 8002cc8:	b292      	uxth	r2, r2
 8002cca:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	781b      	ldrb	r3, [r3, #0]
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	18d3      	adds	r3, r2, r3
 8002cd6:	881b      	ldrh	r3, [r3, #0]
 8002cd8:	b29b      	uxth	r3, r3
 8002cda:	4a59      	ldr	r2, [pc, #356]	; (8002e40 <USB_ActivateEndpoint+0x5ec>)
 8002cdc:	4013      	ands	r3, r2
 8002cde:	b29c      	uxth	r4, r3
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	18d3      	adds	r3, r2, r3
 8002cea:	4a54      	ldr	r2, [pc, #336]	; (8002e3c <USB_ActivateEndpoint+0x5e8>)
 8002cec:	4322      	orrs	r2, r4
 8002cee:	b292      	uxth	r2, r2
 8002cf0:	801a      	strh	r2, [r3, #0]
 8002cf2:	e090      	b.n	8002e16 <USB_ActivateEndpoint+0x5c2>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	18d3      	adds	r3, r2, r3
 8002cfe:	881b      	ldrh	r3, [r3, #0]
 8002d00:	b29c      	uxth	r4, r3
 8002d02:	0022      	movs	r2, r4
 8002d04:	2380      	movs	r3, #128	; 0x80
 8002d06:	01db      	lsls	r3, r3, #7
 8002d08:	4013      	ands	r3, r2
 8002d0a:	d012      	beq.n	8002d32 <USB_ActivateEndpoint+0x4de>
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	781b      	ldrb	r3, [r3, #0]
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	18d3      	adds	r3, r2, r3
 8002d16:	881b      	ldrh	r3, [r3, #0]
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	4a42      	ldr	r2, [pc, #264]	; (8002e24 <USB_ActivateEndpoint+0x5d0>)
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	b29c      	uxth	r4, r3
 8002d20:	687a      	ldr	r2, [r7, #4]
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	18d3      	adds	r3, r2, r3
 8002d2a:	4a41      	ldr	r2, [pc, #260]	; (8002e30 <USB_ActivateEndpoint+0x5dc>)
 8002d2c:	4322      	orrs	r2, r4
 8002d2e:	b292      	uxth	r2, r2
 8002d30:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002d32:	687a      	ldr	r2, [r7, #4]
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	18d3      	adds	r3, r2, r3
 8002d3c:	881b      	ldrh	r3, [r3, #0]
 8002d3e:	b29c      	uxth	r4, r3
 8002d40:	0022      	movs	r2, r4
 8002d42:	2340      	movs	r3, #64	; 0x40
 8002d44:	4013      	ands	r3, r2
 8002d46:	d012      	beq.n	8002d6e <USB_ActivateEndpoint+0x51a>
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	781b      	ldrb	r3, [r3, #0]
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	18d3      	adds	r3, r2, r3
 8002d52:	881b      	ldrh	r3, [r3, #0]
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	4a33      	ldr	r2, [pc, #204]	; (8002e24 <USB_ActivateEndpoint+0x5d0>)
 8002d58:	4013      	ands	r3, r2
 8002d5a:	b29c      	uxth	r4, r3
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	18d3      	adds	r3, r2, r3
 8002d66:	4a33      	ldr	r2, [pc, #204]	; (8002e34 <USB_ActivateEndpoint+0x5e0>)
 8002d68:	4322      	orrs	r2, r4
 8002d6a:	b292      	uxth	r2, r2
 8002d6c:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	18d3      	adds	r3, r2, r3
 8002d78:	881b      	ldrh	r3, [r3, #0]
 8002d7a:	b29b      	uxth	r3, r3
 8002d7c:	4a29      	ldr	r2, [pc, #164]	; (8002e24 <USB_ActivateEndpoint+0x5d0>)
 8002d7e:	4013      	ands	r3, r2
 8002d80:	b29c      	uxth	r4, r3
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	18d3      	adds	r3, r2, r3
 8002d8c:	4a28      	ldr	r2, [pc, #160]	; (8002e30 <USB_ActivateEndpoint+0x5dc>)
 8002d8e:	4322      	orrs	r2, r4
 8002d90:	b292      	uxth	r2, r2
 8002d92:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	78db      	ldrb	r3, [r3, #3]
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d016      	beq.n	8002dca <USB_ActivateEndpoint+0x576>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	18d3      	adds	r3, r2, r3
 8002da6:	881b      	ldrh	r3, [r3, #0]
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	4a25      	ldr	r2, [pc, #148]	; (8002e40 <USB_ActivateEndpoint+0x5ec>)
 8002dac:	4013      	ands	r3, r2
 8002dae:	b29c      	uxth	r4, r3
 8002db0:	2320      	movs	r3, #32
 8002db2:	4063      	eors	r3, r4
 8002db4:	b29c      	uxth	r4, r3
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	18d3      	adds	r3, r2, r3
 8002dc0:	4a1e      	ldr	r2, [pc, #120]	; (8002e3c <USB_ActivateEndpoint+0x5e8>)
 8002dc2:	4322      	orrs	r2, r4
 8002dc4:	b292      	uxth	r2, r2
 8002dc6:	801a      	strh	r2, [r3, #0]
 8002dc8:	e012      	b.n	8002df0 <USB_ActivateEndpoint+0x59c>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	18d3      	adds	r3, r2, r3
 8002dd4:	881b      	ldrh	r3, [r3, #0]
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	4a19      	ldr	r2, [pc, #100]	; (8002e40 <USB_ActivateEndpoint+0x5ec>)
 8002dda:	4013      	ands	r3, r2
 8002ddc:	b29c      	uxth	r4, r3
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	18d3      	adds	r3, r2, r3
 8002de8:	4a14      	ldr	r2, [pc, #80]	; (8002e3c <USB_ActivateEndpoint+0x5e8>)
 8002dea:	4322      	orrs	r2, r4
 8002dec:	b292      	uxth	r2, r2
 8002dee:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	18d3      	adds	r3, r2, r3
 8002dfa:	881b      	ldrh	r3, [r3, #0]
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	4a0e      	ldr	r2, [pc, #56]	; (8002e38 <USB_ActivateEndpoint+0x5e4>)
 8002e00:	4013      	ands	r3, r2
 8002e02:	b29c      	uxth	r4, r3
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	18d3      	adds	r3, r2, r3
 8002e0e:	4a0b      	ldr	r2, [pc, #44]	; (8002e3c <USB_ActivateEndpoint+0x5e8>)
 8002e10:	4322      	orrs	r2, r4
 8002e12:	b292      	uxth	r2, r2
 8002e14:	801a      	strh	r2, [r3, #0]
    }
  }

  return ret;
 8002e16:	2317      	movs	r3, #23
 8002e18:	18fb      	adds	r3, r7, r3
 8002e1a:	781b      	ldrb	r3, [r3, #0]
}
 8002e1c:	0018      	movs	r0, r3
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	b007      	add	sp, #28
 8002e22:	bd90      	pop	{r4, r7, pc}
 8002e24:	ffff8f8f 	.word	0xffff8f8f
 8002e28:	ffff8180 	.word	0xffff8180
 8002e2c:	00000404 	.word	0x00000404
 8002e30:	ffffc080 	.word	0xffffc080
 8002e34:	ffff80c0 	.word	0xffff80c0
 8002e38:	ffffbf8f 	.word	0xffffbf8f
 8002e3c:	ffff8080 	.word	0xffff8080
 8002e40:	ffff8fbf 	.word	0xffff8fbf

08002e44 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002e44:	b590      	push	{r4, r7, lr}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	7b1b      	ldrb	r3, [r3, #12]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d168      	bne.n	8002f28 <USB_DeactivateEndpoint+0xe4>
  {
    if (ep->is_in != 0U)
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	785b      	ldrb	r3, [r3, #1]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d031      	beq.n	8002ec2 <USB_DeactivateEndpoint+0x7e>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	18d3      	adds	r3, r2, r3
 8002e68:	881b      	ldrh	r3, [r3, #0]
 8002e6a:	b29c      	uxth	r4, r3
 8002e6c:	0022      	movs	r2, r4
 8002e6e:	2340      	movs	r3, #64	; 0x40
 8002e70:	4013      	ands	r3, r2
 8002e72:	d012      	beq.n	8002e9a <USB_DeactivateEndpoint+0x56>
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	18d3      	adds	r3, r2, r3
 8002e7e:	881b      	ldrh	r3, [r3, #0]
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	4aa5      	ldr	r2, [pc, #660]	; (8003118 <USB_DeactivateEndpoint+0x2d4>)
 8002e84:	4013      	ands	r3, r2
 8002e86:	b29c      	uxth	r4, r3
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	18d3      	adds	r3, r2, r3
 8002e92:	4aa2      	ldr	r2, [pc, #648]	; (800311c <USB_DeactivateEndpoint+0x2d8>)
 8002e94:	4322      	orrs	r2, r4
 8002e96:	b292      	uxth	r2, r2
 8002e98:	801a      	strh	r2, [r3, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	18d3      	adds	r3, r2, r3
 8002ea4:	881b      	ldrh	r3, [r3, #0]
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	4a9d      	ldr	r2, [pc, #628]	; (8003120 <USB_DeactivateEndpoint+0x2dc>)
 8002eaa:	4013      	ands	r3, r2
 8002eac:	b29c      	uxth	r4, r3
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	18d3      	adds	r3, r2, r3
 8002eb8:	4a9a      	ldr	r2, [pc, #616]	; (8003124 <USB_DeactivateEndpoint+0x2e0>)
 8002eba:	4322      	orrs	r2, r4
 8002ebc:	b292      	uxth	r2, r2
 8002ebe:	801a      	strh	r2, [r3, #0]
 8002ec0:	e124      	b.n	800310c <USB_DeactivateEndpoint+0x2c8>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	18d3      	adds	r3, r2, r3
 8002ecc:	881b      	ldrh	r3, [r3, #0]
 8002ece:	b29c      	uxth	r4, r3
 8002ed0:	0022      	movs	r2, r4
 8002ed2:	2380      	movs	r3, #128	; 0x80
 8002ed4:	01db      	lsls	r3, r3, #7
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	d012      	beq.n	8002f00 <USB_DeactivateEndpoint+0xbc>
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	18d3      	adds	r3, r2, r3
 8002ee4:	881b      	ldrh	r3, [r3, #0]
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	4a8b      	ldr	r2, [pc, #556]	; (8003118 <USB_DeactivateEndpoint+0x2d4>)
 8002eea:	4013      	ands	r3, r2
 8002eec:	b29c      	uxth	r4, r3
 8002eee:	687a      	ldr	r2, [r7, #4]
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	18d3      	adds	r3, r2, r3
 8002ef8:	4a8b      	ldr	r2, [pc, #556]	; (8003128 <USB_DeactivateEndpoint+0x2e4>)
 8002efa:	4322      	orrs	r2, r4
 8002efc:	b292      	uxth	r2, r2
 8002efe:	801a      	strh	r2, [r3, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002f00:	687a      	ldr	r2, [r7, #4]
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	781b      	ldrb	r3, [r3, #0]
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	18d3      	adds	r3, r2, r3
 8002f0a:	881b      	ldrh	r3, [r3, #0]
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	4a87      	ldr	r2, [pc, #540]	; (800312c <USB_DeactivateEndpoint+0x2e8>)
 8002f10:	4013      	ands	r3, r2
 8002f12:	b29c      	uxth	r4, r3
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	18d3      	adds	r3, r2, r3
 8002f1e:	4a81      	ldr	r2, [pc, #516]	; (8003124 <USB_DeactivateEndpoint+0x2e0>)
 8002f20:	4322      	orrs	r2, r4
 8002f22:	b292      	uxth	r2, r2
 8002f24:	801a      	strh	r2, [r3, #0]
 8002f26:	e0f1      	b.n	800310c <USB_DeactivateEndpoint+0x2c8>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	785b      	ldrb	r3, [r3, #1]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d000      	beq.n	8002f32 <USB_DeactivateEndpoint+0xee>
 8002f30:	e076      	b.n	8003020 <USB_DeactivateEndpoint+0x1dc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	781b      	ldrb	r3, [r3, #0]
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	18d3      	adds	r3, r2, r3
 8002f3c:	881b      	ldrh	r3, [r3, #0]
 8002f3e:	b29c      	uxth	r4, r3
 8002f40:	0022      	movs	r2, r4
 8002f42:	2380      	movs	r3, #128	; 0x80
 8002f44:	01db      	lsls	r3, r3, #7
 8002f46:	4013      	ands	r3, r2
 8002f48:	d012      	beq.n	8002f70 <USB_DeactivateEndpoint+0x12c>
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	781b      	ldrb	r3, [r3, #0]
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	18d3      	adds	r3, r2, r3
 8002f54:	881b      	ldrh	r3, [r3, #0]
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	4a6f      	ldr	r2, [pc, #444]	; (8003118 <USB_DeactivateEndpoint+0x2d4>)
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	b29c      	uxth	r4, r3
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	18d3      	adds	r3, r2, r3
 8002f68:	4a6f      	ldr	r2, [pc, #444]	; (8003128 <USB_DeactivateEndpoint+0x2e4>)
 8002f6a:	4322      	orrs	r2, r4
 8002f6c:	b292      	uxth	r2, r2
 8002f6e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	781b      	ldrb	r3, [r3, #0]
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	18d3      	adds	r3, r2, r3
 8002f7a:	881b      	ldrh	r3, [r3, #0]
 8002f7c:	b29c      	uxth	r4, r3
 8002f7e:	0022      	movs	r2, r4
 8002f80:	2340      	movs	r3, #64	; 0x40
 8002f82:	4013      	ands	r3, r2
 8002f84:	d012      	beq.n	8002fac <USB_DeactivateEndpoint+0x168>
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	18d3      	adds	r3, r2, r3
 8002f90:	881b      	ldrh	r3, [r3, #0]
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	4a60      	ldr	r2, [pc, #384]	; (8003118 <USB_DeactivateEndpoint+0x2d4>)
 8002f96:	4013      	ands	r3, r2
 8002f98:	b29c      	uxth	r4, r3
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	18d3      	adds	r3, r2, r3
 8002fa4:	4a5d      	ldr	r2, [pc, #372]	; (800311c <USB_DeactivateEndpoint+0x2d8>)
 8002fa6:	4322      	orrs	r2, r4
 8002fa8:	b292      	uxth	r2, r2
 8002faa:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	781b      	ldrb	r3, [r3, #0]
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	18d3      	adds	r3, r2, r3
 8002fb6:	881b      	ldrh	r3, [r3, #0]
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	4a57      	ldr	r2, [pc, #348]	; (8003118 <USB_DeactivateEndpoint+0x2d4>)
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	b29c      	uxth	r4, r3
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	781b      	ldrb	r3, [r3, #0]
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	18d3      	adds	r3, r2, r3
 8002fca:	4a54      	ldr	r2, [pc, #336]	; (800311c <USB_DeactivateEndpoint+0x2d8>)
 8002fcc:	4322      	orrs	r2, r4
 8002fce:	b292      	uxth	r2, r2
 8002fd0:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	18d3      	adds	r3, r2, r3
 8002fdc:	881b      	ldrh	r3, [r3, #0]
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	4a52      	ldr	r2, [pc, #328]	; (800312c <USB_DeactivateEndpoint+0x2e8>)
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	b29c      	uxth	r4, r3
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	18d3      	adds	r3, r2, r3
 8002ff0:	4a4c      	ldr	r2, [pc, #304]	; (8003124 <USB_DeactivateEndpoint+0x2e0>)
 8002ff2:	4322      	orrs	r2, r4
 8002ff4:	b292      	uxth	r2, r2
 8002ff6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002ff8:	687a      	ldr	r2, [r7, #4]
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	18d3      	adds	r3, r2, r3
 8003002:	881b      	ldrh	r3, [r3, #0]
 8003004:	b29b      	uxth	r3, r3
 8003006:	4a46      	ldr	r2, [pc, #280]	; (8003120 <USB_DeactivateEndpoint+0x2dc>)
 8003008:	4013      	ands	r3, r2
 800300a:	b29c      	uxth	r4, r3
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	781b      	ldrb	r3, [r3, #0]
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	18d3      	adds	r3, r2, r3
 8003016:	4a43      	ldr	r2, [pc, #268]	; (8003124 <USB_DeactivateEndpoint+0x2e0>)
 8003018:	4322      	orrs	r2, r4
 800301a:	b292      	uxth	r2, r2
 800301c:	801a      	strh	r2, [r3, #0]
 800301e:	e075      	b.n	800310c <USB_DeactivateEndpoint+0x2c8>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	781b      	ldrb	r3, [r3, #0]
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	18d3      	adds	r3, r2, r3
 800302a:	881b      	ldrh	r3, [r3, #0]
 800302c:	b29c      	uxth	r4, r3
 800302e:	0022      	movs	r2, r4
 8003030:	2380      	movs	r3, #128	; 0x80
 8003032:	01db      	lsls	r3, r3, #7
 8003034:	4013      	ands	r3, r2
 8003036:	d012      	beq.n	800305e <USB_DeactivateEndpoint+0x21a>
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	18d3      	adds	r3, r2, r3
 8003042:	881b      	ldrh	r3, [r3, #0]
 8003044:	b29b      	uxth	r3, r3
 8003046:	4a34      	ldr	r2, [pc, #208]	; (8003118 <USB_DeactivateEndpoint+0x2d4>)
 8003048:	4013      	ands	r3, r2
 800304a:	b29c      	uxth	r4, r3
 800304c:	687a      	ldr	r2, [r7, #4]
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	781b      	ldrb	r3, [r3, #0]
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	18d3      	adds	r3, r2, r3
 8003056:	4a34      	ldr	r2, [pc, #208]	; (8003128 <USB_DeactivateEndpoint+0x2e4>)
 8003058:	4322      	orrs	r2, r4
 800305a:	b292      	uxth	r2, r2
 800305c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	18d3      	adds	r3, r2, r3
 8003068:	881b      	ldrh	r3, [r3, #0]
 800306a:	b29c      	uxth	r4, r3
 800306c:	0022      	movs	r2, r4
 800306e:	2340      	movs	r3, #64	; 0x40
 8003070:	4013      	ands	r3, r2
 8003072:	d012      	beq.n	800309a <USB_DeactivateEndpoint+0x256>
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	781b      	ldrb	r3, [r3, #0]
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	18d3      	adds	r3, r2, r3
 800307e:	881b      	ldrh	r3, [r3, #0]
 8003080:	b29b      	uxth	r3, r3
 8003082:	4a25      	ldr	r2, [pc, #148]	; (8003118 <USB_DeactivateEndpoint+0x2d4>)
 8003084:	4013      	ands	r3, r2
 8003086:	b29c      	uxth	r4, r3
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	781b      	ldrb	r3, [r3, #0]
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	18d3      	adds	r3, r2, r3
 8003092:	4a22      	ldr	r2, [pc, #136]	; (800311c <USB_DeactivateEndpoint+0x2d8>)
 8003094:	4322      	orrs	r2, r4
 8003096:	b292      	uxth	r2, r2
 8003098:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	18d3      	adds	r3, r2, r3
 80030a4:	881b      	ldrh	r3, [r3, #0]
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	4a1b      	ldr	r2, [pc, #108]	; (8003118 <USB_DeactivateEndpoint+0x2d4>)
 80030aa:	4013      	ands	r3, r2
 80030ac:	b29c      	uxth	r4, r3
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	18d3      	adds	r3, r2, r3
 80030b8:	4a1b      	ldr	r2, [pc, #108]	; (8003128 <USB_DeactivateEndpoint+0x2e4>)
 80030ba:	4322      	orrs	r2, r4
 80030bc:	b292      	uxth	r2, r2
 80030be:	801a      	strh	r2, [r3, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	781b      	ldrb	r3, [r3, #0]
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	18d3      	adds	r3, r2, r3
 80030ca:	881b      	ldrh	r3, [r3, #0]
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	4a14      	ldr	r2, [pc, #80]	; (8003120 <USB_DeactivateEndpoint+0x2dc>)
 80030d0:	4013      	ands	r3, r2
 80030d2:	b29c      	uxth	r4, r3
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	781b      	ldrb	r3, [r3, #0]
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	18d3      	adds	r3, r2, r3
 80030de:	4a11      	ldr	r2, [pc, #68]	; (8003124 <USB_DeactivateEndpoint+0x2e0>)
 80030e0:	4322      	orrs	r2, r4
 80030e2:	b292      	uxth	r2, r2
 80030e4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	18d3      	adds	r3, r2, r3
 80030f0:	881b      	ldrh	r3, [r3, #0]
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	4a0d      	ldr	r2, [pc, #52]	; (800312c <USB_DeactivateEndpoint+0x2e8>)
 80030f6:	4013      	ands	r3, r2
 80030f8:	b29c      	uxth	r4, r3
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	781b      	ldrb	r3, [r3, #0]
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	18d3      	adds	r3, r2, r3
 8003104:	4a07      	ldr	r2, [pc, #28]	; (8003124 <USB_DeactivateEndpoint+0x2e0>)
 8003106:	4322      	orrs	r2, r4
 8003108:	b292      	uxth	r2, r2
 800310a:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 800310c:	2300      	movs	r3, #0
}
 800310e:	0018      	movs	r0, r3
 8003110:	46bd      	mov	sp, r7
 8003112:	b003      	add	sp, #12
 8003114:	bd90      	pop	{r4, r7, pc}
 8003116:	46c0      	nop			; (mov r8, r8)
 8003118:	ffff8f8f 	.word	0xffff8f8f
 800311c:	ffff80c0 	.word	0xffff80c0
 8003120:	ffff8fbf 	.word	0xffff8fbf
 8003124:	ffff8080 	.word	0xffff8080
 8003128:	ffffc080 	.word	0xffffc080
 800312c:	ffffbf8f 	.word	0xffffbf8f

08003130 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003130:	b590      	push	{r4, r7, lr}
 8003132:	b095      	sub	sp, #84	; 0x54
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
 8003138:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	785b      	ldrb	r3, [r3, #1]
 800313e:	2b01      	cmp	r3, #1
 8003140:	d000      	beq.n	8003144 <USB_EPStartXfer+0x14>
 8003142:	e163      	b.n	800340c <USB_EPStartXfer+0x2dc>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	699a      	ldr	r2, [r3, #24]
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	691b      	ldr	r3, [r3, #16]
 800314c:	429a      	cmp	r2, r3
 800314e:	d909      	bls.n	8003164 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	691b      	ldr	r3, [r3, #16]
 8003154:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len -= len;
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	699a      	ldr	r2, [r3, #24]
 800315a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800315c:	1ad2      	subs	r2, r2, r3
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	619a      	str	r2, [r3, #24]
 8003162:	e005      	b.n	8003170 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	699b      	ldr	r3, [r3, #24]
 8003168:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len = 0U;
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	2200      	movs	r2, #0
 800316e:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	7b1b      	ldrb	r3, [r3, #12]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d11b      	bne.n	80031b0 <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	6959      	ldr	r1, [r3, #20]
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	88da      	ldrh	r2, [r3, #6]
 8003180:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003182:	b29b      	uxth	r3, r3
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	f000 fbbb 	bl	8003900 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800318a:	687c      	ldr	r4, [r7, #4]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2250      	movs	r2, #80	; 0x50
 8003190:	5a9b      	ldrh	r3, [r3, r2]
 8003192:	b29b      	uxth	r3, r3
 8003194:	18e4      	adds	r4, r4, r3
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	781b      	ldrb	r3, [r3, #0]
 800319a:	00db      	lsls	r3, r3, #3
 800319c:	18e3      	adds	r3, r4, r3
 800319e:	4acc      	ldr	r2, [pc, #816]	; (80034d0 <USB_EPStartXfer+0x3a0>)
 80031a0:	4694      	mov	ip, r2
 80031a2:	4463      	add	r3, ip
 80031a4:	60fb      	str	r3, [r7, #12]
 80031a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031a8:	b29a      	uxth	r2, r3
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	801a      	strh	r2, [r3, #0]
 80031ae:	e113      	b.n	80033d8 <USB_EPStartXfer+0x2a8>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	18d3      	adds	r3, r2, r3
 80031ba:	881b      	ldrh	r3, [r3, #0]
 80031bc:	b29b      	uxth	r3, r3
 80031be:	001a      	movs	r2, r3
 80031c0:	2340      	movs	r3, #64	; 0x40
 80031c2:	4013      	ands	r3, r2
 80031c4:	d067      	beq.n	8003296 <USB_EPStartXfer+0x166>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80031c6:	687c      	ldr	r4, [r7, #4]
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	785b      	ldrb	r3, [r3, #1]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d147      	bne.n	8003260 <USB_EPStartXfer+0x130>
 80031d0:	687c      	ldr	r4, [r7, #4]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2250      	movs	r2, #80	; 0x50
 80031d6:	5a9b      	ldrh	r3, [r3, r2]
 80031d8:	b29b      	uxth	r3, r3
 80031da:	18e4      	adds	r4, r4, r3
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	00db      	lsls	r3, r3, #3
 80031e2:	18e3      	adds	r3, r4, r3
 80031e4:	4abb      	ldr	r2, [pc, #748]	; (80034d4 <USB_EPStartXfer+0x3a4>)
 80031e6:	4694      	mov	ip, r2
 80031e8:	4463      	add	r3, ip
 80031ea:	613b      	str	r3, [r7, #16]
 80031ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d10e      	bne.n	8003210 <USB_EPStartXfer+0xe0>
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	881b      	ldrh	r3, [r3, #0]
 80031f6:	4ab8      	ldr	r2, [pc, #736]	; (80034d8 <USB_EPStartXfer+0x3a8>)
 80031f8:	4013      	ands	r3, r2
 80031fa:	b29a      	uxth	r2, r3
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	801a      	strh	r2, [r3, #0]
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	881b      	ldrh	r3, [r3, #0]
 8003204:	4ab5      	ldr	r2, [pc, #724]	; (80034dc <USB_EPStartXfer+0x3ac>)
 8003206:	4313      	orrs	r3, r2
 8003208:	b29a      	uxth	r2, r3
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	801a      	strh	r2, [r3, #0]
 800320e:	e03c      	b.n	800328a <USB_EPStartXfer+0x15a>
 8003210:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003212:	2b3e      	cmp	r3, #62	; 0x3e
 8003214:	d810      	bhi.n	8003238 <USB_EPStartXfer+0x108>
 8003216:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003218:	085b      	lsrs	r3, r3, #1
 800321a:	647b      	str	r3, [r7, #68]	; 0x44
 800321c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800321e:	2201      	movs	r2, #1
 8003220:	4013      	ands	r3, r2
 8003222:	d002      	beq.n	800322a <USB_EPStartXfer+0xfa>
 8003224:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003226:	3301      	adds	r3, #1
 8003228:	647b      	str	r3, [r7, #68]	; 0x44
 800322a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800322c:	b29b      	uxth	r3, r3
 800322e:	029b      	lsls	r3, r3, #10
 8003230:	b29a      	uxth	r2, r3
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	801a      	strh	r2, [r3, #0]
 8003236:	e028      	b.n	800328a <USB_EPStartXfer+0x15a>
 8003238:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800323a:	095b      	lsrs	r3, r3, #5
 800323c:	647b      	str	r3, [r7, #68]	; 0x44
 800323e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003240:	221f      	movs	r2, #31
 8003242:	4013      	ands	r3, r2
 8003244:	d102      	bne.n	800324c <USB_EPStartXfer+0x11c>
 8003246:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003248:	3b01      	subs	r3, #1
 800324a:	647b      	str	r3, [r7, #68]	; 0x44
 800324c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800324e:	b29b      	uxth	r3, r3
 8003250:	029b      	lsls	r3, r3, #10
 8003252:	b29b      	uxth	r3, r3
 8003254:	4aa1      	ldr	r2, [pc, #644]	; (80034dc <USB_EPStartXfer+0x3ac>)
 8003256:	4313      	orrs	r3, r2
 8003258:	b29a      	uxth	r2, r3
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	801a      	strh	r2, [r3, #0]
 800325e:	e014      	b.n	800328a <USB_EPStartXfer+0x15a>
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	785b      	ldrb	r3, [r3, #1]
 8003264:	2b01      	cmp	r3, #1
 8003266:	d110      	bne.n	800328a <USB_EPStartXfer+0x15a>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2250      	movs	r2, #80	; 0x50
 800326c:	5a9b      	ldrh	r3, [r3, r2]
 800326e:	b29b      	uxth	r3, r3
 8003270:	18e4      	adds	r4, r4, r3
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	781b      	ldrb	r3, [r3, #0]
 8003276:	00db      	lsls	r3, r3, #3
 8003278:	18e3      	adds	r3, r4, r3
 800327a:	4a96      	ldr	r2, [pc, #600]	; (80034d4 <USB_EPStartXfer+0x3a4>)
 800327c:	4694      	mov	ip, r2
 800327e:	4463      	add	r3, ip
 8003280:	617b      	str	r3, [r7, #20]
 8003282:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003284:	b29a      	uxth	r2, r3
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 800328a:	234e      	movs	r3, #78	; 0x4e
 800328c:	18fb      	adds	r3, r7, r3
 800328e:	683a      	ldr	r2, [r7, #0]
 8003290:	8952      	ldrh	r2, [r2, #10]
 8003292:	801a      	strh	r2, [r3, #0]
 8003294:	e066      	b.n	8003364 <USB_EPStartXfer+0x234>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	785b      	ldrb	r3, [r3, #1]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d147      	bne.n	800332e <USB_EPStartXfer+0x1fe>
 800329e:	687c      	ldr	r4, [r7, #4]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2250      	movs	r2, #80	; 0x50
 80032a4:	5a9b      	ldrh	r3, [r3, r2]
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	18e4      	adds	r4, r4, r3
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	781b      	ldrb	r3, [r3, #0]
 80032ae:	00db      	lsls	r3, r3, #3
 80032b0:	18e3      	adds	r3, r4, r3
 80032b2:	4a87      	ldr	r2, [pc, #540]	; (80034d0 <USB_EPStartXfer+0x3a0>)
 80032b4:	4694      	mov	ip, r2
 80032b6:	4463      	add	r3, ip
 80032b8:	61bb      	str	r3, [r7, #24]
 80032ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d10e      	bne.n	80032de <USB_EPStartXfer+0x1ae>
 80032c0:	69bb      	ldr	r3, [r7, #24]
 80032c2:	881b      	ldrh	r3, [r3, #0]
 80032c4:	4a84      	ldr	r2, [pc, #528]	; (80034d8 <USB_EPStartXfer+0x3a8>)
 80032c6:	4013      	ands	r3, r2
 80032c8:	b29a      	uxth	r2, r3
 80032ca:	69bb      	ldr	r3, [r7, #24]
 80032cc:	801a      	strh	r2, [r3, #0]
 80032ce:	69bb      	ldr	r3, [r7, #24]
 80032d0:	881b      	ldrh	r3, [r3, #0]
 80032d2:	4a82      	ldr	r2, [pc, #520]	; (80034dc <USB_EPStartXfer+0x3ac>)
 80032d4:	4313      	orrs	r3, r2
 80032d6:	b29a      	uxth	r2, r3
 80032d8:	69bb      	ldr	r3, [r7, #24]
 80032da:	801a      	strh	r2, [r3, #0]
 80032dc:	e03d      	b.n	800335a <USB_EPStartXfer+0x22a>
 80032de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032e0:	2b3e      	cmp	r3, #62	; 0x3e
 80032e2:	d810      	bhi.n	8003306 <USB_EPStartXfer+0x1d6>
 80032e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032e6:	085b      	lsrs	r3, r3, #1
 80032e8:	643b      	str	r3, [r7, #64]	; 0x40
 80032ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032ec:	2201      	movs	r2, #1
 80032ee:	4013      	ands	r3, r2
 80032f0:	d002      	beq.n	80032f8 <USB_EPStartXfer+0x1c8>
 80032f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032f4:	3301      	adds	r3, #1
 80032f6:	643b      	str	r3, [r7, #64]	; 0x40
 80032f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	029b      	lsls	r3, r3, #10
 80032fe:	b29a      	uxth	r2, r3
 8003300:	69bb      	ldr	r3, [r7, #24]
 8003302:	801a      	strh	r2, [r3, #0]
 8003304:	e029      	b.n	800335a <USB_EPStartXfer+0x22a>
 8003306:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003308:	095b      	lsrs	r3, r3, #5
 800330a:	643b      	str	r3, [r7, #64]	; 0x40
 800330c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800330e:	221f      	movs	r2, #31
 8003310:	4013      	ands	r3, r2
 8003312:	d102      	bne.n	800331a <USB_EPStartXfer+0x1ea>
 8003314:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003316:	3b01      	subs	r3, #1
 8003318:	643b      	str	r3, [r7, #64]	; 0x40
 800331a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800331c:	b29b      	uxth	r3, r3
 800331e:	029b      	lsls	r3, r3, #10
 8003320:	b29b      	uxth	r3, r3
 8003322:	4a6e      	ldr	r2, [pc, #440]	; (80034dc <USB_EPStartXfer+0x3ac>)
 8003324:	4313      	orrs	r3, r2
 8003326:	b29a      	uxth	r2, r3
 8003328:	69bb      	ldr	r3, [r7, #24]
 800332a:	801a      	strh	r2, [r3, #0]
 800332c:	e015      	b.n	800335a <USB_EPStartXfer+0x22a>
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	785b      	ldrb	r3, [r3, #1]
 8003332:	2b01      	cmp	r3, #1
 8003334:	d111      	bne.n	800335a <USB_EPStartXfer+0x22a>
 8003336:	687c      	ldr	r4, [r7, #4]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2250      	movs	r2, #80	; 0x50
 800333c:	5a9b      	ldrh	r3, [r3, r2]
 800333e:	b29b      	uxth	r3, r3
 8003340:	18e4      	adds	r4, r4, r3
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	781b      	ldrb	r3, [r3, #0]
 8003346:	00db      	lsls	r3, r3, #3
 8003348:	18e3      	adds	r3, r4, r3
 800334a:	4a61      	ldr	r2, [pc, #388]	; (80034d0 <USB_EPStartXfer+0x3a0>)
 800334c:	4694      	mov	ip, r2
 800334e:	4463      	add	r3, ip
 8003350:	61fb      	str	r3, [r7, #28]
 8003352:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003354:	b29a      	uxth	r2, r3
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr0;
 800335a:	234e      	movs	r3, #78	; 0x4e
 800335c:	18fb      	adds	r3, r7, r3
 800335e:	683a      	ldr	r2, [r7, #0]
 8003360:	8912      	ldrh	r2, [r2, #8]
 8003362:	801a      	strh	r2, [r3, #0]
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	6959      	ldr	r1, [r3, #20]
 8003368:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800336a:	b29c      	uxth	r4, r3
 800336c:	234e      	movs	r3, #78	; 0x4e
 800336e:	18fb      	adds	r3, r7, r3
 8003370:	881a      	ldrh	r2, [r3, #0]
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	0023      	movs	r3, r4
 8003376:	f000 fac3 	bl	8003900 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	785b      	ldrb	r3, [r3, #1]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d113      	bne.n	80033aa <USB_EPStartXfer+0x27a>
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	781b      	ldrb	r3, [r3, #0]
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	18d3      	adds	r3, r2, r3
 800338c:	881b      	ldrh	r3, [r3, #0]
 800338e:	b29b      	uxth	r3, r3
 8003390:	4a53      	ldr	r2, [pc, #332]	; (80034e0 <USB_EPStartXfer+0x3b0>)
 8003392:	4013      	ands	r3, r2
 8003394:	b29c      	uxth	r4, r3
 8003396:	687a      	ldr	r2, [r7, #4]
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	18d3      	adds	r3, r2, r3
 80033a0:	4a50      	ldr	r2, [pc, #320]	; (80034e4 <USB_EPStartXfer+0x3b4>)
 80033a2:	4322      	orrs	r2, r4
 80033a4:	b292      	uxth	r2, r2
 80033a6:	801a      	strh	r2, [r3, #0]
 80033a8:	e016      	b.n	80033d8 <USB_EPStartXfer+0x2a8>
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	785b      	ldrb	r3, [r3, #1]
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d112      	bne.n	80033d8 <USB_EPStartXfer+0x2a8>
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	18d3      	adds	r3, r2, r3
 80033bc:	881b      	ldrh	r3, [r3, #0]
 80033be:	b29b      	uxth	r3, r3
 80033c0:	4a47      	ldr	r2, [pc, #284]	; (80034e0 <USB_EPStartXfer+0x3b0>)
 80033c2:	4013      	ands	r3, r2
 80033c4:	b29c      	uxth	r4, r3
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	18d3      	adds	r3, r2, r3
 80033d0:	4a45      	ldr	r2, [pc, #276]	; (80034e8 <USB_EPStartXfer+0x3b8>)
 80033d2:	4322      	orrs	r2, r4
 80033d4:	b292      	uxth	r2, r2
 80033d6:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80033d8:	687a      	ldr	r2, [r7, #4]
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	18d3      	adds	r3, r2, r3
 80033e2:	881b      	ldrh	r3, [r3, #0]
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	4a41      	ldr	r2, [pc, #260]	; (80034ec <USB_EPStartXfer+0x3bc>)
 80033e8:	4013      	ands	r3, r2
 80033ea:	b29c      	uxth	r4, r3
 80033ec:	2310      	movs	r3, #16
 80033ee:	4063      	eors	r3, r4
 80033f0:	b29c      	uxth	r4, r3
 80033f2:	2320      	movs	r3, #32
 80033f4:	4063      	eors	r3, r4
 80033f6:	b29c      	uxth	r4, r3
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	781b      	ldrb	r3, [r3, #0]
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	18d3      	adds	r3, r2, r3
 8003402:	4a3b      	ldr	r2, [pc, #236]	; (80034f0 <USB_EPStartXfer+0x3c0>)
 8003404:	4322      	orrs	r2, r4
 8003406:	b292      	uxth	r2, r2
 8003408:	801a      	strh	r2, [r3, #0]
 800340a:	e152      	b.n	80036b2 <USB_EPStartXfer+0x582>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	699a      	ldr	r2, [r3, #24]
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	691b      	ldr	r3, [r3, #16]
 8003414:	429a      	cmp	r2, r3
 8003416:	d909      	bls.n	800342c <USB_EPStartXfer+0x2fc>
    {
      len = ep->maxpacket;
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	691b      	ldr	r3, [r3, #16]
 800341c:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len -= len;
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	699a      	ldr	r2, [r3, #24]
 8003422:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003424:	1ad2      	subs	r2, r2, r3
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	619a      	str	r2, [r3, #24]
 800342a:	e005      	b.n	8003438 <USB_EPStartXfer+0x308>
    }
    else
    {
      len = ep->xfer_len;
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	699b      	ldr	r3, [r3, #24]
 8003430:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len = 0U;
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	2200      	movs	r2, #0
 8003436:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	7b1b      	ldrb	r3, [r3, #12]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d159      	bne.n	80034f4 <USB_EPStartXfer+0x3c4>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8003440:	687c      	ldr	r4, [r7, #4]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2250      	movs	r2, #80	; 0x50
 8003446:	5a9b      	ldrh	r3, [r3, r2]
 8003448:	b29b      	uxth	r3, r3
 800344a:	18e4      	adds	r4, r4, r3
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	00db      	lsls	r3, r3, #3
 8003452:	18e3      	adds	r3, r4, r3
 8003454:	4a1f      	ldr	r2, [pc, #124]	; (80034d4 <USB_EPStartXfer+0x3a4>)
 8003456:	4694      	mov	ip, r2
 8003458:	4463      	add	r3, ip
 800345a:	623b      	str	r3, [r7, #32]
 800345c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800345e:	2b00      	cmp	r3, #0
 8003460:	d10e      	bne.n	8003480 <USB_EPStartXfer+0x350>
 8003462:	6a3b      	ldr	r3, [r7, #32]
 8003464:	881b      	ldrh	r3, [r3, #0]
 8003466:	4a1c      	ldr	r2, [pc, #112]	; (80034d8 <USB_EPStartXfer+0x3a8>)
 8003468:	4013      	ands	r3, r2
 800346a:	b29a      	uxth	r2, r3
 800346c:	6a3b      	ldr	r3, [r7, #32]
 800346e:	801a      	strh	r2, [r3, #0]
 8003470:	6a3b      	ldr	r3, [r7, #32]
 8003472:	881b      	ldrh	r3, [r3, #0]
 8003474:	4a19      	ldr	r2, [pc, #100]	; (80034dc <USB_EPStartXfer+0x3ac>)
 8003476:	4313      	orrs	r3, r2
 8003478:	b29a      	uxth	r2, r3
 800347a:	6a3b      	ldr	r3, [r7, #32]
 800347c:	801a      	strh	r2, [r3, #0]
 800347e:	e0fd      	b.n	800367c <USB_EPStartXfer+0x54c>
 8003480:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003482:	2b3e      	cmp	r3, #62	; 0x3e
 8003484:	d810      	bhi.n	80034a8 <USB_EPStartXfer+0x378>
 8003486:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003488:	085b      	lsrs	r3, r3, #1
 800348a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800348c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800348e:	2201      	movs	r2, #1
 8003490:	4013      	ands	r3, r2
 8003492:	d002      	beq.n	800349a <USB_EPStartXfer+0x36a>
 8003494:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003496:	3301      	adds	r3, #1
 8003498:	63fb      	str	r3, [r7, #60]	; 0x3c
 800349a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800349c:	b29b      	uxth	r3, r3
 800349e:	029b      	lsls	r3, r3, #10
 80034a0:	b29a      	uxth	r2, r3
 80034a2:	6a3b      	ldr	r3, [r7, #32]
 80034a4:	801a      	strh	r2, [r3, #0]
 80034a6:	e0e9      	b.n	800367c <USB_EPStartXfer+0x54c>
 80034a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034aa:	095b      	lsrs	r3, r3, #5
 80034ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034b0:	221f      	movs	r2, #31
 80034b2:	4013      	ands	r3, r2
 80034b4:	d102      	bne.n	80034bc <USB_EPStartXfer+0x38c>
 80034b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034b8:	3b01      	subs	r3, #1
 80034ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034be:	b29b      	uxth	r3, r3
 80034c0:	029b      	lsls	r3, r3, #10
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	4a05      	ldr	r2, [pc, #20]	; (80034dc <USB_EPStartXfer+0x3ac>)
 80034c6:	4313      	orrs	r3, r2
 80034c8:	b29a      	uxth	r2, r3
 80034ca:	6a3b      	ldr	r3, [r7, #32]
 80034cc:	801a      	strh	r2, [r3, #0]
 80034ce:	e0d5      	b.n	800367c <USB_EPStartXfer+0x54c>
 80034d0:	00000402 	.word	0x00000402
 80034d4:	00000406 	.word	0x00000406
 80034d8:	ffff83ff 	.word	0xffff83ff
 80034dc:	ffff8000 	.word	0xffff8000
 80034e0:	ffff8f8f 	.word	0xffff8f8f
 80034e4:	ffff80c0 	.word	0xffff80c0
 80034e8:	ffffc080 	.word	0xffffc080
 80034ec:	ffff8fbf 	.word	0xffff8fbf
 80034f0:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	785b      	ldrb	r3, [r3, #1]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d147      	bne.n	800358c <USB_EPStartXfer+0x45c>
 80034fc:	687c      	ldr	r4, [r7, #4]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2250      	movs	r2, #80	; 0x50
 8003502:	5a9b      	ldrh	r3, [r3, r2]
 8003504:	b29b      	uxth	r3, r3
 8003506:	18e4      	adds	r4, r4, r3
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	00db      	lsls	r3, r3, #3
 800350e:	18e3      	adds	r3, r4, r3
 8003510:	4a6a      	ldr	r2, [pc, #424]	; (80036bc <USB_EPStartXfer+0x58c>)
 8003512:	4694      	mov	ip, r2
 8003514:	4463      	add	r3, ip
 8003516:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003518:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800351a:	2b00      	cmp	r3, #0
 800351c:	d10e      	bne.n	800353c <USB_EPStartXfer+0x40c>
 800351e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003520:	881b      	ldrh	r3, [r3, #0]
 8003522:	4a67      	ldr	r2, [pc, #412]	; (80036c0 <USB_EPStartXfer+0x590>)
 8003524:	4013      	ands	r3, r2
 8003526:	b29a      	uxth	r2, r3
 8003528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800352a:	801a      	strh	r2, [r3, #0]
 800352c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800352e:	881b      	ldrh	r3, [r3, #0]
 8003530:	4a64      	ldr	r2, [pc, #400]	; (80036c4 <USB_EPStartXfer+0x594>)
 8003532:	4313      	orrs	r3, r2
 8003534:	b29a      	uxth	r2, r3
 8003536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003538:	801a      	strh	r2, [r3, #0]
 800353a:	e03d      	b.n	80035b8 <USB_EPStartXfer+0x488>
 800353c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800353e:	2b3e      	cmp	r3, #62	; 0x3e
 8003540:	d810      	bhi.n	8003564 <USB_EPStartXfer+0x434>
 8003542:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003544:	085b      	lsrs	r3, r3, #1
 8003546:	63bb      	str	r3, [r7, #56]	; 0x38
 8003548:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800354a:	2201      	movs	r2, #1
 800354c:	4013      	ands	r3, r2
 800354e:	d002      	beq.n	8003556 <USB_EPStartXfer+0x426>
 8003550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003552:	3301      	adds	r3, #1
 8003554:	63bb      	str	r3, [r7, #56]	; 0x38
 8003556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003558:	b29b      	uxth	r3, r3
 800355a:	029b      	lsls	r3, r3, #10
 800355c:	b29a      	uxth	r2, r3
 800355e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003560:	801a      	strh	r2, [r3, #0]
 8003562:	e029      	b.n	80035b8 <USB_EPStartXfer+0x488>
 8003564:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003566:	095b      	lsrs	r3, r3, #5
 8003568:	63bb      	str	r3, [r7, #56]	; 0x38
 800356a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800356c:	221f      	movs	r2, #31
 800356e:	4013      	ands	r3, r2
 8003570:	d102      	bne.n	8003578 <USB_EPStartXfer+0x448>
 8003572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003574:	3b01      	subs	r3, #1
 8003576:	63bb      	str	r3, [r7, #56]	; 0x38
 8003578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800357a:	b29b      	uxth	r3, r3
 800357c:	029b      	lsls	r3, r3, #10
 800357e:	b29b      	uxth	r3, r3
 8003580:	4a50      	ldr	r2, [pc, #320]	; (80036c4 <USB_EPStartXfer+0x594>)
 8003582:	4313      	orrs	r3, r2
 8003584:	b29a      	uxth	r2, r3
 8003586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003588:	801a      	strh	r2, [r3, #0]
 800358a:	e015      	b.n	80035b8 <USB_EPStartXfer+0x488>
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	785b      	ldrb	r3, [r3, #1]
 8003590:	2b01      	cmp	r3, #1
 8003592:	d111      	bne.n	80035b8 <USB_EPStartXfer+0x488>
 8003594:	687c      	ldr	r4, [r7, #4]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2250      	movs	r2, #80	; 0x50
 800359a:	5a9b      	ldrh	r3, [r3, r2]
 800359c:	b29b      	uxth	r3, r3
 800359e:	18e4      	adds	r4, r4, r3
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	00db      	lsls	r3, r3, #3
 80035a6:	18e3      	adds	r3, r4, r3
 80035a8:	4a44      	ldr	r2, [pc, #272]	; (80036bc <USB_EPStartXfer+0x58c>)
 80035aa:	4694      	mov	ip, r2
 80035ac:	4463      	add	r3, ip
 80035ae:	633b      	str	r3, [r7, #48]	; 0x30
 80035b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035b2:	b29a      	uxth	r2, r3
 80035b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035b6:	801a      	strh	r2, [r3, #0]
 80035b8:	687c      	ldr	r4, [r7, #4]
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	785b      	ldrb	r3, [r3, #1]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d147      	bne.n	8003652 <USB_EPStartXfer+0x522>
 80035c2:	687c      	ldr	r4, [r7, #4]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2250      	movs	r2, #80	; 0x50
 80035c8:	5a9b      	ldrh	r3, [r3, r2]
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	18e4      	adds	r4, r4, r3
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	781b      	ldrb	r3, [r3, #0]
 80035d2:	00db      	lsls	r3, r3, #3
 80035d4:	18e3      	adds	r3, r4, r3
 80035d6:	4a3c      	ldr	r2, [pc, #240]	; (80036c8 <USB_EPStartXfer+0x598>)
 80035d8:	4694      	mov	ip, r2
 80035da:	4463      	add	r3, ip
 80035dc:	627b      	str	r3, [r7, #36]	; 0x24
 80035de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d10e      	bne.n	8003602 <USB_EPStartXfer+0x4d2>
 80035e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e6:	881b      	ldrh	r3, [r3, #0]
 80035e8:	4a35      	ldr	r2, [pc, #212]	; (80036c0 <USB_EPStartXfer+0x590>)
 80035ea:	4013      	ands	r3, r2
 80035ec:	b29a      	uxth	r2, r3
 80035ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f0:	801a      	strh	r2, [r3, #0]
 80035f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f4:	881b      	ldrh	r3, [r3, #0]
 80035f6:	4a33      	ldr	r2, [pc, #204]	; (80036c4 <USB_EPStartXfer+0x594>)
 80035f8:	4313      	orrs	r3, r2
 80035fa:	b29a      	uxth	r2, r3
 80035fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fe:	801a      	strh	r2, [r3, #0]
 8003600:	e03c      	b.n	800367c <USB_EPStartXfer+0x54c>
 8003602:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003604:	2b3e      	cmp	r3, #62	; 0x3e
 8003606:	d810      	bhi.n	800362a <USB_EPStartXfer+0x4fa>
 8003608:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800360a:	085b      	lsrs	r3, r3, #1
 800360c:	637b      	str	r3, [r7, #52]	; 0x34
 800360e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003610:	2201      	movs	r2, #1
 8003612:	4013      	ands	r3, r2
 8003614:	d002      	beq.n	800361c <USB_EPStartXfer+0x4ec>
 8003616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003618:	3301      	adds	r3, #1
 800361a:	637b      	str	r3, [r7, #52]	; 0x34
 800361c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800361e:	b29b      	uxth	r3, r3
 8003620:	029b      	lsls	r3, r3, #10
 8003622:	b29a      	uxth	r2, r3
 8003624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003626:	801a      	strh	r2, [r3, #0]
 8003628:	e028      	b.n	800367c <USB_EPStartXfer+0x54c>
 800362a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800362c:	095b      	lsrs	r3, r3, #5
 800362e:	637b      	str	r3, [r7, #52]	; 0x34
 8003630:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003632:	221f      	movs	r2, #31
 8003634:	4013      	ands	r3, r2
 8003636:	d102      	bne.n	800363e <USB_EPStartXfer+0x50e>
 8003638:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800363a:	3b01      	subs	r3, #1
 800363c:	637b      	str	r3, [r7, #52]	; 0x34
 800363e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003640:	b29b      	uxth	r3, r3
 8003642:	029b      	lsls	r3, r3, #10
 8003644:	b29b      	uxth	r3, r3
 8003646:	4a1f      	ldr	r2, [pc, #124]	; (80036c4 <USB_EPStartXfer+0x594>)
 8003648:	4313      	orrs	r3, r2
 800364a:	b29a      	uxth	r2, r3
 800364c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364e:	801a      	strh	r2, [r3, #0]
 8003650:	e014      	b.n	800367c <USB_EPStartXfer+0x54c>
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	785b      	ldrb	r3, [r3, #1]
 8003656:	2b01      	cmp	r3, #1
 8003658:	d110      	bne.n	800367c <USB_EPStartXfer+0x54c>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2250      	movs	r2, #80	; 0x50
 800365e:	5a9b      	ldrh	r3, [r3, r2]
 8003660:	b29b      	uxth	r3, r3
 8003662:	18e4      	adds	r4, r4, r3
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	00db      	lsls	r3, r3, #3
 800366a:	18e3      	adds	r3, r4, r3
 800366c:	4a16      	ldr	r2, [pc, #88]	; (80036c8 <USB_EPStartXfer+0x598>)
 800366e:	4694      	mov	ip, r2
 8003670:	4463      	add	r3, ip
 8003672:	62bb      	str	r3, [r7, #40]	; 0x28
 8003674:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003676:	b29a      	uxth	r2, r3
 8003678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800367a:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	18d3      	adds	r3, r2, r3
 8003686:	881b      	ldrh	r3, [r3, #0]
 8003688:	b29b      	uxth	r3, r3
 800368a:	4a10      	ldr	r2, [pc, #64]	; (80036cc <USB_EPStartXfer+0x59c>)
 800368c:	4013      	ands	r3, r2
 800368e:	b29c      	uxth	r4, r3
 8003690:	2380      	movs	r3, #128	; 0x80
 8003692:	015b      	lsls	r3, r3, #5
 8003694:	4063      	eors	r3, r4
 8003696:	b29c      	uxth	r4, r3
 8003698:	2380      	movs	r3, #128	; 0x80
 800369a:	019b      	lsls	r3, r3, #6
 800369c:	4063      	eors	r3, r4
 800369e:	b29c      	uxth	r4, r3
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	18d3      	adds	r3, r2, r3
 80036aa:	4a09      	ldr	r2, [pc, #36]	; (80036d0 <USB_EPStartXfer+0x5a0>)
 80036ac:	4322      	orrs	r2, r4
 80036ae:	b292      	uxth	r2, r2
 80036b0:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 80036b2:	2300      	movs	r3, #0
}
 80036b4:	0018      	movs	r0, r3
 80036b6:	46bd      	mov	sp, r7
 80036b8:	b015      	add	sp, #84	; 0x54
 80036ba:	bd90      	pop	{r4, r7, pc}
 80036bc:	00000402 	.word	0x00000402
 80036c0:	ffff83ff 	.word	0xffff83ff
 80036c4:	ffff8000 	.word	0xffff8000
 80036c8:	00000406 	.word	0x00000406
 80036cc:	ffffbf8f 	.word	0xffffbf8f
 80036d0:	ffff8080 	.word	0xffff8080

080036d4 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80036d4:	b590      	push	{r4, r7, lr}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	785b      	ldrb	r3, [r3, #1]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d016      	beq.n	8003714 <USB_EPSetStall+0x40>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	009b      	lsls	r3, r3, #2
 80036ee:	18d3      	adds	r3, r2, r3
 80036f0:	881b      	ldrh	r3, [r3, #0]
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	4a15      	ldr	r2, [pc, #84]	; (800374c <USB_EPSetStall+0x78>)
 80036f6:	4013      	ands	r3, r2
 80036f8:	b29c      	uxth	r4, r3
 80036fa:	2310      	movs	r3, #16
 80036fc:	4063      	eors	r3, r4
 80036fe:	b29c      	uxth	r4, r3
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	781b      	ldrb	r3, [r3, #0]
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	18d3      	adds	r3, r2, r3
 800370a:	4a11      	ldr	r2, [pc, #68]	; (8003750 <USB_EPSetStall+0x7c>)
 800370c:	4322      	orrs	r2, r4
 800370e:	b292      	uxth	r2, r2
 8003710:	801a      	strh	r2, [r3, #0]
 8003712:	e016      	b.n	8003742 <USB_EPSetStall+0x6e>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	781b      	ldrb	r3, [r3, #0]
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	18d3      	adds	r3, r2, r3
 800371e:	881b      	ldrh	r3, [r3, #0]
 8003720:	b29b      	uxth	r3, r3
 8003722:	4a0c      	ldr	r2, [pc, #48]	; (8003754 <USB_EPSetStall+0x80>)
 8003724:	4013      	ands	r3, r2
 8003726:	b29c      	uxth	r4, r3
 8003728:	2380      	movs	r3, #128	; 0x80
 800372a:	015b      	lsls	r3, r3, #5
 800372c:	4063      	eors	r3, r4
 800372e:	b29c      	uxth	r4, r3
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	18d3      	adds	r3, r2, r3
 800373a:	4a05      	ldr	r2, [pc, #20]	; (8003750 <USB_EPSetStall+0x7c>)
 800373c:	4322      	orrs	r2, r4
 800373e:	b292      	uxth	r2, r2
 8003740:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8003742:	2300      	movs	r3, #0
}
 8003744:	0018      	movs	r0, r3
 8003746:	46bd      	mov	sp, r7
 8003748:	b003      	add	sp, #12
 800374a:	bd90      	pop	{r4, r7, pc}
 800374c:	ffff8fbf 	.word	0xffff8fbf
 8003750:	ffff8080 	.word	0xffff8080
 8003754:	ffffbf8f 	.word	0xffffbf8f

08003758 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003758:	b590      	push	{r4, r7, lr}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	7b1b      	ldrb	r3, [r3, #12]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d000      	beq.n	800376c <USB_EPClearStall+0x14>
 800376a:	e076      	b.n	800385a <USB_EPClearStall+0x102>
  {
    if (ep->is_in != 0U)
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	785b      	ldrb	r3, [r3, #1]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d038      	beq.n	80037e6 <USB_EPClearStall+0x8e>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003774:	687a      	ldr	r2, [r7, #4]
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	781b      	ldrb	r3, [r3, #0]
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	18d3      	adds	r3, r2, r3
 800377e:	881b      	ldrh	r3, [r3, #0]
 8003780:	b29c      	uxth	r4, r3
 8003782:	0022      	movs	r2, r4
 8003784:	2340      	movs	r3, #64	; 0x40
 8003786:	4013      	ands	r3, r2
 8003788:	d012      	beq.n	80037b0 <USB_EPClearStall+0x58>
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	781b      	ldrb	r3, [r3, #0]
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	18d3      	adds	r3, r2, r3
 8003794:	881b      	ldrh	r3, [r3, #0]
 8003796:	b29b      	uxth	r3, r3
 8003798:	4a32      	ldr	r2, [pc, #200]	; (8003864 <USB_EPClearStall+0x10c>)
 800379a:	4013      	ands	r3, r2
 800379c:	b29c      	uxth	r4, r3
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	781b      	ldrb	r3, [r3, #0]
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	18d3      	adds	r3, r2, r3
 80037a8:	4a2f      	ldr	r2, [pc, #188]	; (8003868 <USB_EPClearStall+0x110>)
 80037aa:	4322      	orrs	r2, r4
 80037ac:	b292      	uxth	r2, r2
 80037ae:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	78db      	ldrb	r3, [r3, #3]
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d050      	beq.n	800385a <USB_EPClearStall+0x102>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	781b      	ldrb	r3, [r3, #0]
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	18d3      	adds	r3, r2, r3
 80037c2:	881b      	ldrh	r3, [r3, #0]
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	4a29      	ldr	r2, [pc, #164]	; (800386c <USB_EPClearStall+0x114>)
 80037c8:	4013      	ands	r3, r2
 80037ca:	b29c      	uxth	r4, r3
 80037cc:	2320      	movs	r3, #32
 80037ce:	4063      	eors	r3, r4
 80037d0:	b29c      	uxth	r4, r3
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	781b      	ldrb	r3, [r3, #0]
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	18d3      	adds	r3, r2, r3
 80037dc:	4a24      	ldr	r2, [pc, #144]	; (8003870 <USB_EPClearStall+0x118>)
 80037de:	4322      	orrs	r2, r4
 80037e0:	b292      	uxth	r2, r2
 80037e2:	801a      	strh	r2, [r3, #0]
 80037e4:	e039      	b.n	800385a <USB_EPClearStall+0x102>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	18d3      	adds	r3, r2, r3
 80037f0:	881b      	ldrh	r3, [r3, #0]
 80037f2:	b29c      	uxth	r4, r3
 80037f4:	0022      	movs	r2, r4
 80037f6:	2380      	movs	r3, #128	; 0x80
 80037f8:	01db      	lsls	r3, r3, #7
 80037fa:	4013      	ands	r3, r2
 80037fc:	d012      	beq.n	8003824 <USB_EPClearStall+0xcc>
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	781b      	ldrb	r3, [r3, #0]
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	18d3      	adds	r3, r2, r3
 8003808:	881b      	ldrh	r3, [r3, #0]
 800380a:	b29b      	uxth	r3, r3
 800380c:	4a15      	ldr	r2, [pc, #84]	; (8003864 <USB_EPClearStall+0x10c>)
 800380e:	4013      	ands	r3, r2
 8003810:	b29c      	uxth	r4, r3
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	781b      	ldrb	r3, [r3, #0]
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	18d3      	adds	r3, r2, r3
 800381c:	4a15      	ldr	r2, [pc, #84]	; (8003874 <USB_EPClearStall+0x11c>)
 800381e:	4322      	orrs	r2, r4
 8003820:	b292      	uxth	r2, r2
 8003822:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	18d3      	adds	r3, r2, r3
 800382e:	881b      	ldrh	r3, [r3, #0]
 8003830:	b29b      	uxth	r3, r3
 8003832:	4a11      	ldr	r2, [pc, #68]	; (8003878 <USB_EPClearStall+0x120>)
 8003834:	4013      	ands	r3, r2
 8003836:	b29c      	uxth	r4, r3
 8003838:	2380      	movs	r3, #128	; 0x80
 800383a:	015b      	lsls	r3, r3, #5
 800383c:	4063      	eors	r3, r4
 800383e:	b29c      	uxth	r4, r3
 8003840:	2380      	movs	r3, #128	; 0x80
 8003842:	019b      	lsls	r3, r3, #6
 8003844:	4063      	eors	r3, r4
 8003846:	b29c      	uxth	r4, r3
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	781b      	ldrb	r3, [r3, #0]
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	18d3      	adds	r3, r2, r3
 8003852:	4a07      	ldr	r2, [pc, #28]	; (8003870 <USB_EPClearStall+0x118>)
 8003854:	4322      	orrs	r2, r4
 8003856:	b292      	uxth	r2, r2
 8003858:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 800385a:	2300      	movs	r3, #0
}
 800385c:	0018      	movs	r0, r3
 800385e:	46bd      	mov	sp, r7
 8003860:	b003      	add	sp, #12
 8003862:	bd90      	pop	{r4, r7, pc}
 8003864:	ffff8f8f 	.word	0xffff8f8f
 8003868:	ffff80c0 	.word	0xffff80c0
 800386c:	ffff8fbf 	.word	0xffff8fbf
 8003870:	ffff8080 	.word	0xffff8080
 8003874:	ffffc080 	.word	0xffffc080
 8003878:	ffffbf8f 	.word	0xffffbf8f

0800387c <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b082      	sub	sp, #8
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	000a      	movs	r2, r1
 8003886:	1cfb      	adds	r3, r7, #3
 8003888:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 800388a:	1cfb      	adds	r3, r7, #3
 800388c:	781b      	ldrb	r3, [r3, #0]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d103      	bne.n	800389a <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	224c      	movs	r2, #76	; 0x4c
 8003896:	2180      	movs	r1, #128	; 0x80
 8003898:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 800389a:	2300      	movs	r3, #0
}
 800389c:	0018      	movs	r0, r3
 800389e:	46bd      	mov	sp, r7
 80038a0:	b002      	add	sp, #8
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b082      	sub	sp, #8
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2258      	movs	r2, #88	; 0x58
 80038b0:	5a9b      	ldrh	r3, [r3, r2]
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	4a05      	ldr	r2, [pc, #20]	; (80038cc <USB_DevConnect+0x28>)
 80038b6:	4313      	orrs	r3, r2
 80038b8:	b299      	uxth	r1, r3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2258      	movs	r2, #88	; 0x58
 80038be:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80038c0:	2300      	movs	r3, #0
}
 80038c2:	0018      	movs	r0, r3
 80038c4:	46bd      	mov	sp, r7
 80038c6:	b002      	add	sp, #8
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	46c0      	nop			; (mov r8, r8)
 80038cc:	ffff8000 	.word	0xffff8000

080038d0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b084      	sub	sp, #16
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2244      	movs	r2, #68	; 0x44
 80038dc:	5a9b      	ldrh	r3, [r3, r2]
 80038de:	b29b      	uxth	r3, r3
 80038e0:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80038e2:	68fb      	ldr	r3, [r7, #12]
}
 80038e4:	0018      	movs	r0, r3
 80038e6:	46bd      	mov	sp, r7
 80038e8:	b004      	add	sp, #16
 80038ea:	bd80      	pop	{r7, pc}

080038ec <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b082      	sub	sp, #8
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80038f6:	2300      	movs	r3, #0
}
 80038f8:	0018      	movs	r0, r3
 80038fa:	46bd      	mov	sp, r7
 80038fc:	b002      	add	sp, #8
 80038fe:	bd80      	pop	{r7, pc}

08003900 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b08c      	sub	sp, #48	; 0x30
 8003904:	af00      	add	r7, sp, #0
 8003906:	60f8      	str	r0, [r7, #12]
 8003908:	60b9      	str	r1, [r7, #8]
 800390a:	0019      	movs	r1, r3
 800390c:	1dbb      	adds	r3, r7, #6
 800390e:	801a      	strh	r2, [r3, #0]
 8003910:	1d3b      	adds	r3, r7, #4
 8003912:	1c0a      	adds	r2, r1, #0
 8003914:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8003916:	1d3b      	adds	r3, r7, #4
 8003918:	881b      	ldrh	r3, [r3, #0]
 800391a:	3301      	adds	r3, #1
 800391c:	085b      	lsrs	r3, r3, #1
 800391e:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003928:	1dbb      	adds	r3, r7, #6
 800392a:	881a      	ldrh	r2, [r3, #0]
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	18d3      	adds	r3, r2, r3
 8003930:	2280      	movs	r2, #128	; 0x80
 8003932:	00d2      	lsls	r2, r2, #3
 8003934:	4694      	mov	ip, r2
 8003936:	4463      	add	r3, ip
 8003938:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800393a:	6a3b      	ldr	r3, [r7, #32]
 800393c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800393e:	e01b      	b.n	8003978 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8003940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003942:	781b      	ldrb	r3, [r3, #0]
 8003944:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8003946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003948:	3301      	adds	r3, #1
 800394a:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800394c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394e:	781b      	ldrb	r3, [r3, #0]
 8003950:	b29b      	uxth	r3, r3
 8003952:	021b      	lsls	r3, r3, #8
 8003954:	b29b      	uxth	r3, r3
 8003956:	001a      	movs	r2, r3
 8003958:	69bb      	ldr	r3, [r7, #24]
 800395a:	4313      	orrs	r3, r2
 800395c:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	b29a      	uxth	r2, r3
 8003962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003964:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8003966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003968:	3302      	adds	r3, #2
 800396a:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 800396c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396e:	3301      	adds	r3, #1
 8003970:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8003972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003974:	3b01      	subs	r3, #1
 8003976:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800397a:	2b00      	cmp	r3, #0
 800397c:	d1e0      	bne.n	8003940 <USB_WritePMA+0x40>
  }
}
 800397e:	46c0      	nop			; (mov r8, r8)
 8003980:	46bd      	mov	sp, r7
 8003982:	b00c      	add	sp, #48	; 0x30
 8003984:	bd80      	pop	{r7, pc}

08003986 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8003986:	b580      	push	{r7, lr}
 8003988:	b08a      	sub	sp, #40	; 0x28
 800398a:	af00      	add	r7, sp, #0
 800398c:	60f8      	str	r0, [r7, #12]
 800398e:	60b9      	str	r1, [r7, #8]
 8003990:	0019      	movs	r1, r3
 8003992:	1dbb      	adds	r3, r7, #6
 8003994:	801a      	strh	r2, [r3, #0]
 8003996:	1d3b      	adds	r3, r7, #4
 8003998:	1c0a      	adds	r2, r1, #0
 800399a:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800399c:	1d3b      	adds	r3, r7, #4
 800399e:	881b      	ldrh	r3, [r3, #0]
 80039a0:	085b      	lsrs	r3, r3, #1
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80039ae:	1dbb      	adds	r3, r7, #6
 80039b0:	881a      	ldrh	r2, [r3, #0]
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	18d3      	adds	r3, r2, r3
 80039b6:	2280      	movs	r2, #128	; 0x80
 80039b8:	00d2      	lsls	r2, r2, #3
 80039ba:	4694      	mov	ip, r2
 80039bc:	4463      	add	r3, ip
 80039be:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80039c0:	69bb      	ldr	r3, [r7, #24]
 80039c2:	627b      	str	r3, [r7, #36]	; 0x24
 80039c4:	e018      	b.n	80039f8 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80039c6:	6a3b      	ldr	r3, [r7, #32]
 80039c8:	881b      	ldrh	r3, [r3, #0]
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80039ce:	6a3b      	ldr	r3, [r7, #32]
 80039d0:	3302      	adds	r3, #2
 80039d2:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	b2da      	uxtb	r2, r3
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	3301      	adds	r3, #1
 80039e0:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	0a1b      	lsrs	r3, r3, #8
 80039e6:	b2da      	uxtb	r2, r3
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	3301      	adds	r3, #1
 80039f0:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 80039f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f4:	3b01      	subs	r3, #1
 80039f6:	627b      	str	r3, [r7, #36]	; 0x24
 80039f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d1e3      	bne.n	80039c6 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80039fe:	1d3b      	adds	r3, r7, #4
 8003a00:	881b      	ldrh	r3, [r3, #0]
 8003a02:	2201      	movs	r2, #1
 8003a04:	4013      	ands	r3, r2
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d007      	beq.n	8003a1c <USB_ReadPMA+0x96>
  {
    temp = *pdwVal;
 8003a0c:	6a3b      	ldr	r3, [r7, #32]
 8003a0e:	881b      	ldrh	r3, [r3, #0]
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	b2da      	uxtb	r2, r3
 8003a18:	69fb      	ldr	r3, [r7, #28]
 8003a1a:	701a      	strb	r2, [r3, #0]
  }
}
 8003a1c:	46c0      	nop			; (mov r8, r8)
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	b00a      	add	sp, #40	; 0x28
 8003a22:	bd80      	pop	{r7, pc}

08003a24 <get_ip>:
static dhcp_config_t *config = NULL;

char magic_cookie[] = {0x63,0x82,0x53,0x63};

static uint32_t get_ip(const uint8_t *pnt)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b084      	sub	sp, #16
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  uint32_t result;
  memcpy(&result, pnt, sizeof(result));
 8003a2c:	6879      	ldr	r1, [r7, #4]
 8003a2e:	230c      	movs	r3, #12
 8003a30:	18fb      	adds	r3, r7, r3
 8003a32:	2204      	movs	r2, #4
 8003a34:	0018      	movs	r0, r3
 8003a36:	f00c f934 	bl	800fca2 <memcpy>
  return result;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
}
 8003a3c:	0018      	movs	r0, r3
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	b004      	add	sp, #16
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <set_ip>:

static void set_ip(uint8_t *pnt, uint32_t value)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b082      	sub	sp, #8
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	6039      	str	r1, [r7, #0]
  memcpy(pnt, &value, sizeof(value));
 8003a4e:	0039      	movs	r1, r7
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2204      	movs	r2, #4
 8003a54:	0018      	movs	r0, r3
 8003a56:	f00c f924 	bl	800fca2 <memcpy>
}
 8003a5a:	46c0      	nop			; (mov r8, r8)
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	b002      	add	sp, #8
 8003a60:	bd80      	pop	{r7, pc}
	...

08003a64 <entry_by_ip>:

static dhcp_entry_t *entry_by_ip(uint32_t ip)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
	int i;
	for (i = 0; i < config->num_entry; i++)
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	60fb      	str	r3, [r7, #12]
 8003a70:	e01d      	b.n	8003aae <entry_by_ip+0x4a>
		if (get_ip(config->entries[i].addr) == ip)
 8003a72:	4b14      	ldr	r3, [pc, #80]	; (8003ac4 <entry_by_ip+0x60>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	6959      	ldr	r1, [r3, #20]
 8003a78:	68fa      	ldr	r2, [r7, #12]
 8003a7a:	0013      	movs	r3, r2
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	189b      	adds	r3, r3, r2
 8003a80:	009b      	lsls	r3, r3, #2
 8003a82:	18cb      	adds	r3, r1, r3
 8003a84:	3306      	adds	r3, #6
 8003a86:	0018      	movs	r0, r3
 8003a88:	f7ff ffcc 	bl	8003a24 <get_ip>
 8003a8c:	0002      	movs	r2, r0
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d109      	bne.n	8003aa8 <entry_by_ip+0x44>
			return &config->entries[i];
 8003a94:	4b0b      	ldr	r3, [pc, #44]	; (8003ac4 <entry_by_ip+0x60>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	6959      	ldr	r1, [r3, #20]
 8003a9a:	68fa      	ldr	r2, [r7, #12]
 8003a9c:	0013      	movs	r3, r2
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	189b      	adds	r3, r3, r2
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	18cb      	adds	r3, r1, r3
 8003aa6:	e009      	b.n	8003abc <entry_by_ip+0x58>
	for (i = 0; i < config->num_entry; i++)
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	3301      	adds	r3, #1
 8003aac:	60fb      	str	r3, [r7, #12]
 8003aae:	4b05      	ldr	r3, [pc, #20]	; (8003ac4 <entry_by_ip+0x60>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	691b      	ldr	r3, [r3, #16]
 8003ab4:	68fa      	ldr	r2, [r7, #12]
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	dbdb      	blt.n	8003a72 <entry_by_ip+0xe>
	return NULL;
 8003aba:	2300      	movs	r3, #0
}
 8003abc:	0018      	movs	r0, r3
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	b004      	add	sp, #16
 8003ac2:	bd80      	pop	{r7, pc}
 8003ac4:	200000bc 	.word	0x200000bc

08003ac8 <entry_by_mac>:

static dhcp_entry_t *entry_by_mac(uint8_t *mac)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
	int i;
	for (i = 0; i < config->num_entry; i++)
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	60fb      	str	r3, [r7, #12]
 8003ad4:	e01d      	b.n	8003b12 <entry_by_mac+0x4a>
		if (memcmp(config->entries[i].mac, mac, 6) == 0)
 8003ad6:	4b14      	ldr	r3, [pc, #80]	; (8003b28 <entry_by_mac+0x60>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	6959      	ldr	r1, [r3, #20]
 8003adc:	68fa      	ldr	r2, [r7, #12]
 8003ade:	0013      	movs	r3, r2
 8003ae0:	009b      	lsls	r3, r3, #2
 8003ae2:	189b      	adds	r3, r3, r2
 8003ae4:	009b      	lsls	r3, r3, #2
 8003ae6:	18cb      	adds	r3, r1, r3
 8003ae8:	0018      	movs	r0, r3
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2206      	movs	r2, #6
 8003aee:	0019      	movs	r1, r3
 8003af0:	f00c f8c8 	bl	800fc84 <memcmp>
 8003af4:	1e03      	subs	r3, r0, #0
 8003af6:	d109      	bne.n	8003b0c <entry_by_mac+0x44>
			return &config->entries[i];
 8003af8:	4b0b      	ldr	r3, [pc, #44]	; (8003b28 <entry_by_mac+0x60>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	6959      	ldr	r1, [r3, #20]
 8003afe:	68fa      	ldr	r2, [r7, #12]
 8003b00:	0013      	movs	r3, r2
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	189b      	adds	r3, r3, r2
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	18cb      	adds	r3, r1, r3
 8003b0a:	e009      	b.n	8003b20 <entry_by_mac+0x58>
	for (i = 0; i < config->num_entry; i++)
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	3301      	adds	r3, #1
 8003b10:	60fb      	str	r3, [r7, #12]
 8003b12:	4b05      	ldr	r3, [pc, #20]	; (8003b28 <entry_by_mac+0x60>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	691b      	ldr	r3, [r3, #16]
 8003b18:	68fa      	ldr	r2, [r7, #12]
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	dbdb      	blt.n	8003ad6 <entry_by_mac+0xe>
	return NULL;
 8003b1e:	2300      	movs	r3, #0
}
 8003b20:	0018      	movs	r0, r3
 8003b22:	46bd      	mov	sp, r7
 8003b24:	b004      	add	sp, #16
 8003b26:	bd80      	pop	{r7, pc}
 8003b28:	200000bc 	.word	0x200000bc

08003b2c <is_vacant>:

static __inline bool is_vacant(dhcp_entry_t *entry)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b082      	sub	sp, #8
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
	return memcmp("\0\0\0\0\0", entry->mac, 6) == 0;
 8003b34:	6879      	ldr	r1, [r7, #4]
 8003b36:	4b06      	ldr	r3, [pc, #24]	; (8003b50 <is_vacant+0x24>)
 8003b38:	2206      	movs	r2, #6
 8003b3a:	0018      	movs	r0, r3
 8003b3c:	f00c f8a2 	bl	800fc84 <memcmp>
 8003b40:	0003      	movs	r3, r0
 8003b42:	425a      	negs	r2, r3
 8003b44:	4153      	adcs	r3, r2
 8003b46:	b2db      	uxtb	r3, r3
}
 8003b48:	0018      	movs	r0, r3
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	b002      	add	sp, #8
 8003b4e:	bd80      	pop	{r7, pc}
 8003b50:	0800fcfc 	.word	0x0800fcfc

08003b54 <vacant_address>:

static dhcp_entry_t *vacant_address()
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b082      	sub	sp, #8
 8003b58:	af00      	add	r7, sp, #0
	int i;
	for (i = 0; i < config->num_entry; i++)
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	607b      	str	r3, [r7, #4]
 8003b5e:	e01a      	b.n	8003b96 <vacant_address+0x42>
		if (is_vacant(config->entries + i))
 8003b60:	4b12      	ldr	r3, [pc, #72]	; (8003bac <vacant_address+0x58>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	6959      	ldr	r1, [r3, #20]
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	0013      	movs	r3, r2
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	189b      	adds	r3, r3, r2
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	18cb      	adds	r3, r1, r3
 8003b72:	0018      	movs	r0, r3
 8003b74:	f7ff ffda 	bl	8003b2c <is_vacant>
 8003b78:	1e03      	subs	r3, r0, #0
 8003b7a:	d009      	beq.n	8003b90 <vacant_address+0x3c>
			return config->entries + i;
 8003b7c:	4b0b      	ldr	r3, [pc, #44]	; (8003bac <vacant_address+0x58>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	6959      	ldr	r1, [r3, #20]
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	0013      	movs	r3, r2
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	189b      	adds	r3, r3, r2
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	18cb      	adds	r3, r1, r3
 8003b8e:	e009      	b.n	8003ba4 <vacant_address+0x50>
	for (i = 0; i < config->num_entry; i++)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	3301      	adds	r3, #1
 8003b94:	607b      	str	r3, [r7, #4]
 8003b96:	4b05      	ldr	r3, [pc, #20]	; (8003bac <vacant_address+0x58>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	691b      	ldr	r3, [r3, #16]
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	dbde      	blt.n	8003b60 <vacant_address+0xc>
	return NULL;
 8003ba2:	2300      	movs	r3, #0
}
 8003ba4:	0018      	movs	r0, r3
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	b002      	add	sp, #8
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	200000bc 	.word	0x200000bc

08003bb0 <free_entry>:

static __inline void free_entry(dhcp_entry_t *entry)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b082      	sub	sp, #8
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
	memset(entry->mac, 0, 6);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2206      	movs	r2, #6
 8003bbc:	2100      	movs	r1, #0
 8003bbe:	0018      	movs	r0, r3
 8003bc0:	f00c f878 	bl	800fcb4 <memset>
}
 8003bc4:	46c0      	nop			; (mov r8, r8)
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	b002      	add	sp, #8
 8003bca:	bd80      	pop	{r7, pc}

08003bcc <find_dhcp_option>:

uint8_t *find_dhcp_option(uint8_t *attrs, int size, uint8_t attr)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b086      	sub	sp, #24
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	1dfb      	adds	r3, r7, #7
 8003bd8:	701a      	strb	r2, [r3, #0]
	int i = 0;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	617b      	str	r3, [r7, #20]
	while ((i + 1) < size)
 8003bde:	e01d      	b.n	8003c1c <find_dhcp_option+0x50>
	{
		int next = i + attrs[i + 1] + 2;
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	3301      	adds	r3, #1
 8003be4:	68fa      	ldr	r2, [r7, #12]
 8003be6:	18d3      	adds	r3, r2, r3
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	001a      	movs	r2, r3
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	18d3      	adds	r3, r2, r3
 8003bf0:	3302      	adds	r3, #2
 8003bf2:	613b      	str	r3, [r7, #16]
		if (next > size) return NULL;
 8003bf4:	693a      	ldr	r2, [r7, #16]
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	dd01      	ble.n	8003c00 <find_dhcp_option+0x34>
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	e013      	b.n	8003c28 <find_dhcp_option+0x5c>
		if (attrs[i] == attr)
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	68fa      	ldr	r2, [r7, #12]
 8003c04:	18d3      	adds	r3, r2, r3
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	1dfa      	adds	r2, r7, #7
 8003c0a:	7812      	ldrb	r2, [r2, #0]
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d103      	bne.n	8003c18 <find_dhcp_option+0x4c>
			return attrs + i;
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	68fa      	ldr	r2, [r7, #12]
 8003c14:	18d3      	adds	r3, r2, r3
 8003c16:	e007      	b.n	8003c28 <find_dhcp_option+0x5c>
		i = next;
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	617b      	str	r3, [r7, #20]
	while ((i + 1) < size)
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	3301      	adds	r3, #1
 8003c20:	68ba      	ldr	r2, [r7, #8]
 8003c22:	429a      	cmp	r2, r3
 8003c24:	dcdc      	bgt.n	8003be0 <find_dhcp_option+0x14>
	}
	return NULL;
 8003c26:	2300      	movs	r3, #0
}
 8003c28:	0018      	movs	r0, r3
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	b006      	add	sp, #24
 8003c2e:	bd80      	pop	{r7, pc}

08003c30 <fill_options>:
	uint32_t dns,
	int lease_time,
	uint32_t serverid,
	uint32_t router,
	uint32_t subnet)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b086      	sub	sp, #24
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	60f8      	str	r0, [r7, #12]
 8003c38:	607a      	str	r2, [r7, #4]
 8003c3a:	603b      	str	r3, [r7, #0]
 8003c3c:	200b      	movs	r0, #11
 8003c3e:	183b      	adds	r3, r7, r0
 8003c40:	1c0a      	adds	r2, r1, #0
 8003c42:	701a      	strb	r2, [r3, #0]
	uint8_t *ptr = (uint8_t *)dest;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	617b      	str	r3, [r7, #20]
	/* ACK message type */
	*ptr++ = 53;
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	1c5a      	adds	r2, r3, #1
 8003c4c:	617a      	str	r2, [r7, #20]
 8003c4e:	2235      	movs	r2, #53	; 0x35
 8003c50:	701a      	strb	r2, [r3, #0]
	*ptr++ = 1;
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	1c5a      	adds	r2, r3, #1
 8003c56:	617a      	str	r2, [r7, #20]
 8003c58:	2201      	movs	r2, #1
 8003c5a:	701a      	strb	r2, [r3, #0]
	*ptr++ = msg_type;
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	1c5a      	adds	r2, r3, #1
 8003c60:	617a      	str	r2, [r7, #20]
 8003c62:	183a      	adds	r2, r7, r0
 8003c64:	7812      	ldrb	r2, [r2, #0]
 8003c66:	701a      	strb	r2, [r3, #0]

	/* dhcp server identifier */
	*ptr++ = DHCP_SERVERID;
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	1c5a      	adds	r2, r3, #1
 8003c6c:	617a      	str	r2, [r7, #20]
 8003c6e:	2236      	movs	r2, #54	; 0x36
 8003c70:	701a      	strb	r2, [r3, #0]
	*ptr++ = 4;
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	1c5a      	adds	r2, r3, #1
 8003c76:	617a      	str	r2, [r7, #20]
 8003c78:	2204      	movs	r2, #4
 8003c7a:	701a      	strb	r2, [r3, #0]
	set_ip(ptr, serverid);
 8003c7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	0011      	movs	r1, r2
 8003c82:	0018      	movs	r0, r3
 8003c84:	f7ff fede 	bl	8003a44 <set_ip>
	ptr += 4;
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	3304      	adds	r3, #4
 8003c8c:	617b      	str	r3, [r7, #20]

	/* lease time */
	*ptr++ = DHCP_LEASETIME;
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	1c5a      	adds	r2, r3, #1
 8003c92:	617a      	str	r2, [r7, #20]
 8003c94:	2233      	movs	r2, #51	; 0x33
 8003c96:	701a      	strb	r2, [r3, #0]
	*ptr++ = 4;
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	1c5a      	adds	r2, r3, #1
 8003c9c:	617a      	str	r2, [r7, #20]
 8003c9e:	2204      	movs	r2, #4
 8003ca0:	701a      	strb	r2, [r3, #0]
	*ptr++ = (lease_time >> 24) & 0xFF;
 8003ca2:	6a3b      	ldr	r3, [r7, #32]
 8003ca4:	0e19      	lsrs	r1, r3, #24
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	1c5a      	adds	r2, r3, #1
 8003caa:	617a      	str	r2, [r7, #20]
 8003cac:	b2ca      	uxtb	r2, r1
 8003cae:	701a      	strb	r2, [r3, #0]
	*ptr++ = (lease_time >> 16) & 0xFF;
 8003cb0:	6a3b      	ldr	r3, [r7, #32]
 8003cb2:	1419      	asrs	r1, r3, #16
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	1c5a      	adds	r2, r3, #1
 8003cb8:	617a      	str	r2, [r7, #20]
 8003cba:	b2ca      	uxtb	r2, r1
 8003cbc:	701a      	strb	r2, [r3, #0]
	*ptr++ = (lease_time >> 8) & 0xFF;
 8003cbe:	6a3b      	ldr	r3, [r7, #32]
 8003cc0:	1219      	asrs	r1, r3, #8
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	1c5a      	adds	r2, r3, #1
 8003cc6:	617a      	str	r2, [r7, #20]
 8003cc8:	b2ca      	uxtb	r2, r1
 8003cca:	701a      	strb	r2, [r3, #0]
	*ptr++ = (lease_time >> 0) & 0xFF;
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	1c5a      	adds	r2, r3, #1
 8003cd0:	617a      	str	r2, [r7, #20]
 8003cd2:	6a3a      	ldr	r2, [r7, #32]
 8003cd4:	b2d2      	uxtb	r2, r2
 8003cd6:	701a      	strb	r2, [r3, #0]

	/* subnet mask */
	*ptr++ = DHCP_SUBNETMASK;
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	1c5a      	adds	r2, r3, #1
 8003cdc:	617a      	str	r2, [r7, #20]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	701a      	strb	r2, [r3, #0]
	*ptr++ = 4;
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	1c5a      	adds	r2, r3, #1
 8003ce6:	617a      	str	r2, [r7, #20]
 8003ce8:	2204      	movs	r2, #4
 8003cea:	701a      	strb	r2, [r3, #0]
	set_ip(ptr, subnet);
 8003cec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	0011      	movs	r1, r2
 8003cf2:	0018      	movs	r0, r3
 8003cf4:	f7ff fea6 	bl	8003a44 <set_ip>
	ptr += 4;
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	3304      	adds	r3, #4
 8003cfc:	617b      	str	r3, [r7, #20]

	/* router */
	if (router != 0)
 8003cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d012      	beq.n	8003d2a <fill_options+0xfa>
	{
		*ptr++ = DHCP_ROUTER;
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	1c5a      	adds	r2, r3, #1
 8003d08:	617a      	str	r2, [r7, #20]
 8003d0a:	2203      	movs	r2, #3
 8003d0c:	701a      	strb	r2, [r3, #0]
		*ptr++ = 4;
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	1c5a      	adds	r2, r3, #1
 8003d12:	617a      	str	r2, [r7, #20]
 8003d14:	2204      	movs	r2, #4
 8003d16:	701a      	strb	r2, [r3, #0]
		set_ip(ptr, router);
 8003d18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	0011      	movs	r1, r2
 8003d1e:	0018      	movs	r0, r3
 8003d20:	f7ff fe90 	bl	8003a44 <set_ip>
		ptr += 4;
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	3304      	adds	r3, #4
 8003d28:	617b      	str	r3, [r7, #20]
	}

	/* domain name */
	if (domain != NULL)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d01a      	beq.n	8003d66 <fill_options+0x136>
	{
		int len = strlen(domain);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	0018      	movs	r0, r3
 8003d34:	f7fc f9f2 	bl	800011c <strlen>
 8003d38:	0003      	movs	r3, r0
 8003d3a:	613b      	str	r3, [r7, #16]
		*ptr++ = DHCP_DNSDOMAIN;
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	1c5a      	adds	r2, r3, #1
 8003d40:	617a      	str	r2, [r7, #20]
 8003d42:	220f      	movs	r2, #15
 8003d44:	701a      	strb	r2, [r3, #0]
		*ptr++ = len;
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	1c5a      	adds	r2, r3, #1
 8003d4a:	617a      	str	r2, [r7, #20]
 8003d4c:	693a      	ldr	r2, [r7, #16]
 8003d4e:	b2d2      	uxtb	r2, r2
 8003d50:	701a      	strb	r2, [r3, #0]
		memcpy(ptr, domain, len);
 8003d52:	693a      	ldr	r2, [r7, #16]
 8003d54:	6879      	ldr	r1, [r7, #4]
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	0018      	movs	r0, r3
 8003d5a:	f00b ffa2 	bl	800fca2 <memcpy>
		ptr += len;
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	697a      	ldr	r2, [r7, #20]
 8003d62:	18d3      	adds	r3, r2, r3
 8003d64:	617b      	str	r3, [r7, #20]
	}

	/* domain name server (DNS) */
	if (dns != 0)
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d012      	beq.n	8003d92 <fill_options+0x162>
	{
		*ptr++ = DHCP_DNSSERVER;
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	1c5a      	adds	r2, r3, #1
 8003d70:	617a      	str	r2, [r7, #20]
 8003d72:	2206      	movs	r2, #6
 8003d74:	701a      	strb	r2, [r3, #0]
		*ptr++ = 4;
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	1c5a      	adds	r2, r3, #1
 8003d7a:	617a      	str	r2, [r7, #20]
 8003d7c:	2204      	movs	r2, #4
 8003d7e:	701a      	strb	r2, [r3, #0]
		set_ip(ptr, dns);
 8003d80:	683a      	ldr	r2, [r7, #0]
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	0011      	movs	r1, r2
 8003d86:	0018      	movs	r0, r3
 8003d88:	f7ff fe5c 	bl	8003a44 <set_ip>
		ptr += 4;
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	3304      	adds	r3, #4
 8003d90:	617b      	str	r3, [r7, #20]
	}

	/* end */
	*ptr++ = DHCP_END;
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	1c5a      	adds	r2, r3, #1
 8003d96:	617a      	str	r2, [r7, #20]
 8003d98:	22ff      	movs	r2, #255	; 0xff
 8003d9a:	701a      	strb	r2, [r3, #0]
	return ptr - (uint8_t *)dest;
 8003d9c:	697a      	ldr	r2, [r7, #20]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	1ad3      	subs	r3, r2, r3
}
 8003da2:	0018      	movs	r0, r3
 8003da4:	46bd      	mov	sp, r7
 8003da6:	b006      	add	sp, #24
 8003da8:	bd80      	pop	{r7, pc}
	...

08003dac <udp_recv_proc>:

static void udp_recv_proc(void *arg, struct udp_pcb *upcb, struct pbuf *p, struct ip_addr *addr, u16_t port)
{
 8003dac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003dae:	46c6      	mov	lr, r8
 8003db0:	b500      	push	{lr}
 8003db2:	b08e      	sub	sp, #56	; 0x38
 8003db4:	af04      	add	r7, sp, #16
 8003db6:	6178      	str	r0, [r7, #20]
 8003db8:	6139      	str	r1, [r7, #16]
 8003dba:	60fa      	str	r2, [r7, #12]
 8003dbc:	60bb      	str	r3, [r7, #8]
	uint8_t *ptr;
	dhcp_entry_t *entry;
	struct pbuf *pp;

	int n = p->len;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	895b      	ldrh	r3, [r3, #10]
 8003dc2:	623b      	str	r3, [r7, #32]
	if (n > sizeof(dhcp_data)) n = sizeof(dhcp_data);
 8003dc4:	6a3a      	ldr	r2, [r7, #32]
 8003dc6:	2381      	movs	r3, #129	; 0x81
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d902      	bls.n	8003dd4 <udp_recv_proc+0x28>
 8003dce:	2381      	movs	r3, #129	; 0x81
 8003dd0:	009b      	lsls	r3, r3, #2
 8003dd2:	623b      	str	r3, [r7, #32]
	memcpy(&dhcp_data, p->payload, n);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6859      	ldr	r1, [r3, #4]
 8003dd8:	6a3a      	ldr	r2, [r7, #32]
 8003dda:	4baa      	ldr	r3, [pc, #680]	; (8004084 <udp_recv_proc+0x2d8>)
 8003ddc:	0018      	movs	r0, r3
 8003dde:	f00b ff60 	bl	800fca2 <memcpy>
	switch (dhcp_data.dp_options[2])
 8003de2:	4ba8      	ldr	r3, [pc, #672]	; (8004084 <udp_recv_proc+0x2d8>)
 8003de4:	22f2      	movs	r2, #242	; 0xf2
 8003de6:	5c9b      	ldrb	r3, [r3, r2]
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d003      	beq.n	8003df4 <udp_recv_proc+0x48>
 8003dec:	2b03      	cmp	r3, #3
 8003dee:	d100      	bne.n	8003df2 <udp_recv_proc+0x46>
 8003df0:	e081      	b.n	8003ef6 <udp_recv_proc+0x14a>
			udp_sendto(upcb, pp, IP_ADDR_BROADCAST, port);
			pbuf_free(pp);
			break;

		default:
				break;
 8003df2:	e13d      	b.n	8004070 <udp_recv_proc+0x2c4>
			entry = entry_by_mac(dhcp_data.dp_chaddr);
 8003df4:	4ba4      	ldr	r3, [pc, #656]	; (8004088 <udp_recv_proc+0x2dc>)
 8003df6:	0018      	movs	r0, r3
 8003df8:	f7ff fe66 	bl	8003ac8 <entry_by_mac>
 8003dfc:	0003      	movs	r3, r0
 8003dfe:	627b      	str	r3, [r7, #36]	; 0x24
			if (entry == NULL) entry = vacant_address();
 8003e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d103      	bne.n	8003e0e <udp_recv_proc+0x62>
 8003e06:	f7ff fea5 	bl	8003b54 <vacant_address>
 8003e0a:	0003      	movs	r3, r0
 8003e0c:	627b      	str	r3, [r7, #36]	; 0x24
			if (entry == NULL) break;
 8003e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d100      	bne.n	8003e16 <udp_recv_proc+0x6a>
 8003e14:	e11f      	b.n	8004056 <udp_recv_proc+0x2aa>
			dhcp_data.dp_op = 2; /* reply */
 8003e16:	4b9b      	ldr	r3, [pc, #620]	; (8004084 <udp_recv_proc+0x2d8>)
 8003e18:	2202      	movs	r2, #2
 8003e1a:	701a      	strb	r2, [r3, #0]
			dhcp_data.dp_secs = 0;
 8003e1c:	4b99      	ldr	r3, [pc, #612]	; (8004084 <udp_recv_proc+0x2d8>)
 8003e1e:	2200      	movs	r2, #0
 8003e20:	811a      	strh	r2, [r3, #8]
			dhcp_data.dp_flags = 0;
 8003e22:	4b98      	ldr	r3, [pc, #608]	; (8004084 <udp_recv_proc+0x2d8>)
 8003e24:	2200      	movs	r2, #0
 8003e26:	815a      	strh	r2, [r3, #10]
			set_ip(dhcp_data.dp_yiaddr, get_ip(entry->addr));
 8003e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2a:	3306      	adds	r3, #6
 8003e2c:	0018      	movs	r0, r3
 8003e2e:	f7ff fdf9 	bl	8003a24 <get_ip>
 8003e32:	0002      	movs	r2, r0
 8003e34:	4b95      	ldr	r3, [pc, #596]	; (800408c <udp_recv_proc+0x2e0>)
 8003e36:	0011      	movs	r1, r2
 8003e38:	0018      	movs	r0, r3
 8003e3a:	f7ff fe03 	bl	8003a44 <set_ip>
			memcpy(dhcp_data.dp_magic, magic_cookie, 4);
 8003e3e:	4b94      	ldr	r3, [pc, #592]	; (8004090 <udp_recv_proc+0x2e4>)
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	4b90      	ldr	r3, [pc, #576]	; (8004084 <udp_recv_proc+0x2d8>)
 8003e44:	21ec      	movs	r1, #236	; 0xec
 8003e46:	505a      	str	r2, [r3, r1]
			memset(dhcp_data.dp_options, 0, sizeof(dhcp_data.dp_options));
 8003e48:	2314      	movs	r3, #20
 8003e4a:	33ff      	adds	r3, #255	; 0xff
 8003e4c:	001a      	movs	r2, r3
 8003e4e:	4b91      	ldr	r3, [pc, #580]	; (8004094 <udp_recv_proc+0x2e8>)
 8003e50:	2100      	movs	r1, #0
 8003e52:	0018      	movs	r0, r3
 8003e54:	f00b ff2e 	bl	800fcb4 <memset>
				config->domain,
 8003e58:	4b8f      	ldr	r3, [pc, #572]	; (8004098 <udp_recv_proc+0x2ec>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
			fill_options(dhcp_data.dp_options,
 8003e5c:	68dc      	ldr	r4, [r3, #12]
				get_ip(config->dns),
 8003e5e:	4b8e      	ldr	r3, [pc, #568]	; (8004098 <udp_recv_proc+0x2ec>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	3306      	adds	r3, #6
			fill_options(dhcp_data.dp_options,
 8003e64:	0018      	movs	r0, r3
 8003e66:	f7ff fddd 	bl	8003a24 <get_ip>
 8003e6a:	6078      	str	r0, [r7, #4]
				entry->lease, 
 8003e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6e:	691b      	ldr	r3, [r3, #16]
			fill_options(dhcp_data.dp_options,
 8003e70:	001d      	movs	r5, r3
				get_ip(config->addr),
 8003e72:	4b89      	ldr	r3, [pc, #548]	; (8004098 <udp_recv_proc+0x2ec>)
 8003e74:	681b      	ldr	r3, [r3, #0]
			fill_options(dhcp_data.dp_options,
 8003e76:	0018      	movs	r0, r3
 8003e78:	f7ff fdd4 	bl	8003a24 <get_ip>
 8003e7c:	0006      	movs	r6, r0
				get_ip(config->addr), 
 8003e7e:	4b86      	ldr	r3, [pc, #536]	; (8004098 <udp_recv_proc+0x2ec>)
 8003e80:	681b      	ldr	r3, [r3, #0]
			fill_options(dhcp_data.dp_options,
 8003e82:	0018      	movs	r0, r3
 8003e84:	f7ff fdce 	bl	8003a24 <get_ip>
 8003e88:	4680      	mov	r8, r0
				get_ip(entry->subnet));
 8003e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8c:	330a      	adds	r3, #10
			fill_options(dhcp_data.dp_options,
 8003e8e:	0018      	movs	r0, r3
 8003e90:	f7ff fdc8 	bl	8003a24 <get_ip>
 8003e94:	0003      	movs	r3, r0
 8003e96:	487f      	ldr	r0, [pc, #508]	; (8004094 <udp_recv_proc+0x2e8>)
 8003e98:	9303      	str	r3, [sp, #12]
 8003e9a:	4642      	mov	r2, r8
 8003e9c:	9202      	str	r2, [sp, #8]
 8003e9e:	9601      	str	r6, [sp, #4]
 8003ea0:	9500      	str	r5, [sp, #0]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	0022      	movs	r2, r4
 8003ea6:	2102      	movs	r1, #2
 8003ea8:	f7ff fec2 	bl	8003c30 <fill_options>
			pp = pbuf_alloc(PBUF_TRANSPORT, sizeof(dhcp_data), PBUF_POOL);
 8003eac:	2381      	movs	r3, #129	; 0x81
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	2203      	movs	r2, #3
 8003eb2:	0019      	movs	r1, r3
 8003eb4:	2000      	movs	r0, #0
 8003eb6:	f001 f969 	bl	800518c <pbuf_alloc>
 8003eba:	0003      	movs	r3, r0
 8003ebc:	61bb      	str	r3, [r7, #24]
			if (pp == NULL) break;
 8003ebe:	69bb      	ldr	r3, [r7, #24]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d100      	bne.n	8003ec6 <udp_recv_proc+0x11a>
 8003ec4:	e0c9      	b.n	800405a <udp_recv_proc+0x2ae>
			memcpy(pp->payload, &dhcp_data, sizeof(dhcp_data));
 8003ec6:	69bb      	ldr	r3, [r7, #24]
 8003ec8:	6858      	ldr	r0, [r3, #4]
 8003eca:	2381      	movs	r3, #129	; 0x81
 8003ecc:	009a      	lsls	r2, r3, #2
 8003ece:	4b6d      	ldr	r3, [pc, #436]	; (8004084 <udp_recv_proc+0x2d8>)
 8003ed0:	0019      	movs	r1, r3
 8003ed2:	f00b fee6 	bl	800fca2 <memcpy>
			udp_sendto(upcb, pp, IP_ADDR_BROADCAST, port);
 8003ed6:	2338      	movs	r3, #56	; 0x38
 8003ed8:	2208      	movs	r2, #8
 8003eda:	4694      	mov	ip, r2
 8003edc:	44bc      	add	ip, r7
 8003ede:	4463      	add	r3, ip
 8003ee0:	881b      	ldrh	r3, [r3, #0]
 8003ee2:	4a6e      	ldr	r2, [pc, #440]	; (800409c <udp_recv_proc+0x2f0>)
 8003ee4:	69b9      	ldr	r1, [r7, #24]
 8003ee6:	6938      	ldr	r0, [r7, #16]
 8003ee8:	f006 fe80 	bl	800abec <udp_sendto>
			pbuf_free(pp);
 8003eec:	69bb      	ldr	r3, [r7, #24]
 8003eee:	0018      	movs	r0, r3
 8003ef0:	f001 fbd8 	bl	80056a4 <pbuf_free>
			break;
 8003ef4:	e0bc      	b.n	8004070 <udp_recv_proc+0x2c4>
			ptr = find_dhcp_option(dhcp_data.dp_options, sizeof(dhcp_data.dp_options), DHCP_IPADDRESS);
 8003ef6:	2314      	movs	r3, #20
 8003ef8:	33ff      	adds	r3, #255	; 0xff
 8003efa:	0019      	movs	r1, r3
 8003efc:	4b65      	ldr	r3, [pc, #404]	; (8004094 <udp_recv_proc+0x2e8>)
 8003efe:	2232      	movs	r2, #50	; 0x32
 8003f00:	0018      	movs	r0, r3
 8003f02:	f7ff fe63 	bl	8003bcc <find_dhcp_option>
 8003f06:	0003      	movs	r3, r0
 8003f08:	61fb      	str	r3, [r7, #28]
			if (ptr == NULL) break;
 8003f0a:	69fb      	ldr	r3, [r7, #28]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d100      	bne.n	8003f12 <udp_recv_proc+0x166>
 8003f10:	e0a5      	b.n	800405e <udp_recv_proc+0x2b2>
			if (ptr[1] != 4) break;
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	3301      	adds	r3, #1
 8003f16:	781b      	ldrb	r3, [r3, #0]
 8003f18:	2b04      	cmp	r3, #4
 8003f1a:	d000      	beq.n	8003f1e <udp_recv_proc+0x172>
 8003f1c:	e0a1      	b.n	8004062 <udp_recv_proc+0x2b6>
			ptr += 2;
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	3302      	adds	r3, #2
 8003f22:	61fb      	str	r3, [r7, #28]
			entry = entry_by_mac(dhcp_data.dp_chaddr);
 8003f24:	4b58      	ldr	r3, [pc, #352]	; (8004088 <udp_recv_proc+0x2dc>)
 8003f26:	0018      	movs	r0, r3
 8003f28:	f7ff fdce 	bl	8003ac8 <entry_by_mac>
 8003f2c:	0003      	movs	r3, r0
 8003f2e:	627b      	str	r3, [r7, #36]	; 0x24
			if (entry != NULL) free_entry(entry);
 8003f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d003      	beq.n	8003f3e <udp_recv_proc+0x192>
 8003f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f38:	0018      	movs	r0, r3
 8003f3a:	f7ff fe39 	bl	8003bb0 <free_entry>
			entry = entry_by_ip(get_ip(ptr));
 8003f3e:	69fb      	ldr	r3, [r7, #28]
 8003f40:	0018      	movs	r0, r3
 8003f42:	f7ff fd6f 	bl	8003a24 <get_ip>
 8003f46:	0003      	movs	r3, r0
 8003f48:	0018      	movs	r0, r3
 8003f4a:	f7ff fd8b 	bl	8003a64 <entry_by_ip>
 8003f4e:	0003      	movs	r3, r0
 8003f50:	627b      	str	r3, [r7, #36]	; 0x24
			if (entry == NULL) break;
 8003f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d100      	bne.n	8003f5a <udp_recv_proc+0x1ae>
 8003f58:	e085      	b.n	8004066 <udp_recv_proc+0x2ba>
			if (!is_vacant(entry)) break;
 8003f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5c:	0018      	movs	r0, r3
 8003f5e:	f7ff fde5 	bl	8003b2c <is_vacant>
 8003f62:	0003      	movs	r3, r0
 8003f64:	001a      	movs	r2, r3
 8003f66:	2301      	movs	r3, #1
 8003f68:	4053      	eors	r3, r2
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d000      	beq.n	8003f72 <udp_recv_proc+0x1c6>
 8003f70:	e07b      	b.n	800406a <udp_recv_proc+0x2be>
			memcpy(dhcp_data.dp_yiaddr, ptr, 4);
 8003f72:	4b44      	ldr	r3, [pc, #272]	; (8004084 <udp_recv_proc+0x2d8>)
 8003f74:	69fa      	ldr	r2, [r7, #28]
 8003f76:	3310      	adds	r3, #16
 8003f78:	0011      	movs	r1, r2
 8003f7a:	2204      	movs	r2, #4
 8003f7c:	0018      	movs	r0, r3
 8003f7e:	f00b fe90 	bl	800fca2 <memcpy>
			dhcp_data.dp_op = 2; /* reply */
 8003f82:	4b40      	ldr	r3, [pc, #256]	; (8004084 <udp_recv_proc+0x2d8>)
 8003f84:	2202      	movs	r2, #2
 8003f86:	701a      	strb	r2, [r3, #0]
			dhcp_data.dp_secs = 0;
 8003f88:	4b3e      	ldr	r3, [pc, #248]	; (8004084 <udp_recv_proc+0x2d8>)
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	811a      	strh	r2, [r3, #8]
			dhcp_data.dp_flags = 0;
 8003f8e:	4b3d      	ldr	r3, [pc, #244]	; (8004084 <udp_recv_proc+0x2d8>)
 8003f90:	2200      	movs	r2, #0
 8003f92:	815a      	strh	r2, [r3, #10]
			memcpy(dhcp_data.dp_magic, magic_cookie, 4);
 8003f94:	4b3e      	ldr	r3, [pc, #248]	; (8004090 <udp_recv_proc+0x2e4>)
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	4b3a      	ldr	r3, [pc, #232]	; (8004084 <udp_recv_proc+0x2d8>)
 8003f9a:	21ec      	movs	r1, #236	; 0xec
 8003f9c:	505a      	str	r2, [r3, r1]
			memset(dhcp_data.dp_options, 0, sizeof(dhcp_data.dp_options));
 8003f9e:	2314      	movs	r3, #20
 8003fa0:	33ff      	adds	r3, #255	; 0xff
 8003fa2:	001a      	movs	r2, r3
 8003fa4:	4b3b      	ldr	r3, [pc, #236]	; (8004094 <udp_recv_proc+0x2e8>)
 8003fa6:	2100      	movs	r1, #0
 8003fa8:	0018      	movs	r0, r3
 8003faa:	f00b fe83 	bl	800fcb4 <memset>
				config->domain,
 8003fae:	4b3a      	ldr	r3, [pc, #232]	; (8004098 <udp_recv_proc+0x2ec>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
			fill_options(dhcp_data.dp_options,
 8003fb2:	68dc      	ldr	r4, [r3, #12]
				get_ip(config->dns),
 8003fb4:	4b38      	ldr	r3, [pc, #224]	; (8004098 <udp_recv_proc+0x2ec>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	3306      	adds	r3, #6
			fill_options(dhcp_data.dp_options,
 8003fba:	0018      	movs	r0, r3
 8003fbc:	f7ff fd32 	bl	8003a24 <get_ip>
 8003fc0:	6078      	str	r0, [r7, #4]
				entry->lease, 
 8003fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc4:	691b      	ldr	r3, [r3, #16]
			fill_options(dhcp_data.dp_options,
 8003fc6:	001d      	movs	r5, r3
				get_ip(config->addr),
 8003fc8:	4b33      	ldr	r3, [pc, #204]	; (8004098 <udp_recv_proc+0x2ec>)
 8003fca:	681b      	ldr	r3, [r3, #0]
			fill_options(dhcp_data.dp_options,
 8003fcc:	0018      	movs	r0, r3
 8003fce:	f7ff fd29 	bl	8003a24 <get_ip>
 8003fd2:	0006      	movs	r6, r0
				get_ip(config->addr), 
 8003fd4:	4b30      	ldr	r3, [pc, #192]	; (8004098 <udp_recv_proc+0x2ec>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
			fill_options(dhcp_data.dp_options,
 8003fd8:	0018      	movs	r0, r3
 8003fda:	f7ff fd23 	bl	8003a24 <get_ip>
 8003fde:	4680      	mov	r8, r0
				get_ip(entry->subnet));
 8003fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe2:	330a      	adds	r3, #10
			fill_options(dhcp_data.dp_options,
 8003fe4:	0018      	movs	r0, r3
 8003fe6:	f7ff fd1d 	bl	8003a24 <get_ip>
 8003fea:	0003      	movs	r3, r0
 8003fec:	4829      	ldr	r0, [pc, #164]	; (8004094 <udp_recv_proc+0x2e8>)
 8003fee:	9303      	str	r3, [sp, #12]
 8003ff0:	4642      	mov	r2, r8
 8003ff2:	9202      	str	r2, [sp, #8]
 8003ff4:	9601      	str	r6, [sp, #4]
 8003ff6:	9500      	str	r5, [sp, #0]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	0022      	movs	r2, r4
 8003ffc:	2105      	movs	r1, #5
 8003ffe:	f7ff fe17 	bl	8003c30 <fill_options>
			pp = pbuf_alloc(PBUF_TRANSPORT, sizeof(dhcp_data), PBUF_POOL);
 8004002:	2381      	movs	r3, #129	; 0x81
 8004004:	009b      	lsls	r3, r3, #2
 8004006:	2203      	movs	r2, #3
 8004008:	0019      	movs	r1, r3
 800400a:	2000      	movs	r0, #0
 800400c:	f001 f8be 	bl	800518c <pbuf_alloc>
 8004010:	0003      	movs	r3, r0
 8004012:	61bb      	str	r3, [r7, #24]
			if (pp == NULL) break;
 8004014:	69bb      	ldr	r3, [r7, #24]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d029      	beq.n	800406e <udp_recv_proc+0x2c2>
			memcpy(entry->mac, dhcp_data.dp_chaddr, 6);
 800401a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401c:	491a      	ldr	r1, [pc, #104]	; (8004088 <udp_recv_proc+0x2dc>)
 800401e:	2206      	movs	r2, #6
 8004020:	0018      	movs	r0, r3
 8004022:	f00b fe3e 	bl	800fca2 <memcpy>
			memcpy(pp->payload, &dhcp_data, sizeof(dhcp_data));
 8004026:	69bb      	ldr	r3, [r7, #24]
 8004028:	6858      	ldr	r0, [r3, #4]
 800402a:	2381      	movs	r3, #129	; 0x81
 800402c:	009a      	lsls	r2, r3, #2
 800402e:	4b15      	ldr	r3, [pc, #84]	; (8004084 <udp_recv_proc+0x2d8>)
 8004030:	0019      	movs	r1, r3
 8004032:	f00b fe36 	bl	800fca2 <memcpy>
			udp_sendto(upcb, pp, IP_ADDR_BROADCAST, port);
 8004036:	2338      	movs	r3, #56	; 0x38
 8004038:	2208      	movs	r2, #8
 800403a:	4694      	mov	ip, r2
 800403c:	44bc      	add	ip, r7
 800403e:	4463      	add	r3, ip
 8004040:	881b      	ldrh	r3, [r3, #0]
 8004042:	4a16      	ldr	r2, [pc, #88]	; (800409c <udp_recv_proc+0x2f0>)
 8004044:	69b9      	ldr	r1, [r7, #24]
 8004046:	6938      	ldr	r0, [r7, #16]
 8004048:	f006 fdd0 	bl	800abec <udp_sendto>
			pbuf_free(pp);
 800404c:	69bb      	ldr	r3, [r7, #24]
 800404e:	0018      	movs	r0, r3
 8004050:	f001 fb28 	bl	80056a4 <pbuf_free>
			break;
 8004054:	e00c      	b.n	8004070 <udp_recv_proc+0x2c4>
			if (entry == NULL) break;
 8004056:	46c0      	nop			; (mov r8, r8)
 8004058:	e00a      	b.n	8004070 <udp_recv_proc+0x2c4>
			if (pp == NULL) break;
 800405a:	46c0      	nop			; (mov r8, r8)
 800405c:	e008      	b.n	8004070 <udp_recv_proc+0x2c4>
			if (ptr == NULL) break;
 800405e:	46c0      	nop			; (mov r8, r8)
 8004060:	e006      	b.n	8004070 <udp_recv_proc+0x2c4>
			if (ptr[1] != 4) break;
 8004062:	46c0      	nop			; (mov r8, r8)
 8004064:	e004      	b.n	8004070 <udp_recv_proc+0x2c4>
			if (entry == NULL) break;
 8004066:	46c0      	nop			; (mov r8, r8)
 8004068:	e002      	b.n	8004070 <udp_recv_proc+0x2c4>
			if (!is_vacant(entry)) break;
 800406a:	46c0      	nop			; (mov r8, r8)
 800406c:	e000      	b.n	8004070 <udp_recv_proc+0x2c4>
			if (pp == NULL) break;
 800406e:	46c0      	nop			; (mov r8, r8)
	}
	pbuf_free(p);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	0018      	movs	r0, r3
 8004074:	f001 fb16 	bl	80056a4 <pbuf_free>
}
 8004078:	46c0      	nop			; (mov r8, r8)
 800407a:	46bd      	mov	sp, r7
 800407c:	b00a      	add	sp, #40	; 0x28
 800407e:	bc04      	pop	{r2}
 8004080:	4690      	mov	r8, r2
 8004082:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004084:	200028f4 	.word	0x200028f4
 8004088:	20002910 	.word	0x20002910
 800408c:	20002904 	.word	0x20002904
 8004090:	2000000c 	.word	0x2000000c
 8004094:	200029e4 	.word	0x200029e4
 8004098:	200000bc 	.word	0x200000bc
 800409c:	0800fdc4 	.word	0x0800fdc4

080040a0 <dhserv_init>:

err_t dhserv_init(dhcp_config_t *c)
{
 80040a0:	b5b0      	push	{r4, r5, r7, lr}
 80040a2:	b084      	sub	sp, #16
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
	err_t err;
	udp_init();
 80040a8:	f006 fbbe 	bl	800a828 <udp_init>
	dhserv_free();
 80040ac:	f000 f83c 	bl	8004128 <dhserv_free>
	pcb = udp_new();
 80040b0:	f006 ff98 	bl	800afe4 <udp_new>
 80040b4:	0002      	movs	r2, r0
 80040b6:	4b18      	ldr	r3, [pc, #96]	; (8004118 <dhserv_init+0x78>)
 80040b8:	601a      	str	r2, [r3, #0]
	if (pcb == NULL)
 80040ba:	4b17      	ldr	r3, [pc, #92]	; (8004118 <dhserv_init+0x78>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d102      	bne.n	80040c8 <dhserv_init+0x28>
		return ERR_MEM;
 80040c2:	2301      	movs	r3, #1
 80040c4:	425b      	negs	r3, r3
 80040c6:	e022      	b.n	800410e <dhserv_init+0x6e>
	err = udp_bind(pcb, IP_ADDR_ANY, c->port);
 80040c8:	4b13      	ldr	r3, [pc, #76]	; (8004118 <dhserv_init+0x78>)
 80040ca:	6818      	ldr	r0, [r3, #0]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	889a      	ldrh	r2, [r3, #4]
 80040d0:	250f      	movs	r5, #15
 80040d2:	197c      	adds	r4, r7, r5
 80040d4:	4b11      	ldr	r3, [pc, #68]	; (800411c <dhserv_init+0x7c>)
 80040d6:	0019      	movs	r1, r3
 80040d8:	f006 fed6 	bl	800ae88 <udp_bind>
 80040dc:	0003      	movs	r3, r0
 80040de:	7023      	strb	r3, [r4, #0]
	if (err != ERR_OK)
 80040e0:	197b      	adds	r3, r7, r5
 80040e2:	781b      	ldrb	r3, [r3, #0]
 80040e4:	b25b      	sxtb	r3, r3
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d006      	beq.n	80040f8 <dhserv_init+0x58>
	{
		dhserv_free();
 80040ea:	f000 f81d 	bl	8004128 <dhserv_free>
		return err;
 80040ee:	230f      	movs	r3, #15
 80040f0:	18fb      	adds	r3, r7, r3
 80040f2:	781b      	ldrb	r3, [r3, #0]
 80040f4:	b25b      	sxtb	r3, r3
 80040f6:	e00a      	b.n	800410e <dhserv_init+0x6e>
	}
	udp_recv(pcb, udp_recv_proc, NULL);
 80040f8:	4b07      	ldr	r3, [pc, #28]	; (8004118 <dhserv_init+0x78>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4908      	ldr	r1, [pc, #32]	; (8004120 <dhserv_init+0x80>)
 80040fe:	2200      	movs	r2, #0
 8004100:	0018      	movs	r0, r3
 8004102:	f006 ff2d 	bl	800af60 <udp_recv>
	config = c;
 8004106:	4b07      	ldr	r3, [pc, #28]	; (8004124 <dhserv_init+0x84>)
 8004108:	687a      	ldr	r2, [r7, #4]
 800410a:	601a      	str	r2, [r3, #0]
	return ERR_OK;
 800410c:	2300      	movs	r3, #0
}
 800410e:	0018      	movs	r0, r3
 8004110:	46bd      	mov	sp, r7
 8004112:	b004      	add	sp, #16
 8004114:	bdb0      	pop	{r4, r5, r7, pc}
 8004116:	46c0      	nop			; (mov r8, r8)
 8004118:	200000b8 	.word	0x200000b8
 800411c:	0800fdc0 	.word	0x0800fdc0
 8004120:	08003dad 	.word	0x08003dad
 8004124:	200000bc 	.word	0x200000bc

08004128 <dhserv_free>:

void dhserv_free(void)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	af00      	add	r7, sp, #0
	if (pcb == NULL) return;
 800412c:	4b07      	ldr	r3, [pc, #28]	; (800414c <dhserv_free+0x24>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d008      	beq.n	8004146 <dhserv_free+0x1e>
	udp_remove(pcb);
 8004134:	4b05      	ldr	r3, [pc, #20]	; (800414c <dhserv_free+0x24>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	0018      	movs	r0, r3
 800413a:	f006 ff21 	bl	800af80 <udp_remove>
	pcb = NULL;
 800413e:	4b03      	ldr	r3, [pc, #12]	; (800414c <dhserv_free+0x24>)
 8004140:	2200      	movs	r2, #0
 8004142:	601a      	str	r2, [r3, #0]
 8004144:	e000      	b.n	8004148 <dhserv_free+0x20>
	if (pcb == NULL) return;
 8004146:	46c0      	nop			; (mov r8, r8)
}
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}
 800414c:	200000b8 	.word	0x200000b8

08004150 <get_uint16>:
	uint16_t type;
	uint16_t Class;
} dns_query_t;

static uint16_t get_uint16(const uint8_t *pnt)
{
 8004150:	b590      	push	{r4, r7, lr}
 8004152:	b085      	sub	sp, #20
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  uint16_t result;
  memcpy(&result, pnt, sizeof(result));
 8004158:	6879      	ldr	r1, [r7, #4]
 800415a:	240e      	movs	r4, #14
 800415c:	193b      	adds	r3, r7, r4
 800415e:	2202      	movs	r2, #2
 8004160:	0018      	movs	r0, r3
 8004162:	f00b fd9e 	bl	800fca2 <memcpy>
  return result;
 8004166:	193b      	adds	r3, r7, r4
 8004168:	881b      	ldrh	r3, [r3, #0]
}
 800416a:	0018      	movs	r0, r3
 800416c:	46bd      	mov	sp, r7
 800416e:	b005      	add	sp, #20
 8004170:	bd90      	pop	{r4, r7, pc}

08004172 <parse_next_query>:

static int parse_next_query(void *data, int size, dns_query_t *query)
{
 8004172:	b590      	push	{r4, r7, lr}
 8004174:	b089      	sub	sp, #36	; 0x24
 8004176:	af00      	add	r7, sp, #0
 8004178:	60f8      	str	r0, [r7, #12]
 800417a:	60b9      	str	r1, [r7, #8]
 800417c:	607a      	str	r2, [r7, #4]
	int len;
	int lables;
	uint8_t *ptr;

	len = 0;
 800417e:	2300      	movs	r3, #0
 8004180:	61fb      	str	r3, [r7, #28]
	lables = 0;
 8004182:	2300      	movs	r3, #0
 8004184:	61bb      	str	r3, [r7, #24]
	ptr = (uint8_t *)data;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	617b      	str	r3, [r7, #20]

	while (true)
	{
		uint8_t lable_len;
		if (size <= 0) return -1;
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	2b00      	cmp	r3, #0
 800418e:	dc02      	bgt.n	8004196 <parse_next_query+0x24>
 8004190:	2301      	movs	r3, #1
 8004192:	425b      	negs	r3, r3
 8004194:	e075      	b.n	8004282 <parse_next_query+0x110>
		lable_len = *ptr++;
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	1c5a      	adds	r2, r3, #1
 800419a:	617a      	str	r2, [r7, #20]
 800419c:	2113      	movs	r1, #19
 800419e:	187a      	adds	r2, r7, r1
 80041a0:	781b      	ldrb	r3, [r3, #0]
 80041a2:	7013      	strb	r3, [r2, #0]
		size--;
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	3b01      	subs	r3, #1
 80041a8:	60bb      	str	r3, [r7, #8]
		if (lable_len == 0) break;
 80041aa:	187b      	adds	r3, r7, r1
 80041ac:	781b      	ldrb	r3, [r3, #0]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d040      	beq.n	8004234 <parse_next_query+0xc2>
		if (lables > 0)
 80041b2:	69bb      	ldr	r3, [r7, #24]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	dd0b      	ble.n	80041d0 <parse_next_query+0x5e>
		{
			if (len == DNS_MAX_HOST_NAME_LEN) return -2;
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	2b80      	cmp	r3, #128	; 0x80
 80041bc:	d102      	bne.n	80041c4 <parse_next_query+0x52>
 80041be:	2302      	movs	r3, #2
 80041c0:	425b      	negs	r3, r3
 80041c2:	e05e      	b.n	8004282 <parse_next_query+0x110>
			query->name[len++] = '.';
 80041c4:	69fb      	ldr	r3, [r7, #28]
 80041c6:	1c5a      	adds	r2, r3, #1
 80041c8:	61fa      	str	r2, [r7, #28]
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	212e      	movs	r1, #46	; 0x2e
 80041ce:	54d1      	strb	r1, [r2, r3]
		}
		if (lable_len > size) return -1;
 80041d0:	2313      	movs	r3, #19
 80041d2:	18fb      	adds	r3, r7, r3
 80041d4:	781b      	ldrb	r3, [r3, #0]
 80041d6:	68ba      	ldr	r2, [r7, #8]
 80041d8:	429a      	cmp	r2, r3
 80041da:	da02      	bge.n	80041e2 <parse_next_query+0x70>
 80041dc:	2301      	movs	r3, #1
 80041de:	425b      	negs	r3, r3
 80041e0:	e04f      	b.n	8004282 <parse_next_query+0x110>
		if (len + lable_len >= DNS_MAX_HOST_NAME_LEN) return -2;
 80041e2:	2313      	movs	r3, #19
 80041e4:	18fb      	adds	r3, r7, r3
 80041e6:	781a      	ldrb	r2, [r3, #0]
 80041e8:	69fb      	ldr	r3, [r7, #28]
 80041ea:	18d3      	adds	r3, r2, r3
 80041ec:	2b7f      	cmp	r3, #127	; 0x7f
 80041ee:	dd02      	ble.n	80041f6 <parse_next_query+0x84>
 80041f0:	2302      	movs	r3, #2
 80041f2:	425b      	negs	r3, r3
 80041f4:	e045      	b.n	8004282 <parse_next_query+0x110>
		memcpy(&query->name[len], ptr, lable_len);
 80041f6:	687a      	ldr	r2, [r7, #4]
 80041f8:	69fb      	ldr	r3, [r7, #28]
 80041fa:	18d0      	adds	r0, r2, r3
 80041fc:	2113      	movs	r1, #19
 80041fe:	000c      	movs	r4, r1
 8004200:	187b      	adds	r3, r7, r1
 8004202:	781a      	ldrb	r2, [r3, #0]
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	0019      	movs	r1, r3
 8004208:	f00b fd4b 	bl	800fca2 <memcpy>
		len += lable_len;
 800420c:	0021      	movs	r1, r4
 800420e:	187b      	adds	r3, r7, r1
 8004210:	781b      	ldrb	r3, [r3, #0]
 8004212:	69fa      	ldr	r2, [r7, #28]
 8004214:	18d3      	adds	r3, r2, r3
 8004216:	61fb      	str	r3, [r7, #28]
		ptr += lable_len;
 8004218:	187b      	adds	r3, r7, r1
 800421a:	781b      	ldrb	r3, [r3, #0]
 800421c:	697a      	ldr	r2, [r7, #20]
 800421e:	18d3      	adds	r3, r2, r3
 8004220:	617b      	str	r3, [r7, #20]
		size -= lable_len;
 8004222:	187b      	adds	r3, r7, r1
 8004224:	781b      	ldrb	r3, [r3, #0]
 8004226:	68ba      	ldr	r2, [r7, #8]
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	60bb      	str	r3, [r7, #8]
		lables++;
 800422c:	69bb      	ldr	r3, [r7, #24]
 800422e:	3301      	adds	r3, #1
 8004230:	61bb      	str	r3, [r7, #24]
	{
 8004232:	e7aa      	b.n	800418a <parse_next_query+0x18>
		if (lable_len == 0) break;
 8004234:	46c0      	nop			; (mov r8, r8)
	}

	if (size < 4) return -1;
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	2b03      	cmp	r3, #3
 800423a:	dc02      	bgt.n	8004242 <parse_next_query+0xd0>
 800423c:	2301      	movs	r3, #1
 800423e:	425b      	negs	r3, r3
 8004240:	e01f      	b.n	8004282 <parse_next_query+0x110>
	query->name[len] = 0;
 8004242:	687a      	ldr	r2, [r7, #4]
 8004244:	69fb      	ldr	r3, [r7, #28]
 8004246:	18d3      	adds	r3, r2, r3
 8004248:	2200      	movs	r2, #0
 800424a:	701a      	strb	r2, [r3, #0]
	query->type = get_uint16(ptr);
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	0018      	movs	r0, r3
 8004250:	f7ff ff7e 	bl	8004150 <get_uint16>
 8004254:	0003      	movs	r3, r0
 8004256:	0019      	movs	r1, r3
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2280      	movs	r2, #128	; 0x80
 800425c:	5299      	strh	r1, [r3, r2]
	ptr += 2;
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	3302      	adds	r3, #2
 8004262:	617b      	str	r3, [r7, #20]
	query->Class = get_uint16(ptr);
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	0018      	movs	r0, r3
 8004268:	f7ff ff72 	bl	8004150 <get_uint16>
 800426c:	0003      	movs	r3, r0
 800426e:	0019      	movs	r1, r3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2282      	movs	r2, #130	; 0x82
 8004274:	5299      	strh	r1, [r3, r2]
	ptr += 2;
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	3302      	adds	r3, #2
 800427a:	617b      	str	r3, [r7, #20]
	return ptr - (uint8_t *)data;
 800427c:	697a      	ldr	r2, [r7, #20]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	1ad3      	subs	r3, r2, r3
}
 8004282:	0018      	movs	r0, r3
 8004284:	46bd      	mov	sp, r7
 8004286:	b009      	add	sp, #36	; 0x24
 8004288:	bd90      	pop	{r4, r7, pc}
	...

0800428c <udp_recv_proc>:

static void udp_recv_proc(void *arg, struct udp_pcb *upcb, struct pbuf *p, struct ip_addr *addr, u16_t port)
{
 800428c:	b590      	push	{r4, r7, lr}
 800428e:	b08b      	sub	sp, #44	; 0x2c
 8004290:	af00      	add	r7, sp, #0
 8004292:	60f8      	str	r0, [r7, #12]
 8004294:	60b9      	str	r1, [r7, #8]
 8004296:	607a      	str	r2, [r7, #4]
 8004298:	603b      	str	r3, [r7, #0]
	static dns_query_t query;
	struct pbuf *out;
	ip_addr_t host_addr;
	dns_answer_t *answer;

	if (p->len <= sizeof(dns_header_t)) goto error;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	895b      	ldrh	r3, [r3, #10]
 800429e:	2b0c      	cmp	r3, #12
 80042a0:	d800      	bhi.n	80042a4 <udp_recv_proc+0x18>
 80042a2:	e142      	b.n	800452a <udp_recv_proc+0x29e>
	header = (dns_header_t *)p->payload;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	627b      	str	r3, [r7, #36]	; 0x24
	if (header->flags.qr != 0) goto error;
 80042aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ac:	789b      	ldrb	r3, [r3, #2]
 80042ae:	227f      	movs	r2, #127	; 0x7f
 80042b0:	4393      	bics	r3, r2
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d000      	beq.n	80042ba <udp_recv_proc+0x2e>
 80042b8:	e139      	b.n	800452e <udp_recv_proc+0x2a2>
	if (ntohs(header->n_record[0]) != 1) goto error;
 80042ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042bc:	791a      	ldrb	r2, [r3, #4]
 80042be:	795b      	ldrb	r3, [r3, #5]
 80042c0:	021b      	lsls	r3, r3, #8
 80042c2:	4313      	orrs	r3, r2
 80042c4:	b29b      	uxth	r3, r3
 80042c6:	0018      	movs	r0, r3
 80042c8:	f000 f9ba 	bl	8004640 <lwip_ntohs>
 80042cc:	0003      	movs	r3, r0
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d000      	beq.n	80042d4 <udp_recv_proc+0x48>
 80042d2:	e12e      	b.n	8004532 <udp_recv_proc+0x2a6>

	len = parse_next_query(header + 1, p->len - sizeof(dns_header_t), &query);
 80042d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d6:	330c      	adds	r3, #12
 80042d8:	0018      	movs	r0, r3
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	895b      	ldrh	r3, [r3, #10]
 80042de:	3b0c      	subs	r3, #12
 80042e0:	0019      	movs	r1, r3
 80042e2:	4b9b      	ldr	r3, [pc, #620]	; (8004550 <udp_recv_proc+0x2c4>)
 80042e4:	001a      	movs	r2, r3
 80042e6:	f7ff ff44 	bl	8004172 <parse_next_query>
 80042ea:	0003      	movs	r3, r0
 80042ec:	623b      	str	r3, [r7, #32]
	if (len < 0) goto error;
 80042ee:	6a3b      	ldr	r3, [r7, #32]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	da00      	bge.n	80042f6 <udp_recv_proc+0x6a>
 80042f4:	e11f      	b.n	8004536 <udp_recv_proc+0x2aa>
	if (!query_proc(query.name, &host_addr)) goto error;
 80042f6:	4b97      	ldr	r3, [pc, #604]	; (8004554 <udp_recv_proc+0x2c8>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	2214      	movs	r2, #20
 80042fc:	18b9      	adds	r1, r7, r2
 80042fe:	4a94      	ldr	r2, [pc, #592]	; (8004550 <udp_recv_proc+0x2c4>)
 8004300:	0010      	movs	r0, r2
 8004302:	4798      	blx	r3
 8004304:	0003      	movs	r3, r0
 8004306:	001a      	movs	r2, r3
 8004308:	2301      	movs	r3, #1
 800430a:	4053      	eors	r3, r2
 800430c:	b2db      	uxtb	r3, r3
 800430e:	2b00      	cmp	r3, #0
 8004310:	d000      	beq.n	8004314 <udp_recv_proc+0x88>
 8004312:	e112      	b.n	800453a <udp_recv_proc+0x2ae>

	len += sizeof(dns_header_t);
 8004314:	6a3b      	ldr	r3, [r7, #32]
 8004316:	330c      	adds	r3, #12
 8004318:	623b      	str	r3, [r7, #32]
	out = pbuf_alloc(PBUF_TRANSPORT, len + 16, PBUF_POOL);
 800431a:	6a3b      	ldr	r3, [r7, #32]
 800431c:	b29b      	uxth	r3, r3
 800431e:	3310      	adds	r3, #16
 8004320:	b29b      	uxth	r3, r3
 8004322:	2203      	movs	r2, #3
 8004324:	0019      	movs	r1, r3
 8004326:	2000      	movs	r0, #0
 8004328:	f000 ff30 	bl	800518c <pbuf_alloc>
 800432c:	0003      	movs	r3, r0
 800432e:	61fb      	str	r3, [r7, #28]
	if (out == NULL) goto error;
 8004330:	69fb      	ldr	r3, [r7, #28]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d100      	bne.n	8004338 <udp_recv_proc+0xac>
 8004336:	e102      	b.n	800453e <udp_recv_proc+0x2b2>

	memcpy(out->payload, p->payload, len);
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	6858      	ldr	r0, [r3, #4]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	6a3a      	ldr	r2, [r7, #32]
 8004342:	0019      	movs	r1, r3
 8004344:	f00b fcad 	bl	800fca2 <memcpy>
	header = (dns_header_t *)out->payload;
 8004348:	69fb      	ldr	r3, [r7, #28]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	627b      	str	r3, [r7, #36]	; 0x24
	header->flags.qr = 1;
 800434e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004350:	789a      	ldrb	r2, [r3, #2]
 8004352:	2180      	movs	r1, #128	; 0x80
 8004354:	4249      	negs	r1, r1
 8004356:	430a      	orrs	r2, r1
 8004358:	709a      	strb	r2, [r3, #2]
	header->n_record[1] = htons(1);
 800435a:	2001      	movs	r0, #1
 800435c:	f000 f95a 	bl	8004614 <lwip_htons>
 8004360:	0003      	movs	r3, r0
 8004362:	001a      	movs	r2, r3
 8004364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004366:	21ff      	movs	r1, #255	; 0xff
 8004368:	4011      	ands	r1, r2
 800436a:	000c      	movs	r4, r1
 800436c:	7999      	ldrb	r1, [r3, #6]
 800436e:	2000      	movs	r0, #0
 8004370:	4001      	ands	r1, r0
 8004372:	1c08      	adds	r0, r1, #0
 8004374:	1c21      	adds	r1, r4, #0
 8004376:	4301      	orrs	r1, r0
 8004378:	7199      	strb	r1, [r3, #6]
 800437a:	0a12      	lsrs	r2, r2, #8
 800437c:	b290      	uxth	r0, r2
 800437e:	79da      	ldrb	r2, [r3, #7]
 8004380:	2100      	movs	r1, #0
 8004382:	400a      	ands	r2, r1
 8004384:	1c11      	adds	r1, r2, #0
 8004386:	1c02      	adds	r2, r0, #0
 8004388:	430a      	orrs	r2, r1
 800438a:	71da      	strb	r2, [r3, #7]
	answer = (struct dns_answer *)((uint8_t *)out->payload + len);
 800438c:	69fb      	ldr	r3, [r7, #28]
 800438e:	685a      	ldr	r2, [r3, #4]
 8004390:	6a3b      	ldr	r3, [r7, #32]
 8004392:	18d3      	adds	r3, r2, r3
 8004394:	61bb      	str	r3, [r7, #24]
	answer->name = htons(0xC00C);
 8004396:	4b70      	ldr	r3, [pc, #448]	; (8004558 <udp_recv_proc+0x2cc>)
 8004398:	0018      	movs	r0, r3
 800439a:	f000 f93b 	bl	8004614 <lwip_htons>
 800439e:	0003      	movs	r3, r0
 80043a0:	001a      	movs	r2, r3
 80043a2:	69bb      	ldr	r3, [r7, #24]
 80043a4:	21ff      	movs	r1, #255	; 0xff
 80043a6:	4011      	ands	r1, r2
 80043a8:	000c      	movs	r4, r1
 80043aa:	7819      	ldrb	r1, [r3, #0]
 80043ac:	2000      	movs	r0, #0
 80043ae:	4001      	ands	r1, r0
 80043b0:	1c08      	adds	r0, r1, #0
 80043b2:	1c21      	adds	r1, r4, #0
 80043b4:	4301      	orrs	r1, r0
 80043b6:	7019      	strb	r1, [r3, #0]
 80043b8:	0a12      	lsrs	r2, r2, #8
 80043ba:	b290      	uxth	r0, r2
 80043bc:	785a      	ldrb	r2, [r3, #1]
 80043be:	2100      	movs	r1, #0
 80043c0:	400a      	ands	r2, r1
 80043c2:	1c11      	adds	r1, r2, #0
 80043c4:	1c02      	adds	r2, r0, #0
 80043c6:	430a      	orrs	r2, r1
 80043c8:	705a      	strb	r2, [r3, #1]
	answer->type = htons(1);
 80043ca:	2001      	movs	r0, #1
 80043cc:	f000 f922 	bl	8004614 <lwip_htons>
 80043d0:	0003      	movs	r3, r0
 80043d2:	001a      	movs	r2, r3
 80043d4:	69bb      	ldr	r3, [r7, #24]
 80043d6:	21ff      	movs	r1, #255	; 0xff
 80043d8:	4011      	ands	r1, r2
 80043da:	000c      	movs	r4, r1
 80043dc:	7899      	ldrb	r1, [r3, #2]
 80043de:	2000      	movs	r0, #0
 80043e0:	4001      	ands	r1, r0
 80043e2:	1c08      	adds	r0, r1, #0
 80043e4:	1c21      	adds	r1, r4, #0
 80043e6:	4301      	orrs	r1, r0
 80043e8:	7099      	strb	r1, [r3, #2]
 80043ea:	0a12      	lsrs	r2, r2, #8
 80043ec:	b290      	uxth	r0, r2
 80043ee:	78da      	ldrb	r2, [r3, #3]
 80043f0:	2100      	movs	r1, #0
 80043f2:	400a      	ands	r2, r1
 80043f4:	1c11      	adds	r1, r2, #0
 80043f6:	1c02      	adds	r2, r0, #0
 80043f8:	430a      	orrs	r2, r1
 80043fa:	70da      	strb	r2, [r3, #3]
	answer->Class = htons(1);
 80043fc:	2001      	movs	r0, #1
 80043fe:	f000 f909 	bl	8004614 <lwip_htons>
 8004402:	0003      	movs	r3, r0
 8004404:	001a      	movs	r2, r3
 8004406:	69bb      	ldr	r3, [r7, #24]
 8004408:	21ff      	movs	r1, #255	; 0xff
 800440a:	4011      	ands	r1, r2
 800440c:	000c      	movs	r4, r1
 800440e:	7919      	ldrb	r1, [r3, #4]
 8004410:	2000      	movs	r0, #0
 8004412:	4001      	ands	r1, r0
 8004414:	1c08      	adds	r0, r1, #0
 8004416:	1c21      	adds	r1, r4, #0
 8004418:	4301      	orrs	r1, r0
 800441a:	7119      	strb	r1, [r3, #4]
 800441c:	0a12      	lsrs	r2, r2, #8
 800441e:	b290      	uxth	r0, r2
 8004420:	795a      	ldrb	r2, [r3, #5]
 8004422:	2100      	movs	r1, #0
 8004424:	400a      	ands	r2, r1
 8004426:	1c11      	adds	r1, r2, #0
 8004428:	1c02      	adds	r2, r0, #0
 800442a:	430a      	orrs	r2, r1
 800442c:	715a      	strb	r2, [r3, #5]
	answer->ttl = htonl(32);
 800442e:	2020      	movs	r0, #32
 8004430:	f000 f916 	bl	8004660 <lwip_htonl>
 8004434:	0002      	movs	r2, r0
 8004436:	69bb      	ldr	r3, [r7, #24]
 8004438:	3306      	adds	r3, #6
 800443a:	21ff      	movs	r1, #255	; 0xff
 800443c:	4011      	ands	r1, r2
 800443e:	000c      	movs	r4, r1
 8004440:	7819      	ldrb	r1, [r3, #0]
 8004442:	2000      	movs	r0, #0
 8004444:	4001      	ands	r1, r0
 8004446:	1c08      	adds	r0, r1, #0
 8004448:	1c21      	adds	r1, r4, #0
 800444a:	4301      	orrs	r1, r0
 800444c:	7019      	strb	r1, [r3, #0]
 800444e:	0a11      	lsrs	r1, r2, #8
 8004450:	20ff      	movs	r0, #255	; 0xff
 8004452:	4001      	ands	r1, r0
 8004454:	000c      	movs	r4, r1
 8004456:	7859      	ldrb	r1, [r3, #1]
 8004458:	2000      	movs	r0, #0
 800445a:	4001      	ands	r1, r0
 800445c:	1c08      	adds	r0, r1, #0
 800445e:	1c21      	adds	r1, r4, #0
 8004460:	4301      	orrs	r1, r0
 8004462:	7059      	strb	r1, [r3, #1]
 8004464:	0c11      	lsrs	r1, r2, #16
 8004466:	20ff      	movs	r0, #255	; 0xff
 8004468:	4001      	ands	r1, r0
 800446a:	000c      	movs	r4, r1
 800446c:	7899      	ldrb	r1, [r3, #2]
 800446e:	2000      	movs	r0, #0
 8004470:	4001      	ands	r1, r0
 8004472:	1c08      	adds	r0, r1, #0
 8004474:	1c21      	adds	r1, r4, #0
 8004476:	4301      	orrs	r1, r0
 8004478:	7099      	strb	r1, [r3, #2]
 800447a:	0e10      	lsrs	r0, r2, #24
 800447c:	78da      	ldrb	r2, [r3, #3]
 800447e:	2100      	movs	r1, #0
 8004480:	400a      	ands	r2, r1
 8004482:	1c11      	adds	r1, r2, #0
 8004484:	1c02      	adds	r2, r0, #0
 8004486:	430a      	orrs	r2, r1
 8004488:	70da      	strb	r2, [r3, #3]
	answer->len = htons(4);
 800448a:	2004      	movs	r0, #4
 800448c:	f000 f8c2 	bl	8004614 <lwip_htons>
 8004490:	0003      	movs	r3, r0
 8004492:	001a      	movs	r2, r3
 8004494:	69bb      	ldr	r3, [r7, #24]
 8004496:	21ff      	movs	r1, #255	; 0xff
 8004498:	4011      	ands	r1, r2
 800449a:	000c      	movs	r4, r1
 800449c:	7a99      	ldrb	r1, [r3, #10]
 800449e:	2000      	movs	r0, #0
 80044a0:	4001      	ands	r1, r0
 80044a2:	1c08      	adds	r0, r1, #0
 80044a4:	1c21      	adds	r1, r4, #0
 80044a6:	4301      	orrs	r1, r0
 80044a8:	7299      	strb	r1, [r3, #10]
 80044aa:	0a12      	lsrs	r2, r2, #8
 80044ac:	b290      	uxth	r0, r2
 80044ae:	7ada      	ldrb	r2, [r3, #11]
 80044b0:	2100      	movs	r1, #0
 80044b2:	400a      	ands	r2, r1
 80044b4:	1c11      	adds	r1, r2, #0
 80044b6:	1c02      	adds	r2, r0, #0
 80044b8:	430a      	orrs	r2, r1
 80044ba:	72da      	strb	r2, [r3, #11]
	answer->addr = host_addr.addr;
 80044bc:	697a      	ldr	r2, [r7, #20]
 80044be:	69bb      	ldr	r3, [r7, #24]
 80044c0:	21ff      	movs	r1, #255	; 0xff
 80044c2:	4011      	ands	r1, r2
 80044c4:	000c      	movs	r4, r1
 80044c6:	7b19      	ldrb	r1, [r3, #12]
 80044c8:	2000      	movs	r0, #0
 80044ca:	4001      	ands	r1, r0
 80044cc:	1c08      	adds	r0, r1, #0
 80044ce:	1c21      	adds	r1, r4, #0
 80044d0:	4301      	orrs	r1, r0
 80044d2:	7319      	strb	r1, [r3, #12]
 80044d4:	0a11      	lsrs	r1, r2, #8
 80044d6:	20ff      	movs	r0, #255	; 0xff
 80044d8:	4001      	ands	r1, r0
 80044da:	000c      	movs	r4, r1
 80044dc:	7b59      	ldrb	r1, [r3, #13]
 80044de:	2000      	movs	r0, #0
 80044e0:	4001      	ands	r1, r0
 80044e2:	1c08      	adds	r0, r1, #0
 80044e4:	1c21      	adds	r1, r4, #0
 80044e6:	4301      	orrs	r1, r0
 80044e8:	7359      	strb	r1, [r3, #13]
 80044ea:	0c11      	lsrs	r1, r2, #16
 80044ec:	20ff      	movs	r0, #255	; 0xff
 80044ee:	4001      	ands	r1, r0
 80044f0:	000c      	movs	r4, r1
 80044f2:	7b99      	ldrb	r1, [r3, #14]
 80044f4:	2000      	movs	r0, #0
 80044f6:	4001      	ands	r1, r0
 80044f8:	1c08      	adds	r0, r1, #0
 80044fa:	1c21      	adds	r1, r4, #0
 80044fc:	4301      	orrs	r1, r0
 80044fe:	7399      	strb	r1, [r3, #14]
 8004500:	0e10      	lsrs	r0, r2, #24
 8004502:	7bda      	ldrb	r2, [r3, #15]
 8004504:	2100      	movs	r1, #0
 8004506:	400a      	ands	r2, r1
 8004508:	1c11      	adds	r1, r2, #0
 800450a:	1c02      	adds	r2, r0, #0
 800450c:	430a      	orrs	r2, r1
 800450e:	73da      	strb	r2, [r3, #15]
	
	udp_sendto(upcb, out, addr, port);
 8004510:	2338      	movs	r3, #56	; 0x38
 8004512:	18fb      	adds	r3, r7, r3
 8004514:	881b      	ldrh	r3, [r3, #0]
 8004516:	683a      	ldr	r2, [r7, #0]
 8004518:	69f9      	ldr	r1, [r7, #28]
 800451a:	68b8      	ldr	r0, [r7, #8]
 800451c:	f006 fb66 	bl	800abec <udp_sendto>
	pbuf_free(out);
 8004520:	69fb      	ldr	r3, [r7, #28]
 8004522:	0018      	movs	r0, r3
 8004524:	f001 f8be 	bl	80056a4 <pbuf_free>
 8004528:	e00a      	b.n	8004540 <udp_recv_proc+0x2b4>
	if (p->len <= sizeof(dns_header_t)) goto error;
 800452a:	46c0      	nop			; (mov r8, r8)
 800452c:	e008      	b.n	8004540 <udp_recv_proc+0x2b4>
	if (header->flags.qr != 0) goto error;
 800452e:	46c0      	nop			; (mov r8, r8)
 8004530:	e006      	b.n	8004540 <udp_recv_proc+0x2b4>
	if (ntohs(header->n_record[0]) != 1) goto error;
 8004532:	46c0      	nop			; (mov r8, r8)
 8004534:	e004      	b.n	8004540 <udp_recv_proc+0x2b4>
	if (len < 0) goto error;
 8004536:	46c0      	nop			; (mov r8, r8)
 8004538:	e002      	b.n	8004540 <udp_recv_proc+0x2b4>
	if (!query_proc(query.name, &host_addr)) goto error;
 800453a:	46c0      	nop			; (mov r8, r8)
 800453c:	e000      	b.n	8004540 <udp_recv_proc+0x2b4>
	if (out == NULL) goto error;
 800453e:	46c0      	nop			; (mov r8, r8)

error:
	pbuf_free(p);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	0018      	movs	r0, r3
 8004544:	f001 f8ae 	bl	80056a4 <pbuf_free>
}
 8004548:	46c0      	nop			; (mov r8, r8)
 800454a:	46bd      	mov	sp, r7
 800454c:	b00b      	add	sp, #44	; 0x2c
 800454e:	bd90      	pop	{r4, r7, pc}
 8004550:	200000c8 	.word	0x200000c8
 8004554:	200000c4 	.word	0x200000c4
 8004558:	0000c00c 	.word	0x0000c00c

0800455c <dnserv_init>:

err_t dnserv_init(ip_addr_t *bind, uint16_t port, dns_query_proc_t qp)
{
 800455c:	b5b0      	push	{r4, r5, r7, lr}
 800455e:	b086      	sub	sp, #24
 8004560:	af00      	add	r7, sp, #0
 8004562:	60f8      	str	r0, [r7, #12]
 8004564:	607a      	str	r2, [r7, #4]
 8004566:	230a      	movs	r3, #10
 8004568:	18fb      	adds	r3, r7, r3
 800456a:	1c0a      	adds	r2, r1, #0
 800456c:	801a      	strh	r2, [r3, #0]
	err_t err;
	udp_init();
 800456e:	f006 f95b 	bl	800a828 <udp_init>
	dnserv_free();
 8004572:	f000 f83b 	bl	80045ec <dnserv_free>
	pcb = udp_new();
 8004576:	f006 fd35 	bl	800afe4 <udp_new>
 800457a:	0002      	movs	r2, r0
 800457c:	4b18      	ldr	r3, [pc, #96]	; (80045e0 <dnserv_init+0x84>)
 800457e:	601a      	str	r2, [r3, #0]
	if (pcb == NULL)
 8004580:	4b17      	ldr	r3, [pc, #92]	; (80045e0 <dnserv_init+0x84>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d102      	bne.n	800458e <dnserv_init+0x32>
		return ERR_MEM;
 8004588:	2301      	movs	r3, #1
 800458a:	425b      	negs	r3, r3
 800458c:	e023      	b.n	80045d6 <dnserv_init+0x7a>
	err = udp_bind(pcb, bind, port);
 800458e:	4b14      	ldr	r3, [pc, #80]	; (80045e0 <dnserv_init+0x84>)
 8004590:	6818      	ldr	r0, [r3, #0]
 8004592:	2517      	movs	r5, #23
 8004594:	197c      	adds	r4, r7, r5
 8004596:	230a      	movs	r3, #10
 8004598:	18fb      	adds	r3, r7, r3
 800459a:	881a      	ldrh	r2, [r3, #0]
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	0019      	movs	r1, r3
 80045a0:	f006 fc72 	bl	800ae88 <udp_bind>
 80045a4:	0003      	movs	r3, r0
 80045a6:	7023      	strb	r3, [r4, #0]
	if (err != ERR_OK)
 80045a8:	197b      	adds	r3, r7, r5
 80045aa:	781b      	ldrb	r3, [r3, #0]
 80045ac:	b25b      	sxtb	r3, r3
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d006      	beq.n	80045c0 <dnserv_init+0x64>
	{
		dnserv_free();
 80045b2:	f000 f81b 	bl	80045ec <dnserv_free>
		return err;
 80045b6:	2317      	movs	r3, #23
 80045b8:	18fb      	adds	r3, r7, r3
 80045ba:	781b      	ldrb	r3, [r3, #0]
 80045bc:	b25b      	sxtb	r3, r3
 80045be:	e00a      	b.n	80045d6 <dnserv_init+0x7a>
	}
	udp_recv(pcb, udp_recv_proc, NULL);
 80045c0:	4b07      	ldr	r3, [pc, #28]	; (80045e0 <dnserv_init+0x84>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4907      	ldr	r1, [pc, #28]	; (80045e4 <dnserv_init+0x88>)
 80045c6:	2200      	movs	r2, #0
 80045c8:	0018      	movs	r0, r3
 80045ca:	f006 fcc9 	bl	800af60 <udp_recv>
	query_proc = qp;
 80045ce:	4b06      	ldr	r3, [pc, #24]	; (80045e8 <dnserv_init+0x8c>)
 80045d0:	687a      	ldr	r2, [r7, #4]
 80045d2:	601a      	str	r2, [r3, #0]
	return ERR_OK;
 80045d4:	2300      	movs	r3, #0
}
 80045d6:	0018      	movs	r0, r3
 80045d8:	46bd      	mov	sp, r7
 80045da:	b006      	add	sp, #24
 80045dc:	bdb0      	pop	{r4, r5, r7, pc}
 80045de:	46c0      	nop			; (mov r8, r8)
 80045e0:	200000c0 	.word	0x200000c0
 80045e4:	0800428d 	.word	0x0800428d
 80045e8:	200000c4 	.word	0x200000c4

080045ec <dnserv_free>:

void dnserv_free()
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	af00      	add	r7, sp, #0
	if (pcb == NULL) return;
 80045f0:	4b07      	ldr	r3, [pc, #28]	; (8004610 <dnserv_free+0x24>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d008      	beq.n	800460a <dnserv_free+0x1e>
	udp_remove(pcb);
 80045f8:	4b05      	ldr	r3, [pc, #20]	; (8004610 <dnserv_free+0x24>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	0018      	movs	r0, r3
 80045fe:	f006 fcbf 	bl	800af80 <udp_remove>
	pcb = NULL;
 8004602:	4b03      	ldr	r3, [pc, #12]	; (8004610 <dnserv_free+0x24>)
 8004604:	2200      	movs	r2, #0
 8004606:	601a      	str	r2, [r3, #0]
 8004608:	e000      	b.n	800460c <dnserv_free+0x20>
	if (pcb == NULL) return;
 800460a:	46c0      	nop			; (mov r8, r8)
}
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}
 8004610:	200000c0 	.word	0x200000c0

08004614 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b082      	sub	sp, #8
 8004618:	af00      	add	r7, sp, #0
 800461a:	0002      	movs	r2, r0
 800461c:	1dbb      	adds	r3, r7, #6
 800461e:	801a      	strh	r2, [r3, #0]
  return ((n & 0xff) << 8) | ((n & 0xff00) >> 8);
 8004620:	1dbb      	adds	r3, r7, #6
 8004622:	881b      	ldrh	r3, [r3, #0]
 8004624:	021b      	lsls	r3, r3, #8
 8004626:	b21a      	sxth	r2, r3
 8004628:	1dbb      	adds	r3, r7, #6
 800462a:	881b      	ldrh	r3, [r3, #0]
 800462c:	0a1b      	lsrs	r3, r3, #8
 800462e:	b29b      	uxth	r3, r3
 8004630:	b21b      	sxth	r3, r3
 8004632:	4313      	orrs	r3, r2
 8004634:	b21b      	sxth	r3, r3
 8004636:	b29b      	uxth	r3, r3
}
 8004638:	0018      	movs	r0, r3
 800463a:	46bd      	mov	sp, r7
 800463c:	b002      	add	sp, #8
 800463e:	bd80      	pop	{r7, pc}

08004640 <lwip_ntohs>:
 * @param n u16_t in network byte order
 * @return n in host byte order
 */
u16_t
lwip_ntohs(u16_t n)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b082      	sub	sp, #8
 8004644:	af00      	add	r7, sp, #0
 8004646:	0002      	movs	r2, r0
 8004648:	1dbb      	adds	r3, r7, #6
 800464a:	801a      	strh	r2, [r3, #0]
  return lwip_htons(n);
 800464c:	1dbb      	adds	r3, r7, #6
 800464e:	881b      	ldrh	r3, [r3, #0]
 8004650:	0018      	movs	r0, r3
 8004652:	f7ff ffdf 	bl	8004614 <lwip_htons>
 8004656:	0003      	movs	r3, r0
}
 8004658:	0018      	movs	r0, r3
 800465a:	46bd      	mov	sp, r7
 800465c:	b002      	add	sp, #8
 800465e:	bd80      	pop	{r7, pc}

08004660 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b082      	sub	sp, #8
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  return ((n & 0xff) << 24) |
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	061a      	lsls	r2, r3, #24
    ((n & 0xff00) << 8) |
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	0219      	lsls	r1, r3, #8
 8004670:	23ff      	movs	r3, #255	; 0xff
 8004672:	041b      	lsls	r3, r3, #16
 8004674:	400b      	ands	r3, r1
  return ((n & 0xff) << 24) |
 8004676:	431a      	orrs	r2, r3
    ((n & 0xff0000UL) >> 8) |
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	0a19      	lsrs	r1, r3, #8
 800467c:	23ff      	movs	r3, #255	; 0xff
 800467e:	021b      	lsls	r3, r3, #8
 8004680:	400b      	ands	r3, r1
    ((n & 0xff00) << 8) |
 8004682:	431a      	orrs	r2, r3
    ((n & 0xff000000UL) >> 24);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	0e1b      	lsrs	r3, r3, #24
    ((n & 0xff0000UL) >> 8) |
 8004688:	4313      	orrs	r3, r2
}
 800468a:	0018      	movs	r0, r3
 800468c:	46bd      	mov	sp, r7
 800468e:	b002      	add	sp, #8
 8004690:	bd80      	pop	{r7, pc}

08004692 <lwip_ntohl>:
 * @param n u32_t in network byte order
 * @return n in host byte order
 */
u32_t
lwip_ntohl(u32_t n)
{
 8004692:	b580      	push	{r7, lr}
 8004694:	b082      	sub	sp, #8
 8004696:	af00      	add	r7, sp, #0
 8004698:	6078      	str	r0, [r7, #4]
  return lwip_htonl(n);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	0018      	movs	r0, r3
 800469e:	f7ff ffdf 	bl	8004660 <lwip_htonl>
 80046a2:	0003      	movs	r3, r0
}
 80046a4:	0018      	movs	r0, r3
 80046a6:	46bd      	mov	sp, r7
 80046a8:	b002      	add	sp, #8
 80046aa:	bd80      	pop	{r7, pc}

080046ac <lwip_init>:
/**
 * Perform Sanity check of user-configurable values, and initialize all modules.
 */
void
lwip_init(void)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	af00      	add	r7, sp, #0
  /* Modules initialization */
  stats_init();
 80046b0:	f001 fa76 	bl	8005ba0 <stats_init>
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 80046b4:	f000 f86c 	bl	8004790 <mem_init>
  memp_init();
 80046b8:	f000 fb18 	bl	8004cec <memp_init>
  pbuf_init();
  netif_init();
 80046bc:	f000 fc6a 	bl	8004f94 <netif_init>
#endif /* LWIP_ARP */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80046c0:	f006 f8b2 	bl	800a828 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80046c4:	f001 fa71 	bl	8005baa <tcp_init>
#if LWIP_DNS
  dns_init();
#endif /* LWIP_DNS */

#if LWIP_TIMERS
  sys_timeouts_init();
 80046c8:	f006 f81e 	bl	800a708 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80046cc:	46c0      	nop			; (mov r8, r8)
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
	...

080046d4 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b084      	sub	sp, #16
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);

  nmem = (struct mem *)(void *)&ram[mem->next];
 80046dc:	4b29      	ldr	r3, [pc, #164]	; (8004784 <plug_holes+0xb0>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	8812      	ldrh	r2, [r2, #0]
 80046e4:	189b      	adds	r3, r3, r2
 80046e6:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d01f      	beq.n	8004730 <plug_holes+0x5c>
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	791b      	ldrb	r3, [r3, #4]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d11b      	bne.n	8004730 <plug_holes+0x5c>
 80046f8:	4b23      	ldr	r3, [pc, #140]	; (8004788 <plug_holes+0xb4>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	68fa      	ldr	r2, [r7, #12]
 80046fe:	429a      	cmp	r2, r3
 8004700:	d016      	beq.n	8004730 <plug_holes+0x5c>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8004702:	4b22      	ldr	r3, [pc, #136]	; (800478c <plug_holes+0xb8>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	68fa      	ldr	r2, [r7, #12]
 8004708:	429a      	cmp	r2, r3
 800470a:	d102      	bne.n	8004712 <plug_holes+0x3e>
      lfree = mem;
 800470c:	4b1f      	ldr	r3, [pc, #124]	; (800478c <plug_holes+0xb8>)
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	601a      	str	r2, [r3, #0]
    }
    mem->next = nmem->next;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	881a      	ldrh	r2, [r3, #0]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 800471a:	687a      	ldr	r2, [r7, #4]
 800471c:	4b19      	ldr	r3, [pc, #100]	; (8004784 <plug_holes+0xb0>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	1ad1      	subs	r1, r2, r3
 8004722:	4b18      	ldr	r3, [pc, #96]	; (8004784 <plug_holes+0xb0>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	68fa      	ldr	r2, [r7, #12]
 8004728:	8812      	ldrh	r2, [r2, #0]
 800472a:	189b      	adds	r3, r3, r2
 800472c:	b28a      	uxth	r2, r1
 800472e:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 8004730:	4b14      	ldr	r3, [pc, #80]	; (8004784 <plug_holes+0xb0>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	687a      	ldr	r2, [r7, #4]
 8004736:	8852      	ldrh	r2, [r2, #2]
 8004738:	189b      	adds	r3, r3, r2
 800473a:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800473c:	68ba      	ldr	r2, [r7, #8]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	429a      	cmp	r2, r3
 8004742:	d01a      	beq.n	800477a <plug_holes+0xa6>
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	791b      	ldrb	r3, [r3, #4]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d116      	bne.n	800477a <plug_holes+0xa6>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800474c:	4b0f      	ldr	r3, [pc, #60]	; (800478c <plug_holes+0xb8>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	687a      	ldr	r2, [r7, #4]
 8004752:	429a      	cmp	r2, r3
 8004754:	d102      	bne.n	800475c <plug_holes+0x88>
      lfree = pmem;
 8004756:	4b0d      	ldr	r3, [pc, #52]	; (800478c <plug_holes+0xb8>)
 8004758:	68ba      	ldr	r2, [r7, #8]
 800475a:	601a      	str	r2, [r3, #0]
    }
    pmem->next = mem->next;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	881a      	ldrh	r2, [r3, #0]
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 8004764:	68ba      	ldr	r2, [r7, #8]
 8004766:	4b07      	ldr	r3, [pc, #28]	; (8004784 <plug_holes+0xb0>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	1ad1      	subs	r1, r2, r3
 800476c:	4b05      	ldr	r3, [pc, #20]	; (8004784 <plug_holes+0xb0>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	687a      	ldr	r2, [r7, #4]
 8004772:	8812      	ldrh	r2, [r2, #0]
 8004774:	189b      	adds	r3, r3, r2
 8004776:	b28a      	uxth	r2, r1
 8004778:	805a      	strh	r2, [r3, #2]
  }
}
 800477a:	46c0      	nop			; (mov r8, r8)
 800477c:	46bd      	mov	sp, r7
 800477e:	b004      	add	sp, #16
 8004780:	bd80      	pop	{r7, pc}
 8004782:	46c0      	nop			; (mov r8, r8)
 8004784:	2000014c 	.word	0x2000014c
 8004788:	20000150 	.word	0x20000150
 800478c:	20000154 	.word	0x20000154

08004790 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b082      	sub	sp, #8
 8004794:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8004796:	4b1b      	ldr	r3, [pc, #108]	; (8004804 <mem_init+0x74>)
 8004798:	3303      	adds	r3, #3
 800479a:	2203      	movs	r2, #3
 800479c:	4393      	bics	r3, r2
 800479e:	001a      	movs	r2, r3
 80047a0:	4b19      	ldr	r3, [pc, #100]	; (8004808 <mem_init+0x78>)
 80047a2:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80047a4:	4b18      	ldr	r3, [pc, #96]	; (8004808 <mem_init+0x78>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	22c8      	movs	r2, #200	; 0xc8
 80047ae:	00d2      	lsls	r2, r2, #3
 80047b0:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2200      	movs	r2, #0
 80047b6:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2200      	movs	r2, #0
 80047bc:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 80047be:	4b12      	ldr	r3, [pc, #72]	; (8004808 <mem_init+0x78>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	22c8      	movs	r2, #200	; 0xc8
 80047c4:	00d2      	lsls	r2, r2, #3
 80047c6:	189a      	adds	r2, r3, r2
 80047c8:	4b10      	ldr	r3, [pc, #64]	; (800480c <mem_init+0x7c>)
 80047ca:	601a      	str	r2, [r3, #0]
  ram_end->used = 1;
 80047cc:	4b0f      	ldr	r3, [pc, #60]	; (800480c <mem_init+0x7c>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	2201      	movs	r2, #1
 80047d2:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80047d4:	4b0d      	ldr	r3, [pc, #52]	; (800480c <mem_init+0x7c>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	22c8      	movs	r2, #200	; 0xc8
 80047da:	00d2      	lsls	r2, r2, #3
 80047dc:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80047de:	4b0b      	ldr	r3, [pc, #44]	; (800480c <mem_init+0x7c>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	22c8      	movs	r2, #200	; 0xc8
 80047e4:	00d2      	lsls	r2, r2, #3
 80047e6:	805a      	strh	r2, [r3, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80047e8:	4b07      	ldr	r3, [pc, #28]	; (8004808 <mem_init+0x78>)
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	4b08      	ldr	r3, [pc, #32]	; (8004810 <mem_init+0x80>)
 80047ee:	601a      	str	r2, [r3, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);
 80047f0:	4b08      	ldr	r3, [pc, #32]	; (8004814 <mem_init+0x84>)
 80047f2:	22a8      	movs	r2, #168	; 0xa8
 80047f4:	21c8      	movs	r1, #200	; 0xc8
 80047f6:	00c9      	lsls	r1, r1, #3
 80047f8:	5299      	strh	r1, [r3, r2]

  if(sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 80047fa:	46c0      	nop			; (mov r8, r8)
 80047fc:	46bd      	mov	sp, r7
 80047fe:	b002      	add	sp, #8
 8004800:	bd80      	pop	{r7, pc}
 8004802:	46c0      	nop			; (mov r8, r8)
 8004804:	20002af8 	.word	0x20002af8
 8004808:	2000014c 	.word	0x2000014c
 800480c:	20000150 	.word	0x20000150
 8004810:	20000154 	.word	0x20000154
 8004814:	20003158 	.word	0x20003158

08004818 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b084      	sub	sp, #16
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d036      	beq.n	8004894 <mem_free+0x7c>
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8004826:	4b1d      	ldr	r3, [pc, #116]	; (800489c <mem_free+0x84>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	429a      	cmp	r2, r3
 800482e:	d304      	bcc.n	800483a <mem_free+0x22>
 8004830:	4b1b      	ldr	r3, [pc, #108]	; (80048a0 <mem_free+0x88>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	429a      	cmp	r2, r3
 8004838:	d308      	bcc.n	800484c <mem_free+0x34>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
    MEM_STATS_INC(illegal);
 800483a:	4b1a      	ldr	r3, [pc, #104]	; (80048a4 <mem_free+0x8c>)
 800483c:	22b0      	movs	r2, #176	; 0xb0
 800483e:	5a9b      	ldrh	r3, [r3, r2]
 8004840:	3301      	adds	r3, #1
 8004842:	b299      	uxth	r1, r3
 8004844:	4b17      	ldr	r3, [pc, #92]	; (80048a4 <mem_free+0x8c>)
 8004846:	22b0      	movs	r2, #176	; 0xb0
 8004848:	5299      	strh	r1, [r3, r2]
    SYS_ARCH_UNPROTECT(lev);
    return;
 800484a:	e024      	b.n	8004896 <mem_free+0x7e>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* Get the corresponding struct mem ... */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	3b08      	subs	r3, #8
 8004850:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
  /* ... and is now unused. */
  mem->used = 0;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2200      	movs	r2, #0
 8004856:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8004858:	4b13      	ldr	r3, [pc, #76]	; (80048a8 <mem_free+0x90>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	68fa      	ldr	r2, [r7, #12]
 800485e:	429a      	cmp	r2, r3
 8004860:	d202      	bcs.n	8004868 <mem_free+0x50>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8004862:	4b11      	ldr	r3, [pc, #68]	; (80048a8 <mem_free+0x90>)
 8004864:	68fa      	ldr	r2, [r7, #12]
 8004866:	601a      	str	r2, [r3, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));
 8004868:	4b0e      	ldr	r3, [pc, #56]	; (80048a4 <mem_free+0x8c>)
 800486a:	22aa      	movs	r2, #170	; 0xaa
 800486c:	5a9a      	ldrh	r2, [r3, r2]
 800486e:	68f9      	ldr	r1, [r7, #12]
 8004870:	4b0a      	ldr	r3, [pc, #40]	; (800489c <mem_free+0x84>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	1acb      	subs	r3, r1, r3
 8004876:	b299      	uxth	r1, r3
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	881b      	ldrh	r3, [r3, #0]
 800487c:	1acb      	subs	r3, r1, r3
 800487e:	b29b      	uxth	r3, r3
 8004880:	18d3      	adds	r3, r2, r3
 8004882:	b299      	uxth	r1, r3
 8004884:	4b07      	ldr	r3, [pc, #28]	; (80048a4 <mem_free+0x8c>)
 8004886:	22aa      	movs	r2, #170	; 0xaa
 8004888:	5299      	strh	r1, [r3, r2]

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	0018      	movs	r0, r3
 800488e:	f7ff ff21 	bl	80046d4 <plug_holes>
 8004892:	e000      	b.n	8004896 <mem_free+0x7e>
    return;
 8004894:	46c0      	nop			; (mov r8, r8)
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8004896:	46bd      	mov	sp, r7
 8004898:	b004      	add	sp, #16
 800489a:	bd80      	pop	{r7, pc}
 800489c:	2000014c 	.word	0x2000014c
 80048a0:	20000150 	.word	0x20000150
 80048a4:	20003158 	.word	0x20003158
 80048a8:	20000154 	.word	0x20000154

080048ac <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b086      	sub	sp, #24
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	000a      	movs	r2, r1
 80048b6:	1cbb      	adds	r3, r7, #2
 80048b8:	801a      	strh	r2, [r3, #0]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 80048ba:	1cbb      	adds	r3, r7, #2
 80048bc:	881b      	ldrh	r3, [r3, #0]
 80048be:	3303      	adds	r3, #3
 80048c0:	b29a      	uxth	r2, r3
 80048c2:	1cbb      	adds	r3, r7, #2
 80048c4:	2103      	movs	r1, #3
 80048c6:	438a      	bics	r2, r1
 80048c8:	801a      	strh	r2, [r3, #0]

  if(newsize < MIN_SIZE_ALIGNED) {
 80048ca:	1cbb      	adds	r3, r7, #2
 80048cc:	881b      	ldrh	r3, [r3, #0]
 80048ce:	2b0b      	cmp	r3, #11
 80048d0:	d802      	bhi.n	80048d8 <mem_trim+0x2c>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80048d2:	1cbb      	adds	r3, r7, #2
 80048d4:	220c      	movs	r2, #12
 80048d6:	801a      	strh	r2, [r3, #0]
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 80048d8:	1cbb      	adds	r3, r7, #2
 80048da:	881a      	ldrh	r2, [r3, #0]
 80048dc:	23c8      	movs	r3, #200	; 0xc8
 80048de:	00db      	lsls	r3, r3, #3
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d901      	bls.n	80048e8 <mem_trim+0x3c>
    return NULL;
 80048e4:	2300      	movs	r3, #0
 80048e6:	e0e8      	b.n	8004aba <mem_trim+0x20e>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80048e8:	4b76      	ldr	r3, [pc, #472]	; (8004ac4 <mem_trim+0x218>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	687a      	ldr	r2, [r7, #4]
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d304      	bcc.n	80048fc <mem_trim+0x50>
 80048f2:	4b75      	ldr	r3, [pc, #468]	; (8004ac8 <mem_trim+0x21c>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	687a      	ldr	r2, [r7, #4]
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d309      	bcc.n	8004910 <mem_trim+0x64>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
    MEM_STATS_INC(illegal);
 80048fc:	4b73      	ldr	r3, [pc, #460]	; (8004acc <mem_trim+0x220>)
 80048fe:	22b0      	movs	r2, #176	; 0xb0
 8004900:	5a9b      	ldrh	r3, [r3, r2]
 8004902:	3301      	adds	r3, #1
 8004904:	b299      	uxth	r1, r3
 8004906:	4b71      	ldr	r3, [pc, #452]	; (8004acc <mem_trim+0x220>)
 8004908:	22b0      	movs	r2, #176	; 0xb0
 800490a:	5299      	strh	r1, [r3, r2]
    SYS_ARCH_UNPROTECT(lev);
    return rmem;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	e0d4      	b.n	8004aba <mem_trim+0x20e>
  }
  /* Get the corresponding struct mem ... */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	3b08      	subs	r3, #8
 8004914:	617b      	str	r3, [r7, #20]
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 8004916:	697a      	ldr	r2, [r7, #20]
 8004918:	4b6a      	ldr	r3, [pc, #424]	; (8004ac4 <mem_trim+0x218>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	1ad2      	subs	r2, r2, r3
 800491e:	2112      	movs	r1, #18
 8004920:	187b      	adds	r3, r7, r1
 8004922:	801a      	strh	r2, [r3, #0]

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	881a      	ldrh	r2, [r3, #0]
 8004928:	187b      	adds	r3, r7, r1
 800492a:	881b      	ldrh	r3, [r3, #0]
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	b29a      	uxth	r2, r3
 8004930:	2110      	movs	r1, #16
 8004932:	187b      	adds	r3, r7, r1
 8004934:	3a08      	subs	r2, #8
 8004936:	801a      	strh	r2, [r3, #0]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
  if (newsize > size) {
 8004938:	1cba      	adds	r2, r7, #2
 800493a:	187b      	adds	r3, r7, r1
 800493c:	8812      	ldrh	r2, [r2, #0]
 800493e:	881b      	ldrh	r3, [r3, #0]
 8004940:	429a      	cmp	r2, r3
 8004942:	d901      	bls.n	8004948 <mem_trim+0x9c>
    /* not supported */
    return NULL;
 8004944:	2300      	movs	r3, #0
 8004946:	e0b8      	b.n	8004aba <mem_trim+0x20e>
  }
  if (newsize == size) {
 8004948:	1cba      	adds	r2, r7, #2
 800494a:	2310      	movs	r3, #16
 800494c:	18fb      	adds	r3, r7, r3
 800494e:	8812      	ldrh	r2, [r2, #0]
 8004950:	881b      	ldrh	r3, [r3, #0]
 8004952:	429a      	cmp	r2, r3
 8004954:	d101      	bne.n	800495a <mem_trim+0xae>
    /* No change in size, simply return */
    return rmem;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	e0af      	b.n	8004aba <mem_trim+0x20e>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = (struct mem *)(void *)&ram[mem->next];
 800495a:	4b5a      	ldr	r3, [pc, #360]	; (8004ac4 <mem_trim+0x218>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	697a      	ldr	r2, [r7, #20]
 8004960:	8812      	ldrh	r2, [r2, #0]
 8004962:	189b      	adds	r3, r3, r2
 8004964:	60fb      	str	r3, [r7, #12]
  if(mem2->used == 0) {
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	791b      	ldrb	r3, [r3, #4]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d153      	bne.n	8004a16 <mem_trim+0x16a>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 800496e:	2308      	movs	r3, #8
 8004970:	18fb      	adds	r3, r7, r3
 8004972:	68fa      	ldr	r2, [r7, #12]
 8004974:	8812      	ldrh	r2, [r2, #0]
 8004976:	801a      	strh	r2, [r3, #0]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8004978:	2312      	movs	r3, #18
 800497a:	18fa      	adds	r2, r7, r3
 800497c:	1cbb      	adds	r3, r7, #2
 800497e:	8812      	ldrh	r2, [r2, #0]
 8004980:	881b      	ldrh	r3, [r3, #0]
 8004982:	18d3      	adds	r3, r2, r3
 8004984:	b29a      	uxth	r2, r3
 8004986:	230a      	movs	r3, #10
 8004988:	18fb      	adds	r3, r7, r3
 800498a:	3208      	adds	r2, #8
 800498c:	801a      	strh	r2, [r3, #0]
    if (lfree == mem2) {
 800498e:	4b50      	ldr	r3, [pc, #320]	; (8004ad0 <mem_trim+0x224>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	68fa      	ldr	r2, [r7, #12]
 8004994:	429a      	cmp	r2, r3
 8004996:	d107      	bne.n	80049a8 <mem_trim+0xfc>
      lfree = (struct mem *)(void *)&ram[ptr2];
 8004998:	4b4a      	ldr	r3, [pc, #296]	; (8004ac4 <mem_trim+0x218>)
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	230a      	movs	r3, #10
 800499e:	18fb      	adds	r3, r7, r3
 80049a0:	881b      	ldrh	r3, [r3, #0]
 80049a2:	18d2      	adds	r2, r2, r3
 80049a4:	4b4a      	ldr	r3, [pc, #296]	; (8004ad0 <mem_trim+0x224>)
 80049a6:	601a      	str	r2, [r3, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 80049a8:	4b46      	ldr	r3, [pc, #280]	; (8004ac4 <mem_trim+0x218>)
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	210a      	movs	r1, #10
 80049ae:	187b      	adds	r3, r7, r1
 80049b0:	881b      	ldrh	r3, [r3, #0]
 80049b2:	18d3      	adds	r3, r2, r3
 80049b4:	60fb      	str	r3, [r7, #12]
    mem2->used = 0;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2200      	movs	r2, #0
 80049ba:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2208      	movs	r2, #8
 80049c0:	18ba      	adds	r2, r7, r2
 80049c2:	8812      	ldrh	r2, [r2, #0]
 80049c4:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2212      	movs	r2, #18
 80049ca:	18ba      	adds	r2, r7, r2
 80049cc:	8812      	ldrh	r2, [r2, #0]
 80049ce:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	187a      	adds	r2, r7, r1
 80049d4:	8812      	ldrh	r2, [r2, #0]
 80049d6:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	881a      	ldrh	r2, [r3, #0]
 80049dc:	23c8      	movs	r3, #200	; 0xc8
 80049de:	00db      	lsls	r3, r3, #3
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d008      	beq.n	80049f6 <mem_trim+0x14a>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 80049e4:	4b37      	ldr	r3, [pc, #220]	; (8004ac4 <mem_trim+0x218>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	68fa      	ldr	r2, [r7, #12]
 80049ea:	8812      	ldrh	r2, [r2, #0]
 80049ec:	189b      	adds	r3, r3, r2
 80049ee:	220a      	movs	r2, #10
 80049f0:	18ba      	adds	r2, r7, r2
 80049f2:	8812      	ldrh	r2, [r2, #0]
 80049f4:	805a      	strh	r2, [r3, #2]
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
 80049f6:	4b35      	ldr	r3, [pc, #212]	; (8004acc <mem_trim+0x220>)
 80049f8:	22aa      	movs	r2, #170	; 0xaa
 80049fa:	5a9a      	ldrh	r2, [r3, r2]
 80049fc:	1cb9      	adds	r1, r7, #2
 80049fe:	2310      	movs	r3, #16
 8004a00:	18fb      	adds	r3, r7, r3
 8004a02:	8809      	ldrh	r1, [r1, #0]
 8004a04:	881b      	ldrh	r3, [r3, #0]
 8004a06:	1acb      	subs	r3, r1, r3
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	18d3      	adds	r3, r2, r3
 8004a0c:	b299      	uxth	r1, r3
 8004a0e:	4b2f      	ldr	r3, [pc, #188]	; (8004acc <mem_trim+0x220>)
 8004a10:	22aa      	movs	r2, #170	; 0xaa
 8004a12:	5299      	strh	r1, [r3, r2]
 8004a14:	e050      	b.n	8004ab8 <mem_trim+0x20c>
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8004a16:	1cbb      	adds	r3, r7, #2
 8004a18:	881b      	ldrh	r3, [r3, #0]
 8004a1a:	3314      	adds	r3, #20
 8004a1c:	001a      	movs	r2, r3
 8004a1e:	2310      	movs	r3, #16
 8004a20:	18fb      	adds	r3, r7, r3
 8004a22:	881b      	ldrh	r3, [r3, #0]
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d847      	bhi.n	8004ab8 <mem_trim+0x20c>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8004a28:	2312      	movs	r3, #18
 8004a2a:	18fa      	adds	r2, r7, r3
 8004a2c:	1cbb      	adds	r3, r7, #2
 8004a2e:	8812      	ldrh	r2, [r2, #0]
 8004a30:	881b      	ldrh	r3, [r3, #0]
 8004a32:	18d3      	adds	r3, r2, r3
 8004a34:	b29a      	uxth	r2, r3
 8004a36:	210a      	movs	r1, #10
 8004a38:	187b      	adds	r3, r7, r1
 8004a3a:	3208      	adds	r2, #8
 8004a3c:	801a      	strh	r2, [r3, #0]
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8004a3e:	4b21      	ldr	r3, [pc, #132]	; (8004ac4 <mem_trim+0x218>)
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	187b      	adds	r3, r7, r1
 8004a44:	881b      	ldrh	r3, [r3, #0]
 8004a46:	18d3      	adds	r3, r2, r3
 8004a48:	60fb      	str	r3, [r7, #12]
    if (mem2 < lfree) {
 8004a4a:	4b21      	ldr	r3, [pc, #132]	; (8004ad0 <mem_trim+0x224>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	68fa      	ldr	r2, [r7, #12]
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d202      	bcs.n	8004a5a <mem_trim+0x1ae>
      lfree = mem2;
 8004a54:	4b1e      	ldr	r3, [pc, #120]	; (8004ad0 <mem_trim+0x224>)
 8004a56:	68fa      	ldr	r2, [r7, #12]
 8004a58:	601a      	str	r2, [r3, #0]
    }
    mem2->used = 0;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	881a      	ldrh	r2, [r3, #0]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2212      	movs	r2, #18
 8004a6c:	18ba      	adds	r2, r7, r2
 8004a6e:	8812      	ldrh	r2, [r2, #0]
 8004a70:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	220a      	movs	r2, #10
 8004a76:	18ba      	adds	r2, r7, r2
 8004a78:	8812      	ldrh	r2, [r2, #0]
 8004a7a:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	881a      	ldrh	r2, [r3, #0]
 8004a80:	23c8      	movs	r3, #200	; 0xc8
 8004a82:	00db      	lsls	r3, r3, #3
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d008      	beq.n	8004a9a <mem_trim+0x1ee>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8004a88:	4b0e      	ldr	r3, [pc, #56]	; (8004ac4 <mem_trim+0x218>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	68fa      	ldr	r2, [r7, #12]
 8004a8e:	8812      	ldrh	r2, [r2, #0]
 8004a90:	189b      	adds	r3, r3, r2
 8004a92:	220a      	movs	r2, #10
 8004a94:	18ba      	adds	r2, r7, r2
 8004a96:	8812      	ldrh	r2, [r2, #0]
 8004a98:	805a      	strh	r2, [r3, #2]
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
 8004a9a:	4b0c      	ldr	r3, [pc, #48]	; (8004acc <mem_trim+0x220>)
 8004a9c:	22aa      	movs	r2, #170	; 0xaa
 8004a9e:	5a9a      	ldrh	r2, [r3, r2]
 8004aa0:	1cb9      	adds	r1, r7, #2
 8004aa2:	2310      	movs	r3, #16
 8004aa4:	18fb      	adds	r3, r7, r3
 8004aa6:	8809      	ldrh	r1, [r1, #0]
 8004aa8:	881b      	ldrh	r3, [r3, #0]
 8004aaa:	1acb      	subs	r3, r1, r3
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	18d3      	adds	r3, r2, r3
 8004ab0:	b299      	uxth	r1, r3
 8004ab2:	4b06      	ldr	r3, [pc, #24]	; (8004acc <mem_trim+0x220>)
 8004ab4:	22aa      	movs	r2, #170	; 0xaa
 8004ab6:	5299      	strh	r1, [r3, r2]
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8004ab8:	687b      	ldr	r3, [r7, #4]
}
 8004aba:	0018      	movs	r0, r3
 8004abc:	46bd      	mov	sp, r7
 8004abe:	b006      	add	sp, #24
 8004ac0:	bd80      	pop	{r7, pc}
 8004ac2:	46c0      	nop			; (mov r8, r8)
 8004ac4:	2000014c 	.word	0x2000014c
 8004ac8:	20000150 	.word	0x20000150
 8004acc:	20003158 	.word	0x20003158
 8004ad0:	20000154 	.word	0x20000154

08004ad4 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b088      	sub	sp, #32
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	0002      	movs	r2, r0
 8004adc:	1dbb      	adds	r3, r7, #6
 8004ade:	801a      	strh	r2, [r3, #0]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 8004ae0:	1dbb      	adds	r3, r7, #6
 8004ae2:	881b      	ldrh	r3, [r3, #0]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d101      	bne.n	8004aec <mem_malloc+0x18>
    return NULL;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	e0f2      	b.n	8004cd2 <mem_malloc+0x1fe>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 8004aec:	1dbb      	adds	r3, r7, #6
 8004aee:	881b      	ldrh	r3, [r3, #0]
 8004af0:	3303      	adds	r3, #3
 8004af2:	b29a      	uxth	r2, r3
 8004af4:	1dbb      	adds	r3, r7, #6
 8004af6:	2103      	movs	r1, #3
 8004af8:	438a      	bics	r2, r1
 8004afa:	801a      	strh	r2, [r3, #0]

  if(size < MIN_SIZE_ALIGNED) {
 8004afc:	1dbb      	adds	r3, r7, #6
 8004afe:	881b      	ldrh	r3, [r3, #0]
 8004b00:	2b0b      	cmp	r3, #11
 8004b02:	d802      	bhi.n	8004b0a <mem_malloc+0x36>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8004b04:	1dbb      	adds	r3, r7, #6
 8004b06:	220c      	movs	r2, #12
 8004b08:	801a      	strh	r2, [r3, #0]
  }

  if (size > MEM_SIZE_ALIGNED) {
 8004b0a:	1dbb      	adds	r3, r7, #6
 8004b0c:	881a      	ldrh	r2, [r3, #0]
 8004b0e:	23c8      	movs	r3, #200	; 0xc8
 8004b10:	00db      	lsls	r3, r3, #3
 8004b12:	429a      	cmp	r2, r3
 8004b14:	d901      	bls.n	8004b1a <mem_malloc+0x46>
    return NULL;
 8004b16:	2300      	movs	r3, #0
 8004b18:	e0db      	b.n	8004cd2 <mem_malloc+0x1fe>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8004b1a:	4b70      	ldr	r3, [pc, #448]	; (8004cdc <mem_malloc+0x208>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	001a      	movs	r2, r3
 8004b20:	4b6f      	ldr	r3, [pc, #444]	; (8004ce0 <mem_malloc+0x20c>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	1ad2      	subs	r2, r2, r3
 8004b26:	231e      	movs	r3, #30
 8004b28:	18fb      	adds	r3, r7, r3
 8004b2a:	801a      	strh	r2, [r3, #0]
 8004b2c:	e0bd      	b.n	8004caa <mem_malloc+0x1d6>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 8004b2e:	4b6c      	ldr	r3, [pc, #432]	; (8004ce0 <mem_malloc+0x20c>)
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	231e      	movs	r3, #30
 8004b34:	18fb      	adds	r3, r7, r3
 8004b36:	881b      	ldrh	r3, [r3, #0]
 8004b38:	18d3      	adds	r3, r2, r3
 8004b3a:	617b      	str	r3, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	791b      	ldrb	r3, [r3, #4]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d000      	beq.n	8004b46 <mem_malloc+0x72>
 8004b44:	e0a8      	b.n	8004c98 <mem_malloc+0x1c4>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	881b      	ldrh	r3, [r3, #0]
 8004b4a:	001a      	movs	r2, r3
 8004b4c:	231e      	movs	r3, #30
 8004b4e:	18fb      	adds	r3, r7, r3
 8004b50:	881b      	ldrh	r3, [r3, #0]
 8004b52:	1ad3      	subs	r3, r2, r3
 8004b54:	3b08      	subs	r3, #8
 8004b56:	001a      	movs	r2, r3
 8004b58:	1dbb      	adds	r3, r7, #6
 8004b5a:	881b      	ldrh	r3, [r3, #0]
      if ((!mem->used) &&
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d200      	bcs.n	8004b62 <mem_malloc+0x8e>
 8004b60:	e09a      	b.n	8004c98 <mem_malloc+0x1c4>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	881b      	ldrh	r3, [r3, #0]
 8004b66:	001a      	movs	r2, r3
 8004b68:	231e      	movs	r3, #30
 8004b6a:	18fb      	adds	r3, r7, r3
 8004b6c:	881b      	ldrh	r3, [r3, #0]
 8004b6e:	1ad3      	subs	r3, r2, r3
 8004b70:	3b08      	subs	r3, #8
 8004b72:	001a      	movs	r2, r3
 8004b74:	1dbb      	adds	r3, r7, #6
 8004b76:	881b      	ldrh	r3, [r3, #0]
 8004b78:	3314      	adds	r3, #20
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d34c      	bcc.n	8004c18 <mem_malloc+0x144>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 8004b7e:	201e      	movs	r0, #30
 8004b80:	183a      	adds	r2, r7, r0
 8004b82:	1dbb      	adds	r3, r7, #6
 8004b84:	8812      	ldrh	r2, [r2, #0]
 8004b86:	881b      	ldrh	r3, [r3, #0]
 8004b88:	18d3      	adds	r3, r2, r3
 8004b8a:	b29a      	uxth	r2, r3
 8004b8c:	2112      	movs	r1, #18
 8004b8e:	187b      	adds	r3, r7, r1
 8004b90:	3208      	adds	r2, #8
 8004b92:	801a      	strh	r2, [r3, #0]
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 8004b94:	4b52      	ldr	r3, [pc, #328]	; (8004ce0 <mem_malloc+0x20c>)
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	187b      	adds	r3, r7, r1
 8004b9a:	881b      	ldrh	r3, [r3, #0]
 8004b9c:	18d3      	adds	r3, r2, r3
 8004b9e:	60fb      	str	r3, [r7, #12]
          mem2->used = 0;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	881a      	ldrh	r2, [r3, #0]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	183a      	adds	r2, r7, r0
 8004bb2:	8812      	ldrh	r2, [r2, #0]
 8004bb4:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	187a      	adds	r2, r7, r1
 8004bba:	8812      	ldrh	r2, [r2, #0]
 8004bbc:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	881a      	ldrh	r2, [r3, #0]
 8004bc8:	23c8      	movs	r3, #200	; 0xc8
 8004bca:	00db      	lsls	r3, r3, #3
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d008      	beq.n	8004be2 <mem_malloc+0x10e>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8004bd0:	4b43      	ldr	r3, [pc, #268]	; (8004ce0 <mem_malloc+0x20c>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	68fa      	ldr	r2, [r7, #12]
 8004bd6:	8812      	ldrh	r2, [r2, #0]
 8004bd8:	189b      	adds	r3, r3, r2
 8004bda:	2212      	movs	r2, #18
 8004bdc:	18ba      	adds	r2, r7, r2
 8004bde:	8812      	ldrh	r2, [r2, #0]
 8004be0:	805a      	strh	r2, [r3, #2]
          }
          MEM_STATS_INC_USED(used, (size + SIZEOF_STRUCT_MEM));
 8004be2:	4b40      	ldr	r3, [pc, #256]	; (8004ce4 <mem_malloc+0x210>)
 8004be4:	22aa      	movs	r2, #170	; 0xaa
 8004be6:	5a9a      	ldrh	r2, [r3, r2]
 8004be8:	1dbb      	adds	r3, r7, #6
 8004bea:	881b      	ldrh	r3, [r3, #0]
 8004bec:	18d3      	adds	r3, r2, r3
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	3308      	adds	r3, #8
 8004bf2:	b299      	uxth	r1, r3
 8004bf4:	4b3b      	ldr	r3, [pc, #236]	; (8004ce4 <mem_malloc+0x210>)
 8004bf6:	22aa      	movs	r2, #170	; 0xaa
 8004bf8:	5299      	strh	r1, [r3, r2]
 8004bfa:	4b3a      	ldr	r3, [pc, #232]	; (8004ce4 <mem_malloc+0x210>)
 8004bfc:	22ac      	movs	r2, #172	; 0xac
 8004bfe:	5a9a      	ldrh	r2, [r3, r2]
 8004c00:	4b38      	ldr	r3, [pc, #224]	; (8004ce4 <mem_malloc+0x210>)
 8004c02:	21aa      	movs	r1, #170	; 0xaa
 8004c04:	5a5b      	ldrh	r3, [r3, r1]
 8004c06:	429a      	cmp	r2, r3
 8004c08:	d228      	bcs.n	8004c5c <mem_malloc+0x188>
 8004c0a:	4b36      	ldr	r3, [pc, #216]	; (8004ce4 <mem_malloc+0x210>)
 8004c0c:	22aa      	movs	r2, #170	; 0xaa
 8004c0e:	5a99      	ldrh	r1, [r3, r2]
 8004c10:	4b34      	ldr	r3, [pc, #208]	; (8004ce4 <mem_malloc+0x210>)
 8004c12:	22ac      	movs	r2, #172	; 0xac
 8004c14:	5299      	strh	r1, [r3, r2]
 8004c16:	e021      	b.n	8004c5c <mem_malloc+0x188>
           * take care of this).
           * -> near fit or excact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
 8004c1e:	4b31      	ldr	r3, [pc, #196]	; (8004ce4 <mem_malloc+0x210>)
 8004c20:	22aa      	movs	r2, #170	; 0xaa
 8004c22:	5a9a      	ldrh	r2, [r3, r2]
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	8819      	ldrh	r1, [r3, #0]
 8004c28:	6978      	ldr	r0, [r7, #20]
 8004c2a:	4b2d      	ldr	r3, [pc, #180]	; (8004ce0 <mem_malloc+0x20c>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	1ac3      	subs	r3, r0, r3
 8004c30:	b29b      	uxth	r3, r3
 8004c32:	1acb      	subs	r3, r1, r3
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	18d3      	adds	r3, r2, r3
 8004c38:	b299      	uxth	r1, r3
 8004c3a:	4b2a      	ldr	r3, [pc, #168]	; (8004ce4 <mem_malloc+0x210>)
 8004c3c:	22aa      	movs	r2, #170	; 0xaa
 8004c3e:	5299      	strh	r1, [r3, r2]
 8004c40:	4b28      	ldr	r3, [pc, #160]	; (8004ce4 <mem_malloc+0x210>)
 8004c42:	22ac      	movs	r2, #172	; 0xac
 8004c44:	5a9a      	ldrh	r2, [r3, r2]
 8004c46:	4b27      	ldr	r3, [pc, #156]	; (8004ce4 <mem_malloc+0x210>)
 8004c48:	21aa      	movs	r1, #170	; 0xaa
 8004c4a:	5a5b      	ldrh	r3, [r3, r1]
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d205      	bcs.n	8004c5c <mem_malloc+0x188>
 8004c50:	4b24      	ldr	r3, [pc, #144]	; (8004ce4 <mem_malloc+0x210>)
 8004c52:	22aa      	movs	r2, #170	; 0xaa
 8004c54:	5a99      	ldrh	r1, [r3, r2]
 8004c56:	4b23      	ldr	r3, [pc, #140]	; (8004ce4 <mem_malloc+0x210>)
 8004c58:	22ac      	movs	r2, #172	; 0xac
 8004c5a:	5299      	strh	r1, [r3, r2]
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8004c5c:	4b1f      	ldr	r3, [pc, #124]	; (8004cdc <mem_malloc+0x208>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	697a      	ldr	r2, [r7, #20]
 8004c62:	429a      	cmp	r2, r3
 8004c64:	d115      	bne.n	8004c92 <mem_malloc+0x1be>
          struct mem *cur = lfree;
 8004c66:	4b1d      	ldr	r3, [pc, #116]	; (8004cdc <mem_malloc+0x208>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8004c6c:	e005      	b.n	8004c7a <mem_malloc+0x1a6>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 8004c6e:	4b1c      	ldr	r3, [pc, #112]	; (8004ce0 <mem_malloc+0x20c>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	69ba      	ldr	r2, [r7, #24]
 8004c74:	8812      	ldrh	r2, [r2, #0]
 8004c76:	189b      	adds	r3, r3, r2
 8004c78:	61bb      	str	r3, [r7, #24]
          while (cur->used && cur != ram_end) {
 8004c7a:	69bb      	ldr	r3, [r7, #24]
 8004c7c:	791b      	ldrb	r3, [r3, #4]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d004      	beq.n	8004c8c <mem_malloc+0x1b8>
 8004c82:	4b19      	ldr	r3, [pc, #100]	; (8004ce8 <mem_malloc+0x214>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	69ba      	ldr	r2, [r7, #24]
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d1f0      	bne.n	8004c6e <mem_malloc+0x19a>
          }
          lfree = cur;
 8004c8c:	4b13      	ldr	r3, [pc, #76]	; (8004cdc <mem_malloc+0x208>)
 8004c8e:	69ba      	ldr	r2, [r7, #24]
 8004c90:	601a      	str	r2, [r3, #0]
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	3308      	adds	r3, #8
 8004c96:	e01c      	b.n	8004cd2 <mem_malloc+0x1fe>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 8004c98:	4b11      	ldr	r3, [pc, #68]	; (8004ce0 <mem_malloc+0x20c>)
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	211e      	movs	r1, #30
 8004c9e:	187b      	adds	r3, r7, r1
 8004ca0:	881b      	ldrh	r3, [r3, #0]
 8004ca2:	18d2      	adds	r2, r2, r3
 8004ca4:	187b      	adds	r3, r7, r1
 8004ca6:	8812      	ldrh	r2, [r2, #0]
 8004ca8:	801a      	strh	r2, [r3, #0]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8004caa:	231e      	movs	r3, #30
 8004cac:	18fb      	adds	r3, r7, r3
 8004cae:	881a      	ldrh	r2, [r3, #0]
 8004cb0:	1dbb      	adds	r3, r7, #6
 8004cb2:	881b      	ldrh	r3, [r3, #0]
 8004cb4:	21c8      	movs	r1, #200	; 0xc8
 8004cb6:	00c9      	lsls	r1, r1, #3
 8004cb8:	1acb      	subs	r3, r1, r3
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	da00      	bge.n	8004cc0 <mem_malloc+0x1ec>
 8004cbe:	e736      	b.n	8004b2e <mem_malloc+0x5a>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
    /* if we got interrupted by a mem_free, try again */
  } while(local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
 8004cc0:	4b08      	ldr	r3, [pc, #32]	; (8004ce4 <mem_malloc+0x210>)
 8004cc2:	22ae      	movs	r2, #174	; 0xae
 8004cc4:	5a9b      	ldrh	r3, [r3, r2]
 8004cc6:	3301      	adds	r3, #1
 8004cc8:	b299      	uxth	r1, r3
 8004cca:	4b06      	ldr	r3, [pc, #24]	; (8004ce4 <mem_malloc+0x210>)
 8004ccc:	22ae      	movs	r2, #174	; 0xae
 8004cce:	5299      	strh	r1, [r3, r2]
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  return NULL;
 8004cd0:	2300      	movs	r3, #0
}
 8004cd2:	0018      	movs	r0, r3
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	b008      	add	sp, #32
 8004cd8:	bd80      	pop	{r7, pc}
 8004cda:	46c0      	nop			; (mov r8, r8)
 8004cdc:	20000154 	.word	0x20000154
 8004ce0:	2000014c 	.word	0x2000014c
 8004ce4:	20003158 	.word	0x20003158
 8004ce8:	20000150 	.word	0x20000150

08004cec <memp_init>:
 * 
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8004cec:	b590      	push	{r4, r7, lr}
 8004cee:	b083      	sub	sp, #12
 8004cf0:	af00      	add	r7, sp, #0
  struct memp *memp;
  u16_t i, j;

  for (i = 0; i < MEMP_MAX; ++i) {
 8004cf2:	1cbb      	adds	r3, r7, #2
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	801a      	strh	r2, [r3, #0]
 8004cf8:	e039      	b.n	8004d6e <memp_init+0x82>
    MEMP_STATS_AVAIL(used, i, 0);
 8004cfa:	1cbb      	adds	r3, r7, #2
 8004cfc:	881a      	ldrh	r2, [r3, #0]
 8004cfe:	4940      	ldr	r1, [pc, #256]	; (8004e00 <memp_init+0x114>)
 8004d00:	20b4      	movs	r0, #180	; 0xb4
 8004d02:	0013      	movs	r3, r2
 8004d04:	009b      	lsls	r3, r3, #2
 8004d06:	189b      	adds	r3, r3, r2
 8004d08:	005b      	lsls	r3, r3, #1
 8004d0a:	18cb      	adds	r3, r1, r3
 8004d0c:	181b      	adds	r3, r3, r0
 8004d0e:	2200      	movs	r2, #0
 8004d10:	801a      	strh	r2, [r3, #0]
    MEMP_STATS_AVAIL(max, i, 0);
 8004d12:	1cbb      	adds	r3, r7, #2
 8004d14:	881a      	ldrh	r2, [r3, #0]
 8004d16:	493a      	ldr	r1, [pc, #232]	; (8004e00 <memp_init+0x114>)
 8004d18:	20b6      	movs	r0, #182	; 0xb6
 8004d1a:	0013      	movs	r3, r2
 8004d1c:	009b      	lsls	r3, r3, #2
 8004d1e:	189b      	adds	r3, r3, r2
 8004d20:	005b      	lsls	r3, r3, #1
 8004d22:	18cb      	adds	r3, r1, r3
 8004d24:	181b      	adds	r3, r3, r0
 8004d26:	2200      	movs	r2, #0
 8004d28:	801a      	strh	r2, [r3, #0]
    MEMP_STATS_AVAIL(err, i, 0);
 8004d2a:	1cbb      	adds	r3, r7, #2
 8004d2c:	881a      	ldrh	r2, [r3, #0]
 8004d2e:	4934      	ldr	r1, [pc, #208]	; (8004e00 <memp_init+0x114>)
 8004d30:	20b8      	movs	r0, #184	; 0xb8
 8004d32:	0013      	movs	r3, r2
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	189b      	adds	r3, r3, r2
 8004d38:	005b      	lsls	r3, r3, #1
 8004d3a:	18cb      	adds	r3, r1, r3
 8004d3c:	181b      	adds	r3, r3, r0
 8004d3e:	2200      	movs	r2, #0
 8004d40:	801a      	strh	r2, [r3, #0]
    MEMP_STATS_AVAIL(avail, i, memp_num[i]);
 8004d42:	1cbb      	adds	r3, r7, #2
 8004d44:	8819      	ldrh	r1, [r3, #0]
 8004d46:	1cbb      	adds	r3, r7, #2
 8004d48:	881a      	ldrh	r2, [r3, #0]
 8004d4a:	4b2e      	ldr	r3, [pc, #184]	; (8004e04 <memp_init+0x118>)
 8004d4c:	0049      	lsls	r1, r1, #1
 8004d4e:	5acc      	ldrh	r4, [r1, r3]
 8004d50:	492b      	ldr	r1, [pc, #172]	; (8004e00 <memp_init+0x114>)
 8004d52:	20b2      	movs	r0, #178	; 0xb2
 8004d54:	0013      	movs	r3, r2
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	189b      	adds	r3, r3, r2
 8004d5a:	005b      	lsls	r3, r3, #1
 8004d5c:	18cb      	adds	r3, r1, r3
 8004d5e:	181b      	adds	r3, r3, r0
 8004d60:	1c22      	adds	r2, r4, #0
 8004d62:	801a      	strh	r2, [r3, #0]
  for (i = 0; i < MEMP_MAX; ++i) {
 8004d64:	1cbb      	adds	r3, r7, #2
 8004d66:	1cba      	adds	r2, r7, #2
 8004d68:	8812      	ldrh	r2, [r2, #0]
 8004d6a:	3201      	adds	r2, #1
 8004d6c:	801a      	strh	r2, [r3, #0]
 8004d6e:	1cbb      	adds	r3, r7, #2
 8004d70:	881b      	ldrh	r3, [r3, #0]
 8004d72:	2b09      	cmp	r3, #9
 8004d74:	d9c1      	bls.n	8004cfa <memp_init+0xe>
  }

#if !MEMP_SEPARATE_POOLS
  memp = (struct memp *)LWIP_MEM_ALIGN(memp_memory);
 8004d76:	4b24      	ldr	r3, [pc, #144]	; (8004e08 <memp_init+0x11c>)
 8004d78:	3303      	adds	r3, #3
 8004d7a:	2203      	movs	r2, #3
 8004d7c:	4393      	bics	r3, r2
 8004d7e:	607b      	str	r3, [r7, #4]
#endif /* !MEMP_SEPARATE_POOLS */
  /* for every pool: */
  for (i = 0; i < MEMP_MAX; ++i) {
 8004d80:	1cbb      	adds	r3, r7, #2
 8004d82:	2200      	movs	r2, #0
 8004d84:	801a      	strh	r2, [r3, #0]
 8004d86:	e032      	b.n	8004dee <memp_init+0x102>
    memp_tab[i] = NULL;
 8004d88:	1cbb      	adds	r3, r7, #2
 8004d8a:	881a      	ldrh	r2, [r3, #0]
 8004d8c:	4b1f      	ldr	r3, [pc, #124]	; (8004e0c <memp_init+0x120>)
 8004d8e:	0092      	lsls	r2, r2, #2
 8004d90:	2100      	movs	r1, #0
 8004d92:	50d1      	str	r1, [r2, r3]
#if MEMP_SEPARATE_POOLS
    memp = (struct memp*)memp_bases[i];
#endif /* MEMP_SEPARATE_POOLS */
    /* create a linked list of memp elements */
    for (j = 0; j < memp_num[i]; ++j) {
 8004d94:	003b      	movs	r3, r7
 8004d96:	2200      	movs	r2, #0
 8004d98:	801a      	strh	r2, [r3, #0]
 8004d9a:	e01a      	b.n	8004dd2 <memp_init+0xe6>
      memp->next = memp_tab[i];
 8004d9c:	1cbb      	adds	r3, r7, #2
 8004d9e:	881a      	ldrh	r2, [r3, #0]
 8004da0:	4b1a      	ldr	r3, [pc, #104]	; (8004e0c <memp_init+0x120>)
 8004da2:	0092      	lsls	r2, r2, #2
 8004da4:	58d2      	ldr	r2, [r2, r3]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	601a      	str	r2, [r3, #0]
      memp_tab[i] = memp;
 8004daa:	1cbb      	adds	r3, r7, #2
 8004dac:	881a      	ldrh	r2, [r3, #0]
 8004dae:	4b17      	ldr	r3, [pc, #92]	; (8004e0c <memp_init+0x120>)
 8004db0:	0092      	lsls	r2, r2, #2
 8004db2:	6879      	ldr	r1, [r7, #4]
 8004db4:	50d1      	str	r1, [r2, r3]
      memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + memp_sizes[i]
 8004db6:	1cbb      	adds	r3, r7, #2
 8004db8:	881a      	ldrh	r2, [r3, #0]
 8004dba:	4b15      	ldr	r3, [pc, #84]	; (8004e10 <memp_init+0x124>)
 8004dbc:	0052      	lsls	r2, r2, #1
 8004dbe:	5ad3      	ldrh	r3, [r2, r3]
 8004dc0:	001a      	movs	r2, r3
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	189b      	adds	r3, r3, r2
 8004dc6:	607b      	str	r3, [r7, #4]
    for (j = 0; j < memp_num[i]; ++j) {
 8004dc8:	003b      	movs	r3, r7
 8004dca:	003a      	movs	r2, r7
 8004dcc:	8812      	ldrh	r2, [r2, #0]
 8004dce:	3201      	adds	r2, #1
 8004dd0:	801a      	strh	r2, [r3, #0]
 8004dd2:	1cbb      	adds	r3, r7, #2
 8004dd4:	881a      	ldrh	r2, [r3, #0]
 8004dd6:	4b0b      	ldr	r3, [pc, #44]	; (8004e04 <memp_init+0x118>)
 8004dd8:	0052      	lsls	r2, r2, #1
 8004dda:	5ad3      	ldrh	r3, [r2, r3]
 8004ddc:	003a      	movs	r2, r7
 8004dde:	8812      	ldrh	r2, [r2, #0]
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d3db      	bcc.n	8004d9c <memp_init+0xb0>
  for (i = 0; i < MEMP_MAX; ++i) {
 8004de4:	1cbb      	adds	r3, r7, #2
 8004de6:	1cba      	adds	r2, r7, #2
 8004de8:	8812      	ldrh	r2, [r2, #0]
 8004dea:	3201      	adds	r2, #1
 8004dec:	801a      	strh	r2, [r3, #0]
 8004dee:	1cbb      	adds	r3, r7, #2
 8004df0:	881b      	ldrh	r3, [r3, #0]
 8004df2:	2b09      	cmp	r3, #9
 8004df4:	d9c8      	bls.n	8004d88 <memp_init+0x9c>
#if MEMP_OVERFLOW_CHECK
  memp_overflow_init();
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK */
}
 8004df6:	46c0      	nop			; (mov r8, r8)
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	b003      	add	sp, #12
 8004dfc:	bd90      	pop	{r4, r7, pc}
 8004dfe:	46c0      	nop			; (mov r8, r8)
 8004e00:	20003158 	.word	0x20003158
 8004e04:	0800fd4c 	.word	0x0800fd4c
 8004e08:	20000180 	.word	0x20000180
 8004e0c:	20000158 	.word	0x20000158
 8004e10:	0800fd38 	.word	0x0800fd38

08004e14 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
 8004e14:	b590      	push	{r4, r7, lr}
 8004e16:	b085      	sub	sp, #20
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	0002      	movs	r2, r0
 8004e1c:	1dfb      	adds	r3, r7, #7
 8004e1e:	701a      	strb	r2, [r3, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);
 
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8004e20:	1dfb      	adds	r3, r7, #7
 8004e22:	781b      	ldrb	r3, [r3, #0]
 8004e24:	2b09      	cmp	r3, #9
 8004e26:	d901      	bls.n	8004e2c <memp_malloc+0x18>
 8004e28:	2300      	movs	r3, #0
 8004e2a:	e070      	b.n	8004f0e <memp_malloc+0xfa>
  SYS_ARCH_PROTECT(old_level);
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

  memp = memp_tab[type];
 8004e2c:	1dfb      	adds	r3, r7, #7
 8004e2e:	781a      	ldrb	r2, [r3, #0]
 8004e30:	4b39      	ldr	r3, [pc, #228]	; (8004f18 <memp_malloc+0x104>)
 8004e32:	0092      	lsls	r2, r2, #2
 8004e34:	58d3      	ldr	r3, [r2, r3]
 8004e36:	60fb      	str	r3, [r7, #12]
  
  if (memp != NULL) {
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d04f      	beq.n	8004ede <memp_malloc+0xca>
    memp_tab[type] = memp->next;
 8004e3e:	1dfb      	adds	r3, r7, #7
 8004e40:	781a      	ldrb	r2, [r3, #0]
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	6819      	ldr	r1, [r3, #0]
 8004e46:	4b34      	ldr	r3, [pc, #208]	; (8004f18 <memp_malloc+0x104>)
 8004e48:	0092      	lsls	r2, r2, #2
 8004e4a:	50d1      	str	r1, [r2, r3]
#if MEMP_OVERFLOW_CHECK
    memp->next = NULL;
    memp->file = file;
    memp->line = line;
#endif /* MEMP_OVERFLOW_CHECK */
    MEMP_STATS_INC_USED(used, type);
 8004e4c:	1dfb      	adds	r3, r7, #7
 8004e4e:	781a      	ldrb	r2, [r3, #0]
 8004e50:	4932      	ldr	r1, [pc, #200]	; (8004f1c <memp_malloc+0x108>)
 8004e52:	20b4      	movs	r0, #180	; 0xb4
 8004e54:	0013      	movs	r3, r2
 8004e56:	009b      	lsls	r3, r3, #2
 8004e58:	189b      	adds	r3, r3, r2
 8004e5a:	005b      	lsls	r3, r3, #1
 8004e5c:	18cb      	adds	r3, r1, r3
 8004e5e:	181b      	adds	r3, r3, r0
 8004e60:	881b      	ldrh	r3, [r3, #0]
 8004e62:	1dfa      	adds	r2, r7, #7
 8004e64:	7812      	ldrb	r2, [r2, #0]
 8004e66:	3301      	adds	r3, #1
 8004e68:	b29c      	uxth	r4, r3
 8004e6a:	492c      	ldr	r1, [pc, #176]	; (8004f1c <memp_malloc+0x108>)
 8004e6c:	20b4      	movs	r0, #180	; 0xb4
 8004e6e:	0013      	movs	r3, r2
 8004e70:	009b      	lsls	r3, r3, #2
 8004e72:	189b      	adds	r3, r3, r2
 8004e74:	005b      	lsls	r3, r3, #1
 8004e76:	18cb      	adds	r3, r1, r3
 8004e78:	181b      	adds	r3, r3, r0
 8004e7a:	1c22      	adds	r2, r4, #0
 8004e7c:	801a      	strh	r2, [r3, #0]
 8004e7e:	1dfb      	adds	r3, r7, #7
 8004e80:	781a      	ldrb	r2, [r3, #0]
 8004e82:	4926      	ldr	r1, [pc, #152]	; (8004f1c <memp_malloc+0x108>)
 8004e84:	20b6      	movs	r0, #182	; 0xb6
 8004e86:	0013      	movs	r3, r2
 8004e88:	009b      	lsls	r3, r3, #2
 8004e8a:	189b      	adds	r3, r3, r2
 8004e8c:	005b      	lsls	r3, r3, #1
 8004e8e:	18cb      	adds	r3, r1, r3
 8004e90:	181b      	adds	r3, r3, r0
 8004e92:	8819      	ldrh	r1, [r3, #0]
 8004e94:	1dfb      	adds	r3, r7, #7
 8004e96:	781a      	ldrb	r2, [r3, #0]
 8004e98:	4820      	ldr	r0, [pc, #128]	; (8004f1c <memp_malloc+0x108>)
 8004e9a:	24b4      	movs	r4, #180	; 0xb4
 8004e9c:	0013      	movs	r3, r2
 8004e9e:	009b      	lsls	r3, r3, #2
 8004ea0:	189b      	adds	r3, r3, r2
 8004ea2:	005b      	lsls	r3, r3, #1
 8004ea4:	18c3      	adds	r3, r0, r3
 8004ea6:	191b      	adds	r3, r3, r4
 8004ea8:	881b      	ldrh	r3, [r3, #0]
 8004eaa:	4299      	cmp	r1, r3
 8004eac:	d22e      	bcs.n	8004f0c <memp_malloc+0xf8>
 8004eae:	1dfb      	adds	r3, r7, #7
 8004eb0:	7819      	ldrb	r1, [r3, #0]
 8004eb2:	1dfb      	adds	r3, r7, #7
 8004eb4:	781a      	ldrb	r2, [r3, #0]
 8004eb6:	4819      	ldr	r0, [pc, #100]	; (8004f1c <memp_malloc+0x108>)
 8004eb8:	24b4      	movs	r4, #180	; 0xb4
 8004eba:	000b      	movs	r3, r1
 8004ebc:	009b      	lsls	r3, r3, #2
 8004ebe:	185b      	adds	r3, r3, r1
 8004ec0:	005b      	lsls	r3, r3, #1
 8004ec2:	18c3      	adds	r3, r0, r3
 8004ec4:	191b      	adds	r3, r3, r4
 8004ec6:	881c      	ldrh	r4, [r3, #0]
 8004ec8:	4914      	ldr	r1, [pc, #80]	; (8004f1c <memp_malloc+0x108>)
 8004eca:	20b6      	movs	r0, #182	; 0xb6
 8004ecc:	0013      	movs	r3, r2
 8004ece:	009b      	lsls	r3, r3, #2
 8004ed0:	189b      	adds	r3, r3, r2
 8004ed2:	005b      	lsls	r3, r3, #1
 8004ed4:	18cb      	adds	r3, r1, r3
 8004ed6:	181b      	adds	r3, r3, r0
 8004ed8:	1c22      	adds	r2, r4, #0
 8004eda:	801a      	strh	r2, [r3, #0]
 8004edc:	e016      	b.n	8004f0c <memp_malloc+0xf8>
    LWIP_ASSERT("memp_malloc: memp properly aligned",
                ((mem_ptr_t)memp % MEM_ALIGNMENT) == 0);
    memp = (struct memp*)(void *)((u8_t*)memp + MEMP_SIZE);
  } else {
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", memp_desc[type]));
    MEMP_STATS_INC(err, type);
 8004ede:	1dfb      	adds	r3, r7, #7
 8004ee0:	781a      	ldrb	r2, [r3, #0]
 8004ee2:	490e      	ldr	r1, [pc, #56]	; (8004f1c <memp_malloc+0x108>)
 8004ee4:	20b8      	movs	r0, #184	; 0xb8
 8004ee6:	0013      	movs	r3, r2
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	189b      	adds	r3, r3, r2
 8004eec:	005b      	lsls	r3, r3, #1
 8004eee:	18cb      	adds	r3, r1, r3
 8004ef0:	181b      	adds	r3, r3, r0
 8004ef2:	881b      	ldrh	r3, [r3, #0]
 8004ef4:	3301      	adds	r3, #1
 8004ef6:	b29c      	uxth	r4, r3
 8004ef8:	4908      	ldr	r1, [pc, #32]	; (8004f1c <memp_malloc+0x108>)
 8004efa:	20b8      	movs	r0, #184	; 0xb8
 8004efc:	0013      	movs	r3, r2
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	189b      	adds	r3, r3, r2
 8004f02:	005b      	lsls	r3, r3, #1
 8004f04:	18cb      	adds	r3, r1, r3
 8004f06:	181b      	adds	r3, r3, r0
 8004f08:	1c22      	adds	r2, r4, #0
 8004f0a:	801a      	strh	r2, [r3, #0]
  }

  SYS_ARCH_UNPROTECT(old_level);

  return memp;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
}
 8004f0e:	0018      	movs	r0, r3
 8004f10:	46bd      	mov	sp, r7
 8004f12:	b005      	add	sp, #20
 8004f14:	bd90      	pop	{r4, r7, pc}
 8004f16:	46c0      	nop			; (mov r8, r8)
 8004f18:	20000158 	.word	0x20000158
 8004f1c:	20003158 	.word	0x20003158

08004f20 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8004f20:	b590      	push	{r4, r7, lr}
 8004f22:	b085      	sub	sp, #20
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	0002      	movs	r2, r0
 8004f28:	6039      	str	r1, [r7, #0]
 8004f2a:	1dfb      	adds	r3, r7, #7
 8004f2c:	701a      	strb	r2, [r3, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  if (mem == NULL) {
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d026      	beq.n	8004f82 <memp_free+0x62>
    return;
  }
  LWIP_ASSERT("memp_free: mem properly aligned",
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	60fb      	str	r3, [r7, #12]
  memp_overflow_check_element_overflow(memp, type);
  memp_overflow_check_element_underflow(memp, type);
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
#endif /* MEMP_OVERFLOW_CHECK */

  MEMP_STATS_DEC(used, type); 
 8004f38:	1dfb      	adds	r3, r7, #7
 8004f3a:	781a      	ldrb	r2, [r3, #0]
 8004f3c:	4913      	ldr	r1, [pc, #76]	; (8004f8c <memp_free+0x6c>)
 8004f3e:	20b4      	movs	r0, #180	; 0xb4
 8004f40:	0013      	movs	r3, r2
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	189b      	adds	r3, r3, r2
 8004f46:	005b      	lsls	r3, r3, #1
 8004f48:	18cb      	adds	r3, r1, r3
 8004f4a:	181b      	adds	r3, r3, r0
 8004f4c:	881b      	ldrh	r3, [r3, #0]
 8004f4e:	3b01      	subs	r3, #1
 8004f50:	b29c      	uxth	r4, r3
 8004f52:	490e      	ldr	r1, [pc, #56]	; (8004f8c <memp_free+0x6c>)
 8004f54:	20b4      	movs	r0, #180	; 0xb4
 8004f56:	0013      	movs	r3, r2
 8004f58:	009b      	lsls	r3, r3, #2
 8004f5a:	189b      	adds	r3, r3, r2
 8004f5c:	005b      	lsls	r3, r3, #1
 8004f5e:	18cb      	adds	r3, r1, r3
 8004f60:	181b      	adds	r3, r3, r0
 8004f62:	1c22      	adds	r2, r4, #0
 8004f64:	801a      	strh	r2, [r3, #0]
  
  memp->next = memp_tab[type]; 
 8004f66:	1dfb      	adds	r3, r7, #7
 8004f68:	781a      	ldrb	r2, [r3, #0]
 8004f6a:	4b09      	ldr	r3, [pc, #36]	; (8004f90 <memp_free+0x70>)
 8004f6c:	0092      	lsls	r2, r2, #2
 8004f6e:	58d2      	ldr	r2, [r2, r3]
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	601a      	str	r2, [r3, #0]
  memp_tab[type] = memp;
 8004f74:	1dfb      	adds	r3, r7, #7
 8004f76:	781a      	ldrb	r2, [r3, #0]
 8004f78:	4b05      	ldr	r3, [pc, #20]	; (8004f90 <memp_free+0x70>)
 8004f7a:	0092      	lsls	r2, r2, #2
 8004f7c:	68f9      	ldr	r1, [r7, #12]
 8004f7e:	50d1      	str	r1, [r2, r3]
 8004f80:	e000      	b.n	8004f84 <memp_free+0x64>
    return;
 8004f82:	46c0      	nop			; (mov r8, r8)
#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity());
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
}
 8004f84:	46bd      	mov	sp, r7
 8004f86:	b005      	add	sp, #20
 8004f88:	bd90      	pop	{r4, r7, pc}
 8004f8a:	46c0      	nop			; (mov r8, r8)
 8004f8c:	20003158 	.word	0x20003158
 8004f90:	20000158 	.word	0x20000158

08004f94 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	af00      	add	r7, sp, #0
  netif_add(&loop_netif, &loop_ipaddr, &loop_netmask, &loop_gw, NULL, netif_loopif_init, tcpip_input);
#endif /* NO_SYS */
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8004f98:	46c0      	nop			; (mov r8, r8)
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}
	...

08004fa0 <netif_add>:
 * @return netif, or NULL if failed.
 */
struct netif *
netif_add(struct netif *netif, ip_addr_t *ipaddr, ip_addr_t *netmask,
  ip_addr_t *gw, void *state, netif_init_fn init, netif_input_fn input)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b084      	sub	sp, #16
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	60f8      	str	r0, [r7, #12]
 8004fa8:	60b9      	str	r1, [r7, #8]
 8004faa:	607a      	str	r2, [r7, #4]
 8004fac:	603b      	str	r3, [r7, #0]

  LWIP_ASSERT("No init function given", init != NULL);

  /* reset new interface configuration state */
  ip_addr_set_zero(&netif->ip_addr);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero(&netif->netmask);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero(&netif->gw);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	60da      	str	r2, [r3, #12]
  netif->flags = 0;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2229      	movs	r2, #41	; 0x29
 8004fc4:	2100      	movs	r1, #0
 8004fc6:	5499      	strb	r1, [r3, r2]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	69ba      	ldr	r2, [r7, #24]
 8004fcc:	61da      	str	r2, [r3, #28]
  netif->num = netif_num++;
 8004fce:	4b13      	ldr	r3, [pc, #76]	; (800501c <netif_add+0x7c>)
 8004fd0:	781b      	ldrb	r3, [r3, #0]
 8004fd2:	1c5a      	adds	r2, r3, #1
 8004fd4:	b2d1      	uxtb	r1, r2
 8004fd6:	4a11      	ldr	r2, [pc, #68]	; (800501c <netif_add+0x7c>)
 8004fd8:	7011      	strb	r1, [r2, #0]
 8004fda:	68fa      	ldr	r2, [r7, #12]
 8004fdc:	212c      	movs	r1, #44	; 0x2c
 8004fde:	5453      	strb	r3, [r2, r1]
  netif->input = input;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	6a3a      	ldr	r2, [r7, #32]
 8004fe4:	611a      	str	r2, [r3, #16]
  NETIF_SET_HWADDRHINT(netif, NULL);
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

  netif_set_addr(netif, ipaddr, netmask, gw);
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	68b9      	ldr	r1, [r7, #8]
 8004fec:	68f8      	ldr	r0, [r7, #12]
 8004fee:	f000 f819 	bl	8005024 <netif_set_addr>

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8004ff2:	68fa      	ldr	r2, [r7, #12]
 8004ff4:	69fb      	ldr	r3, [r7, #28]
 8004ff6:	0010      	movs	r0, r2
 8004ff8:	4798      	blx	r3
 8004ffa:	1e03      	subs	r3, r0, #0
 8004ffc:	d001      	beq.n	8005002 <netif_add+0x62>
    return NULL;
 8004ffe:	2300      	movs	r3, #0
 8005000:	e007      	b.n	8005012 <netif_add+0x72>
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8005002:	4b07      	ldr	r3, [pc, #28]	; (8005020 <netif_add+0x80>)
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800500a:	4b05      	ldr	r3, [pc, #20]	; (8005020 <netif_add+0x80>)
 800500c:	68fa      	ldr	r2, [r7, #12]
 800500e:	601a      	str	r2, [r3, #0]
  LWIP_DEBUGF(NETIF_DEBUG, (" netmask "));
  ip_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip_addr_debug_print(NETIF_DEBUG, gw);
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 8005010:	68fb      	ldr	r3, [r7, #12]
}
 8005012:	0018      	movs	r0, r3
 8005014:	46bd      	mov	sp, r7
 8005016:	b004      	add	sp, #16
 8005018:	bd80      	pop	{r7, pc}
 800501a:	46c0      	nop			; (mov r8, r8)
 800501c:	20002273 	.word	0x20002273
 8005020:	2000314c 	.word	0x2000314c

08005024 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, ip_addr_t *ipaddr, ip_addr_t *netmask,
    ip_addr_t *gw)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b084      	sub	sp, #16
 8005028:	af00      	add	r7, sp, #0
 800502a:	60f8      	str	r0, [r7, #12]
 800502c:	60b9      	str	r1, [r7, #8]
 800502e:	607a      	str	r2, [r7, #4]
 8005030:	603b      	str	r3, [r7, #0]
  netif_set_ipaddr(netif, ipaddr);
 8005032:	68ba      	ldr	r2, [r7, #8]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	0011      	movs	r1, r2
 8005038:	0018      	movs	r0, r3
 800503a:	f000 f811 	bl	8005060 <netif_set_ipaddr>
  netif_set_netmask(netif, netmask);
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	0011      	movs	r1, r2
 8005044:	0018      	movs	r0, r3
 8005046:	f000 f877 	bl	8005138 <netif_set_netmask>
  netif_set_gw(netif, gw);
 800504a:	683a      	ldr	r2, [r7, #0]
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	0011      	movs	r1, r2
 8005050:	0018      	movs	r0, r3
 8005052:	f000 f85f 	bl	8005114 <netif_set_gw>
}
 8005056:	46c0      	nop			; (mov r8, r8)
 8005058:	46bd      	mov	sp, r7
 800505a:	b004      	add	sp, #16
 800505c:	bd80      	pop	{r7, pc}
	...

08005060 <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, ip_addr_t *ipaddr)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b086      	sub	sp, #24
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct tcp_pcb *pcb;
  struct tcp_pcb_listen *lpcb;

  /* address is actually being changed? */
  if (ipaddr && (ip_addr_cmp(ipaddr, &(netif->ip_addr))) == 0) {
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d03f      	beq.n	80050f0 <netif_set_ipaddr+0x90>
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	429a      	cmp	r2, r3
 800507a:	d039      	beq.n	80050f0 <netif_set_ipaddr+0x90>
    /* extern struct tcp_pcb *tcp_active_pcbs; defined by tcp.h */
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    pcb = tcp_active_pcbs;
 800507c:	4b23      	ldr	r3, [pc, #140]	; (800510c <netif_set_ipaddr+0xac>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	617b      	str	r3, [r7, #20]
    while (pcb != NULL) {
 8005082:	e012      	b.n	80050aa <netif_set_ipaddr+0x4a>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&(pcb->local_ip), &(netif->ip_addr))
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	429a      	cmp	r2, r3
 800508e:	d109      	bne.n	80050a4 <netif_set_ipaddr+0x44>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && !ip_addr_islinklocal(&(pcb->local_ip))
#endif /* LWIP_AUTOIP */
        ) {
        /* this connection must be aborted */
        struct tcp_pcb *next = pcb->next;
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	68db      	ldr	r3, [r3, #12]
 8005094:	60fb      	str	r3, [r7, #12]
        LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
        tcp_abort(pcb);
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	0018      	movs	r0, r3
 800509a:	f000 ff6f 	bl	8005f7c <tcp_abort>
        pcb = next;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	617b      	str	r3, [r7, #20]
 80050a2:	e002      	b.n	80050aa <netif_set_ipaddr+0x4a>
      } else {
        pcb = pcb->next;
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	68db      	ldr	r3, [r3, #12]
 80050a8:	617b      	str	r3, [r7, #20]
    while (pcb != NULL) {
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d1e9      	bne.n	8005084 <netif_set_ipaddr+0x24>
      }
    }
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80050b0:	4b17      	ldr	r3, [pc, #92]	; (8005110 <netif_set_ipaddr+0xb0>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	613b      	str	r3, [r7, #16]
 80050b6:	e018      	b.n	80050ea <netif_set_ipaddr+0x8a>
      /* PCB bound to current local interface address? */
      if ((!(ip_addr_isany(&(lpcb->local_ip)))) &&
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d012      	beq.n	80050e4 <netif_set_ipaddr+0x84>
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d00e      	beq.n	80050e4 <netif_set_ipaddr+0x84>
          (ip_addr_cmp(&(lpcb->local_ip), &(netif->ip_addr)))) {
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	685b      	ldr	r3, [r3, #4]
      if ((!(ip_addr_isany(&(lpcb->local_ip)))) &&
 80050ce:	429a      	cmp	r2, r3
 80050d0:	d108      	bne.n	80050e4 <netif_set_ipaddr+0x84>
        /* The PCB is listening to the old ipaddr and
         * is set to listen to the new one instead */
        ip_addr_set(&(lpcb->local_ip), ipaddr);
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d002      	beq.n	80050de <netif_set_ipaddr+0x7e>
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	e000      	b.n	80050e0 <netif_set_ipaddr+0x80>
 80050de:	2200      	movs	r2, #0
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	601a      	str	r2, [r3, #0]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	68db      	ldr	r3, [r3, #12]
 80050e8:	613b      	str	r3, [r7, #16]
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d1e3      	bne.n	80050b8 <netif_set_ipaddr+0x58>
  }
#endif
  snmp_delete_ipaddridx_tree(netif);
  snmp_delete_iprteidx_tree(0,netif);
  /* set new IP address to netif */
  ip_addr_set(&(netif->ip_addr), ipaddr);
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d002      	beq.n	80050fc <netif_set_ipaddr+0x9c>
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	e000      	b.n	80050fe <netif_set_ipaddr+0x9e>
 80050fc:	2200      	movs	r2, #0
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	605a      	str	r2, [r3, #4]
    netif->name[0], netif->name[1],
    ip4_addr1_16(&netif->ip_addr),
    ip4_addr2_16(&netif->ip_addr),
    ip4_addr3_16(&netif->ip_addr),
    ip4_addr4_16(&netif->ip_addr)));
}
 8005102:	46c0      	nop			; (mov r8, r8)
 8005104:	46bd      	mov	sp, r7
 8005106:	b006      	add	sp, #24
 8005108:	bd80      	pop	{r7, pc}
 800510a:	46c0      	nop			; (mov r8, r8)
 800510c:	20003274 	.word	0x20003274
 8005110:	2000327c 	.word	0x2000327c

08005114 <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, ip_addr_t *gw)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b082      	sub	sp, #8
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	6039      	str	r1, [r7, #0]
  ip_addr_set(&(netif->gw), gw);
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d002      	beq.n	800512a <netif_set_gw+0x16>
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	e000      	b.n	800512c <netif_set_gw+0x18>
 800512a:	2200      	movs	r2, #0
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	60da      	str	r2, [r3, #12]
    netif->name[0], netif->name[1],
    ip4_addr1_16(&netif->gw),
    ip4_addr2_16(&netif->gw),
    ip4_addr3_16(&netif->gw),
    ip4_addr4_16(&netif->gw)));
}
 8005130:	46c0      	nop			; (mov r8, r8)
 8005132:	46bd      	mov	sp, r7
 8005134:	b002      	add	sp, #8
 8005136:	bd80      	pop	{r7, pc}

08005138 <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, ip_addr_t *netmask)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b082      	sub	sp, #8
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
 8005140:	6039      	str	r1, [r7, #0]
  snmp_delete_iprteidx_tree(0, netif);
  /* set new netmask to netif */
  ip_addr_set(&(netif->netmask), netmask);
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d002      	beq.n	800514e <netif_set_netmask+0x16>
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	681a      	ldr	r2, [r3, #0]
 800514c:	e000      	b.n	8005150 <netif_set_netmask+0x18>
 800514e:	2200      	movs	r2, #0
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	609a      	str	r2, [r3, #8]
    netif->name[0], netif->name[1],
    ip4_addr1_16(&netif->netmask),
    ip4_addr2_16(&netif->netmask),
    ip4_addr3_16(&netif->netmask),
    ip4_addr4_16(&netif->netmask)));
}
 8005154:	46c0      	nop			; (mov r8, r8)
 8005156:	46bd      	mov	sp, r7
 8005158:	b002      	add	sp, #8
 800515a:	bd80      	pop	{r7, pc}

0800515c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b082      	sub	sp, #8
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
    snmp_delete_iprteidx_tree(1, netif);
  } else {
    /* install default route */
    snmp_insert_iprteidx_tree(1, netif);
  }
  netif_default = netif;
 8005164:	4b03      	ldr	r3, [pc, #12]	; (8005174 <netif_set_default+0x18>)
 8005166:	687a      	ldr	r2, [r7, #4]
 8005168:	601a      	str	r2, [r3, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800516a:	46c0      	nop			; (mov r8, r8)
 800516c:	46bd      	mov	sp, r7
 800516e:	b002      	add	sp, #8
 8005170:	bd80      	pop	{r7, pc}
 8005172:	46c0      	nop			; (mov r8, r8)
 8005174:	20003150 	.word	0x20003150

08005178 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
  pbuf_free_ooseq_pending = 1;
 800517c:	4b02      	ldr	r3, [pc, #8]	; (8005188 <pbuf_pool_is_empty+0x10>)
 800517e:	2201      	movs	r2, #1
 8005180:	701a      	strb	r2, [r3, #0]
  if(!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8005182:	46c0      	nop			; (mov r8, r8)
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}
 8005188:	20003154 	.word	0x20003154

0800518c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800518c:	b590      	push	{r4, r7, lr}
 800518e:	b089      	sub	sp, #36	; 0x24
 8005190:	af00      	add	r7, sp, #0
 8005192:	0004      	movs	r4, r0
 8005194:	0008      	movs	r0, r1
 8005196:	0011      	movs	r1, r2
 8005198:	1dfb      	adds	r3, r7, #7
 800519a:	1c22      	adds	r2, r4, #0
 800519c:	701a      	strb	r2, [r3, #0]
 800519e:	1d3b      	adds	r3, r7, #4
 80051a0:	1c02      	adds	r2, r0, #0
 80051a2:	801a      	strh	r2, [r3, #0]
 80051a4:	1dbb      	adds	r3, r7, #6
 80051a6:	1c0a      	adds	r2, r1, #0
 80051a8:	701a      	strb	r2, [r3, #0]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 80051aa:	1dfb      	adds	r3, r7, #7
 80051ac:	781b      	ldrb	r3, [r3, #0]
 80051ae:	2b01      	cmp	r3, #1
 80051b0:	d00d      	beq.n	80051ce <pbuf_alloc+0x42>
 80051b2:	dc02      	bgt.n	80051ba <pbuf_alloc+0x2e>
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d005      	beq.n	80051c4 <pbuf_alloc+0x38>
 80051b8:	e018      	b.n	80051ec <pbuf_alloc+0x60>
 80051ba:	2b02      	cmp	r3, #2
 80051bc:	d00c      	beq.n	80051d8 <pbuf_alloc+0x4c>
 80051be:	2b03      	cmp	r3, #3
 80051c0:	d00f      	beq.n	80051e2 <pbuf_alloc+0x56>
 80051c2:	e013      	b.n	80051ec <pbuf_alloc+0x60>
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 80051c4:	2316      	movs	r3, #22
 80051c6:	18fb      	adds	r3, r7, r3
 80051c8:	2236      	movs	r2, #54	; 0x36
 80051ca:	801a      	strh	r2, [r3, #0]
    break;
 80051cc:	e010      	b.n	80051f0 <pbuf_alloc+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_HLEN + PBUF_IP_HLEN;
 80051ce:	2316      	movs	r3, #22
 80051d0:	18fb      	adds	r3, r7, r3
 80051d2:	2222      	movs	r2, #34	; 0x22
 80051d4:	801a      	strh	r2, [r3, #0]
    break;
 80051d6:	e00b      	b.n	80051f0 <pbuf_alloc+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_HLEN;
 80051d8:	2316      	movs	r3, #22
 80051da:	18fb      	adds	r3, r7, r3
 80051dc:	220e      	movs	r2, #14
 80051de:	801a      	strh	r2, [r3, #0]
    break;
 80051e0:	e006      	b.n	80051f0 <pbuf_alloc+0x64>
  case PBUF_RAW:
    offset = 0;
 80051e2:	2316      	movs	r3, #22
 80051e4:	18fb      	adds	r3, r7, r3
 80051e6:	2200      	movs	r2, #0
 80051e8:	801a      	strh	r2, [r3, #0]
    break;
 80051ea:	e001      	b.n	80051f0 <pbuf_alloc+0x64>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
    return NULL;
 80051ec:	2300      	movs	r3, #0
 80051ee:	e0e9      	b.n	80053c4 <pbuf_alloc+0x238>
  }

  switch (type) {
 80051f0:	1dbb      	adds	r3, r7, #6
 80051f2:	781b      	ldrb	r3, [r3, #0]
 80051f4:	2b02      	cmp	r3, #2
 80051f6:	dc06      	bgt.n	8005206 <pbuf_alloc+0x7a>
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	db00      	blt.n	80051fe <pbuf_alloc+0x72>
 80051fc:	e0bc      	b.n	8005378 <pbuf_alloc+0x1ec>
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d100      	bne.n	8005204 <pbuf_alloc+0x78>
 8005202:	e082      	b.n	800530a <pbuf_alloc+0x17e>
 8005204:	e0d5      	b.n	80053b2 <pbuf_alloc+0x226>
 8005206:	2b03      	cmp	r3, #3
 8005208:	d000      	beq.n	800520c <pbuf_alloc+0x80>
 800520a:	e0d2      	b.n	80053b2 <pbuf_alloc+0x226>
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800520c:	2009      	movs	r0, #9
 800520e:	f7ff fe01 	bl	8004e14 <memp_malloc>
 8005212:	0003      	movs	r3, r0
 8005214:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 8005216:	69fb      	ldr	r3, [r7, #28]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d103      	bne.n	8005224 <pbuf_alloc+0x98>
      PBUF_POOL_IS_EMPTY();
 800521c:	f7ff ffac 	bl	8005178 <pbuf_pool_is_empty>
      return NULL;
 8005220:	2300      	movs	r3, #0
 8005222:	e0cf      	b.n	80053c4 <pbuf_alloc+0x238>
    }
    p->type = type;
 8005224:	69fb      	ldr	r3, [r7, #28]
 8005226:	1dba      	adds	r2, r7, #6
 8005228:	7812      	ldrb	r2, [r2, #0]
 800522a:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
 800522c:	69fb      	ldr	r3, [r7, #28]
 800522e:	2200      	movs	r2, #0
 8005230:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 8005232:	2116      	movs	r1, #22
 8005234:	187b      	adds	r3, r7, r1
 8005236:	881b      	ldrh	r3, [r3, #0]
 8005238:	3310      	adds	r3, #16
 800523a:	69fa      	ldr	r2, [r7, #28]
 800523c:	18d3      	adds	r3, r2, r3
 800523e:	3303      	adds	r3, #3
 8005240:	2203      	movs	r2, #3
 8005242:	4393      	bics	r3, r2
 8005244:	001a      	movs	r2, r3
 8005246:	69fb      	ldr	r3, [r7, #28]
 8005248:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 800524a:	69fb      	ldr	r3, [r7, #28]
 800524c:	1d3a      	adds	r2, r7, #4
 800524e:	8812      	ldrh	r2, [r2, #0]
 8005250:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8005252:	187b      	adds	r3, r7, r1
 8005254:	881b      	ldrh	r3, [r3, #0]
 8005256:	3303      	adds	r3, #3
 8005258:	2203      	movs	r2, #3
 800525a:	4393      	bics	r3, r2
 800525c:	4a5b      	ldr	r2, [pc, #364]	; (80053cc <pbuf_alloc+0x240>)
 800525e:	1ad2      	subs	r2, r2, r3
 8005260:	1d3b      	adds	r3, r7, #4
 8005262:	881b      	ldrh	r3, [r3, #0]
 8005264:	429a      	cmp	r2, r3
 8005266:	dd00      	ble.n	800526a <pbuf_alloc+0xde>
 8005268:	001a      	movs	r2, r3
 800526a:	b292      	uxth	r2, r2
 800526c:	69fb      	ldr	r3, [r7, #28]
 800526e:	815a      	strh	r2, [r3, #10]
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 8005270:	69fb      	ldr	r3, [r7, #28]
 8005272:	2201      	movs	r2, #1
 8005274:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
 8005276:	69fb      	ldr	r3, [r7, #28]
 8005278:	61bb      	str	r3, [r7, #24]
    /* remaining length to be allocated */
    rem_len = length - p->len;
 800527a:	1d3b      	adds	r3, r7, #4
 800527c:	881b      	ldrh	r3, [r3, #0]
 800527e:	69fa      	ldr	r2, [r7, #28]
 8005280:	8952      	ldrh	r2, [r2, #10]
 8005282:	1a9b      	subs	r3, r3, r2
 8005284:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 8005286:	e03c      	b.n	8005302 <pbuf_alloc+0x176>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8005288:	2009      	movs	r0, #9
 800528a:	f7ff fdc3 	bl	8004e14 <memp_malloc>
 800528e:	0003      	movs	r3, r0
 8005290:	60fb      	str	r3, [r7, #12]
      if (q == NULL) {
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d107      	bne.n	80052a8 <pbuf_alloc+0x11c>
        PBUF_POOL_IS_EMPTY();
 8005298:	f7ff ff6e 	bl	8005178 <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
 800529c:	69fb      	ldr	r3, [r7, #28]
 800529e:	0018      	movs	r0, r3
 80052a0:	f000 fa00 	bl	80056a4 <pbuf_free>
        /* bail out unsuccesfully */
        return NULL;
 80052a4:	2300      	movs	r3, #0
 80052a6:	e08d      	b.n	80053c4 <pbuf_alloc+0x238>
      }
      q->type = type;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	1dba      	adds	r2, r7, #6
 80052ac:	7812      	ldrb	r2, [r2, #0]
 80052ae:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2200      	movs	r2, #0
 80052b4:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2200      	movs	r2, #0
 80052ba:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
 80052bc:	69bb      	ldr	r3, [r7, #24]
 80052be:	68fa      	ldr	r2, [r7, #12]
 80052c0:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
      q->tot_len = (u16_t)rem_len;
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	b29a      	uxth	r2, r3
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	b29b      	uxth	r3, r3
 80052ce:	1c19      	adds	r1, r3, #0
 80052d0:	b28b      	uxth	r3, r1
 80052d2:	4a3e      	ldr	r2, [pc, #248]	; (80053cc <pbuf_alloc+0x240>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d901      	bls.n	80052dc <pbuf_alloc+0x150>
 80052d8:	4b3c      	ldr	r3, [pc, #240]	; (80053cc <pbuf_alloc+0x240>)
 80052da:	1c19      	adds	r1, r3, #0
 80052dc:	b28a      	uxth	r2, r1
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	3310      	adds	r3, #16
 80052e6:	001a      	movs	r2, r3
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2201      	movs	r2, #1
 80052f0:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	895b      	ldrh	r3, [r3, #10]
 80052f6:	001a      	movs	r2, r3
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	1a9b      	subs	r3, r3, r2
 80052fc:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	61bb      	str	r3, [r7, #24]
    while (rem_len > 0) {
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	2b00      	cmp	r3, #0
 8005306:	dcbf      	bgt.n	8005288 <pbuf_alloc+0xfc>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
 8005308:	e055      	b.n	80053b6 <pbuf_alloc+0x22a>
  case PBUF_RAM:
    /* If pbuf is to be allocated in RAM, allocate memory for it. */
    p = (struct pbuf*)mem_malloc(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length));
 800530a:	2316      	movs	r3, #22
 800530c:	18fb      	adds	r3, r7, r3
 800530e:	881b      	ldrh	r3, [r3, #0]
 8005310:	3313      	adds	r3, #19
 8005312:	b29b      	uxth	r3, r3
 8005314:	2203      	movs	r2, #3
 8005316:	4393      	bics	r3, r2
 8005318:	b29a      	uxth	r2, r3
 800531a:	1d3b      	adds	r3, r7, #4
 800531c:	881b      	ldrh	r3, [r3, #0]
 800531e:	3303      	adds	r3, #3
 8005320:	b29b      	uxth	r3, r3
 8005322:	2103      	movs	r1, #3
 8005324:	438b      	bics	r3, r1
 8005326:	b29b      	uxth	r3, r3
 8005328:	18d3      	adds	r3, r2, r3
 800532a:	b29b      	uxth	r3, r3
 800532c:	0018      	movs	r0, r3
 800532e:	f7ff fbd1 	bl	8004ad4 <mem_malloc>
 8005332:	0003      	movs	r3, r0
 8005334:	61fb      	str	r3, [r7, #28]
    if (p == NULL) {
 8005336:	69fb      	ldr	r3, [r7, #28]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d101      	bne.n	8005340 <pbuf_alloc+0x1b4>
      return NULL;
 800533c:	2300      	movs	r3, #0
 800533e:	e041      	b.n	80053c4 <pbuf_alloc+0x238>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 8005340:	2316      	movs	r3, #22
 8005342:	18fb      	adds	r3, r7, r3
 8005344:	881b      	ldrh	r3, [r3, #0]
 8005346:	3310      	adds	r3, #16
 8005348:	69fa      	ldr	r2, [r7, #28]
 800534a:	18d3      	adds	r3, r2, r3
 800534c:	3303      	adds	r3, #3
 800534e:	2203      	movs	r2, #3
 8005350:	4393      	bics	r3, r2
 8005352:	001a      	movs	r2, r3
 8005354:	69fb      	ldr	r3, [r7, #28]
 8005356:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 8005358:	69fb      	ldr	r3, [r7, #28]
 800535a:	1d3a      	adds	r2, r7, #4
 800535c:	8812      	ldrh	r2, [r2, #0]
 800535e:	811a      	strh	r2, [r3, #8]
 8005360:	69fb      	ldr	r3, [r7, #28]
 8005362:	891a      	ldrh	r2, [r3, #8]
 8005364:	69fb      	ldr	r3, [r7, #28]
 8005366:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 8005368:	69fb      	ldr	r3, [r7, #28]
 800536a:	2200      	movs	r2, #0
 800536c:	601a      	str	r2, [r3, #0]
    p->type = type;
 800536e:	69fb      	ldr	r3, [r7, #28]
 8005370:	1dba      	adds	r2, r7, #6
 8005372:	7812      	ldrb	r2, [r2, #0]
 8005374:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 8005376:	e01e      	b.n	80053b6 <pbuf_alloc+0x22a>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8005378:	2008      	movs	r0, #8
 800537a:	f7ff fd4b 	bl	8004e14 <memp_malloc>
 800537e:	0003      	movs	r3, r0
 8005380:	61fb      	str	r3, [r7, #28]
    if (p == NULL) {
 8005382:	69fb      	ldr	r3, [r7, #28]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d101      	bne.n	800538c <pbuf_alloc+0x200>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
 8005388:	2300      	movs	r3, #0
 800538a:	e01b      	b.n	80053c4 <pbuf_alloc+0x238>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 800538c:	69fb      	ldr	r3, [r7, #28]
 800538e:	2200      	movs	r2, #0
 8005390:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 8005392:	69fb      	ldr	r3, [r7, #28]
 8005394:	1d3a      	adds	r2, r7, #4
 8005396:	8812      	ldrh	r2, [r2, #0]
 8005398:	811a      	strh	r2, [r3, #8]
 800539a:	69fb      	ldr	r3, [r7, #28]
 800539c:	891a      	ldrh	r2, [r3, #8]
 800539e:	69fb      	ldr	r3, [r7, #28]
 80053a0:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 80053a2:	69fb      	ldr	r3, [r7, #28]
 80053a4:	2200      	movs	r2, #0
 80053a6:	601a      	str	r2, [r3, #0]
    p->type = type;
 80053a8:	69fb      	ldr	r3, [r7, #28]
 80053aa:	1dba      	adds	r2, r7, #6
 80053ac:	7812      	ldrb	r2, [r2, #0]
 80053ae:	731a      	strb	r2, [r3, #12]
    break;
 80053b0:	e001      	b.n	80053b6 <pbuf_alloc+0x22a>
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
    return NULL;
 80053b2:	2300      	movs	r3, #0
 80053b4:	e006      	b.n	80053c4 <pbuf_alloc+0x238>
  }
  /* set reference count */
  p->ref = 1;
 80053b6:	69fb      	ldr	r3, [r7, #28]
 80053b8:	2201      	movs	r2, #1
 80053ba:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
 80053bc:	69fb      	ldr	r3, [r7, #28]
 80053be:	2200      	movs	r2, #0
 80053c0:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80053c2:	69fb      	ldr	r3, [r7, #28]
}
 80053c4:	0018      	movs	r0, r3
 80053c6:	46bd      	mov	sp, r7
 80053c8:	b009      	add	sp, #36	; 0x24
 80053ca:	bd90      	pop	{r4, r7, pc}
 80053cc:	000005ec 	.word	0x000005ec

080053d0 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80053d0:	b590      	push	{r4, r7, lr}
 80053d2:	b085      	sub	sp, #20
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	0004      	movs	r4, r0
 80053d8:	0008      	movs	r0, r1
 80053da:	0011      	movs	r1, r2
 80053dc:	603b      	str	r3, [r7, #0]
 80053de:	1dfb      	adds	r3, r7, #7
 80053e0:	1c22      	adds	r2, r4, #0
 80053e2:	701a      	strb	r2, [r3, #0]
 80053e4:	1d3b      	adds	r3, r7, #4
 80053e6:	1c02      	adds	r2, r0, #0
 80053e8:	801a      	strh	r2, [r3, #0]
 80053ea:	1dbb      	adds	r3, r7, #6
 80053ec:	1c0a      	adds	r2, r1, #0
 80053ee:	701a      	strb	r2, [r3, #0]
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
 80053f0:	1dfb      	adds	r3, r7, #7
 80053f2:	781b      	ldrb	r3, [r3, #0]
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	d00d      	beq.n	8005414 <pbuf_alloced_custom+0x44>
 80053f8:	dc02      	bgt.n	8005400 <pbuf_alloced_custom+0x30>
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d005      	beq.n	800540a <pbuf_alloced_custom+0x3a>
 80053fe:	e018      	b.n	8005432 <pbuf_alloced_custom+0x62>
 8005400:	2b02      	cmp	r3, #2
 8005402:	d00c      	beq.n	800541e <pbuf_alloced_custom+0x4e>
 8005404:	2b03      	cmp	r3, #3
 8005406:	d00f      	beq.n	8005428 <pbuf_alloced_custom+0x58>
 8005408:	e013      	b.n	8005432 <pbuf_alloced_custom+0x62>
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 800540a:	230e      	movs	r3, #14
 800540c:	18fb      	adds	r3, r7, r3
 800540e:	2236      	movs	r2, #54	; 0x36
 8005410:	801a      	strh	r2, [r3, #0]
    break;
 8005412:	e010      	b.n	8005436 <pbuf_alloced_custom+0x66>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8005414:	230e      	movs	r3, #14
 8005416:	18fb      	adds	r3, r7, r3
 8005418:	2222      	movs	r2, #34	; 0x22
 800541a:	801a      	strh	r2, [r3, #0]
    break;
 800541c:	e00b      	b.n	8005436 <pbuf_alloced_custom+0x66>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_HLEN;
 800541e:	230e      	movs	r3, #14
 8005420:	18fb      	adds	r3, r7, r3
 8005422:	220e      	movs	r2, #14
 8005424:	801a      	strh	r2, [r3, #0]
    break;
 8005426:	e006      	b.n	8005436 <pbuf_alloced_custom+0x66>
  case PBUF_RAW:
    offset = 0;
 8005428:	230e      	movs	r3, #14
 800542a:	18fb      	adds	r3, r7, r3
 800542c:	2200      	movs	r2, #0
 800542e:	801a      	strh	r2, [r3, #0]
    break;
 8005430:	e001      	b.n	8005436 <pbuf_alloced_custom+0x66>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
    return NULL;
 8005432:	2300      	movs	r3, #0
 8005434:	e039      	b.n	80054aa <pbuf_alloced_custom+0xda>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8005436:	230e      	movs	r3, #14
 8005438:	18fb      	adds	r3, r7, r3
 800543a:	881b      	ldrh	r3, [r3, #0]
 800543c:	3303      	adds	r3, #3
 800543e:	2203      	movs	r2, #3
 8005440:	4393      	bics	r3, r2
 8005442:	001a      	movs	r2, r3
 8005444:	1d3b      	adds	r3, r7, #4
 8005446:	881b      	ldrh	r3, [r3, #0]
 8005448:	18d2      	adds	r2, r2, r3
 800544a:	2324      	movs	r3, #36	; 0x24
 800544c:	18fb      	adds	r3, r7, r3
 800544e:	881b      	ldrh	r3, [r3, #0]
 8005450:	429a      	cmp	r2, r3
 8005452:	dd01      	ble.n	8005458 <pbuf_alloced_custom+0x88>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8005454:	2300      	movs	r3, #0
 8005456:	e028      	b.n	80054aa <pbuf_alloced_custom+0xda>
  }

  p->pbuf.next = NULL;
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	2200      	movs	r2, #0
 800545c:	601a      	str	r2, [r3, #0]
  if (payload_mem != NULL) {
 800545e:	6a3b      	ldr	r3, [r7, #32]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d00c      	beq.n	800547e <pbuf_alloced_custom+0xae>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8005464:	230e      	movs	r3, #14
 8005466:	18fb      	adds	r3, r7, r3
 8005468:	881b      	ldrh	r3, [r3, #0]
 800546a:	3303      	adds	r3, #3
 800546c:	001a      	movs	r2, r3
 800546e:	2303      	movs	r3, #3
 8005470:	439a      	bics	r2, r3
 8005472:	0013      	movs	r3, r2
 8005474:	6a3a      	ldr	r2, [r7, #32]
 8005476:	18d2      	adds	r2, r2, r3
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	605a      	str	r2, [r3, #4]
 800547c:	e002      	b.n	8005484 <pbuf_alloced_custom+0xb4>
  } else {
    p->pbuf.payload = NULL;
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	2200      	movs	r2, #0
 8005482:	605a      	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	2202      	movs	r2, #2
 8005488:	735a      	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	1d3a      	adds	r2, r7, #4
 800548e:	8812      	ldrh	r2, [r2, #0]
 8005490:	811a      	strh	r2, [r3, #8]
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	891a      	ldrh	r2, [r3, #8]
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	815a      	strh	r2, [r3, #10]
  p->pbuf.type = type;
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	1dba      	adds	r2, r7, #6
 800549e:	7812      	ldrb	r2, [r2, #0]
 80054a0:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	2201      	movs	r2, #1
 80054a6:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 80054a8:	683b      	ldr	r3, [r7, #0]
}
 80054aa:	0018      	movs	r0, r3
 80054ac:	46bd      	mov	sp, r7
 80054ae:	b005      	add	sp, #20
 80054b0:	bd90      	pop	{r4, r7, pc}

080054b2 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80054b2:	b580      	push	{r7, lr}
 80054b4:	b086      	sub	sp, #24
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	6078      	str	r0, [r7, #4]
 80054ba:	000a      	movs	r2, r1
 80054bc:	1cbb      	adds	r3, r7, #2
 80054be:	801a      	strh	r2, [r3, #0]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	7b1b      	ldrb	r3, [r3, #12]
 80054c4:	2b03      	cmp	r3, #3
 80054c6:	d001      	beq.n	80054cc <pbuf_realloc+0x1a>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	7b1b      	ldrb	r3, [r3, #12]
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	891b      	ldrh	r3, [r3, #8]
 80054d0:	1cba      	adds	r2, r7, #2
 80054d2:	8812      	ldrh	r2, [r2, #0]
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d25a      	bcs.n	800558e <pbuf_realloc+0xdc>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
 80054d8:	1cbb      	adds	r3, r7, #2
 80054da:	881b      	ldrh	r3, [r3, #0]
 80054dc:	687a      	ldr	r2, [r7, #4]
 80054de:	8912      	ldrh	r2, [r2, #8]
 80054e0:	1a9b      	subs	r3, r3, r2
 80054e2:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80054e4:	2312      	movs	r3, #18
 80054e6:	18fb      	adds	r3, r7, r3
 80054e8:	1cba      	adds	r2, r7, #2
 80054ea:	8812      	ldrh	r2, [r2, #0]
 80054ec:	801a      	strh	r2, [r3, #0]
  q = p;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80054f2:	e012      	b.n	800551a <pbuf_realloc+0x68>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	895a      	ldrh	r2, [r3, #10]
 80054f8:	2112      	movs	r1, #18
 80054fa:	187b      	adds	r3, r7, r1
 80054fc:	1879      	adds	r1, r7, r1
 80054fe:	8809      	ldrh	r1, [r1, #0]
 8005500:	1a8a      	subs	r2, r1, r2
 8005502:	801a      	strh	r2, [r3, #0]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
    q->tot_len += (u16_t)grow;
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	891a      	ldrh	r2, [r3, #8]
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	b29b      	uxth	r3, r3
 800550c:	18d3      	adds	r3, r2, r3
 800550e:	b29a      	uxth	r2, r3
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	617b      	str	r3, [r7, #20]
  while (rem_len > q->len) {
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	895b      	ldrh	r3, [r3, #10]
 800551e:	2212      	movs	r2, #18
 8005520:	18ba      	adds	r2, r7, r2
 8005522:	8812      	ldrh	r2, [r2, #0]
 8005524:	429a      	cmp	r2, r3
 8005526:	d8e5      	bhi.n	80054f4 <pbuf_realloc+0x42>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)) {
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	7b1b      	ldrb	r3, [r3, #12]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d118      	bne.n	8005562 <pbuf_realloc+0xb0>
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	895b      	ldrh	r3, [r3, #10]
 8005534:	2212      	movs	r2, #18
 8005536:	18ba      	adds	r2, r7, r2
 8005538:	8812      	ldrh	r2, [r2, #0]
 800553a:	429a      	cmp	r2, r3
 800553c:	d011      	beq.n	8005562 <pbuf_realloc+0xb0>
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	001a      	movs	r2, r3
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	1ad3      	subs	r3, r2, r3
 8005548:	b29a      	uxth	r2, r3
 800554a:	2312      	movs	r3, #18
 800554c:	18fb      	adds	r3, r7, r3
 800554e:	881b      	ldrh	r3, [r3, #0]
 8005550:	18d3      	adds	r3, r2, r3
 8005552:	b29a      	uxth	r2, r3
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	0011      	movs	r1, r2
 8005558:	0018      	movs	r0, r3
 800555a:	f7ff f9a7 	bl	80048ac <mem_trim>
 800555e:	0003      	movs	r3, r0
 8005560:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	2212      	movs	r2, #18
 8005566:	18ba      	adds	r2, r7, r2
 8005568:	8812      	ldrh	r2, [r2, #0]
 800556a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	895a      	ldrh	r2, [r3, #10]
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d004      	beq.n	8005586 <pbuf_realloc+0xd4>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	0018      	movs	r0, r3
 8005582:	f000 f88f 	bl	80056a4 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	2200      	movs	r2, #0
 800558a:	601a      	str	r2, [r3, #0]
 800558c:	e000      	b.n	8005590 <pbuf_realloc+0xde>
    return;
 800558e:	46c0      	nop			; (mov r8, r8)

}
 8005590:	46bd      	mov	sp, r7
 8005592:	b006      	add	sp, #24
 8005594:	bd80      	pop	{r7, pc}

08005596 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 8005596:	b580      	push	{r7, lr}
 8005598:	b084      	sub	sp, #16
 800559a:	af00      	add	r7, sp, #0
 800559c:	6078      	str	r0, [r7, #4]
 800559e:	000a      	movs	r2, r1
 80055a0:	1cbb      	adds	r3, r7, #2
 80055a2:	801a      	strh	r2, [r3, #0]
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
  if ((header_size_increment == 0) || (p == NULL)) {
 80055a4:	1cbb      	adds	r3, r7, #2
 80055a6:	2200      	movs	r2, #0
 80055a8:	5e9b      	ldrsh	r3, [r3, r2]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d002      	beq.n	80055b4 <pbuf_header+0x1e>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d101      	bne.n	80055b8 <pbuf_header+0x22>
    return 0;
 80055b4:	2300      	movs	r3, #0
 80055b6:	e071      	b.n	800569c <pbuf_header+0x106>
  }
 
  if (header_size_increment < 0){
 80055b8:	1cbb      	adds	r3, r7, #2
 80055ba:	2200      	movs	r2, #0
 80055bc:	5e9b      	ldrsh	r3, [r3, r2]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	da0d      	bge.n	80055de <pbuf_header+0x48>
    increment_magnitude = -header_size_increment;
 80055c2:	1cbb      	adds	r3, r7, #2
 80055c4:	881a      	ldrh	r2, [r3, #0]
 80055c6:	210e      	movs	r1, #14
 80055c8:	187b      	adds	r3, r7, r1
 80055ca:	4252      	negs	r2, r2
 80055cc:	801a      	strh	r2, [r3, #0]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	895b      	ldrh	r3, [r3, #10]
 80055d2:	187a      	adds	r2, r7, r1
 80055d4:	8812      	ldrh	r2, [r2, #0]
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d906      	bls.n	80055e8 <pbuf_header+0x52>
 80055da:	2301      	movs	r3, #1
 80055dc:	e05e      	b.n	800569c <pbuf_header+0x106>
  } else {
    increment_magnitude = header_size_increment;
 80055de:	230e      	movs	r3, #14
 80055e0:	18fb      	adds	r3, r7, r3
 80055e2:	1cba      	adds	r2, r7, #2
 80055e4:	8812      	ldrh	r2, [r2, #0]
 80055e6:	801a      	strh	r2, [r3, #0]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	7b1a      	ldrb	r2, [r3, #12]
 80055ec:	210c      	movs	r1, #12
 80055ee:	187b      	adds	r3, r7, r1
 80055f0:	801a      	strh	r2, [r3, #0]
  /* remember current payload pointer */
  payload = p->payload;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	60bb      	str	r3, [r7, #8]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 80055f8:	187b      	adds	r3, r7, r1
 80055fa:	881b      	ldrh	r3, [r3, #0]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d004      	beq.n	800560a <pbuf_header+0x74>
 8005600:	230c      	movs	r3, #12
 8005602:	18fb      	adds	r3, r7, r3
 8005604:	881b      	ldrh	r3, [r3, #0]
 8005606:	2b03      	cmp	r3, #3
 8005608:	d113      	bne.n	8005632 <pbuf_header+0x9c>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	685a      	ldr	r2, [r3, #4]
 800560e:	1cbb      	adds	r3, r7, #2
 8005610:	2100      	movs	r1, #0
 8005612:	5e5b      	ldrsh	r3, [r3, r1]
 8005614:	425b      	negs	r3, r3
 8005616:	18d2      	adds	r2, r2, r3
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	605a      	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	685a      	ldr	r2, [r3, #4]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	3310      	adds	r3, #16
 8005624:	429a      	cmp	r2, r3
 8005626:	d228      	bcs.n	800567a <pbuf_header+0xe4>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)(p + 1)));
      /* restore old payload pointer */
      p->payload = payload;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	68ba      	ldr	r2, [r7, #8]
 800562c:	605a      	str	r2, [r3, #4]
      /* bail out unsuccesfully */
      return 1;
 800562e:	2301      	movs	r3, #1
 8005630:	e034      	b.n	800569c <pbuf_header+0x106>
    }
  /* pbuf types refering to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 8005632:	230c      	movs	r3, #12
 8005634:	18fb      	adds	r3, r7, r3
 8005636:	881b      	ldrh	r3, [r3, #0]
 8005638:	2b02      	cmp	r3, #2
 800563a:	d004      	beq.n	8005646 <pbuf_header+0xb0>
 800563c:	230c      	movs	r3, #12
 800563e:	18fb      	adds	r3, r7, r3
 8005640:	881b      	ldrh	r3, [r3, #0]
 8005642:	2b01      	cmp	r3, #1
 8005644:	d117      	bne.n	8005676 <pbuf_header+0xe0>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8005646:	1cbb      	adds	r3, r7, #2
 8005648:	2200      	movs	r2, #0
 800564a:	5e9b      	ldrsh	r3, [r3, r2]
 800564c:	2b00      	cmp	r3, #0
 800564e:	da10      	bge.n	8005672 <pbuf_header+0xdc>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	895b      	ldrh	r3, [r3, #10]
 8005654:	220e      	movs	r2, #14
 8005656:	18ba      	adds	r2, r7, r2
 8005658:	8812      	ldrh	r2, [r2, #0]
 800565a:	429a      	cmp	r2, r3
 800565c:	d809      	bhi.n	8005672 <pbuf_header+0xdc>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	685a      	ldr	r2, [r3, #4]
 8005662:	1cbb      	adds	r3, r7, #2
 8005664:	2100      	movs	r1, #0
 8005666:	5e5b      	ldrsh	r3, [r3, r1]
 8005668:	425b      	negs	r3, r3
 800566a:	18d2      	adds	r2, r2, r3
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	605a      	str	r2, [r3, #4]
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8005670:	e003      	b.n	800567a <pbuf_header+0xe4>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccesfully */
      return 1;
 8005672:	2301      	movs	r3, #1
 8005674:	e012      	b.n	800569c <pbuf_header+0x106>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
    return 1;
 8005676:	2301      	movs	r3, #1
 8005678:	e010      	b.n	800569c <pbuf_header+0x106>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	895a      	ldrh	r2, [r3, #10]
 800567e:	1cbb      	adds	r3, r7, #2
 8005680:	881b      	ldrh	r3, [r3, #0]
 8005682:	18d3      	adds	r3, r2, r3
 8005684:	b29a      	uxth	r2, r3
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	891a      	ldrh	r2, [r3, #8]
 800568e:	1cbb      	adds	r3, r7, #2
 8005690:	881b      	ldrh	r3, [r3, #0]
 8005692:	18d3      	adds	r3, r2, r3
 8005694:	b29a      	uxth	r2, r3
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 800569a:	2300      	movs	r3, #0
}
 800569c:	0018      	movs	r0, r3
 800569e:	46bd      	mov	sp, r7
 80056a0:	b004      	add	sp, #16
 80056a2:	bd80      	pop	{r7, pc}

080056a4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b086      	sub	sp, #24
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d101      	bne.n	80056b6 <pbuf_free+0x12>
    LWIP_ASSERT("p != NULL", p != NULL);
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80056b2:	2300      	movs	r3, #0
 80056b4:	e064      	b.n	8005780 <pbuf_free+0xdc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	7b1b      	ldrb	r3, [r3, #12]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d001      	beq.n	80056c2 <pbuf_free+0x1e>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	7b1b      	ldrb	r3, [r3, #12]
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
 80056c2:	2317      	movs	r3, #23
 80056c4:	18fb      	adds	r3, r7, r3
 80056c6:	2200      	movs	r2, #0
 80056c8:	701a      	strb	r2, [r3, #0]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80056ca:	e053      	b.n	8005774 <pbuf_free+0xd0>
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	89db      	ldrh	r3, [r3, #14]
 80056d0:	3b01      	subs	r3, #1
 80056d2:	b29a      	uxth	r2, r3
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	81da      	strh	r2, [r3, #14]
 80056d8:	2114      	movs	r1, #20
 80056da:	187b      	adds	r3, r7, r1
 80056dc:	687a      	ldr	r2, [r7, #4]
 80056de:	89d2      	ldrh	r2, [r2, #14]
 80056e0:	801a      	strh	r2, [r3, #0]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80056e2:	187b      	adds	r3, r7, r1
 80056e4:	881b      	ldrh	r3, [r3, #0]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d13d      	bne.n	8005766 <pbuf_free+0xc2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	7b1a      	ldrb	r2, [r3, #12]
 80056f4:	230e      	movs	r3, #14
 80056f6:	18fb      	adds	r3, r7, r3
 80056f8:	801a      	strh	r2, [r3, #0]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	7b5b      	ldrb	r3, [r3, #13]
 80056fe:	001a      	movs	r2, r3
 8005700:	2302      	movs	r3, #2
 8005702:	4013      	ands	r3, r2
 8005704:	d007      	beq.n	8005716 <pbuf_free+0x72>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
        pc->custom_free_function(p);
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	691b      	ldr	r3, [r3, #16]
 800570e:	687a      	ldr	r2, [r7, #4]
 8005710:	0010      	movs	r0, r2
 8005712:	4798      	blx	r3
 8005714:	e01e      	b.n	8005754 <pbuf_free+0xb0>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 8005716:	230e      	movs	r3, #14
 8005718:	18fb      	adds	r3, r7, r3
 800571a:	881b      	ldrh	r3, [r3, #0]
 800571c:	2b03      	cmp	r3, #3
 800571e:	d105      	bne.n	800572c <pbuf_free+0x88>
          memp_free(MEMP_PBUF_POOL, p);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	0019      	movs	r1, r3
 8005724:	2009      	movs	r0, #9
 8005726:	f7ff fbfb 	bl	8004f20 <memp_free>
 800572a:	e013      	b.n	8005754 <pbuf_free+0xb0>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 800572c:	230e      	movs	r3, #14
 800572e:	18fb      	adds	r3, r7, r3
 8005730:	881b      	ldrh	r3, [r3, #0]
 8005732:	2b01      	cmp	r3, #1
 8005734:	d004      	beq.n	8005740 <pbuf_free+0x9c>
 8005736:	230e      	movs	r3, #14
 8005738:	18fb      	adds	r3, r7, r3
 800573a:	881b      	ldrh	r3, [r3, #0]
 800573c:	2b02      	cmp	r3, #2
 800573e:	d105      	bne.n	800574c <pbuf_free+0xa8>
          memp_free(MEMP_PBUF, p);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	0019      	movs	r1, r3
 8005744:	2008      	movs	r0, #8
 8005746:	f7ff fbeb 	bl	8004f20 <memp_free>
 800574a:	e003      	b.n	8005754 <pbuf_free+0xb0>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	0018      	movs	r0, r3
 8005750:	f7ff f862 	bl	8004818 <mem_free>
        }
      }
      count++;
 8005754:	2117      	movs	r1, #23
 8005756:	187b      	adds	r3, r7, r1
 8005758:	781a      	ldrb	r2, [r3, #0]
 800575a:	187b      	adds	r3, r7, r1
 800575c:	3201      	adds	r2, #1
 800575e:	701a      	strb	r2, [r3, #0]
      /* proceed to next pbuf */
      p = q;
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	607b      	str	r3, [r7, #4]
 8005764:	e006      	b.n	8005774 <pbuf_free+0xd0>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 8005766:	2300      	movs	r3, #0
 8005768:	607b      	str	r3, [r7, #4]
 800576a:	2217      	movs	r2, #23
 800576c:	18bb      	adds	r3, r7, r2
 800576e:	18ba      	adds	r2, r7, r2
 8005770:	7812      	ldrb	r2, [r2, #0]
 8005772:	701a      	strb	r2, [r3, #0]
  while (p != NULL) {
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d1a8      	bne.n	80056cc <pbuf_free+0x28>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800577a:	2317      	movs	r3, #23
 800577c:	18fb      	adds	r3, r7, r3
 800577e:	781b      	ldrb	r3, [r3, #0]
}
 8005780:	0018      	movs	r0, r3
 8005782:	46bd      	mov	sp, r7
 8005784:	b006      	add	sp, #24
 8005786:	bd80      	pop	{r7, pc}

08005788 <pbuf_clen>:
 * @return the number of pbufs in a chain
 */

u8_t
pbuf_clen(struct pbuf *p)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b084      	sub	sp, #16
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  u8_t len;

  len = 0;
 8005790:	230f      	movs	r3, #15
 8005792:	18fb      	adds	r3, r7, r3
 8005794:	2200      	movs	r2, #0
 8005796:	701a      	strb	r2, [r3, #0]
  while (p != NULL) {
 8005798:	e008      	b.n	80057ac <pbuf_clen+0x24>
    ++len;
 800579a:	220f      	movs	r2, #15
 800579c:	18bb      	adds	r3, r7, r2
 800579e:	18ba      	adds	r2, r7, r2
 80057a0:	7812      	ldrb	r2, [r2, #0]
 80057a2:	3201      	adds	r2, #1
 80057a4:	701a      	strb	r2, [r3, #0]
    p = p->next;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d1f3      	bne.n	800579a <pbuf_clen+0x12>
  }
  return len;
 80057b2:	230f      	movs	r3, #15
 80057b4:	18fb      	adds	r3, r7, r3
 80057b6:	781b      	ldrb	r3, [r3, #0]
}
 80057b8:	0018      	movs	r0, r3
 80057ba:	46bd      	mov	sp, r7
 80057bc:	b004      	add	sp, #16
 80057be:	bd80      	pop	{r7, pc}

080057c0 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b082      	sub	sp, #8
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  SYS_ARCH_DECL_PROTECT(old_level);
  /* pbuf given? */
  if (p != NULL) {
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d005      	beq.n	80057da <pbuf_ref+0x1a>
    SYS_ARCH_PROTECT(old_level);
    ++(p->ref);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	89db      	ldrh	r3, [r3, #14]
 80057d2:	3301      	adds	r3, #1
 80057d4:	b29a      	uxth	r2, r3
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	81da      	strh	r2, [r3, #14]
    SYS_ARCH_UNPROTECT(old_level);
  }
}
 80057da:	46c0      	nop			; (mov r8, r8)
 80057dc:	46bd      	mov	sp, r7
 80057de:	b002      	add	sp, #8
 80057e0:	bd80      	pop	{r7, pc}

080057e2 <pbuf_cat>:
 * @see pbuf_chain()
 */

void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80057e2:	b580      	push	{r7, lr}
 80057e4:	b084      	sub	sp, #16
 80057e6:	af00      	add	r7, sp, #0
 80057e8:	6078      	str	r0, [r7, #4]
 80057ea:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d020      	beq.n	8005834 <pbuf_cat+0x52>
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d01d      	beq.n	8005834 <pbuf_cat+0x52>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	60fb      	str	r3, [r7, #12]
 80057fc:	e00a      	b.n	8005814 <pbuf_cat+0x32>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	891a      	ldrh	r2, [r3, #8]
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	891b      	ldrh	r3, [r3, #8]
 8005806:	18d3      	adds	r3, r2, r3
 8005808:	b29a      	uxth	r2, r3
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	60fb      	str	r3, [r7, #12]
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d1f0      	bne.n	80057fe <pbuf_cat+0x1c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	891a      	ldrh	r2, [r3, #8]
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	891b      	ldrh	r3, [r3, #8]
 8005824:	18d3      	adds	r3, r2, r3
 8005826:	b29a      	uxth	r2, r3
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	683a      	ldr	r2, [r7, #0]
 8005830:	601a      	str	r2, [r3, #0]
 8005832:	e000      	b.n	8005836 <pbuf_cat+0x54>
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8005834:	46c0      	nop			; (mov r8, r8)
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8005836:	46bd      	mov	sp, r7
 8005838:	b004      	add	sp, #16
 800583a:	bd80      	pop	{r7, pc}

0800583c <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b082      	sub	sp, #8
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
 8005844:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8005846:	683a      	ldr	r2, [r7, #0]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	0011      	movs	r1, r2
 800584c:	0018      	movs	r0, r3
 800584e:	f7ff ffc8 	bl	80057e2 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	0018      	movs	r0, r3
 8005856:	f7ff ffb3 	bl	80057c0 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800585a:	46c0      	nop			; (mov r8, r8)
 800585c:	46bd      	mov	sp, r7
 800585e:	b002      	add	sp, #8
 8005860:	bd80      	pop	{r7, pc}

08005862 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, struct pbuf *p_from)
{
 8005862:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005864:	b085      	sub	sp, #20
 8005866:	af00      	add	r7, sp, #0
 8005868:	6078      	str	r0, [r7, #4]
 800586a:	6039      	str	r1, [r7, #0]
  u16_t offset_to=0, offset_from=0, len;
 800586c:	230e      	movs	r3, #14
 800586e:	18fb      	adds	r3, r7, r3
 8005870:	2200      	movs	r2, #0
 8005872:	801a      	strh	r2, [r3, #0]
 8005874:	230c      	movs	r3, #12
 8005876:	18fb      	adds	r3, r7, r3
 8005878:	2200      	movs	r2, #0
 800587a:	801a      	strh	r2, [r3, #0]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (void*)p_to, (void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d008      	beq.n	8005894 <pbuf_copy+0x32>
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d005      	beq.n	8005894 <pbuf_copy+0x32>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	891a      	ldrh	r2, [r3, #8]
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	891b      	ldrh	r3, [r3, #8]
 8005890:	429a      	cmp	r2, r3
 8005892:	d202      	bcs.n	800589a <pbuf_copy+0x38>
 8005894:	230e      	movs	r3, #14
 8005896:	425b      	negs	r3, r3
 8005898:	e08c      	b.n	80059b4 <pbuf_copy+0x152>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	895b      	ldrh	r3, [r3, #10]
 800589e:	001a      	movs	r2, r3
 80058a0:	230e      	movs	r3, #14
 80058a2:	18fb      	adds	r3, r7, r3
 80058a4:	881b      	ldrh	r3, [r3, #0]
 80058a6:	1ad2      	subs	r2, r2, r3
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	895b      	ldrh	r3, [r3, #10]
 80058ac:	0019      	movs	r1, r3
 80058ae:	230c      	movs	r3, #12
 80058b0:	18fb      	adds	r3, r7, r3
 80058b2:	881b      	ldrh	r3, [r3, #0]
 80058b4:	1acb      	subs	r3, r1, r3
 80058b6:	429a      	cmp	r2, r3
 80058b8:	db09      	blt.n	80058ce <pbuf_copy+0x6c>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	8959      	ldrh	r1, [r3, #10]
 80058be:	230a      	movs	r3, #10
 80058c0:	18fb      	adds	r3, r7, r3
 80058c2:	220c      	movs	r2, #12
 80058c4:	18ba      	adds	r2, r7, r2
 80058c6:	8812      	ldrh	r2, [r2, #0]
 80058c8:	1a8a      	subs	r2, r1, r2
 80058ca:	801a      	strh	r2, [r3, #0]
 80058cc:	e008      	b.n	80058e0 <pbuf_copy+0x7e>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	8959      	ldrh	r1, [r3, #10]
 80058d2:	230a      	movs	r3, #10
 80058d4:	18fb      	adds	r3, r7, r3
 80058d6:	220e      	movs	r2, #14
 80058d8:	18ba      	adds	r2, r7, r2
 80058da:	8812      	ldrh	r2, [r2, #0]
 80058dc:	1a8a      	subs	r2, r1, r2
 80058de:	801a      	strh	r2, [r3, #0]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	685a      	ldr	r2, [r3, #4]
 80058e4:	250e      	movs	r5, #14
 80058e6:	197b      	adds	r3, r7, r5
 80058e8:	881b      	ldrh	r3, [r3, #0]
 80058ea:	18d0      	adds	r0, r2, r3
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	685a      	ldr	r2, [r3, #4]
 80058f0:	240c      	movs	r4, #12
 80058f2:	193b      	adds	r3, r7, r4
 80058f4:	881b      	ldrh	r3, [r3, #0]
 80058f6:	18d1      	adds	r1, r2, r3
 80058f8:	260a      	movs	r6, #10
 80058fa:	19bb      	adds	r3, r7, r6
 80058fc:	881b      	ldrh	r3, [r3, #0]
 80058fe:	001a      	movs	r2, r3
 8005900:	f00a f9cf 	bl	800fca2 <memcpy>
    offset_to += len;
 8005904:	197b      	adds	r3, r7, r5
 8005906:	1979      	adds	r1, r7, r5
 8005908:	0030      	movs	r0, r6
 800590a:	183a      	adds	r2, r7, r0
 800590c:	8809      	ldrh	r1, [r1, #0]
 800590e:	8812      	ldrh	r2, [r2, #0]
 8005910:	188a      	adds	r2, r1, r2
 8005912:	801a      	strh	r2, [r3, #0]
    offset_from += len;
 8005914:	193b      	adds	r3, r7, r4
 8005916:	1939      	adds	r1, r7, r4
 8005918:	183a      	adds	r2, r7, r0
 800591a:	8809      	ldrh	r1, [r1, #0]
 800591c:	8812      	ldrh	r2, [r2, #0]
 800591e:	188a      	adds	r2, r1, r2
 8005920:	801a      	strh	r2, [r3, #0]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
    if (offset_from >= p_from->len) {
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	895b      	ldrh	r3, [r3, #10]
 8005926:	193a      	adds	r2, r7, r4
 8005928:	8812      	ldrh	r2, [r2, #0]
 800592a:	429a      	cmp	r2, r3
 800592c:	d306      	bcc.n	800593c <pbuf_copy+0xda>
      /* on to next p_from (if any) */
      offset_from = 0;
 800592e:	230c      	movs	r3, #12
 8005930:	18fb      	adds	r3, r7, r3
 8005932:	2200      	movs	r2, #0
 8005934:	801a      	strh	r2, [r3, #0]
      p_from = p_from->next;
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	895b      	ldrh	r3, [r3, #10]
 8005940:	220e      	movs	r2, #14
 8005942:	18ba      	adds	r2, r7, r2
 8005944:	8812      	ldrh	r2, [r2, #0]
 8005946:	429a      	cmp	r2, r3
 8005948:	d10f      	bne.n	800596a <pbuf_copy+0x108>
      /* on to next p_to (if any) */
      offset_to = 0;
 800594a:	230e      	movs	r3, #14
 800594c:	18fb      	adds	r3, r7, r3
 800594e:	2200      	movs	r2, #0
 8005950:	801a      	strh	r2, [r3, #0]
      p_to = p_to->next;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d105      	bne.n	800596a <pbuf_copy+0x108>
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d002      	beq.n	800596a <pbuf_copy+0x108>
 8005964:	230e      	movs	r3, #14
 8005966:	425b      	negs	r3, r3
 8005968:	e024      	b.n	80059b4 <pbuf_copy+0x152>
    }

    if((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d00c      	beq.n	800598a <pbuf_copy+0x128>
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	895a      	ldrh	r2, [r3, #10]
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	891b      	ldrh	r3, [r3, #8]
 8005978:	429a      	cmp	r2, r3
 800597a:	d106      	bne.n	800598a <pbuf_copy+0x128>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!\n",
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d002      	beq.n	800598a <pbuf_copy+0x128>
 8005984:	2306      	movs	r3, #6
 8005986:	425b      	negs	r3, r3
 8005988:	e014      	b.n	80059b4 <pbuf_copy+0x152>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d00c      	beq.n	80059aa <pbuf_copy+0x148>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	895a      	ldrh	r2, [r3, #10]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	891b      	ldrh	r3, [r3, #8]
 8005998:	429a      	cmp	r2, r3
 800599a:	d106      	bne.n	80059aa <pbuf_copy+0x148>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!\n",
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d002      	beq.n	80059aa <pbuf_copy+0x148>
 80059a4:	2306      	movs	r3, #6
 80059a6:	425b      	negs	r3, r3
 80059a8:	e004      	b.n	80059b4 <pbuf_copy+0x152>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d000      	beq.n	80059b2 <pbuf_copy+0x150>
 80059b0:	e773      	b.n	800589a <pbuf_copy+0x38>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80059b2:	2300      	movs	r3, #0
}
 80059b4:	0018      	movs	r0, r3
 80059b6:	46bd      	mov	sp, r7
 80059b8:	b005      	add	sp, #20
 80059ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

080059bc <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80059bc:	b5b0      	push	{r4, r5, r7, lr}
 80059be:	b088      	sub	sp, #32
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	60f8      	str	r0, [r7, #12]
 80059c4:	60b9      	str	r1, [r7, #8]
 80059c6:	0019      	movs	r1, r3
 80059c8:	1dbb      	adds	r3, r7, #6
 80059ca:	801a      	strh	r2, [r3, #0]
 80059cc:	1d3b      	adds	r3, r7, #4
 80059ce:	1c0a      	adds	r2, r1, #0
 80059d0:	801a      	strh	r2, [r3, #0]
  struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80059d2:	2316      	movs	r3, #22
 80059d4:	18fb      	adds	r3, r7, r3
 80059d6:	2200      	movs	r2, #0
 80059d8:	801a      	strh	r2, [r3, #0]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d101      	bne.n	80059e4 <pbuf_copy_partial+0x28>
 80059e0:	2300      	movs	r3, #0
 80059e2:	e06f      	b.n	8005ac4 <pbuf_copy_partial+0x108>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d101      	bne.n	80059ee <pbuf_copy_partial+0x32>
 80059ea:	2300      	movs	r3, #0
 80059ec:	e06a      	b.n	8005ac4 <pbuf_copy_partial+0x108>

  left = 0;
 80059ee:	231a      	movs	r3, #26
 80059f0:	18fb      	adds	r3, r7, r3
 80059f2:	2200      	movs	r2, #0
 80059f4:	801a      	strh	r2, [r3, #0]

  if((buf == NULL) || (dataptr == NULL)) {
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d002      	beq.n	8005a02 <pbuf_copy_partial+0x46>
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d101      	bne.n	8005a06 <pbuf_copy_partial+0x4a>
    return 0;
 8005a02:	2300      	movs	r3, #0
 8005a04:	e05e      	b.n	8005ac4 <pbuf_copy_partial+0x108>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for(p = buf; len != 0 && p != NULL; p = p->next) {
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	61fb      	str	r3, [r7, #28]
 8005a0a:	e051      	b.n	8005ab0 <pbuf_copy_partial+0xf4>
    if ((offset != 0) && (offset >= p->len)) {
 8005a0c:	1d3b      	adds	r3, r7, #4
 8005a0e:	881b      	ldrh	r3, [r3, #0]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d00d      	beq.n	8005a30 <pbuf_copy_partial+0x74>
 8005a14:	69fb      	ldr	r3, [r7, #28]
 8005a16:	895b      	ldrh	r3, [r3, #10]
 8005a18:	1d3a      	adds	r2, r7, #4
 8005a1a:	8812      	ldrh	r2, [r2, #0]
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d307      	bcc.n	8005a30 <pbuf_copy_partial+0x74>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
 8005a20:	69fb      	ldr	r3, [r7, #28]
 8005a22:	895a      	ldrh	r2, [r3, #10]
 8005a24:	1d3b      	adds	r3, r7, #4
 8005a26:	1d39      	adds	r1, r7, #4
 8005a28:	8809      	ldrh	r1, [r1, #0]
 8005a2a:	1a8a      	subs	r2, r1, r2
 8005a2c:	801a      	strh	r2, [r3, #0]
 8005a2e:	e03c      	b.n	8005aaa <pbuf_copy_partial+0xee>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 8005a30:	69fb      	ldr	r3, [r7, #28]
 8005a32:	8959      	ldrh	r1, [r3, #10]
 8005a34:	2018      	movs	r0, #24
 8005a36:	183b      	adds	r3, r7, r0
 8005a38:	1d3a      	adds	r2, r7, #4
 8005a3a:	8812      	ldrh	r2, [r2, #0]
 8005a3c:	1a8a      	subs	r2, r1, r2
 8005a3e:	801a      	strh	r2, [r3, #0]
      if (buf_copy_len > len)
 8005a40:	183a      	adds	r2, r7, r0
 8005a42:	1dbb      	adds	r3, r7, #6
 8005a44:	8812      	ldrh	r2, [r2, #0]
 8005a46:	881b      	ldrh	r3, [r3, #0]
 8005a48:	429a      	cmp	r2, r3
 8005a4a:	d904      	bls.n	8005a56 <pbuf_copy_partial+0x9a>
          buf_copy_len = len;
 8005a4c:	2318      	movs	r3, #24
 8005a4e:	18fb      	adds	r3, r7, r3
 8005a50:	1dba      	adds	r2, r7, #6
 8005a52:	8812      	ldrh	r2, [r2, #0]
 8005a54:	801a      	strh	r2, [r3, #0]
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 8005a56:	251a      	movs	r5, #26
 8005a58:	197b      	adds	r3, r7, r5
 8005a5a:	881b      	ldrh	r3, [r3, #0]
 8005a5c:	68ba      	ldr	r2, [r7, #8]
 8005a5e:	18d0      	adds	r0, r2, r3
 8005a60:	69fb      	ldr	r3, [r7, #28]
 8005a62:	685a      	ldr	r2, [r3, #4]
 8005a64:	1d3b      	adds	r3, r7, #4
 8005a66:	881b      	ldrh	r3, [r3, #0]
 8005a68:	18d1      	adds	r1, r2, r3
 8005a6a:	2418      	movs	r4, #24
 8005a6c:	193b      	adds	r3, r7, r4
 8005a6e:	881b      	ldrh	r3, [r3, #0]
 8005a70:	001a      	movs	r2, r3
 8005a72:	f00a f916 	bl	800fca2 <memcpy>
      copied_total += buf_copy_len;
 8005a76:	2216      	movs	r2, #22
 8005a78:	18bb      	adds	r3, r7, r2
 8005a7a:	18b9      	adds	r1, r7, r2
 8005a7c:	0020      	movs	r0, r4
 8005a7e:	183a      	adds	r2, r7, r0
 8005a80:	8809      	ldrh	r1, [r1, #0]
 8005a82:	8812      	ldrh	r2, [r2, #0]
 8005a84:	188a      	adds	r2, r1, r2
 8005a86:	801a      	strh	r2, [r3, #0]
      left += buf_copy_len;
 8005a88:	197b      	adds	r3, r7, r5
 8005a8a:	1979      	adds	r1, r7, r5
 8005a8c:	183a      	adds	r2, r7, r0
 8005a8e:	8809      	ldrh	r1, [r1, #0]
 8005a90:	8812      	ldrh	r2, [r2, #0]
 8005a92:	188a      	adds	r2, r1, r2
 8005a94:	801a      	strh	r2, [r3, #0]
      len -= buf_copy_len;
 8005a96:	1dbb      	adds	r3, r7, #6
 8005a98:	1db9      	adds	r1, r7, #6
 8005a9a:	183a      	adds	r2, r7, r0
 8005a9c:	8809      	ldrh	r1, [r1, #0]
 8005a9e:	8812      	ldrh	r2, [r2, #0]
 8005aa0:	1a8a      	subs	r2, r1, r2
 8005aa2:	801a      	strh	r2, [r3, #0]
      offset = 0;
 8005aa4:	1d3b      	adds	r3, r7, #4
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	801a      	strh	r2, [r3, #0]
  for(p = buf; len != 0 && p != NULL; p = p->next) {
 8005aaa:	69fb      	ldr	r3, [r7, #28]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	61fb      	str	r3, [r7, #28]
 8005ab0:	1dbb      	adds	r3, r7, #6
 8005ab2:	881b      	ldrh	r3, [r3, #0]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d002      	beq.n	8005abe <pbuf_copy_partial+0x102>
 8005ab8:	69fb      	ldr	r3, [r7, #28]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d1a6      	bne.n	8005a0c <pbuf_copy_partial+0x50>
    }
  }
  return copied_total;
 8005abe:	2316      	movs	r3, #22
 8005ac0:	18fb      	adds	r3, r7, r3
 8005ac2:	881b      	ldrh	r3, [r3, #0]
}
 8005ac4:	0018      	movs	r0, r3
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	b008      	add	sp, #32
 8005aca:	bdb0      	pop	{r4, r5, r7, pc}

08005acc <raw_input>:
 *           caller).
 *
 */
u8_t
raw_input(struct pbuf *p, struct netif *inp)
{
 8005acc:	b590      	push	{r4, r7, lr}
 8005ace:	b089      	sub	sp, #36	; 0x24
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
 8005ad4:	6039      	str	r1, [r7, #0]
  struct raw_pcb *pcb, *prev;
  struct ip_hdr *iphdr;
  s16_t proto;
  u8_t eaten = 0;
 8005ad6:	2317      	movs	r3, #23
 8005ad8:	18fb      	adds	r3, r7, r3
 8005ada:	2200      	movs	r2, #0
 8005adc:	701a      	strb	r2, [r3, #0]

  LWIP_UNUSED_ARG(inp);

  iphdr = (struct ip_hdr *)p->payload;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	613b      	str	r3, [r7, #16]
  proto = IPH_PROTO(iphdr);
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	7a5a      	ldrb	r2, [r3, #9]
 8005ae8:	230e      	movs	r3, #14
 8005aea:	18fb      	adds	r3, r7, r3
 8005aec:	801a      	strh	r2, [r3, #0]

  prev = NULL;
 8005aee:	2300      	movs	r3, #0
 8005af0:	61bb      	str	r3, [r7, #24]
  pcb = raw_pcbs;
 8005af2:	4b28      	ldr	r3, [pc, #160]	; (8005b94 <raw_input+0xc8>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	61fb      	str	r3, [r7, #28]
  /* loop through all raw pcbs until the packet is eaten by one */
  /* this allows multiple pcbs to match against the packet by design */
  while ((eaten == 0) && (pcb != NULL)) {
 8005af8:	e03c      	b.n	8005b74 <raw_input+0xa8>
    if ((pcb->protocol == proto) &&
 8005afa:	69fb      	ldr	r3, [r7, #28]
 8005afc:	7c1b      	ldrb	r3, [r3, #16]
 8005afe:	001a      	movs	r2, r3
 8005b00:	230e      	movs	r3, #14
 8005b02:	18fb      	adds	r3, r7, r3
 8005b04:	2100      	movs	r1, #0
 8005b06:	5e5b      	ldrsh	r3, [r3, r1]
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	d12e      	bne.n	8005b6a <raw_input+0x9e>
        (ip_addr_isany(&pcb->local_ip) ||
 8005b0c:	69fb      	ldr	r3, [r7, #28]
    if ((pcb->protocol == proto) &&
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d009      	beq.n	8005b26 <raw_input+0x5a>
        (ip_addr_isany(&pcb->local_ip) ||
 8005b12:	69fb      	ldr	r3, [r7, #28]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d005      	beq.n	8005b26 <raw_input+0x5a>
         ip_addr_cmp(&(pcb->local_ip), &current_iphdr_dest))) {
 8005b1a:	69fb      	ldr	r3, [r7, #28]
 8005b1c:	681a      	ldr	r2, [r3, #0]
 8005b1e:	4b1e      	ldr	r3, [pc, #120]	; (8005b98 <raw_input+0xcc>)
 8005b20:	681b      	ldr	r3, [r3, #0]
        (ip_addr_isany(&pcb->local_ip) ||
 8005b22:	429a      	cmp	r2, r3
 8005b24:	d121      	bne.n	8005b6a <raw_input+0x9e>
      /* broadcast filter? */
      if (ip_get_option(pcb, SOF_BROADCAST) || !ip_addr_isbroadcast(&current_iphdr_dest, inp))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        /* receive callback function available? */
        if (pcb->recv != NULL) {
 8005b26:	69fb      	ldr	r3, [r7, #28]
 8005b28:	695b      	ldr	r3, [r3, #20]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d01d      	beq.n	8005b6a <raw_input+0x9e>
          /* the receive callback function did not eat the packet? */
          if (pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr()) != 0) {
 8005b2e:	69fb      	ldr	r3, [r7, #28]
 8005b30:	695c      	ldr	r4, [r3, #20]
 8005b32:	69fb      	ldr	r3, [r7, #28]
 8005b34:	6998      	ldr	r0, [r3, #24]
 8005b36:	4b19      	ldr	r3, [pc, #100]	; (8005b9c <raw_input+0xd0>)
 8005b38:	687a      	ldr	r2, [r7, #4]
 8005b3a:	69f9      	ldr	r1, [r7, #28]
 8005b3c:	47a0      	blx	r4
 8005b3e:	1e03      	subs	r3, r0, #0
 8005b40:	d013      	beq.n	8005b6a <raw_input+0x9e>
            /* receive function ate the packet */
            p = NULL;
 8005b42:	2300      	movs	r3, #0
 8005b44:	607b      	str	r3, [r7, #4]
            eaten = 1;
 8005b46:	2317      	movs	r3, #23
 8005b48:	18fb      	adds	r3, r7, r3
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	701a      	strb	r2, [r3, #0]
            if (prev != NULL) {
 8005b4e:	69bb      	ldr	r3, [r7, #24]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d00a      	beq.n	8005b6a <raw_input+0x9e>
            /* move the pcb to the front of raw_pcbs so that is
               found faster next time */
              prev->next = pcb->next;
 8005b54:	69fb      	ldr	r3, [r7, #28]
 8005b56:	68da      	ldr	r2, [r3, #12]
 8005b58:	69bb      	ldr	r3, [r7, #24]
 8005b5a:	60da      	str	r2, [r3, #12]
              pcb->next = raw_pcbs;
 8005b5c:	4b0d      	ldr	r3, [pc, #52]	; (8005b94 <raw_input+0xc8>)
 8005b5e:	681a      	ldr	r2, [r3, #0]
 8005b60:	69fb      	ldr	r3, [r7, #28]
 8005b62:	60da      	str	r2, [r3, #12]
              raw_pcbs = pcb;
 8005b64:	4b0b      	ldr	r3, [pc, #44]	; (8005b94 <raw_input+0xc8>)
 8005b66:	69fa      	ldr	r2, [r7, #28]
 8005b68:	601a      	str	r2, [r3, #0]
        }
        /* no receive callback function was set for this raw PCB */
      }
      /* drop the packet */
    }
    prev = pcb;
 8005b6a:	69fb      	ldr	r3, [r7, #28]
 8005b6c:	61bb      	str	r3, [r7, #24]
    pcb = pcb->next;
 8005b6e:	69fb      	ldr	r3, [r7, #28]
 8005b70:	68db      	ldr	r3, [r3, #12]
 8005b72:	61fb      	str	r3, [r7, #28]
  while ((eaten == 0) && (pcb != NULL)) {
 8005b74:	2317      	movs	r3, #23
 8005b76:	18fb      	adds	r3, r7, r3
 8005b78:	781b      	ldrb	r3, [r3, #0]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d102      	bne.n	8005b84 <raw_input+0xb8>
 8005b7e:	69fb      	ldr	r3, [r7, #28]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d1ba      	bne.n	8005afa <raw_input+0x2e>
  }
  return eaten;
 8005b84:	2317      	movs	r3, #23
 8005b86:	18fb      	adds	r3, r7, r3
 8005b88:	781b      	ldrb	r3, [r3, #0]
}
 8005b8a:	0018      	movs	r0, r3
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	b009      	add	sp, #36	; 0x24
 8005b90:	bd90      	pop	{r4, r7, pc}
 8005b92:	46c0      	nop			; (mov r8, r8)
 8005b94:	20002274 	.word	0x20002274
 8005b98:	2000329c 	.word	0x2000329c
 8005b9c:	20003294 	.word	0x20003294

08005ba0 <stats_init>:
#include <string.h>

struct stats_ lwip_stats;

void stats_init(void)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	af00      	add	r7, sp, #0
#endif /* MEMP_STATS */
#if MEM_STATS
  lwip_stats.mem.name = "MEM";
#endif /* MEM_STATS */
#endif /* LWIP_DEBUG */
}
 8005ba4:	46c0      	nop			; (mov r8, r8)
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}

08005baa <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8005baa:	b580      	push	{r7, lr}
 8005bac:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 8005bae:	46c0      	nop			; (mov r8, r8)
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}

08005bb4 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8005bb8:	f000 fcd0 	bl	800655c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8005bbc:	4b08      	ldr	r3, [pc, #32]	; (8005be0 <tcp_tmr+0x2c>)
 8005bbe:	781b      	ldrb	r3, [r3, #0]
 8005bc0:	3301      	adds	r3, #1
 8005bc2:	b2da      	uxtb	r2, r3
 8005bc4:	4b06      	ldr	r3, [pc, #24]	; (8005be0 <tcp_tmr+0x2c>)
 8005bc6:	701a      	strb	r2, [r3, #0]
 8005bc8:	4b05      	ldr	r3, [pc, #20]	; (8005be0 <tcp_tmr+0x2c>)
 8005bca:	781b      	ldrb	r3, [r3, #0]
 8005bcc:	001a      	movs	r2, r3
 8005bce:	2301      	movs	r3, #1
 8005bd0:	4013      	ands	r3, r2
 8005bd2:	d001      	beq.n	8005bd8 <tcp_tmr+0x24>
    /* Call tcp_tmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8005bd4:	f000 fa54 	bl	8006080 <tcp_slowtmr>
  }
}
 8005bd8:	46c0      	nop			; (mov r8, r8)
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}
 8005bde:	46c0      	nop			; (mov r8, r8)
 8005be0:	20002278 	.word	0x20002278

08005be4 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8005be4:	b5b0      	push	{r4, r5, r7, lr}
 8005be6:	b086      	sub	sp, #24
 8005be8:	af02      	add	r7, sp, #8
 8005bea:	6078      	str	r0, [r7, #4]
 8005bec:	000a      	movs	r2, r1
 8005bee:	1cfb      	adds	r3, r7, #3
 8005bf0:	701a      	strb	r2, [r3, #0]
  err_t err;

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8005bf2:	1cfb      	adds	r3, r7, #3
 8005bf4:	781b      	ldrb	r3, [r3, #0]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d100      	bne.n	8005bfc <tcp_close_shutdown+0x18>
 8005bfa:	e068      	b.n	8005cce <tcp_close_shutdown+0xea>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	7e1b      	ldrb	r3, [r3, #24]
 8005c00:	2b04      	cmp	r3, #4
 8005c02:	d003      	beq.n	8005c0c <tcp_close_shutdown+0x28>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	7e1b      	ldrb	r3, [r3, #24]
 8005c08:	2b07      	cmp	r3, #7
 8005c0a:	d160      	bne.n	8005cce <tcp_close_shutdown+0xea>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND)) {
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d104      	bne.n	8005c1e <tcp_close_shutdown+0x3a>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005c18:	4a8b      	ldr	r2, [pc, #556]	; (8005e48 <tcp_close_shutdown+0x264>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d057      	beq.n	8005cce <tcp_close_shutdown+0xea>
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8005c26:	687c      	ldr	r4, [r7, #4]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	1d1d      	adds	r5, r3, #4
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	8b5b      	ldrh	r3, [r3, #26]
 8005c30:	687a      	ldr	r2, [r7, #4]
 8005c32:	8b92      	ldrh	r2, [r2, #28]
 8005c34:	9201      	str	r2, [sp, #4]
 8005c36:	9300      	str	r3, [sp, #0]
 8005c38:	002b      	movs	r3, r5
 8005c3a:	0022      	movs	r2, r4
 8005c3c:	f004 f9c6 	bl	8009fcc <tcp_rst>
        pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	0018      	movs	r0, r3
 8005c44:	f000 fef0 	bl	8006a28 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8005c48:	4b80      	ldr	r3, [pc, #512]	; (8005e4c <tcp_close_shutdown+0x268>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	687a      	ldr	r2, [r7, #4]
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	d105      	bne.n	8005c5e <tcp_close_shutdown+0x7a>
 8005c52:	4b7e      	ldr	r3, [pc, #504]	; (8005e4c <tcp_close_shutdown+0x268>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	68da      	ldr	r2, [r3, #12]
 8005c58:	4b7c      	ldr	r3, [pc, #496]	; (8005e4c <tcp_close_shutdown+0x268>)
 8005c5a:	601a      	str	r2, [r3, #0]
 8005c5c:	e019      	b.n	8005c92 <tcp_close_shutdown+0xae>
 8005c5e:	4b7b      	ldr	r3, [pc, #492]	; (8005e4c <tcp_close_shutdown+0x268>)
 8005c60:	681a      	ldr	r2, [r3, #0]
 8005c62:	4b7b      	ldr	r3, [pc, #492]	; (8005e50 <tcp_close_shutdown+0x26c>)
 8005c64:	601a      	str	r2, [r3, #0]
 8005c66:	e010      	b.n	8005c8a <tcp_close_shutdown+0xa6>
 8005c68:	4b79      	ldr	r3, [pc, #484]	; (8005e50 <tcp_close_shutdown+0x26c>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	68db      	ldr	r3, [r3, #12]
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	429a      	cmp	r2, r3
 8005c72:	d105      	bne.n	8005c80 <tcp_close_shutdown+0x9c>
 8005c74:	4b76      	ldr	r3, [pc, #472]	; (8005e50 <tcp_close_shutdown+0x26c>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	687a      	ldr	r2, [r7, #4]
 8005c7a:	68d2      	ldr	r2, [r2, #12]
 8005c7c:	60da      	str	r2, [r3, #12]
 8005c7e:	e008      	b.n	8005c92 <tcp_close_shutdown+0xae>
 8005c80:	4b73      	ldr	r3, [pc, #460]	; (8005e50 <tcp_close_shutdown+0x26c>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	68da      	ldr	r2, [r3, #12]
 8005c86:	4b72      	ldr	r3, [pc, #456]	; (8005e50 <tcp_close_shutdown+0x26c>)
 8005c88:	601a      	str	r2, [r3, #0]
 8005c8a:	4b71      	ldr	r3, [pc, #452]	; (8005e50 <tcp_close_shutdown+0x26c>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d1ea      	bne.n	8005c68 <tcp_close_shutdown+0x84>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2200      	movs	r2, #0
 8005c96:	60da      	str	r2, [r3, #12]
 8005c98:	4b6e      	ldr	r3, [pc, #440]	; (8005e54 <tcp_close_shutdown+0x270>)
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	7e1b      	ldrb	r3, [r3, #24]
 8005ca2:	2b04      	cmp	r3, #4
 8005ca4:	d10c      	bne.n	8005cc0 <tcp_close_shutdown+0xdc>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	220a      	movs	r2, #10
 8005caa:	761a      	strb	r2, [r3, #24]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8005cac:	4b6a      	ldr	r3, [pc, #424]	; (8005e58 <tcp_close_shutdown+0x274>)
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	60da      	str	r2, [r3, #12]
 8005cb4:	4b68      	ldr	r3, [pc, #416]	; (8005e58 <tcp_close_shutdown+0x274>)
 8005cb6:	687a      	ldr	r2, [r7, #4]
 8005cb8:	601a      	str	r2, [r3, #0]
 8005cba:	f004 fcdb 	bl	800a674 <tcp_timer_needed>
 8005cbe:	e004      	b.n	8005cca <tcp_close_shutdown+0xe6>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        memp_free(MEMP_TCP_PCB, pcb);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	0019      	movs	r1, r3
 8005cc4:	2002      	movs	r0, #2
 8005cc6:	f7ff f92b 	bl	8004f20 <memp_free>
      }
      return ERR_OK;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	e0b8      	b.n	8005e40 <tcp_close_shutdown+0x25c>
    }
  }

  switch (pcb->state) {
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	7e1b      	ldrb	r3, [r3, #24]
 8005cd2:	2b07      	cmp	r3, #7
 8005cd4:	d900      	bls.n	8005cd8 <tcp_close_shutdown+0xf4>
 8005cd6:	e096      	b.n	8005e06 <tcp_close_shutdown+0x222>
 8005cd8:	009a      	lsls	r2, r3, #2
 8005cda:	4b60      	ldr	r3, [pc, #384]	; (8005e5c <tcp_close_shutdown+0x278>)
 8005cdc:	18d3      	adds	r3, r2, r3
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	469f      	mov	pc, r3
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state 
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    err = ERR_OK;
 8005ce2:	230f      	movs	r3, #15
 8005ce4:	18fb      	adds	r3, r7, r3
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	701a      	strb	r2, [r3, #0]
    if (pcb->local_port != 0) {
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	8b5b      	ldrh	r3, [r3, #26]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d027      	beq.n	8005d42 <tcp_close_shutdown+0x15e>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8005cf2:	4b5b      	ldr	r3, [pc, #364]	; (8005e60 <tcp_close_shutdown+0x27c>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	687a      	ldr	r2, [r7, #4]
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	d105      	bne.n	8005d08 <tcp_close_shutdown+0x124>
 8005cfc:	4b58      	ldr	r3, [pc, #352]	; (8005e60 <tcp_close_shutdown+0x27c>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	68da      	ldr	r2, [r3, #12]
 8005d02:	4b57      	ldr	r3, [pc, #348]	; (8005e60 <tcp_close_shutdown+0x27c>)
 8005d04:	601a      	str	r2, [r3, #0]
 8005d06:	e019      	b.n	8005d3c <tcp_close_shutdown+0x158>
 8005d08:	4b55      	ldr	r3, [pc, #340]	; (8005e60 <tcp_close_shutdown+0x27c>)
 8005d0a:	681a      	ldr	r2, [r3, #0]
 8005d0c:	4b50      	ldr	r3, [pc, #320]	; (8005e50 <tcp_close_shutdown+0x26c>)
 8005d0e:	601a      	str	r2, [r3, #0]
 8005d10:	e010      	b.n	8005d34 <tcp_close_shutdown+0x150>
 8005d12:	4b4f      	ldr	r3, [pc, #316]	; (8005e50 <tcp_close_shutdown+0x26c>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	68db      	ldr	r3, [r3, #12]
 8005d18:	687a      	ldr	r2, [r7, #4]
 8005d1a:	429a      	cmp	r2, r3
 8005d1c:	d105      	bne.n	8005d2a <tcp_close_shutdown+0x146>
 8005d1e:	4b4c      	ldr	r3, [pc, #304]	; (8005e50 <tcp_close_shutdown+0x26c>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	687a      	ldr	r2, [r7, #4]
 8005d24:	68d2      	ldr	r2, [r2, #12]
 8005d26:	60da      	str	r2, [r3, #12]
 8005d28:	e008      	b.n	8005d3c <tcp_close_shutdown+0x158>
 8005d2a:	4b49      	ldr	r3, [pc, #292]	; (8005e50 <tcp_close_shutdown+0x26c>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	68da      	ldr	r2, [r3, #12]
 8005d30:	4b47      	ldr	r3, [pc, #284]	; (8005e50 <tcp_close_shutdown+0x26c>)
 8005d32:	601a      	str	r2, [r3, #0]
 8005d34:	4b46      	ldr	r3, [pc, #280]	; (8005e50 <tcp_close_shutdown+0x26c>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d1ea      	bne.n	8005d12 <tcp_close_shutdown+0x12e>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	60da      	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	0019      	movs	r1, r3
 8005d46:	2002      	movs	r0, #2
 8005d48:	f7ff f8ea 	bl	8004f20 <memp_free>
    pcb = NULL;
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	607b      	str	r3, [r7, #4]
    break;
 8005d50:	e065      	b.n	8005e1e <tcp_close_shutdown+0x23a>
  case LISTEN:
    err = ERR_OK;
 8005d52:	230f      	movs	r3, #15
 8005d54:	18fb      	adds	r3, r7, r3
 8005d56:	2200      	movs	r2, #0
 8005d58:	701a      	strb	r2, [r3, #0]
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8005d5a:	687a      	ldr	r2, [r7, #4]
 8005d5c:	4b41      	ldr	r3, [pc, #260]	; (8005e64 <tcp_close_shutdown+0x280>)
 8005d5e:	0011      	movs	r1, r2
 8005d60:	0018      	movs	r0, r3
 8005d62:	f000 fea3 	bl	8006aac <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	0019      	movs	r1, r3
 8005d6a:	2003      	movs	r0, #3
 8005d6c:	f7ff f8d8 	bl	8004f20 <memp_free>
    pcb = NULL;
 8005d70:	2300      	movs	r3, #0
 8005d72:	607b      	str	r3, [r7, #4]
    break;
 8005d74:	e053      	b.n	8005e1e <tcp_close_shutdown+0x23a>
  case SYN_SENT:
    err = ERR_OK;
 8005d76:	230f      	movs	r3, #15
 8005d78:	18fb      	adds	r3, r7, r3
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	701a      	strb	r2, [r3, #0]
    TCP_PCB_REMOVE_ACTIVE(pcb);
 8005d7e:	687a      	ldr	r2, [r7, #4]
 8005d80:	4b32      	ldr	r3, [pc, #200]	; (8005e4c <tcp_close_shutdown+0x268>)
 8005d82:	0011      	movs	r1, r2
 8005d84:	0018      	movs	r0, r3
 8005d86:	f000 fe91 	bl	8006aac <tcp_pcb_remove>
 8005d8a:	4b32      	ldr	r3, [pc, #200]	; (8005e54 <tcp_close_shutdown+0x270>)
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	701a      	strb	r2, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	0019      	movs	r1, r3
 8005d94:	2002      	movs	r0, #2
 8005d96:	f7ff f8c3 	bl	8004f20 <memp_free>
    pcb = NULL;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	607b      	str	r3, [r7, #4]
    snmp_inc_tcpattemptfails();
    break;
 8005d9e:	e03e      	b.n	8005e1e <tcp_close_shutdown+0x23a>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 8005da0:	250f      	movs	r5, #15
 8005da2:	197c      	adds	r4, r7, r5
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	0018      	movs	r0, r3
 8005da8:	f003 fb89 	bl	80094be <tcp_send_fin>
 8005dac:	0003      	movs	r3, r0
 8005dae:	7023      	strb	r3, [r4, #0]
    if (err == ERR_OK) {
 8005db0:	197b      	adds	r3, r7, r5
 8005db2:	781b      	ldrb	r3, [r3, #0]
 8005db4:	b25b      	sxtb	r3, r3
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d12c      	bne.n	8005e14 <tcp_close_shutdown+0x230>
      snmp_inc_tcpattemptfails();
      pcb->state = FIN_WAIT_1;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2205      	movs	r2, #5
 8005dbe:	761a      	strb	r2, [r3, #24]
    }
    break;
 8005dc0:	e028      	b.n	8005e14 <tcp_close_shutdown+0x230>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
 8005dc2:	250f      	movs	r5, #15
 8005dc4:	197c      	adds	r4, r7, r5
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	0018      	movs	r0, r3
 8005dca:	f003 fb78 	bl	80094be <tcp_send_fin>
 8005dce:	0003      	movs	r3, r0
 8005dd0:	7023      	strb	r3, [r4, #0]
    if (err == ERR_OK) {
 8005dd2:	197b      	adds	r3, r7, r5
 8005dd4:	781b      	ldrb	r3, [r3, #0]
 8005dd6:	b25b      	sxtb	r3, r3
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d11d      	bne.n	8005e18 <tcp_close_shutdown+0x234>
      snmp_inc_tcpestabresets();
      pcb->state = FIN_WAIT_1;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2205      	movs	r2, #5
 8005de0:	761a      	strb	r2, [r3, #24]
    }
    break;
 8005de2:	e019      	b.n	8005e18 <tcp_close_shutdown+0x234>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
 8005de4:	250f      	movs	r5, #15
 8005de6:	197c      	adds	r4, r7, r5
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	0018      	movs	r0, r3
 8005dec:	f003 fb67 	bl	80094be <tcp_send_fin>
 8005df0:	0003      	movs	r3, r0
 8005df2:	7023      	strb	r3, [r4, #0]
    if (err == ERR_OK) {
 8005df4:	197b      	adds	r3, r7, r5
 8005df6:	781b      	ldrb	r3, [r3, #0]
 8005df8:	b25b      	sxtb	r3, r3
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d10e      	bne.n	8005e1c <tcp_close_shutdown+0x238>
      snmp_inc_tcpestabresets();
      pcb->state = LAST_ACK;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2209      	movs	r2, #9
 8005e02:	761a      	strb	r2, [r3, #24]
    }
    break;
 8005e04:	e00a      	b.n	8005e1c <tcp_close_shutdown+0x238>
  default:
    /* Has already been closed, do nothing. */
    err = ERR_OK;
 8005e06:	230f      	movs	r3, #15
 8005e08:	18fb      	adds	r3, r7, r3
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	701a      	strb	r2, [r3, #0]
    pcb = NULL;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	607b      	str	r3, [r7, #4]
    break;
 8005e12:	e004      	b.n	8005e1e <tcp_close_shutdown+0x23a>
    break;
 8005e14:	46c0      	nop			; (mov r8, r8)
 8005e16:	e002      	b.n	8005e1e <tcp_close_shutdown+0x23a>
    break;
 8005e18:	46c0      	nop			; (mov r8, r8)
 8005e1a:	e000      	b.n	8005e1e <tcp_close_shutdown+0x23a>
    break;
 8005e1c:	46c0      	nop			; (mov r8, r8)
  }

  if (pcb != NULL && err == ERR_OK) {
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d009      	beq.n	8005e38 <tcp_close_shutdown+0x254>
 8005e24:	230f      	movs	r3, #15
 8005e26:	18fb      	adds	r3, r7, r3
 8005e28:	781b      	ldrb	r3, [r3, #0]
 8005e2a:	b25b      	sxtb	r3, r3
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d103      	bne.n	8005e38 <tcp_close_shutdown+0x254>
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    /* @todo: When implementing SO_LINGER, this must be changed somehow:
       If SOF_LINGER is set, the data should be sent and acked before close returns.
       This can only be valid for sequential APIs, not for the raw API. */
    tcp_output(pcb);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	0018      	movs	r0, r3
 8005e34:	f003 fdec 	bl	8009a10 <tcp_output>
  }
  return err;
 8005e38:	230f      	movs	r3, #15
 8005e3a:	18fb      	adds	r3, r7, r3
 8005e3c:	781b      	ldrb	r3, [r3, #0]
 8005e3e:	b25b      	sxtb	r3, r3
}
 8005e40:	0018      	movs	r0, r3
 8005e42:	46bd      	mov	sp, r7
 8005e44:	b004      	add	sp, #16
 8005e46:	bdb0      	pop	{r4, r5, r7, pc}
 8005e48:	000016d0 	.word	0x000016d0
 8005e4c:	20003274 	.word	0x20003274
 8005e50:	20003280 	.word	0x20003280
 8005e54:	20003270 	.word	0x20003270
 8005e58:	20003288 	.word	0x20003288
 8005e5c:	0800fd78 	.word	0x0800fd78
 8005e60:	20003284 	.word	0x20003284
 8005e64:	2000327c 	.word	0x2000327c

08005e68 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b082      	sub	sp, #8
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
#if TCP_DEBUG
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);
#endif /* TCP_DEBUG */

  if (pcb->state != LISTEN) {
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	7e1b      	ldrb	r3, [r3, #24]
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d006      	beq.n	8005e86 <tcp_close+0x1e>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	7f9b      	ldrb	r3, [r3, #30]
 8005e7c:	2210      	movs	r2, #16
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	b2da      	uxtb	r2, r3
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	779a      	strb	r2, [r3, #30]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2101      	movs	r1, #1
 8005e8a:	0018      	movs	r0, r3
 8005e8c:	f7ff feaa 	bl	8005be4 <tcp_close_shutdown>
 8005e90:	0003      	movs	r3, r0
}
 8005e92:	0018      	movs	r0, r3
 8005e94:	46bd      	mov	sp, r7
 8005e96:	b002      	add	sp, #8
 8005e98:	bd80      	pop	{r7, pc}
	...

08005e9c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8005e9c:	b5b0      	push	{r4, r5, r7, lr}
 8005e9e:	b088      	sub	sp, #32
 8005ea0:	af02      	add	r7, sp, #8
 8005ea2:	6078      	str	r0, [r7, #4]
 8005ea4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	7e1b      	ldrb	r3, [r3, #24]
 8005eaa:	2b0a      	cmp	r3, #10
 8005eac:	d10b      	bne.n	8005ec6 <tcp_abandon+0x2a>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8005eae:	687a      	ldr	r2, [r7, #4]
 8005eb0:	4b2f      	ldr	r3, [pc, #188]	; (8005f70 <tcp_abandon+0xd4>)
 8005eb2:	0011      	movs	r1, r2
 8005eb4:	0018      	movs	r0, r3
 8005eb6:	f000 fdf9 	bl	8006aac <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	0019      	movs	r1, r3
 8005ebe:	2002      	movs	r0, #2
 8005ec0:	f7ff f82e 	bl	8004f20 <memp_free>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, pcb->local_port, pcb->remote_port);
    }
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(errf, errf_arg, ERR_ABRT);
  }
}
 8005ec4:	e050      	b.n	8005f68 <tcp_abandon+0xcc>
    seqno = pcb->snd_nxt;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005eca:	617b      	str	r3, [r7, #20]
    ackno = pcb->rcv_nxt;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ed0:	613b      	str	r3, [r7, #16]
    errf = pcb->errf;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	228c      	movs	r2, #140	; 0x8c
 8005ed6:	589b      	ldr	r3, [r3, r2]
 8005ed8:	60fb      	str	r3, [r7, #12]
    errf_arg = pcb->callback_arg;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	691b      	ldr	r3, [r3, #16]
 8005ede:	60bb      	str	r3, [r7, #8]
    TCP_PCB_REMOVE_ACTIVE(pcb);
 8005ee0:	687a      	ldr	r2, [r7, #4]
 8005ee2:	4b24      	ldr	r3, [pc, #144]	; (8005f74 <tcp_abandon+0xd8>)
 8005ee4:	0011      	movs	r1, r2
 8005ee6:	0018      	movs	r0, r3
 8005ee8:	f000 fde0 	bl	8006aac <tcp_pcb_remove>
 8005eec:	4b22      	ldr	r3, [pc, #136]	; (8005f78 <tcp_abandon+0xdc>)
 8005eee:	2201      	movs	r2, #1
 8005ef0:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d004      	beq.n	8005f04 <tcp_abandon+0x68>
      tcp_segs_free(pcb->unacked);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005efe:	0018      	movs	r0, r3
 8005f00:	f000 fbf8 	bl	80066f4 <tcp_segs_free>
    if (pcb->unsent != NULL) {
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d004      	beq.n	8005f16 <tcp_abandon+0x7a>
      tcp_segs_free(pcb->unsent);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f10:	0018      	movs	r0, r3
 8005f12:	f000 fbef 	bl	80066f4 <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d004      	beq.n	8005f28 <tcp_abandon+0x8c>
      tcp_segs_free(pcb->ooseq);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f22:	0018      	movs	r0, r3
 8005f24:	f000 fbe6 	bl	80066f4 <tcp_segs_free>
    if (reset) {
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d00e      	beq.n	8005f4c <tcp_abandon+0xb0>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, pcb->local_port, pcb->remote_port);
 8005f2e:	687c      	ldr	r4, [r7, #4]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	1d1d      	adds	r5, r3, #4
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	8b5b      	ldrh	r3, [r3, #26]
 8005f38:	687a      	ldr	r2, [r7, #4]
 8005f3a:	8b92      	ldrh	r2, [r2, #28]
 8005f3c:	6939      	ldr	r1, [r7, #16]
 8005f3e:	6978      	ldr	r0, [r7, #20]
 8005f40:	9201      	str	r2, [sp, #4]
 8005f42:	9300      	str	r3, [sp, #0]
 8005f44:	002b      	movs	r3, r5
 8005f46:	0022      	movs	r2, r4
 8005f48:	f004 f840 	bl	8009fcc <tcp_rst>
    memp_free(MEMP_TCP_PCB, pcb);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	0019      	movs	r1, r3
 8005f50:	2002      	movs	r0, #2
 8005f52:	f7fe ffe5 	bl	8004f20 <memp_free>
    TCP_EVENT_ERR(errf, errf_arg, ERR_ABRT);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d005      	beq.n	8005f68 <tcp_abandon+0xcc>
 8005f5c:	230a      	movs	r3, #10
 8005f5e:	4259      	negs	r1, r3
 8005f60:	68ba      	ldr	r2, [r7, #8]
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	0010      	movs	r0, r2
 8005f66:	4798      	blx	r3
}
 8005f68:	46c0      	nop			; (mov r8, r8)
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	b006      	add	sp, #24
 8005f6e:	bdb0      	pop	{r4, r5, r7, pc}
 8005f70:	20003288 	.word	0x20003288
 8005f74:	20003274 	.word	0x20003274
 8005f78:	20003270 	.word	0x20003270

08005f7c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b082      	sub	sp, #8
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2101      	movs	r1, #1
 8005f88:	0018      	movs	r0, r3
 8005f8a:	f7ff ff87 	bl	8005e9c <tcp_abandon>
}
 8005f8e:	46c0      	nop			; (mov r8, r8)
 8005f90:	46bd      	mov	sp, r7
 8005f92:	b002      	add	sp, #8
 8005f94:	bd80      	pop	{r7, pc}
	...

08005f98 <tcp_update_rcv_ann_wnd>:
 *
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b084      	sub	sp, #16
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fa4:	687a      	ldr	r2, [r7, #4]
 8005fa6:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8005fa8:	189b      	adds	r3, r3, r2
 8005faa:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fb0:	687a      	ldr	r2, [r7, #4]
 8005fb2:	8ed2      	ldrh	r2, [r2, #54]	; 0x36
 8005fb4:	1c10      	adds	r0, r2, #0
 8005fb6:	b282      	uxth	r2, r0
 8005fb8:	4916      	ldr	r1, [pc, #88]	; (8006014 <tcp_update_rcv_ann_wnd+0x7c>)
 8005fba:	428a      	cmp	r2, r1
 8005fbc:	d901      	bls.n	8005fc2 <tcp_update_rcv_ann_wnd+0x2a>
 8005fbe:	4a15      	ldr	r2, [pc, #84]	; (8006014 <tcp_update_rcv_ann_wnd+0x7c>)
 8005fc0:	1c10      	adds	r0, r2, #0
 8005fc2:	b282      	uxth	r2, r0
 8005fc4:	189b      	adds	r3, r3, r2
 8005fc6:	68fa      	ldr	r2, [r7, #12]
 8005fc8:	1ad3      	subs	r3, r2, r3
 8005fca:	d408      	bmi.n	8005fde <tcp_update_rcv_ann_wnd+0x46>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	85da      	strh	r2, [r3, #46]	; 0x2e
    return new_right_edge - pcb->rcv_ann_right_edge;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fd8:	68fa      	ldr	r2, [r7, #12]
 8005fda:	1ad3      	subs	r3, r2, r3
 8005fdc:	e015      	b.n	800600a <tcp_update_rcv_ann_wnd+0x72>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fe6:	1ad3      	subs	r3, r2, r3
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	dd03      	ble.n	8005ff4 <tcp_update_rcv_ann_wnd+0x5c>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	85da      	strh	r2, [r3, #46]	; 0x2e
 8005ff2:	e009      	b.n	8006008 <tcp_update_rcv_ann_wnd+0x70>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ffc:	1ad3      	subs	r3, r2, r3
 8005ffe:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
      pcb->rcv_ann_wnd = (u16_t)new_rcv_ann_wnd;
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	b29a      	uxth	r2, r3
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	85da      	strh	r2, [r3, #46]	; 0x2e
    }
    return 0;
 8006008:	2300      	movs	r3, #0
  }
}
 800600a:	0018      	movs	r0, r3
 800600c:	46bd      	mov	sp, r7
 800600e:	b004      	add	sp, #16
 8006010:	bd80      	pop	{r7, pc}
 8006012:	46c0      	nop			; (mov r8, r8)
 8006014:	00000b68 	.word	0x00000b68

08006018 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b084      	sub	sp, #16
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
 8006020:	000a      	movs	r2, r1
 8006022:	1cbb      	adds	r3, r7, #2
 8006024:	801a      	strh	r2, [r3, #0]
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
    pcb->state != LISTEN);
  LWIP_ASSERT("tcp_recved: len would wrap rcv_wnd\n",
              len <= 0xffff - pcb->rcv_wnd );

  pcb->rcv_wnd += len;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800602a:	1cbb      	adds	r3, r7, #2
 800602c:	881b      	ldrh	r3, [r3, #0]
 800602e:	18d3      	adds	r3, r2, r3
 8006030:	b29a      	uxth	r2, r3
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	859a      	strh	r2, [r3, #44]	; 0x2c
  if (pcb->rcv_wnd > TCP_WND) {
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800603a:	4a0f      	ldr	r2, [pc, #60]	; (8006078 <tcp_recved+0x60>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d902      	bls.n	8006046 <tcp_recved+0x2e>
    pcb->rcv_wnd = TCP_WND;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	4a0d      	ldr	r2, [pc, #52]	; (8006078 <tcp_recved+0x60>)
 8006044:	859a      	strh	r2, [r3, #44]	; 0x2c
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	0018      	movs	r0, r3
 800604a:	f7ff ffa5 	bl	8005f98 <tcp_update_rcv_ann_wnd>
 800604e:	0003      	movs	r3, r0
 8006050:	60fb      	str	r3, [r7, #12]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	4a09      	ldr	r2, [pc, #36]	; (800607c <tcp_recved+0x64>)
 8006056:	4293      	cmp	r3, r2
 8006058:	dd0a      	ble.n	8006070 <tcp_recved+0x58>
    tcp_ack_now(pcb);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	7f9b      	ldrb	r3, [r3, #30]
 800605e:	2202      	movs	r2, #2
 8006060:	4313      	orrs	r3, r2
 8006062:	b2da      	uxtb	r2, r3
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	779a      	strb	r2, [r3, #30]
    tcp_output(pcb);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	0018      	movs	r0, r3
 800606c:	f003 fcd0 	bl	8009a10 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: recveived %"U16_F" bytes, wnd %"U16_F" (%"U16_F").\n",
         len, pcb->rcv_wnd, TCP_WND - pcb->rcv_wnd));
}
 8006070:	46c0      	nop			; (mov r8, r8)
 8006072:	46bd      	mov	sp, r7
 8006074:	b004      	add	sp, #16
 8006076:	bd80      	pop	{r7, pc}
 8006078:	000016d0 	.word	0x000016d0
 800607c:	000005b3 	.word	0x000005b3

08006080 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8006080:	b5b0      	push	{r4, r5, r7, lr}
 8006082:	b08a      	sub	sp, #40	; 0x28
 8006084:	af02      	add	r7, sp, #8
  u16_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8006086:	2315      	movs	r3, #21
 8006088:	18fb      	adds	r3, r7, r3
 800608a:	2200      	movs	r2, #0
 800608c:	701a      	strb	r2, [r3, #0]

  ++tcp_ticks;
 800608e:	4bc8      	ldr	r3, [pc, #800]	; (80063b0 <tcp_slowtmr+0x330>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	1c5a      	adds	r2, r3, #1
 8006094:	4bc6      	ldr	r3, [pc, #792]	; (80063b0 <tcp_slowtmr+0x330>)
 8006096:	601a      	str	r2, [r3, #0]
  ++tcp_timer_ctr;
 8006098:	4bc6      	ldr	r3, [pc, #792]	; (80063b4 <tcp_slowtmr+0x334>)
 800609a:	781b      	ldrb	r3, [r3, #0]
 800609c:	3301      	adds	r3, #1
 800609e:	b2da      	uxtb	r2, r3
 80060a0:	4bc4      	ldr	r3, [pc, #784]	; (80063b4 <tcp_slowtmr+0x334>)
 80060a2:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 80060a4:	2300      	movs	r3, #0
 80060a6:	61bb      	str	r3, [r7, #24]
  pcb = tcp_active_pcbs;
 80060a8:	4bc3      	ldr	r3, [pc, #780]	; (80063b8 <tcp_slowtmr+0x338>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	61fb      	str	r3, [r7, #28]
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 80060ae:	e206      	b.n	80064be <tcp_slowtmr+0x43e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
    if (pcb->last_timer == tcp_timer_ctr) {
 80060b0:	69fb      	ldr	r3, [r7, #28]
 80060b2:	2221      	movs	r2, #33	; 0x21
 80060b4:	5c9a      	ldrb	r2, [r3, r2]
 80060b6:	4bbf      	ldr	r3, [pc, #764]	; (80063b4 <tcp_slowtmr+0x334>)
 80060b8:	781b      	ldrb	r3, [r3, #0]
 80060ba:	429a      	cmp	r2, r3
 80060bc:	d103      	bne.n	80060c6 <tcp_slowtmr+0x46>
      /* skip this pcb, we have already processed it */
      pcb = pcb->next;
 80060be:	69fb      	ldr	r3, [r7, #28]
 80060c0:	68db      	ldr	r3, [r3, #12]
 80060c2:	61fb      	str	r3, [r7, #28]
      continue;
 80060c4:	e1fb      	b.n	80064be <tcp_slowtmr+0x43e>
    }
    pcb->last_timer = tcp_timer_ctr;
 80060c6:	4bbb      	ldr	r3, [pc, #748]	; (80063b4 <tcp_slowtmr+0x334>)
 80060c8:	7819      	ldrb	r1, [r3, #0]
 80060ca:	69fb      	ldr	r3, [r7, #28]
 80060cc:	2221      	movs	r2, #33	; 0x21
 80060ce:	5499      	strb	r1, [r3, r2]

    pcb_remove = 0;
 80060d0:	2317      	movs	r3, #23
 80060d2:	18fb      	adds	r3, r7, r3
 80060d4:	2200      	movs	r2, #0
 80060d6:	701a      	strb	r2, [r3, #0]
    pcb_reset = 0;
 80060d8:	2316      	movs	r3, #22
 80060da:	18fb      	adds	r3, r7, r3
 80060dc:	2200      	movs	r2, #0
 80060de:	701a      	strb	r2, [r3, #0]

    if (pcb->state == SYN_SENT && pcb->nrtx == TCP_SYNMAXRTX) {
 80060e0:	69fb      	ldr	r3, [r7, #28]
 80060e2:	7e1b      	ldrb	r3, [r3, #24]
 80060e4:	2b02      	cmp	r3, #2
 80060e6:	d10b      	bne.n	8006100 <tcp_slowtmr+0x80>
 80060e8:	69fb      	ldr	r3, [r7, #28]
 80060ea:	2246      	movs	r2, #70	; 0x46
 80060ec:	5c9b      	ldrb	r3, [r3, r2]
 80060ee:	2b06      	cmp	r3, #6
 80060f0:	d106      	bne.n	8006100 <tcp_slowtmr+0x80>
      ++pcb_remove;
 80060f2:	2217      	movs	r2, #23
 80060f4:	18bb      	adds	r3, r7, r2
 80060f6:	18ba      	adds	r2, r7, r2
 80060f8:	7812      	ldrb	r2, [r2, #0]
 80060fa:	3201      	adds	r2, #1
 80060fc:	701a      	strb	r2, [r3, #0]
 80060fe:	e0a1      	b.n	8006244 <tcp_slowtmr+0x1c4>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx == TCP_MAXRTX) {
 8006100:	69fb      	ldr	r3, [r7, #28]
 8006102:	2246      	movs	r2, #70	; 0x46
 8006104:	5c9b      	ldrb	r3, [r3, r2]
 8006106:	2b0c      	cmp	r3, #12
 8006108:	d106      	bne.n	8006118 <tcp_slowtmr+0x98>
      ++pcb_remove;
 800610a:	2217      	movs	r2, #23
 800610c:	18bb      	adds	r3, r7, r2
 800610e:	18ba      	adds	r2, r7, r2
 8006110:	7812      	ldrb	r2, [r2, #0]
 8006112:	3201      	adds	r2, #1
 8006114:	701a      	strb	r2, [r3, #0]
 8006116:	e095      	b.n	8006244 <tcp_slowtmr+0x1c4>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8006118:	69fb      	ldr	r3, [r7, #28]
 800611a:	2295      	movs	r2, #149	; 0x95
 800611c:	5c9b      	ldrb	r3, [r3, r2]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d029      	beq.n	8006176 <tcp_slowtmr+0xf6>
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        pcb->persist_cnt++;
 8006122:	69fb      	ldr	r3, [r7, #28]
 8006124:	2294      	movs	r2, #148	; 0x94
 8006126:	5c9b      	ldrb	r3, [r3, r2]
 8006128:	3301      	adds	r3, #1
 800612a:	b2d9      	uxtb	r1, r3
 800612c:	69fb      	ldr	r3, [r7, #28]
 800612e:	2294      	movs	r2, #148	; 0x94
 8006130:	5499      	strb	r1, [r3, r2]
        if (pcb->persist_cnt >= tcp_persist_backoff[pcb->persist_backoff-1]) {
 8006132:	69fb      	ldr	r3, [r7, #28]
 8006134:	2294      	movs	r2, #148	; 0x94
 8006136:	5c9a      	ldrb	r2, [r3, r2]
 8006138:	69fb      	ldr	r3, [r7, #28]
 800613a:	2195      	movs	r1, #149	; 0x95
 800613c:	5c5b      	ldrb	r3, [r3, r1]
 800613e:	3b01      	subs	r3, #1
 8006140:	499e      	ldr	r1, [pc, #632]	; (80063bc <tcp_slowtmr+0x33c>)
 8006142:	5ccb      	ldrb	r3, [r1, r3]
 8006144:	429a      	cmp	r2, r3
 8006146:	d200      	bcs.n	800614a <tcp_slowtmr+0xca>
 8006148:	e07c      	b.n	8006244 <tcp_slowtmr+0x1c4>
          pcb->persist_cnt = 0;
 800614a:	69fb      	ldr	r3, [r7, #28]
 800614c:	2294      	movs	r2, #148	; 0x94
 800614e:	2100      	movs	r1, #0
 8006150:	5499      	strb	r1, [r3, r2]
          if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8006152:	69fb      	ldr	r3, [r7, #28]
 8006154:	2295      	movs	r2, #149	; 0x95
 8006156:	5c9b      	ldrb	r3, [r3, r2]
 8006158:	2b06      	cmp	r3, #6
 800615a:	d807      	bhi.n	800616c <tcp_slowtmr+0xec>
            pcb->persist_backoff++;
 800615c:	69fb      	ldr	r3, [r7, #28]
 800615e:	2295      	movs	r2, #149	; 0x95
 8006160:	5c9b      	ldrb	r3, [r3, r2]
 8006162:	3301      	adds	r3, #1
 8006164:	b2d9      	uxtb	r1, r3
 8006166:	69fb      	ldr	r3, [r7, #28]
 8006168:	2295      	movs	r2, #149	; 0x95
 800616a:	5499      	strb	r1, [r3, r2]
          }
          tcp_zero_window_probe(pcb);
 800616c:	69fb      	ldr	r3, [r7, #28]
 800616e:	0018      	movs	r0, r3
 8006170:	f004 f98c 	bl	800a48c <tcp_zero_window_probe>
 8006174:	e066      	b.n	8006244 <tcp_slowtmr+0x1c4>
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if(pcb->rtime >= 0) {
 8006176:	69fb      	ldr	r3, [r7, #28]
 8006178:	2234      	movs	r2, #52	; 0x34
 800617a:	5e9b      	ldrsh	r3, [r3, r2]
 800617c:	2b00      	cmp	r3, #0
 800617e:	db08      	blt.n	8006192 <tcp_slowtmr+0x112>
          ++pcb->rtime;
 8006180:	69fb      	ldr	r3, [r7, #28]
 8006182:	2234      	movs	r2, #52	; 0x34
 8006184:	5e9b      	ldrsh	r3, [r3, r2]
 8006186:	b29b      	uxth	r3, r3
 8006188:	3301      	adds	r3, #1
 800618a:	b29b      	uxth	r3, r3
 800618c:	b21a      	sxth	r2, r3
 800618e:	69fb      	ldr	r3, [r7, #28]
 8006190:	869a      	strh	r2, [r3, #52]	; 0x34
        }

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 8006192:	69fb      	ldr	r3, [r7, #28]
 8006194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006196:	2b00      	cmp	r3, #0
 8006198:	d054      	beq.n	8006244 <tcp_slowtmr+0x1c4>
 800619a:	69fb      	ldr	r3, [r7, #28]
 800619c:	2234      	movs	r2, #52	; 0x34
 800619e:	5e9a      	ldrsh	r2, [r3, r2]
 80061a0:	69fb      	ldr	r3, [r7, #28]
 80061a2:	2144      	movs	r1, #68	; 0x44
 80061a4:	5e5b      	ldrsh	r3, [r3, r1]
 80061a6:	429a      	cmp	r2, r3
 80061a8:	db4c      	blt.n	8006244 <tcp_slowtmr+0x1c4>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
 80061aa:	69fb      	ldr	r3, [r7, #28]
 80061ac:	7e1b      	ldrb	r3, [r3, #24]
 80061ae:	2b02      	cmp	r3, #2
 80061b0:	d014      	beq.n	80061dc <tcp_slowtmr+0x15c>
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[pcb->nrtx];
 80061b2:	69fb      	ldr	r3, [r7, #28]
 80061b4:	2240      	movs	r2, #64	; 0x40
 80061b6:	5e9b      	ldrsh	r3, [r3, r2]
 80061b8:	10db      	asrs	r3, r3, #3
 80061ba:	b21b      	sxth	r3, r3
 80061bc:	0019      	movs	r1, r3
 80061be:	69fb      	ldr	r3, [r7, #28]
 80061c0:	2242      	movs	r2, #66	; 0x42
 80061c2:	5e9b      	ldrsh	r3, [r3, r2]
 80061c4:	18cb      	adds	r3, r1, r3
 80061c6:	69fa      	ldr	r2, [r7, #28]
 80061c8:	2146      	movs	r1, #70	; 0x46
 80061ca:	5c52      	ldrb	r2, [r2, r1]
 80061cc:	0011      	movs	r1, r2
 80061ce:	4a7c      	ldr	r2, [pc, #496]	; (80063c0 <tcp_slowtmr+0x340>)
 80061d0:	5c52      	ldrb	r2, [r2, r1]
 80061d2:	4093      	lsls	r3, r2
 80061d4:	b219      	sxth	r1, r3
 80061d6:	69fb      	ldr	r3, [r7, #28]
 80061d8:	2244      	movs	r2, #68	; 0x44
 80061da:	5299      	strh	r1, [r3, r2]
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
 80061dc:	69fb      	ldr	r3, [r7, #28]
 80061de:	2200      	movs	r2, #0
 80061e0:	869a      	strh	r2, [r3, #52]	; 0x34

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80061e2:	69fb      	ldr	r3, [r7, #28]
 80061e4:	2260      	movs	r2, #96	; 0x60
 80061e6:	5a99      	ldrh	r1, [r3, r2]
 80061e8:	69fb      	ldr	r3, [r7, #28]
 80061ea:	224c      	movs	r2, #76	; 0x4c
 80061ec:	5a9b      	ldrh	r3, [r3, r2]
 80061ee:	220e      	movs	r2, #14
 80061f0:	18ba      	adds	r2, r7, r2
 80061f2:	1c1c      	adds	r4, r3, #0
 80061f4:	1c0b      	adds	r3, r1, #0
 80061f6:	b298      	uxth	r0, r3
 80061f8:	b2a1      	uxth	r1, r4
 80061fa:	4288      	cmp	r0, r1
 80061fc:	d900      	bls.n	8006200 <tcp_slowtmr+0x180>
 80061fe:	1c23      	adds	r3, r4, #0
 8006200:	8013      	strh	r3, [r2, #0]
          pcb->ssthresh = eff_wnd >> 1;
 8006202:	230e      	movs	r3, #14
 8006204:	18fb      	adds	r3, r7, r3
 8006206:	881b      	ldrh	r3, [r3, #0]
 8006208:	085b      	lsrs	r3, r3, #1
 800620a:	b299      	uxth	r1, r3
 800620c:	69fb      	ldr	r3, [r7, #28]
 800620e:	224e      	movs	r2, #78	; 0x4e
 8006210:	5299      	strh	r1, [r3, r2]
          if (pcb->ssthresh < (pcb->mss << 1)) {
 8006212:	69fb      	ldr	r3, [r7, #28]
 8006214:	224e      	movs	r2, #78	; 0x4e
 8006216:	5a9b      	ldrh	r3, [r3, r2]
 8006218:	001a      	movs	r2, r3
 800621a:	69fb      	ldr	r3, [r7, #28]
 800621c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800621e:	005b      	lsls	r3, r3, #1
 8006220:	429a      	cmp	r2, r3
 8006222:	da06      	bge.n	8006232 <tcp_slowtmr+0x1b2>
            pcb->ssthresh = (pcb->mss << 1);
 8006224:	69fb      	ldr	r3, [r7, #28]
 8006226:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006228:	18db      	adds	r3, r3, r3
 800622a:	b299      	uxth	r1, r3
 800622c:	69fb      	ldr	r3, [r7, #28]
 800622e:	224e      	movs	r2, #78	; 0x4e
 8006230:	5299      	strh	r1, [r3, r2]
          }
          pcb->cwnd = pcb->mss;
 8006232:	69fb      	ldr	r3, [r7, #28]
 8006234:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
 8006236:	69fb      	ldr	r3, [r7, #28]
 8006238:	224c      	movs	r2, #76	; 0x4c
 800623a:	5299      	strh	r1, [r3, r2]
                                       " ssthresh %"U16_F"\n",
                                       pcb->cwnd, pcb->ssthresh));
 
          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
 800623c:	69fb      	ldr	r3, [r7, #28]
 800623e:	0018      	movs	r0, r3
 8006240:	f003 ffe8 	bl	800a214 <tcp_rexmit_rto>
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8006244:	69fb      	ldr	r3, [r7, #28]
 8006246:	7e1b      	ldrb	r3, [r3, #24]
 8006248:	2b06      	cmp	r3, #6
 800624a:	d112      	bne.n	8006272 <tcp_slowtmr+0x1f2>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800624c:	69fb      	ldr	r3, [r7, #28]
 800624e:	7f9b      	ldrb	r3, [r3, #30]
 8006250:	001a      	movs	r2, r3
 8006252:	2310      	movs	r3, #16
 8006254:	4013      	ands	r3, r2
 8006256:	d00c      	beq.n	8006272 <tcp_slowtmr+0x1f2>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006258:	4b55      	ldr	r3, [pc, #340]	; (80063b0 <tcp_slowtmr+0x330>)
 800625a:	681a      	ldr	r2, [r3, #0]
 800625c:	69fb      	ldr	r3, [r7, #28]
 800625e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006260:	1ad3      	subs	r3, r2, r3
 8006262:	2b28      	cmp	r3, #40	; 0x28
 8006264:	d905      	bls.n	8006272 <tcp_slowtmr+0x1f2>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8006266:	2217      	movs	r2, #23
 8006268:	18bb      	adds	r3, r7, r2
 800626a:	18ba      	adds	r2, r7, r2
 800626c:	7812      	ldrb	r2, [r2, #0]
 800626e:	3201      	adds	r2, #1
 8006270:	701a      	strb	r2, [r3, #0]
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if(ip_get_option(pcb, SOF_KEEPALIVE) &&
 8006272:	69fb      	ldr	r3, [r7, #28]
 8006274:	7a1b      	ldrb	r3, [r3, #8]
 8006276:	001a      	movs	r2, r3
 8006278:	2308      	movs	r3, #8
 800627a:	4013      	ands	r3, r2
 800627c:	d049      	beq.n	8006312 <tcp_slowtmr+0x292>
       ((pcb->state == ESTABLISHED) ||
 800627e:	69fb      	ldr	r3, [r7, #28]
 8006280:	7e1b      	ldrb	r3, [r3, #24]
    if(ip_get_option(pcb, SOF_KEEPALIVE) &&
 8006282:	2b04      	cmp	r3, #4
 8006284:	d003      	beq.n	800628e <tcp_slowtmr+0x20e>
        (pcb->state == CLOSE_WAIT))) {
 8006286:	69fb      	ldr	r3, [r7, #28]
 8006288:	7e1b      	ldrb	r3, [r3, #24]
       ((pcb->state == ESTABLISHED) ||
 800628a:	2b07      	cmp	r3, #7
 800628c:	d141      	bne.n	8006312 <tcp_slowtmr+0x292>
      if((u32_t)(tcp_ticks - pcb->tmr) >
 800628e:	4b48      	ldr	r3, [pc, #288]	; (80063b0 <tcp_slowtmr+0x330>)
 8006290:	681a      	ldr	r2, [r3, #0]
 8006292:	69fb      	ldr	r3, [r7, #28]
 8006294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006296:	1ad4      	subs	r4, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 8006298:	69fb      	ldr	r3, [r7, #28]
 800629a:	2290      	movs	r2, #144	; 0x90
 800629c:	589b      	ldr	r3, [r3, r2]
 800629e:	4a49      	ldr	r2, [pc, #292]	; (80063c4 <tcp_slowtmr+0x344>)
 80062a0:	189a      	adds	r2, r3, r2
 80062a2:	23fa      	movs	r3, #250	; 0xfa
 80062a4:	0059      	lsls	r1, r3, #1
 80062a6:	0010      	movs	r0, r2
 80062a8:	f7f9 ff40 	bl	800012c <__udivsi3>
 80062ac:	0003      	movs	r3, r0
      if((u32_t)(tcp_ticks - pcb->tmr) >
 80062ae:	429c      	cmp	r4, r3
 80062b0:	d90c      	bls.n	80062cc <tcp_slowtmr+0x24c>
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to %"U16_F".%"U16_F".%"U16_F".%"U16_F".\n",
                                ip4_addr1_16(&pcb->remote_ip), ip4_addr2_16(&pcb->remote_ip),
                                ip4_addr3_16(&pcb->remote_ip), ip4_addr4_16(&pcb->remote_ip)));
        
        ++pcb_remove;
 80062b2:	2217      	movs	r2, #23
 80062b4:	18bb      	adds	r3, r7, r2
 80062b6:	18ba      	adds	r2, r7, r2
 80062b8:	7812      	ldrb	r2, [r2, #0]
 80062ba:	3201      	adds	r2, #1
 80062bc:	701a      	strb	r2, [r3, #0]
        ++pcb_reset;
 80062be:	2216      	movs	r2, #22
 80062c0:	18bb      	adds	r3, r7, r2
 80062c2:	18ba      	adds	r2, r7, r2
 80062c4:	7812      	ldrb	r2, [r2, #0]
 80062c6:	3201      	adds	r2, #1
 80062c8:	701a      	strb	r2, [r3, #0]
 80062ca:	e022      	b.n	8006312 <tcp_slowtmr+0x292>
      }
      else if((u32_t)(tcp_ticks - pcb->tmr) > 
 80062cc:	4b38      	ldr	r3, [pc, #224]	; (80063b0 <tcp_slowtmr+0x330>)
 80062ce:	681a      	ldr	r2, [r3, #0]
 80062d0:	69fb      	ldr	r3, [r7, #28]
 80062d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d4:	1ad4      	subs	r4, r2, r3
              (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80062d6:	69fb      	ldr	r3, [r7, #28]
 80062d8:	2290      	movs	r2, #144	; 0x90
 80062da:	589a      	ldr	r2, [r3, r2]
 80062dc:	69fb      	ldr	r3, [r7, #28]
 80062de:	2196      	movs	r1, #150	; 0x96
 80062e0:	5c5b      	ldrb	r3, [r3, r1]
 80062e2:	0019      	movs	r1, r3
 80062e4:	4b38      	ldr	r3, [pc, #224]	; (80063c8 <tcp_slowtmr+0x348>)
 80062e6:	434b      	muls	r3, r1
 80062e8:	18d2      	adds	r2, r2, r3
              / TCP_SLOW_INTERVAL)
 80062ea:	23fa      	movs	r3, #250	; 0xfa
 80062ec:	0059      	lsls	r1, r3, #1
 80062ee:	0010      	movs	r0, r2
 80062f0:	f7f9 ff1c 	bl	800012c <__udivsi3>
 80062f4:	0003      	movs	r3, r0
      else if((u32_t)(tcp_ticks - pcb->tmr) > 
 80062f6:	429c      	cmp	r4, r3
 80062f8:	d90b      	bls.n	8006312 <tcp_slowtmr+0x292>
      {
        tcp_keepalive(pcb);
 80062fa:	69fb      	ldr	r3, [r7, #28]
 80062fc:	0018      	movs	r0, r3
 80062fe:	f004 f86d 	bl	800a3dc <tcp_keepalive>
        pcb->keep_cnt_sent++;
 8006302:	69fb      	ldr	r3, [r7, #28]
 8006304:	2296      	movs	r2, #150	; 0x96
 8006306:	5c9b      	ldrb	r3, [r3, r2]
 8006308:	3301      	adds	r3, #1
 800630a:	b2d9      	uxtb	r1, r3
 800630c:	69fb      	ldr	r3, [r7, #28]
 800630e:	2296      	movs	r2, #150	; 0x96
 8006310:	5499      	strb	r1, [r3, r2]

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8006312:	69fb      	ldr	r3, [r7, #28]
 8006314:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006316:	2b00      	cmp	r3, #0
 8006318:	d016      	beq.n	8006348 <tcp_slowtmr+0x2c8>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 800631a:	4b25      	ldr	r3, [pc, #148]	; (80063b0 <tcp_slowtmr+0x330>)
 800631c:	681a      	ldr	r2, [r3, #0]
 800631e:	69fb      	ldr	r3, [r7, #28]
 8006320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006322:	1ad2      	subs	r2, r2, r3
 8006324:	69fb      	ldr	r3, [r7, #28]
 8006326:	2144      	movs	r1, #68	; 0x44
 8006328:	5e5b      	ldrsh	r3, [r3, r1]
 800632a:	0019      	movs	r1, r3
 800632c:	000b      	movs	r3, r1
 800632e:	005b      	lsls	r3, r3, #1
 8006330:	185b      	adds	r3, r3, r1
 8006332:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8006334:	429a      	cmp	r2, r3
 8006336:	d307      	bcc.n	8006348 <tcp_slowtmr+0x2c8>
      tcp_segs_free(pcb->ooseq);
 8006338:	69fb      	ldr	r3, [r7, #28]
 800633a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800633c:	0018      	movs	r0, r3
 800633e:	f000 f9d9 	bl	80066f4 <tcp_segs_free>
      pcb->ooseq = NULL;
 8006342:	69fb      	ldr	r3, [r7, #28]
 8006344:	2200      	movs	r2, #0
 8006346:	675a      	str	r2, [r3, #116]	; 0x74
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8006348:	69fb      	ldr	r3, [r7, #28]
 800634a:	7e1b      	ldrb	r3, [r3, #24]
 800634c:	2b03      	cmp	r3, #3
 800634e:	d10c      	bne.n	800636a <tcp_slowtmr+0x2ea>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006350:	4b17      	ldr	r3, [pc, #92]	; (80063b0 <tcp_slowtmr+0x330>)
 8006352:	681a      	ldr	r2, [r3, #0]
 8006354:	69fb      	ldr	r3, [r7, #28]
 8006356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006358:	1ad3      	subs	r3, r2, r3
 800635a:	2b28      	cmp	r3, #40	; 0x28
 800635c:	d905      	bls.n	800636a <tcp_slowtmr+0x2ea>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800635e:	2217      	movs	r2, #23
 8006360:	18bb      	adds	r3, r7, r2
 8006362:	18ba      	adds	r2, r7, r2
 8006364:	7812      	ldrb	r2, [r2, #0]
 8006366:	3201      	adds	r2, #1
 8006368:	701a      	strb	r2, [r3, #0]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800636a:	69fb      	ldr	r3, [r7, #28]
 800636c:	7e1b      	ldrb	r3, [r3, #24]
 800636e:	2b09      	cmp	r3, #9
 8006370:	d10c      	bne.n	800638c <tcp_slowtmr+0x30c>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8006372:	4b0f      	ldr	r3, [pc, #60]	; (80063b0 <tcp_slowtmr+0x330>)
 8006374:	681a      	ldr	r2, [r3, #0]
 8006376:	69fb      	ldr	r3, [r7, #28]
 8006378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800637a:	1ad3      	subs	r3, r2, r3
 800637c:	2bf0      	cmp	r3, #240	; 0xf0
 800637e:	d905      	bls.n	800638c <tcp_slowtmr+0x30c>
        ++pcb_remove;
 8006380:	2217      	movs	r2, #23
 8006382:	18bb      	adds	r3, r7, r2
 8006384:	18ba      	adds	r2, r7, r2
 8006386:	7812      	ldrb	r2, [r2, #0]
 8006388:	3201      	adds	r2, #1
 800638a:	701a      	strb	r2, [r3, #0]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800638c:	2317      	movs	r3, #23
 800638e:	18fb      	adds	r3, r7, r3
 8006390:	781b      	ldrb	r3, [r3, #0]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d056      	beq.n	8006444 <tcp_slowtmr+0x3c4>
      struct tcp_pcb *pcb2;
      tcp_err_fn err_fn;
      void *err_arg;
      tcp_pcb_purge(pcb);
 8006396:	69fb      	ldr	r3, [r7, #28]
 8006398:	0018      	movs	r0, r3
 800639a:	f000 fb45 	bl	8006a28 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800639e:	69bb      	ldr	r3, [r7, #24]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d013      	beq.n	80063cc <tcp_slowtmr+0x34c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
        prev->next = pcb->next;
 80063a4:	69fb      	ldr	r3, [r7, #28]
 80063a6:	68da      	ldr	r2, [r3, #12]
 80063a8:	69bb      	ldr	r3, [r7, #24]
 80063aa:	60da      	str	r2, [r3, #12]
 80063ac:	e012      	b.n	80063d4 <tcp_slowtmr+0x354>
 80063ae:	46c0      	nop			; (mov r8, r8)
 80063b0:	20003278 	.word	0x20003278
 80063b4:	20002279 	.word	0x20002279
 80063b8:	20003274 	.word	0x20003274
 80063bc:	0800fd70 	.word	0x0800fd70
 80063c0:	0800fd60 	.word	0x0800fd60
 80063c4:	000a4cb8 	.word	0x000a4cb8
 80063c8:	000124f8 	.word	0x000124f8
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
        tcp_active_pcbs = pcb->next;
 80063cc:	69fb      	ldr	r3, [r7, #28]
 80063ce:	68da      	ldr	r2, [r3, #12]
 80063d0:	4b5e      	ldr	r3, [pc, #376]	; (800654c <tcp_slowtmr+0x4cc>)
 80063d2:	601a      	str	r2, [r3, #0]
      }

      if (pcb_reset) {
 80063d4:	2316      	movs	r3, #22
 80063d6:	18fb      	adds	r3, r7, r3
 80063d8:	781b      	ldrb	r3, [r3, #0]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d010      	beq.n	8006400 <tcp_slowtmr+0x380>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80063de:	69fb      	ldr	r3, [r7, #28]
 80063e0:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80063e2:	69fb      	ldr	r3, [r7, #28]
 80063e4:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80063e6:	69fc      	ldr	r4, [r7, #28]
 80063e8:	69fb      	ldr	r3, [r7, #28]
 80063ea:	1d1d      	adds	r5, r3, #4
 80063ec:	69fb      	ldr	r3, [r7, #28]
 80063ee:	8b5b      	ldrh	r3, [r3, #26]
 80063f0:	69fa      	ldr	r2, [r7, #28]
 80063f2:	8b92      	ldrh	r2, [r2, #28]
 80063f4:	9201      	str	r2, [sp, #4]
 80063f6:	9300      	str	r3, [sp, #0]
 80063f8:	002b      	movs	r3, r5
 80063fa:	0022      	movs	r2, r4
 80063fc:	f003 fde6 	bl	8009fcc <tcp_rst>
          pcb->local_port, pcb->remote_port);
      }

      err_fn = pcb->errf;
 8006400:	69fb      	ldr	r3, [r7, #28]
 8006402:	228c      	movs	r2, #140	; 0x8c
 8006404:	589b      	ldr	r3, [r3, r2]
 8006406:	60bb      	str	r3, [r7, #8]
      err_arg = pcb->callback_arg;
 8006408:	69fb      	ldr	r3, [r7, #28]
 800640a:	691b      	ldr	r3, [r3, #16]
 800640c:	607b      	str	r3, [r7, #4]
      pcb2 = pcb;
 800640e:	69fb      	ldr	r3, [r7, #28]
 8006410:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8006412:	69fb      	ldr	r3, [r7, #28]
 8006414:	68db      	ldr	r3, [r3, #12]
 8006416:	61fb      	str	r3, [r7, #28]
      memp_free(MEMP_TCP_PCB, pcb2);
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	0019      	movs	r1, r3
 800641c:	2002      	movs	r0, #2
 800641e:	f7fe fd7f 	bl	8004f20 <memp_free>

      tcp_active_pcbs_changed = 0;
 8006422:	4b4b      	ldr	r3, [pc, #300]	; (8006550 <tcp_slowtmr+0x4d0>)
 8006424:	2200      	movs	r2, #0
 8006426:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(err_fn, err_arg, ERR_ABRT);
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d005      	beq.n	800643a <tcp_slowtmr+0x3ba>
 800642e:	230a      	movs	r3, #10
 8006430:	4259      	negs	r1, r3
 8006432:	687a      	ldr	r2, [r7, #4]
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	0010      	movs	r0, r2
 8006438:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800643a:	4b45      	ldr	r3, [pc, #276]	; (8006550 <tcp_slowtmr+0x4d0>)
 800643c:	781b      	ldrb	r3, [r3, #0]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d03d      	beq.n	80064be <tcp_slowtmr+0x43e>
        goto tcp_slowtmr_start;
 8006442:	e62f      	b.n	80060a4 <tcp_slowtmr+0x24>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8006444:	69fb      	ldr	r3, [r7, #28]
 8006446:	61bb      	str	r3, [r7, #24]
      pcb = pcb->next;
 8006448:	69fb      	ldr	r3, [r7, #28]
 800644a:	68db      	ldr	r3, [r3, #12]
 800644c:	61fb      	str	r3, [r7, #28]

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800644e:	69bb      	ldr	r3, [r7, #24]
 8006450:	7fdb      	ldrb	r3, [r3, #31]
 8006452:	3301      	adds	r3, #1
 8006454:	b2da      	uxtb	r2, r3
 8006456:	69bb      	ldr	r3, [r7, #24]
 8006458:	77da      	strb	r2, [r3, #31]
      if (prev->polltmr >= prev->pollinterval) {
 800645a:	69bb      	ldr	r3, [r7, #24]
 800645c:	7fda      	ldrb	r2, [r3, #31]
 800645e:	69bb      	ldr	r3, [r7, #24]
 8006460:	2120      	movs	r1, #32
 8006462:	5c5b      	ldrb	r3, [r3, r1]
 8006464:	429a      	cmp	r2, r3
 8006466:	d32a      	bcc.n	80064be <tcp_slowtmr+0x43e>
        prev->polltmr = 0;
 8006468:	69bb      	ldr	r3, [r7, #24]
 800646a:	2200      	movs	r2, #0
 800646c:	77da      	strb	r2, [r3, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800646e:	4b38      	ldr	r3, [pc, #224]	; (8006550 <tcp_slowtmr+0x4d0>)
 8006470:	2200      	movs	r2, #0
 8006472:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8006474:	69bb      	ldr	r3, [r7, #24]
 8006476:	2288      	movs	r2, #136	; 0x88
 8006478:	589b      	ldr	r3, [r3, r2]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d00c      	beq.n	8006498 <tcp_slowtmr+0x418>
 800647e:	69bb      	ldr	r3, [r7, #24]
 8006480:	2288      	movs	r2, #136	; 0x88
 8006482:	589a      	ldr	r2, [r3, r2]
 8006484:	69bb      	ldr	r3, [r7, #24]
 8006486:	691b      	ldr	r3, [r3, #16]
 8006488:	2115      	movs	r1, #21
 800648a:	187c      	adds	r4, r7, r1
 800648c:	69b9      	ldr	r1, [r7, #24]
 800648e:	0018      	movs	r0, r3
 8006490:	4790      	blx	r2
 8006492:	0003      	movs	r3, r0
 8006494:	7023      	strb	r3, [r4, #0]
 8006496:	e003      	b.n	80064a0 <tcp_slowtmr+0x420>
 8006498:	2315      	movs	r3, #21
 800649a:	18fb      	adds	r3, r7, r3
 800649c:	2200      	movs	r2, #0
 800649e:	701a      	strb	r2, [r3, #0]
        if (tcp_active_pcbs_changed) {
 80064a0:	4b2b      	ldr	r3, [pc, #172]	; (8006550 <tcp_slowtmr+0x4d0>)
 80064a2:	781b      	ldrb	r3, [r3, #0]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d000      	beq.n	80064aa <tcp_slowtmr+0x42a>
          goto tcp_slowtmr_start;
 80064a8:	e5fc      	b.n	80060a4 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80064aa:	2315      	movs	r3, #21
 80064ac:	18fb      	adds	r3, r7, r3
 80064ae:	781b      	ldrb	r3, [r3, #0]
 80064b0:	b25b      	sxtb	r3, r3
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d103      	bne.n	80064be <tcp_slowtmr+0x43e>
          tcp_output(prev);
 80064b6:	69bb      	ldr	r3, [r7, #24]
 80064b8:	0018      	movs	r0, r3
 80064ba:	f003 faa9 	bl	8009a10 <tcp_output>
  while (pcb != NULL) {
 80064be:	69fb      	ldr	r3, [r7, #28]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d000      	beq.n	80064c6 <tcp_slowtmr+0x446>
 80064c4:	e5f4      	b.n	80060b0 <tcp_slowtmr+0x30>
    }
  }

  
  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80064c6:	2300      	movs	r3, #0
 80064c8:	61bb      	str	r3, [r7, #24]
  pcb = tcp_tw_pcbs;
 80064ca:	4b22      	ldr	r3, [pc, #136]	; (8006554 <tcp_slowtmr+0x4d4>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	61fb      	str	r3, [r7, #28]
  while (pcb != NULL) {
 80064d0:	e035      	b.n	800653e <tcp_slowtmr+0x4be>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
    pcb_remove = 0;
 80064d2:	2317      	movs	r3, #23
 80064d4:	18fb      	adds	r3, r7, r3
 80064d6:	2200      	movs	r2, #0
 80064d8:	701a      	strb	r2, [r3, #0]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80064da:	4b1f      	ldr	r3, [pc, #124]	; (8006558 <tcp_slowtmr+0x4d8>)
 80064dc:	681a      	ldr	r2, [r3, #0]
 80064de:	69fb      	ldr	r3, [r7, #28]
 80064e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e2:	1ad3      	subs	r3, r2, r3
 80064e4:	2bf0      	cmp	r3, #240	; 0xf0
 80064e6:	d905      	bls.n	80064f4 <tcp_slowtmr+0x474>
      ++pcb_remove;
 80064e8:	2217      	movs	r2, #23
 80064ea:	18bb      	adds	r3, r7, r2
 80064ec:	18ba      	adds	r2, r7, r2
 80064ee:	7812      	ldrb	r2, [r2, #0]
 80064f0:	3201      	adds	r2, #1
 80064f2:	701a      	strb	r2, [r3, #0]
    }
    


    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80064f4:	2317      	movs	r3, #23
 80064f6:	18fb      	adds	r3, r7, r3
 80064f8:	781b      	ldrb	r3, [r3, #0]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d01a      	beq.n	8006534 <tcp_slowtmr+0x4b4>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80064fe:	69fb      	ldr	r3, [r7, #28]
 8006500:	0018      	movs	r0, r3
 8006502:	f000 fa91 	bl	8006a28 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8006506:	69bb      	ldr	r3, [r7, #24]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d004      	beq.n	8006516 <tcp_slowtmr+0x496>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
        prev->next = pcb->next;
 800650c:	69fb      	ldr	r3, [r7, #28]
 800650e:	68da      	ldr	r2, [r3, #12]
 8006510:	69bb      	ldr	r3, [r7, #24]
 8006512:	60da      	str	r2, [r3, #12]
 8006514:	e003      	b.n	800651e <tcp_slowtmr+0x49e>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
        tcp_tw_pcbs = pcb->next;
 8006516:	69fb      	ldr	r3, [r7, #28]
 8006518:	68da      	ldr	r2, [r3, #12]
 800651a:	4b0e      	ldr	r3, [pc, #56]	; (8006554 <tcp_slowtmr+0x4d4>)
 800651c:	601a      	str	r2, [r3, #0]
      }
      pcb2 = pcb;
 800651e:	69fb      	ldr	r3, [r7, #28]
 8006520:	613b      	str	r3, [r7, #16]
      pcb = pcb->next;
 8006522:	69fb      	ldr	r3, [r7, #28]
 8006524:	68db      	ldr	r3, [r3, #12]
 8006526:	61fb      	str	r3, [r7, #28]
      memp_free(MEMP_TCP_PCB, pcb2);
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	0019      	movs	r1, r3
 800652c:	2002      	movs	r0, #2
 800652e:	f7fe fcf7 	bl	8004f20 <memp_free>
 8006532:	e004      	b.n	800653e <tcp_slowtmr+0x4be>
    } else {
      prev = pcb;
 8006534:	69fb      	ldr	r3, [r7, #28]
 8006536:	61bb      	str	r3, [r7, #24]
      pcb = pcb->next;
 8006538:	69fb      	ldr	r3, [r7, #28]
 800653a:	68db      	ldr	r3, [r3, #12]
 800653c:	61fb      	str	r3, [r7, #28]
  while (pcb != NULL) {
 800653e:	69fb      	ldr	r3, [r7, #28]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d1c6      	bne.n	80064d2 <tcp_slowtmr+0x452>
    }
  }
}
 8006544:	46c0      	nop			; (mov r8, r8)
 8006546:	46bd      	mov	sp, r7
 8006548:	b008      	add	sp, #32
 800654a:	bdb0      	pop	{r4, r5, r7, pc}
 800654c:	20003274 	.word	0x20003274
 8006550:	20003270 	.word	0x20003270
 8006554:	20003288 	.word	0x20003288
 8006558:	20003278 	.word	0x20003278

0800655c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b082      	sub	sp, #8
 8006560:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8006562:	4b25      	ldr	r3, [pc, #148]	; (80065f8 <tcp_fasttmr+0x9c>)
 8006564:	781b      	ldrb	r3, [r3, #0]
 8006566:	3301      	adds	r3, #1
 8006568:	b2da      	uxtb	r2, r3
 800656a:	4b23      	ldr	r3, [pc, #140]	; (80065f8 <tcp_fasttmr+0x9c>)
 800656c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800656e:	4b23      	ldr	r3, [pc, #140]	; (80065fc <tcp_fasttmr+0xa0>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	607b      	str	r3, [r7, #4]

  while(pcb != NULL) {
 8006574:	e038      	b.n	80065e8 <tcp_fasttmr+0x8c>
    if (pcb->last_timer != tcp_timer_ctr) {
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2221      	movs	r2, #33	; 0x21
 800657a:	5c9a      	ldrb	r2, [r3, r2]
 800657c:	4b1e      	ldr	r3, [pc, #120]	; (80065f8 <tcp_fasttmr+0x9c>)
 800657e:	781b      	ldrb	r3, [r3, #0]
 8006580:	429a      	cmp	r2, r3
 8006582:	d031      	beq.n	80065e8 <tcp_fasttmr+0x8c>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8006584:	4b1c      	ldr	r3, [pc, #112]	; (80065f8 <tcp_fasttmr+0x9c>)
 8006586:	7819      	ldrb	r1, [r3, #0]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2221      	movs	r2, #33	; 0x21
 800658c:	5499      	strb	r1, [r3, r2]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	7f9b      	ldrb	r3, [r3, #30]
 8006592:	001a      	movs	r2, r3
 8006594:	2301      	movs	r3, #1
 8006596:	4013      	ands	r3, r2
 8006598:	d011      	beq.n	80065be <tcp_fasttmr+0x62>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	7f9b      	ldrb	r3, [r3, #30]
 800659e:	2202      	movs	r2, #2
 80065a0:	4313      	orrs	r3, r2
 80065a2:	b2da      	uxtb	r2, r3
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	779a      	strb	r2, [r3, #30]
        tcp_output(pcb);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	0018      	movs	r0, r3
 80065ac:	f003 fa30 	bl	8009a10 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	7f9b      	ldrb	r3, [r3, #30]
 80065b4:	2203      	movs	r2, #3
 80065b6:	4393      	bics	r3, r2
 80065b8:	b2da      	uxtb	r2, r3
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	779a      	strb	r2, [r3, #30]
      }

      next = pcb->next;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	68db      	ldr	r3, [r3, #12]
 80065c2:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d00b      	beq.n	80065e4 <tcp_fasttmr+0x88>
        tcp_active_pcbs_changed = 0;
 80065cc:	4b0c      	ldr	r3, [pc, #48]	; (8006600 <tcp_fasttmr+0xa4>)
 80065ce:	2200      	movs	r2, #0
 80065d0:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	0018      	movs	r0, r3
 80065d6:	f000 f815 	bl	8006604 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80065da:	4b09      	ldr	r3, [pc, #36]	; (8006600 <tcp_fasttmr+0xa4>)
 80065dc:	781b      	ldrb	r3, [r3, #0]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d000      	beq.n	80065e4 <tcp_fasttmr+0x88>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80065e2:	e7c4      	b.n	800656e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	607b      	str	r3, [r7, #4]
  while(pcb != NULL) {
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d1c3      	bne.n	8006576 <tcp_fasttmr+0x1a>
    }
  }
}
 80065ee:	46c0      	nop			; (mov r8, r8)
 80065f0:	46bd      	mov	sp, r7
 80065f2:	b002      	add	sp, #8
 80065f4:	bd80      	pop	{r7, pc}
 80065f6:	46c0      	nop			; (mov r8, r8)
 80065f8:	20002279 	.word	0x20002279
 80065fc:	20003274 	.word	0x20003274
 8006600:	20003270 	.word	0x20003270

08006604 <tcp_process_refused_data>:

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8006604:	b5b0      	push	{r4, r5, r7, lr}
 8006606:	b084      	sub	sp, #16
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
  err_t err;
  u8_t refused_flags = pcb->refused_data->flags;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8006610:	230e      	movs	r3, #14
 8006612:	18fb      	adds	r3, r7, r3
 8006614:	7b52      	ldrb	r2, [r2, #13]
 8006616:	701a      	strb	r2, [r3, #0]
  /* set pcb->refused_data to NULL in case the callback frees it and then
     closes the pcb */
  struct pbuf *refused_data = pcb->refused_data;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800661c:	60bb      	str	r3, [r7, #8]
  pcb->refused_data = NULL;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2200      	movs	r2, #0
 8006622:	679a      	str	r2, [r3, #120]	; 0x78
  /* Notify again application with data previously received. */
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
  TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2280      	movs	r2, #128	; 0x80
 8006628:	589b      	ldr	r3, [r3, r2]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d00d      	beq.n	800664a <tcp_process_refused_data+0x46>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2280      	movs	r2, #128	; 0x80
 8006632:	589d      	ldr	r5, [r3, r2]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6918      	ldr	r0, [r3, #16]
 8006638:	230f      	movs	r3, #15
 800663a:	18fc      	adds	r4, r7, r3
 800663c:	68ba      	ldr	r2, [r7, #8]
 800663e:	6879      	ldr	r1, [r7, #4]
 8006640:	2300      	movs	r3, #0
 8006642:	47a8      	blx	r5
 8006644:	0003      	movs	r3, r0
 8006646:	7023      	strb	r3, [r4, #0]
 8006648:	e009      	b.n	800665e <tcp_process_refused_data+0x5a>
 800664a:	230f      	movs	r3, #15
 800664c:	18fc      	adds	r4, r7, r3
 800664e:	68ba      	ldr	r2, [r7, #8]
 8006650:	6879      	ldr	r1, [r7, #4]
 8006652:	2300      	movs	r3, #0
 8006654:	2000      	movs	r0, #0
 8006656:	f000 f899 	bl	800678c <tcp_recv_null>
 800665a:	0003      	movs	r3, r0
 800665c:	7023      	strb	r3, [r4, #0]
  if (err == ERR_OK) {
 800665e:	230f      	movs	r3, #15
 8006660:	18fb      	adds	r3, r7, r3
 8006662:	781b      	ldrb	r3, [r3, #0]
 8006664:	b25b      	sxtb	r3, r3
 8006666:	2b00      	cmp	r3, #0
 8006668:	d130      	bne.n	80066cc <tcp_process_refused_data+0xc8>
    /* did refused_data include a FIN? */
    if (refused_flags & PBUF_FLAG_TCP_FIN) {
 800666a:	230e      	movs	r3, #14
 800666c:	18fb      	adds	r3, r7, r3
 800666e:	781b      	ldrb	r3, [r3, #0]
 8006670:	2220      	movs	r2, #32
 8006672:	4013      	ands	r3, r2
 8006674:	d036      	beq.n	80066e4 <tcp_process_refused_data+0xe0>
      /* correct rcv_wnd as the application won't call tcp_recved()
         for the FIN's seqno */
      if (pcb->rcv_wnd != TCP_WND) {
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800667a:	4a1d      	ldr	r2, [pc, #116]	; (80066f0 <tcp_process_refused_data+0xec>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d005      	beq.n	800668c <tcp_process_refused_data+0x88>
        pcb->rcv_wnd++;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006684:	3301      	adds	r3, #1
 8006686:	b29a      	uxth	r2, r3
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	859a      	strh	r2, [r3, #44]	; 0x2c
      }
      TCP_EVENT_CLOSED(pcb, err);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2280      	movs	r2, #128	; 0x80
 8006690:	589b      	ldr	r3, [r3, r2]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d00d      	beq.n	80066b2 <tcp_process_refused_data+0xae>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2280      	movs	r2, #128	; 0x80
 800669a:	589d      	ldr	r5, [r3, r2]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6918      	ldr	r0, [r3, #16]
 80066a0:	230f      	movs	r3, #15
 80066a2:	18fc      	adds	r4, r7, r3
 80066a4:	6879      	ldr	r1, [r7, #4]
 80066a6:	2300      	movs	r3, #0
 80066a8:	2200      	movs	r2, #0
 80066aa:	47a8      	blx	r5
 80066ac:	0003      	movs	r3, r0
 80066ae:	7023      	strb	r3, [r4, #0]
 80066b0:	e003      	b.n	80066ba <tcp_process_refused_data+0xb6>
 80066b2:	230f      	movs	r3, #15
 80066b4:	18fb      	adds	r3, r7, r3
 80066b6:	2200      	movs	r2, #0
 80066b8:	701a      	strb	r2, [r3, #0]
      if (err == ERR_ABRT) {
 80066ba:	230f      	movs	r3, #15
 80066bc:	18fb      	adds	r3, r7, r3
 80066be:	781b      	ldrb	r3, [r3, #0]
 80066c0:	b25b      	sxtb	r3, r3
 80066c2:	330a      	adds	r3, #10
 80066c4:	d10e      	bne.n	80066e4 <tcp_process_refused_data+0xe0>
        return ERR_ABRT;
 80066c6:	230a      	movs	r3, #10
 80066c8:	425b      	negs	r3, r3
 80066ca:	e00c      	b.n	80066e6 <tcp_process_refused_data+0xe2>
      }
    }
  } else if (err == ERR_ABRT) {
 80066cc:	230f      	movs	r3, #15
 80066ce:	18fb      	adds	r3, r7, r3
 80066d0:	781b      	ldrb	r3, [r3, #0]
 80066d2:	b25b      	sxtb	r3, r3
 80066d4:	330a      	adds	r3, #10
 80066d6:	d102      	bne.n	80066de <tcp_process_refused_data+0xda>
    /* if err == ERR_ABRT, 'pcb' is already deallocated */
    /* Drop incoming packets because pcb is "full" (only if the incoming
       segment contains data). */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
    return ERR_ABRT;
 80066d8:	230a      	movs	r3, #10
 80066da:	425b      	negs	r3, r3
 80066dc:	e003      	b.n	80066e6 <tcp_process_refused_data+0xe2>
  } else {
    /* data is still refused, pbuf is still valid (go on for ACK-only packets) */
    pcb->refused_data = refused_data;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	68ba      	ldr	r2, [r7, #8]
 80066e2:	679a      	str	r2, [r3, #120]	; 0x78
  }
  return ERR_OK;
 80066e4:	2300      	movs	r3, #0
}
 80066e6:	0018      	movs	r0, r3
 80066e8:	46bd      	mov	sp, r7
 80066ea:	b004      	add	sp, #16
 80066ec:	bdb0      	pop	{r4, r5, r7, pc}
 80066ee:	46c0      	nop			; (mov r8, r8)
 80066f0:	000016d0 	.word	0x000016d0

080066f4 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b084      	sub	sp, #16
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80066fc:	e008      	b.n	8006710 <tcp_segs_free+0x1c>
    struct tcp_seg *next = seg->next;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	0018      	movs	r0, r3
 8006708:	f000 f809 	bl	800671e <tcp_seg_free>
    seg = next;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d1f3      	bne.n	80066fe <tcp_segs_free+0xa>
  }
}
 8006716:	46c0      	nop			; (mov r8, r8)
 8006718:	46bd      	mov	sp, r7
 800671a:	b004      	add	sp, #16
 800671c:	bd80      	pop	{r7, pc}

0800671e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800671e:	b580      	push	{r7, lr}
 8006720:	b082      	sub	sp, #8
 8006722:	af00      	add	r7, sp, #0
 8006724:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d00d      	beq.n	8006748 <tcp_seg_free+0x2a>
    if (seg->p != NULL) {
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d004      	beq.n	800673e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	0018      	movs	r0, r3
 800673a:	f7fe ffb3 	bl	80056a4 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	0019      	movs	r1, r3
 8006742:	2004      	movs	r0, #4
 8006744:	f7fe fbec 	bl	8004f20 <memp_free>
  }
}
 8006748:	46c0      	nop			; (mov r8, r8)
 800674a:	46bd      	mov	sp, r7
 800674c:	b002      	add	sp, #8
 800674e:	bd80      	pop	{r7, pc}

08006750 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */ 
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b084      	sub	sp, #16
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8006758:	2004      	movs	r0, #4
 800675a:	f7fe fb5b 	bl	8004e14 <memp_malloc>
 800675e:	0003      	movs	r3, r0
 8006760:	60fb      	str	r3, [r7, #12]
  if (cseg == NULL) {
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d101      	bne.n	800676c <tcp_seg_copy+0x1c>
    return NULL;
 8006768:	2300      	movs	r3, #0
 800676a:	e00b      	b.n	8006784 <tcp_seg_copy+0x34>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg)); 
 800676c:	6879      	ldr	r1, [r7, #4]
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2210      	movs	r2, #16
 8006772:	0018      	movs	r0, r3
 8006774:	f009 fa95 	bl	800fca2 <memcpy>
  pbuf_ref(cseg->p);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	0018      	movs	r0, r3
 800677e:	f7ff f81f 	bl	80057c0 <pbuf_ref>
  return cseg;
 8006782:	68fb      	ldr	r3, [r7, #12]
}
 8006784:	0018      	movs	r0, r3
 8006786:	46bd      	mov	sp, r7
 8006788:	b004      	add	sp, #16
 800678a:	bd80      	pop	{r7, pc}

0800678c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b084      	sub	sp, #16
 8006790:	af00      	add	r7, sp, #0
 8006792:	60f8      	str	r0, [r7, #12]
 8006794:	60b9      	str	r1, [r7, #8]
 8006796:	607a      	str	r2, [r7, #4]
 8006798:	001a      	movs	r2, r3
 800679a:	1cfb      	adds	r3, r7, #3
 800679c:	701a      	strb	r2, [r3, #0]
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d00b      	beq.n	80067bc <tcp_recv_null+0x30>
    tcp_recved(pcb, p->tot_len);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	891a      	ldrh	r2, [r3, #8]
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	0011      	movs	r1, r2
 80067ac:	0018      	movs	r0, r3
 80067ae:	f7ff fc33 	bl	8006018 <tcp_recved>
    pbuf_free(p);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	0018      	movs	r0, r3
 80067b6:	f7fe ff75 	bl	80056a4 <pbuf_free>
 80067ba:	e00a      	b.n	80067d2 <tcp_recv_null+0x46>
  } else if (err == ERR_OK) {
 80067bc:	1cfb      	adds	r3, r7, #3
 80067be:	781b      	ldrb	r3, [r3, #0]
 80067c0:	b25b      	sxtb	r3, r3
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d105      	bne.n	80067d2 <tcp_recv_null+0x46>
    return tcp_close(pcb);
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	0018      	movs	r0, r3
 80067ca:	f7ff fb4d 	bl	8005e68 <tcp_close>
 80067ce:	0003      	movs	r3, r0
 80067d0:	e000      	b.n	80067d4 <tcp_recv_null+0x48>
  }
  return ERR_OK;
 80067d2:	2300      	movs	r3, #0
}
 80067d4:	0018      	movs	r0, r3
 80067d6:	46bd      	mov	sp, r7
 80067d8:	b004      	add	sp, #16
 80067da:	bd80      	pop	{r7, pc}

080067dc <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b086      	sub	sp, #24
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	0002      	movs	r2, r0
 80067e4:	1dfb      	adds	r3, r7, #7
 80067e6:	701a      	strb	r2, [r3, #0]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;


  mprio = TCP_PRIO_MAX;
 80067e8:	230b      	movs	r3, #11
 80067ea:	18fb      	adds	r3, r7, r3
 80067ec:	227f      	movs	r2, #127	; 0x7f
 80067ee:	701a      	strb	r2, [r3, #0]
  
  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
 80067f0:	2300      	movs	r3, #0
 80067f2:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80067f4:	2300      	movs	r3, #0
 80067f6:	613b      	str	r3, [r7, #16]
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80067f8:	4b1b      	ldr	r3, [pc, #108]	; (8006868 <tcp_kill_prio+0x8c>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	617b      	str	r3, [r7, #20]
 80067fe:	e024      	b.n	800684a <tcp_kill_prio+0x6e>
    if (pcb->prio <= prio &&
 8006800:	697b      	ldr	r3, [r7, #20]
 8006802:	7e5b      	ldrb	r3, [r3, #25]
 8006804:	1dfa      	adds	r2, r7, #7
 8006806:	7812      	ldrb	r2, [r2, #0]
 8006808:	429a      	cmp	r2, r3
 800680a:	d31b      	bcc.n	8006844 <tcp_kill_prio+0x68>
       pcb->prio <= mprio &&
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	7e5b      	ldrb	r3, [r3, #25]
    if (pcb->prio <= prio &&
 8006810:	220b      	movs	r2, #11
 8006812:	18ba      	adds	r2, r7, r2
 8006814:	7812      	ldrb	r2, [r2, #0]
 8006816:	429a      	cmp	r2, r3
 8006818:	d314      	bcc.n	8006844 <tcp_kill_prio+0x68>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800681a:	4b14      	ldr	r3, [pc, #80]	; (800686c <tcp_kill_prio+0x90>)
 800681c:	681a      	ldr	r2, [r3, #0]
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006822:	1ad3      	subs	r3, r2, r3
       pcb->prio <= mprio &&
 8006824:	68fa      	ldr	r2, [r7, #12]
 8006826:	429a      	cmp	r2, r3
 8006828:	d80c      	bhi.n	8006844 <tcp_kill_prio+0x68>
      inactivity = tcp_ticks - pcb->tmr;
 800682a:	4b10      	ldr	r3, [pc, #64]	; (800686c <tcp_kill_prio+0x90>)
 800682c:	681a      	ldr	r2, [r3, #0]
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006832:	1ad3      	subs	r3, r2, r3
 8006834:	60fb      	str	r3, [r7, #12]
      inactive = pcb;
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	613b      	str	r3, [r7, #16]
      mprio = pcb->prio;
 800683a:	230b      	movs	r3, #11
 800683c:	18fb      	adds	r3, r7, r3
 800683e:	697a      	ldr	r2, [r7, #20]
 8006840:	7e52      	ldrb	r2, [r2, #25]
 8006842:	701a      	strb	r2, [r3, #0]
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	68db      	ldr	r3, [r3, #12]
 8006848:	617b      	str	r3, [r7, #20]
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d1d7      	bne.n	8006800 <tcp_kill_prio+0x24>
    }
  }
  if (inactive != NULL) {
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d003      	beq.n	800685e <tcp_kill_prio+0x82>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	0018      	movs	r0, r3
 800685a:	f7ff fb8f 	bl	8005f7c <tcp_abort>
  }
}
 800685e:	46c0      	nop			; (mov r8, r8)
 8006860:	46bd      	mov	sp, r7
 8006862:	b006      	add	sp, #24
 8006864:	bd80      	pop	{r7, pc}
 8006866:	46c0      	nop			; (mov r8, r8)
 8006868:	20003274 	.word	0x20003274
 800686c:	20003278 	.word	0x20003278

08006870 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b084      	sub	sp, #16
 8006874:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8006876:	2300      	movs	r3, #0
 8006878:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800687a:	2300      	movs	r3, #0
 800687c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800687e:	4b12      	ldr	r3, [pc, #72]	; (80068c8 <tcp_kill_timewait+0x58>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	60fb      	str	r3, [r7, #12]
 8006884:	e012      	b.n	80068ac <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8006886:	4b11      	ldr	r3, [pc, #68]	; (80068cc <tcp_kill_timewait+0x5c>)
 8006888:	681a      	ldr	r2, [r3, #0]
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800688e:	1ad3      	subs	r3, r2, r3
 8006890:	687a      	ldr	r2, [r7, #4]
 8006892:	429a      	cmp	r2, r3
 8006894:	d807      	bhi.n	80068a6 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8006896:	4b0d      	ldr	r3, [pc, #52]	; (80068cc <tcp_kill_timewait+0x5c>)
 8006898:	681a      	ldr	r2, [r3, #0]
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800689e:	1ad3      	subs	r3, r2, r3
 80068a0:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	60bb      	str	r3, [r7, #8]
  for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	68db      	ldr	r3, [r3, #12]
 80068aa:	60fb      	str	r3, [r7, #12]
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d1e9      	bne.n	8006886 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d003      	beq.n	80068c0 <tcp_kill_timewait+0x50>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	0018      	movs	r0, r3
 80068bc:	f7ff fb5e 	bl	8005f7c <tcp_abort>
  }
}
 80068c0:	46c0      	nop			; (mov r8, r8)
 80068c2:	46bd      	mov	sp, r7
 80068c4:	b004      	add	sp, #16
 80068c6:	bd80      	pop	{r7, pc}
 80068c8:	20003288 	.word	0x20003288
 80068cc:	20003278 	.word	0x20003278

080068d0 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b084      	sub	sp, #16
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	0002      	movs	r2, r0
 80068d8:	1dfb      	adds	r3, r7, #7
 80068da:	701a      	strb	r2, [r3, #0]
  struct tcp_pcb *pcb;
  u32_t iss;
  
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80068dc:	2002      	movs	r0, #2
 80068de:	f7fe fa99 	bl	8004e14 <memp_malloc>
 80068e2:	0003      	movs	r3, r0
 80068e4:	60fb      	str	r3, [r7, #12]
  if (pcb == NULL) {
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d129      	bne.n	8006940 <tcp_alloc+0x70>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80068ec:	f7ff ffc0 	bl	8006870 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80068f0:	2002      	movs	r0, #2
 80068f2:	f7fe fa8f 	bl	8004e14 <memp_malloc>
 80068f6:	0003      	movs	r3, r0
 80068f8:	60fb      	str	r3, [r7, #12]
    if (pcb == NULL) {
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d114      	bne.n	800692a <tcp_alloc+0x5a>
      /* Try killing active connections with lower priority than the new one. */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
      tcp_kill_prio(prio);
 8006900:	1dfb      	adds	r3, r7, #7
 8006902:	781b      	ldrb	r3, [r3, #0]
 8006904:	0018      	movs	r0, r3
 8006906:	f7ff ff69 	bl	80067dc <tcp_kill_prio>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800690a:	2002      	movs	r0, #2
 800690c:	f7fe fa82 	bl	8004e14 <memp_malloc>
 8006910:	0003      	movs	r3, r0
 8006912:	60fb      	str	r3, [r7, #12]
      if (pcb != NULL) {
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d007      	beq.n	800692a <tcp_alloc+0x5a>
        /* adjust err stats: memp_malloc failed twice before */
        MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 800691a:	4b3c      	ldr	r3, [pc, #240]	; (8006a0c <tcp_alloc+0x13c>)
 800691c:	22cc      	movs	r2, #204	; 0xcc
 800691e:	5a9b      	ldrh	r3, [r3, r2]
 8006920:	3b01      	subs	r3, #1
 8006922:	b299      	uxth	r1, r3
 8006924:	4b39      	ldr	r3, [pc, #228]	; (8006a0c <tcp_alloc+0x13c>)
 8006926:	22cc      	movs	r2, #204	; 0xcc
 8006928:	5299      	strh	r1, [r3, r2]
      }
    }
    if (pcb != NULL) {
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d007      	beq.n	8006940 <tcp_alloc+0x70>
      /* adjust err stats: timewait PCB was freed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 8006930:	4b36      	ldr	r3, [pc, #216]	; (8006a0c <tcp_alloc+0x13c>)
 8006932:	22cc      	movs	r2, #204	; 0xcc
 8006934:	5a9b      	ldrh	r3, [r3, r2]
 8006936:	3b01      	subs	r3, #1
 8006938:	b299      	uxth	r1, r3
 800693a:	4b34      	ldr	r3, [pc, #208]	; (8006a0c <tcp_alloc+0x13c>)
 800693c:	22cc      	movs	r2, #204	; 0xcc
 800693e:	5299      	strh	r1, [r3, r2]
    }
  }
  if (pcb != NULL) {
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d05d      	beq.n	8006a02 <tcp_alloc+0x132>
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2298      	movs	r2, #152	; 0x98
 800694a:	2100      	movs	r1, #0
 800694c:	0018      	movs	r0, r3
 800694e:	f009 f9b1 	bl	800fcb4 <memset>
    pcb->prio = prio;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	1dfa      	adds	r2, r7, #7
 8006956:	7812      	ldrb	r2, [r2, #0]
 8006958:	765a      	strb	r2, [r3, #25]
    pcb->snd_buf = TCP_SND_BUF;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	2266      	movs	r2, #102	; 0x66
 800695e:	492c      	ldr	r1, [pc, #176]	; (8006a10 <tcp_alloc+0x140>)
 8006960:	5299      	strh	r1, [r3, r2]
    pcb->snd_queuelen = 0;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	2268      	movs	r2, #104	; 0x68
 8006966:	2100      	movs	r1, #0
 8006968:	5299      	strh	r1, [r3, r2]
    pcb->rcv_wnd = TCP_WND;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	4a29      	ldr	r2, [pc, #164]	; (8006a14 <tcp_alloc+0x144>)
 800696e:	859a      	strh	r2, [r3, #44]	; 0x2c
    pcb->rcv_ann_wnd = TCP_WND;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	4a28      	ldr	r2, [pc, #160]	; (8006a14 <tcp_alloc+0x144>)
 8006974:	85da      	strh	r2, [r3, #46]	; 0x2e
    pcb->tos = 0;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	2200      	movs	r2, #0
 800697a:	725a      	strb	r2, [r3, #9]
    pcb->ttl = TCP_TTL;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	22ff      	movs	r2, #255	; 0xff
 8006980:	729a      	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = (TCP_MSS > 536) ? 536 : TCP_MSS;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	2286      	movs	r2, #134	; 0x86
 8006986:	0092      	lsls	r2, r2, #2
 8006988:	86da      	strh	r2, [r3, #54]	; 0x36
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	2244      	movs	r2, #68	; 0x44
 800698e:	2106      	movs	r1, #6
 8006990:	5299      	strh	r1, [r3, r2]
    pcb->sa = 0;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	2240      	movs	r2, #64	; 0x40
 8006996:	2100      	movs	r1, #0
 8006998:	5299      	strh	r1, [r3, r2]
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	2242      	movs	r2, #66	; 0x42
 800699e:	2106      	movs	r1, #6
 80069a0:	5299      	strh	r1, [r3, r2]
    pcb->rtime = -1;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	2201      	movs	r2, #1
 80069a6:	4252      	negs	r2, r2
 80069a8:	869a      	strh	r2, [r3, #52]	; 0x34
    pcb->cwnd = 1;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	224c      	movs	r2, #76	; 0x4c
 80069ae:	2101      	movs	r1, #1
 80069b0:	5299      	strh	r1, [r3, r2]
    iss = tcp_next_iss();
 80069b2:	f000 f8cf 	bl	8006b54 <tcp_next_iss>
 80069b6:	0003      	movs	r3, r0
 80069b8:	60bb      	str	r3, [r7, #8]
    pcb->snd_wl2 = iss;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	68ba      	ldr	r2, [r7, #8]
 80069be:	659a      	str	r2, [r3, #88]	; 0x58
    pcb->snd_nxt = iss;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	68ba      	ldr	r2, [r7, #8]
 80069c4:	651a      	str	r2, [r3, #80]	; 0x50
    pcb->lastack = iss;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	68ba      	ldr	r2, [r7, #8]
 80069ca:	649a      	str	r2, [r3, #72]	; 0x48
    pcb->snd_lbb = iss;   
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	68ba      	ldr	r2, [r7, #8]
 80069d0:	65da      	str	r2, [r3, #92]	; 0x5c
    pcb->tmr = tcp_ticks;
 80069d2:	4b11      	ldr	r3, [pc, #68]	; (8006a18 <tcp_alloc+0x148>)
 80069d4:	681a      	ldr	r2, [r3, #0]
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	625a      	str	r2, [r3, #36]	; 0x24
    pcb->last_timer = tcp_timer_ctr;
 80069da:	4b10      	ldr	r3, [pc, #64]	; (8006a1c <tcp_alloc+0x14c>)
 80069dc:	7819      	ldrb	r1, [r3, #0]
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	2221      	movs	r2, #33	; 0x21
 80069e2:	5499      	strb	r1, [r3, r2]

    pcb->polltmr = 0;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	2200      	movs	r2, #0
 80069e8:	77da      	strb	r2, [r3, #31]

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	2180      	movs	r1, #128	; 0x80
 80069ee:	4a0c      	ldr	r2, [pc, #48]	; (8006a20 <tcp_alloc+0x150>)
 80069f0:	505a      	str	r2, [r3, r1]
#endif /* LWIP_CALLBACK_API */  
    
    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2290      	movs	r2, #144	; 0x90
 80069f6:	490b      	ldr	r1, [pc, #44]	; (8006a24 <tcp_alloc+0x154>)
 80069f8:	5099      	str	r1, [r3, r2]
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */

    pcb->keep_cnt_sent = 0;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	2296      	movs	r2, #150	; 0x96
 80069fe:	2100      	movs	r1, #0
 8006a00:	5499      	strb	r1, [r3, r2]
  }
  return pcb;
 8006a02:	68fb      	ldr	r3, [r7, #12]
}
 8006a04:	0018      	movs	r0, r3
 8006a06:	46bd      	mov	sp, r7
 8006a08:	b004      	add	sp, #16
 8006a0a:	bd80      	pop	{r7, pc}
 8006a0c:	20003158 	.word	0x20003158
 8006a10:	00000b68 	.word	0x00000b68
 8006a14:	000016d0 	.word	0x000016d0
 8006a18:	20003278 	.word	0x20003278
 8006a1c:	20002279 	.word	0x20002279
 8006a20:	0800678d 	.word	0x0800678d
 8006a24:	006ddd00 	.word	0x006ddd00

08006a28 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b082      	sub	sp, #8
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
  if (pcb->state != CLOSED &&
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	7e1b      	ldrb	r3, [r3, #24]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d034      	beq.n	8006aa2 <tcp_pcb_purge+0x7a>
     pcb->state != TIME_WAIT &&
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	7e1b      	ldrb	r3, [r3, #24]
  if (pcb->state != CLOSED &&
 8006a3c:	2b0a      	cmp	r3, #10
 8006a3e:	d030      	beq.n	8006aa2 <tcp_pcb_purge+0x7a>
     pcb->state != LISTEN) {
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	7e1b      	ldrb	r3, [r3, #24]
     pcb->state != TIME_WAIT &&
 8006a44:	2b01      	cmp	r3, #1
 8006a46:	d02c      	beq.n	8006aa2 <tcp_pcb_purge+0x7a>
      }
    }
#endif /* TCP_LISTEN_BACKLOG */


    if (pcb->refused_data != NULL) {
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d007      	beq.n	8006a60 <tcp_pcb_purge+0x38>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a54:	0018      	movs	r0, r3
 8006a56:	f7fe fe25 	bl	80056a4 <pbuf_free>
      pcb->refused_data = NULL;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	679a      	str	r2, [r3, #120]	; 0x78
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a64:	0018      	movs	r0, r3
 8006a66:	f7ff fe45 	bl	80066f4 <tcp_segs_free>
    pcb->ooseq = NULL;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	675a      	str	r2, [r3, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2201      	movs	r2, #1
 8006a74:	4252      	negs	r2, r2
 8006a76:	869a      	strh	r2, [r3, #52]	; 0x34

    tcp_segs_free(pcb->unsent);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a7c:	0018      	movs	r0, r3
 8006a7e:	f7ff fe39 	bl	80066f4 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a86:	0018      	movs	r0, r3
 8006a88:	f7ff fe34 	bl	80066f4 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	66da      	str	r2, [r3, #108]	; 0x6c
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	226a      	movs	r2, #106	; 0x6a
 8006a9e:	2100      	movs	r1, #0
 8006aa0:	5299      	strh	r1, [r3, r2]
#endif /* TCP_OVERSIZE */
  }
}
 8006aa2:	46c0      	nop			; (mov r8, r8)
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	b002      	add	sp, #8
 8006aa8:	bd80      	pop	{r7, pc}
	...

08006aac <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b082      	sub	sp, #8
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
 8006ab4:	6039      	str	r1, [r7, #0]
  TCP_RMV(pcblist, pcb);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	683a      	ldr	r2, [r7, #0]
 8006abc:	429a      	cmp	r2, r3
 8006abe:	d105      	bne.n	8006acc <tcp_pcb_remove+0x20>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	68da      	ldr	r2, [r3, #12]
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	601a      	str	r2, [r3, #0]
 8006aca:	e019      	b.n	8006b00 <tcp_pcb_remove+0x54>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681a      	ldr	r2, [r3, #0]
 8006ad0:	4b1f      	ldr	r3, [pc, #124]	; (8006b50 <tcp_pcb_remove+0xa4>)
 8006ad2:	601a      	str	r2, [r3, #0]
 8006ad4:	e010      	b.n	8006af8 <tcp_pcb_remove+0x4c>
 8006ad6:	4b1e      	ldr	r3, [pc, #120]	; (8006b50 <tcp_pcb_remove+0xa4>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	68db      	ldr	r3, [r3, #12]
 8006adc:	683a      	ldr	r2, [r7, #0]
 8006ade:	429a      	cmp	r2, r3
 8006ae0:	d105      	bne.n	8006aee <tcp_pcb_remove+0x42>
 8006ae2:	4b1b      	ldr	r3, [pc, #108]	; (8006b50 <tcp_pcb_remove+0xa4>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	683a      	ldr	r2, [r7, #0]
 8006ae8:	68d2      	ldr	r2, [r2, #12]
 8006aea:	60da      	str	r2, [r3, #12]
 8006aec:	e008      	b.n	8006b00 <tcp_pcb_remove+0x54>
 8006aee:	4b18      	ldr	r3, [pc, #96]	; (8006b50 <tcp_pcb_remove+0xa4>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	68da      	ldr	r2, [r3, #12]
 8006af4:	4b16      	ldr	r3, [pc, #88]	; (8006b50 <tcp_pcb_remove+0xa4>)
 8006af6:	601a      	str	r2, [r3, #0]
 8006af8:	4b15      	ldr	r3, [pc, #84]	; (8006b50 <tcp_pcb_remove+0xa4>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d1ea      	bne.n	8006ad6 <tcp_pcb_remove+0x2a>
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	2200      	movs	r2, #0
 8006b04:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	0018      	movs	r0, r3
 8006b0a:	f7ff ff8d 	bl	8006a28 <tcp_pcb_purge>
  
  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	7e1b      	ldrb	r3, [r3, #24]
 8006b12:	2b0a      	cmp	r3, #10
 8006b14:	d014      	beq.n	8006b40 <tcp_pcb_remove+0x94>
     pcb->state != LISTEN &&
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	7e1b      	ldrb	r3, [r3, #24]
  if (pcb->state != TIME_WAIT &&
 8006b1a:	2b01      	cmp	r3, #1
 8006b1c:	d010      	beq.n	8006b40 <tcp_pcb_remove+0x94>
     pcb->flags & TF_ACK_DELAY) {
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	7f9b      	ldrb	r3, [r3, #30]
 8006b22:	001a      	movs	r2, r3
 8006b24:	2301      	movs	r3, #1
 8006b26:	4013      	ands	r3, r2
     pcb->state != LISTEN &&
 8006b28:	d00a      	beq.n	8006b40 <tcp_pcb_remove+0x94>
    pcb->flags |= TF_ACK_NOW;
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	7f9b      	ldrb	r3, [r3, #30]
 8006b2e:	2202      	movs	r2, #2
 8006b30:	4313      	orrs	r3, r2
 8006b32:	b2da      	uxtb	r2, r3
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	779a      	strb	r2, [r3, #30]
    tcp_output(pcb);
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	0018      	movs	r0, r3
 8006b3c:	f002 ff68 	bl	8009a10 <tcp_output>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	2200      	movs	r2, #0
 8006b44:	761a      	strb	r2, [r3, #24]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8006b46:	46c0      	nop			; (mov r8, r8)
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	b002      	add	sp, #8
 8006b4c:	bd80      	pop	{r7, pc}
 8006b4e:	46c0      	nop			; (mov r8, r8)
 8006b50:	20003280 	.word	0x20003280

08006b54 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(void)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	af00      	add	r7, sp, #0
  static u32_t iss = 6510;
  
  iss += tcp_ticks;       /* XXX */
 8006b58:	4b05      	ldr	r3, [pc, #20]	; (8006b70 <tcp_next_iss+0x1c>)
 8006b5a:	681a      	ldr	r2, [r3, #0]
 8006b5c:	4b05      	ldr	r3, [pc, #20]	; (8006b74 <tcp_next_iss+0x20>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	18d2      	adds	r2, r2, r3
 8006b62:	4b03      	ldr	r3, [pc, #12]	; (8006b70 <tcp_next_iss+0x1c>)
 8006b64:	601a      	str	r2, [r3, #0]
  return iss;
 8006b66:	4b02      	ldr	r3, [pc, #8]	; (8006b70 <tcp_next_iss+0x1c>)
 8006b68:	681b      	ldr	r3, [r3, #0]
}
 8006b6a:	0018      	movs	r0, r3
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bd80      	pop	{r7, pc}
 8006b70:	20000010 	.word	0x20000010
 8006b74:	20003278 	.word	0x20003278

08006b78 <tcp_eff_send_mss>:
 * by using ip_route to determin the netif used to send to the address and
 * calculating the minimum of TCP_MSS and that netif's mtu (if set).
 */
u16_t
tcp_eff_send_mss(u16_t sendmss, ip_addr_t *addr)
{
 8006b78:	b590      	push	{r4, r7, lr}
 8006b7a:	b085      	sub	sp, #20
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	0002      	movs	r2, r0
 8006b80:	6039      	str	r1, [r7, #0]
 8006b82:	1dbb      	adds	r3, r7, #6
 8006b84:	801a      	strh	r2, [r3, #0]
  u16_t mss_s;
  struct netif *outif;

  outif = ip_route(addr);
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	0018      	movs	r0, r3
 8006b8a:	f004 fe5d 	bl	800b848 <ip_route>
 8006b8e:	0003      	movs	r3, r0
 8006b90:	60fb      	str	r3, [r7, #12]
  if ((outif != NULL) && (outif->mtu != 0)) {
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d014      	beq.n	8006bc2 <tcp_eff_send_mss+0x4a>
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	8c1b      	ldrh	r3, [r3, #32]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d010      	beq.n	8006bc2 <tcp_eff_send_mss+0x4a>
    mss_s = outif->mtu - IP_HLEN - TCP_HLEN;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	8c1a      	ldrh	r2, [r3, #32]
 8006ba4:	210a      	movs	r1, #10
 8006ba6:	187b      	adds	r3, r7, r1
 8006ba8:	3a28      	subs	r2, #40	; 0x28
 8006baa:	801a      	strh	r2, [r3, #0]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8006bac:	1dba      	adds	r2, r7, #6
 8006bae:	187b      	adds	r3, r7, r1
 8006bb0:	1db9      	adds	r1, r7, #6
 8006bb2:	880c      	ldrh	r4, [r1, #0]
 8006bb4:	881b      	ldrh	r3, [r3, #0]
 8006bb6:	b298      	uxth	r0, r3
 8006bb8:	b2a1      	uxth	r1, r4
 8006bba:	4288      	cmp	r0, r1
 8006bbc:	d900      	bls.n	8006bc0 <tcp_eff_send_mss+0x48>
 8006bbe:	1c23      	adds	r3, r4, #0
 8006bc0:	8013      	strh	r3, [r2, #0]
  }
  return sendmss;
 8006bc2:	1dbb      	adds	r3, r7, #6
 8006bc4:	881b      	ldrh	r3, [r3, #0]
}
 8006bc6:	0018      	movs	r0, r3
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	b005      	add	sp, #20
 8006bcc:	bd90      	pop	{r4, r7, pc}
	...

08006bd0 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the IP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8006bd0:	b5b0      	push	{r4, r5, r7, lr}
 8006bd2:	b088      	sub	sp, #32
 8006bd4:	af02      	add	r7, sp, #8
 8006bd6:	6078      	str	r0, [r7, #4]
 8006bd8:	6039      	str	r1, [r7, #0]
  u8_t hdrlen;
  err_t err;

  PERF_START;

  TCP_STATS_INC(tcp.recv);
 8006bda:	4bd3      	ldr	r3, [pc, #844]	; (8006f28 <tcp_input+0x358>)
 8006bdc:	2292      	movs	r2, #146	; 0x92
 8006bde:	5a9b      	ldrh	r3, [r3, r2]
 8006be0:	3301      	adds	r3, #1
 8006be2:	b299      	uxth	r1, r3
 8006be4:	4bd0      	ldr	r3, [pc, #832]	; (8006f28 <tcp_input+0x358>)
 8006be6:	2292      	movs	r2, #146	; 0x92
 8006be8:	5299      	strh	r1, [r3, r2]
  snmp_inc_tcpinsegs();

  iphdr = (struct ip_hdr *)p->payload;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	685a      	ldr	r2, [r3, #4]
 8006bee:	4bcf      	ldr	r3, [pc, #828]	; (8006f2c <tcp_input+0x35c>)
 8006bf0:	601a      	str	r2, [r3, #0]
  tcphdr = (struct tcp_hdr *)((u8_t *)p->payload + IPH_HL(iphdr) * 4);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	685a      	ldr	r2, [r3, #4]
 8006bf6:	4bcd      	ldr	r3, [pc, #820]	; (8006f2c <tcp_input+0x35c>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	781b      	ldrb	r3, [r3, #0]
 8006bfc:	0019      	movs	r1, r3
 8006bfe:	230f      	movs	r3, #15
 8006c00:	400b      	ands	r3, r1
 8006c02:	009b      	lsls	r3, r3, #2
 8006c04:	18d2      	adds	r2, r2, r3
 8006c06:	4bca      	ldr	r3, [pc, #808]	; (8006f30 <tcp_input+0x360>)
 8006c08:	601a      	str	r2, [r3, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* remove header from payload */
  if (pbuf_header(p, -((s16_t)(IPH_HL(iphdr) * 4))) || (p->tot_len < sizeof(struct tcp_hdr))) {
 8006c0a:	4bc8      	ldr	r3, [pc, #800]	; (8006f2c <tcp_input+0x35c>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	781b      	ldrb	r3, [r3, #0]
 8006c10:	b29b      	uxth	r3, r3
 8006c12:	220f      	movs	r2, #15
 8006c14:	4013      	ands	r3, r2
 8006c16:	b29b      	uxth	r3, r3
 8006c18:	009b      	lsls	r3, r3, #2
 8006c1a:	b29b      	uxth	r3, r3
 8006c1c:	425b      	negs	r3, r3
 8006c1e:	b29b      	uxth	r3, r3
 8006c20:	b21a      	sxth	r2, r3
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	0011      	movs	r1, r2
 8006c26:	0018      	movs	r0, r3
 8006c28:	f7fe fcb5 	bl	8005596 <pbuf_header>
 8006c2c:	1e03      	subs	r3, r0, #0
 8006c2e:	d103      	bne.n	8006c38 <tcp_input+0x68>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	891b      	ldrh	r3, [r3, #8]
 8006c34:	2b13      	cmp	r3, #19
 8006c36:	d809      	bhi.n	8006c4c <tcp_input+0x7c>
    /* drop short packets */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: short packet (%"U16_F" bytes) discarded\n", p->tot_len));
    TCP_STATS_INC(tcp.lenerr);
 8006c38:	4bbb      	ldr	r3, [pc, #748]	; (8006f28 <tcp_input+0x358>)
 8006c3a:	229a      	movs	r2, #154	; 0x9a
 8006c3c:	5a9b      	ldrh	r3, [r3, r2]
 8006c3e:	3301      	adds	r3, #1
 8006c40:	b299      	uxth	r1, r3
 8006c42:	4bb9      	ldr	r3, [pc, #740]	; (8006f28 <tcp_input+0x358>)
 8006c44:	229a      	movs	r2, #154	; 0x9a
 8006c46:	5299      	strh	r1, [r3, r2]
    goto dropped;
 8006c48:	f000 fbf4 	bl	8007434 <tcp_input+0x864>
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(&current_iphdr_dest, inp) ||
 8006c4c:	4bb9      	ldr	r3, [pc, #740]	; (8006f34 <tcp_input+0x364>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	683a      	ldr	r2, [r7, #0]
 8006c52:	0011      	movs	r1, r2
 8006c54:	0018      	movs	r0, r3
 8006c56:	f005 fa11 	bl	800c07c <ip4_addr_isbroadcast>
 8006c5a:	1e03      	subs	r3, r0, #0
 8006c5c:	d105      	bne.n	8006c6a <tcp_input+0x9a>
      ip_addr_ismulticast(&current_iphdr_dest)) {
 8006c5e:	4bb5      	ldr	r3, [pc, #724]	; (8006f34 <tcp_input+0x364>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	22f0      	movs	r2, #240	; 0xf0
 8006c64:	4013      	ands	r3, r2
  if (ip_addr_isbroadcast(&current_iphdr_dest, inp) ||
 8006c66:	2be0      	cmp	r3, #224	; 0xe0
 8006c68:	d109      	bne.n	8006c7e <tcp_input+0xae>
    TCP_STATS_INC(tcp.proterr);
 8006c6a:	4baf      	ldr	r3, [pc, #700]	; (8006f28 <tcp_input+0x358>)
 8006c6c:	22a0      	movs	r2, #160	; 0xa0
 8006c6e:	5a9b      	ldrh	r3, [r3, r2]
 8006c70:	3301      	adds	r3, #1
 8006c72:	b299      	uxth	r1, r3
 8006c74:	4bac      	ldr	r3, [pc, #688]	; (8006f28 <tcp_input+0x358>)
 8006c76:	22a0      	movs	r2, #160	; 0xa0
 8006c78:	5299      	strh	r1, [r3, r2]
    goto dropped;
 8006c7a:	f000 fbdb 	bl	8007434 <tcp_input+0x864>
  }

#if CHECKSUM_CHECK_TCP
  /* Verify TCP checksum. */
  if (inet_chksum_pseudo(p, ip_current_src_addr(), ip_current_dest_addr(),
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	891b      	ldrh	r3, [r3, #8]
 8006c82:	4aac      	ldr	r2, [pc, #688]	; (8006f34 <tcp_input+0x364>)
 8006c84:	49ac      	ldr	r1, [pc, #688]	; (8006f38 <tcp_input+0x368>)
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	9300      	str	r3, [sp, #0]
 8006c8a:	2306      	movs	r3, #6
 8006c8c:	f004 fcd5 	bl	800b63a <inet_chksum_pseudo>
 8006c90:	1e03      	subs	r3, r0, #0
 8006c92:	d009      	beq.n	8006ca8 <tcp_input+0xd8>
        inet_chksum_pseudo(p, ip_current_src_addr(), ip_current_dest_addr(),
      IP_PROTO_TCP, p->tot_len)));
#if TCP_DEBUG
    tcp_debug_print(tcphdr);
#endif /* TCP_DEBUG */
    TCP_STATS_INC(tcp.chkerr);
 8006c94:	4ba4      	ldr	r3, [pc, #656]	; (8006f28 <tcp_input+0x358>)
 8006c96:	2298      	movs	r2, #152	; 0x98
 8006c98:	5a9b      	ldrh	r3, [r3, r2]
 8006c9a:	3301      	adds	r3, #1
 8006c9c:	b299      	uxth	r1, r3
 8006c9e:	4ba2      	ldr	r3, [pc, #648]	; (8006f28 <tcp_input+0x358>)
 8006ca0:	2298      	movs	r2, #152	; 0x98
 8006ca2:	5299      	strh	r1, [r3, r2]
    goto dropped;
 8006ca4:	f000 fbc6 	bl	8007434 <tcp_input+0x864>
  }
#endif

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  hdrlen = TCPH_HDRLEN(tcphdr);
 8006ca8:	4ba1      	ldr	r3, [pc, #644]	; (8006f30 <tcp_input+0x360>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	7b1a      	ldrb	r2, [r3, #12]
 8006cae:	7b5b      	ldrb	r3, [r3, #13]
 8006cb0:	021b      	lsls	r3, r3, #8
 8006cb2:	4313      	orrs	r3, r2
 8006cb4:	b29b      	uxth	r3, r3
 8006cb6:	0018      	movs	r0, r3
 8006cb8:	f7fd fcc2 	bl	8004640 <lwip_ntohs>
 8006cbc:	0003      	movs	r3, r0
 8006cbe:	0b1b      	lsrs	r3, r3, #12
 8006cc0:	b29a      	uxth	r2, r3
 8006cc2:	210a      	movs	r1, #10
 8006cc4:	187b      	adds	r3, r7, r1
 8006cc6:	701a      	strb	r2, [r3, #0]
  if(pbuf_header(p, -(hdrlen * 4))){
 8006cc8:	187b      	adds	r3, r7, r1
 8006cca:	781b      	ldrb	r3, [r3, #0]
 8006ccc:	b29b      	uxth	r3, r3
 8006cce:	1c1a      	adds	r2, r3, #0
 8006cd0:	0392      	lsls	r2, r2, #14
 8006cd2:	1ad3      	subs	r3, r2, r3
 8006cd4:	009b      	lsls	r3, r3, #2
 8006cd6:	b29b      	uxth	r3, r3
 8006cd8:	b21a      	sxth	r2, r3
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	0011      	movs	r1, r2
 8006cde:	0018      	movs	r0, r3
 8006ce0:	f7fe fc59 	bl	8005596 <pbuf_header>
 8006ce4:	1e03      	subs	r3, r0, #0
 8006ce6:	d009      	beq.n	8006cfc <tcp_input+0x12c>
    /* drop short packets */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: short packet\n"));
    TCP_STATS_INC(tcp.lenerr);
 8006ce8:	4b8f      	ldr	r3, [pc, #572]	; (8006f28 <tcp_input+0x358>)
 8006cea:	229a      	movs	r2, #154	; 0x9a
 8006cec:	5a9b      	ldrh	r3, [r3, r2]
 8006cee:	3301      	adds	r3, #1
 8006cf0:	b299      	uxth	r1, r3
 8006cf2:	4b8d      	ldr	r3, [pc, #564]	; (8006f28 <tcp_input+0x358>)
 8006cf4:	229a      	movs	r2, #154	; 0x9a
 8006cf6:	5299      	strh	r1, [r3, r2]
    goto dropped;
 8006cf8:	f000 fb9c 	bl	8007434 <tcp_input+0x864>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = ntohs(tcphdr->src);
 8006cfc:	4b8c      	ldr	r3, [pc, #560]	; (8006f30 <tcp_input+0x360>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	781a      	ldrb	r2, [r3, #0]
 8006d02:	785b      	ldrb	r3, [r3, #1]
 8006d04:	021b      	lsls	r3, r3, #8
 8006d06:	4313      	orrs	r3, r2
 8006d08:	b29a      	uxth	r2, r3
 8006d0a:	4b89      	ldr	r3, [pc, #548]	; (8006f30 <tcp_input+0x360>)
 8006d0c:	681c      	ldr	r4, [r3, #0]
 8006d0e:	0010      	movs	r0, r2
 8006d10:	f7fd fc96 	bl	8004640 <lwip_ntohs>
 8006d14:	0003      	movs	r3, r0
 8006d16:	22ff      	movs	r2, #255	; 0xff
 8006d18:	401a      	ands	r2, r3
 8006d1a:	0010      	movs	r0, r2
 8006d1c:	7822      	ldrb	r2, [r4, #0]
 8006d1e:	2100      	movs	r1, #0
 8006d20:	400a      	ands	r2, r1
 8006d22:	1c11      	adds	r1, r2, #0
 8006d24:	1c02      	adds	r2, r0, #0
 8006d26:	430a      	orrs	r2, r1
 8006d28:	7022      	strb	r2, [r4, #0]
 8006d2a:	0a1b      	lsrs	r3, r3, #8
 8006d2c:	b299      	uxth	r1, r3
 8006d2e:	7863      	ldrb	r3, [r4, #1]
 8006d30:	2200      	movs	r2, #0
 8006d32:	4013      	ands	r3, r2
 8006d34:	1c1a      	adds	r2, r3, #0
 8006d36:	1c0b      	adds	r3, r1, #0
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	7063      	strb	r3, [r4, #1]
  tcphdr->dest = ntohs(tcphdr->dest);
 8006d3c:	4b7c      	ldr	r3, [pc, #496]	; (8006f30 <tcp_input+0x360>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	789a      	ldrb	r2, [r3, #2]
 8006d42:	78db      	ldrb	r3, [r3, #3]
 8006d44:	021b      	lsls	r3, r3, #8
 8006d46:	4313      	orrs	r3, r2
 8006d48:	b29a      	uxth	r2, r3
 8006d4a:	4b79      	ldr	r3, [pc, #484]	; (8006f30 <tcp_input+0x360>)
 8006d4c:	681c      	ldr	r4, [r3, #0]
 8006d4e:	0010      	movs	r0, r2
 8006d50:	f7fd fc76 	bl	8004640 <lwip_ntohs>
 8006d54:	0003      	movs	r3, r0
 8006d56:	22ff      	movs	r2, #255	; 0xff
 8006d58:	401a      	ands	r2, r3
 8006d5a:	0010      	movs	r0, r2
 8006d5c:	78a2      	ldrb	r2, [r4, #2]
 8006d5e:	2100      	movs	r1, #0
 8006d60:	400a      	ands	r2, r1
 8006d62:	1c11      	adds	r1, r2, #0
 8006d64:	1c02      	adds	r2, r0, #0
 8006d66:	430a      	orrs	r2, r1
 8006d68:	70a2      	strb	r2, [r4, #2]
 8006d6a:	0a1b      	lsrs	r3, r3, #8
 8006d6c:	b299      	uxth	r1, r3
 8006d6e:	78e3      	ldrb	r3, [r4, #3]
 8006d70:	2200      	movs	r2, #0
 8006d72:	4013      	ands	r3, r2
 8006d74:	1c1a      	adds	r2, r3, #0
 8006d76:	1c0b      	adds	r3, r1, #0
 8006d78:	4313      	orrs	r3, r2
 8006d7a:	70e3      	strb	r3, [r4, #3]
  seqno = tcphdr->seqno = ntohl(tcphdr->seqno);
 8006d7c:	4b6c      	ldr	r3, [pc, #432]	; (8006f30 <tcp_input+0x360>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	791a      	ldrb	r2, [r3, #4]
 8006d82:	7959      	ldrb	r1, [r3, #5]
 8006d84:	0209      	lsls	r1, r1, #8
 8006d86:	430a      	orrs	r2, r1
 8006d88:	7999      	ldrb	r1, [r3, #6]
 8006d8a:	0409      	lsls	r1, r1, #16
 8006d8c:	430a      	orrs	r2, r1
 8006d8e:	79db      	ldrb	r3, [r3, #7]
 8006d90:	061b      	lsls	r3, r3, #24
 8006d92:	4313      	orrs	r3, r2
 8006d94:	001a      	movs	r2, r3
 8006d96:	4b66      	ldr	r3, [pc, #408]	; (8006f30 <tcp_input+0x360>)
 8006d98:	681c      	ldr	r4, [r3, #0]
 8006d9a:	0010      	movs	r0, r2
 8006d9c:	f7fd fc79 	bl	8004692 <lwip_ntohl>
 8006da0:	0003      	movs	r3, r0
 8006da2:	22ff      	movs	r2, #255	; 0xff
 8006da4:	401a      	ands	r2, r3
 8006da6:	0010      	movs	r0, r2
 8006da8:	7922      	ldrb	r2, [r4, #4]
 8006daa:	2100      	movs	r1, #0
 8006dac:	400a      	ands	r2, r1
 8006dae:	1c11      	adds	r1, r2, #0
 8006db0:	1c02      	adds	r2, r0, #0
 8006db2:	430a      	orrs	r2, r1
 8006db4:	7122      	strb	r2, [r4, #4]
 8006db6:	0a1a      	lsrs	r2, r3, #8
 8006db8:	21ff      	movs	r1, #255	; 0xff
 8006dba:	400a      	ands	r2, r1
 8006dbc:	0010      	movs	r0, r2
 8006dbe:	7962      	ldrb	r2, [r4, #5]
 8006dc0:	2100      	movs	r1, #0
 8006dc2:	400a      	ands	r2, r1
 8006dc4:	1c11      	adds	r1, r2, #0
 8006dc6:	1c02      	adds	r2, r0, #0
 8006dc8:	430a      	orrs	r2, r1
 8006dca:	7162      	strb	r2, [r4, #5]
 8006dcc:	0c1a      	lsrs	r2, r3, #16
 8006dce:	21ff      	movs	r1, #255	; 0xff
 8006dd0:	400a      	ands	r2, r1
 8006dd2:	0010      	movs	r0, r2
 8006dd4:	79a2      	ldrb	r2, [r4, #6]
 8006dd6:	2100      	movs	r1, #0
 8006dd8:	400a      	ands	r2, r1
 8006dda:	1c11      	adds	r1, r2, #0
 8006ddc:	1c02      	adds	r2, r0, #0
 8006dde:	430a      	orrs	r2, r1
 8006de0:	71a2      	strb	r2, [r4, #6]
 8006de2:	0e19      	lsrs	r1, r3, #24
 8006de4:	79e3      	ldrb	r3, [r4, #7]
 8006de6:	2200      	movs	r2, #0
 8006de8:	4013      	ands	r3, r2
 8006dea:	1c1a      	adds	r2, r3, #0
 8006dec:	1c0b      	adds	r3, r1, #0
 8006dee:	4313      	orrs	r3, r2
 8006df0:	71e3      	strb	r3, [r4, #7]
 8006df2:	7923      	ldrb	r3, [r4, #4]
 8006df4:	7962      	ldrb	r2, [r4, #5]
 8006df6:	0212      	lsls	r2, r2, #8
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	79a2      	ldrb	r2, [r4, #6]
 8006dfc:	0412      	lsls	r2, r2, #16
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	79e2      	ldrb	r2, [r4, #7]
 8006e02:	0612      	lsls	r2, r2, #24
 8006e04:	4313      	orrs	r3, r2
 8006e06:	001a      	movs	r2, r3
 8006e08:	4b4c      	ldr	r3, [pc, #304]	; (8006f3c <tcp_input+0x36c>)
 8006e0a:	601a      	str	r2, [r3, #0]
  ackno = tcphdr->ackno = ntohl(tcphdr->ackno);
 8006e0c:	4b48      	ldr	r3, [pc, #288]	; (8006f30 <tcp_input+0x360>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	7a1a      	ldrb	r2, [r3, #8]
 8006e12:	7a59      	ldrb	r1, [r3, #9]
 8006e14:	0209      	lsls	r1, r1, #8
 8006e16:	430a      	orrs	r2, r1
 8006e18:	7a99      	ldrb	r1, [r3, #10]
 8006e1a:	0409      	lsls	r1, r1, #16
 8006e1c:	430a      	orrs	r2, r1
 8006e1e:	7adb      	ldrb	r3, [r3, #11]
 8006e20:	061b      	lsls	r3, r3, #24
 8006e22:	4313      	orrs	r3, r2
 8006e24:	001a      	movs	r2, r3
 8006e26:	4b42      	ldr	r3, [pc, #264]	; (8006f30 <tcp_input+0x360>)
 8006e28:	681c      	ldr	r4, [r3, #0]
 8006e2a:	0010      	movs	r0, r2
 8006e2c:	f7fd fc31 	bl	8004692 <lwip_ntohl>
 8006e30:	0003      	movs	r3, r0
 8006e32:	22ff      	movs	r2, #255	; 0xff
 8006e34:	401a      	ands	r2, r3
 8006e36:	0010      	movs	r0, r2
 8006e38:	7a22      	ldrb	r2, [r4, #8]
 8006e3a:	2100      	movs	r1, #0
 8006e3c:	400a      	ands	r2, r1
 8006e3e:	1c11      	adds	r1, r2, #0
 8006e40:	1c02      	adds	r2, r0, #0
 8006e42:	430a      	orrs	r2, r1
 8006e44:	7222      	strb	r2, [r4, #8]
 8006e46:	0a1a      	lsrs	r2, r3, #8
 8006e48:	21ff      	movs	r1, #255	; 0xff
 8006e4a:	400a      	ands	r2, r1
 8006e4c:	0010      	movs	r0, r2
 8006e4e:	7a62      	ldrb	r2, [r4, #9]
 8006e50:	2100      	movs	r1, #0
 8006e52:	400a      	ands	r2, r1
 8006e54:	1c11      	adds	r1, r2, #0
 8006e56:	1c02      	adds	r2, r0, #0
 8006e58:	430a      	orrs	r2, r1
 8006e5a:	7262      	strb	r2, [r4, #9]
 8006e5c:	0c1a      	lsrs	r2, r3, #16
 8006e5e:	21ff      	movs	r1, #255	; 0xff
 8006e60:	400a      	ands	r2, r1
 8006e62:	0010      	movs	r0, r2
 8006e64:	7aa2      	ldrb	r2, [r4, #10]
 8006e66:	2100      	movs	r1, #0
 8006e68:	400a      	ands	r2, r1
 8006e6a:	1c11      	adds	r1, r2, #0
 8006e6c:	1c02      	adds	r2, r0, #0
 8006e6e:	430a      	orrs	r2, r1
 8006e70:	72a2      	strb	r2, [r4, #10]
 8006e72:	0e19      	lsrs	r1, r3, #24
 8006e74:	7ae3      	ldrb	r3, [r4, #11]
 8006e76:	2200      	movs	r2, #0
 8006e78:	4013      	ands	r3, r2
 8006e7a:	1c1a      	adds	r2, r3, #0
 8006e7c:	1c0b      	adds	r3, r1, #0
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	72e3      	strb	r3, [r4, #11]
 8006e82:	7a23      	ldrb	r3, [r4, #8]
 8006e84:	7a62      	ldrb	r2, [r4, #9]
 8006e86:	0212      	lsls	r2, r2, #8
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	7aa2      	ldrb	r2, [r4, #10]
 8006e8c:	0412      	lsls	r2, r2, #16
 8006e8e:	4313      	orrs	r3, r2
 8006e90:	7ae2      	ldrb	r2, [r4, #11]
 8006e92:	0612      	lsls	r2, r2, #24
 8006e94:	4313      	orrs	r3, r2
 8006e96:	001a      	movs	r2, r3
 8006e98:	4b29      	ldr	r3, [pc, #164]	; (8006f40 <tcp_input+0x370>)
 8006e9a:	601a      	str	r2, [r3, #0]
  tcphdr->wnd = ntohs(tcphdr->wnd);
 8006e9c:	4b24      	ldr	r3, [pc, #144]	; (8006f30 <tcp_input+0x360>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	7b9a      	ldrb	r2, [r3, #14]
 8006ea2:	7bdb      	ldrb	r3, [r3, #15]
 8006ea4:	021b      	lsls	r3, r3, #8
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	b29a      	uxth	r2, r3
 8006eaa:	4b21      	ldr	r3, [pc, #132]	; (8006f30 <tcp_input+0x360>)
 8006eac:	681c      	ldr	r4, [r3, #0]
 8006eae:	0010      	movs	r0, r2
 8006eb0:	f7fd fbc6 	bl	8004640 <lwip_ntohs>
 8006eb4:	0003      	movs	r3, r0
 8006eb6:	22ff      	movs	r2, #255	; 0xff
 8006eb8:	401a      	ands	r2, r3
 8006eba:	0010      	movs	r0, r2
 8006ebc:	7ba2      	ldrb	r2, [r4, #14]
 8006ebe:	2100      	movs	r1, #0
 8006ec0:	400a      	ands	r2, r1
 8006ec2:	1c11      	adds	r1, r2, #0
 8006ec4:	1c02      	adds	r2, r0, #0
 8006ec6:	430a      	orrs	r2, r1
 8006ec8:	73a2      	strb	r2, [r4, #14]
 8006eca:	0a1b      	lsrs	r3, r3, #8
 8006ecc:	b299      	uxth	r1, r3
 8006ece:	7be3      	ldrb	r3, [r4, #15]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	4013      	ands	r3, r2
 8006ed4:	1c1a      	adds	r2, r3, #0
 8006ed6:	1c0b      	adds	r3, r1, #0
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	73e3      	strb	r3, [r4, #15]

  flags = TCPH_FLAGS(tcphdr);
 8006edc:	4b14      	ldr	r3, [pc, #80]	; (8006f30 <tcp_input+0x360>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	7b1a      	ldrb	r2, [r3, #12]
 8006ee2:	7b5b      	ldrb	r3, [r3, #13]
 8006ee4:	021b      	lsls	r3, r3, #8
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	b29b      	uxth	r3, r3
 8006eea:	0018      	movs	r0, r3
 8006eec:	f7fd fba8 	bl	8004640 <lwip_ntohs>
 8006ef0:	0003      	movs	r3, r0
 8006ef2:	b2db      	uxtb	r3, r3
 8006ef4:	223f      	movs	r2, #63	; 0x3f
 8006ef6:	4013      	ands	r3, r2
 8006ef8:	b2da      	uxtb	r2, r3
 8006efa:	4b12      	ldr	r3, [pc, #72]	; (8006f44 <tcp_input+0x374>)
 8006efc:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	891a      	ldrh	r2, [r3, #8]
 8006f02:	4b10      	ldr	r3, [pc, #64]	; (8006f44 <tcp_input+0x374>)
 8006f04:	781b      	ldrb	r3, [r3, #0]
 8006f06:	0019      	movs	r1, r3
 8006f08:	2303      	movs	r3, #3
 8006f0a:	400b      	ands	r3, r1
 8006f0c:	1e59      	subs	r1, r3, #1
 8006f0e:	418b      	sbcs	r3, r1
 8006f10:	b2db      	uxtb	r3, r3
 8006f12:	b29b      	uxth	r3, r3
 8006f14:	18d3      	adds	r3, r2, r3
 8006f16:	b29a      	uxth	r2, r3
 8006f18:	4b0b      	ldr	r3, [pc, #44]	; (8006f48 <tcp_input+0x378>)
 8006f1a:	801a      	strh	r2, [r3, #0]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	613b      	str	r3, [r7, #16]

  
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006f20:	4b0a      	ldr	r3, [pc, #40]	; (8006f4c <tcp_input+0x37c>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	617b      	str	r3, [r7, #20]
 8006f26:	e049      	b.n	8006fbc <tcp_input+0x3ec>
 8006f28:	20003158 	.word	0x20003158
 8006f2c:	20002290 	.word	0x20002290
 8006f30:	2000228c 	.word	0x2000228c
 8006f34:	2000329c 	.word	0x2000329c
 8006f38:	20003294 	.word	0x20003294
 8006f3c:	20002294 	.word	0x20002294
 8006f40:	20002298 	.word	0x20002298
 8006f44:	2000229c 	.word	0x2000229c
 8006f48:	2000229e 	.word	0x2000229e
 8006f4c:	20003274 	.word	0x20003274
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
    if (pcb->remote_port == tcphdr->src &&
 8006f50:	697b      	ldr	r3, [r7, #20]
 8006f52:	8b9a      	ldrh	r2, [r3, #28]
 8006f54:	4bcc      	ldr	r3, [pc, #816]	; (8007288 <tcp_input+0x6b8>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	7819      	ldrb	r1, [r3, #0]
 8006f5a:	785b      	ldrb	r3, [r3, #1]
 8006f5c:	021b      	lsls	r3, r3, #8
 8006f5e:	430b      	orrs	r3, r1
 8006f60:	b29b      	uxth	r3, r3
 8006f62:	429a      	cmp	r2, r3
 8006f64:	d125      	bne.n	8006fb2 <tcp_input+0x3e2>
       pcb->local_port == tcphdr->dest &&
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	8b5a      	ldrh	r2, [r3, #26]
 8006f6a:	4bc7      	ldr	r3, [pc, #796]	; (8007288 <tcp_input+0x6b8>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	7899      	ldrb	r1, [r3, #2]
 8006f70:	78db      	ldrb	r3, [r3, #3]
 8006f72:	021b      	lsls	r3, r3, #8
 8006f74:	430b      	orrs	r3, r1
 8006f76:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8006f78:	429a      	cmp	r2, r3
 8006f7a:	d11a      	bne.n	8006fb2 <tcp_input+0x3e2>
       ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src) &&
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	685a      	ldr	r2, [r3, #4]
 8006f80:	4bc2      	ldr	r3, [pc, #776]	; (800728c <tcp_input+0x6bc>)
 8006f82:	681b      	ldr	r3, [r3, #0]
       pcb->local_port == tcphdr->dest &&
 8006f84:	429a      	cmp	r2, r3
 8006f86:	d114      	bne.n	8006fb2 <tcp_input+0x3e2>
       ip_addr_cmp(&(pcb->local_ip), &current_iphdr_dest)) {
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	681a      	ldr	r2, [r3, #0]
 8006f8c:	4bc0      	ldr	r3, [pc, #768]	; (8007290 <tcp_input+0x6c0>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
       ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src) &&
 8006f90:	429a      	cmp	r2, r3
 8006f92:	d10e      	bne.n	8006fb2 <tcp_input+0x3e2>

      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
      if (prev != NULL) {
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d014      	beq.n	8006fc4 <tcp_input+0x3f4>
        prev->next = pcb->next;
 8006f9a:	697b      	ldr	r3, [r7, #20]
 8006f9c:	68da      	ldr	r2, [r3, #12]
 8006f9e:	693b      	ldr	r3, [r7, #16]
 8006fa0:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8006fa2:	4bbc      	ldr	r3, [pc, #752]	; (8007294 <tcp_input+0x6c4>)
 8006fa4:	681a      	ldr	r2, [r3, #0]
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8006faa:	4bba      	ldr	r3, [pc, #744]	; (8007294 <tcp_input+0x6c4>)
 8006fac:	697a      	ldr	r2, [r7, #20]
 8006fae:	601a      	str	r2, [r3, #0]
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
      break;
 8006fb0:	e008      	b.n	8006fc4 <tcp_input+0x3f4>
    }
    prev = pcb;
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	613b      	str	r3, [r7, #16]
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	68db      	ldr	r3, [r3, #12]
 8006fba:	617b      	str	r3, [r7, #20]
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d1c6      	bne.n	8006f50 <tcp_input+0x380>
 8006fc2:	e000      	b.n	8006fc6 <tcp_input+0x3f6>
      break;
 8006fc4:	46c0      	nop			; (mov r8, r8)
  }

  if (pcb == NULL) {
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d000      	beq.n	8006fce <tcp_input+0x3fe>
 8006fcc:	e074      	b.n	80070b8 <tcp_input+0x4e8>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006fce:	4bb2      	ldr	r3, [pc, #712]	; (8007298 <tcp_input+0x6c8>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	617b      	str	r3, [r7, #20]
 8006fd4:	e02d      	b.n	8007032 <tcp_input+0x462>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
      if (pcb->remote_port == tcphdr->src &&
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	8b9a      	ldrh	r2, [r3, #28]
 8006fda:	4bab      	ldr	r3, [pc, #684]	; (8007288 <tcp_input+0x6b8>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	7819      	ldrb	r1, [r3, #0]
 8006fe0:	785b      	ldrb	r3, [r3, #1]
 8006fe2:	021b      	lsls	r3, r3, #8
 8006fe4:	430b      	orrs	r3, r1
 8006fe6:	b29b      	uxth	r3, r3
 8006fe8:	429a      	cmp	r2, r3
 8006fea:	d11f      	bne.n	800702c <tcp_input+0x45c>
         pcb->local_port == tcphdr->dest &&
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	8b5a      	ldrh	r2, [r3, #26]
 8006ff0:	4ba5      	ldr	r3, [pc, #660]	; (8007288 <tcp_input+0x6b8>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	7899      	ldrb	r1, [r3, #2]
 8006ff6:	78db      	ldrb	r3, [r3, #3]
 8006ff8:	021b      	lsls	r3, r3, #8
 8006ffa:	430b      	orrs	r3, r1
 8006ffc:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8006ffe:	429a      	cmp	r2, r3
 8007000:	d114      	bne.n	800702c <tcp_input+0x45c>
         ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src) &&
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	685a      	ldr	r2, [r3, #4]
 8007006:	4ba1      	ldr	r3, [pc, #644]	; (800728c <tcp_input+0x6bc>)
 8007008:	681b      	ldr	r3, [r3, #0]
         pcb->local_port == tcphdr->dest &&
 800700a:	429a      	cmp	r2, r3
 800700c:	d10e      	bne.n	800702c <tcp_input+0x45c>
         ip_addr_cmp(&(pcb->local_ip), &current_iphdr_dest)) {
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	681a      	ldr	r2, [r3, #0]
 8007012:	4b9f      	ldr	r3, [pc, #636]	; (8007290 <tcp_input+0x6c0>)
 8007014:	681b      	ldr	r3, [r3, #0]
         ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src) &&
 8007016:	429a      	cmp	r2, r3
 8007018:	d108      	bne.n	800702c <tcp_input+0x45c>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	0018      	movs	r0, r3
 800701e:	f000 fb23 	bl	8007668 <tcp_timewait_input>
        pbuf_free(p);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	0018      	movs	r0, r3
 8007026:	f7fe fb3d 	bl	80056a4 <pbuf_free>
        return;
 800702a:	e211      	b.n	8007450 <tcp_input+0x880>
    for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	68db      	ldr	r3, [r3, #12]
 8007030:	617b      	str	r3, [r7, #20]
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d1ce      	bne.n	8006fd6 <tcp_input+0x406>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8007038:	2300      	movs	r3, #0
 800703a:	613b      	str	r3, [r7, #16]
    for(lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800703c:	4b97      	ldr	r3, [pc, #604]	; (800729c <tcp_input+0x6cc>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	60fb      	str	r3, [r7, #12]
 8007042:	e01c      	b.n	800707e <tcp_input+0x4ae>
      if (lpcb->local_port == tcphdr->dest) {
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	8b5a      	ldrh	r2, [r3, #26]
 8007048:	4b8f      	ldr	r3, [pc, #572]	; (8007288 <tcp_input+0x6b8>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	7899      	ldrb	r1, [r3, #2]
 800704e:	78db      	ldrb	r3, [r3, #3]
 8007050:	021b      	lsls	r3, r3, #8
 8007052:	430b      	orrs	r3, r1
 8007054:	b29b      	uxth	r3, r3
 8007056:	429a      	cmp	r2, r3
 8007058:	d10c      	bne.n	8007074 <tcp_input+0x4a4>
          /* found an ANY-match */
          lpcb_any = lpcb;
          lpcb_prev = prev;
        }
#else /* SO_REUSE */
        if (ip_addr_cmp(&(lpcb->local_ip), &current_iphdr_dest) ||
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681a      	ldr	r2, [r3, #0]
 800705e:	4b8c      	ldr	r3, [pc, #560]	; (8007290 <tcp_input+0x6c0>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	429a      	cmp	r2, r3
 8007064:	d00e      	beq.n	8007084 <tcp_input+0x4b4>
            ip_addr_isany(&(lpcb->local_ip))) {
 8007066:	68fb      	ldr	r3, [r7, #12]
        if (ip_addr_cmp(&(lpcb->local_ip), &current_iphdr_dest) ||
 8007068:	2b00      	cmp	r3, #0
 800706a:	d00b      	beq.n	8007084 <tcp_input+0x4b4>
            ip_addr_isany(&(lpcb->local_ip))) {
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d007      	beq.n	8007084 <tcp_input+0x4b4>
          /* found a match */
          break;
        }
#endif /* SO_REUSE */
      }
      prev = (struct tcp_pcb *)lpcb;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	613b      	str	r3, [r7, #16]
    for(lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	68db      	ldr	r3, [r3, #12]
 800707c:	60fb      	str	r3, [r7, #12]
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d1df      	bne.n	8007044 <tcp_input+0x474>
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d016      	beq.n	80070b8 <tcp_input+0x4e8>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800708a:	693b      	ldr	r3, [r7, #16]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d00a      	beq.n	80070a6 <tcp_input+0x4d6>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	68da      	ldr	r2, [r3, #12]
 8007094:	693b      	ldr	r3, [r7, #16]
 8007096:	60da      	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8007098:	4b80      	ldr	r3, [pc, #512]	; (800729c <tcp_input+0x6cc>)
 800709a:	681a      	ldr	r2, [r3, #0]
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	60da      	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80070a0:	4b7e      	ldr	r3, [pc, #504]	; (800729c <tcp_input+0x6cc>)
 80070a2:	68fa      	ldr	r2, [r7, #12]
 80070a4:	601a      	str	r2, [r3, #0]
      }
    
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	0018      	movs	r0, r3
 80070aa:	f000 f9ed 	bl	8007488 <tcp_listen_input>
      pbuf_free(p);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	0018      	movs	r0, r3
 80070b2:	f7fe faf7 	bl	80056a4 <pbuf_free>
      return;
 80070b6:	e1cb      	b.n	8007450 <tcp_input+0x880>
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d100      	bne.n	80070c0 <tcp_input+0x4f0>
 80070be:	e176      	b.n	80073ae <tcp_input+0x7de>
    tcp_debug_print_state(pcb->state);
#endif /* TCP_DEBUG */
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80070c0:	4b77      	ldr	r3, [pc, #476]	; (80072a0 <tcp_input+0x6d0>)
 80070c2:	2200      	movs	r2, #0
 80070c4:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	891a      	ldrh	r2, [r3, #8]
 80070ca:	4b75      	ldr	r3, [pc, #468]	; (80072a0 <tcp_input+0x6d0>)
 80070cc:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80070ce:	4b74      	ldr	r3, [pc, #464]	; (80072a0 <tcp_input+0x6d0>)
 80070d0:	687a      	ldr	r2, [r7, #4]
 80070d2:	605a      	str	r2, [r3, #4]
    inseg.tcphdr = tcphdr;
 80070d4:	4b6c      	ldr	r3, [pc, #432]	; (8007288 <tcp_input+0x6b8>)
 80070d6:	681a      	ldr	r2, [r3, #0]
 80070d8:	4b71      	ldr	r3, [pc, #452]	; (80072a0 <tcp_input+0x6d0>)
 80070da:	60da      	str	r2, [r3, #12]

    recv_data = NULL;
 80070dc:	4b71      	ldr	r3, [pc, #452]	; (80072a4 <tcp_input+0x6d4>)
 80070de:	2200      	movs	r2, #0
 80070e0:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80070e2:	4b71      	ldr	r3, [pc, #452]	; (80072a8 <tcp_input+0x6d8>)
 80070e4:	2200      	movs	r2, #0
 80070e6:	701a      	strb	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80070e8:	4b70      	ldr	r3, [pc, #448]	; (80072ac <tcp_input+0x6dc>)
 80070ea:	781b      	ldrb	r3, [r3, #0]
 80070ec:	001a      	movs	r2, r3
 80070ee:	2308      	movs	r3, #8
 80070f0:	4013      	ands	r3, r2
 80070f2:	d006      	beq.n	8007102 <tcp_input+0x532>
      p->flags |= PBUF_FLAG_PUSH;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	7b5b      	ldrb	r3, [r3, #13]
 80070f8:	2201      	movs	r2, #1
 80070fa:	4313      	orrs	r3, r2
 80070fc:	b2da      	uxtb	r2, r3
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007106:	2b00      	cmp	r3, #0
 8007108:	d017      	beq.n	800713a <tcp_input+0x56a>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	0018      	movs	r0, r3
 800710e:	f7ff fa79 	bl	8006604 <tcp_process_refused_data>
 8007112:	0003      	movs	r3, r0
 8007114:	330a      	adds	r3, #10
 8007116:	d007      	beq.n	8007128 <tcp_input+0x558>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8007118:	697b      	ldr	r3, [r7, #20]
 800711a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800711c:	2b00      	cmp	r3, #0
 800711e:	d00c      	beq.n	800713a <tcp_input+0x56a>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8007120:	4b63      	ldr	r3, [pc, #396]	; (80072b0 <tcp_input+0x6e0>)
 8007122:	881b      	ldrh	r3, [r3, #0]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d008      	beq.n	800713a <tcp_input+0x56a>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        TCP_STATS_INC(tcp.drop);
 8007128:	4b62      	ldr	r3, [pc, #392]	; (80072b4 <tcp_input+0x6e4>)
 800712a:	2296      	movs	r2, #150	; 0x96
 800712c:	5a9b      	ldrh	r3, [r3, r2]
 800712e:	3301      	adds	r3, #1
 8007130:	b299      	uxth	r1, r3
 8007132:	4b60      	ldr	r3, [pc, #384]	; (80072b4 <tcp_input+0x6e4>)
 8007134:	2296      	movs	r2, #150	; 0x96
 8007136:	5299      	strh	r1, [r3, r2]
        snmp_inc_tcpinerrs();
        goto aborted;
 8007138:	e126      	b.n	8007388 <tcp_input+0x7b8>
      }
    }
    tcp_input_pcb = pcb;
 800713a:	4b5f      	ldr	r3, [pc, #380]	; (80072b8 <tcp_input+0x6e8>)
 800713c:	697a      	ldr	r2, [r7, #20]
 800713e:	601a      	str	r2, [r3, #0]
    err = tcp_process(pcb);
 8007140:	250b      	movs	r5, #11
 8007142:	197c      	adds	r4, r7, r5
 8007144:	697b      	ldr	r3, [r7, #20]
 8007146:	0018      	movs	r0, r3
 8007148:	f000 fb02 	bl	8007750 <tcp_process>
 800714c:	0003      	movs	r3, r0
 800714e:	7023      	strb	r3, [r4, #0]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8007150:	197b      	adds	r3, r7, r5
 8007152:	781b      	ldrb	r3, [r3, #0]
 8007154:	b25b      	sxtb	r3, r3
 8007156:	330a      	adds	r3, #10
 8007158:	d100      	bne.n	800715c <tcp_input+0x58c>
 800715a:	e10e      	b.n	800737a <tcp_input+0x7aa>
      if (recv_flags & TF_RESET) {
 800715c:	4b52      	ldr	r3, [pc, #328]	; (80072a8 <tcp_input+0x6d8>)
 800715e:	781b      	ldrb	r3, [r3, #0]
 8007160:	001a      	movs	r2, r3
 8007162:	2308      	movs	r3, #8
 8007164:	4013      	ands	r3, r2
 8007166:	d019      	beq.n	800719c <tcp_input+0x5cc>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->errf, pcb->callback_arg, ERR_RST);
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	228c      	movs	r2, #140	; 0x8c
 800716c:	589b      	ldr	r3, [r3, r2]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d008      	beq.n	8007184 <tcp_input+0x5b4>
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	228c      	movs	r2, #140	; 0x8c
 8007176:	589a      	ldr	r2, [r3, r2]
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	6918      	ldr	r0, [r3, #16]
 800717c:	230b      	movs	r3, #11
 800717e:	425b      	negs	r3, r3
 8007180:	0019      	movs	r1, r3
 8007182:	4790      	blx	r2
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8007184:	697a      	ldr	r2, [r7, #20]
 8007186:	4b43      	ldr	r3, [pc, #268]	; (8007294 <tcp_input+0x6c4>)
 8007188:	0011      	movs	r1, r2
 800718a:	0018      	movs	r0, r3
 800718c:	f7ff fc8e 	bl	8006aac <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 8007190:	697b      	ldr	r3, [r7, #20]
 8007192:	0019      	movs	r1, r3
 8007194:	2002      	movs	r0, #2
 8007196:	f7fd fec3 	bl	8004f20 <memp_free>
 800719a:	e0f5      	b.n	8007388 <tcp_input+0x7b8>
      } else if (recv_flags & TF_CLOSED) {
 800719c:	4b42      	ldr	r3, [pc, #264]	; (80072a8 <tcp_input+0x6d8>)
 800719e:	781b      	ldrb	r3, [r3, #0]
 80071a0:	001a      	movs	r2, r3
 80071a2:	2310      	movs	r3, #16
 80071a4:	4013      	ands	r3, r2
 80071a6:	d01f      	beq.n	80071e8 <tcp_input+0x618>
        /* The connection has been closed and we will deallocate the
           PCB. */
        if (!(pcb->flags & TF_RXCLOSED)) {
 80071a8:	697b      	ldr	r3, [r7, #20]
 80071aa:	7f9b      	ldrb	r3, [r3, #30]
 80071ac:	001a      	movs	r2, r3
 80071ae:	2310      	movs	r3, #16
 80071b0:	4013      	ands	r3, r2
 80071b2:	d10d      	bne.n	80071d0 <tcp_input+0x600>
          /* Connection closed although the application has only shut down the
             tx side: call the PCB's err callback and indicate the closure to
             ensure the application doesn't continue using the PCB. */
          TCP_EVENT_ERR(pcb->errf, pcb->callback_arg, ERR_CLSD);
 80071b4:	697b      	ldr	r3, [r7, #20]
 80071b6:	228c      	movs	r2, #140	; 0x8c
 80071b8:	589b      	ldr	r3, [r3, r2]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d008      	beq.n	80071d0 <tcp_input+0x600>
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	228c      	movs	r2, #140	; 0x8c
 80071c2:	589a      	ldr	r2, [r3, r2]
 80071c4:	697b      	ldr	r3, [r7, #20]
 80071c6:	6918      	ldr	r0, [r3, #16]
 80071c8:	230c      	movs	r3, #12
 80071ca:	425b      	negs	r3, r3
 80071cc:	0019      	movs	r1, r3
 80071ce:	4790      	blx	r2
        }
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80071d0:	697a      	ldr	r2, [r7, #20]
 80071d2:	4b30      	ldr	r3, [pc, #192]	; (8007294 <tcp_input+0x6c4>)
 80071d4:	0011      	movs	r1, r2
 80071d6:	0018      	movs	r0, r3
 80071d8:	f7ff fc68 	bl	8006aac <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 80071dc:	697b      	ldr	r3, [r7, #20]
 80071de:	0019      	movs	r1, r3
 80071e0:	2002      	movs	r0, #2
 80071e2:	f7fd fe9d 	bl	8004f20 <memp_free>
 80071e6:	e0cf      	b.n	8007388 <tcp_input+0x7b8>
      } else {
        err = ERR_OK;
 80071e8:	230b      	movs	r3, #11
 80071ea:	18fb      	adds	r3, r7, r3
 80071ec:	2200      	movs	r2, #0
 80071ee:	701a      	strb	r2, [r3, #0]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (pcb->acked > 0) {
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	2264      	movs	r2, #100	; 0x64
 80071f4:	5a9b      	ldrh	r3, [r3, r2]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d01d      	beq.n	8007236 <tcp_input+0x666>
          TCP_EVENT_SENT(pcb, pcb->acked, err);
 80071fa:	697b      	ldr	r3, [r7, #20]
 80071fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d00e      	beq.n	8007220 <tcp_input+0x650>
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	6fdd      	ldr	r5, [r3, #124]	; 0x7c
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	6918      	ldr	r0, [r3, #16]
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	2264      	movs	r2, #100	; 0x64
 800720e:	5a9a      	ldrh	r2, [r3, r2]
 8007210:	230b      	movs	r3, #11
 8007212:	18fc      	adds	r4, r7, r3
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	0019      	movs	r1, r3
 8007218:	47a8      	blx	r5
 800721a:	0003      	movs	r3, r0
 800721c:	7023      	strb	r3, [r4, #0]
 800721e:	e003      	b.n	8007228 <tcp_input+0x658>
 8007220:	230b      	movs	r3, #11
 8007222:	18fb      	adds	r3, r7, r3
 8007224:	2200      	movs	r2, #0
 8007226:	701a      	strb	r2, [r3, #0]
          if (err == ERR_ABRT) {
 8007228:	230b      	movs	r3, #11
 800722a:	18fb      	adds	r3, r7, r3
 800722c:	781b      	ldrb	r3, [r3, #0]
 800722e:	b25b      	sxtb	r3, r3
 8007230:	330a      	adds	r3, #10
 8007232:	d100      	bne.n	8007236 <tcp_input+0x666>
 8007234:	e0a3      	b.n	800737e <tcp_input+0x7ae>
            goto aborted;
          }
        }

        if (recv_data != NULL) {
 8007236:	4b1b      	ldr	r3, [pc, #108]	; (80072a4 <tcp_input+0x6d4>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d059      	beq.n	80072f2 <tcp_input+0x722>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
          if (pcb->flags & TF_RXCLOSED) {
 800723e:	697b      	ldr	r3, [r7, #20]
 8007240:	7f9b      	ldrb	r3, [r3, #30]
 8007242:	001a      	movs	r2, r3
 8007244:	2310      	movs	r3, #16
 8007246:	4013      	ands	r3, r2
 8007248:	d009      	beq.n	800725e <tcp_input+0x68e>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800724a:	4b16      	ldr	r3, [pc, #88]	; (80072a4 <tcp_input+0x6d4>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	0018      	movs	r0, r3
 8007250:	f7fe fa28 	bl	80056a4 <pbuf_free>
            tcp_abort(pcb);
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	0018      	movs	r0, r3
 8007258:	f7fe fe90 	bl	8005f7c <tcp_abort>
            goto aborted;
 800725c:	e094      	b.n	8007388 <tcp_input+0x7b8>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	2280      	movs	r2, #128	; 0x80
 8007262:	589b      	ldr	r3, [r3, r2]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d029      	beq.n	80072bc <tcp_input+0x6ec>
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	2280      	movs	r2, #128	; 0x80
 800726c:	589d      	ldr	r5, [r3, r2]
 800726e:	697b      	ldr	r3, [r7, #20]
 8007270:	6918      	ldr	r0, [r3, #16]
 8007272:	4b0c      	ldr	r3, [pc, #48]	; (80072a4 <tcp_input+0x6d4>)
 8007274:	681a      	ldr	r2, [r3, #0]
 8007276:	230b      	movs	r3, #11
 8007278:	18fc      	adds	r4, r7, r3
 800727a:	6979      	ldr	r1, [r7, #20]
 800727c:	2300      	movs	r3, #0
 800727e:	47a8      	blx	r5
 8007280:	0003      	movs	r3, r0
 8007282:	7023      	strb	r3, [r4, #0]
 8007284:	e025      	b.n	80072d2 <tcp_input+0x702>
 8007286:	46c0      	nop			; (mov r8, r8)
 8007288:	2000228c 	.word	0x2000228c
 800728c:	20003294 	.word	0x20003294
 8007290:	2000329c 	.word	0x2000329c
 8007294:	20003274 	.word	0x20003274
 8007298:	20003288 	.word	0x20003288
 800729c:	2000327c 	.word	0x2000327c
 80072a0:	2000227c 	.word	0x2000227c
 80072a4:	200022a4 	.word	0x200022a4
 80072a8:	200022a0 	.word	0x200022a0
 80072ac:	2000229c 	.word	0x2000229c
 80072b0:	2000229e 	.word	0x2000229e
 80072b4:	20003158 	.word	0x20003158
 80072b8:	2000328c 	.word	0x2000328c
 80072bc:	4b66      	ldr	r3, [pc, #408]	; (8007458 <tcp_input+0x888>)
 80072be:	681a      	ldr	r2, [r3, #0]
 80072c0:	230b      	movs	r3, #11
 80072c2:	18fc      	adds	r4, r7, r3
 80072c4:	6979      	ldr	r1, [r7, #20]
 80072c6:	2300      	movs	r3, #0
 80072c8:	2000      	movs	r0, #0
 80072ca:	f7ff fa5f 	bl	800678c <tcp_recv_null>
 80072ce:	0003      	movs	r3, r0
 80072d0:	7023      	strb	r3, [r4, #0]
          if (err == ERR_ABRT) {
 80072d2:	230b      	movs	r3, #11
 80072d4:	18fb      	adds	r3, r7, r3
 80072d6:	781b      	ldrb	r3, [r3, #0]
 80072d8:	b25b      	sxtb	r3, r3
 80072da:	330a      	adds	r3, #10
 80072dc:	d051      	beq.n	8007382 <tcp_input+0x7b2>
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80072de:	230b      	movs	r3, #11
 80072e0:	18fb      	adds	r3, r7, r3
 80072e2:	781b      	ldrb	r3, [r3, #0]
 80072e4:	b25b      	sxtb	r3, r3
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d003      	beq.n	80072f2 <tcp_input+0x722>
            pcb->refused_data = recv_data;
 80072ea:	4b5b      	ldr	r3, [pc, #364]	; (8007458 <tcp_input+0x888>)
 80072ec:	681a      	ldr	r2, [r3, #0]
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80072f2:	4b5a      	ldr	r3, [pc, #360]	; (800745c <tcp_input+0x88c>)
 80072f4:	781b      	ldrb	r3, [r3, #0]
 80072f6:	001a      	movs	r2, r3
 80072f8:	2320      	movs	r3, #32
 80072fa:	4013      	ands	r3, r2
 80072fc:	d035      	beq.n	800736a <tcp_input+0x79a>
          if (pcb->refused_data != NULL) {
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007302:	2b00      	cmp	r3, #0
 8007304:	d009      	beq.n	800731a <tcp_input+0x74a>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8007306:	697b      	ldr	r3, [r7, #20]
 8007308:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800730a:	7b5a      	ldrb	r2, [r3, #13]
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007310:	2120      	movs	r1, #32
 8007312:	430a      	orrs	r2, r1
 8007314:	b2d2      	uxtb	r2, r2
 8007316:	735a      	strb	r2, [r3, #13]
 8007318:	e027      	b.n	800736a <tcp_input+0x79a>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND) {
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800731e:	4a50      	ldr	r2, [pc, #320]	; (8007460 <tcp_input+0x890>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d005      	beq.n	8007330 <tcp_input+0x760>
              pcb->rcv_wnd++;
 8007324:	697b      	ldr	r3, [r7, #20]
 8007326:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007328:	3301      	adds	r3, #1
 800732a:	b29a      	uxth	r2, r3
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	859a      	strh	r2, [r3, #44]	; 0x2c
            }
            TCP_EVENT_CLOSED(pcb, err);
 8007330:	697b      	ldr	r3, [r7, #20]
 8007332:	2280      	movs	r2, #128	; 0x80
 8007334:	589b      	ldr	r3, [r3, r2]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d00d      	beq.n	8007356 <tcp_input+0x786>
 800733a:	697b      	ldr	r3, [r7, #20]
 800733c:	2280      	movs	r2, #128	; 0x80
 800733e:	589d      	ldr	r5, [r3, r2]
 8007340:	697b      	ldr	r3, [r7, #20]
 8007342:	6918      	ldr	r0, [r3, #16]
 8007344:	230b      	movs	r3, #11
 8007346:	18fc      	adds	r4, r7, r3
 8007348:	6979      	ldr	r1, [r7, #20]
 800734a:	2300      	movs	r3, #0
 800734c:	2200      	movs	r2, #0
 800734e:	47a8      	blx	r5
 8007350:	0003      	movs	r3, r0
 8007352:	7023      	strb	r3, [r4, #0]
 8007354:	e003      	b.n	800735e <tcp_input+0x78e>
 8007356:	230b      	movs	r3, #11
 8007358:	18fb      	adds	r3, r7, r3
 800735a:	2200      	movs	r2, #0
 800735c:	701a      	strb	r2, [r3, #0]
            if (err == ERR_ABRT) {
 800735e:	230b      	movs	r3, #11
 8007360:	18fb      	adds	r3, r7, r3
 8007362:	781b      	ldrb	r3, [r3, #0]
 8007364:	b25b      	sxtb	r3, r3
 8007366:	330a      	adds	r3, #10
 8007368:	d00d      	beq.n	8007386 <tcp_input+0x7b6>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800736a:	4b3e      	ldr	r3, [pc, #248]	; (8007464 <tcp_input+0x894>)
 800736c:	2200      	movs	r2, #0
 800736e:	601a      	str	r2, [r3, #0]
        /* Try to send something out. */
        tcp_output(pcb);
 8007370:	697b      	ldr	r3, [r7, #20]
 8007372:	0018      	movs	r0, r3
 8007374:	f002 fb4c 	bl	8009a10 <tcp_output>
 8007378:	e006      	b.n	8007388 <tcp_input+0x7b8>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800737a:	46c0      	nop			; (mov r8, r8)
 800737c:	e004      	b.n	8007388 <tcp_input+0x7b8>
            goto aborted;
 800737e:	46c0      	nop			; (mov r8, r8)
 8007380:	e002      	b.n	8007388 <tcp_input+0x7b8>
            goto aborted;
 8007382:	46c0      	nop			; (mov r8, r8)
 8007384:	e000      	b.n	8007388 <tcp_input+0x7b8>
              goto aborted;
 8007386:	46c0      	nop			; (mov r8, r8)
    tcp_input_pcb = NULL;
 8007388:	4b36      	ldr	r3, [pc, #216]	; (8007464 <tcp_input+0x894>)
 800738a:	2200      	movs	r2, #0
 800738c:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800738e:	4b32      	ldr	r3, [pc, #200]	; (8007458 <tcp_input+0x888>)
 8007390:	2200      	movs	r2, #0
 8007392:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
 8007394:	4b34      	ldr	r3, [pc, #208]	; (8007468 <tcp_input+0x898>)
 8007396:	685b      	ldr	r3, [r3, #4]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d058      	beq.n	800744e <tcp_input+0x87e>
    {
      pbuf_free(inseg.p);
 800739c:	4b32      	ldr	r3, [pc, #200]	; (8007468 <tcp_input+0x898>)
 800739e:	685b      	ldr	r3, [r3, #4]
 80073a0:	0018      	movs	r0, r3
 80073a2:	f7fe f97f 	bl	80056a4 <pbuf_free>
      inseg.p = NULL;
 80073a6:	4b30      	ldr	r3, [pc, #192]	; (8007468 <tcp_input+0x898>)
 80073a8:	2200      	movs	r2, #0
 80073aa:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80073ac:	e04f      	b.n	800744e <tcp_input+0x87e>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80073ae:	4b2f      	ldr	r3, [pc, #188]	; (800746c <tcp_input+0x89c>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	7b1a      	ldrb	r2, [r3, #12]
 80073b4:	7b5b      	ldrb	r3, [r3, #13]
 80073b6:	021b      	lsls	r3, r3, #8
 80073b8:	4313      	orrs	r3, r2
 80073ba:	b29b      	uxth	r3, r3
 80073bc:	0018      	movs	r0, r3
 80073be:	f7fd f93f 	bl	8004640 <lwip_ntohs>
 80073c2:	0003      	movs	r3, r0
 80073c4:	001a      	movs	r2, r3
 80073c6:	2304      	movs	r3, #4
 80073c8:	4013      	ands	r3, r2
 80073ca:	d12e      	bne.n	800742a <tcp_input+0x85a>
      TCP_STATS_INC(tcp.proterr);
 80073cc:	4b28      	ldr	r3, [pc, #160]	; (8007470 <tcp_input+0x8a0>)
 80073ce:	22a0      	movs	r2, #160	; 0xa0
 80073d0:	5a9b      	ldrh	r3, [r3, r2]
 80073d2:	3301      	adds	r3, #1
 80073d4:	b299      	uxth	r1, r3
 80073d6:	4b26      	ldr	r3, [pc, #152]	; (8007470 <tcp_input+0x8a0>)
 80073d8:	22a0      	movs	r2, #160	; 0xa0
 80073da:	5299      	strh	r1, [r3, r2]
      TCP_STATS_INC(tcp.drop);
 80073dc:	4b24      	ldr	r3, [pc, #144]	; (8007470 <tcp_input+0x8a0>)
 80073de:	2296      	movs	r2, #150	; 0x96
 80073e0:	5a9b      	ldrh	r3, [r3, r2]
 80073e2:	3301      	adds	r3, #1
 80073e4:	b299      	uxth	r1, r3
 80073e6:	4b22      	ldr	r3, [pc, #136]	; (8007470 <tcp_input+0x8a0>)
 80073e8:	2296      	movs	r2, #150	; 0x96
 80073ea:	5299      	strh	r1, [r3, r2]
      tcp_rst(ackno, seqno + tcplen,
 80073ec:	4b21      	ldr	r3, [pc, #132]	; (8007474 <tcp_input+0x8a4>)
 80073ee:	6818      	ldr	r0, [r3, #0]
 80073f0:	4b21      	ldr	r3, [pc, #132]	; (8007478 <tcp_input+0x8a8>)
 80073f2:	881b      	ldrh	r3, [r3, #0]
 80073f4:	001a      	movs	r2, r3
 80073f6:	4b21      	ldr	r3, [pc, #132]	; (800747c <tcp_input+0x8ac>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	18d4      	adds	r4, r2, r3
        tcphdr->dest, tcphdr->src);
 80073fc:	4b1b      	ldr	r3, [pc, #108]	; (800746c <tcp_input+0x89c>)
 80073fe:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen,
 8007400:	789a      	ldrb	r2, [r3, #2]
 8007402:	78db      	ldrb	r3, [r3, #3]
 8007404:	021b      	lsls	r3, r3, #8
 8007406:	4313      	orrs	r3, r2
 8007408:	b29a      	uxth	r2, r3
        tcphdr->dest, tcphdr->src);
 800740a:	4b18      	ldr	r3, [pc, #96]	; (800746c <tcp_input+0x89c>)
 800740c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen,
 800740e:	7819      	ldrb	r1, [r3, #0]
 8007410:	785b      	ldrb	r3, [r3, #1]
 8007412:	021b      	lsls	r3, r3, #8
 8007414:	430b      	orrs	r3, r1
 8007416:	b29b      	uxth	r3, r3
 8007418:	4d19      	ldr	r5, [pc, #100]	; (8007480 <tcp_input+0x8b0>)
 800741a:	491a      	ldr	r1, [pc, #104]	; (8007484 <tcp_input+0x8b4>)
 800741c:	9301      	str	r3, [sp, #4]
 800741e:	9200      	str	r2, [sp, #0]
 8007420:	002b      	movs	r3, r5
 8007422:	000a      	movs	r2, r1
 8007424:	0021      	movs	r1, r4
 8007426:	f002 fdd1 	bl	8009fcc <tcp_rst>
    pbuf_free(p);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	0018      	movs	r0, r3
 800742e:	f7fe f939 	bl	80056a4 <pbuf_free>
  return;
 8007432:	e00c      	b.n	800744e <tcp_input+0x87e>
dropped:
  TCP_STATS_INC(tcp.drop);
 8007434:	4b0e      	ldr	r3, [pc, #56]	; (8007470 <tcp_input+0x8a0>)
 8007436:	2296      	movs	r2, #150	; 0x96
 8007438:	5a9b      	ldrh	r3, [r3, r2]
 800743a:	3301      	adds	r3, #1
 800743c:	b299      	uxth	r1, r3
 800743e:	4b0c      	ldr	r3, [pc, #48]	; (8007470 <tcp_input+0x8a0>)
 8007440:	2296      	movs	r2, #150	; 0x96
 8007442:	5299      	strh	r1, [r3, r2]
  snmp_inc_tcpinerrs();
  pbuf_free(p);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	0018      	movs	r0, r3
 8007448:	f7fe f92c 	bl	80056a4 <pbuf_free>
 800744c:	e000      	b.n	8007450 <tcp_input+0x880>
  return;
 800744e:	46c0      	nop			; (mov r8, r8)
}
 8007450:	46bd      	mov	sp, r7
 8007452:	b006      	add	sp, #24
 8007454:	bdb0      	pop	{r4, r5, r7, pc}
 8007456:	46c0      	nop			; (mov r8, r8)
 8007458:	200022a4 	.word	0x200022a4
 800745c:	200022a0 	.word	0x200022a0
 8007460:	000016d0 	.word	0x000016d0
 8007464:	2000328c 	.word	0x2000328c
 8007468:	2000227c 	.word	0x2000227c
 800746c:	2000228c 	.word	0x2000228c
 8007470:	20003158 	.word	0x20003158
 8007474:	20002298 	.word	0x20002298
 8007478:	2000229e 	.word	0x2000229e
 800747c:	20002294 	.word	0x20002294
 8007480:	20003294 	.word	0x20003294
 8007484:	2000329c 	.word	0x2000329c

08007488 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8007488:	b5b0      	push	{r4, r5, r7, lr}
 800748a:	b086      	sub	sp, #24
 800748c:	af02      	add	r7, sp, #8
 800748e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  err_t rc;

  if (flags & TCP_RST) {
 8007490:	4b6b      	ldr	r3, [pc, #428]	; (8007640 <tcp_listen_input+0x1b8>)
 8007492:	781b      	ldrb	r3, [r3, #0]
 8007494:	001a      	movs	r2, r3
 8007496:	2304      	movs	r3, #4
 8007498:	4013      	ands	r3, r2
 800749a:	d001      	beq.n	80074a0 <tcp_listen_input+0x18>
    /* An incoming RST should be ignored. Return. */
    return ERR_OK;
 800749c:	2300      	movs	r3, #0
 800749e:	e0cb      	b.n	8007638 <tcp_listen_input+0x1b0>
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80074a0:	4b67      	ldr	r3, [pc, #412]	; (8007640 <tcp_listen_input+0x1b8>)
 80074a2:	781b      	ldrb	r3, [r3, #0]
 80074a4:	001a      	movs	r2, r3
 80074a6:	2310      	movs	r3, #16
 80074a8:	4013      	ands	r3, r2
 80074aa:	d01f      	beq.n	80074ec <tcp_listen_input+0x64>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80074ac:	4b65      	ldr	r3, [pc, #404]	; (8007644 <tcp_listen_input+0x1bc>)
 80074ae:	6818      	ldr	r0, [r3, #0]
 80074b0:	4b65      	ldr	r3, [pc, #404]	; (8007648 <tcp_listen_input+0x1c0>)
 80074b2:	881b      	ldrh	r3, [r3, #0]
 80074b4:	001a      	movs	r2, r3
 80074b6:	4b65      	ldr	r3, [pc, #404]	; (800764c <tcp_listen_input+0x1c4>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	18d4      	adds	r4, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80074bc:	4b64      	ldr	r3, [pc, #400]	; (8007650 <tcp_listen_input+0x1c8>)
 80074be:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80074c0:	789a      	ldrb	r2, [r3, #2]
 80074c2:	78db      	ldrb	r3, [r3, #3]
 80074c4:	021b      	lsls	r3, r3, #8
 80074c6:	4313      	orrs	r3, r2
 80074c8:	b29a      	uxth	r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80074ca:	4b61      	ldr	r3, [pc, #388]	; (8007650 <tcp_listen_input+0x1c8>)
 80074cc:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80074ce:	7819      	ldrb	r1, [r3, #0]
 80074d0:	785b      	ldrb	r3, [r3, #1]
 80074d2:	021b      	lsls	r3, r3, #8
 80074d4:	430b      	orrs	r3, r1
 80074d6:	b29b      	uxth	r3, r3
 80074d8:	4d5e      	ldr	r5, [pc, #376]	; (8007654 <tcp_listen_input+0x1cc>)
 80074da:	495f      	ldr	r1, [pc, #380]	; (8007658 <tcp_listen_input+0x1d0>)
 80074dc:	9301      	str	r3, [sp, #4]
 80074de:	9200      	str	r2, [sp, #0]
 80074e0:	002b      	movs	r3, r5
 80074e2:	000a      	movs	r2, r1
 80074e4:	0021      	movs	r1, r4
 80074e6:	f002 fd71 	bl	8009fcc <tcp_rst>
 80074ea:	e0a4      	b.n	8007636 <tcp_listen_input+0x1ae>
  } else if (flags & TCP_SYN) {
 80074ec:	4b54      	ldr	r3, [pc, #336]	; (8007640 <tcp_listen_input+0x1b8>)
 80074ee:	781b      	ldrb	r3, [r3, #0]
 80074f0:	001a      	movs	r2, r3
 80074f2:	2302      	movs	r3, #2
 80074f4:	4013      	ands	r3, r2
 80074f6:	d100      	bne.n	80074fa <tcp_listen_input+0x72>
 80074f8:	e09d      	b.n	8007636 <tcp_listen_input+0x1ae>
    if (pcb->accepts_pending >= pcb->backlog) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_listen_input: listen backlog exceeded for port %"U16_F"\n", tcphdr->dest));
      return ERR_ABRT;
    }
#endif /* TCP_LISTEN_BACKLOG */
    npcb = tcp_alloc(pcb->prio);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	7e5b      	ldrb	r3, [r3, #25]
 80074fe:	0018      	movs	r0, r3
 8007500:	f7ff f9e6 	bl	80068d0 <tcp_alloc>
 8007504:	0003      	movs	r3, r0
 8007506:	60fb      	str	r3, [r7, #12]
    /* If a new PCB could not be created (probably due to lack of memory),
       we don't do anything, but rely on the sender will retransmit the
       SYN at a time when we have more memory available. */
    if (npcb == NULL) {
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d10a      	bne.n	8007524 <tcp_listen_input+0x9c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_listen_input: could not allocate PCB\n"));
      TCP_STATS_INC(tcp.memerr);
 800750e:	4b53      	ldr	r3, [pc, #332]	; (800765c <tcp_listen_input+0x1d4>)
 8007510:	229c      	movs	r2, #156	; 0x9c
 8007512:	5a9b      	ldrh	r3, [r3, r2]
 8007514:	3301      	adds	r3, #1
 8007516:	b299      	uxth	r1, r3
 8007518:	4b50      	ldr	r3, [pc, #320]	; (800765c <tcp_listen_input+0x1d4>)
 800751a:	229c      	movs	r2, #156	; 0x9c
 800751c:	5299      	strh	r1, [r3, r2]
      return ERR_MEM;
 800751e:	2301      	movs	r3, #1
 8007520:	425b      	negs	r3, r3
 8007522:	e089      	b.n	8007638 <tcp_listen_input+0x1b0>
    }
#if TCP_LISTEN_BACKLOG
    pcb->accepts_pending++;
#endif /* TCP_LISTEN_BACKLOG */
    /* Set up the new PCB. */
    ip_addr_copy(npcb->local_ip, current_iphdr_dest);
 8007524:	4b4c      	ldr	r3, [pc, #304]	; (8007658 <tcp_listen_input+0x1d0>)
 8007526:	681a      	ldr	r2, [r3, #0]
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	601a      	str	r2, [r3, #0]
    npcb->local_port = pcb->local_port;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	8b5a      	ldrh	r2, [r3, #26]
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	835a      	strh	r2, [r3, #26]
    ip_addr_copy(npcb->remote_ip, current_iphdr_src);
 8007534:	4b47      	ldr	r3, [pc, #284]	; (8007654 <tcp_listen_input+0x1cc>)
 8007536:	681a      	ldr	r2, [r3, #0]
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	605a      	str	r2, [r3, #4]
    npcb->remote_port = tcphdr->src;
 800753c:	4b44      	ldr	r3, [pc, #272]	; (8007650 <tcp_listen_input+0x1c8>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	781a      	ldrb	r2, [r3, #0]
 8007542:	785b      	ldrb	r3, [r3, #1]
 8007544:	021b      	lsls	r3, r3, #8
 8007546:	4313      	orrs	r3, r2
 8007548:	b29a      	uxth	r2, r3
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	839a      	strh	r2, [r3, #28]
    npcb->state = SYN_RCVD;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	2203      	movs	r2, #3
 8007552:	761a      	strb	r2, [r3, #24]
    npcb->rcv_nxt = seqno + 1;
 8007554:	4b3d      	ldr	r3, [pc, #244]	; (800764c <tcp_listen_input+0x1c4>)
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	1c5a      	adds	r2, r3, #1
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	629a      	str	r2, [r3, #40]	; 0x28
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	631a      	str	r2, [r3, #48]	; 0x30
    npcb->snd_wnd = tcphdr->wnd;
 8007566:	4b3a      	ldr	r3, [pc, #232]	; (8007650 <tcp_listen_input+0x1c8>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	7b9a      	ldrb	r2, [r3, #14]
 800756c:	7bdb      	ldrb	r3, [r3, #15]
 800756e:	021b      	lsls	r3, r3, #8
 8007570:	4313      	orrs	r3, r2
 8007572:	b299      	uxth	r1, r3
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	2260      	movs	r2, #96	; 0x60
 8007578:	5299      	strh	r1, [r3, r2]
    npcb->snd_wnd_max = tcphdr->wnd;
 800757a:	4b35      	ldr	r3, [pc, #212]	; (8007650 <tcp_listen_input+0x1c8>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	7b9a      	ldrb	r2, [r3, #14]
 8007580:	7bdb      	ldrb	r3, [r3, #15]
 8007582:	021b      	lsls	r3, r3, #8
 8007584:	4313      	orrs	r3, r2
 8007586:	b299      	uxth	r1, r3
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	2262      	movs	r2, #98	; 0x62
 800758c:	5299      	strh	r1, [r3, r2]
    npcb->ssthresh = npcb->snd_wnd;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	2260      	movs	r2, #96	; 0x60
 8007592:	5a99      	ldrh	r1, [r3, r2]
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	224e      	movs	r2, #78	; 0x4e
 8007598:	5299      	strh	r1, [r3, r2]
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800759a:	4b2c      	ldr	r3, [pc, #176]	; (800764c <tcp_listen_input+0x1c4>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	1e5a      	subs	r2, r3, #1
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	691a      	ldr	r2, [r3, #16]
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	611a      	str	r2, [r3, #16]
#if LWIP_CALLBACK_API
    npcb->accept = pcb->accept;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	695a      	ldr	r2, [r3, #20]
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	615a      	str	r2, [r3, #20]
#endif /* LWIP_CALLBACK_API */
    /* inherit socket options */
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	7a1b      	ldrb	r3, [r3, #8]
 80075b8:	2273      	movs	r2, #115	; 0x73
 80075ba:	4393      	bics	r3, r2
 80075bc:	b2da      	uxtb	r2, r3
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	721a      	strb	r2, [r3, #8]
    /* Register the new PCB so that we can begin receiving segments
       for it. */
    TCP_REG_ACTIVE(npcb);
 80075c2:	4b27      	ldr	r3, [pc, #156]	; (8007660 <tcp_listen_input+0x1d8>)
 80075c4:	681a      	ldr	r2, [r3, #0]
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	60da      	str	r2, [r3, #12]
 80075ca:	4b25      	ldr	r3, [pc, #148]	; (8007660 <tcp_listen_input+0x1d8>)
 80075cc:	68fa      	ldr	r2, [r7, #12]
 80075ce:	601a      	str	r2, [r3, #0]
 80075d0:	f003 f850 	bl	800a674 <tcp_timer_needed>
 80075d4:	4b23      	ldr	r3, [pc, #140]	; (8007664 <tcp_listen_input+0x1dc>)
 80075d6:	2201      	movs	r2, #1
 80075d8:	701a      	strb	r2, [r3, #0]

    /* Parse any options in the SYN. */
    tcp_parseopt(npcb);
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	0018      	movs	r0, r3
 80075de:	f001 fdab 	bl	8009138 <tcp_parseopt>
#if TCP_CALCULATE_EFF_SEND_MSS
    npcb->mss = tcp_eff_send_mss(npcb->mss, &(npcb->remote_ip));
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	3304      	adds	r3, #4
 80075ea:	0019      	movs	r1, r3
 80075ec:	0010      	movs	r0, r2
 80075ee:	f7ff fac3 	bl	8006b78 <tcp_eff_send_mss>
 80075f2:	0003      	movs	r3, r0
 80075f4:	001a      	movs	r2, r3
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	86da      	strh	r2, [r3, #54]	; 0x36
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

    snmp_inc_tcppassiveopens();

    /* Send a SYN|ACK together with the MSS option. */
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80075fa:	250b      	movs	r5, #11
 80075fc:	197c      	adds	r4, r7, r5
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	2112      	movs	r1, #18
 8007602:	0018      	movs	r0, r3
 8007604:	f002 f8aa 	bl	800975c <tcp_enqueue_flags>
 8007608:	0003      	movs	r3, r0
 800760a:	7023      	strb	r3, [r4, #0]
    if (rc != ERR_OK) {
 800760c:	197b      	adds	r3, r7, r5
 800760e:	781b      	ldrb	r3, [r3, #0]
 8007610:	b25b      	sxtb	r3, r3
 8007612:	2b00      	cmp	r3, #0
 8007614:	d009      	beq.n	800762a <tcp_listen_input+0x1a2>
      tcp_abandon(npcb, 0);
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	2100      	movs	r1, #0
 800761a:	0018      	movs	r0, r3
 800761c:	f7fe fc3e 	bl	8005e9c <tcp_abandon>
      return rc;
 8007620:	230b      	movs	r3, #11
 8007622:	18fb      	adds	r3, r7, r3
 8007624:	781b      	ldrb	r3, [r3, #0]
 8007626:	b25b      	sxtb	r3, r3
 8007628:	e006      	b.n	8007638 <tcp_listen_input+0x1b0>
    }
    return tcp_output(npcb);
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	0018      	movs	r0, r3
 800762e:	f002 f9ef 	bl	8009a10 <tcp_output>
 8007632:	0003      	movs	r3, r0
 8007634:	e000      	b.n	8007638 <tcp_listen_input+0x1b0>
  }
  return ERR_OK;
 8007636:	2300      	movs	r3, #0
}
 8007638:	0018      	movs	r0, r3
 800763a:	46bd      	mov	sp, r7
 800763c:	b004      	add	sp, #16
 800763e:	bdb0      	pop	{r4, r5, r7, pc}
 8007640:	2000229c 	.word	0x2000229c
 8007644:	20002298 	.word	0x20002298
 8007648:	2000229e 	.word	0x2000229e
 800764c:	20002294 	.word	0x20002294
 8007650:	2000228c 	.word	0x2000228c
 8007654:	20003294 	.word	0x20003294
 8007658:	2000329c 	.word	0x2000329c
 800765c:	20003158 	.word	0x20003158
 8007660:	20003274 	.word	0x20003274
 8007664:	20003270 	.word	0x20003270

08007668 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8007668:	b5b0      	push	{r4, r5, r7, lr}
 800766a:	b084      	sub	sp, #16
 800766c:	af02      	add	r7, sp, #8
 800766e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST)  {
 8007670:	4b2f      	ldr	r3, [pc, #188]	; (8007730 <tcp_timewait_input+0xc8>)
 8007672:	781b      	ldrb	r3, [r3, #0]
 8007674:	001a      	movs	r2, r3
 8007676:	2304      	movs	r3, #4
 8007678:	4013      	ands	r3, r2
 800767a:	d001      	beq.n	8007680 <tcp_timewait_input+0x18>
    return ERR_OK;
 800767c:	2300      	movs	r3, #0
 800767e:	e052      	b.n	8007726 <tcp_timewait_input+0xbe>
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8007680:	4b2b      	ldr	r3, [pc, #172]	; (8007730 <tcp_timewait_input+0xc8>)
 8007682:	781b      	ldrb	r3, [r3, #0]
 8007684:	001a      	movs	r2, r3
 8007686:	2302      	movs	r3, #2
 8007688:	4013      	ands	r3, r2
 800768a:	d030      	beq.n	80076ee <tcp_timewait_input+0x86>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt+pcb->rcv_wnd)) {
 800768c:	4b29      	ldr	r3, [pc, #164]	; (8007734 <tcp_timewait_input+0xcc>)
 800768e:	681a      	ldr	r2, [r3, #0]
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007694:	1ad3      	subs	r3, r2, r3
 8007696:	d434      	bmi.n	8007702 <tcp_timewait_input+0x9a>
 8007698:	4b26      	ldr	r3, [pc, #152]	; (8007734 <tcp_timewait_input+0xcc>)
 800769a:	681a      	ldr	r2, [r3, #0]
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076a0:	6879      	ldr	r1, [r7, #4]
 80076a2:	8d89      	ldrh	r1, [r1, #44]	; 0x2c
 80076a4:	185b      	adds	r3, r3, r1
 80076a6:	1ad3      	subs	r3, r2, r3
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	dc2a      	bgt.n	8007702 <tcp_timewait_input+0x9a>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
 80076ac:	4b22      	ldr	r3, [pc, #136]	; (8007738 <tcp_timewait_input+0xd0>)
 80076ae:	6818      	ldr	r0, [r3, #0]
 80076b0:	4b22      	ldr	r3, [pc, #136]	; (800773c <tcp_timewait_input+0xd4>)
 80076b2:	881b      	ldrh	r3, [r3, #0]
 80076b4:	001a      	movs	r2, r3
 80076b6:	4b1f      	ldr	r3, [pc, #124]	; (8007734 <tcp_timewait_input+0xcc>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	18d4      	adds	r4, r2, r3
        tcphdr->dest, tcphdr->src);
 80076bc:	4b20      	ldr	r3, [pc, #128]	; (8007740 <tcp_timewait_input+0xd8>)
 80076be:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
 80076c0:	789a      	ldrb	r2, [r3, #2]
 80076c2:	78db      	ldrb	r3, [r3, #3]
 80076c4:	021b      	lsls	r3, r3, #8
 80076c6:	4313      	orrs	r3, r2
 80076c8:	b29a      	uxth	r2, r3
        tcphdr->dest, tcphdr->src);
 80076ca:	4b1d      	ldr	r3, [pc, #116]	; (8007740 <tcp_timewait_input+0xd8>)
 80076cc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
 80076ce:	7819      	ldrb	r1, [r3, #0]
 80076d0:	785b      	ldrb	r3, [r3, #1]
 80076d2:	021b      	lsls	r3, r3, #8
 80076d4:	430b      	orrs	r3, r1
 80076d6:	b29b      	uxth	r3, r3
 80076d8:	4d1a      	ldr	r5, [pc, #104]	; (8007744 <tcp_timewait_input+0xdc>)
 80076da:	491b      	ldr	r1, [pc, #108]	; (8007748 <tcp_timewait_input+0xe0>)
 80076dc:	9301      	str	r3, [sp, #4]
 80076de:	9200      	str	r2, [sp, #0]
 80076e0:	002b      	movs	r3, r5
 80076e2:	000a      	movs	r2, r1
 80076e4:	0021      	movs	r1, r4
 80076e6:	f002 fc71 	bl	8009fcc <tcp_rst>
      return ERR_OK;
 80076ea:	2300      	movs	r3, #0
 80076ec:	e01b      	b.n	8007726 <tcp_timewait_input+0xbe>
    }
  } else if (flags & TCP_FIN) {
 80076ee:	4b10      	ldr	r3, [pc, #64]	; (8007730 <tcp_timewait_input+0xc8>)
 80076f0:	781b      	ldrb	r3, [r3, #0]
 80076f2:	001a      	movs	r2, r3
 80076f4:	2301      	movs	r3, #1
 80076f6:	4013      	ands	r3, r2
 80076f8:	d003      	beq.n	8007702 <tcp_timewait_input+0x9a>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80076fa:	4b14      	ldr	r3, [pc, #80]	; (800774c <tcp_timewait_input+0xe4>)
 80076fc:	681a      	ldr	r2, [r3, #0]
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	625a      	str	r2, [r3, #36]	; 0x24
  }

  if ((tcplen > 0))  {
 8007702:	4b0e      	ldr	r3, [pc, #56]	; (800773c <tcp_timewait_input+0xd4>)
 8007704:	881b      	ldrh	r3, [r3, #0]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d00c      	beq.n	8007724 <tcp_timewait_input+0xbc>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	7f9b      	ldrb	r3, [r3, #30]
 800770e:	2202      	movs	r2, #2
 8007710:	4313      	orrs	r3, r2
 8007712:	b2da      	uxtb	r2, r3
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	779a      	strb	r2, [r3, #30]
    return tcp_output(pcb);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	0018      	movs	r0, r3
 800771c:	f002 f978 	bl	8009a10 <tcp_output>
 8007720:	0003      	movs	r3, r0
 8007722:	e000      	b.n	8007726 <tcp_timewait_input+0xbe>
  }
  return ERR_OK;
 8007724:	2300      	movs	r3, #0
}
 8007726:	0018      	movs	r0, r3
 8007728:	46bd      	mov	sp, r7
 800772a:	b002      	add	sp, #8
 800772c:	bdb0      	pop	{r4, r5, r7, pc}
 800772e:	46c0      	nop			; (mov r8, r8)
 8007730:	2000229c 	.word	0x2000229c
 8007734:	20002294 	.word	0x20002294
 8007738:	20002298 	.word	0x20002298
 800773c:	2000229e 	.word	0x2000229e
 8007740:	2000228c 	.word	0x2000228c
 8007744:	20003294 	.word	0x20003294
 8007748:	2000329c 	.word	0x2000329c
 800774c:	20003278 	.word	0x20003278

08007750 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8007750:	b5b0      	push	{r4, r5, r7, lr}
 8007752:	b086      	sub	sp, #24
 8007754:	af02      	add	r7, sp, #8
 8007756:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8007758:	230f      	movs	r3, #15
 800775a:	18fb      	adds	r3, r7, r3
 800775c:	2200      	movs	r2, #0
 800775e:	701a      	strb	r2, [r3, #0]
  err_t err;

  err = ERR_OK;
 8007760:	230e      	movs	r3, #14
 8007762:	18fb      	adds	r3, r7, r3
 8007764:	2200      	movs	r2, #0
 8007766:	701a      	strb	r2, [r3, #0]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8007768:	4bd1      	ldr	r3, [pc, #836]	; (8007ab0 <tcp_process+0x360>)
 800776a:	781b      	ldrb	r3, [r3, #0]
 800776c:	001a      	movs	r2, r3
 800776e:	2304      	movs	r3, #4
 8007770:	4013      	ands	r3, r2
 8007772:	d03a      	beq.n	80077ea <tcp_process+0x9a>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	7e1b      	ldrb	r3, [r3, #24]
 8007778:	2b02      	cmp	r3, #2
 800777a:	d10a      	bne.n	8007792 <tcp_process+0x42>
      if (ackno == pcb->snd_nxt) {
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007780:	4bcc      	ldr	r3, [pc, #816]	; (8007ab4 <tcp_process+0x364>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	429a      	cmp	r2, r3
 8007786:	d118      	bne.n	80077ba <tcp_process+0x6a>
        acceptable = 1;
 8007788:	230f      	movs	r3, #15
 800778a:	18fb      	adds	r3, r7, r3
 800778c:	2201      	movs	r2, #1
 800778e:	701a      	strb	r2, [r3, #0]
 8007790:	e013      	b.n	80077ba <tcp_process+0x6a>
      }
    } else {
      if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, 
 8007792:	4bc9      	ldr	r3, [pc, #804]	; (8007ab8 <tcp_process+0x368>)
 8007794:	681a      	ldr	r2, [r3, #0]
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800779a:	1ad3      	subs	r3, r2, r3
 800779c:	d40d      	bmi.n	80077ba <tcp_process+0x6a>
 800779e:	4bc6      	ldr	r3, [pc, #792]	; (8007ab8 <tcp_process+0x368>)
 80077a0:	681a      	ldr	r2, [r3, #0]
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077a6:	6879      	ldr	r1, [r7, #4]
 80077a8:	8d89      	ldrh	r1, [r1, #44]	; 0x2c
 80077aa:	185b      	adds	r3, r3, r1
 80077ac:	1ad3      	subs	r3, r2, r3
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	dc03      	bgt.n	80077ba <tcp_process+0x6a>
                          pcb->rcv_nxt+pcb->rcv_wnd)) {
        acceptable = 1;
 80077b2:	230f      	movs	r3, #15
 80077b4:	18fb      	adds	r3, r7, r3
 80077b6:	2201      	movs	r2, #1
 80077b8:	701a      	strb	r2, [r3, #0]
      }
    }

    if (acceptable) {
 80077ba:	230f      	movs	r3, #15
 80077bc:	18fb      	adds	r3, r7, r3
 80077be:	781b      	ldrb	r3, [r3, #0]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d010      	beq.n	80077e6 <tcp_process+0x96>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
      recv_flags |= TF_RESET;
 80077c4:	4bbd      	ldr	r3, [pc, #756]	; (8007abc <tcp_process+0x36c>)
 80077c6:	781b      	ldrb	r3, [r3, #0]
 80077c8:	2208      	movs	r2, #8
 80077ca:	4313      	orrs	r3, r2
 80077cc:	b2da      	uxtb	r2, r3
 80077ce:	4bbb      	ldr	r3, [pc, #748]	; (8007abc <tcp_process+0x36c>)
 80077d0:	701a      	strb	r2, [r3, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	7f9b      	ldrb	r3, [r3, #30]
 80077d6:	2201      	movs	r2, #1
 80077d8:	4393      	bics	r3, r2
 80077da:	b2da      	uxtb	r2, r3
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	779a      	strb	r2, [r3, #30]
      return ERR_RST;
 80077e0:	230b      	movs	r3, #11
 80077e2:	425b      	negs	r3, r3
 80077e4:	e333      	b.n	8007e4e <tcp_process+0x6fe>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
 80077e6:	2300      	movs	r3, #0
 80077e8:	e331      	b.n	8007e4e <tcp_process+0x6fe>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) { 
 80077ea:	4bb1      	ldr	r3, [pc, #708]	; (8007ab0 <tcp_process+0x360>)
 80077ec:	781b      	ldrb	r3, [r3, #0]
 80077ee:	001a      	movs	r2, r3
 80077f0:	2302      	movs	r3, #2
 80077f2:	4013      	ands	r3, r2
 80077f4:	d010      	beq.n	8007818 <tcp_process+0xc8>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	7e1b      	ldrb	r3, [r3, #24]
 80077fa:	2b02      	cmp	r3, #2
 80077fc:	d00c      	beq.n	8007818 <tcp_process+0xc8>
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	7e1b      	ldrb	r3, [r3, #24]
 8007802:	2b03      	cmp	r3, #3
 8007804:	d008      	beq.n	8007818 <tcp_process+0xc8>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	7f9b      	ldrb	r3, [r3, #30]
 800780a:	2202      	movs	r2, #2
 800780c:	4313      	orrs	r3, r2
 800780e:	b2da      	uxtb	r2, r3
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	779a      	strb	r2, [r3, #30]
    return ERR_OK;
 8007814:	2300      	movs	r3, #0
 8007816:	e31a      	b.n	8007e4e <tcp_process+0x6fe>
  }
  
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	7f9b      	ldrb	r3, [r3, #30]
 800781c:	001a      	movs	r2, r3
 800781e:	2310      	movs	r3, #16
 8007820:	4013      	ands	r3, r2
 8007822:	d103      	bne.n	800782c <tcp_process+0xdc>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8007824:	4ba6      	ldr	r3, [pc, #664]	; (8007ac0 <tcp_process+0x370>)
 8007826:	681a      	ldr	r2, [r3, #0]
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	625a      	str	r2, [r3, #36]	; 0x24
  }
  pcb->keep_cnt_sent = 0;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2296      	movs	r2, #150	; 0x96
 8007830:	2100      	movs	r1, #0
 8007832:	5499      	strb	r1, [r3, r2]

  tcp_parseopt(pcb);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	0018      	movs	r0, r3
 8007838:	f001 fc7e 	bl	8009138 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	7e1b      	ldrb	r3, [r3, #24]
 8007840:	2b09      	cmp	r3, #9
 8007842:	d900      	bls.n	8007846 <tcp_process+0xf6>
 8007844:	e2f3      	b.n	8007e2e <tcp_process+0x6de>
 8007846:	009a      	lsls	r2, r3, #2
 8007848:	4b9e      	ldr	r3, [pc, #632]	; (8007ac4 <tcp_process+0x374>)
 800784a:	18d3      	adds	r3, r2, r3
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	469f      	mov	pc, r3
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8007850:	4b97      	ldr	r3, [pc, #604]	; (8007ab0 <tcp_process+0x360>)
 8007852:	781b      	ldrb	r3, [r3, #0]
 8007854:	001a      	movs	r2, r3
 8007856:	2310      	movs	r3, #16
 8007858:	4013      	ands	r3, r2
 800785a:	d100      	bne.n	800785e <tcp_process+0x10e>
 800785c:	e0be      	b.n	80079dc <tcp_process+0x28c>
 800785e:	4b94      	ldr	r3, [pc, #592]	; (8007ab0 <tcp_process+0x360>)
 8007860:	781b      	ldrb	r3, [r3, #0]
 8007862:	001a      	movs	r2, r3
 8007864:	2302      	movs	r3, #2
 8007866:	4013      	ands	r3, r2
 8007868:	d100      	bne.n	800786c <tcp_process+0x11c>
 800786a:	e0b7      	b.n	80079dc <tcp_process+0x28c>
        && ackno == ntohl(pcb->unacked->tcphdr->seqno) + 1) {
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007870:	68db      	ldr	r3, [r3, #12]
 8007872:	791a      	ldrb	r2, [r3, #4]
 8007874:	7959      	ldrb	r1, [r3, #5]
 8007876:	0209      	lsls	r1, r1, #8
 8007878:	430a      	orrs	r2, r1
 800787a:	7999      	ldrb	r1, [r3, #6]
 800787c:	0409      	lsls	r1, r1, #16
 800787e:	430a      	orrs	r2, r1
 8007880:	79db      	ldrb	r3, [r3, #7]
 8007882:	061b      	lsls	r3, r3, #24
 8007884:	4313      	orrs	r3, r2
 8007886:	0018      	movs	r0, r3
 8007888:	f7fc ff03 	bl	8004692 <lwip_ntohl>
 800788c:	0003      	movs	r3, r0
 800788e:	1c5a      	adds	r2, r3, #1
 8007890:	4b88      	ldr	r3, [pc, #544]	; (8007ab4 <tcp_process+0x364>)
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	429a      	cmp	r2, r3
 8007896:	d000      	beq.n	800789a <tcp_process+0x14a>
 8007898:	e0a0      	b.n	80079dc <tcp_process+0x28c>
      pcb->snd_buf++;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2266      	movs	r2, #102	; 0x66
 800789e:	5a9b      	ldrh	r3, [r3, r2]
 80078a0:	3301      	adds	r3, #1
 80078a2:	b299      	uxth	r1, r3
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2266      	movs	r2, #102	; 0x66
 80078a8:	5299      	strh	r1, [r3, r2]
      pcb->rcv_nxt = seqno + 1;
 80078aa:	4b83      	ldr	r3, [pc, #524]	; (8007ab8 <tcp_process+0x368>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	1c5a      	adds	r2, r3, #1
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	629a      	str	r2, [r3, #40]	; 0x28
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	631a      	str	r2, [r3, #48]	; 0x30
      pcb->lastack = ackno;
 80078bc:	4b7d      	ldr	r3, [pc, #500]	; (8007ab4 <tcp_process+0x364>)
 80078be:	681a      	ldr	r2, [r3, #0]
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	649a      	str	r2, [r3, #72]	; 0x48
      pcb->snd_wnd = tcphdr->wnd;
 80078c4:	4b80      	ldr	r3, [pc, #512]	; (8007ac8 <tcp_process+0x378>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	7b9a      	ldrb	r2, [r3, #14]
 80078ca:	7bdb      	ldrb	r3, [r3, #15]
 80078cc:	021b      	lsls	r3, r3, #8
 80078ce:	4313      	orrs	r3, r2
 80078d0:	b299      	uxth	r1, r3
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2260      	movs	r2, #96	; 0x60
 80078d6:	5299      	strh	r1, [r3, r2]
      pcb->snd_wnd_max = tcphdr->wnd;
 80078d8:	4b7b      	ldr	r3, [pc, #492]	; (8007ac8 <tcp_process+0x378>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	7b9a      	ldrb	r2, [r3, #14]
 80078de:	7bdb      	ldrb	r3, [r3, #15]
 80078e0:	021b      	lsls	r3, r3, #8
 80078e2:	4313      	orrs	r3, r2
 80078e4:	b299      	uxth	r1, r3
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2262      	movs	r2, #98	; 0x62
 80078ea:	5299      	strh	r1, [r3, r2]
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80078ec:	4b72      	ldr	r3, [pc, #456]	; (8007ab8 <tcp_process+0x368>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	1e5a      	subs	r2, r3, #1
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->state = ESTABLISHED;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2204      	movs	r2, #4
 80078fa:	761a      	strb	r2, [r3, #24]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &(pcb->remote_ip));
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	3304      	adds	r3, #4
 8007904:	0019      	movs	r1, r3
 8007906:	0010      	movs	r0, r2
 8007908:	f7ff f936 	bl	8006b78 <tcp_eff_send_mss>
 800790c:	0003      	movs	r3, r0
 800790e:	001a      	movs	r2, r3
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	86da      	strh	r2, [r3, #54]	; 0x36
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      /* Set ssthresh again after changing pcb->mss (already set in tcp_connect
       * but for the default value of pcb->mss) */
      pcb->ssthresh = pcb->mss * 10;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007918:	1c1a      	adds	r2, r3, #0
 800791a:	0092      	lsls	r2, r2, #2
 800791c:	18d3      	adds	r3, r2, r3
 800791e:	18db      	adds	r3, r3, r3
 8007920:	b299      	uxth	r1, r3
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	224e      	movs	r2, #78	; 0x4e
 8007926:	5299      	strh	r1, [r3, r2]

      pcb->cwnd = ((pcb->cwnd == 1) ? (pcb->mss * 2) : pcb->mss);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	224c      	movs	r2, #76	; 0x4c
 800792c:	5a9b      	ldrh	r3, [r3, r2]
 800792e:	2b01      	cmp	r3, #1
 8007930:	d104      	bne.n	800793c <tcp_process+0x1ec>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007936:	18db      	adds	r3, r3, r3
 8007938:	b29b      	uxth	r3, r3
 800793a:	e001      	b.n	8007940 <tcp_process+0x1f0>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007940:	687a      	ldr	r2, [r7, #4]
 8007942:	214c      	movs	r1, #76	; 0x4c
 8007944:	5253      	strh	r3, [r2, r1]
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
      --pcb->snd_queuelen;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2268      	movs	r2, #104	; 0x68
 800794a:	5a9b      	ldrh	r3, [r3, r2]
 800794c:	3b01      	subs	r3, #1
 800794e:	b299      	uxth	r1, r3
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2268      	movs	r2, #104	; 0x68
 8007954:	5299      	strh	r1, [r3, r2]
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"U16_F"\n", (u16_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800795a:	60bb      	str	r3, [r7, #8]
      pcb->unacked = rseg->next;
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	681a      	ldr	r2, [r3, #0]
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	671a      	str	r2, [r3, #112]	; 0x70
      tcp_seg_free(rseg);
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	0018      	movs	r0, r3
 8007968:	f7fe fed9 	bl	800671e <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if(pcb->unacked == NULL)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007970:	2b00      	cmp	r3, #0
 8007972:	d104      	bne.n	800797e <tcp_process+0x22e>
        pcb->rtime = -1;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2201      	movs	r2, #1
 8007978:	4252      	negs	r2, r2
 800797a:	869a      	strh	r2, [r3, #52]	; 0x34
 800797c:	e006      	b.n	800798c <tcp_process+0x23c>
      else {
        pcb->rtime = 0;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2200      	movs	r2, #0
 8007982:	869a      	strh	r2, [r3, #52]	; 0x34
        pcb->nrtx = 0;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2246      	movs	r2, #70	; 0x46
 8007988:	2100      	movs	r1, #0
 800798a:	5499      	strb	r1, [r3, r2]
      }

      /* Call the user specified function to call when sucessfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2284      	movs	r2, #132	; 0x84
 8007990:	589b      	ldr	r3, [r3, r2]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d00d      	beq.n	80079b2 <tcp_process+0x262>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2284      	movs	r2, #132	; 0x84
 800799a:	589d      	ldr	r5, [r3, r2]
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	691b      	ldr	r3, [r3, #16]
 80079a0:	220e      	movs	r2, #14
 80079a2:	18bc      	adds	r4, r7, r2
 80079a4:	6879      	ldr	r1, [r7, #4]
 80079a6:	2200      	movs	r2, #0
 80079a8:	0018      	movs	r0, r3
 80079aa:	47a8      	blx	r5
 80079ac:	0003      	movs	r3, r0
 80079ae:	7023      	strb	r3, [r4, #0]
 80079b0:	e003      	b.n	80079ba <tcp_process+0x26a>
 80079b2:	230e      	movs	r3, #14
 80079b4:	18fb      	adds	r3, r7, r3
 80079b6:	2200      	movs	r2, #0
 80079b8:	701a      	strb	r2, [r3, #0]
      if (err == ERR_ABRT) {
 80079ba:	230e      	movs	r3, #14
 80079bc:	18fb      	adds	r3, r7, r3
 80079be:	781b      	ldrb	r3, [r3, #0]
 80079c0:	b25b      	sxtb	r3, r3
 80079c2:	330a      	adds	r3, #10
 80079c4:	d102      	bne.n	80079cc <tcp_process+0x27c>
        return ERR_ABRT;
 80079c6:	230a      	movs	r3, #10
 80079c8:	425b      	negs	r3, r3
 80079ca:	e240      	b.n	8007e4e <tcp_process+0x6fe>
      }
      tcp_ack_now(pcb);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	7f9b      	ldrb	r3, [r3, #30]
 80079d0:	2202      	movs	r2, #2
 80079d2:	4313      	orrs	r3, r2
 80079d4:	b2da      	uxtb	r2, r3
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	779a      	strb	r2, [r3, #30]
    else if (flags & TCP_ACK) {
      /* send a RST to bring the other side in a non-synchronized state. */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
        tcphdr->dest, tcphdr->src);
    }
    break;
 80079da:	e22a      	b.n	8007e32 <tcp_process+0x6e2>
    else if (flags & TCP_ACK) {
 80079dc:	4b34      	ldr	r3, [pc, #208]	; (8007ab0 <tcp_process+0x360>)
 80079de:	781b      	ldrb	r3, [r3, #0]
 80079e0:	001a      	movs	r2, r3
 80079e2:	2310      	movs	r3, #16
 80079e4:	4013      	ands	r3, r2
 80079e6:	d100      	bne.n	80079ea <tcp_process+0x29a>
 80079e8:	e223      	b.n	8007e32 <tcp_process+0x6e2>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
 80079ea:	4b32      	ldr	r3, [pc, #200]	; (8007ab4 <tcp_process+0x364>)
 80079ec:	6818      	ldr	r0, [r3, #0]
 80079ee:	4b37      	ldr	r3, [pc, #220]	; (8007acc <tcp_process+0x37c>)
 80079f0:	881b      	ldrh	r3, [r3, #0]
 80079f2:	001a      	movs	r2, r3
 80079f4:	4b30      	ldr	r3, [pc, #192]	; (8007ab8 <tcp_process+0x368>)
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	18d4      	adds	r4, r2, r3
        tcphdr->dest, tcphdr->src);
 80079fa:	4b33      	ldr	r3, [pc, #204]	; (8007ac8 <tcp_process+0x378>)
 80079fc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
 80079fe:	789a      	ldrb	r2, [r3, #2]
 8007a00:	78db      	ldrb	r3, [r3, #3]
 8007a02:	021b      	lsls	r3, r3, #8
 8007a04:	4313      	orrs	r3, r2
 8007a06:	b29a      	uxth	r2, r3
        tcphdr->dest, tcphdr->src);
 8007a08:	4b2f      	ldr	r3, [pc, #188]	; (8007ac8 <tcp_process+0x378>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
 8007a0c:	7819      	ldrb	r1, [r3, #0]
 8007a0e:	785b      	ldrb	r3, [r3, #1]
 8007a10:	021b      	lsls	r3, r3, #8
 8007a12:	430b      	orrs	r3, r1
 8007a14:	b29b      	uxth	r3, r3
 8007a16:	4d2e      	ldr	r5, [pc, #184]	; (8007ad0 <tcp_process+0x380>)
 8007a18:	492e      	ldr	r1, [pc, #184]	; (8007ad4 <tcp_process+0x384>)
 8007a1a:	9301      	str	r3, [sp, #4]
 8007a1c:	9200      	str	r2, [sp, #0]
 8007a1e:	002b      	movs	r3, r5
 8007a20:	000a      	movs	r2, r1
 8007a22:	0021      	movs	r1, r4
 8007a24:	f002 fad2 	bl	8009fcc <tcp_rst>
    break;
 8007a28:	e203      	b.n	8007e32 <tcp_process+0x6e2>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
 8007a2a:	4b21      	ldr	r3, [pc, #132]	; (8007ab0 <tcp_process+0x360>)
 8007a2c:	781b      	ldrb	r3, [r3, #0]
 8007a2e:	001a      	movs	r2, r3
 8007a30:	2310      	movs	r3, #16
 8007a32:	4013      	ands	r3, r2
 8007a34:	d100      	bne.n	8007a38 <tcp_process+0x2e8>
 8007a36:	e0a6      	b.n	8007b86 <tcp_process+0x436>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 8007a38:	4b1e      	ldr	r3, [pc, #120]	; (8007ab4 <tcp_process+0x364>)
 8007a3a:	681a      	ldr	r2, [r3, #0]
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a40:	1ad3      	subs	r3, r2, r3
 8007a42:	3b01      	subs	r3, #1
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	da00      	bge.n	8007a4a <tcp_process+0x2fa>
 8007a48:	e07d      	b.n	8007b46 <tcp_process+0x3f6>
 8007a4a:	4b1a      	ldr	r3, [pc, #104]	; (8007ab4 <tcp_process+0x364>)
 8007a4c:	681a      	ldr	r2, [r3, #0]
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a52:	1ad3      	subs	r3, r2, r3
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	dd00      	ble.n	8007a5a <tcp_process+0x30a>
 8007a58:	e075      	b.n	8007b46 <tcp_process+0x3f6>
        u16_t old_cwnd;
        pcb->state = ESTABLISHED;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2204      	movs	r2, #4
 8007a5e:	761a      	strb	r2, [r3, #24]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->accept != NULL", pcb->accept != NULL);
#endif
        /* Call the accept function. */
        TCP_EVENT_ACCEPT(pcb, ERR_OK, err);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	695b      	ldr	r3, [r3, #20]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d00c      	beq.n	8007a82 <tcp_process+0x332>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	695d      	ldr	r5, [r3, #20]
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	691b      	ldr	r3, [r3, #16]
 8007a70:	220e      	movs	r2, #14
 8007a72:	18bc      	adds	r4, r7, r2
 8007a74:	6879      	ldr	r1, [r7, #4]
 8007a76:	2200      	movs	r2, #0
 8007a78:	0018      	movs	r0, r3
 8007a7a:	47a8      	blx	r5
 8007a7c:	0003      	movs	r3, r0
 8007a7e:	7023      	strb	r3, [r4, #0]
 8007a80:	e003      	b.n	8007a8a <tcp_process+0x33a>
 8007a82:	230e      	movs	r3, #14
 8007a84:	18fb      	adds	r3, r7, r3
 8007a86:	22f2      	movs	r2, #242	; 0xf2
 8007a88:	701a      	strb	r2, [r3, #0]
        if (err != ERR_OK) {
 8007a8a:	230e      	movs	r3, #14
 8007a8c:	18fb      	adds	r3, r7, r3
 8007a8e:	781b      	ldrb	r3, [r3, #0]
 8007a90:	b25b      	sxtb	r3, r3
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d020      	beq.n	8007ad8 <tcp_process+0x388>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
 8007a96:	230e      	movs	r3, #14
 8007a98:	18fb      	adds	r3, r7, r3
 8007a9a:	781b      	ldrb	r3, [r3, #0]
 8007a9c:	b25b      	sxtb	r3, r3
 8007a9e:	330a      	adds	r3, #10
 8007aa0:	d003      	beq.n	8007aaa <tcp_process+0x35a>
            tcp_abort(pcb);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	0018      	movs	r0, r3
 8007aa6:	f7fe fa69 	bl	8005f7c <tcp_abort>
          }
          return ERR_ABRT;
 8007aaa:	230a      	movs	r3, #10
 8007aac:	425b      	negs	r3, r3
 8007aae:	e1ce      	b.n	8007e4e <tcp_process+0x6fe>
 8007ab0:	2000229c 	.word	0x2000229c
 8007ab4:	20002298 	.word	0x20002298
 8007ab8:	20002294 	.word	0x20002294
 8007abc:	200022a0 	.word	0x200022a0
 8007ac0:	20003278 	.word	0x20003278
 8007ac4:	0800fd98 	.word	0x0800fd98
 8007ac8:	2000228c 	.word	0x2000228c
 8007acc:	2000229e 	.word	0x2000229e
 8007ad0:	20003294 	.word	0x20003294
 8007ad4:	2000329c 	.word	0x2000329c
        }
        old_cwnd = pcb->cwnd;
 8007ad8:	230c      	movs	r3, #12
 8007ada:	18fb      	adds	r3, r7, r3
 8007adc:	687a      	ldr	r2, [r7, #4]
 8007ade:	214c      	movs	r1, #76	; 0x4c
 8007ae0:	5a52      	ldrh	r2, [r2, r1]
 8007ae2:	801a      	strh	r2, [r3, #0]
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	0018      	movs	r0, r3
 8007ae8:	f000 fa7c 	bl	8007fe4 <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (pcb->acked != 0) {
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2264      	movs	r2, #100	; 0x64
 8007af0:	5a9b      	ldrh	r3, [r3, r2]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d007      	beq.n	8007b06 <tcp_process+0x3b6>
          pcb->acked--;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2264      	movs	r2, #100	; 0x64
 8007afa:	5a9b      	ldrh	r3, [r3, r2]
 8007afc:	3b01      	subs	r3, #1
 8007afe:	b299      	uxth	r1, r3
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2264      	movs	r2, #100	; 0x64
 8007b04:	5299      	strh	r1, [r3, r2]
        }

        pcb->cwnd = ((old_cwnd == 1) ? (pcb->mss * 2) : pcb->mss);
 8007b06:	230c      	movs	r3, #12
 8007b08:	18fb      	adds	r3, r7, r3
 8007b0a:	881b      	ldrh	r3, [r3, #0]
 8007b0c:	2b01      	cmp	r3, #1
 8007b0e:	d104      	bne.n	8007b1a <tcp_process+0x3ca>
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b14:	18db      	adds	r3, r3, r3
 8007b16:	b29b      	uxth	r3, r3
 8007b18:	e001      	b.n	8007b1e <tcp_process+0x3ce>
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b1e:	687a      	ldr	r2, [r7, #4]
 8007b20:	214c      	movs	r1, #76	; 0x4c
 8007b22:	5253      	strh	r3, [r2, r1]

        if (recv_flags & TF_GOT_FIN) {
 8007b24:	4bcc      	ldr	r3, [pc, #816]	; (8007e58 <tcp_process+0x708>)
 8007b26:	781b      	ldrb	r3, [r3, #0]
 8007b28:	001a      	movs	r2, r3
 8007b2a:	2320      	movs	r3, #32
 8007b2c:	4013      	ands	r3, r2
 8007b2e:	d03e      	beq.n	8007bae <tcp_process+0x45e>
          tcp_ack_now(pcb);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	7f9b      	ldrb	r3, [r3, #30]
 8007b34:	2202      	movs	r2, #2
 8007b36:	4313      	orrs	r3, r2
 8007b38:	b2da      	uxtb	r2, r3
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	779a      	strb	r2, [r3, #30]
          pcb->state = CLOSE_WAIT;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2207      	movs	r2, #7
 8007b42:	761a      	strb	r2, [r3, #24]
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 8007b44:	e033      	b.n	8007bae <tcp_process+0x45e>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
 8007b46:	4bc5      	ldr	r3, [pc, #788]	; (8007e5c <tcp_process+0x70c>)
 8007b48:	6818      	ldr	r0, [r3, #0]
 8007b4a:	4bc5      	ldr	r3, [pc, #788]	; (8007e60 <tcp_process+0x710>)
 8007b4c:	881b      	ldrh	r3, [r3, #0]
 8007b4e:	001a      	movs	r2, r3
 8007b50:	4bc4      	ldr	r3, [pc, #784]	; (8007e64 <tcp_process+0x714>)
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	18d4      	adds	r4, r2, r3
                tcphdr->dest, tcphdr->src);
 8007b56:	4bc4      	ldr	r3, [pc, #784]	; (8007e68 <tcp_process+0x718>)
 8007b58:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
 8007b5a:	789a      	ldrb	r2, [r3, #2]
 8007b5c:	78db      	ldrb	r3, [r3, #3]
 8007b5e:	021b      	lsls	r3, r3, #8
 8007b60:	4313      	orrs	r3, r2
 8007b62:	b29a      	uxth	r2, r3
                tcphdr->dest, tcphdr->src);
 8007b64:	4bc0      	ldr	r3, [pc, #768]	; (8007e68 <tcp_process+0x718>)
 8007b66:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
 8007b68:	7819      	ldrb	r1, [r3, #0]
 8007b6a:	785b      	ldrb	r3, [r3, #1]
 8007b6c:	021b      	lsls	r3, r3, #8
 8007b6e:	430b      	orrs	r3, r1
 8007b70:	b29b      	uxth	r3, r3
 8007b72:	4dbe      	ldr	r5, [pc, #760]	; (8007e6c <tcp_process+0x71c>)
 8007b74:	49be      	ldr	r1, [pc, #760]	; (8007e70 <tcp_process+0x720>)
 8007b76:	9301      	str	r3, [sp, #4]
 8007b78:	9200      	str	r2, [sp, #0]
 8007b7a:	002b      	movs	r3, r5
 8007b7c:	000a      	movs	r2, r1
 8007b7e:	0021      	movs	r1, r4
 8007b80:	f002 fa24 	bl	8009fcc <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
 8007b84:	e157      	b.n	8007e36 <tcp_process+0x6e6>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8007b86:	4bbb      	ldr	r3, [pc, #748]	; (8007e74 <tcp_process+0x724>)
 8007b88:	781b      	ldrb	r3, [r3, #0]
 8007b8a:	001a      	movs	r2, r3
 8007b8c:	2302      	movs	r3, #2
 8007b8e:	4013      	ands	r3, r2
 8007b90:	d100      	bne.n	8007b94 <tcp_process+0x444>
 8007b92:	e150      	b.n	8007e36 <tcp_process+0x6e6>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b98:	1e5a      	subs	r2, r3, #1
 8007b9a:	4bb2      	ldr	r3, [pc, #712]	; (8007e64 <tcp_process+0x714>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	429a      	cmp	r2, r3
 8007ba0:	d000      	beq.n	8007ba4 <tcp_process+0x454>
 8007ba2:	e148      	b.n	8007e36 <tcp_process+0x6e6>
      tcp_rexmit(pcb);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	0018      	movs	r0, r3
 8007ba8:	f002 fb66 	bl	800a278 <tcp_rexmit>
    break;
 8007bac:	e143      	b.n	8007e36 <tcp_process+0x6e6>
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 8007bae:	46c0      	nop			; (mov r8, r8)
    break;
 8007bb0:	e141      	b.n	8007e36 <tcp_process+0x6e6>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	0018      	movs	r0, r3
 8007bb6:	f000 fa15 	bl	8007fe4 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 8007bba:	4ba7      	ldr	r3, [pc, #668]	; (8007e58 <tcp_process+0x708>)
 8007bbc:	781b      	ldrb	r3, [r3, #0]
 8007bbe:	001a      	movs	r2, r3
 8007bc0:	2320      	movs	r3, #32
 8007bc2:	4013      	ands	r3, r2
 8007bc4:	d100      	bne.n	8007bc8 <tcp_process+0x478>
 8007bc6:	e138      	b.n	8007e3a <tcp_process+0x6ea>
      tcp_ack_now(pcb);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	7f9b      	ldrb	r3, [r3, #30]
 8007bcc:	2202      	movs	r2, #2
 8007bce:	4313      	orrs	r3, r2
 8007bd0:	b2da      	uxtb	r2, r3
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	779a      	strb	r2, [r3, #30]
      pcb->state = CLOSE_WAIT;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2207      	movs	r2, #7
 8007bda:	761a      	strb	r2, [r3, #24]
    }
    break;
 8007bdc:	e12d      	b.n	8007e3a <tcp_process+0x6ea>
  case FIN_WAIT_1:
    tcp_receive(pcb);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	0018      	movs	r0, r3
 8007be2:	f000 f9ff 	bl	8007fe4 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 8007be6:	4b9c      	ldr	r3, [pc, #624]	; (8007e58 <tcp_process+0x708>)
 8007be8:	781b      	ldrb	r3, [r3, #0]
 8007bea:	001a      	movs	r2, r3
 8007bec:	2320      	movs	r3, #32
 8007bee:	4013      	ands	r3, r2
 8007bf0:	d059      	beq.n	8007ca6 <tcp_process+0x556>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt)) {
 8007bf2:	4ba0      	ldr	r3, [pc, #640]	; (8007e74 <tcp_process+0x724>)
 8007bf4:	781b      	ldrb	r3, [r3, #0]
 8007bf6:	001a      	movs	r2, r3
 8007bf8:	2310      	movs	r3, #16
 8007bfa:	4013      	ands	r3, r2
 8007bfc:	d048      	beq.n	8007c90 <tcp_process+0x540>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007c02:	4b96      	ldr	r3, [pc, #600]	; (8007e5c <tcp_process+0x70c>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	429a      	cmp	r2, r3
 8007c08:	d142      	bne.n	8007c90 <tcp_process+0x540>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	7f9b      	ldrb	r3, [r3, #30]
 8007c0e:	2202      	movs	r2, #2
 8007c10:	4313      	orrs	r3, r2
 8007c12:	b2da      	uxtb	r2, r3
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	779a      	strb	r2, [r3, #30]
        tcp_pcb_purge(pcb);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	0018      	movs	r0, r3
 8007c1c:	f7fe ff04 	bl	8006a28 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8007c20:	4b95      	ldr	r3, [pc, #596]	; (8007e78 <tcp_process+0x728>)
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	687a      	ldr	r2, [r7, #4]
 8007c26:	429a      	cmp	r2, r3
 8007c28:	d105      	bne.n	8007c36 <tcp_process+0x4e6>
 8007c2a:	4b93      	ldr	r3, [pc, #588]	; (8007e78 <tcp_process+0x728>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	68da      	ldr	r2, [r3, #12]
 8007c30:	4b91      	ldr	r3, [pc, #580]	; (8007e78 <tcp_process+0x728>)
 8007c32:	601a      	str	r2, [r3, #0]
 8007c34:	e019      	b.n	8007c6a <tcp_process+0x51a>
 8007c36:	4b90      	ldr	r3, [pc, #576]	; (8007e78 <tcp_process+0x728>)
 8007c38:	681a      	ldr	r2, [r3, #0]
 8007c3a:	4b90      	ldr	r3, [pc, #576]	; (8007e7c <tcp_process+0x72c>)
 8007c3c:	601a      	str	r2, [r3, #0]
 8007c3e:	e010      	b.n	8007c62 <tcp_process+0x512>
 8007c40:	4b8e      	ldr	r3, [pc, #568]	; (8007e7c <tcp_process+0x72c>)
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	68db      	ldr	r3, [r3, #12]
 8007c46:	687a      	ldr	r2, [r7, #4]
 8007c48:	429a      	cmp	r2, r3
 8007c4a:	d105      	bne.n	8007c58 <tcp_process+0x508>
 8007c4c:	4b8b      	ldr	r3, [pc, #556]	; (8007e7c <tcp_process+0x72c>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	687a      	ldr	r2, [r7, #4]
 8007c52:	68d2      	ldr	r2, [r2, #12]
 8007c54:	60da      	str	r2, [r3, #12]
 8007c56:	e008      	b.n	8007c6a <tcp_process+0x51a>
 8007c58:	4b88      	ldr	r3, [pc, #544]	; (8007e7c <tcp_process+0x72c>)
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	68da      	ldr	r2, [r3, #12]
 8007c5e:	4b87      	ldr	r3, [pc, #540]	; (8007e7c <tcp_process+0x72c>)
 8007c60:	601a      	str	r2, [r3, #0]
 8007c62:	4b86      	ldr	r3, [pc, #536]	; (8007e7c <tcp_process+0x72c>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d1ea      	bne.n	8007c40 <tcp_process+0x4f0>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	60da      	str	r2, [r3, #12]
 8007c70:	4b83      	ldr	r3, [pc, #524]	; (8007e80 <tcp_process+0x730>)
 8007c72:	2201      	movs	r2, #1
 8007c74:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	220a      	movs	r2, #10
 8007c7a:	761a      	strb	r2, [r3, #24]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8007c7c:	4b81      	ldr	r3, [pc, #516]	; (8007e84 <tcp_process+0x734>)
 8007c7e:	681a      	ldr	r2, [r3, #0]
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	60da      	str	r2, [r3, #12]
 8007c84:	4b7f      	ldr	r3, [pc, #508]	; (8007e84 <tcp_process+0x734>)
 8007c86:	687a      	ldr	r2, [r7, #4]
 8007c88:	601a      	str	r2, [r3, #0]
 8007c8a:	f002 fcf3 	bl	800a674 <tcp_timer_needed>
        pcb->state = CLOSING;
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt)) {
      pcb->state = FIN_WAIT_2;
    }
    break;
 8007c8e:	e0d6      	b.n	8007e3e <tcp_process+0x6ee>
        tcp_ack_now(pcb);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	7f9b      	ldrb	r3, [r3, #30]
 8007c94:	2202      	movs	r2, #2
 8007c96:	4313      	orrs	r3, r2
 8007c98:	b2da      	uxtb	r2, r3
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	779a      	strb	r2, [r3, #30]
        pcb->state = CLOSING;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2208      	movs	r2, #8
 8007ca2:	761a      	strb	r2, [r3, #24]
    break;
 8007ca4:	e0cb      	b.n	8007e3e <tcp_process+0x6ee>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt)) {
 8007ca6:	4b73      	ldr	r3, [pc, #460]	; (8007e74 <tcp_process+0x724>)
 8007ca8:	781b      	ldrb	r3, [r3, #0]
 8007caa:	001a      	movs	r2, r3
 8007cac:	2310      	movs	r3, #16
 8007cae:	4013      	ands	r3, r2
 8007cb0:	d100      	bne.n	8007cb4 <tcp_process+0x564>
 8007cb2:	e0c4      	b.n	8007e3e <tcp_process+0x6ee>
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007cb8:	4b68      	ldr	r3, [pc, #416]	; (8007e5c <tcp_process+0x70c>)
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	429a      	cmp	r2, r3
 8007cbe:	d000      	beq.n	8007cc2 <tcp_process+0x572>
 8007cc0:	e0bd      	b.n	8007e3e <tcp_process+0x6ee>
      pcb->state = FIN_WAIT_2;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2206      	movs	r2, #6
 8007cc6:	761a      	strb	r2, [r3, #24]
    break;
 8007cc8:	e0b9      	b.n	8007e3e <tcp_process+0x6ee>
  case FIN_WAIT_2:
    tcp_receive(pcb);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	0018      	movs	r0, r3
 8007cce:	f000 f989 	bl	8007fe4 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 8007cd2:	4b61      	ldr	r3, [pc, #388]	; (8007e58 <tcp_process+0x708>)
 8007cd4:	781b      	ldrb	r3, [r3, #0]
 8007cd6:	001a      	movs	r2, r3
 8007cd8:	2320      	movs	r3, #32
 8007cda:	4013      	ands	r3, r2
 8007cdc:	d100      	bne.n	8007ce0 <tcp_process+0x590>
 8007cde:	e0b0      	b.n	8007e42 <tcp_process+0x6f2>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	7f9b      	ldrb	r3, [r3, #30]
 8007ce4:	2202      	movs	r2, #2
 8007ce6:	4313      	orrs	r3, r2
 8007ce8:	b2da      	uxtb	r2, r3
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	779a      	strb	r2, [r3, #30]
      tcp_pcb_purge(pcb);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	0018      	movs	r0, r3
 8007cf2:	f7fe fe99 	bl	8006a28 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8007cf6:	4b60      	ldr	r3, [pc, #384]	; (8007e78 <tcp_process+0x728>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	687a      	ldr	r2, [r7, #4]
 8007cfc:	429a      	cmp	r2, r3
 8007cfe:	d105      	bne.n	8007d0c <tcp_process+0x5bc>
 8007d00:	4b5d      	ldr	r3, [pc, #372]	; (8007e78 <tcp_process+0x728>)
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	68da      	ldr	r2, [r3, #12]
 8007d06:	4b5c      	ldr	r3, [pc, #368]	; (8007e78 <tcp_process+0x728>)
 8007d08:	601a      	str	r2, [r3, #0]
 8007d0a:	e019      	b.n	8007d40 <tcp_process+0x5f0>
 8007d0c:	4b5a      	ldr	r3, [pc, #360]	; (8007e78 <tcp_process+0x728>)
 8007d0e:	681a      	ldr	r2, [r3, #0]
 8007d10:	4b5a      	ldr	r3, [pc, #360]	; (8007e7c <tcp_process+0x72c>)
 8007d12:	601a      	str	r2, [r3, #0]
 8007d14:	e010      	b.n	8007d38 <tcp_process+0x5e8>
 8007d16:	4b59      	ldr	r3, [pc, #356]	; (8007e7c <tcp_process+0x72c>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	68db      	ldr	r3, [r3, #12]
 8007d1c:	687a      	ldr	r2, [r7, #4]
 8007d1e:	429a      	cmp	r2, r3
 8007d20:	d105      	bne.n	8007d2e <tcp_process+0x5de>
 8007d22:	4b56      	ldr	r3, [pc, #344]	; (8007e7c <tcp_process+0x72c>)
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	687a      	ldr	r2, [r7, #4]
 8007d28:	68d2      	ldr	r2, [r2, #12]
 8007d2a:	60da      	str	r2, [r3, #12]
 8007d2c:	e008      	b.n	8007d40 <tcp_process+0x5f0>
 8007d2e:	4b53      	ldr	r3, [pc, #332]	; (8007e7c <tcp_process+0x72c>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	68da      	ldr	r2, [r3, #12]
 8007d34:	4b51      	ldr	r3, [pc, #324]	; (8007e7c <tcp_process+0x72c>)
 8007d36:	601a      	str	r2, [r3, #0]
 8007d38:	4b50      	ldr	r3, [pc, #320]	; (8007e7c <tcp_process+0x72c>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d1ea      	bne.n	8007d16 <tcp_process+0x5c6>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2200      	movs	r2, #0
 8007d44:	60da      	str	r2, [r3, #12]
 8007d46:	4b4e      	ldr	r3, [pc, #312]	; (8007e80 <tcp_process+0x730>)
 8007d48:	2201      	movs	r2, #1
 8007d4a:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	220a      	movs	r2, #10
 8007d50:	761a      	strb	r2, [r3, #24]
      TCP_REG(&tcp_tw_pcbs, pcb);
 8007d52:	4b4c      	ldr	r3, [pc, #304]	; (8007e84 <tcp_process+0x734>)
 8007d54:	681a      	ldr	r2, [r3, #0]
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	60da      	str	r2, [r3, #12]
 8007d5a:	4b4a      	ldr	r3, [pc, #296]	; (8007e84 <tcp_process+0x734>)
 8007d5c:	687a      	ldr	r2, [r7, #4]
 8007d5e:	601a      	str	r2, [r3, #0]
 8007d60:	f002 fc88 	bl	800a674 <tcp_timer_needed>
    }
    break;
 8007d64:	e06d      	b.n	8007e42 <tcp_process+0x6f2>
  case CLOSING:
    tcp_receive(pcb);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	0018      	movs	r0, r3
 8007d6a:	f000 f93b 	bl	8007fe4 <tcp_receive>
    if (flags & TCP_ACK && ackno == pcb->snd_nxt) {
 8007d6e:	4b41      	ldr	r3, [pc, #260]	; (8007e74 <tcp_process+0x724>)
 8007d70:	781b      	ldrb	r3, [r3, #0]
 8007d72:	001a      	movs	r2, r3
 8007d74:	2310      	movs	r3, #16
 8007d76:	4013      	ands	r3, r2
 8007d78:	d065      	beq.n	8007e46 <tcp_process+0x6f6>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007d7e:	4b37      	ldr	r3, [pc, #220]	; (8007e5c <tcp_process+0x70c>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	429a      	cmp	r2, r3
 8007d84:	d15f      	bne.n	8007e46 <tcp_process+0x6f6>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	0018      	movs	r0, r3
 8007d8a:	f7fe fe4d 	bl	8006a28 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8007d8e:	4b3a      	ldr	r3, [pc, #232]	; (8007e78 <tcp_process+0x728>)
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	687a      	ldr	r2, [r7, #4]
 8007d94:	429a      	cmp	r2, r3
 8007d96:	d105      	bne.n	8007da4 <tcp_process+0x654>
 8007d98:	4b37      	ldr	r3, [pc, #220]	; (8007e78 <tcp_process+0x728>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	68da      	ldr	r2, [r3, #12]
 8007d9e:	4b36      	ldr	r3, [pc, #216]	; (8007e78 <tcp_process+0x728>)
 8007da0:	601a      	str	r2, [r3, #0]
 8007da2:	e019      	b.n	8007dd8 <tcp_process+0x688>
 8007da4:	4b34      	ldr	r3, [pc, #208]	; (8007e78 <tcp_process+0x728>)
 8007da6:	681a      	ldr	r2, [r3, #0]
 8007da8:	4b34      	ldr	r3, [pc, #208]	; (8007e7c <tcp_process+0x72c>)
 8007daa:	601a      	str	r2, [r3, #0]
 8007dac:	e010      	b.n	8007dd0 <tcp_process+0x680>
 8007dae:	4b33      	ldr	r3, [pc, #204]	; (8007e7c <tcp_process+0x72c>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	68db      	ldr	r3, [r3, #12]
 8007db4:	687a      	ldr	r2, [r7, #4]
 8007db6:	429a      	cmp	r2, r3
 8007db8:	d105      	bne.n	8007dc6 <tcp_process+0x676>
 8007dba:	4b30      	ldr	r3, [pc, #192]	; (8007e7c <tcp_process+0x72c>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	687a      	ldr	r2, [r7, #4]
 8007dc0:	68d2      	ldr	r2, [r2, #12]
 8007dc2:	60da      	str	r2, [r3, #12]
 8007dc4:	e008      	b.n	8007dd8 <tcp_process+0x688>
 8007dc6:	4b2d      	ldr	r3, [pc, #180]	; (8007e7c <tcp_process+0x72c>)
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	68da      	ldr	r2, [r3, #12]
 8007dcc:	4b2b      	ldr	r3, [pc, #172]	; (8007e7c <tcp_process+0x72c>)
 8007dce:	601a      	str	r2, [r3, #0]
 8007dd0:	4b2a      	ldr	r3, [pc, #168]	; (8007e7c <tcp_process+0x72c>)
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d1ea      	bne.n	8007dae <tcp_process+0x65e>
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2200      	movs	r2, #0
 8007ddc:	60da      	str	r2, [r3, #12]
 8007dde:	4b28      	ldr	r3, [pc, #160]	; (8007e80 <tcp_process+0x730>)
 8007de0:	2201      	movs	r2, #1
 8007de2:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	220a      	movs	r2, #10
 8007de8:	761a      	strb	r2, [r3, #24]
      TCP_REG(&tcp_tw_pcbs, pcb);
 8007dea:	4b26      	ldr	r3, [pc, #152]	; (8007e84 <tcp_process+0x734>)
 8007dec:	681a      	ldr	r2, [r3, #0]
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	60da      	str	r2, [r3, #12]
 8007df2:	4b24      	ldr	r3, [pc, #144]	; (8007e84 <tcp_process+0x734>)
 8007df4:	687a      	ldr	r2, [r7, #4]
 8007df6:	601a      	str	r2, [r3, #0]
 8007df8:	f002 fc3c 	bl	800a674 <tcp_timer_needed>
    }
    break;
 8007dfc:	e023      	b.n	8007e46 <tcp_process+0x6f6>
  case LAST_ACK:
    tcp_receive(pcb);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	0018      	movs	r0, r3
 8007e02:	f000 f8ef 	bl	8007fe4 <tcp_receive>
    if (flags & TCP_ACK && ackno == pcb->snd_nxt) {
 8007e06:	4b1b      	ldr	r3, [pc, #108]	; (8007e74 <tcp_process+0x724>)
 8007e08:	781b      	ldrb	r3, [r3, #0]
 8007e0a:	001a      	movs	r2, r3
 8007e0c:	2310      	movs	r3, #16
 8007e0e:	4013      	ands	r3, r2
 8007e10:	d01b      	beq.n	8007e4a <tcp_process+0x6fa>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007e16:	4b11      	ldr	r3, [pc, #68]	; (8007e5c <tcp_process+0x70c>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	429a      	cmp	r2, r3
 8007e1c:	d115      	bne.n	8007e4a <tcp_process+0x6fa>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
 8007e1e:	4b0e      	ldr	r3, [pc, #56]	; (8007e58 <tcp_process+0x708>)
 8007e20:	781b      	ldrb	r3, [r3, #0]
 8007e22:	2210      	movs	r2, #16
 8007e24:	4313      	orrs	r3, r2
 8007e26:	b2da      	uxtb	r2, r3
 8007e28:	4b0b      	ldr	r3, [pc, #44]	; (8007e58 <tcp_process+0x708>)
 8007e2a:	701a      	strb	r2, [r3, #0]
    }
    break;
 8007e2c:	e00d      	b.n	8007e4a <tcp_process+0x6fa>
  default:
    break;
 8007e2e:	46c0      	nop			; (mov r8, r8)
 8007e30:	e00c      	b.n	8007e4c <tcp_process+0x6fc>
    break;
 8007e32:	46c0      	nop			; (mov r8, r8)
 8007e34:	e00a      	b.n	8007e4c <tcp_process+0x6fc>
    break;
 8007e36:	46c0      	nop			; (mov r8, r8)
 8007e38:	e008      	b.n	8007e4c <tcp_process+0x6fc>
    break;
 8007e3a:	46c0      	nop			; (mov r8, r8)
 8007e3c:	e006      	b.n	8007e4c <tcp_process+0x6fc>
    break;
 8007e3e:	46c0      	nop			; (mov r8, r8)
 8007e40:	e004      	b.n	8007e4c <tcp_process+0x6fc>
    break;
 8007e42:	46c0      	nop			; (mov r8, r8)
 8007e44:	e002      	b.n	8007e4c <tcp_process+0x6fc>
    break;
 8007e46:	46c0      	nop			; (mov r8, r8)
 8007e48:	e000      	b.n	8007e4c <tcp_process+0x6fc>
    break;
 8007e4a:	46c0      	nop			; (mov r8, r8)
  }
  return ERR_OK;
 8007e4c:	2300      	movs	r3, #0
}
 8007e4e:	0018      	movs	r0, r3
 8007e50:	46bd      	mov	sp, r7
 8007e52:	b004      	add	sp, #16
 8007e54:	bdb0      	pop	{r4, r5, r7, pc}
 8007e56:	46c0      	nop			; (mov r8, r8)
 8007e58:	200022a0 	.word	0x200022a0
 8007e5c:	20002298 	.word	0x20002298
 8007e60:	2000229e 	.word	0x2000229e
 8007e64:	20002294 	.word	0x20002294
 8007e68:	2000228c 	.word	0x2000228c
 8007e6c:	20003294 	.word	0x20003294
 8007e70:	2000329c 	.word	0x2000329c
 8007e74:	2000229c 	.word	0x2000229c
 8007e78:	20003274 	.word	0x20003274
 8007e7c:	20003280 	.word	0x20003280
 8007e80:	20003270 	.word	0x20003270
 8007e84:	20003288 	.word	0x20003288

08007e88 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8007e88:	b590      	push	{r4, r7, lr}
 8007e8a:	b085      	sub	sp, #20
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
 8007e90:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	68db      	ldr	r3, [r3, #12]
 8007e96:	7b1a      	ldrb	r2, [r3, #12]
 8007e98:	7b5b      	ldrb	r3, [r3, #13]
 8007e9a:	021b      	lsls	r3, r3, #8
 8007e9c:	4313      	orrs	r3, r2
 8007e9e:	b29b      	uxth	r3, r3
 8007ea0:	0018      	movs	r0, r3
 8007ea2:	f7fc fbcd 	bl	8004640 <lwip_ntohs>
 8007ea6:	0003      	movs	r3, r0
 8007ea8:	001a      	movs	r2, r3
 8007eaa:	2301      	movs	r3, #1
 8007eac:	4013      	ands	r3, r2
 8007eae:	d041      	beq.n	8007f34 <tcp_oos_insert_segment+0xac>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	0018      	movs	r0, r3
 8007eb4:	f7fe fc1e 	bl	80066f4 <tcp_segs_free>
    next = NULL;
 8007eb8:	2300      	movs	r3, #0
 8007eba:	603b      	str	r3, [r7, #0]
 8007ebc:	e089      	b.n	8007fd2 <tcp_oos_insert_segment+0x14a>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	68db      	ldr	r3, [r3, #12]
 8007ec2:	7b1a      	ldrb	r2, [r3, #12]
 8007ec4:	7b5b      	ldrb	r3, [r3, #13]
 8007ec6:	021b      	lsls	r3, r3, #8
 8007ec8:	4313      	orrs	r3, r2
 8007eca:	b29b      	uxth	r3, r3
 8007ecc:	0018      	movs	r0, r3
 8007ece:	f7fc fbb7 	bl	8004640 <lwip_ntohs>
 8007ed2:	0003      	movs	r3, r0
 8007ed4:	001a      	movs	r2, r3
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	4013      	ands	r3, r2
 8007eda:	d022      	beq.n	8007f22 <tcp_oos_insert_segment+0x9a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	68db      	ldr	r3, [r3, #12]
 8007ee0:	7b1a      	ldrb	r2, [r3, #12]
 8007ee2:	7b5b      	ldrb	r3, [r3, #13]
 8007ee4:	021b      	lsls	r3, r3, #8
 8007ee6:	4313      	orrs	r3, r2
 8007ee8:	b29c      	uxth	r4, r3
 8007eea:	2001      	movs	r0, #1
 8007eec:	f7fc fb92 	bl	8004614 <lwip_htons>
 8007ef0:	0003      	movs	r3, r0
 8007ef2:	001a      	movs	r2, r3
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	68db      	ldr	r3, [r3, #12]
 8007ef8:	4322      	orrs	r2, r4
 8007efa:	b292      	uxth	r2, r2
 8007efc:	21ff      	movs	r1, #255	; 0xff
 8007efe:	4011      	ands	r1, r2
 8007f00:	000c      	movs	r4, r1
 8007f02:	7b19      	ldrb	r1, [r3, #12]
 8007f04:	2000      	movs	r0, #0
 8007f06:	4001      	ands	r1, r0
 8007f08:	1c08      	adds	r0, r1, #0
 8007f0a:	1c21      	adds	r1, r4, #0
 8007f0c:	4301      	orrs	r1, r0
 8007f0e:	7319      	strb	r1, [r3, #12]
 8007f10:	0a12      	lsrs	r2, r2, #8
 8007f12:	b290      	uxth	r0, r2
 8007f14:	7b5a      	ldrb	r2, [r3, #13]
 8007f16:	2100      	movs	r1, #0
 8007f18:	400a      	ands	r2, r1
 8007f1a:	1c11      	adds	r1, r2, #0
 8007f1c:	1c02      	adds	r2, r0, #0
 8007f1e:	430a      	orrs	r2, r1
 8007f20:	735a      	strb	r2, [r3, #13]
      }
      old_seg = next;
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	0018      	movs	r0, r3
 8007f30:	f7fe fbf5 	bl	800671e <tcp_seg_free>
    while (next &&
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d017      	beq.n	8007f6a <tcp_oos_insert_segment+0xe2>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	891b      	ldrh	r3, [r3, #8]
 8007f3e:	001a      	movs	r2, r3
 8007f40:	4b27      	ldr	r3, [pc, #156]	; (8007fe0 <tcp_oos_insert_segment+0x158>)
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	18d2      	adds	r2, r2, r3
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	68db      	ldr	r3, [r3, #12]
 8007f4a:	7919      	ldrb	r1, [r3, #4]
 8007f4c:	7958      	ldrb	r0, [r3, #5]
 8007f4e:	0200      	lsls	r0, r0, #8
 8007f50:	4301      	orrs	r1, r0
 8007f52:	7998      	ldrb	r0, [r3, #6]
 8007f54:	0400      	lsls	r0, r0, #16
 8007f56:	4301      	orrs	r1, r0
 8007f58:	79db      	ldrb	r3, [r3, #7]
 8007f5a:	061b      	lsls	r3, r3, #24
 8007f5c:	430b      	orrs	r3, r1
 8007f5e:	0019      	movs	r1, r3
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	891b      	ldrh	r3, [r3, #8]
 8007f64:	18cb      	adds	r3, r1, r3
 8007f66:	1ad3      	subs	r3, r2, r3
    while (next &&
 8007f68:	d5a9      	bpl.n	8007ebe <tcp_oos_insert_segment+0x36>
    }
    if (next &&
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d030      	beq.n	8007fd2 <tcp_oos_insert_segment+0x14a>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	891b      	ldrh	r3, [r3, #8]
 8007f74:	001a      	movs	r2, r3
 8007f76:	4b1a      	ldr	r3, [pc, #104]	; (8007fe0 <tcp_oos_insert_segment+0x158>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	18d2      	adds	r2, r2, r3
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	68db      	ldr	r3, [r3, #12]
 8007f80:	7919      	ldrb	r1, [r3, #4]
 8007f82:	7958      	ldrb	r0, [r3, #5]
 8007f84:	0200      	lsls	r0, r0, #8
 8007f86:	4301      	orrs	r1, r0
 8007f88:	7998      	ldrb	r0, [r3, #6]
 8007f8a:	0400      	lsls	r0, r0, #16
 8007f8c:	4301      	orrs	r1, r0
 8007f8e:	79db      	ldrb	r3, [r3, #7]
 8007f90:	061b      	lsls	r3, r3, #24
 8007f92:	430b      	orrs	r3, r1
 8007f94:	1ad3      	subs	r3, r2, r3
    if (next &&
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	dd1b      	ble.n	8007fd2 <tcp_oos_insert_segment+0x14a>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	68db      	ldr	r3, [r3, #12]
 8007f9e:	791a      	ldrb	r2, [r3, #4]
 8007fa0:	7959      	ldrb	r1, [r3, #5]
 8007fa2:	0209      	lsls	r1, r1, #8
 8007fa4:	430a      	orrs	r2, r1
 8007fa6:	7999      	ldrb	r1, [r3, #6]
 8007fa8:	0409      	lsls	r1, r1, #16
 8007faa:	430a      	orrs	r2, r1
 8007fac:	79db      	ldrb	r3, [r3, #7]
 8007fae:	061b      	lsls	r3, r3, #24
 8007fb0:	4313      	orrs	r3, r2
 8007fb2:	b29a      	uxth	r2, r3
 8007fb4:	4b0a      	ldr	r3, [pc, #40]	; (8007fe0 <tcp_oos_insert_segment+0x158>)
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	b29b      	uxth	r3, r3
 8007fba:	1ad3      	subs	r3, r2, r3
 8007fbc:	b29a      	uxth	r2, r3
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	685a      	ldr	r2, [r3, #4]
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	891b      	ldrh	r3, [r3, #8]
 8007fca:	0019      	movs	r1, r3
 8007fcc:	0010      	movs	r0, r2
 8007fce:	f7fd fa70 	bl	80054b2 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	683a      	ldr	r2, [r7, #0]
 8007fd6:	601a      	str	r2, [r3, #0]
}
 8007fd8:	46c0      	nop			; (mov r8, r8)
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	b005      	add	sp, #20
 8007fde:	bd90      	pop	{r4, r7, pc}
 8007fe0:	20002294 	.word	0x20002294

08007fe4 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8007fe4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007fe6:	b08d      	sub	sp, #52	; 0x34
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
 8007fec:	2300      	movs	r3, #0
 8007fee:	61bb      	str	r3, [r7, #24]
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);

  if (flags & TCP_ACK) {
 8007ff0:	4bba      	ldr	r3, [pc, #744]	; (80082dc <tcp_receive+0x2f8>)
 8007ff2:	781b      	ldrb	r3, [r3, #0]
 8007ff4:	001a      	movs	r2, r3
 8007ff6:	2310      	movs	r3, #16
 8007ff8:	4013      	ands	r3, r2
 8007ffa:	d100      	bne.n	8007ffe <tcp_receive+0x1a>
 8007ffc:	e2ed      	b.n	80085da <tcp_receive+0x5f6>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2260      	movs	r2, #96	; 0x60
 8008002:	5a9b      	ldrh	r3, [r3, r2]
 8008004:	001a      	movs	r2, r3
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800800a:	18d3      	adds	r3, r2, r3
 800800c:	617b      	str	r3, [r7, #20]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008012:	4bb3      	ldr	r3, [pc, #716]	; (80082e0 <tcp_receive+0x2fc>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	1ad3      	subs	r3, r2, r3
 8008018:	d41d      	bmi.n	8008056 <tcp_receive+0x72>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800801e:	4bb0      	ldr	r3, [pc, #704]	; (80082e0 <tcp_receive+0x2fc>)
 8008020:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8008022:	429a      	cmp	r2, r3
 8008024:	d105      	bne.n	8008032 <tcp_receive+0x4e>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800802a:	4bae      	ldr	r3, [pc, #696]	; (80082e4 <tcp_receive+0x300>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	1ad3      	subs	r3, r2, r3
 8008030:	d411      	bmi.n	8008056 <tcp_receive+0x72>
       (pcb->snd_wl2 == ackno && tcphdr->wnd > pcb->snd_wnd)) {
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008036:	4bab      	ldr	r3, [pc, #684]	; (80082e4 <tcp_receive+0x300>)
 8008038:	681b      	ldr	r3, [r3, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800803a:	429a      	cmp	r2, r3
 800803c:	d14f      	bne.n	80080de <tcp_receive+0xfa>
       (pcb->snd_wl2 == ackno && tcphdr->wnd > pcb->snd_wnd)) {
 800803e:	4baa      	ldr	r3, [pc, #680]	; (80082e8 <tcp_receive+0x304>)
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	7b9a      	ldrb	r2, [r3, #14]
 8008044:	7bdb      	ldrb	r3, [r3, #15]
 8008046:	021b      	lsls	r3, r3, #8
 8008048:	4313      	orrs	r3, r2
 800804a:	b29a      	uxth	r2, r3
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2160      	movs	r1, #96	; 0x60
 8008050:	5a5b      	ldrh	r3, [r3, r1]
 8008052:	429a      	cmp	r2, r3
 8008054:	d943      	bls.n	80080de <tcp_receive+0xfa>
      pcb->snd_wnd = tcphdr->wnd;
 8008056:	4ba4      	ldr	r3, [pc, #656]	; (80082e8 <tcp_receive+0x304>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	7b9a      	ldrb	r2, [r3, #14]
 800805c:	7bdb      	ldrb	r3, [r3, #15]
 800805e:	021b      	lsls	r3, r3, #8
 8008060:	4313      	orrs	r3, r2
 8008062:	b299      	uxth	r1, r3
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2260      	movs	r2, #96	; 0x60
 8008068:	5299      	strh	r1, [r3, r2]
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < tcphdr->wnd) {
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2262      	movs	r2, #98	; 0x62
 800806e:	5a9a      	ldrh	r2, [r3, r2]
 8008070:	4b9d      	ldr	r3, [pc, #628]	; (80082e8 <tcp_receive+0x304>)
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	7b99      	ldrb	r1, [r3, #14]
 8008076:	7bdb      	ldrb	r3, [r3, #15]
 8008078:	021b      	lsls	r3, r3, #8
 800807a:	430b      	orrs	r3, r1
 800807c:	b29b      	uxth	r3, r3
 800807e:	429a      	cmp	r2, r3
 8008080:	d209      	bcs.n	8008096 <tcp_receive+0xb2>
        pcb->snd_wnd_max = tcphdr->wnd;
 8008082:	4b99      	ldr	r3, [pc, #612]	; (80082e8 <tcp_receive+0x304>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	7b9a      	ldrb	r2, [r3, #14]
 8008088:	7bdb      	ldrb	r3, [r3, #15]
 800808a:	021b      	lsls	r3, r3, #8
 800808c:	4313      	orrs	r3, r2
 800808e:	b299      	uxth	r1, r3
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2262      	movs	r2, #98	; 0x62
 8008094:	5299      	strh	r1, [r3, r2]
      }
      pcb->snd_wl1 = seqno;
 8008096:	4b92      	ldr	r3, [pc, #584]	; (80082e0 <tcp_receive+0x2fc>)
 8008098:	681a      	ldr	r2, [r3, #0]
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800809e:	4b91      	ldr	r3, [pc, #580]	; (80082e4 <tcp_receive+0x300>)
 80080a0:	681a      	ldr	r2, [r3, #0]
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	659a      	str	r2, [r3, #88]	; 0x58
      if (pcb->snd_wnd == 0) {
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2260      	movs	r2, #96	; 0x60
 80080aa:	5a9b      	ldrh	r3, [r3, r2]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d10d      	bne.n	80080cc <tcp_receive+0xe8>
        if (pcb->persist_backoff == 0) {
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2295      	movs	r2, #149	; 0x95
 80080b4:	5c9b      	ldrb	r3, [r3, r2]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d111      	bne.n	80080de <tcp_receive+0xfa>
          /* start persist timer */
          pcb->persist_cnt = 0;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2294      	movs	r2, #148	; 0x94
 80080be:	2100      	movs	r1, #0
 80080c0:	5499      	strb	r1, [r3, r2]
          pcb->persist_backoff = 1;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2295      	movs	r2, #149	; 0x95
 80080c6:	2101      	movs	r1, #1
 80080c8:	5499      	strb	r1, [r3, r2]
 80080ca:	e008      	b.n	80080de <tcp_receive+0xfa>
        }
      } else if (pcb->persist_backoff > 0) {
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2295      	movs	r2, #149	; 0x95
 80080d0:	5c9b      	ldrb	r3, [r3, r2]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d003      	beq.n	80080de <tcp_receive+0xfa>
        /* stop persist timer */
          pcb->persist_backoff = 0;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2295      	movs	r2, #149	; 0x95
 80080da:	2100      	movs	r1, #0
 80080dc:	5499      	strb	r1, [r3, r2]
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80080de:	4b81      	ldr	r3, [pc, #516]	; (80082e4 <tcp_receive+0x300>)
 80080e0:	681a      	ldr	r2, [r3, #0]
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080e6:	1ad3      	subs	r3, r2, r3
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	dc58      	bgt.n	800819e <tcp_receive+0x1ba>
      pcb->acked = 0;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2264      	movs	r2, #100	; 0x64
 80080f0:	2100      	movs	r1, #0
 80080f2:	5299      	strh	r1, [r3, r2]
      /* Clause 2 */
      if (tcplen == 0) {
 80080f4:	4b7d      	ldr	r3, [pc, #500]	; (80082ec <tcp_receive+0x308>)
 80080f6:	881b      	ldrh	r3, [r3, #0]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d147      	bne.n	800818c <tcp_receive+0x1a8>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge){
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008100:	687a      	ldr	r2, [r7, #4]
 8008102:	2160      	movs	r1, #96	; 0x60
 8008104:	5a52      	ldrh	r2, [r2, r1]
 8008106:	189b      	adds	r3, r3, r2
 8008108:	697a      	ldr	r2, [r7, #20]
 800810a:	429a      	cmp	r2, r3
 800810c:	d13e      	bne.n	800818c <tcp_receive+0x1a8>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2234      	movs	r2, #52	; 0x34
 8008112:	5e9b      	ldrsh	r3, [r3, r2]
 8008114:	2b00      	cmp	r3, #0
 8008116:	db39      	blt.n	800818c <tcp_receive+0x1a8>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800811c:	4b71      	ldr	r3, [pc, #452]	; (80082e4 <tcp_receive+0x300>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	429a      	cmp	r2, r3
 8008122:	d133      	bne.n	800818c <tcp_receive+0x1a8>
              found_dupack = 1;
 8008124:	2301      	movs	r3, #1
 8008126:	61bb      	str	r3, [r7, #24]
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2247      	movs	r2, #71	; 0x47
 800812c:	5c9b      	ldrb	r3, [r3, r2]
 800812e:	2bff      	cmp	r3, #255	; 0xff
 8008130:	d007      	beq.n	8008142 <tcp_receive+0x15e>
                ++pcb->dupacks;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2247      	movs	r2, #71	; 0x47
 8008136:	5c9b      	ldrb	r3, [r3, r2]
 8008138:	3301      	adds	r3, #1
 800813a:	b2d9      	uxtb	r1, r3
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2247      	movs	r2, #71	; 0x47
 8008140:	5499      	strb	r1, [r3, r2]
              }
              if (pcb->dupacks > 3) {
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2247      	movs	r2, #71	; 0x47
 8008146:	5c9b      	ldrb	r3, [r3, r2]
 8008148:	2b03      	cmp	r3, #3
 800814a:	d916      	bls.n	800817a <tcp_receive+0x196>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((u16_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	224c      	movs	r2, #76	; 0x4c
 8008150:	5a9a      	ldrh	r2, [r3, r2]
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008156:	18d3      	adds	r3, r2, r3
 8008158:	b29a      	uxth	r2, r3
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	214c      	movs	r1, #76	; 0x4c
 800815e:	5a5b      	ldrh	r3, [r3, r1]
 8008160:	429a      	cmp	r2, r3
 8008162:	d913      	bls.n	800818c <tcp_receive+0x1a8>
                  pcb->cwnd += pcb->mss;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	224c      	movs	r2, #76	; 0x4c
 8008168:	5a9a      	ldrh	r2, [r3, r2]
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800816e:	18d3      	adds	r3, r2, r3
 8008170:	b299      	uxth	r1, r3
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	224c      	movs	r2, #76	; 0x4c
 8008176:	5299      	strh	r1, [r3, r2]
 8008178:	e008      	b.n	800818c <tcp_receive+0x1a8>
                }
              } else if (pcb->dupacks == 3) {
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2247      	movs	r2, #71	; 0x47
 800817e:	5c9b      	ldrb	r3, [r3, r2]
 8008180:	2b03      	cmp	r3, #3
 8008182:	d103      	bne.n	800818c <tcp_receive+0x1a8>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	0018      	movs	r0, r3
 8008188:	f002 f8d2 	bl	800a330 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800818c:	69bb      	ldr	r3, [r7, #24]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d000      	beq.n	8008194 <tcp_receive+0x1b0>
 8008192:	e184      	b.n	800849e <tcp_receive+0x4ba>
        pcb->dupacks = 0;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2247      	movs	r2, #71	; 0x47
 8008198:	2100      	movs	r1, #0
 800819a:	5499      	strb	r1, [r3, r2]
 800819c:	e17f      	b.n	800849e <tcp_receive+0x4ba>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)){
 800819e:	4b51      	ldr	r3, [pc, #324]	; (80082e4 <tcp_receive+0x300>)
 80081a0:	681a      	ldr	r2, [r3, #0]
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80081a6:	1ad3      	subs	r3, r2, r3
 80081a8:	3b01      	subs	r3, #1
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	da00      	bge.n	80081b0 <tcp_receive+0x1cc>
 80081ae:	e125      	b.n	80083fc <tcp_receive+0x418>
 80081b0:	4b4c      	ldr	r3, [pc, #304]	; (80082e4 <tcp_receive+0x300>)
 80081b2:	681a      	ldr	r2, [r3, #0]
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081b8:	1ad3      	subs	r3, r2, r3
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	dd00      	ble.n	80081c0 <tcp_receive+0x1dc>
 80081be:	e11d      	b.n	80083fc <tcp_receive+0x418>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	7f9b      	ldrb	r3, [r3, #30]
 80081c4:	001a      	movs	r2, r3
 80081c6:	2304      	movs	r3, #4
 80081c8:	4013      	ands	r3, r2
 80081ca:	d00c      	beq.n	80081e6 <tcp_receive+0x202>
        pcb->flags &= ~TF_INFR;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	7f9b      	ldrb	r3, [r3, #30]
 80081d0:	2204      	movs	r2, #4
 80081d2:	4393      	bics	r3, r2
 80081d4:	b2da      	uxtb	r2, r3
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	779a      	strb	r2, [r3, #30]
        pcb->cwnd = pcb->ssthresh;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	224e      	movs	r2, #78	; 0x4e
 80081de:	5a99      	ldrh	r1, [r3, r2]
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	224c      	movs	r2, #76	; 0x4c
 80081e4:	5299      	strh	r1, [r3, r2]
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2246      	movs	r2, #70	; 0x46
 80081ea:	2100      	movs	r1, #0
 80081ec:	5499      	strb	r1, [r3, r2]

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2240      	movs	r2, #64	; 0x40
 80081f2:	5e9b      	ldrsh	r3, [r3, r2]
 80081f4:	10db      	asrs	r3, r3, #3
 80081f6:	b21b      	sxth	r3, r3
 80081f8:	b29a      	uxth	r2, r3
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2142      	movs	r1, #66	; 0x42
 80081fe:	5e5b      	ldrsh	r3, [r3, r1]
 8008200:	b29b      	uxth	r3, r3
 8008202:	18d3      	adds	r3, r2, r3
 8008204:	b29b      	uxth	r3, r3
 8008206:	b219      	sxth	r1, r3
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2244      	movs	r2, #68	; 0x44
 800820c:	5299      	strh	r1, [r3, r2]

      /* Update the send buffer space. Diff between the two can never exceed 64K? */
      pcb->acked = (u16_t)(ackno - pcb->lastack);
 800820e:	4b35      	ldr	r3, [pc, #212]	; (80082e4 <tcp_receive+0x300>)
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	b29a      	uxth	r2, r3
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008218:	b29b      	uxth	r3, r3
 800821a:	1ad3      	subs	r3, r2, r3
 800821c:	b299      	uxth	r1, r3
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2264      	movs	r2, #100	; 0x64
 8008222:	5299      	strh	r1, [r3, r2]

      pcb->snd_buf += pcb->acked;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2266      	movs	r2, #102	; 0x66
 8008228:	5a9a      	ldrh	r2, [r3, r2]
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2164      	movs	r1, #100	; 0x64
 800822e:	5a5b      	ldrh	r3, [r3, r1]
 8008230:	18d3      	adds	r3, r2, r3
 8008232:	b299      	uxth	r1, r3
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2266      	movs	r2, #102	; 0x66
 8008238:	5299      	strh	r1, [r3, r2]

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2247      	movs	r2, #71	; 0x47
 800823e:	2100      	movs	r1, #0
 8008240:	5499      	strb	r1, [r3, r2]
      pcb->lastack = ackno;
 8008242:	4b28      	ldr	r3, [pc, #160]	; (80082e4 <tcp_receive+0x300>)
 8008244:	681a      	ldr	r2, [r3, #0]
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	649a      	str	r2, [r3, #72]	; 0x48

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	7e1b      	ldrb	r3, [r3, #24]
 800824e:	2b03      	cmp	r3, #3
 8008250:	d800      	bhi.n	8008254 <tcp_receive+0x270>
 8008252:	e091      	b.n	8008378 <tcp_receive+0x394>
        if (pcb->cwnd < pcb->ssthresh) {
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	224c      	movs	r2, #76	; 0x4c
 8008258:	5a9a      	ldrh	r2, [r3, r2]
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	214e      	movs	r1, #78	; 0x4e
 800825e:	5a5b      	ldrh	r3, [r3, r1]
 8008260:	429a      	cmp	r2, r3
 8008262:	d217      	bcs.n	8008294 <tcp_receive+0x2b0>
          if ((u16_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	224c      	movs	r2, #76	; 0x4c
 8008268:	5a9a      	ldrh	r2, [r3, r2]
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800826e:	18d3      	adds	r3, r2, r3
 8008270:	b29a      	uxth	r2, r3
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	214c      	movs	r1, #76	; 0x4c
 8008276:	5a5b      	ldrh	r3, [r3, r1]
 8008278:	429a      	cmp	r2, r3
 800827a:	d800      	bhi.n	800827e <tcp_receive+0x29a>
 800827c:	e07c      	b.n	8008378 <tcp_receive+0x394>
            pcb->cwnd += pcb->mss;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	224c      	movs	r2, #76	; 0x4c
 8008282:	5a9a      	ldrh	r2, [r3, r2]
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008288:	18d3      	adds	r3, r2, r3
 800828a:	b299      	uxth	r1, r3
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	224c      	movs	r2, #76	; 0x4c
 8008290:	5299      	strh	r1, [r3, r2]
 8008292:	e071      	b.n	8008378 <tcp_receive+0x394>
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"U16_F"\n", pcb->cwnd));
        } else {
          u16_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	224c      	movs	r2, #76	; 0x4c
 8008298:	5a9c      	ldrh	r4, [r3, r2]
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800829e:	001a      	movs	r2, r3
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80082a4:	4353      	muls	r3, r2
 80082a6:	0018      	movs	r0, r3
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	224c      	movs	r2, #76	; 0x4c
 80082ac:	5a9b      	ldrh	r3, [r3, r2]
 80082ae:	0019      	movs	r1, r3
 80082b0:	f7f7 ffc6 	bl	8000240 <__divsi3>
 80082b4:	0003      	movs	r3, r0
 80082b6:	b29a      	uxth	r2, r3
 80082b8:	2112      	movs	r1, #18
 80082ba:	187b      	adds	r3, r7, r1
 80082bc:	18a2      	adds	r2, r4, r2
 80082be:	801a      	strh	r2, [r3, #0]
          if (new_cwnd > pcb->cwnd) {
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	224c      	movs	r2, #76	; 0x4c
 80082c4:	5a9b      	ldrh	r3, [r3, r2]
 80082c6:	187a      	adds	r2, r7, r1
 80082c8:	8812      	ldrh	r2, [r2, #0]
 80082ca:	429a      	cmp	r2, r3
 80082cc:	d954      	bls.n	8008378 <tcp_receive+0x394>
            pcb->cwnd = new_cwnd;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2212      	movs	r2, #18
 80082d2:	18ba      	adds	r2, r7, r2
 80082d4:	214c      	movs	r1, #76	; 0x4c
 80082d6:	8812      	ldrh	r2, [r2, #0]
 80082d8:	525a      	strh	r2, [r3, r1]
                                    pcb->unacked != NULL?
                                    ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowlegdes them. */
      while (pcb->unacked != NULL &&
 80082da:	e04d      	b.n	8008378 <tcp_receive+0x394>
 80082dc:	2000229c 	.word	0x2000229c
 80082e0:	20002294 	.word	0x20002294
 80082e4:	20002298 	.word	0x20002298
 80082e8:	2000228c 	.word	0x2000228c
 80082ec:	2000229e 	.word	0x2000229e
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      ntohl(pcb->unacked->tcphdr->seqno),
                                      ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        pcb->unacked = pcb->unacked->next;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082fa:	681a      	ldr	r2, [r3, #0]
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	671a      	str	r2, [r3, #112]	; 0x70

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"U16_F" ... ", (u16_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8008300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008302:	685b      	ldr	r3, [r3, #4]
 8008304:	0018      	movs	r0, r3
 8008306:	f7fd fa3f 	bl	8005788 <pbuf_clen>
        /* Prevent ACK for FIN to generate a sent event */
        if ((pcb->acked != 0) && ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0)) {
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2264      	movs	r2, #100	; 0x64
 800830e:	5a9b      	ldrh	r3, [r3, r2]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d016      	beq.n	8008342 <tcp_receive+0x35e>
 8008314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008316:	68db      	ldr	r3, [r3, #12]
 8008318:	7b1a      	ldrb	r2, [r3, #12]
 800831a:	7b5b      	ldrb	r3, [r3, #13]
 800831c:	021b      	lsls	r3, r3, #8
 800831e:	4313      	orrs	r3, r2
 8008320:	b29b      	uxth	r3, r3
 8008322:	0018      	movs	r0, r3
 8008324:	f7fc f98c 	bl	8004640 <lwip_ntohs>
 8008328:	0003      	movs	r3, r0
 800832a:	001a      	movs	r2, r3
 800832c:	2301      	movs	r3, #1
 800832e:	4013      	ands	r3, r2
 8008330:	d007      	beq.n	8008342 <tcp_receive+0x35e>
          pcb->acked--;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2264      	movs	r2, #100	; 0x64
 8008336:	5a9b      	ldrh	r3, [r3, r2]
 8008338:	3b01      	subs	r3, #1
 800833a:	b299      	uxth	r1, r3
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2264      	movs	r2, #100	; 0x64
 8008340:	5299      	strh	r1, [r3, r2]
        }

        pcb->snd_queuelen -= pbuf_clen(next->p);
 8008342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008344:	685b      	ldr	r3, [r3, #4]
 8008346:	0018      	movs	r0, r3
 8008348:	f7fd fa1e 	bl	8005788 <pbuf_clen>
 800834c:	0003      	movs	r3, r0
 800834e:	0019      	movs	r1, r3
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2268      	movs	r2, #104	; 0x68
 8008354:	5a9a      	ldrh	r2, [r3, r2]
 8008356:	b28b      	uxth	r3, r1
 8008358:	1ad3      	subs	r3, r2, r3
 800835a:	b299      	uxth	r1, r3
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2268      	movs	r2, #104	; 0x68
 8008360:	5299      	strh	r1, [r3, r2]
        tcp_seg_free(next);
 8008362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008364:	0018      	movs	r0, r3
 8008366:	f7fe f9da 	bl	800671e <tcp_seg_free>

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"U16_F" (after freeing unacked)\n", (u16_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2268      	movs	r2, #104	; 0x68
 800836e:	5a9b      	ldrh	r3, [r3, r2]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d001      	beq.n	8008378 <tcp_receive+0x394>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
      while (pcb->unacked != NULL &&
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800837c:	2b00      	cmp	r3, #0
 800837e:	d02d      	beq.n	80083dc <tcp_receive+0x3f8>
             TCP_SEQ_LEQ(ntohl(pcb->unacked->tcphdr->seqno) +
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008384:	68db      	ldr	r3, [r3, #12]
 8008386:	791a      	ldrb	r2, [r3, #4]
 8008388:	7959      	ldrb	r1, [r3, #5]
 800838a:	0209      	lsls	r1, r1, #8
 800838c:	430a      	orrs	r2, r1
 800838e:	7999      	ldrb	r1, [r3, #6]
 8008390:	0409      	lsls	r1, r1, #16
 8008392:	430a      	orrs	r2, r1
 8008394:	79db      	ldrb	r3, [r3, #7]
 8008396:	061b      	lsls	r3, r3, #24
 8008398:	4313      	orrs	r3, r2
 800839a:	0018      	movs	r0, r3
 800839c:	f7fc f979 	bl	8004692 <lwip_ntohl>
 80083a0:	0004      	movs	r4, r0
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083a6:	891b      	ldrh	r3, [r3, #8]
 80083a8:	001d      	movs	r5, r3
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083ae:	68db      	ldr	r3, [r3, #12]
 80083b0:	7b1a      	ldrb	r2, [r3, #12]
 80083b2:	7b5b      	ldrb	r3, [r3, #13]
 80083b4:	021b      	lsls	r3, r3, #8
 80083b6:	4313      	orrs	r3, r2
 80083b8:	b29b      	uxth	r3, r3
 80083ba:	0018      	movs	r0, r3
 80083bc:	f7fc f940 	bl	8004640 <lwip_ntohs>
 80083c0:	0003      	movs	r3, r0
 80083c2:	001a      	movs	r2, r3
 80083c4:	2303      	movs	r3, #3
 80083c6:	4013      	ands	r3, r2
 80083c8:	1e5a      	subs	r2, r3, #1
 80083ca:	4193      	sbcs	r3, r2
 80083cc:	b2db      	uxtb	r3, r3
 80083ce:	18eb      	adds	r3, r5, r3
 80083d0:	18e2      	adds	r2, r4, r3
 80083d2:	4bd6      	ldr	r3, [pc, #856]	; (800872c <tcp_receive+0x748>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	1ad3      	subs	r3, r2, r3
      while (pcb->unacked != NULL &&
 80083d8:	2b00      	cmp	r3, #0
 80083da:	dd89      	ble.n	80082f0 <tcp_receive+0x30c>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if(pcb->unacked == NULL)
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d104      	bne.n	80083ee <tcp_receive+0x40a>
        pcb->rtime = -1;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2201      	movs	r2, #1
 80083e8:	4252      	negs	r2, r2
 80083ea:	869a      	strh	r2, [r3, #52]	; 0x34
 80083ec:	e002      	b.n	80083f4 <tcp_receive+0x410>
      else
        pcb->rtime = 0;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2200      	movs	r2, #0
 80083f2:	869a      	strh	r2, [r3, #52]	; 0x34

      pcb->polltmr = 0;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2200      	movs	r2, #0
 80083f8:	77da      	strb	r2, [r3, #31]
 80083fa:	e003      	b.n	8008404 <tcp_receive+0x420>
    } else {
      /* Fix bug bug #21582: out of sequence ACK, didn't really ack anything */
      pcb->acked = 0;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2264      	movs	r2, #100	; 0x64
 8008400:	2100      	movs	r1, #0
 8008402:	5299      	strh	r1, [r3, r2]
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 8008404:	e04b      	b.n	800849e <tcp_receive+0x4ba>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    ntohl(pcb->unsent->tcphdr->seqno), ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800840a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pcb->unsent = pcb->unsent->next;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008410:	681a      	ldr	r2, [r3, #0]
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	66da      	str	r2, [r3, #108]	; 0x6c
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800841a:	2b00      	cmp	r3, #0
 800841c:	d103      	bne.n	8008426 <tcp_receive+0x442>
        pcb->unsent_oversize = 0;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	226a      	movs	r2, #106	; 0x6a
 8008422:	2100      	movs	r1, #0
 8008424:	5299      	strh	r1, [r3, r2]
      }
#endif /* TCP_OVERSIZE */ 
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"U16_F" ... ", (u16_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8008426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008428:	685b      	ldr	r3, [r3, #4]
 800842a:	0018      	movs	r0, r3
 800842c:	f7fd f9ac 	bl	8005788 <pbuf_clen>
      /* Prevent ACK for FIN to generate a sent event */
      if ((pcb->acked != 0) && ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0)) {
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2264      	movs	r2, #100	; 0x64
 8008434:	5a9b      	ldrh	r3, [r3, r2]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d016      	beq.n	8008468 <tcp_receive+0x484>
 800843a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800843c:	68db      	ldr	r3, [r3, #12]
 800843e:	7b1a      	ldrb	r2, [r3, #12]
 8008440:	7b5b      	ldrb	r3, [r3, #13]
 8008442:	021b      	lsls	r3, r3, #8
 8008444:	4313      	orrs	r3, r2
 8008446:	b29b      	uxth	r3, r3
 8008448:	0018      	movs	r0, r3
 800844a:	f7fc f8f9 	bl	8004640 <lwip_ntohs>
 800844e:	0003      	movs	r3, r0
 8008450:	001a      	movs	r2, r3
 8008452:	2301      	movs	r3, #1
 8008454:	4013      	ands	r3, r2
 8008456:	d007      	beq.n	8008468 <tcp_receive+0x484>
        pcb->acked--;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2264      	movs	r2, #100	; 0x64
 800845c:	5a9b      	ldrh	r3, [r3, r2]
 800845e:	3b01      	subs	r3, #1
 8008460:	b299      	uxth	r1, r3
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2264      	movs	r2, #100	; 0x64
 8008466:	5299      	strh	r1, [r3, r2]
      }
      pcb->snd_queuelen -= pbuf_clen(next->p);
 8008468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800846a:	685b      	ldr	r3, [r3, #4]
 800846c:	0018      	movs	r0, r3
 800846e:	f7fd f98b 	bl	8005788 <pbuf_clen>
 8008472:	0003      	movs	r3, r0
 8008474:	0019      	movs	r1, r3
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2268      	movs	r2, #104	; 0x68
 800847a:	5a9a      	ldrh	r2, [r3, r2]
 800847c:	b28b      	uxth	r3, r1
 800847e:	1ad3      	subs	r3, r2, r3
 8008480:	b299      	uxth	r1, r3
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2268      	movs	r2, #104	; 0x68
 8008486:	5299      	strh	r1, [r3, r2]
      tcp_seg_free(next);
 8008488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800848a:	0018      	movs	r0, r3
 800848c:	f7fe f947 	bl	800671e <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"U16_F" (after freeing unsent)\n", (u16_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2268      	movs	r2, #104	; 0x68
 8008494:	5a9b      	ldrh	r3, [r3, r2]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d001      	beq.n	800849e <tcp_receive+0x4ba>
        LWIP_ASSERT("tcp_receive: valid queue length",
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    while (pcb->unsent != NULL &&
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d034      	beq.n	8008510 <tcp_receive+0x52c>
           TCP_SEQ_BETWEEN(ackno, ntohl(pcb->unsent->tcphdr->seqno) + 
 80084a6:	4ba1      	ldr	r3, [pc, #644]	; (800872c <tcp_receive+0x748>)
 80084a8:	681c      	ldr	r4, [r3, #0]
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084ae:	68db      	ldr	r3, [r3, #12]
 80084b0:	791a      	ldrb	r2, [r3, #4]
 80084b2:	7959      	ldrb	r1, [r3, #5]
 80084b4:	0209      	lsls	r1, r1, #8
 80084b6:	430a      	orrs	r2, r1
 80084b8:	7999      	ldrb	r1, [r3, #6]
 80084ba:	0409      	lsls	r1, r1, #16
 80084bc:	430a      	orrs	r2, r1
 80084be:	79db      	ldrb	r3, [r3, #7]
 80084c0:	061b      	lsls	r3, r3, #24
 80084c2:	4313      	orrs	r3, r2
 80084c4:	0018      	movs	r0, r3
 80084c6:	f7fc f8e4 	bl	8004692 <lwip_ntohl>
 80084ca:	0005      	movs	r5, r0
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084d0:	891b      	ldrh	r3, [r3, #8]
 80084d2:	001e      	movs	r6, r3
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084d8:	68db      	ldr	r3, [r3, #12]
 80084da:	7b1a      	ldrb	r2, [r3, #12]
 80084dc:	7b5b      	ldrb	r3, [r3, #13]
 80084de:	021b      	lsls	r3, r3, #8
 80084e0:	4313      	orrs	r3, r2
 80084e2:	b29b      	uxth	r3, r3
 80084e4:	0018      	movs	r0, r3
 80084e6:	f7fc f8ab 	bl	8004640 <lwip_ntohs>
 80084ea:	0003      	movs	r3, r0
 80084ec:	001a      	movs	r2, r3
 80084ee:	2303      	movs	r3, #3
 80084f0:	4013      	ands	r3, r2
 80084f2:	1e5a      	subs	r2, r3, #1
 80084f4:	4193      	sbcs	r3, r2
 80084f6:	b2db      	uxtb	r3, r3
 80084f8:	18f3      	adds	r3, r6, r3
 80084fa:	18eb      	adds	r3, r5, r3
 80084fc:	1ae3      	subs	r3, r4, r3
    while (pcb->unsent != NULL &&
 80084fe:	d407      	bmi.n	8008510 <tcp_receive+0x52c>
           TCP_SEQ_BETWEEN(ackno, ntohl(pcb->unsent->tcphdr->seqno) + 
 8008500:	4b8a      	ldr	r3, [pc, #552]	; (800872c <tcp_receive+0x748>)
 8008502:	681a      	ldr	r2, [r3, #0]
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008508:	1ad3      	subs	r3, r2, r3
 800850a:	2b00      	cmp	r3, #0
 800850c:	dc00      	bgt.n	8008510 <tcp_receive+0x52c>
 800850e:	e77a      	b.n	8008406 <tcp_receive+0x422>
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008514:	2b00      	cmp	r3, #0
 8008516:	d060      	beq.n	80085da <tcp_receive+0x5f6>
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800851c:	4b83      	ldr	r3, [pc, #524]	; (800872c <tcp_receive+0x748>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	1ad3      	subs	r3, r2, r3
 8008522:	d55a      	bpl.n	80085da <tcp_receive+0x5f6>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8008524:	4b82      	ldr	r3, [pc, #520]	; (8008730 <tcp_receive+0x74c>)
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	b29a      	uxth	r2, r3
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800852e:	b29b      	uxth	r3, r3
 8008530:	1ad3      	subs	r3, r2, r3
 8008532:	b29a      	uxth	r2, r3
 8008534:	201e      	movs	r0, #30
 8008536:	183b      	adds	r3, r7, r0
 8008538:	801a      	strh	r2, [r3, #0]

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, m * TCP_SLOW_INTERVAL));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
 800853a:	183b      	adds	r3, r7, r0
 800853c:	881a      	ldrh	r2, [r3, #0]
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2140      	movs	r1, #64	; 0x40
 8008542:	5e5b      	ldrsh	r3, [r3, r1]
 8008544:	10db      	asrs	r3, r3, #3
 8008546:	b21b      	sxth	r3, r3
 8008548:	b29b      	uxth	r3, r3
 800854a:	1ad3      	subs	r3, r2, r3
 800854c:	b29a      	uxth	r2, r3
 800854e:	183b      	adds	r3, r7, r0
 8008550:	801a      	strh	r2, [r3, #0]
      pcb->sa += m;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2240      	movs	r2, #64	; 0x40
 8008556:	5e9b      	ldrsh	r3, [r3, r2]
 8008558:	b29a      	uxth	r2, r3
 800855a:	183b      	adds	r3, r7, r0
 800855c:	881b      	ldrh	r3, [r3, #0]
 800855e:	18d3      	adds	r3, r2, r3
 8008560:	b29b      	uxth	r3, r3
 8008562:	b219      	sxth	r1, r3
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2240      	movs	r2, #64	; 0x40
 8008568:	5299      	strh	r1, [r3, r2]
      if (m < 0) {
 800856a:	183b      	adds	r3, r7, r0
 800856c:	2200      	movs	r2, #0
 800856e:	5e9b      	ldrsh	r3, [r3, r2]
 8008570:	2b00      	cmp	r3, #0
 8008572:	da06      	bge.n	8008582 <tcp_receive+0x59e>
        m = -m;
 8008574:	211e      	movs	r1, #30
 8008576:	187b      	adds	r3, r7, r1
 8008578:	881b      	ldrh	r3, [r3, #0]
 800857a:	425b      	negs	r3, r3
 800857c:	b29a      	uxth	r2, r3
 800857e:	187b      	adds	r3, r7, r1
 8008580:	801a      	strh	r2, [r3, #0]
      }
      m = m - (pcb->sv >> 2);
 8008582:	201e      	movs	r0, #30
 8008584:	183b      	adds	r3, r7, r0
 8008586:	881a      	ldrh	r2, [r3, #0]
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2142      	movs	r1, #66	; 0x42
 800858c:	5e5b      	ldrsh	r3, [r3, r1]
 800858e:	109b      	asrs	r3, r3, #2
 8008590:	b21b      	sxth	r3, r3
 8008592:	b29b      	uxth	r3, r3
 8008594:	1ad3      	subs	r3, r2, r3
 8008596:	b29a      	uxth	r2, r3
 8008598:	183b      	adds	r3, r7, r0
 800859a:	801a      	strh	r2, [r3, #0]
      pcb->sv += m;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2242      	movs	r2, #66	; 0x42
 80085a0:	5e9b      	ldrsh	r3, [r3, r2]
 80085a2:	b29a      	uxth	r2, r3
 80085a4:	183b      	adds	r3, r7, r0
 80085a6:	881b      	ldrh	r3, [r3, #0]
 80085a8:	18d3      	adds	r3, r2, r3
 80085aa:	b29b      	uxth	r3, r3
 80085ac:	b219      	sxth	r1, r3
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2242      	movs	r2, #66	; 0x42
 80085b2:	5299      	strh	r1, [r3, r2]
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2240      	movs	r2, #64	; 0x40
 80085b8:	5e9b      	ldrsh	r3, [r3, r2]
 80085ba:	10db      	asrs	r3, r3, #3
 80085bc:	b21b      	sxth	r3, r3
 80085be:	b29a      	uxth	r2, r3
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2142      	movs	r1, #66	; 0x42
 80085c4:	5e5b      	ldrsh	r3, [r3, r1]
 80085c6:	b29b      	uxth	r3, r3
 80085c8:	18d3      	adds	r3, r2, r3
 80085ca:	b29b      	uxth	r3, r3
 80085cc:	b219      	sxth	r1, r3
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2244      	movs	r2, #68	; 0x44
 80085d2:	5299      	strh	r1, [r3, r2]

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, pcb->rto * TCP_SLOW_INTERVAL));

      pcb->rttest = 0;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2200      	movs	r2, #0
 80085d8:	639a      	str	r2, [r3, #56]	; 0x38

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapeter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80085da:	4b56      	ldr	r3, [pc, #344]	; (8008734 <tcp_receive+0x750>)
 80085dc:	881b      	ldrh	r3, [r3, #0]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d101      	bne.n	80085e6 <tcp_receive+0x602>
 80085e2:	f000 fd83 	bl	80090ec <tcp_receive+0x1108>
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	7e1b      	ldrb	r3, [r3, #24]
 80085ea:	2b06      	cmp	r3, #6
 80085ec:	d901      	bls.n	80085f2 <tcp_receive+0x60e>
 80085ee:	f000 fd7d 	bl	80090ec <tcp_receive+0x1108>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)){
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)){
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80085f6:	4b50      	ldr	r3, [pc, #320]	; (8008738 <tcp_receive+0x754>)
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	1ad3      	subs	r3, r2, r3
 80085fc:	3b01      	subs	r3, #1
 80085fe:	2b00      	cmp	r3, #0
 8008600:	da00      	bge.n	8008604 <tcp_receive+0x620>
 8008602:	e09d      	b.n	8008740 <tcp_receive+0x75c>
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008608:	4b4a      	ldr	r3, [pc, #296]	; (8008734 <tcp_receive+0x750>)
 800860a:	881b      	ldrh	r3, [r3, #0]
 800860c:	0019      	movs	r1, r3
 800860e:	4b4a      	ldr	r3, [pc, #296]	; (8008738 <tcp_receive+0x754>)
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	18cb      	adds	r3, r1, r3
 8008614:	1ad3      	subs	r3, r2, r3
 8008616:	3301      	adds	r3, #1
 8008618:	2b00      	cmp	r3, #0
 800861a:	dd00      	ble.n	800861e <tcp_receive+0x63a>
 800861c:	e090      	b.n	8008740 <tcp_receive+0x75c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      off = pcb->rcv_nxt - seqno;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008622:	4b45      	ldr	r3, [pc, #276]	; (8008738 <tcp_receive+0x754>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	1ad3      	subs	r3, r2, r3
 8008628:	623b      	str	r3, [r7, #32]
      p = inseg.p;
 800862a:	4b44      	ldr	r3, [pc, #272]	; (800873c <tcp_receive+0x758>)
 800862c:	685b      	ldr	r3, [r3, #4]
 800862e:	627b      	str	r3, [r7, #36]	; 0x24
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
      if (inseg.p->len < off) {
 8008630:	4b42      	ldr	r3, [pc, #264]	; (800873c <tcp_receive+0x758>)
 8008632:	685b      	ldr	r3, [r3, #4]
 8008634:	895b      	ldrh	r3, [r3, #10]
 8008636:	001a      	movs	r2, r3
 8008638:	6a3b      	ldr	r3, [r7, #32]
 800863a:	4293      	cmp	r3, r2
 800863c:	dd2b      	ble.n	8008696 <tcp_receive+0x6b2>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800863e:	4b3f      	ldr	r3, [pc, #252]	; (800873c <tcp_receive+0x758>)
 8008640:	685b      	ldr	r3, [r3, #4]
 8008642:	8919      	ldrh	r1, [r3, #8]
 8008644:	6a3b      	ldr	r3, [r7, #32]
 8008646:	b29a      	uxth	r2, r3
 8008648:	2310      	movs	r3, #16
 800864a:	18fb      	adds	r3, r7, r3
 800864c:	1a8a      	subs	r2, r1, r2
 800864e:	801a      	strh	r2, [r3, #0]
        while (p->len < off) {
 8008650:	e010      	b.n	8008674 <tcp_receive+0x690>
          off -= p->len;
 8008652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008654:	895b      	ldrh	r3, [r3, #10]
 8008656:	001a      	movs	r2, r3
 8008658:	6a3b      	ldr	r3, [r7, #32]
 800865a:	1a9b      	subs	r3, r3, r2
 800865c:	623b      	str	r3, [r7, #32]
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
 800865e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008660:	2210      	movs	r2, #16
 8008662:	18ba      	adds	r2, r7, r2
 8008664:	8812      	ldrh	r2, [r2, #0]
 8008666:	811a      	strh	r2, [r3, #8]
          p->len = 0;
 8008668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800866a:	2200      	movs	r2, #0
 800866c:	815a      	strh	r2, [r3, #10]
          p = p->next;
 800866e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	627b      	str	r3, [r7, #36]	; 0x24
        while (p->len < off) {
 8008674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008676:	895b      	ldrh	r3, [r3, #10]
 8008678:	001a      	movs	r2, r3
 800867a:	6a3b      	ldr	r3, [r7, #32]
 800867c:	4293      	cmp	r3, r2
 800867e:	dce8      	bgt.n	8008652 <tcp_receive+0x66e>
        }
        if(pbuf_header(p, (s16_t)-off)) {
 8008680:	6a3b      	ldr	r3, [r7, #32]
 8008682:	b29b      	uxth	r3, r3
 8008684:	425b      	negs	r3, r3
 8008686:	b29b      	uxth	r3, r3
 8008688:	b21a      	sxth	r2, r3
 800868a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800868c:	0011      	movs	r1, r2
 800868e:	0018      	movs	r0, r3
 8008690:	f7fc ff81 	bl	8005596 <pbuf_header>
 8008694:	e00a      	b.n	80086ac <tcp_receive+0x6c8>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
        }
      } else {
        if(pbuf_header(inseg.p, (s16_t)-off)) {
 8008696:	4b29      	ldr	r3, [pc, #164]	; (800873c <tcp_receive+0x758>)
 8008698:	685b      	ldr	r3, [r3, #4]
 800869a:	6a3a      	ldr	r2, [r7, #32]
 800869c:	b292      	uxth	r2, r2
 800869e:	4252      	negs	r2, r2
 80086a0:	b292      	uxth	r2, r2
 80086a2:	b212      	sxth	r2, r2
 80086a4:	0011      	movs	r1, r2
 80086a6:	0018      	movs	r0, r3
 80086a8:	f7fc ff75 	bl	8005596 <pbuf_header>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 80086ac:	4b23      	ldr	r3, [pc, #140]	; (800873c <tcp_receive+0x758>)
 80086ae:	891a      	ldrh	r2, [r3, #8]
 80086b0:	4b21      	ldr	r3, [pc, #132]	; (8008738 <tcp_receive+0x754>)
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	b299      	uxth	r1, r3
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086ba:	b29b      	uxth	r3, r3
 80086bc:	1acb      	subs	r3, r1, r3
 80086be:	b29b      	uxth	r3, r3
 80086c0:	18d3      	adds	r3, r2, r3
 80086c2:	b29a      	uxth	r2, r3
 80086c4:	4b1d      	ldr	r3, [pc, #116]	; (800873c <tcp_receive+0x758>)
 80086c6:	811a      	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80086cc:	4b1a      	ldr	r3, [pc, #104]	; (8008738 <tcp_receive+0x754>)
 80086ce:	601a      	str	r2, [r3, #0]
 80086d0:	4b1a      	ldr	r3, [pc, #104]	; (800873c <tcp_receive+0x758>)
 80086d2:	68db      	ldr	r3, [r3, #12]
 80086d4:	4a18      	ldr	r2, [pc, #96]	; (8008738 <tcp_receive+0x754>)
 80086d6:	6812      	ldr	r2, [r2, #0]
 80086d8:	21ff      	movs	r1, #255	; 0xff
 80086da:	4011      	ands	r1, r2
 80086dc:	000c      	movs	r4, r1
 80086de:	7919      	ldrb	r1, [r3, #4]
 80086e0:	2000      	movs	r0, #0
 80086e2:	4001      	ands	r1, r0
 80086e4:	1c08      	adds	r0, r1, #0
 80086e6:	1c21      	adds	r1, r4, #0
 80086e8:	4301      	orrs	r1, r0
 80086ea:	7119      	strb	r1, [r3, #4]
 80086ec:	0a11      	lsrs	r1, r2, #8
 80086ee:	20ff      	movs	r0, #255	; 0xff
 80086f0:	4001      	ands	r1, r0
 80086f2:	000c      	movs	r4, r1
 80086f4:	7959      	ldrb	r1, [r3, #5]
 80086f6:	2000      	movs	r0, #0
 80086f8:	4001      	ands	r1, r0
 80086fa:	1c08      	adds	r0, r1, #0
 80086fc:	1c21      	adds	r1, r4, #0
 80086fe:	4301      	orrs	r1, r0
 8008700:	7159      	strb	r1, [r3, #5]
 8008702:	0c11      	lsrs	r1, r2, #16
 8008704:	20ff      	movs	r0, #255	; 0xff
 8008706:	4001      	ands	r1, r0
 8008708:	000c      	movs	r4, r1
 800870a:	7999      	ldrb	r1, [r3, #6]
 800870c:	2000      	movs	r0, #0
 800870e:	4001      	ands	r1, r0
 8008710:	1c08      	adds	r0, r1, #0
 8008712:	1c21      	adds	r1, r4, #0
 8008714:	4301      	orrs	r1, r0
 8008716:	7199      	strb	r1, [r3, #6]
 8008718:	0e10      	lsrs	r0, r2, #24
 800871a:	79da      	ldrb	r2, [r3, #7]
 800871c:	2100      	movs	r1, #0
 800871e:	400a      	ands	r2, r1
 8008720:	1c11      	adds	r1, r2, #0
 8008722:	1c02      	adds	r2, r0, #0
 8008724:	430a      	orrs	r2, r1
 8008726:	71da      	strb	r2, [r3, #7]
 8008728:	e017      	b.n	800875a <tcp_receive+0x776>
 800872a:	46c0      	nop			; (mov r8, r8)
 800872c:	20002298 	.word	0x20002298
 8008730:	20003278 	.word	0x20003278
 8008734:	2000229e 	.word	0x2000229e
 8008738:	20002294 	.word	0x20002294
 800873c:	2000227c 	.word	0x2000227c
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)){
 8008740:	4b78      	ldr	r3, [pc, #480]	; (8008924 <tcp_receive+0x940>)
 8008742:	681a      	ldr	r2, [r3, #0]
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008748:	1ad3      	subs	r3, r2, r3
 800874a:	d506      	bpl.n	800875a <tcp_receive+0x776>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	7f9b      	ldrb	r3, [r3, #30]
 8008750:	2202      	movs	r2, #2
 8008752:	4313      	orrs	r3, r2
 8008754:	b2da      	uxtb	r2, r3
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	779a      	strb	r2, [r3, #30]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, 
 800875a:	4b72      	ldr	r3, [pc, #456]	; (8008924 <tcp_receive+0x940>)
 800875c:	681a      	ldr	r2, [r3, #0]
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008762:	1ad3      	subs	r3, r2, r3
 8008764:	d501      	bpl.n	800876a <tcp_receive+0x786>
 8008766:	f000 fcbb 	bl	80090e0 <tcp_receive+0x10fc>
 800876a:	4b6e      	ldr	r3, [pc, #440]	; (8008924 <tcp_receive+0x940>)
 800876c:	681a      	ldr	r2, [r3, #0]
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008772:	6879      	ldr	r1, [r7, #4]
 8008774:	8d89      	ldrh	r1, [r1, #44]	; 0x2c
 8008776:	185b      	adds	r3, r3, r1
 8008778:	1ad3      	subs	r3, r2, r3
 800877a:	3301      	adds	r3, #1
 800877c:	2b00      	cmp	r3, #0
 800877e:	dd01      	ble.n	8008784 <tcp_receive+0x7a0>
 8008780:	f000 fcae 	bl	80090e0 <tcp_receive+0x10fc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)){
      if (pcb->rcv_nxt == seqno) {
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008788:	4b66      	ldr	r3, [pc, #408]	; (8008924 <tcp_receive+0x940>)
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	429a      	cmp	r2, r3
 800878e:	d000      	beq.n	8008792 <tcp_receive+0x7ae>
 8008790:	e2be      	b.n	8008d10 <tcp_receive+0xd2c>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8008792:	4b65      	ldr	r3, [pc, #404]	; (8008928 <tcp_receive+0x944>)
 8008794:	891c      	ldrh	r4, [r3, #8]
 8008796:	4b64      	ldr	r3, [pc, #400]	; (8008928 <tcp_receive+0x944>)
 8008798:	68db      	ldr	r3, [r3, #12]
 800879a:	7b1a      	ldrb	r2, [r3, #12]
 800879c:	7b5b      	ldrb	r3, [r3, #13]
 800879e:	021b      	lsls	r3, r3, #8
 80087a0:	4313      	orrs	r3, r2
 80087a2:	b29b      	uxth	r3, r3
 80087a4:	0018      	movs	r0, r3
 80087a6:	f7fb ff4b 	bl	8004640 <lwip_ntohs>
 80087aa:	0003      	movs	r3, r0
 80087ac:	001a      	movs	r2, r3
 80087ae:	2303      	movs	r3, #3
 80087b0:	4013      	ands	r3, r2
 80087b2:	1e5a      	subs	r2, r3, #1
 80087b4:	4193      	sbcs	r3, r2
 80087b6:	b2db      	uxtb	r3, r3
 80087b8:	b29b      	uxth	r3, r3
 80087ba:	18e3      	adds	r3, r4, r3
 80087bc:	b29a      	uxth	r2, r3
 80087be:	4b5b      	ldr	r3, [pc, #364]	; (800892c <tcp_receive+0x948>)
 80087c0:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80087c6:	4b59      	ldr	r3, [pc, #356]	; (800892c <tcp_receive+0x948>)
 80087c8:	881b      	ldrh	r3, [r3, #0]
 80087ca:	429a      	cmp	r2, r3
 80087cc:	d300      	bcc.n	80087d0 <tcp_receive+0x7ec>
 80087ce:	e07e      	b.n	80088ce <tcp_receive+0x8ea>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, 
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80087d0:	4b55      	ldr	r3, [pc, #340]	; (8008928 <tcp_receive+0x944>)
 80087d2:	68db      	ldr	r3, [r3, #12]
 80087d4:	7b1a      	ldrb	r2, [r3, #12]
 80087d6:	7b5b      	ldrb	r3, [r3, #13]
 80087d8:	021b      	lsls	r3, r3, #8
 80087da:	4313      	orrs	r3, r2
 80087dc:	b29b      	uxth	r3, r3
 80087de:	0018      	movs	r0, r3
 80087e0:	f7fb ff2e 	bl	8004640 <lwip_ntohs>
 80087e4:	0003      	movs	r3, r0
 80087e6:	001a      	movs	r2, r3
 80087e8:	2301      	movs	r3, #1
 80087ea:	4013      	ands	r3, r2
 80087ec:	d036      	beq.n	800885c <tcp_receive+0x878>
            /* Must remove the FIN from the header as we're trimming 
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) &~ TCP_FIN);
 80087ee:	4b4e      	ldr	r3, [pc, #312]	; (8008928 <tcp_receive+0x944>)
 80087f0:	68db      	ldr	r3, [r3, #12]
 80087f2:	7b1a      	ldrb	r2, [r3, #12]
 80087f4:	7b5b      	ldrb	r3, [r3, #13]
 80087f6:	021b      	lsls	r3, r3, #8
 80087f8:	4313      	orrs	r3, r2
 80087fa:	b29b      	uxth	r3, r3
 80087fc:	b21b      	sxth	r3, r3
 80087fe:	4a4c      	ldr	r2, [pc, #304]	; (8008930 <tcp_receive+0x94c>)
 8008800:	4013      	ands	r3, r2
 8008802:	b21c      	sxth	r4, r3
 8008804:	4b48      	ldr	r3, [pc, #288]	; (8008928 <tcp_receive+0x944>)
 8008806:	68db      	ldr	r3, [r3, #12]
 8008808:	7b1a      	ldrb	r2, [r3, #12]
 800880a:	7b5b      	ldrb	r3, [r3, #13]
 800880c:	021b      	lsls	r3, r3, #8
 800880e:	4313      	orrs	r3, r2
 8008810:	b29b      	uxth	r3, r3
 8008812:	0018      	movs	r0, r3
 8008814:	f7fb ff14 	bl	8004640 <lwip_ntohs>
 8008818:	0003      	movs	r3, r0
 800881a:	001a      	movs	r2, r3
 800881c:	233e      	movs	r3, #62	; 0x3e
 800881e:	4013      	ands	r3, r2
 8008820:	b29b      	uxth	r3, r3
 8008822:	0018      	movs	r0, r3
 8008824:	f7fb fef6 	bl	8004614 <lwip_htons>
 8008828:	0003      	movs	r3, r0
 800882a:	b21b      	sxth	r3, r3
 800882c:	4323      	orrs	r3, r4
 800882e:	b21a      	sxth	r2, r3
 8008830:	4b3d      	ldr	r3, [pc, #244]	; (8008928 <tcp_receive+0x944>)
 8008832:	68db      	ldr	r3, [r3, #12]
 8008834:	b292      	uxth	r2, r2
 8008836:	21ff      	movs	r1, #255	; 0xff
 8008838:	4011      	ands	r1, r2
 800883a:	000c      	movs	r4, r1
 800883c:	7b19      	ldrb	r1, [r3, #12]
 800883e:	2000      	movs	r0, #0
 8008840:	4001      	ands	r1, r0
 8008842:	1c08      	adds	r0, r1, #0
 8008844:	1c21      	adds	r1, r4, #0
 8008846:	4301      	orrs	r1, r0
 8008848:	7319      	strb	r1, [r3, #12]
 800884a:	0a12      	lsrs	r2, r2, #8
 800884c:	b290      	uxth	r0, r2
 800884e:	7b5a      	ldrb	r2, [r3, #13]
 8008850:	2100      	movs	r1, #0
 8008852:	400a      	ands	r2, r1
 8008854:	1c11      	adds	r1, r2, #0
 8008856:	1c02      	adds	r2, r0, #0
 8008858:	430a      	orrs	r2, r1
 800885a:	735a      	strb	r2, [r3, #13]
          }
          /* Adjust length of segment to fit in the window. */
          inseg.len = pcb->rcv_wnd;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008860:	4b31      	ldr	r3, [pc, #196]	; (8008928 <tcp_receive+0x944>)
 8008862:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8008864:	4b30      	ldr	r3, [pc, #192]	; (8008928 <tcp_receive+0x944>)
 8008866:	68db      	ldr	r3, [r3, #12]
 8008868:	7b1a      	ldrb	r2, [r3, #12]
 800886a:	7b5b      	ldrb	r3, [r3, #13]
 800886c:	021b      	lsls	r3, r3, #8
 800886e:	4313      	orrs	r3, r2
 8008870:	b29b      	uxth	r3, r3
 8008872:	0018      	movs	r0, r3
 8008874:	f7fb fee4 	bl	8004640 <lwip_ntohs>
 8008878:	0003      	movs	r3, r0
 800887a:	001a      	movs	r2, r3
 800887c:	2302      	movs	r3, #2
 800887e:	4013      	ands	r3, r2
 8008880:	d005      	beq.n	800888e <tcp_receive+0x8aa>
            inseg.len -= 1;
 8008882:	4b29      	ldr	r3, [pc, #164]	; (8008928 <tcp_receive+0x944>)
 8008884:	891b      	ldrh	r3, [r3, #8]
 8008886:	3b01      	subs	r3, #1
 8008888:	b29a      	uxth	r2, r3
 800888a:	4b27      	ldr	r3, [pc, #156]	; (8008928 <tcp_receive+0x944>)
 800888c:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800888e:	4b26      	ldr	r3, [pc, #152]	; (8008928 <tcp_receive+0x944>)
 8008890:	685a      	ldr	r2, [r3, #4]
 8008892:	4b25      	ldr	r3, [pc, #148]	; (8008928 <tcp_receive+0x944>)
 8008894:	891b      	ldrh	r3, [r3, #8]
 8008896:	0019      	movs	r1, r3
 8008898:	0010      	movs	r0, r2
 800889a:	f7fc fe0a 	bl	80054b2 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800889e:	4b22      	ldr	r3, [pc, #136]	; (8008928 <tcp_receive+0x944>)
 80088a0:	891c      	ldrh	r4, [r3, #8]
 80088a2:	4b21      	ldr	r3, [pc, #132]	; (8008928 <tcp_receive+0x944>)
 80088a4:	68db      	ldr	r3, [r3, #12]
 80088a6:	7b1a      	ldrb	r2, [r3, #12]
 80088a8:	7b5b      	ldrb	r3, [r3, #13]
 80088aa:	021b      	lsls	r3, r3, #8
 80088ac:	4313      	orrs	r3, r2
 80088ae:	b29b      	uxth	r3, r3
 80088b0:	0018      	movs	r0, r3
 80088b2:	f7fb fec5 	bl	8004640 <lwip_ntohs>
 80088b6:	0003      	movs	r3, r0
 80088b8:	001a      	movs	r2, r3
 80088ba:	2303      	movs	r3, #3
 80088bc:	4013      	ands	r3, r2
 80088be:	1e5a      	subs	r2, r3, #1
 80088c0:	4193      	sbcs	r3, r2
 80088c2:	b2db      	uxtb	r3, r3
 80088c4:	b29b      	uxth	r3, r3
 80088c6:	18e3      	adds	r3, r4, r3
 80088c8:	b29a      	uxth	r2, r3
 80088ca:	4b18      	ldr	r3, [pc, #96]	; (800892c <tcp_receive+0x948>)
 80088cc:	801a      	strh	r2, [r3, #0]
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d100      	bne.n	80088d8 <tcp_receive+0x8f4>
 80088d6:	e10f      	b.n	8008af8 <tcp_receive+0xb14>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80088d8:	4b13      	ldr	r3, [pc, #76]	; (8008928 <tcp_receive+0x944>)
 80088da:	68db      	ldr	r3, [r3, #12]
 80088dc:	7b1a      	ldrb	r2, [r3, #12]
 80088de:	7b5b      	ldrb	r3, [r3, #13]
 80088e0:	021b      	lsls	r3, r3, #8
 80088e2:	4313      	orrs	r3, r2
 80088e4:	b29b      	uxth	r3, r3
 80088e6:	0018      	movs	r0, r3
 80088e8:	f7fb feaa 	bl	8004640 <lwip_ntohs>
 80088ec:	0003      	movs	r3, r0
 80088ee:	001a      	movs	r2, r3
 80088f0:	2301      	movs	r3, #1
 80088f2:	4013      	ands	r3, r2
 80088f4:	d011      	beq.n	800891a <tcp_receive+0x936>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, 
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80088f6:	e00b      	b.n	8008910 <tcp_receive+0x92c>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80088fc:	60bb      	str	r3, [r7, #8]
              pcb->ooseq = pcb->ooseq->next;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008902:	681a      	ldr	r2, [r3, #0]
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8008908:	68bb      	ldr	r3, [r7, #8]
 800890a:	0018      	movs	r0, r3
 800890c:	f7fd ff07 	bl	800671e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008914:	2b00      	cmp	r3, #0
 8008916:	d1ef      	bne.n	80088f8 <tcp_receive+0x914>
 8008918:	e0ee      	b.n	8008af8 <tcp_receive+0xb14>
            }
          } else {
            next = pcb->ooseq;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800891e:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8008920:	e06a      	b.n	80089f8 <tcp_receive+0xa14>
 8008922:	46c0      	nop			; (mov r8, r8)
 8008924:	20002294 	.word	0x20002294
 8008928:	2000227c 	.word	0x2000227c
 800892c:	2000229e 	.word	0x2000229e
 8008930:	ffffc0ff 	.word	0xffffc0ff
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if (TCPH_FLAGS(next->tcphdr) & TCP_FIN &&
 8008934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008936:	68db      	ldr	r3, [r3, #12]
 8008938:	7b1a      	ldrb	r2, [r3, #12]
 800893a:	7b5b      	ldrb	r3, [r3, #13]
 800893c:	021b      	lsls	r3, r3, #8
 800893e:	4313      	orrs	r3, r2
 8008940:	b29b      	uxth	r3, r3
 8008942:	0018      	movs	r0, r3
 8008944:	f7fb fe7c 	bl	8004640 <lwip_ntohs>
 8008948:	0003      	movs	r3, r0
 800894a:	001a      	movs	r2, r3
 800894c:	2301      	movs	r3, #1
 800894e:	4013      	ands	r3, r2
 8008950:	d049      	beq.n	80089e6 <tcp_receive+0xa02>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8008952:	4bba      	ldr	r3, [pc, #744]	; (8008c3c <tcp_receive+0xc58>)
 8008954:	68db      	ldr	r3, [r3, #12]
 8008956:	7b1a      	ldrb	r2, [r3, #12]
 8008958:	7b5b      	ldrb	r3, [r3, #13]
 800895a:	021b      	lsls	r3, r3, #8
 800895c:	4313      	orrs	r3, r2
 800895e:	b29b      	uxth	r3, r3
 8008960:	0018      	movs	r0, r3
 8008962:	f7fb fe6d 	bl	8004640 <lwip_ntohs>
 8008966:	0003      	movs	r3, r0
 8008968:	001a      	movs	r2, r3
 800896a:	2302      	movs	r3, #2
 800896c:	4013      	ands	r3, r2
              if (TCPH_FLAGS(next->tcphdr) & TCP_FIN &&
 800896e:	d13a      	bne.n	80089e6 <tcp_receive+0xa02>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8008970:	4bb2      	ldr	r3, [pc, #712]	; (8008c3c <tcp_receive+0xc58>)
 8008972:	68db      	ldr	r3, [r3, #12]
 8008974:	7b1a      	ldrb	r2, [r3, #12]
 8008976:	7b5b      	ldrb	r3, [r3, #13]
 8008978:	021b      	lsls	r3, r3, #8
 800897a:	4313      	orrs	r3, r2
 800897c:	b29c      	uxth	r4, r3
 800897e:	2001      	movs	r0, #1
 8008980:	f7fb fe48 	bl	8004614 <lwip_htons>
 8008984:	0003      	movs	r3, r0
 8008986:	001a      	movs	r2, r3
 8008988:	4bac      	ldr	r3, [pc, #688]	; (8008c3c <tcp_receive+0xc58>)
 800898a:	68db      	ldr	r3, [r3, #12]
 800898c:	4322      	orrs	r2, r4
 800898e:	b292      	uxth	r2, r2
 8008990:	21ff      	movs	r1, #255	; 0xff
 8008992:	4011      	ands	r1, r2
 8008994:	000c      	movs	r4, r1
 8008996:	7b19      	ldrb	r1, [r3, #12]
 8008998:	2000      	movs	r0, #0
 800899a:	4001      	ands	r1, r0
 800899c:	1c08      	adds	r0, r1, #0
 800899e:	1c21      	adds	r1, r4, #0
 80089a0:	4301      	orrs	r1, r0
 80089a2:	7319      	strb	r1, [r3, #12]
 80089a4:	0a12      	lsrs	r2, r2, #8
 80089a6:	b290      	uxth	r0, r2
 80089a8:	7b5a      	ldrb	r2, [r3, #13]
 80089aa:	2100      	movs	r1, #0
 80089ac:	400a      	ands	r2, r1
 80089ae:	1c11      	adds	r1, r2, #0
 80089b0:	1c02      	adds	r2, r0, #0
 80089b2:	430a      	orrs	r2, r1
 80089b4:	735a      	strb	r2, [r3, #13]
                tcplen = TCP_TCPLEN(&inseg);
 80089b6:	4ba1      	ldr	r3, [pc, #644]	; (8008c3c <tcp_receive+0xc58>)
 80089b8:	891c      	ldrh	r4, [r3, #8]
 80089ba:	4ba0      	ldr	r3, [pc, #640]	; (8008c3c <tcp_receive+0xc58>)
 80089bc:	68db      	ldr	r3, [r3, #12]
 80089be:	7b1a      	ldrb	r2, [r3, #12]
 80089c0:	7b5b      	ldrb	r3, [r3, #13]
 80089c2:	021b      	lsls	r3, r3, #8
 80089c4:	4313      	orrs	r3, r2
 80089c6:	b29b      	uxth	r3, r3
 80089c8:	0018      	movs	r0, r3
 80089ca:	f7fb fe39 	bl	8004640 <lwip_ntohs>
 80089ce:	0003      	movs	r3, r0
 80089d0:	001a      	movs	r2, r3
 80089d2:	2303      	movs	r3, #3
 80089d4:	4013      	ands	r3, r2
 80089d6:	1e5a      	subs	r2, r3, #1
 80089d8:	4193      	sbcs	r3, r2
 80089da:	b2db      	uxtb	r3, r3
 80089dc:	b29b      	uxth	r3, r3
 80089de:	18e3      	adds	r3, r4, r3
 80089e0:	b29a      	uxth	r2, r3
 80089e2:	4b97      	ldr	r3, [pc, #604]	; (8008c40 <tcp_receive+0xc5c>)
 80089e4:	801a      	strh	r2, [r3, #0]
              }
              prev = next;
 80089e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089e8:	62bb      	str	r3, [r7, #40]	; 0x28
              next = next->next;
 80089ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	62fb      	str	r3, [r7, #44]	; 0x2c
              tcp_seg_free(prev);
 80089f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089f2:	0018      	movs	r0, r3
 80089f4:	f7fd fe93 	bl	800671e <tcp_seg_free>
            while (next &&
 80089f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d018      	beq.n	8008a30 <tcp_receive+0xa4c>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80089fe:	4b90      	ldr	r3, [pc, #576]	; (8008c40 <tcp_receive+0xc5c>)
 8008a00:	881b      	ldrh	r3, [r3, #0]
 8008a02:	001a      	movs	r2, r3
 8008a04:	4b8f      	ldr	r3, [pc, #572]	; (8008c44 <tcp_receive+0xc60>)
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	18d2      	adds	r2, r2, r3
 8008a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a0c:	68db      	ldr	r3, [r3, #12]
 8008a0e:	7919      	ldrb	r1, [r3, #4]
 8008a10:	7958      	ldrb	r0, [r3, #5]
 8008a12:	0200      	lsls	r0, r0, #8
 8008a14:	4301      	orrs	r1, r0
 8008a16:	7998      	ldrb	r0, [r3, #6]
 8008a18:	0400      	lsls	r0, r0, #16
 8008a1a:	4301      	orrs	r1, r0
 8008a1c:	79db      	ldrb	r3, [r3, #7]
 8008a1e:	061b      	lsls	r3, r3, #24
 8008a20:	430b      	orrs	r3, r1
 8008a22:	0019      	movs	r1, r3
 8008a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a26:	891b      	ldrh	r3, [r3, #8]
 8008a28:	18cb      	adds	r3, r1, r3
 8008a2a:	1ad3      	subs	r3, r2, r3
            while (next &&
 8008a2c:	d400      	bmi.n	8008a30 <tcp_receive+0xa4c>
 8008a2e:	e781      	b.n	8008934 <tcp_receive+0x950>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8008a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d05d      	beq.n	8008af2 <tcp_receive+0xb0e>
                TCP_SEQ_GT(seqno + tcplen,
 8008a36:	4b82      	ldr	r3, [pc, #520]	; (8008c40 <tcp_receive+0xc5c>)
 8008a38:	881b      	ldrh	r3, [r3, #0]
 8008a3a:	001a      	movs	r2, r3
 8008a3c:	4b81      	ldr	r3, [pc, #516]	; (8008c44 <tcp_receive+0xc60>)
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	18d2      	adds	r2, r2, r3
 8008a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a44:	68db      	ldr	r3, [r3, #12]
 8008a46:	7919      	ldrb	r1, [r3, #4]
 8008a48:	7958      	ldrb	r0, [r3, #5]
 8008a4a:	0200      	lsls	r0, r0, #8
 8008a4c:	4301      	orrs	r1, r0
 8008a4e:	7998      	ldrb	r0, [r3, #6]
 8008a50:	0400      	lsls	r0, r0, #16
 8008a52:	4301      	orrs	r1, r0
 8008a54:	79db      	ldrb	r3, [r3, #7]
 8008a56:	061b      	lsls	r3, r3, #24
 8008a58:	430b      	orrs	r3, r1
 8008a5a:	1ad3      	subs	r3, r2, r3
            if (next &&
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	dd48      	ble.n	8008af2 <tcp_receive+0xb0e>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8008a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a62:	68db      	ldr	r3, [r3, #12]
 8008a64:	791a      	ldrb	r2, [r3, #4]
 8008a66:	7959      	ldrb	r1, [r3, #5]
 8008a68:	0209      	lsls	r1, r1, #8
 8008a6a:	430a      	orrs	r2, r1
 8008a6c:	7999      	ldrb	r1, [r3, #6]
 8008a6e:	0409      	lsls	r1, r1, #16
 8008a70:	430a      	orrs	r2, r1
 8008a72:	79db      	ldrb	r3, [r3, #7]
 8008a74:	061b      	lsls	r3, r3, #24
 8008a76:	4313      	orrs	r3, r2
 8008a78:	b29a      	uxth	r2, r3
 8008a7a:	4b72      	ldr	r3, [pc, #456]	; (8008c44 <tcp_receive+0xc60>)
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	b29b      	uxth	r3, r3
 8008a80:	1ad3      	subs	r3, r2, r3
 8008a82:	b29a      	uxth	r2, r3
 8008a84:	4b6d      	ldr	r3, [pc, #436]	; (8008c3c <tcp_receive+0xc58>)
 8008a86:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8008a88:	4b6c      	ldr	r3, [pc, #432]	; (8008c3c <tcp_receive+0xc58>)
 8008a8a:	68db      	ldr	r3, [r3, #12]
 8008a8c:	7b1a      	ldrb	r2, [r3, #12]
 8008a8e:	7b5b      	ldrb	r3, [r3, #13]
 8008a90:	021b      	lsls	r3, r3, #8
 8008a92:	4313      	orrs	r3, r2
 8008a94:	b29b      	uxth	r3, r3
 8008a96:	0018      	movs	r0, r3
 8008a98:	f7fb fdd2 	bl	8004640 <lwip_ntohs>
 8008a9c:	0003      	movs	r3, r0
 8008a9e:	001a      	movs	r2, r3
 8008aa0:	2302      	movs	r3, #2
 8008aa2:	4013      	ands	r3, r2
 8008aa4:	d005      	beq.n	8008ab2 <tcp_receive+0xace>
                inseg.len -= 1;
 8008aa6:	4b65      	ldr	r3, [pc, #404]	; (8008c3c <tcp_receive+0xc58>)
 8008aa8:	891b      	ldrh	r3, [r3, #8]
 8008aaa:	3b01      	subs	r3, #1
 8008aac:	b29a      	uxth	r2, r3
 8008aae:	4b63      	ldr	r3, [pc, #396]	; (8008c3c <tcp_receive+0xc58>)
 8008ab0:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8008ab2:	4b62      	ldr	r3, [pc, #392]	; (8008c3c <tcp_receive+0xc58>)
 8008ab4:	685a      	ldr	r2, [r3, #4]
 8008ab6:	4b61      	ldr	r3, [pc, #388]	; (8008c3c <tcp_receive+0xc58>)
 8008ab8:	891b      	ldrh	r3, [r3, #8]
 8008aba:	0019      	movs	r1, r3
 8008abc:	0010      	movs	r0, r2
 8008abe:	f7fc fcf8 	bl	80054b2 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8008ac2:	4b5e      	ldr	r3, [pc, #376]	; (8008c3c <tcp_receive+0xc58>)
 8008ac4:	891c      	ldrh	r4, [r3, #8]
 8008ac6:	4b5d      	ldr	r3, [pc, #372]	; (8008c3c <tcp_receive+0xc58>)
 8008ac8:	68db      	ldr	r3, [r3, #12]
 8008aca:	7b1a      	ldrb	r2, [r3, #12]
 8008acc:	7b5b      	ldrb	r3, [r3, #13]
 8008ace:	021b      	lsls	r3, r3, #8
 8008ad0:	4313      	orrs	r3, r2
 8008ad2:	b29b      	uxth	r3, r3
 8008ad4:	0018      	movs	r0, r3
 8008ad6:	f7fb fdb3 	bl	8004640 <lwip_ntohs>
 8008ada:	0003      	movs	r3, r0
 8008adc:	001a      	movs	r2, r3
 8008ade:	2303      	movs	r3, #3
 8008ae0:	4013      	ands	r3, r2
 8008ae2:	1e5a      	subs	r2, r3, #1
 8008ae4:	4193      	sbcs	r3, r2
 8008ae6:	b2db      	uxtb	r3, r3
 8008ae8:	b29b      	uxth	r3, r3
 8008aea:	18e3      	adds	r3, r4, r3
 8008aec:	b29a      	uxth	r2, r3
 8008aee:	4b54      	ldr	r3, [pc, #336]	; (8008c40 <tcp_receive+0xc5c>)
 8008af0:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008af6:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8008af8:	4b51      	ldr	r3, [pc, #324]	; (8008c40 <tcp_receive+0xc5c>)
 8008afa:	881b      	ldrh	r3, [r3, #0]
 8008afc:	001a      	movs	r2, r3
 8008afe:	4b51      	ldr	r3, [pc, #324]	; (8008c44 <tcp_receive+0xc60>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	18d2      	adds	r2, r2, r3
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	629a      	str	r2, [r3, #40]	; 0x28

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
        pcb->rcv_wnd -= tcplen;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008b0c:	4b4c      	ldr	r3, [pc, #304]	; (8008c40 <tcp_receive+0xc5c>)
 8008b0e:	881b      	ldrh	r3, [r3, #0]
 8008b10:	1ad3      	subs	r3, r2, r3
 8008b12:	b29a      	uxth	r2, r3
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	859a      	strh	r2, [r3, #44]	; 0x2c

        tcp_update_rcv_ann_wnd(pcb);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	0018      	movs	r0, r3
 8008b1c:	f7fd fa3c 	bl	8005f98 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8008b20:	4b46      	ldr	r3, [pc, #280]	; (8008c3c <tcp_receive+0xc58>)
 8008b22:	685b      	ldr	r3, [r3, #4]
 8008b24:	891b      	ldrh	r3, [r3, #8]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d006      	beq.n	8008b38 <tcp_receive+0xb54>
          recv_data = inseg.p;
 8008b2a:	4b44      	ldr	r3, [pc, #272]	; (8008c3c <tcp_receive+0xc58>)
 8008b2c:	685a      	ldr	r2, [r3, #4]
 8008b2e:	4b46      	ldr	r3, [pc, #280]	; (8008c48 <tcp_receive+0xc64>)
 8008b30:	601a      	str	r2, [r3, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8008b32:	4b42      	ldr	r3, [pc, #264]	; (8008c3c <tcp_receive+0xc58>)
 8008b34:	2200      	movs	r2, #0
 8008b36:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8008b38:	4b40      	ldr	r3, [pc, #256]	; (8008c3c <tcp_receive+0xc58>)
 8008b3a:	68db      	ldr	r3, [r3, #12]
 8008b3c:	7b1a      	ldrb	r2, [r3, #12]
 8008b3e:	7b5b      	ldrb	r3, [r3, #13]
 8008b40:	021b      	lsls	r3, r3, #8
 8008b42:	4313      	orrs	r3, r2
 8008b44:	b29b      	uxth	r3, r3
 8008b46:	0018      	movs	r0, r3
 8008b48:	f7fb fd7a 	bl	8004640 <lwip_ntohs>
 8008b4c:	0003      	movs	r3, r0
 8008b4e:	001a      	movs	r2, r3
 8008b50:	2301      	movs	r3, #1
 8008b52:	4013      	ands	r3, r2
 8008b54:	d100      	bne.n	8008b58 <tcp_receive+0xb74>
 8008b56:	e0a7      	b.n	8008ca8 <tcp_receive+0xcc4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8008b58:	4b3c      	ldr	r3, [pc, #240]	; (8008c4c <tcp_receive+0xc68>)
 8008b5a:	781b      	ldrb	r3, [r3, #0]
 8008b5c:	2220      	movs	r2, #32
 8008b5e:	4313      	orrs	r3, r2
 8008b60:	b2da      	uxtb	r2, r3
 8008b62:	4b3a      	ldr	r3, [pc, #232]	; (8008c4c <tcp_receive+0xc68>)
 8008b64:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8008b66:	e09f      	b.n	8008ca8 <tcp_receive+0xcc4>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b6c:	60fb      	str	r3, [r7, #12]
          seqno = pcb->ooseq->tcphdr->seqno;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b72:	68db      	ldr	r3, [r3, #12]
 8008b74:	791a      	ldrb	r2, [r3, #4]
 8008b76:	7959      	ldrb	r1, [r3, #5]
 8008b78:	0209      	lsls	r1, r1, #8
 8008b7a:	430a      	orrs	r2, r1
 8008b7c:	7999      	ldrb	r1, [r3, #6]
 8008b7e:	0409      	lsls	r1, r1, #16
 8008b80:	430a      	orrs	r2, r1
 8008b82:	79db      	ldrb	r3, [r3, #7]
 8008b84:	061b      	lsls	r3, r3, #24
 8008b86:	4313      	orrs	r3, r2
 8008b88:	001a      	movs	r2, r3
 8008b8a:	4b2e      	ldr	r3, [pc, #184]	; (8008c44 <tcp_receive+0xc60>)
 8008b8c:	601a      	str	r2, [r3, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	891b      	ldrh	r3, [r3, #8]
 8008b92:	001c      	movs	r4, r3
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	68db      	ldr	r3, [r3, #12]
 8008b98:	7b1a      	ldrb	r2, [r3, #12]
 8008b9a:	7b5b      	ldrb	r3, [r3, #13]
 8008b9c:	021b      	lsls	r3, r3, #8
 8008b9e:	4313      	orrs	r3, r2
 8008ba0:	b29b      	uxth	r3, r3
 8008ba2:	0018      	movs	r0, r3
 8008ba4:	f7fb fd4c 	bl	8004640 <lwip_ntohs>
 8008ba8:	0003      	movs	r3, r0
 8008baa:	001a      	movs	r2, r3
 8008bac:	2303      	movs	r3, #3
 8008bae:	4013      	ands	r3, r2
 8008bb0:	1e5a      	subs	r2, r3, #1
 8008bb2:	4193      	sbcs	r3, r2
 8008bb4:	b2db      	uxtb	r3, r3
 8008bb6:	18e2      	adds	r2, r4, r3
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bbc:	189a      	adds	r2, r3, r2
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	629a      	str	r2, [r3, #40]	; 0x28
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	68db      	ldr	r3, [r3, #12]
 8008bc6:	7b1a      	ldrb	r2, [r3, #12]
 8008bc8:	7b5b      	ldrb	r3, [r3, #13]
 8008bca:	021b      	lsls	r3, r3, #8
 8008bcc:	4313      	orrs	r3, r2
 8008bce:	b29b      	uxth	r3, r3
 8008bd0:	0018      	movs	r0, r3
 8008bd2:	f7fb fd35 	bl	8004640 <lwip_ntohs>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	891b      	ldrh	r3, [r3, #8]
 8008bda:	001c      	movs	r4, r3
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	68db      	ldr	r3, [r3, #12]
 8008be0:	7b1a      	ldrb	r2, [r3, #12]
 8008be2:	7b5b      	ldrb	r3, [r3, #13]
 8008be4:	021b      	lsls	r3, r3, #8
 8008be6:	4313      	orrs	r3, r2
 8008be8:	b29b      	uxth	r3, r3
 8008bea:	0018      	movs	r0, r3
 8008bec:	f7fb fd28 	bl	8004640 <lwip_ntohs>
 8008bf0:	0003      	movs	r3, r0
 8008bf2:	001a      	movs	r2, r3
 8008bf4:	2303      	movs	r3, #3
 8008bf6:	4013      	ands	r3, r2
 8008bf8:	1e5a      	subs	r2, r3, #1
 8008bfa:	4193      	sbcs	r3, r2
 8008bfc:	b2db      	uxtb	r3, r3
 8008bfe:	18e1      	adds	r1, r4, r3
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008c04:	b28b      	uxth	r3, r1
 8008c06:	1ad3      	subs	r3, r2, r3
 8008c08:	b29a      	uxth	r2, r3
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	859a      	strh	r2, [r3, #44]	; 0x2c

          tcp_update_rcv_ann_wnd(pcb);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	0018      	movs	r0, r3
 8008c12:	f7fd f9c1 	bl	8005f98 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	685b      	ldr	r3, [r3, #4]
 8008c1a:	891b      	ldrh	r3, [r3, #8]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d01e      	beq.n	8008c5e <tcp_receive+0xc7a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            if (recv_data) {
 8008c20:	4b09      	ldr	r3, [pc, #36]	; (8008c48 <tcp_receive+0xc64>)
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d013      	beq.n	8008c50 <tcp_receive+0xc6c>
              pbuf_cat(recv_data, cseg->p);
 8008c28:	4b07      	ldr	r3, [pc, #28]	; (8008c48 <tcp_receive+0xc64>)
 8008c2a:	681a      	ldr	r2, [r3, #0]
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	685b      	ldr	r3, [r3, #4]
 8008c30:	0019      	movs	r1, r3
 8008c32:	0010      	movs	r0, r2
 8008c34:	f7fc fdd5 	bl	80057e2 <pbuf_cat>
 8008c38:	e00e      	b.n	8008c58 <tcp_receive+0xc74>
 8008c3a:	46c0      	nop			; (mov r8, r8)
 8008c3c:	2000227c 	.word	0x2000227c
 8008c40:	2000229e 	.word	0x2000229e
 8008c44:	20002294 	.word	0x20002294
 8008c48:	200022a4 	.word	0x200022a4
 8008c4c:	200022a0 	.word	0x200022a0
            } else {
              recv_data = cseg->p;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	685a      	ldr	r2, [r3, #4]
 8008c54:	4b9b      	ldr	r3, [pc, #620]	; (8008ec4 <tcp_receive+0xee0>)
 8008c56:	601a      	str	r2, [r3, #0]
            }
            cseg->p = NULL;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	68db      	ldr	r3, [r3, #12]
 8008c62:	7b1a      	ldrb	r2, [r3, #12]
 8008c64:	7b5b      	ldrb	r3, [r3, #13]
 8008c66:	021b      	lsls	r3, r3, #8
 8008c68:	4313      	orrs	r3, r2
 8008c6a:	b29b      	uxth	r3, r3
 8008c6c:	0018      	movs	r0, r3
 8008c6e:	f7fb fce7 	bl	8004640 <lwip_ntohs>
 8008c72:	0003      	movs	r3, r0
 8008c74:	001a      	movs	r2, r3
 8008c76:	2301      	movs	r3, #1
 8008c78:	4013      	ands	r3, r2
 8008c7a:	d00d      	beq.n	8008c98 <tcp_receive+0xcb4>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8008c7c:	4b92      	ldr	r3, [pc, #584]	; (8008ec8 <tcp_receive+0xee4>)
 8008c7e:	781b      	ldrb	r3, [r3, #0]
 8008c80:	2220      	movs	r2, #32
 8008c82:	4313      	orrs	r3, r2
 8008c84:	b2da      	uxtb	r2, r3
 8008c86:	4b90      	ldr	r3, [pc, #576]	; (8008ec8 <tcp_receive+0xee4>)
 8008c88:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	7e1b      	ldrb	r3, [r3, #24]
 8008c8e:	2b04      	cmp	r3, #4
 8008c90:	d102      	bne.n	8008c98 <tcp_receive+0xcb4>
              pcb->state = CLOSE_WAIT;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2207      	movs	r2, #7
 8008c96:	761a      	strb	r2, [r3, #24]
            } 
          }

          pcb->ooseq = cseg->next;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	681a      	ldr	r2, [r3, #0]
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	0018      	movs	r0, r3
 8008ca4:	f7fd fd3b 	bl	800671e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d012      	beq.n	8008cd6 <tcp_receive+0xcf2>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008cb4:	68db      	ldr	r3, [r3, #12]
 8008cb6:	791a      	ldrb	r2, [r3, #4]
 8008cb8:	7959      	ldrb	r1, [r3, #5]
 8008cba:	0209      	lsls	r1, r1, #8
 8008cbc:	430a      	orrs	r2, r1
 8008cbe:	7999      	ldrb	r1, [r3, #6]
 8008cc0:	0409      	lsls	r1, r1, #16
 8008cc2:	430a      	orrs	r2, r1
 8008cc4:	79db      	ldrb	r3, [r3, #7]
 8008cc6:	061b      	lsls	r3, r3, #24
 8008cc8:	4313      	orrs	r3, r2
 8008cca:	001a      	movs	r2, r3
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        while (pcb->ooseq != NULL &&
 8008cd0:	429a      	cmp	r2, r3
 8008cd2:	d100      	bne.n	8008cd6 <tcp_receive+0xcf2>
 8008cd4:	e748      	b.n	8008b68 <tcp_receive+0xb84>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	7f9b      	ldrb	r3, [r3, #30]
 8008cda:	001a      	movs	r2, r3
 8008cdc:	2301      	movs	r3, #1
 8008cde:	4013      	ands	r3, r2
 8008ce0:	d00e      	beq.n	8008d00 <tcp_receive+0xd1c>
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	7f9b      	ldrb	r3, [r3, #30]
 8008ce6:	2201      	movs	r2, #1
 8008ce8:	4393      	bics	r3, r2
 8008cea:	b2da      	uxtb	r2, r3
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	779a      	strb	r2, [r3, #30]
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	7f9b      	ldrb	r3, [r3, #30]
 8008cf4:	2202      	movs	r2, #2
 8008cf6:	4313      	orrs	r3, r2
 8008cf8:	b2da      	uxtb	r2, r3
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	779a      	strb	r2, [r3, #30]
      if (pcb->rcv_nxt == seqno) {
 8008cfe:	e1f4      	b.n	80090ea <tcp_receive+0x1106>
        tcp_ack(pcb);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	7f9b      	ldrb	r3, [r3, #30]
 8008d04:	2201      	movs	r2, #1
 8008d06:	4313      	orrs	r3, r2
 8008d08:	b2da      	uxtb	r2, r3
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	779a      	strb	r2, [r3, #30]
      if (pcb->rcv_nxt == seqno) {
 8008d0e:	e1ec      	b.n	80090ea <tcp_receive+0x1106>

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	0018      	movs	r0, r3
 8008d14:	f000 fe1c 	bl	8009950 <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d107      	bne.n	8008d30 <tcp_receive+0xd4c>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8008d20:	4b6a      	ldr	r3, [pc, #424]	; (8008ecc <tcp_receive+0xee8>)
 8008d22:	0018      	movs	r0, r3
 8008d24:	f7fd fd14 	bl	8006750 <tcp_seg_copy>
 8008d28:	0002      	movs	r2, r0
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	675a      	str	r2, [r3, #116]	; 0x74
      if (pcb->rcv_nxt == seqno) {
 8008d2e:	e1dc      	b.n	80090ea <tcp_receive+0x1106>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
 8008d30:	2300      	movs	r3, #0
 8008d32:	62bb      	str	r3, [r7, #40]	; 0x28
          for(next = pcb->ooseq; next != NULL; next = next->next) {
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008d3a:	e1c0      	b.n	80090be <tcp_receive+0x10da>
            if (seqno == next->tcphdr->seqno) {
 8008d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d3e:	68db      	ldr	r3, [r3, #12]
 8008d40:	791a      	ldrb	r2, [r3, #4]
 8008d42:	7959      	ldrb	r1, [r3, #5]
 8008d44:	0209      	lsls	r1, r1, #8
 8008d46:	430a      	orrs	r2, r1
 8008d48:	7999      	ldrb	r1, [r3, #6]
 8008d4a:	0409      	lsls	r1, r1, #16
 8008d4c:	430a      	orrs	r2, r1
 8008d4e:	79db      	ldrb	r3, [r3, #7]
 8008d50:	061b      	lsls	r3, r3, #24
 8008d52:	4313      	orrs	r3, r2
 8008d54:	001a      	movs	r2, r3
 8008d56:	4b5e      	ldr	r3, [pc, #376]	; (8008ed0 <tcp_receive+0xeec>)
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	429a      	cmp	r2, r3
 8008d5c:	d121      	bne.n	8008da2 <tcp_receive+0xdbe>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8008d5e:	4b5b      	ldr	r3, [pc, #364]	; (8008ecc <tcp_receive+0xee8>)
 8008d60:	891a      	ldrh	r2, [r3, #8]
 8008d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d64:	891b      	ldrh	r3, [r3, #8]
 8008d66:	429a      	cmp	r2, r3
 8008d68:	d800      	bhi.n	8008d6c <tcp_receive+0xd88>
 8008d6a:	e1ad      	b.n	80090c8 <tcp_receive+0x10e4>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
 8008d6c:	4b57      	ldr	r3, [pc, #348]	; (8008ecc <tcp_receive+0xee8>)
 8008d6e:	0018      	movs	r0, r3
 8008d70:	f7fd fcee 	bl	8006750 <tcp_seg_copy>
 8008d74:	0003      	movs	r3, r0
 8008d76:	60fb      	str	r3, [r7, #12]
                if (cseg != NULL) {
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d100      	bne.n	8008d80 <tcp_receive+0xd9c>
 8008d7e:	e1a5      	b.n	80090cc <tcp_receive+0x10e8>
                  if (prev != NULL) {
 8008d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d003      	beq.n	8008d8e <tcp_receive+0xdaa>
                    prev->next = cseg;
 8008d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d88:	68fa      	ldr	r2, [r7, #12]
 8008d8a:	601a      	str	r2, [r3, #0]
 8008d8c:	e002      	b.n	8008d94 <tcp_receive+0xdb0>
                  } else {
                    pcb->ooseq = cseg;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	68fa      	ldr	r2, [r7, #12]
 8008d92:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8008d94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	0011      	movs	r1, r2
 8008d9a:	0018      	movs	r0, r3
 8008d9c:	f7ff f874 	bl	8007e88 <tcp_oos_insert_segment>
                }
                break;
 8008da0:	e194      	b.n	80090cc <tcp_receive+0x10e8>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8008da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d124      	bne.n	8008df2 <tcp_receive+0xe0e>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8008da8:	4b49      	ldr	r3, [pc, #292]	; (8008ed0 <tcp_receive+0xeec>)
 8008daa:	681a      	ldr	r2, [r3, #0]
 8008dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dae:	68db      	ldr	r3, [r3, #12]
 8008db0:	7919      	ldrb	r1, [r3, #4]
 8008db2:	7958      	ldrb	r0, [r3, #5]
 8008db4:	0200      	lsls	r0, r0, #8
 8008db6:	4301      	orrs	r1, r0
 8008db8:	7998      	ldrb	r0, [r3, #6]
 8008dba:	0400      	lsls	r0, r0, #16
 8008dbc:	4301      	orrs	r1, r0
 8008dbe:	79db      	ldrb	r3, [r3, #7]
 8008dc0:	061b      	lsls	r3, r3, #24
 8008dc2:	430b      	orrs	r3, r1
 8008dc4:	1ad3      	subs	r3, r2, r3
 8008dc6:	d400      	bmi.n	8008dca <tcp_receive+0xde6>
 8008dc8:	e084      	b.n	8008ed4 <tcp_receive+0xef0>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
 8008dca:	4b40      	ldr	r3, [pc, #256]	; (8008ecc <tcp_receive+0xee8>)
 8008dcc:	0018      	movs	r0, r3
 8008dce:	f7fd fcbf 	bl	8006750 <tcp_seg_copy>
 8008dd2:	0003      	movs	r3, r0
 8008dd4:	60fb      	str	r3, [r7, #12]
                  if (cseg != NULL) {
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d100      	bne.n	8008dde <tcp_receive+0xdfa>
 8008ddc:	e178      	b.n	80090d0 <tcp_receive+0x10ec>
                    pcb->ooseq = cseg;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	68fa      	ldr	r2, [r7, #12]
 8008de2:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8008de4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	0011      	movs	r1, r2
 8008dea:	0018      	movs	r0, r3
 8008dec:	f7ff f84c 	bl	8007e88 <tcp_oos_insert_segment>
                  }
                  break;
 8008df0:	e16e      	b.n	80090d0 <tcp_receive+0x10ec>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 8008df2:	4b37      	ldr	r3, [pc, #220]	; (8008ed0 <tcp_receive+0xeec>)
 8008df4:	681a      	ldr	r2, [r3, #0]
 8008df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008df8:	68db      	ldr	r3, [r3, #12]
 8008dfa:	7919      	ldrb	r1, [r3, #4]
 8008dfc:	7958      	ldrb	r0, [r3, #5]
 8008dfe:	0200      	lsls	r0, r0, #8
 8008e00:	4301      	orrs	r1, r0
 8008e02:	7998      	ldrb	r0, [r3, #6]
 8008e04:	0400      	lsls	r0, r0, #16
 8008e06:	4301      	orrs	r1, r0
 8008e08:	79db      	ldrb	r3, [r3, #7]
 8008e0a:	061b      	lsls	r3, r3, #24
 8008e0c:	430b      	orrs	r3, r1
 8008e0e:	1ad3      	subs	r3, r2, r3
 8008e10:	3b01      	subs	r3, #1
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	db5e      	blt.n	8008ed4 <tcp_receive+0xef0>
 8008e16:	4b2e      	ldr	r3, [pc, #184]	; (8008ed0 <tcp_receive+0xeec>)
 8008e18:	681a      	ldr	r2, [r3, #0]
 8008e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e1c:	68db      	ldr	r3, [r3, #12]
 8008e1e:	7919      	ldrb	r1, [r3, #4]
 8008e20:	7958      	ldrb	r0, [r3, #5]
 8008e22:	0200      	lsls	r0, r0, #8
 8008e24:	4301      	orrs	r1, r0
 8008e26:	7998      	ldrb	r0, [r3, #6]
 8008e28:	0400      	lsls	r0, r0, #16
 8008e2a:	4301      	orrs	r1, r0
 8008e2c:	79db      	ldrb	r3, [r3, #7]
 8008e2e:	061b      	lsls	r3, r3, #24
 8008e30:	430b      	orrs	r3, r1
 8008e32:	1ad3      	subs	r3, r2, r3
 8008e34:	3301      	adds	r3, #1
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	dc4c      	bgt.n	8008ed4 <tcp_receive+0xef0>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
 8008e3a:	4b24      	ldr	r3, [pc, #144]	; (8008ecc <tcp_receive+0xee8>)
 8008e3c:	0018      	movs	r0, r3
 8008e3e:	f7fd fc87 	bl	8006750 <tcp_seg_copy>
 8008e42:	0003      	movs	r3, r0
 8008e44:	60fb      	str	r3, [r7, #12]
                  if (cseg != NULL) {
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d100      	bne.n	8008e4e <tcp_receive+0xe6a>
 8008e4c:	e142      	b.n	80090d4 <tcp_receive+0x10f0>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8008e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e50:	68db      	ldr	r3, [r3, #12]
 8008e52:	791a      	ldrb	r2, [r3, #4]
 8008e54:	7959      	ldrb	r1, [r3, #5]
 8008e56:	0209      	lsls	r1, r1, #8
 8008e58:	430a      	orrs	r2, r1
 8008e5a:	7999      	ldrb	r1, [r3, #6]
 8008e5c:	0409      	lsls	r1, r1, #16
 8008e5e:	430a      	orrs	r2, r1
 8008e60:	79db      	ldrb	r3, [r3, #7]
 8008e62:	061b      	lsls	r3, r3, #24
 8008e64:	4313      	orrs	r3, r2
 8008e66:	001a      	movs	r2, r3
 8008e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e6a:	891b      	ldrh	r3, [r3, #8]
 8008e6c:	18d2      	adds	r2, r2, r3
 8008e6e:	4b18      	ldr	r3, [pc, #96]	; (8008ed0 <tcp_receive+0xeec>)
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	1ad3      	subs	r3, r2, r3
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	dd1b      	ble.n	8008eb0 <tcp_receive+0xecc>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8008e78:	4b15      	ldr	r3, [pc, #84]	; (8008ed0 <tcp_receive+0xeec>)
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	b29a      	uxth	r2, r3
 8008e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e80:	68db      	ldr	r3, [r3, #12]
 8008e82:	7919      	ldrb	r1, [r3, #4]
 8008e84:	7958      	ldrb	r0, [r3, #5]
 8008e86:	0200      	lsls	r0, r0, #8
 8008e88:	4301      	orrs	r1, r0
 8008e8a:	7998      	ldrb	r0, [r3, #6]
 8008e8c:	0400      	lsls	r0, r0, #16
 8008e8e:	4301      	orrs	r1, r0
 8008e90:	79db      	ldrb	r3, [r3, #7]
 8008e92:	061b      	lsls	r3, r3, #24
 8008e94:	430b      	orrs	r3, r1
 8008e96:	b29b      	uxth	r3, r3
 8008e98:	1ad3      	subs	r3, r2, r3
 8008e9a:	b29a      	uxth	r2, r3
 8008e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e9e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8008ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ea2:	685a      	ldr	r2, [r3, #4]
 8008ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ea6:	891b      	ldrh	r3, [r3, #8]
 8008ea8:	0019      	movs	r1, r3
 8008eaa:	0010      	movs	r0, r2
 8008eac:	f7fc fb01 	bl	80054b2 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8008eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eb2:	68fa      	ldr	r2, [r7, #12]
 8008eb4:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8008eb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	0011      	movs	r1, r2
 8008ebc:	0018      	movs	r0, r3
 8008ebe:	f7fe ffe3 	bl	8007e88 <tcp_oos_insert_segment>
                  }
                  break;
 8008ec2:	e107      	b.n	80090d4 <tcp_receive+0x10f0>
 8008ec4:	200022a4 	.word	0x200022a4
 8008ec8:	200022a0 	.word	0x200022a0
 8008ecc:	2000227c 	.word	0x2000227c
 8008ed0:	20002294 	.word	0x20002294
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8008ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d000      	beq.n	8008ede <tcp_receive+0xefa>
 8008edc:	e0ea      	b.n	80090b4 <tcp_receive+0x10d0>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8008ede:	4b92      	ldr	r3, [pc, #584]	; (8009128 <tcp_receive+0x1144>)
 8008ee0:	681a      	ldr	r2, [r3, #0]
 8008ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ee4:	68db      	ldr	r3, [r3, #12]
 8008ee6:	7919      	ldrb	r1, [r3, #4]
 8008ee8:	7958      	ldrb	r0, [r3, #5]
 8008eea:	0200      	lsls	r0, r0, #8
 8008eec:	4301      	orrs	r1, r0
 8008eee:	7998      	ldrb	r0, [r3, #6]
 8008ef0:	0400      	lsls	r0, r0, #16
 8008ef2:	4301      	orrs	r1, r0
 8008ef4:	79db      	ldrb	r3, [r3, #7]
 8008ef6:	061b      	lsls	r3, r3, #24
 8008ef8:	430b      	orrs	r3, r1
 8008efa:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	dc00      	bgt.n	8008f02 <tcp_receive+0xf1e>
 8008f00:	e0d8      	b.n	80090b4 <tcp_receive+0x10d0>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8008f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f04:	68db      	ldr	r3, [r3, #12]
 8008f06:	7b1a      	ldrb	r2, [r3, #12]
 8008f08:	7b5b      	ldrb	r3, [r3, #13]
 8008f0a:	021b      	lsls	r3, r3, #8
 8008f0c:	4313      	orrs	r3, r2
 8008f0e:	b29b      	uxth	r3, r3
 8008f10:	0018      	movs	r0, r3
 8008f12:	f7fb fb95 	bl	8004640 <lwip_ntohs>
 8008f16:	0003      	movs	r3, r0
 8008f18:	001a      	movs	r2, r3
 8008f1a:	2301      	movs	r3, #1
 8008f1c:	4013      	ands	r3, r2
 8008f1e:	d000      	beq.n	8008f22 <tcp_receive+0xf3e>
 8008f20:	e0da      	b.n	80090d8 <tcp_receive+0x10f4>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8008f22:	4b82      	ldr	r3, [pc, #520]	; (800912c <tcp_receive+0x1148>)
 8008f24:	0018      	movs	r0, r3
 8008f26:	f7fd fc13 	bl	8006750 <tcp_seg_copy>
 8008f2a:	0002      	movs	r2, r0
 8008f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f2e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8008f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d100      	bne.n	8008f3a <tcp_receive+0xf56>
 8008f38:	e0d0      	b.n	80090dc <tcp_receive+0x10f8>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8008f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f3c:	68db      	ldr	r3, [r3, #12]
 8008f3e:	791a      	ldrb	r2, [r3, #4]
 8008f40:	7959      	ldrb	r1, [r3, #5]
 8008f42:	0209      	lsls	r1, r1, #8
 8008f44:	430a      	orrs	r2, r1
 8008f46:	7999      	ldrb	r1, [r3, #6]
 8008f48:	0409      	lsls	r1, r1, #16
 8008f4a:	430a      	orrs	r2, r1
 8008f4c:	79db      	ldrb	r3, [r3, #7]
 8008f4e:	061b      	lsls	r3, r3, #24
 8008f50:	4313      	orrs	r3, r2
 8008f52:	001a      	movs	r2, r3
 8008f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f56:	891b      	ldrh	r3, [r3, #8]
 8008f58:	18d2      	adds	r2, r2, r3
 8008f5a:	4b73      	ldr	r3, [pc, #460]	; (8009128 <tcp_receive+0x1144>)
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	1ad3      	subs	r3, r2, r3
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	dd1b      	ble.n	8008f9c <tcp_receive+0xfb8>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8008f64:	4b70      	ldr	r3, [pc, #448]	; (8009128 <tcp_receive+0x1144>)
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	b29a      	uxth	r2, r3
 8008f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f6c:	68db      	ldr	r3, [r3, #12]
 8008f6e:	7919      	ldrb	r1, [r3, #4]
 8008f70:	7958      	ldrb	r0, [r3, #5]
 8008f72:	0200      	lsls	r0, r0, #8
 8008f74:	4301      	orrs	r1, r0
 8008f76:	7998      	ldrb	r0, [r3, #6]
 8008f78:	0400      	lsls	r0, r0, #16
 8008f7a:	4301      	orrs	r1, r0
 8008f7c:	79db      	ldrb	r3, [r3, #7]
 8008f7e:	061b      	lsls	r3, r3, #24
 8008f80:	430b      	orrs	r3, r1
 8008f82:	b29b      	uxth	r3, r3
 8008f84:	1ad3      	subs	r3, r2, r3
 8008f86:	b29a      	uxth	r2, r3
 8008f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f8a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8008f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f8e:	685a      	ldr	r2, [r3, #4]
 8008f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f92:	891b      	ldrh	r3, [r3, #8]
 8008f94:	0019      	movs	r1, r3
 8008f96:	0010      	movs	r0, r2
 8008f98:	f7fc fa8b 	bl	80054b2 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if ((u32_t)tcplen + seqno > pcb->rcv_nxt + (u32_t)pcb->rcv_wnd) {
 8008f9c:	4b64      	ldr	r3, [pc, #400]	; (8009130 <tcp_receive+0x114c>)
 8008f9e:	881b      	ldrh	r3, [r3, #0]
 8008fa0:	001a      	movs	r2, r3
 8008fa2:	4b61      	ldr	r3, [pc, #388]	; (8009128 <tcp_receive+0x1144>)
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	18d2      	adds	r2, r2, r3
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fac:	6879      	ldr	r1, [r7, #4]
 8008fae:	8d89      	ldrh	r1, [r1, #44]	; 0x2c
 8008fb0:	185b      	adds	r3, r3, r1
 8008fb2:	429a      	cmp	r2, r3
 8008fb4:	d800      	bhi.n	8008fb8 <tcp_receive+0xfd4>
 8008fb6:	e091      	b.n	80090dc <tcp_receive+0x10f8>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG, 
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8008fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	68db      	ldr	r3, [r3, #12]
 8008fbe:	7b1a      	ldrb	r2, [r3, #12]
 8008fc0:	7b5b      	ldrb	r3, [r3, #13]
 8008fc2:	021b      	lsls	r3, r3, #8
 8008fc4:	4313      	orrs	r3, r2
 8008fc6:	b29b      	uxth	r3, r3
 8008fc8:	0018      	movs	r0, r3
 8008fca:	f7fb fb39 	bl	8004640 <lwip_ntohs>
 8008fce:	0003      	movs	r3, r0
 8008fd0:	001a      	movs	r2, r3
 8008fd2:	2301      	movs	r3, #1
 8008fd4:	4013      	ands	r3, r2
 8008fd6:	d039      	beq.n	800904c <tcp_receive+0x1068>
                      /* Must remove the FIN from the header as we're trimming 
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) &~ TCP_FIN);
 8008fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	68db      	ldr	r3, [r3, #12]
 8008fde:	7b1a      	ldrb	r2, [r3, #12]
 8008fe0:	7b5b      	ldrb	r3, [r3, #13]
 8008fe2:	021b      	lsls	r3, r3, #8
 8008fe4:	4313      	orrs	r3, r2
 8008fe6:	b29b      	uxth	r3, r3
 8008fe8:	b21b      	sxth	r3, r3
 8008fea:	4a52      	ldr	r2, [pc, #328]	; (8009134 <tcp_receive+0x1150>)
 8008fec:	4013      	ands	r3, r2
 8008fee:	b21c      	sxth	r4, r3
 8008ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	68db      	ldr	r3, [r3, #12]
 8008ff6:	7b1a      	ldrb	r2, [r3, #12]
 8008ff8:	7b5b      	ldrb	r3, [r3, #13]
 8008ffa:	021b      	lsls	r3, r3, #8
 8008ffc:	4313      	orrs	r3, r2
 8008ffe:	b29b      	uxth	r3, r3
 8009000:	0018      	movs	r0, r3
 8009002:	f7fb fb1d 	bl	8004640 <lwip_ntohs>
 8009006:	0003      	movs	r3, r0
 8009008:	001a      	movs	r2, r3
 800900a:	233e      	movs	r3, #62	; 0x3e
 800900c:	4013      	ands	r3, r2
 800900e:	b29b      	uxth	r3, r3
 8009010:	0018      	movs	r0, r3
 8009012:	f7fb faff 	bl	8004614 <lwip_htons>
 8009016:	0003      	movs	r3, r0
 8009018:	b21b      	sxth	r3, r3
 800901a:	4323      	orrs	r3, r4
 800901c:	b21a      	sxth	r2, r3
 800901e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	68db      	ldr	r3, [r3, #12]
 8009024:	b292      	uxth	r2, r2
 8009026:	21ff      	movs	r1, #255	; 0xff
 8009028:	4011      	ands	r1, r2
 800902a:	000c      	movs	r4, r1
 800902c:	7b19      	ldrb	r1, [r3, #12]
 800902e:	2000      	movs	r0, #0
 8009030:	4001      	ands	r1, r0
 8009032:	1c08      	adds	r0, r1, #0
 8009034:	1c21      	adds	r1, r4, #0
 8009036:	4301      	orrs	r1, r0
 8009038:	7319      	strb	r1, [r3, #12]
 800903a:	0a12      	lsrs	r2, r2, #8
 800903c:	b290      	uxth	r0, r2
 800903e:	7b5a      	ldrb	r2, [r3, #13]
 8009040:	2100      	movs	r1, #0
 8009042:	400a      	ands	r2, r1
 8009044:	1c11      	adds	r1, r2, #0
 8009046:	1c02      	adds	r2, r0, #0
 8009048:	430a      	orrs	r2, r1
 800904a:	735a      	strb	r2, [r3, #13]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = pcb->rcv_nxt + pcb->rcv_wnd - seqno;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009050:	b29a      	uxth	r2, r3
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009056:	18d3      	adds	r3, r2, r3
 8009058:	b299      	uxth	r1, r3
 800905a:	4b33      	ldr	r3, [pc, #204]	; (8009128 <tcp_receive+0x1144>)
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	b29a      	uxth	r2, r3
 8009060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	1a8a      	subs	r2, r1, r2
 8009066:	b292      	uxth	r2, r2
 8009068:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800906a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	685a      	ldr	r2, [r3, #4]
 8009070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	891b      	ldrh	r3, [r3, #8]
 8009076:	0019      	movs	r1, r3
 8009078:	0010      	movs	r0, r2
 800907a:	f7fc fa1a 	bl	80054b2 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800907e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	891c      	ldrh	r4, [r3, #8]
 8009084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	68db      	ldr	r3, [r3, #12]
 800908a:	7b1a      	ldrb	r2, [r3, #12]
 800908c:	7b5b      	ldrb	r3, [r3, #13]
 800908e:	021b      	lsls	r3, r3, #8
 8009090:	4313      	orrs	r3, r2
 8009092:	b29b      	uxth	r3, r3
 8009094:	0018      	movs	r0, r3
 8009096:	f7fb fad3 	bl	8004640 <lwip_ntohs>
 800909a:	0003      	movs	r3, r0
 800909c:	001a      	movs	r2, r3
 800909e:	2303      	movs	r3, #3
 80090a0:	4013      	ands	r3, r2
 80090a2:	1e5a      	subs	r2, r3, #1
 80090a4:	4193      	sbcs	r3, r2
 80090a6:	b2db      	uxtb	r3, r3
 80090a8:	b29b      	uxth	r3, r3
 80090aa:	18e3      	adds	r3, r4, r3
 80090ac:	b29a      	uxth	r2, r3
 80090ae:	4b20      	ldr	r3, [pc, #128]	; (8009130 <tcp_receive+0x114c>)
 80090b0:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80090b2:	e013      	b.n	80090dc <tcp_receive+0x10f8>
              }
            }
            prev = next;
 80090b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090b6:	62bb      	str	r3, [r7, #40]	; 0x28
          for(next = pcb->ooseq; next != NULL; next = next->next) {
 80090b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80090be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d000      	beq.n	80090c6 <tcp_receive+0x10e2>
 80090c4:	e63a      	b.n	8008d3c <tcp_receive+0xd58>
      if (pcb->rcv_nxt == seqno) {
 80090c6:	e010      	b.n	80090ea <tcp_receive+0x1106>
                break;
 80090c8:	46c0      	nop			; (mov r8, r8)
 80090ca:	e00e      	b.n	80090ea <tcp_receive+0x1106>
                break;
 80090cc:	46c0      	nop			; (mov r8, r8)
 80090ce:	e00c      	b.n	80090ea <tcp_receive+0x1106>
                  break;
 80090d0:	46c0      	nop			; (mov r8, r8)
 80090d2:	e00a      	b.n	80090ea <tcp_receive+0x1106>
                  break;
 80090d4:	46c0      	nop			; (mov r8, r8)
 80090d6:	e008      	b.n	80090ea <tcp_receive+0x1106>
                  break;
 80090d8:	46c0      	nop			; (mov r8, r8)
 80090da:	e006      	b.n	80090ea <tcp_receive+0x1106>
                break;
 80090dc:	46c0      	nop			; (mov r8, r8)
      if (pcb->rcv_nxt == seqno) {
 80090de:	e004      	b.n	80090ea <tcp_receive+0x1106>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not withing the window. */
      tcp_send_empty_ack(pcb);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	0018      	movs	r0, r3
 80090e4:	f000 fc34 	bl	8009950 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, 
 80090e8:	e019      	b.n	800911e <tcp_receive+0x113a>
 80090ea:	e018      	b.n	800911e <tcp_receive+0x113a>
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    /*if (TCP_SEQ_GT(pcb->rcv_nxt, seqno) ||
      TCP_SEQ_GEQ(seqno, pcb->rcv_nxt + pcb->rcv_wnd)) {*/
    if(!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd-1)){
 80090ec:	4b0e      	ldr	r3, [pc, #56]	; (8009128 <tcp_receive+0x1144>)
 80090ee:	681a      	ldr	r2, [r3, #0]
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090f4:	1ad3      	subs	r3, r2, r3
 80090f6:	d40a      	bmi.n	800910e <tcp_receive+0x112a>
 80090f8:	4b0b      	ldr	r3, [pc, #44]	; (8009128 <tcp_receive+0x1144>)
 80090fa:	681a      	ldr	r2, [r3, #0]
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009100:	6879      	ldr	r1, [r7, #4]
 8009102:	8d89      	ldrh	r1, [r1, #44]	; 0x2c
 8009104:	185b      	adds	r3, r3, r1
 8009106:	1ad3      	subs	r3, r2, r3
 8009108:	3301      	adds	r3, #1
 800910a:	2b00      	cmp	r3, #0
 800910c:	dd07      	ble.n	800911e <tcp_receive+0x113a>
      tcp_ack_now(pcb);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	7f9b      	ldrb	r3, [r3, #30]
 8009112:	2202      	movs	r2, #2
 8009114:	4313      	orrs	r3, r2
 8009116:	b2da      	uxtb	r2, r3
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	779a      	strb	r2, [r3, #30]
    }
  }
}
 800911c:	e7ff      	b.n	800911e <tcp_receive+0x113a>
 800911e:	46c0      	nop			; (mov r8, r8)
 8009120:	46bd      	mov	sp, r7
 8009122:	b00d      	add	sp, #52	; 0x34
 8009124:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009126:	46c0      	nop			; (mov r8, r8)
 8009128:	20002294 	.word	0x20002294
 800912c:	2000227c 	.word	0x2000227c
 8009130:	2000229e 	.word	0x2000229e
 8009134:	ffffc0ff 	.word	0xffffc0ff

08009138 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b086      	sub	sp, #24
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
  u8_t *opts, opt;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  opts = (u8_t *)tcphdr + TCP_HLEN;
 8009140:	4b56      	ldr	r3, [pc, #344]	; (800929c <tcp_parseopt+0x164>)
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	3314      	adds	r3, #20
 8009146:	613b      	str	r3, [r7, #16]

  /* Parse the TCP MSS option, if present. */
  if(TCPH_HDRLEN(tcphdr) > 0x5) {
 8009148:	4b54      	ldr	r3, [pc, #336]	; (800929c <tcp_parseopt+0x164>)
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	7b1a      	ldrb	r2, [r3, #12]
 800914e:	7b5b      	ldrb	r3, [r3, #13]
 8009150:	021b      	lsls	r3, r3, #8
 8009152:	4313      	orrs	r3, r2
 8009154:	b29b      	uxth	r3, r3
 8009156:	0018      	movs	r0, r3
 8009158:	f7fb fa72 	bl	8004640 <lwip_ntohs>
 800915c:	0003      	movs	r3, r0
 800915e:	0b1b      	lsrs	r3, r3, #12
 8009160:	b29b      	uxth	r3, r3
 8009162:	2b05      	cmp	r3, #5
 8009164:	d800      	bhi.n	8009168 <tcp_parseopt+0x30>
 8009166:	e095      	b.n	8009294 <tcp_parseopt+0x15c>
    max_c = (TCPH_HDRLEN(tcphdr) - 5) << 2;
 8009168:	4b4c      	ldr	r3, [pc, #304]	; (800929c <tcp_parseopt+0x164>)
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	7b1a      	ldrb	r2, [r3, #12]
 800916e:	7b5b      	ldrb	r3, [r3, #13]
 8009170:	021b      	lsls	r3, r3, #8
 8009172:	4313      	orrs	r3, r2
 8009174:	b29b      	uxth	r3, r3
 8009176:	0018      	movs	r0, r3
 8009178:	f7fb fa62 	bl	8004640 <lwip_ntohs>
 800917c:	0003      	movs	r3, r0
 800917e:	0b1b      	lsrs	r3, r3, #12
 8009180:	b29b      	uxth	r3, r3
 8009182:	3b05      	subs	r3, #5
 8009184:	b29a      	uxth	r2, r3
 8009186:	230e      	movs	r3, #14
 8009188:	18fb      	adds	r3, r7, r3
 800918a:	0092      	lsls	r2, r2, #2
 800918c:	801a      	strh	r2, [r3, #0]
    for (c = 0; c < max_c; ) {
 800918e:	2316      	movs	r3, #22
 8009190:	18fb      	adds	r3, r7, r3
 8009192:	2200      	movs	r2, #0
 8009194:	801a      	strh	r2, [r3, #0]
 8009196:	e06e      	b.n	8009276 <tcp_parseopt+0x13e>
      opt = opts[c];
 8009198:	2316      	movs	r3, #22
 800919a:	18fb      	adds	r3, r7, r3
 800919c:	881b      	ldrh	r3, [r3, #0]
 800919e:	693a      	ldr	r2, [r7, #16]
 80091a0:	18d2      	adds	r2, r2, r3
 80091a2:	210d      	movs	r1, #13
 80091a4:	187b      	adds	r3, r7, r1
 80091a6:	7812      	ldrb	r2, [r2, #0]
 80091a8:	701a      	strb	r2, [r3, #0]
      switch (opt) {
 80091aa:	187b      	adds	r3, r7, r1
 80091ac:	781b      	ldrb	r3, [r3, #0]
 80091ae:	2b01      	cmp	r3, #1
 80091b0:	d005      	beq.n	80091be <tcp_parseopt+0x86>
 80091b2:	2b02      	cmp	r3, #2
 80091b4:	d00a      	beq.n	80091cc <tcp_parseopt+0x94>
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d100      	bne.n	80091bc <tcp_parseopt+0x84>
 80091ba:	e066      	b.n	800928a <tcp_parseopt+0x152>
 80091bc:	e045      	b.n	800924a <tcp_parseopt+0x112>
        /* End of options. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
        return;
      case 0x01:
        /* NOP option. */
        ++c;
 80091be:	2216      	movs	r2, #22
 80091c0:	18bb      	adds	r3, r7, r2
 80091c2:	18ba      	adds	r2, r7, r2
 80091c4:	8812      	ldrh	r2, [r2, #0]
 80091c6:	3201      	adds	r2, #1
 80091c8:	801a      	strh	r2, [r3, #0]
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
 80091ca:	e054      	b.n	8009276 <tcp_parseopt+0x13e>
      case 0x02:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (opts[c + 1] != 0x04 || c + 0x04 > max_c) {
 80091cc:	2316      	movs	r3, #22
 80091ce:	18fb      	adds	r3, r7, r3
 80091d0:	881b      	ldrh	r3, [r3, #0]
 80091d2:	3301      	adds	r3, #1
 80091d4:	693a      	ldr	r2, [r7, #16]
 80091d6:	18d3      	adds	r3, r2, r3
 80091d8:	781b      	ldrb	r3, [r3, #0]
 80091da:	2b04      	cmp	r3, #4
 80091dc:	d157      	bne.n	800928e <tcp_parseopt+0x156>
 80091de:	2316      	movs	r3, #22
 80091e0:	18fb      	adds	r3, r7, r3
 80091e2:	881b      	ldrh	r3, [r3, #0]
 80091e4:	1d1a      	adds	r2, r3, #4
 80091e6:	230e      	movs	r3, #14
 80091e8:	18fb      	adds	r3, r7, r3
 80091ea:	881b      	ldrh	r3, [r3, #0]
 80091ec:	429a      	cmp	r2, r3
 80091ee:	dc4e      	bgt.n	800928e <tcp_parseopt+0x156>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (opts[c + 2] << 8) | opts[c + 3];
 80091f0:	2116      	movs	r1, #22
 80091f2:	187b      	adds	r3, r7, r1
 80091f4:	881b      	ldrh	r3, [r3, #0]
 80091f6:	3302      	adds	r3, #2
 80091f8:	693a      	ldr	r2, [r7, #16]
 80091fa:	18d3      	adds	r3, r2, r3
 80091fc:	781b      	ldrb	r3, [r3, #0]
 80091fe:	021b      	lsls	r3, r3, #8
 8009200:	b21a      	sxth	r2, r3
 8009202:	187b      	adds	r3, r7, r1
 8009204:	881b      	ldrh	r3, [r3, #0]
 8009206:	3303      	adds	r3, #3
 8009208:	6939      	ldr	r1, [r7, #16]
 800920a:	18cb      	adds	r3, r1, r3
 800920c:	781b      	ldrb	r3, [r3, #0]
 800920e:	b21b      	sxth	r3, r3
 8009210:	4313      	orrs	r3, r2
 8009212:	b21a      	sxth	r2, r3
 8009214:	210a      	movs	r1, #10
 8009216:	187b      	adds	r3, r7, r1
 8009218:	801a      	strh	r2, [r3, #0]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800921a:	187b      	adds	r3, r7, r1
 800921c:	881b      	ldrh	r3, [r3, #0]
 800921e:	4a20      	ldr	r2, [pc, #128]	; (80092a0 <tcp_parseopt+0x168>)
 8009220:	4293      	cmp	r3, r2
 8009222:	d808      	bhi.n	8009236 <tcp_parseopt+0xfe>
 8009224:	230a      	movs	r3, #10
 8009226:	18fb      	adds	r3, r7, r3
 8009228:	881b      	ldrh	r3, [r3, #0]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d003      	beq.n	8009236 <tcp_parseopt+0xfe>
 800922e:	230a      	movs	r3, #10
 8009230:	18fb      	adds	r3, r7, r3
 8009232:	881a      	ldrh	r2, [r3, #0]
 8009234:	e000      	b.n	8009238 <tcp_parseopt+0x100>
 8009236:	4a1a      	ldr	r2, [pc, #104]	; (80092a0 <tcp_parseopt+0x168>)
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Advance to next option */
        c += 0x04;
 800923c:	2216      	movs	r2, #22
 800923e:	18bb      	adds	r3, r7, r2
 8009240:	18ba      	adds	r2, r7, r2
 8009242:	8812      	ldrh	r2, [r2, #0]
 8009244:	3204      	adds	r2, #4
 8009246:	801a      	strh	r2, [r3, #0]
        break;
 8009248:	e015      	b.n	8009276 <tcp_parseopt+0x13e>
        c += 0x0A;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        if (opts[c + 1] == 0) {
 800924a:	2316      	movs	r3, #22
 800924c:	18fb      	adds	r3, r7, r3
 800924e:	881b      	ldrh	r3, [r3, #0]
 8009250:	3301      	adds	r3, #1
 8009252:	693a      	ldr	r2, [r7, #16]
 8009254:	18d3      	adds	r3, r2, r3
 8009256:	781b      	ldrb	r3, [r3, #0]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d01a      	beq.n	8009292 <tcp_parseopt+0x15a>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        c += opts[c + 1];
 800925c:	2016      	movs	r0, #22
 800925e:	183b      	adds	r3, r7, r0
 8009260:	881b      	ldrh	r3, [r3, #0]
 8009262:	3301      	adds	r3, #1
 8009264:	693a      	ldr	r2, [r7, #16]
 8009266:	18d3      	adds	r3, r2, r3
 8009268:	781b      	ldrb	r3, [r3, #0]
 800926a:	b299      	uxth	r1, r3
 800926c:	183b      	adds	r3, r7, r0
 800926e:	183a      	adds	r2, r7, r0
 8009270:	8812      	ldrh	r2, [r2, #0]
 8009272:	188a      	adds	r2, r1, r2
 8009274:	801a      	strh	r2, [r3, #0]
    for (c = 0; c < max_c; ) {
 8009276:	2316      	movs	r3, #22
 8009278:	18fa      	adds	r2, r7, r3
 800927a:	230e      	movs	r3, #14
 800927c:	18fb      	adds	r3, r7, r3
 800927e:	8812      	ldrh	r2, [r2, #0]
 8009280:	881b      	ldrh	r3, [r3, #0]
 8009282:	429a      	cmp	r2, r3
 8009284:	d200      	bcs.n	8009288 <tcp_parseopt+0x150>
 8009286:	e787      	b.n	8009198 <tcp_parseopt+0x60>
 8009288:	e004      	b.n	8009294 <tcp_parseopt+0x15c>
        return;
 800928a:	46c0      	nop			; (mov r8, r8)
 800928c:	e002      	b.n	8009294 <tcp_parseopt+0x15c>
          return;
 800928e:	46c0      	nop			; (mov r8, r8)
 8009290:	e000      	b.n	8009294 <tcp_parseopt+0x15c>
          return;
 8009292:	46c0      	nop			; (mov r8, r8)
      }
    }
  }
}
 8009294:	46bd      	mov	sp, r7
 8009296:	b006      	add	sp, #24
 8009298:	bd80      	pop	{r7, pc}
 800929a:	46c0      	nop			; (mov r8, r8)
 800929c:	2000228c 	.word	0x2000228c
 80092a0:	000005b4 	.word	0x000005b4

080092a4 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
 80092a4:	b590      	push	{r4, r7, lr}
 80092a6:	b087      	sub	sp, #28
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	60f8      	str	r0, [r7, #12]
 80092ac:	0008      	movs	r0, r1
 80092ae:	0011      	movs	r1, r2
 80092b0:	607b      	str	r3, [r7, #4]
 80092b2:	240a      	movs	r4, #10
 80092b4:	193b      	adds	r3, r7, r4
 80092b6:	1c02      	adds	r2, r0, #0
 80092b8:	801a      	strh	r2, [r3, #0]
 80092ba:	2008      	movs	r0, #8
 80092bc:	183b      	adds	r3, r7, r0
 80092be:	1c0a      	adds	r2, r1, #0
 80092c0:	801a      	strh	r2, [r3, #0]
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80092c2:	193a      	adds	r2, r7, r4
 80092c4:	183b      	adds	r3, r7, r0
 80092c6:	8812      	ldrh	r2, [r2, #0]
 80092c8:	881b      	ldrh	r3, [r3, #0]
 80092ca:	18d3      	adds	r3, r2, r3
 80092cc:	b29b      	uxth	r3, r3
 80092ce:	3314      	adds	r3, #20
 80092d0:	b29b      	uxth	r3, r3
 80092d2:	2200      	movs	r2, #0
 80092d4:	0019      	movs	r1, r3
 80092d6:	2001      	movs	r0, #1
 80092d8:	f7fb ff58 	bl	800518c <pbuf_alloc>
 80092dc:	0003      	movs	r3, r0
 80092de:	617b      	str	r3, [r7, #20]
  if (p != NULL) {
 80092e0:	697b      	ldr	r3, [r7, #20]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d100      	bne.n	80092e8 <tcp_output_alloc_header+0x44>
 80092e6:	e0e5      	b.n	80094b4 <tcp_output_alloc_header+0x210>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80092e8:	697b      	ldr	r3, [r7, #20]
 80092ea:	685b      	ldr	r3, [r3, #4]
 80092ec:	613b      	str	r3, [r7, #16]
    tcphdr->src = htons(pcb->local_port);
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	8b5b      	ldrh	r3, [r3, #26]
 80092f2:	0018      	movs	r0, r3
 80092f4:	f7fb f98e 	bl	8004614 <lwip_htons>
 80092f8:	0003      	movs	r3, r0
 80092fa:	001a      	movs	r2, r3
 80092fc:	693b      	ldr	r3, [r7, #16]
 80092fe:	21ff      	movs	r1, #255	; 0xff
 8009300:	4011      	ands	r1, r2
 8009302:	000c      	movs	r4, r1
 8009304:	7819      	ldrb	r1, [r3, #0]
 8009306:	2000      	movs	r0, #0
 8009308:	4001      	ands	r1, r0
 800930a:	1c08      	adds	r0, r1, #0
 800930c:	1c21      	adds	r1, r4, #0
 800930e:	4301      	orrs	r1, r0
 8009310:	7019      	strb	r1, [r3, #0]
 8009312:	0a12      	lsrs	r2, r2, #8
 8009314:	b290      	uxth	r0, r2
 8009316:	785a      	ldrb	r2, [r3, #1]
 8009318:	2100      	movs	r1, #0
 800931a:	400a      	ands	r2, r1
 800931c:	1c11      	adds	r1, r2, #0
 800931e:	1c02      	adds	r2, r0, #0
 8009320:	430a      	orrs	r2, r1
 8009322:	705a      	strb	r2, [r3, #1]
    tcphdr->dest = htons(pcb->remote_port);
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	8b9b      	ldrh	r3, [r3, #28]
 8009328:	0018      	movs	r0, r3
 800932a:	f7fb f973 	bl	8004614 <lwip_htons>
 800932e:	0003      	movs	r3, r0
 8009330:	001a      	movs	r2, r3
 8009332:	693b      	ldr	r3, [r7, #16]
 8009334:	21ff      	movs	r1, #255	; 0xff
 8009336:	4011      	ands	r1, r2
 8009338:	000c      	movs	r4, r1
 800933a:	7899      	ldrb	r1, [r3, #2]
 800933c:	2000      	movs	r0, #0
 800933e:	4001      	ands	r1, r0
 8009340:	1c08      	adds	r0, r1, #0
 8009342:	1c21      	adds	r1, r4, #0
 8009344:	4301      	orrs	r1, r0
 8009346:	7099      	strb	r1, [r3, #2]
 8009348:	0a12      	lsrs	r2, r2, #8
 800934a:	b290      	uxth	r0, r2
 800934c:	78da      	ldrb	r2, [r3, #3]
 800934e:	2100      	movs	r1, #0
 8009350:	400a      	ands	r2, r1
 8009352:	1c11      	adds	r1, r2, #0
 8009354:	1c02      	adds	r2, r0, #0
 8009356:	430a      	orrs	r2, r1
 8009358:	70da      	strb	r2, [r3, #3]
    tcphdr->seqno = seqno_be;
 800935a:	693b      	ldr	r3, [r7, #16]
 800935c:	1d3a      	adds	r2, r7, #4
 800935e:	7810      	ldrb	r0, [r2, #0]
 8009360:	791a      	ldrb	r2, [r3, #4]
 8009362:	2100      	movs	r1, #0
 8009364:	400a      	ands	r2, r1
 8009366:	1c11      	adds	r1, r2, #0
 8009368:	1c02      	adds	r2, r0, #0
 800936a:	430a      	orrs	r2, r1
 800936c:	711a      	strb	r2, [r3, #4]
 800936e:	1d7a      	adds	r2, r7, #5
 8009370:	7810      	ldrb	r0, [r2, #0]
 8009372:	795a      	ldrb	r2, [r3, #5]
 8009374:	2100      	movs	r1, #0
 8009376:	400a      	ands	r2, r1
 8009378:	1c11      	adds	r1, r2, #0
 800937a:	1c02      	adds	r2, r0, #0
 800937c:	430a      	orrs	r2, r1
 800937e:	715a      	strb	r2, [r3, #5]
 8009380:	1dba      	adds	r2, r7, #6
 8009382:	7810      	ldrb	r0, [r2, #0]
 8009384:	799a      	ldrb	r2, [r3, #6]
 8009386:	2100      	movs	r1, #0
 8009388:	400a      	ands	r2, r1
 800938a:	1c11      	adds	r1, r2, #0
 800938c:	1c02      	adds	r2, r0, #0
 800938e:	430a      	orrs	r2, r1
 8009390:	719a      	strb	r2, [r3, #6]
 8009392:	1dfa      	adds	r2, r7, #7
 8009394:	7810      	ldrb	r0, [r2, #0]
 8009396:	79da      	ldrb	r2, [r3, #7]
 8009398:	2100      	movs	r1, #0
 800939a:	400a      	ands	r2, r1
 800939c:	1c11      	adds	r1, r2, #0
 800939e:	1c02      	adds	r2, r0, #0
 80093a0:	430a      	orrs	r2, r1
 80093a2:	71da      	strb	r2, [r3, #7]
    tcphdr->ackno = htonl(pcb->rcv_nxt);
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093a8:	0018      	movs	r0, r3
 80093aa:	f7fb f959 	bl	8004660 <lwip_htonl>
 80093ae:	0002      	movs	r2, r0
 80093b0:	693b      	ldr	r3, [r7, #16]
 80093b2:	21ff      	movs	r1, #255	; 0xff
 80093b4:	4011      	ands	r1, r2
 80093b6:	000c      	movs	r4, r1
 80093b8:	7a19      	ldrb	r1, [r3, #8]
 80093ba:	2000      	movs	r0, #0
 80093bc:	4001      	ands	r1, r0
 80093be:	1c08      	adds	r0, r1, #0
 80093c0:	1c21      	adds	r1, r4, #0
 80093c2:	4301      	orrs	r1, r0
 80093c4:	7219      	strb	r1, [r3, #8]
 80093c6:	0a11      	lsrs	r1, r2, #8
 80093c8:	20ff      	movs	r0, #255	; 0xff
 80093ca:	4001      	ands	r1, r0
 80093cc:	000c      	movs	r4, r1
 80093ce:	7a59      	ldrb	r1, [r3, #9]
 80093d0:	2000      	movs	r0, #0
 80093d2:	4001      	ands	r1, r0
 80093d4:	1c08      	adds	r0, r1, #0
 80093d6:	1c21      	adds	r1, r4, #0
 80093d8:	4301      	orrs	r1, r0
 80093da:	7259      	strb	r1, [r3, #9]
 80093dc:	0c11      	lsrs	r1, r2, #16
 80093de:	20ff      	movs	r0, #255	; 0xff
 80093e0:	4001      	ands	r1, r0
 80093e2:	000c      	movs	r4, r1
 80093e4:	7a99      	ldrb	r1, [r3, #10]
 80093e6:	2000      	movs	r0, #0
 80093e8:	4001      	ands	r1, r0
 80093ea:	1c08      	adds	r0, r1, #0
 80093ec:	1c21      	adds	r1, r4, #0
 80093ee:	4301      	orrs	r1, r0
 80093f0:	7299      	strb	r1, [r3, #10]
 80093f2:	0e10      	lsrs	r0, r2, #24
 80093f4:	7ada      	ldrb	r2, [r3, #11]
 80093f6:	2100      	movs	r1, #0
 80093f8:	400a      	ands	r2, r1
 80093fa:	1c11      	adds	r1, r2, #0
 80093fc:	1c02      	adds	r2, r0, #0
 80093fe:	430a      	orrs	r2, r1
 8009400:	72da      	strb	r2, [r3, #11]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 8009402:	230a      	movs	r3, #10
 8009404:	18fb      	adds	r3, r7, r3
 8009406:	881b      	ldrh	r3, [r3, #0]
 8009408:	089b      	lsrs	r3, r3, #2
 800940a:	b29b      	uxth	r3, r3
 800940c:	3305      	adds	r3, #5
 800940e:	b29b      	uxth	r3, r3
 8009410:	031b      	lsls	r3, r3, #12
 8009412:	b29b      	uxth	r3, r3
 8009414:	2210      	movs	r2, #16
 8009416:	4313      	orrs	r3, r2
 8009418:	b29b      	uxth	r3, r3
 800941a:	0018      	movs	r0, r3
 800941c:	f7fb f8fa 	bl	8004614 <lwip_htons>
 8009420:	0003      	movs	r3, r0
 8009422:	001a      	movs	r2, r3
 8009424:	693b      	ldr	r3, [r7, #16]
 8009426:	21ff      	movs	r1, #255	; 0xff
 8009428:	4011      	ands	r1, r2
 800942a:	000c      	movs	r4, r1
 800942c:	7b19      	ldrb	r1, [r3, #12]
 800942e:	2000      	movs	r0, #0
 8009430:	4001      	ands	r1, r0
 8009432:	1c08      	adds	r0, r1, #0
 8009434:	1c21      	adds	r1, r4, #0
 8009436:	4301      	orrs	r1, r0
 8009438:	7319      	strb	r1, [r3, #12]
 800943a:	0a12      	lsrs	r2, r2, #8
 800943c:	b290      	uxth	r0, r2
 800943e:	7b5a      	ldrb	r2, [r3, #13]
 8009440:	2100      	movs	r1, #0
 8009442:	400a      	ands	r2, r1
 8009444:	1c11      	adds	r1, r2, #0
 8009446:	1c02      	adds	r2, r0, #0
 8009448:	430a      	orrs	r2, r1
 800944a:	735a      	strb	r2, [r3, #13]
    tcphdr->wnd = htons(pcb->rcv_ann_wnd);
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009450:	0018      	movs	r0, r3
 8009452:	f7fb f8df 	bl	8004614 <lwip_htons>
 8009456:	0003      	movs	r3, r0
 8009458:	001a      	movs	r2, r3
 800945a:	693b      	ldr	r3, [r7, #16]
 800945c:	21ff      	movs	r1, #255	; 0xff
 800945e:	4011      	ands	r1, r2
 8009460:	000c      	movs	r4, r1
 8009462:	7b99      	ldrb	r1, [r3, #14]
 8009464:	2000      	movs	r0, #0
 8009466:	4001      	ands	r1, r0
 8009468:	1c08      	adds	r0, r1, #0
 800946a:	1c21      	adds	r1, r4, #0
 800946c:	4301      	orrs	r1, r0
 800946e:	7399      	strb	r1, [r3, #14]
 8009470:	0a12      	lsrs	r2, r2, #8
 8009472:	b290      	uxth	r0, r2
 8009474:	7bda      	ldrb	r2, [r3, #15]
 8009476:	2100      	movs	r1, #0
 8009478:	400a      	ands	r2, r1
 800947a:	1c11      	adds	r1, r2, #0
 800947c:	1c02      	adds	r2, r0, #0
 800947e:	430a      	orrs	r2, r1
 8009480:	73da      	strb	r2, [r3, #15]
    tcphdr->chksum = 0;
 8009482:	693b      	ldr	r3, [r7, #16]
 8009484:	7c1a      	ldrb	r2, [r3, #16]
 8009486:	2100      	movs	r1, #0
 8009488:	400a      	ands	r2, r1
 800948a:	741a      	strb	r2, [r3, #16]
 800948c:	7c5a      	ldrb	r2, [r3, #17]
 800948e:	2100      	movs	r1, #0
 8009490:	400a      	ands	r2, r1
 8009492:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8009494:	693b      	ldr	r3, [r7, #16]
 8009496:	7c9a      	ldrb	r2, [r3, #18]
 8009498:	2100      	movs	r1, #0
 800949a:	400a      	ands	r2, r1
 800949c:	749a      	strb	r2, [r3, #18]
 800949e:	7cda      	ldrb	r2, [r3, #19]
 80094a0:	2100      	movs	r1, #0
 80094a2:	400a      	ands	r2, r1
 80094a4:	74da      	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094aa:	68fa      	ldr	r2, [r7, #12]
 80094ac:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 80094ae:	189a      	adds	r2, r3, r2
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	631a      	str	r2, [r3, #48]	; 0x30
  }
  return p;
 80094b4:	697b      	ldr	r3, [r7, #20]
}
 80094b6:	0018      	movs	r0, r3
 80094b8:	46bd      	mov	sp, r7
 80094ba:	b007      	add	sp, #28
 80094bc:	bd90      	pop	{r4, r7, pc}

080094be <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80094be:	b590      	push	{r4, r7, lr}
 80094c0:	b085      	sub	sp, #20
 80094c2:	af00      	add	r7, sp, #0
 80094c4:	6078      	str	r0, [r7, #4]
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d045      	beq.n	800955a <tcp_send_fin+0x9c>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80094d2:	60fb      	str	r3, [r7, #12]
 80094d4:	e002      	b.n	80094dc <tcp_send_fin+0x1e>
         last_unsent = last_unsent->next);
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d1f8      	bne.n	80094d6 <tcp_send_fin+0x18>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	68db      	ldr	r3, [r3, #12]
 80094e8:	7b1a      	ldrb	r2, [r3, #12]
 80094ea:	7b5b      	ldrb	r3, [r3, #13]
 80094ec:	021b      	lsls	r3, r3, #8
 80094ee:	4313      	orrs	r3, r2
 80094f0:	b29b      	uxth	r3, r3
 80094f2:	0018      	movs	r0, r3
 80094f4:	f7fb f8a4 	bl	8004640 <lwip_ntohs>
 80094f8:	0003      	movs	r3, r0
 80094fa:	001a      	movs	r2, r3
 80094fc:	2307      	movs	r3, #7
 80094fe:	4013      	ands	r3, r2
 8009500:	d12b      	bne.n	800955a <tcp_send_fin+0x9c>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	68db      	ldr	r3, [r3, #12]
 8009506:	7b1a      	ldrb	r2, [r3, #12]
 8009508:	7b5b      	ldrb	r3, [r3, #13]
 800950a:	021b      	lsls	r3, r3, #8
 800950c:	4313      	orrs	r3, r2
 800950e:	b29c      	uxth	r4, r3
 8009510:	2001      	movs	r0, #1
 8009512:	f7fb f87f 	bl	8004614 <lwip_htons>
 8009516:	0003      	movs	r3, r0
 8009518:	001a      	movs	r2, r3
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	68db      	ldr	r3, [r3, #12]
 800951e:	4322      	orrs	r2, r4
 8009520:	b292      	uxth	r2, r2
 8009522:	21ff      	movs	r1, #255	; 0xff
 8009524:	4011      	ands	r1, r2
 8009526:	000c      	movs	r4, r1
 8009528:	7b19      	ldrb	r1, [r3, #12]
 800952a:	2000      	movs	r0, #0
 800952c:	4001      	ands	r1, r0
 800952e:	1c08      	adds	r0, r1, #0
 8009530:	1c21      	adds	r1, r4, #0
 8009532:	4301      	orrs	r1, r0
 8009534:	7319      	strb	r1, [r3, #12]
 8009536:	0a12      	lsrs	r2, r2, #8
 8009538:	b290      	uxth	r0, r2
 800953a:	7b5a      	ldrb	r2, [r3, #13]
 800953c:	2100      	movs	r1, #0
 800953e:	400a      	ands	r2, r1
 8009540:	1c11      	adds	r1, r2, #0
 8009542:	1c02      	adds	r2, r0, #0
 8009544:	430a      	orrs	r2, r1
 8009546:	735a      	strb	r2, [r3, #13]
      pcb->flags |= TF_FIN;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	7f9b      	ldrb	r3, [r3, #30]
 800954c:	2220      	movs	r2, #32
 800954e:	4313      	orrs	r3, r2
 8009550:	b2da      	uxtb	r2, r3
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	779a      	strb	r2, [r3, #30]
      return ERR_OK;
 8009556:	2300      	movs	r3, #0
 8009558:	e005      	b.n	8009566 <tcp_send_fin+0xa8>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	2101      	movs	r1, #1
 800955e:	0018      	movs	r0, r3
 8009560:	f000 f8fc 	bl	800975c <tcp_enqueue_flags>
 8009564:	0003      	movs	r3, r0
}
 8009566:	0018      	movs	r0, r3
 8009568:	46bd      	mov	sp, r7
 800956a:	b005      	add	sp, #20
 800956c:	bd90      	pop	{r4, r7, pc}
	...

08009570 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 8009570:	b590      	push	{r4, r7, lr}
 8009572:	b087      	sub	sp, #28
 8009574:	af00      	add	r7, sp, #0
 8009576:	60f8      	str	r0, [r7, #12]
 8009578:	60b9      	str	r1, [r7, #8]
 800957a:	603b      	str	r3, [r7, #0]
 800957c:	1dfb      	adds	r3, r7, #7
 800957e:	701a      	strb	r2, [r3, #0]
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8009580:	2028      	movs	r0, #40	; 0x28
 8009582:	183b      	adds	r3, r7, r0
 8009584:	781b      	ldrb	r3, [r3, #0]
 8009586:	009b      	lsls	r3, r3, #2
 8009588:	b2db      	uxtb	r3, r3
 800958a:	2204      	movs	r2, #4
 800958c:	4013      	ands	r3, r2
 800958e:	b2d9      	uxtb	r1, r3
 8009590:	183b      	adds	r3, r7, r0
 8009592:	781b      	ldrb	r3, [r3, #0]
 8009594:	2202      	movs	r2, #2
 8009596:	4013      	ands	r3, r2
 8009598:	d001      	beq.n	800959e <tcp_create_segment+0x2e>
 800959a:	230c      	movs	r3, #12
 800959c:	e000      	b.n	80095a0 <tcp_create_segment+0x30>
 800959e:	2300      	movs	r3, #0
 80095a0:	2217      	movs	r2, #23
 80095a2:	18ba      	adds	r2, r7, r2
 80095a4:	185b      	adds	r3, r3, r1
 80095a6:	7013      	strb	r3, [r2, #0]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80095a8:	2004      	movs	r0, #4
 80095aa:	f7fb fc33 	bl	8004e14 <memp_malloc>
 80095ae:	0003      	movs	r3, r0
 80095b0:	613b      	str	r3, [r7, #16]
 80095b2:	693b      	ldr	r3, [r7, #16]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d105      	bne.n	80095c4 <tcp_create_segment+0x54>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 2, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80095b8:	68bb      	ldr	r3, [r7, #8]
 80095ba:	0018      	movs	r0, r3
 80095bc:	f7fc f872 	bl	80056a4 <pbuf_free>
    return NULL;
 80095c0:	2300      	movs	r3, #0
 80095c2:	e0c5      	b.n	8009750 <tcp_create_segment+0x1e0>
  }
  seg->flags = optflags;
 80095c4:	693b      	ldr	r3, [r7, #16]
 80095c6:	2228      	movs	r2, #40	; 0x28
 80095c8:	18ba      	adds	r2, r7, r2
 80095ca:	7812      	ldrb	r2, [r2, #0]
 80095cc:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80095ce:	693b      	ldr	r3, [r7, #16]
 80095d0:	2200      	movs	r2, #0
 80095d2:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80095d4:	693b      	ldr	r3, [r7, #16]
 80095d6:	68ba      	ldr	r2, [r7, #8]
 80095d8:	605a      	str	r2, [r3, #4]
  seg->len = p->tot_len - optlen;
 80095da:	68bb      	ldr	r3, [r7, #8]
 80095dc:	891a      	ldrh	r2, [r3, #8]
 80095de:	2317      	movs	r3, #23
 80095e0:	18fb      	adds	r3, r7, r3
 80095e2:	781b      	ldrb	r3, [r3, #0]
 80095e4:	b29b      	uxth	r3, r3
 80095e6:	1ad3      	subs	r3, r2, r3
 80095e8:	b29a      	uxth	r2, r3
 80095ea:	693b      	ldr	r3, [r7, #16]
 80095ec:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
 80095ee:	68bb      	ldr	r3, [r7, #8]
 80095f0:	2114      	movs	r1, #20
 80095f2:	0018      	movs	r0, r3
 80095f4:	f7fb ffcf 	bl	8005596 <pbuf_header>
 80095f8:	1e03      	subs	r3, r0, #0
 80095fa:	d00d      	beq.n	8009618 <tcp_create_segment+0xa8>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 2, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
 80095fc:	4b56      	ldr	r3, [pc, #344]	; (8009758 <tcp_create_segment+0x1e8>)
 80095fe:	22a4      	movs	r2, #164	; 0xa4
 8009600:	5a9b      	ldrh	r3, [r3, r2]
 8009602:	3301      	adds	r3, #1
 8009604:	b299      	uxth	r1, r3
 8009606:	4b54      	ldr	r3, [pc, #336]	; (8009758 <tcp_create_segment+0x1e8>)
 8009608:	22a4      	movs	r2, #164	; 0xa4
 800960a:	5299      	strh	r1, [r3, r2]
    tcp_seg_free(seg);
 800960c:	693b      	ldr	r3, [r7, #16]
 800960e:	0018      	movs	r0, r3
 8009610:	f7fd f885 	bl	800671e <tcp_seg_free>
    return NULL;
 8009614:	2300      	movs	r3, #0
 8009616:	e09b      	b.n	8009750 <tcp_create_segment+0x1e0>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8009618:	693b      	ldr	r3, [r7, #16]
 800961a:	685b      	ldr	r3, [r3, #4]
 800961c:	685a      	ldr	r2, [r3, #4]
 800961e:	693b      	ldr	r3, [r7, #16]
 8009620:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = htons(pcb->local_port);
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	8b5a      	ldrh	r2, [r3, #26]
 8009626:	693b      	ldr	r3, [r7, #16]
 8009628:	68dc      	ldr	r4, [r3, #12]
 800962a:	0010      	movs	r0, r2
 800962c:	f7fa fff2 	bl	8004614 <lwip_htons>
 8009630:	0003      	movs	r3, r0
 8009632:	22ff      	movs	r2, #255	; 0xff
 8009634:	401a      	ands	r2, r3
 8009636:	0010      	movs	r0, r2
 8009638:	7822      	ldrb	r2, [r4, #0]
 800963a:	2100      	movs	r1, #0
 800963c:	400a      	ands	r2, r1
 800963e:	1c11      	adds	r1, r2, #0
 8009640:	1c02      	adds	r2, r0, #0
 8009642:	430a      	orrs	r2, r1
 8009644:	7022      	strb	r2, [r4, #0]
 8009646:	0a1b      	lsrs	r3, r3, #8
 8009648:	b299      	uxth	r1, r3
 800964a:	7863      	ldrb	r3, [r4, #1]
 800964c:	2200      	movs	r2, #0
 800964e:	4013      	ands	r3, r2
 8009650:	1c1a      	adds	r2, r3, #0
 8009652:	1c0b      	adds	r3, r1, #0
 8009654:	4313      	orrs	r3, r2
 8009656:	7063      	strb	r3, [r4, #1]
  seg->tcphdr->dest = htons(pcb->remote_port);
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	8b9a      	ldrh	r2, [r3, #28]
 800965c:	693b      	ldr	r3, [r7, #16]
 800965e:	68dc      	ldr	r4, [r3, #12]
 8009660:	0010      	movs	r0, r2
 8009662:	f7fa ffd7 	bl	8004614 <lwip_htons>
 8009666:	0003      	movs	r3, r0
 8009668:	22ff      	movs	r2, #255	; 0xff
 800966a:	401a      	ands	r2, r3
 800966c:	0010      	movs	r0, r2
 800966e:	78a2      	ldrb	r2, [r4, #2]
 8009670:	2100      	movs	r1, #0
 8009672:	400a      	ands	r2, r1
 8009674:	1c11      	adds	r1, r2, #0
 8009676:	1c02      	adds	r2, r0, #0
 8009678:	430a      	orrs	r2, r1
 800967a:	70a2      	strb	r2, [r4, #2]
 800967c:	0a1b      	lsrs	r3, r3, #8
 800967e:	b299      	uxth	r1, r3
 8009680:	78e3      	ldrb	r3, [r4, #3]
 8009682:	2200      	movs	r2, #0
 8009684:	4013      	ands	r3, r2
 8009686:	1c1a      	adds	r2, r3, #0
 8009688:	1c0b      	adds	r3, r1, #0
 800968a:	4313      	orrs	r3, r2
 800968c:	70e3      	strb	r3, [r4, #3]
  seg->tcphdr->seqno = htonl(seqno);
 800968e:	693b      	ldr	r3, [r7, #16]
 8009690:	68dc      	ldr	r4, [r3, #12]
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	0018      	movs	r0, r3
 8009696:	f7fa ffe3 	bl	8004660 <lwip_htonl>
 800969a:	0003      	movs	r3, r0
 800969c:	22ff      	movs	r2, #255	; 0xff
 800969e:	401a      	ands	r2, r3
 80096a0:	0010      	movs	r0, r2
 80096a2:	7922      	ldrb	r2, [r4, #4]
 80096a4:	2100      	movs	r1, #0
 80096a6:	400a      	ands	r2, r1
 80096a8:	1c11      	adds	r1, r2, #0
 80096aa:	1c02      	adds	r2, r0, #0
 80096ac:	430a      	orrs	r2, r1
 80096ae:	7122      	strb	r2, [r4, #4]
 80096b0:	0a1a      	lsrs	r2, r3, #8
 80096b2:	21ff      	movs	r1, #255	; 0xff
 80096b4:	400a      	ands	r2, r1
 80096b6:	0010      	movs	r0, r2
 80096b8:	7962      	ldrb	r2, [r4, #5]
 80096ba:	2100      	movs	r1, #0
 80096bc:	400a      	ands	r2, r1
 80096be:	1c11      	adds	r1, r2, #0
 80096c0:	1c02      	adds	r2, r0, #0
 80096c2:	430a      	orrs	r2, r1
 80096c4:	7162      	strb	r2, [r4, #5]
 80096c6:	0c1a      	lsrs	r2, r3, #16
 80096c8:	21ff      	movs	r1, #255	; 0xff
 80096ca:	400a      	ands	r2, r1
 80096cc:	0010      	movs	r0, r2
 80096ce:	79a2      	ldrb	r2, [r4, #6]
 80096d0:	2100      	movs	r1, #0
 80096d2:	400a      	ands	r2, r1
 80096d4:	1c11      	adds	r1, r2, #0
 80096d6:	1c02      	adds	r2, r0, #0
 80096d8:	430a      	orrs	r2, r1
 80096da:	71a2      	strb	r2, [r4, #6]
 80096dc:	0e19      	lsrs	r1, r3, #24
 80096de:	79e3      	ldrb	r3, [r4, #7]
 80096e0:	2200      	movs	r2, #0
 80096e2:	4013      	ands	r3, r2
 80096e4:	1c1a      	adds	r2, r3, #0
 80096e6:	1c0b      	adds	r3, r1, #0
 80096e8:	4313      	orrs	r3, r2
 80096ea:	71e3      	strb	r3, [r4, #7]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 80096ec:	2317      	movs	r3, #23
 80096ee:	18fb      	adds	r3, r7, r3
 80096f0:	781b      	ldrb	r3, [r3, #0]
 80096f2:	089b      	lsrs	r3, r3, #2
 80096f4:	b2db      	uxtb	r3, r3
 80096f6:	3305      	adds	r3, #5
 80096f8:	031b      	lsls	r3, r3, #12
 80096fa:	b21a      	sxth	r2, r3
 80096fc:	1dfb      	adds	r3, r7, #7
 80096fe:	781b      	ldrb	r3, [r3, #0]
 8009700:	b21b      	sxth	r3, r3
 8009702:	4313      	orrs	r3, r2
 8009704:	b21b      	sxth	r3, r3
 8009706:	b29a      	uxth	r2, r3
 8009708:	693b      	ldr	r3, [r7, #16]
 800970a:	68dc      	ldr	r4, [r3, #12]
 800970c:	0010      	movs	r0, r2
 800970e:	f7fa ff81 	bl	8004614 <lwip_htons>
 8009712:	0003      	movs	r3, r0
 8009714:	22ff      	movs	r2, #255	; 0xff
 8009716:	401a      	ands	r2, r3
 8009718:	0010      	movs	r0, r2
 800971a:	7b22      	ldrb	r2, [r4, #12]
 800971c:	2100      	movs	r1, #0
 800971e:	400a      	ands	r2, r1
 8009720:	1c11      	adds	r1, r2, #0
 8009722:	1c02      	adds	r2, r0, #0
 8009724:	430a      	orrs	r2, r1
 8009726:	7322      	strb	r2, [r4, #12]
 8009728:	0a1b      	lsrs	r3, r3, #8
 800972a:	b299      	uxth	r1, r3
 800972c:	7b63      	ldrb	r3, [r4, #13]
 800972e:	2200      	movs	r2, #0
 8009730:	4013      	ands	r3, r2
 8009732:	1c1a      	adds	r2, r3, #0
 8009734:	1c0b      	adds	r3, r1, #0
 8009736:	4313      	orrs	r3, r2
 8009738:	7363      	strb	r3, [r4, #13]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800973a:	693b      	ldr	r3, [r7, #16]
 800973c:	68db      	ldr	r3, [r3, #12]
 800973e:	7c9a      	ldrb	r2, [r3, #18]
 8009740:	2100      	movs	r1, #0
 8009742:	400a      	ands	r2, r1
 8009744:	749a      	strb	r2, [r3, #18]
 8009746:	7cda      	ldrb	r2, [r3, #19]
 8009748:	2100      	movs	r1, #0
 800974a:	400a      	ands	r2, r1
 800974c:	74da      	strb	r2, [r3, #19]
  return seg;
 800974e:	693b      	ldr	r3, [r7, #16]
} 
 8009750:	0018      	movs	r0, r3
 8009752:	46bd      	mov	sp, r7
 8009754:	b007      	add	sp, #28
 8009756:	bd90      	pop	{r4, r7, pc}
 8009758:	20003158 	.word	0x20003158

0800975c <tcp_enqueue_flags>:
 * @param optdata pointer to TCP options, or NULL.
 * @param optlen length of TCP options in bytes.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800975c:	b590      	push	{r4, r7, lr}
 800975e:	b08b      	sub	sp, #44	; 0x2c
 8009760:	af02      	add	r7, sp, #8
 8009762:	6078      	str	r0, [r7, #4]
 8009764:	000a      	movs	r2, r1
 8009766:	1cfb      	adds	r3, r7, #3
 8009768:	701a      	strb	r2, [r3, #0]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800976a:	231f      	movs	r3, #31
 800976c:	18fb      	adds	r3, r7, r3
 800976e:	2200      	movs	r2, #0
 8009770:	701a      	strb	r2, [r3, #0]
  u8_t optlen = 0;
 8009772:	2317      	movs	r3, #23
 8009774:	18fb      	adds	r3, r7, r3
 8009776:	2200      	movs	r2, #0
 8009778:	701a      	strb	r2, [r3, #0]

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	2268      	movs	r2, #104	; 0x68
 800977e:	5a9b      	ldrh	r3, [r3, r2]
 8009780:	2b07      	cmp	r3, #7
 8009782:	d805      	bhi.n	8009790 <tcp_enqueue_flags+0x34>
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2268      	movs	r2, #104	; 0x68
 8009788:	5a9b      	ldrh	r3, [r3, r2]
 800978a:	4a6f      	ldr	r2, [pc, #444]	; (8009948 <tcp_enqueue_flags+0x1ec>)
 800978c:	4293      	cmp	r3, r2
 800978e:	d912      	bls.n	80097b6 <tcp_enqueue_flags+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 3, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
 8009790:	4b6e      	ldr	r3, [pc, #440]	; (800994c <tcp_enqueue_flags+0x1f0>)
 8009792:	229c      	movs	r2, #156	; 0x9c
 8009794:	5a9b      	ldrh	r3, [r3, r2]
 8009796:	3301      	adds	r3, #1
 8009798:	b299      	uxth	r1, r3
 800979a:	4b6c      	ldr	r3, [pc, #432]	; (800994c <tcp_enqueue_flags+0x1f0>)
 800979c:	229c      	movs	r2, #156	; 0x9c
 800979e:	5299      	strh	r1, [r3, r2]
    pcb->flags |= TF_NAGLEMEMERR;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	7f9b      	ldrb	r3, [r3, #30]
 80097a4:	2280      	movs	r2, #128	; 0x80
 80097a6:	4252      	negs	r2, r2
 80097a8:	4313      	orrs	r3, r2
 80097aa:	b2da      	uxtb	r2, r3
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	779a      	strb	r2, [r3, #30]
    return ERR_MEM;
 80097b0:	2301      	movs	r3, #1
 80097b2:	425b      	negs	r3, r3
 80097b4:	e0c3      	b.n	800993e <tcp_enqueue_flags+0x1e2>
  }

  if (flags & TCP_SYN) {
 80097b6:	1cfb      	adds	r3, r7, #3
 80097b8:	781b      	ldrb	r3, [r3, #0]
 80097ba:	2202      	movs	r2, #2
 80097bc:	4013      	ands	r3, r2
 80097be:	d003      	beq.n	80097c8 <tcp_enqueue_flags+0x6c>
    optflags = TF_SEG_OPTS_MSS;
 80097c0:	231f      	movs	r3, #31
 80097c2:	18fb      	adds	r3, r7, r3
 80097c4:	2201      	movs	r2, #1
 80097c6:	701a      	strb	r2, [r3, #0]
#if LWIP_TCP_TIMESTAMPS
  if ((pcb->flags & TF_TIMESTAMP)) {
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80097c8:	201f      	movs	r0, #31
 80097ca:	183b      	adds	r3, r7, r0
 80097cc:	781b      	ldrb	r3, [r3, #0]
 80097ce:	009b      	lsls	r3, r3, #2
 80097d0:	b2db      	uxtb	r3, r3
 80097d2:	2204      	movs	r2, #4
 80097d4:	4013      	ands	r3, r2
 80097d6:	b2d9      	uxtb	r1, r3
 80097d8:	183b      	adds	r3, r7, r0
 80097da:	781b      	ldrb	r3, [r3, #0]
 80097dc:	2202      	movs	r2, #2
 80097de:	4013      	ands	r3, r2
 80097e0:	d001      	beq.n	80097e6 <tcp_enqueue_flags+0x8a>
 80097e2:	230c      	movs	r3, #12
 80097e4:	e000      	b.n	80097e8 <tcp_enqueue_flags+0x8c>
 80097e6:	2300      	movs	r3, #0
 80097e8:	2217      	movs	r2, #23
 80097ea:	18ba      	adds	r2, r7, r2
 80097ec:	185b      	adds	r3, r3, r1
 80097ee:	7013      	strb	r3, [r2, #0]

  /* tcp_enqueue_flags is always called with either SYN or FIN in flags.
   * We need one available snd_buf byte to do that.
   * This means we can't send FIN while snd_buf==0. A better fix would be to
   * not include SYN and FIN sequence numbers in the snd_buf count. */
  if (pcb->snd_buf == 0) {
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2266      	movs	r2, #102	; 0x66
 80097f4:	5a9b      	ldrh	r3, [r3, r2]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d10a      	bne.n	8009810 <tcp_enqueue_flags+0xb4>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 3, ("tcp_enqueue_flags: no send buffer available\n"));
    TCP_STATS_INC(tcp.memerr);
 80097fa:	4b54      	ldr	r3, [pc, #336]	; (800994c <tcp_enqueue_flags+0x1f0>)
 80097fc:	229c      	movs	r2, #156	; 0x9c
 80097fe:	5a9b      	ldrh	r3, [r3, r2]
 8009800:	3301      	adds	r3, #1
 8009802:	b299      	uxth	r1, r3
 8009804:	4b51      	ldr	r3, [pc, #324]	; (800994c <tcp_enqueue_flags+0x1f0>)
 8009806:	229c      	movs	r2, #156	; 0x9c
 8009808:	5299      	strh	r1, [r3, r2]
    return ERR_MEM;
 800980a:	2301      	movs	r3, #1
 800980c:	425b      	negs	r3, r3
 800980e:	e096      	b.n	800993e <tcp_enqueue_flags+0x1e2>
  }

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8009810:	2317      	movs	r3, #23
 8009812:	18fb      	adds	r3, r7, r3
 8009814:	781b      	ldrb	r3, [r3, #0]
 8009816:	b29b      	uxth	r3, r3
 8009818:	2200      	movs	r2, #0
 800981a:	0019      	movs	r1, r3
 800981c:	2000      	movs	r0, #0
 800981e:	f7fb fcb5 	bl	800518c <pbuf_alloc>
 8009822:	0003      	movs	r3, r0
 8009824:	613b      	str	r3, [r7, #16]
 8009826:	693b      	ldr	r3, [r7, #16]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d112      	bne.n	8009852 <tcp_enqueue_flags+0xf6>
    pcb->flags |= TF_NAGLEMEMERR;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	7f9b      	ldrb	r3, [r3, #30]
 8009830:	2280      	movs	r2, #128	; 0x80
 8009832:	4252      	negs	r2, r2
 8009834:	4313      	orrs	r3, r2
 8009836:	b2da      	uxtb	r2, r3
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	779a      	strb	r2, [r3, #30]
    TCP_STATS_INC(tcp.memerr);
 800983c:	4b43      	ldr	r3, [pc, #268]	; (800994c <tcp_enqueue_flags+0x1f0>)
 800983e:	229c      	movs	r2, #156	; 0x9c
 8009840:	5a9b      	ldrh	r3, [r3, r2]
 8009842:	3301      	adds	r3, #1
 8009844:	b299      	uxth	r1, r3
 8009846:	4b41      	ldr	r3, [pc, #260]	; (800994c <tcp_enqueue_flags+0x1f0>)
 8009848:	229c      	movs	r2, #156	; 0x9c
 800984a:	5299      	strh	r1, [r3, r2]
    return ERR_MEM;
 800984c:	2301      	movs	r3, #1
 800984e:	425b      	negs	r3, r3
 8009850:	e075      	b.n	800993e <tcp_enqueue_flags+0x1e2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
 8009856:	1cfb      	adds	r3, r7, #3
 8009858:	781a      	ldrb	r2, [r3, #0]
 800985a:	6939      	ldr	r1, [r7, #16]
 800985c:	6878      	ldr	r0, [r7, #4]
 800985e:	231f      	movs	r3, #31
 8009860:	18fb      	adds	r3, r7, r3
 8009862:	781b      	ldrb	r3, [r3, #0]
 8009864:	9300      	str	r3, [sp, #0]
 8009866:	0023      	movs	r3, r4
 8009868:	f7ff fe82 	bl	8009570 <tcp_create_segment>
 800986c:	0003      	movs	r3, r0
 800986e:	60fb      	str	r3, [r7, #12]
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d112      	bne.n	800989c <tcp_enqueue_flags+0x140>
    pcb->flags |= TF_NAGLEMEMERR;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	7f9b      	ldrb	r3, [r3, #30]
 800987a:	2280      	movs	r2, #128	; 0x80
 800987c:	4252      	negs	r2, r2
 800987e:	4313      	orrs	r3, r2
 8009880:	b2da      	uxtb	r2, r3
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	779a      	strb	r2, [r3, #30]
    TCP_STATS_INC(tcp.memerr);
 8009886:	4b31      	ldr	r3, [pc, #196]	; (800994c <tcp_enqueue_flags+0x1f0>)
 8009888:	229c      	movs	r2, #156	; 0x9c
 800988a:	5a9b      	ldrh	r3, [r3, r2]
 800988c:	3301      	adds	r3, #1
 800988e:	b299      	uxth	r1, r3
 8009890:	4b2e      	ldr	r3, [pc, #184]	; (800994c <tcp_enqueue_flags+0x1f0>)
 8009892:	229c      	movs	r2, #156	; 0x9c
 8009894:	5299      	strh	r1, [r3, r2]
    return ERR_MEM;
 8009896:	2301      	movs	r3, #1
 8009898:	425b      	negs	r3, r3
 800989a:	e050      	b.n	800993e <tcp_enqueue_flags+0x1e2>
               ntohl(seg->tcphdr->seqno),
               ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d103      	bne.n	80098ac <tcp_enqueue_flags+0x150>
    pcb->unsent = seg;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	68fa      	ldr	r2, [r7, #12]
 80098a8:	66da      	str	r2, [r3, #108]	; 0x6c
 80098aa:	e00d      	b.n	80098c8 <tcp_enqueue_flags+0x16c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80098b0:	61bb      	str	r3, [r7, #24]
 80098b2:	e002      	b.n	80098ba <tcp_enqueue_flags+0x15e>
 80098b4:	69bb      	ldr	r3, [r7, #24]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	61bb      	str	r3, [r7, #24]
 80098ba:	69bb      	ldr	r3, [r7, #24]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d1f8      	bne.n	80098b4 <tcp_enqueue_flags+0x158>
    useg->next = seg;
 80098c2:	69bb      	ldr	r3, [r7, #24]
 80098c4:	68fa      	ldr	r2, [r7, #12]
 80098c6:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	226a      	movs	r2, #106	; 0x6a
 80098cc:	2100      	movs	r1, #0
 80098ce:	5299      	strh	r1, [r3, r2]
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80098d0:	1cfb      	adds	r3, r7, #3
 80098d2:	781b      	ldrb	r3, [r3, #0]
 80098d4:	2202      	movs	r2, #2
 80098d6:	4013      	ands	r3, r2
 80098d8:	d104      	bne.n	80098e4 <tcp_enqueue_flags+0x188>
 80098da:	1cfb      	adds	r3, r7, #3
 80098dc:	781b      	ldrb	r3, [r3, #0]
 80098de:	2201      	movs	r2, #1
 80098e0:	4013      	ands	r3, r2
 80098e2:	d00c      	beq.n	80098fe <tcp_enqueue_flags+0x1a2>
    pcb->snd_lbb++;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80098e8:	1c5a      	adds	r2, r3, #1
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
    pcb->snd_buf--;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	2266      	movs	r2, #102	; 0x66
 80098f2:	5a9b      	ldrh	r3, [r3, r2]
 80098f4:	3b01      	subs	r3, #1
 80098f6:	b299      	uxth	r1, r3
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	2266      	movs	r2, #102	; 0x66
 80098fc:	5299      	strh	r1, [r3, r2]
  }
  if (flags & TCP_FIN) {
 80098fe:	1cfb      	adds	r3, r7, #3
 8009900:	781b      	ldrb	r3, [r3, #0]
 8009902:	2201      	movs	r2, #1
 8009904:	4013      	ands	r3, r2
 8009906:	d006      	beq.n	8009916 <tcp_enqueue_flags+0x1ba>
    pcb->flags |= TF_FIN;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	7f9b      	ldrb	r3, [r3, #30]
 800990c:	2220      	movs	r2, #32
 800990e:	4313      	orrs	r3, r2
 8009910:	b2da      	uxtb	r2, r3
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	779a      	strb	r2, [r3, #30]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	685b      	ldr	r3, [r3, #4]
 800991a:	0018      	movs	r0, r3
 800991c:	f7fb ff34 	bl	8005788 <pbuf_clen>
 8009920:	0003      	movs	r3, r0
 8009922:	0019      	movs	r1, r3
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	2268      	movs	r2, #104	; 0x68
 8009928:	5a9a      	ldrh	r2, [r3, r2]
 800992a:	b28b      	uxth	r3, r1
 800992c:	18d3      	adds	r3, r2, r3
 800992e:	b299      	uxth	r1, r3
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	2268      	movs	r2, #104	; 0x68
 8009934:	5299      	strh	r1, [r3, r2]
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	2268      	movs	r2, #104	; 0x68
 800993a:	5a9b      	ldrh	r3, [r3, r2]
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800993c:	2300      	movs	r3, #0
}
 800993e:	0018      	movs	r0, r3
 8009940:	46bd      	mov	sp, r7
 8009942:	b009      	add	sp, #36	; 0x24
 8009944:	bd90      	pop	{r4, r7, pc}
 8009946:	46c0      	nop			; (mov r8, r8)
 8009948:	0000fffc 	.word	0x0000fffc
 800994c:	20003158 	.word	0x20003158

08009950 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8009950:	b5b0      	push	{r4, r5, r7, lr}
 8009952:	b088      	sub	sp, #32
 8009954:	af02      	add	r7, sp, #8
 8009956:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  u8_t optlen = 0;
 8009958:	2117      	movs	r1, #23
 800995a:	187b      	adds	r3, r7, r1
 800995c:	2200      	movs	r2, #0
 800995e:	701a      	strb	r2, [r3, #0]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, htonl(pcb->snd_nxt));
 8009960:	187b      	adds	r3, r7, r1
 8009962:	781b      	ldrb	r3, [r3, #0]
 8009964:	b29c      	uxth	r4, r3
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800996a:	0018      	movs	r0, r3
 800996c:	f7fa fe78 	bl	8004660 <lwip_htonl>
 8009970:	0003      	movs	r3, r0
 8009972:	6878      	ldr	r0, [r7, #4]
 8009974:	2200      	movs	r2, #0
 8009976:	0021      	movs	r1, r4
 8009978:	f7ff fc94 	bl	80092a4 <tcp_output_alloc_header>
 800997c:	0003      	movs	r3, r0
 800997e:	613b      	str	r3, [r7, #16]
  if (p == NULL) {
 8009980:	693b      	ldr	r3, [r7, #16]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d102      	bne.n	800998c <tcp_send_empty_ack+0x3c>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8009986:	2302      	movs	r3, #2
 8009988:	425b      	negs	r3, r3
 800998a:	e03d      	b.n	8009a08 <tcp_send_empty_ack+0xb8>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800998c:	693b      	ldr	r3, [r7, #16]
 800998e:	685b      	ldr	r3, [r3, #4]
 8009990:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, 
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  /* remove ACK flags from the PCB, as we send an empty ACK now */
  pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	7f9b      	ldrb	r3, [r3, #30]
 8009996:	2203      	movs	r2, #3
 8009998:	4393      	bics	r3, r2
 800999a:	b2da      	uxtb	r2, r3
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	779a      	strb	r2, [r3, #30]
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif 

#if CHECKSUM_GEN_TCP
  tcphdr->chksum = inet_chksum_pseudo(p, &(pcb->local_ip), &(pcb->remote_ip),
 80099a0:	6879      	ldr	r1, [r7, #4]
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	1d1a      	adds	r2, r3, #4
 80099a6:	693b      	ldr	r3, [r7, #16]
 80099a8:	891b      	ldrh	r3, [r3, #8]
 80099aa:	6938      	ldr	r0, [r7, #16]
 80099ac:	9300      	str	r3, [sp, #0]
 80099ae:	2306      	movs	r3, #6
 80099b0:	f001 fe43 	bl	800b63a <inet_chksum_pseudo>
 80099b4:	0003      	movs	r3, r0
 80099b6:	001a      	movs	r2, r3
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	21ff      	movs	r1, #255	; 0xff
 80099bc:	4011      	ands	r1, r2
 80099be:	000c      	movs	r4, r1
 80099c0:	7c19      	ldrb	r1, [r3, #16]
 80099c2:	2000      	movs	r0, #0
 80099c4:	4001      	ands	r1, r0
 80099c6:	1c08      	adds	r0, r1, #0
 80099c8:	1c21      	adds	r1, r4, #0
 80099ca:	4301      	orrs	r1, r0
 80099cc:	7419      	strb	r1, [r3, #16]
 80099ce:	0a12      	lsrs	r2, r2, #8
 80099d0:	b290      	uxth	r0, r2
 80099d2:	7c5a      	ldrb	r2, [r3, #17]
 80099d4:	2100      	movs	r1, #0
 80099d6:	400a      	ands	r2, r1
 80099d8:	1c11      	adds	r1, r2, #0
 80099da:	1c02      	adds	r2, r0, #0
 80099dc:	430a      	orrs	r2, r1
 80099de:	745a      	strb	r2, [r3, #17]
#endif
#if LWIP_NETIF_HWADDRHINT
  ip_output_hinted(p, &(pcb->local_ip), &(pcb->remote_ip), pcb->ttl, pcb->tos,
      IP_PROTO_TCP, &(pcb->addr_hint));
#else /* LWIP_NETIF_HWADDRHINT*/
  ip_output(p, &(pcb->local_ip), &(pcb->remote_ip), pcb->ttl, pcb->tos,
 80099e0:	6879      	ldr	r1, [r7, #4]
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	1d1c      	adds	r4, r3, #4
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	7a9d      	ldrb	r5, [r3, #10]
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	7a5b      	ldrb	r3, [r3, #9]
 80099ee:	6938      	ldr	r0, [r7, #16]
 80099f0:	2206      	movs	r2, #6
 80099f2:	9201      	str	r2, [sp, #4]
 80099f4:	9300      	str	r3, [sp, #0]
 80099f6:	002b      	movs	r3, r5
 80099f8:	0022      	movs	r2, r4
 80099fa:	f002 fb09 	bl	800c010 <ip_output>
      IP_PROTO_TCP);
#endif /* LWIP_NETIF_HWADDRHINT*/
  pbuf_free(p);
 80099fe:	693b      	ldr	r3, [r7, #16]
 8009a00:	0018      	movs	r0, r3
 8009a02:	f7fb fe4f 	bl	80056a4 <pbuf_free>

  return ERR_OK;
 8009a06:	2300      	movs	r3, #0
}
 8009a08:	0018      	movs	r0, r3
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	b006      	add	sp, #24
 8009a0e:	bdb0      	pop	{r4, r5, r7, pc}

08009a10 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8009a10:	b5b0      	push	{r4, r5, r7, lr}
 8009a12:	b088      	sub	sp, #32
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8009a18:	4bcd      	ldr	r3, [pc, #820]	; (8009d50 <tcp_output+0x340>)
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	687a      	ldr	r2, [r7, #4]
 8009a1e:	429a      	cmp	r2, r3
 8009a20:	d101      	bne.n	8009a26 <tcp_output+0x16>
    return ERR_OK;
 8009a22:	2300      	movs	r3, #0
 8009a24:	e1a7      	b.n	8009d76 <tcp_output+0x366>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	2260      	movs	r2, #96	; 0x60
 8009a2a:	5a9a      	ldrh	r2, [r3, r2]
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	214c      	movs	r1, #76	; 0x4c
 8009a30:	5a5b      	ldrh	r3, [r3, r1]
 8009a32:	429a      	cmp	r2, r3
 8009a34:	d203      	bcs.n	8009a3e <tcp_output+0x2e>
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	2260      	movs	r2, #96	; 0x60
 8009a3a:	5a9b      	ldrh	r3, [r3, r2]
 8009a3c:	e002      	b.n	8009a44 <tcp_output+0x34>
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	224c      	movs	r2, #76	; 0x4c
 8009a42:	5a9b      	ldrh	r3, [r3, r2]
 8009a44:	613b      	str	r3, [r7, #16]

  seg = pcb->unsent;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a4a:	61fb      	str	r3, [r7, #28]
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	7f9b      	ldrb	r3, [r3, #30]
 8009a50:	001a      	movs	r2, r3
 8009a52:	2302      	movs	r3, #2
 8009a54:	4013      	ands	r3, r2
 8009a56:	d021      	beq.n	8009a9c <tcp_output+0x8c>
 8009a58:	69fb      	ldr	r3, [r7, #28]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d018      	beq.n	8009a90 <tcp_output+0x80>
     (seg == NULL ||
      ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 8009a5e:	69fb      	ldr	r3, [r7, #28]
 8009a60:	68db      	ldr	r3, [r3, #12]
 8009a62:	791a      	ldrb	r2, [r3, #4]
 8009a64:	7959      	ldrb	r1, [r3, #5]
 8009a66:	0209      	lsls	r1, r1, #8
 8009a68:	430a      	orrs	r2, r1
 8009a6a:	7999      	ldrb	r1, [r3, #6]
 8009a6c:	0409      	lsls	r1, r1, #16
 8009a6e:	430a      	orrs	r2, r1
 8009a70:	79db      	ldrb	r3, [r3, #7]
 8009a72:	061b      	lsls	r3, r3, #24
 8009a74:	4313      	orrs	r3, r2
 8009a76:	0018      	movs	r0, r3
 8009a78:	f7fa fe0b 	bl	8004692 <lwip_ntohl>
 8009a7c:	0002      	movs	r2, r0
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a82:	1ad3      	subs	r3, r2, r3
 8009a84:	69fa      	ldr	r2, [r7, #28]
 8009a86:	8912      	ldrh	r2, [r2, #8]
 8009a88:	189b      	adds	r3, r3, r2
     (seg == NULL ||
 8009a8a:	693a      	ldr	r2, [r7, #16]
 8009a8c:	429a      	cmp	r2, r3
 8009a8e:	d205      	bcs.n	8009a9c <tcp_output+0x8c>
     return tcp_send_empty_ack(pcb);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	0018      	movs	r0, r3
 8009a94:	f7ff ff5c 	bl	8009950 <tcp_send_empty_ack>
 8009a98:	0003      	movs	r3, r0
 8009a9a:	e16c      	b.n	8009d76 <tcp_output+0x366>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009aa0:	61bb      	str	r3, [r7, #24]
  if (useg != NULL) {
 8009aa2:	69bb      	ldr	r3, [r7, #24]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d100      	bne.n	8009aaa <tcp_output+0x9a>
 8009aa8:	e133      	b.n	8009d12 <tcp_output+0x302>
    for (; useg->next != NULL; useg = useg->next);
 8009aaa:	e002      	b.n	8009ab2 <tcp_output+0xa2>
 8009aac:	69bb      	ldr	r3, [r7, #24]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	61bb      	str	r3, [r7, #24]
 8009ab2:	69bb      	ldr	r3, [r7, #24]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d1f8      	bne.n	8009aac <tcp_output+0x9c>
                 ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 ntohl(seg->tcphdr->seqno), pcb->lastack));
  }
#endif /* TCP_CWND_DEBUG */
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8009aba:	e12a      	b.n	8009d12 <tcp_output+0x302>
         ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!", 
 8009abc:	69fb      	ldr	r3, [r7, #28]
 8009abe:	68db      	ldr	r3, [r3, #12]
 8009ac0:	7b1a      	ldrb	r2, [r3, #12]
 8009ac2:	7b5b      	ldrb	r3, [r3, #13]
 8009ac4:	021b      	lsls	r3, r3, #8
 8009ac6:	4313      	orrs	r3, r2
 8009ac8:	b29b      	uxth	r3, r3
 8009aca:	0018      	movs	r0, r3
 8009acc:	f7fa fdb8 	bl	8004640 <lwip_ntohs>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if((tcp_do_output_nagle(pcb) == 0) &&
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d01f      	beq.n	8009b18 <tcp_output+0x108>
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	7f9b      	ldrb	r3, [r3, #30]
 8009adc:	001a      	movs	r2, r3
 8009ade:	2344      	movs	r3, #68	; 0x44
 8009ae0:	4013      	ands	r3, r2
 8009ae2:	d119      	bne.n	8009b18 <tcp_output+0x108>
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d00b      	beq.n	8009b04 <tcp_output+0xf4>
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d110      	bne.n	8009b18 <tcp_output+0x108>
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009afa:	891a      	ldrh	r2, [r3, #8]
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009b00:	429a      	cmp	r2, r3
 8009b02:	d209      	bcs.n	8009b18 <tcp_output+0x108>
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2266      	movs	r2, #102	; 0x66
 8009b08:	5a9b      	ldrh	r3, [r3, r2]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d004      	beq.n	8009b18 <tcp_output+0x108>
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	2268      	movs	r2, #104	; 0x68
 8009b12:	5a9b      	ldrh	r3, [r3, r2]
 8009b14:	2b07      	cmp	r3, #7
 8009b16:	d901      	bls.n	8009b1c <tcp_output+0x10c>
 8009b18:	2301      	movs	r3, #1
 8009b1a:	e000      	b.n	8009b1e <tcp_output+0x10e>
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d106      	bne.n	8009b30 <tcp_output+0x120>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)){
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	7f9b      	ldrb	r3, [r3, #30]
 8009b26:	001a      	movs	r2, r3
 8009b28:	23a0      	movs	r3, #160	; 0xa0
 8009b2a:	4013      	ands	r3, r2
    if((tcp_do_output_nagle(pcb) == 0) &&
 8009b2c:	d100      	bne.n	8009b30 <tcp_output+0x120>
 8009b2e:	e111      	b.n	8009d54 <tcp_output+0x344>
                            pcb->lastack,
                            ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    pcb->unsent = seg->next;
 8009b30:	69fb      	ldr	r3, [r7, #28]
 8009b32:	681a      	ldr	r2, [r3, #0]
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	66da      	str	r2, [r3, #108]	; 0x6c

    if (pcb->state != SYN_SENT) {
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	7e1b      	ldrb	r3, [r3, #24]
 8009b3c:	2b02      	cmp	r3, #2
 8009b3e:	d029      	beq.n	8009b94 <tcp_output+0x184>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8009b40:	69fb      	ldr	r3, [r7, #28]
 8009b42:	68db      	ldr	r3, [r3, #12]
 8009b44:	7b1a      	ldrb	r2, [r3, #12]
 8009b46:	7b5b      	ldrb	r3, [r3, #13]
 8009b48:	021b      	lsls	r3, r3, #8
 8009b4a:	4313      	orrs	r3, r2
 8009b4c:	b29c      	uxth	r4, r3
 8009b4e:	2010      	movs	r0, #16
 8009b50:	f7fa fd60 	bl	8004614 <lwip_htons>
 8009b54:	0003      	movs	r3, r0
 8009b56:	001a      	movs	r2, r3
 8009b58:	69fb      	ldr	r3, [r7, #28]
 8009b5a:	68db      	ldr	r3, [r3, #12]
 8009b5c:	4322      	orrs	r2, r4
 8009b5e:	b292      	uxth	r2, r2
 8009b60:	21ff      	movs	r1, #255	; 0xff
 8009b62:	4011      	ands	r1, r2
 8009b64:	000c      	movs	r4, r1
 8009b66:	7b19      	ldrb	r1, [r3, #12]
 8009b68:	2000      	movs	r0, #0
 8009b6a:	4001      	ands	r1, r0
 8009b6c:	1c08      	adds	r0, r1, #0
 8009b6e:	1c21      	adds	r1, r4, #0
 8009b70:	4301      	orrs	r1, r0
 8009b72:	7319      	strb	r1, [r3, #12]
 8009b74:	0a12      	lsrs	r2, r2, #8
 8009b76:	b290      	uxth	r0, r2
 8009b78:	7b5a      	ldrb	r2, [r3, #13]
 8009b7a:	2100      	movs	r1, #0
 8009b7c:	400a      	ands	r2, r1
 8009b7e:	1c11      	adds	r1, r2, #0
 8009b80:	1c02      	adds	r2, r0, #0
 8009b82:	430a      	orrs	r2, r1
 8009b84:	735a      	strb	r2, [r3, #13]
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	7f9b      	ldrb	r3, [r3, #30]
 8009b8a:	2203      	movs	r2, #3
 8009b8c:	4393      	bics	r3, r2
 8009b8e:	b2da      	uxtb	r2, r3
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	779a      	strb	r2, [r3, #30]
    }

    tcp_output_segment(seg, pcb);
 8009b94:	687a      	ldr	r2, [r7, #4]
 8009b96:	69fb      	ldr	r3, [r7, #28]
 8009b98:	0011      	movs	r1, r2
 8009b9a:	0018      	movs	r0, r3
 8009b9c:	f000 f8f0 	bl	8009d80 <tcp_output_segment>
    snd_nxt = ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8009ba0:	69fb      	ldr	r3, [r7, #28]
 8009ba2:	68db      	ldr	r3, [r3, #12]
 8009ba4:	791a      	ldrb	r2, [r3, #4]
 8009ba6:	7959      	ldrb	r1, [r3, #5]
 8009ba8:	0209      	lsls	r1, r1, #8
 8009baa:	430a      	orrs	r2, r1
 8009bac:	7999      	ldrb	r1, [r3, #6]
 8009bae:	0409      	lsls	r1, r1, #16
 8009bb0:	430a      	orrs	r2, r1
 8009bb2:	79db      	ldrb	r3, [r3, #7]
 8009bb4:	061b      	lsls	r3, r3, #24
 8009bb6:	4313      	orrs	r3, r2
 8009bb8:	0018      	movs	r0, r3
 8009bba:	f7fa fd6a 	bl	8004692 <lwip_ntohl>
 8009bbe:	0004      	movs	r4, r0
 8009bc0:	69fb      	ldr	r3, [r7, #28]
 8009bc2:	891b      	ldrh	r3, [r3, #8]
 8009bc4:	001d      	movs	r5, r3
 8009bc6:	69fb      	ldr	r3, [r7, #28]
 8009bc8:	68db      	ldr	r3, [r3, #12]
 8009bca:	7b1a      	ldrb	r2, [r3, #12]
 8009bcc:	7b5b      	ldrb	r3, [r3, #13]
 8009bce:	021b      	lsls	r3, r3, #8
 8009bd0:	4313      	orrs	r3, r2
 8009bd2:	b29b      	uxth	r3, r3
 8009bd4:	0018      	movs	r0, r3
 8009bd6:	f7fa fd33 	bl	8004640 <lwip_ntohs>
 8009bda:	0003      	movs	r3, r0
 8009bdc:	001a      	movs	r2, r3
 8009bde:	2303      	movs	r3, #3
 8009be0:	4013      	ands	r3, r2
 8009be2:	1e5a      	subs	r2, r3, #1
 8009be4:	4193      	sbcs	r3, r2
 8009be6:	b2db      	uxtb	r3, r3
 8009be8:	18eb      	adds	r3, r5, r3
 8009bea:	18e3      	adds	r3, r4, r3
 8009bec:	60fb      	str	r3, [r7, #12]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	1ad3      	subs	r3, r2, r3
 8009bf6:	d502      	bpl.n	8009bfe <tcp_output+0x1ee>
      pcb->snd_nxt = snd_nxt;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	68fa      	ldr	r2, [r7, #12]
 8009bfc:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8009bfe:	69fb      	ldr	r3, [r7, #28]
 8009c00:	891b      	ldrh	r3, [r3, #8]
 8009c02:	001c      	movs	r4, r3
 8009c04:	69fb      	ldr	r3, [r7, #28]
 8009c06:	68db      	ldr	r3, [r3, #12]
 8009c08:	7b1a      	ldrb	r2, [r3, #12]
 8009c0a:	7b5b      	ldrb	r3, [r3, #13]
 8009c0c:	021b      	lsls	r3, r3, #8
 8009c0e:	4313      	orrs	r3, r2
 8009c10:	b29b      	uxth	r3, r3
 8009c12:	0018      	movs	r0, r3
 8009c14:	f7fa fd14 	bl	8004640 <lwip_ntohs>
 8009c18:	0003      	movs	r3, r0
 8009c1a:	001a      	movs	r2, r3
 8009c1c:	2303      	movs	r3, #3
 8009c1e:	4013      	ands	r3, r2
 8009c20:	1e5a      	subs	r2, r3, #1
 8009c22:	4193      	sbcs	r3, r2
 8009c24:	b2db      	uxtb	r3, r3
 8009c26:	18e3      	adds	r3, r4, r3
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	dd6b      	ble.n	8009d04 <tcp_output+0x2f4>
      seg->next = NULL;
 8009c2c:	69fb      	ldr	r3, [r7, #28]
 8009c2e:	2200      	movs	r2, #0
 8009c30:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d105      	bne.n	8009c46 <tcp_output+0x236>
        pcb->unacked = seg;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	69fa      	ldr	r2, [r7, #28]
 8009c3e:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8009c40:	69fb      	ldr	r3, [r7, #28]
 8009c42:	61bb      	str	r3, [r7, #24]
 8009c44:	e062      	b.n	8009d0c <tcp_output+0x2fc>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(ntohl(seg->tcphdr->seqno), ntohl(useg->tcphdr->seqno))) {
 8009c46:	69fb      	ldr	r3, [r7, #28]
 8009c48:	68db      	ldr	r3, [r3, #12]
 8009c4a:	791a      	ldrb	r2, [r3, #4]
 8009c4c:	7959      	ldrb	r1, [r3, #5]
 8009c4e:	0209      	lsls	r1, r1, #8
 8009c50:	430a      	orrs	r2, r1
 8009c52:	7999      	ldrb	r1, [r3, #6]
 8009c54:	0409      	lsls	r1, r1, #16
 8009c56:	430a      	orrs	r2, r1
 8009c58:	79db      	ldrb	r3, [r3, #7]
 8009c5a:	061b      	lsls	r3, r3, #24
 8009c5c:	4313      	orrs	r3, r2
 8009c5e:	0018      	movs	r0, r3
 8009c60:	f7fa fd17 	bl	8004692 <lwip_ntohl>
 8009c64:	0004      	movs	r4, r0
 8009c66:	69bb      	ldr	r3, [r7, #24]
 8009c68:	68db      	ldr	r3, [r3, #12]
 8009c6a:	791a      	ldrb	r2, [r3, #4]
 8009c6c:	7959      	ldrb	r1, [r3, #5]
 8009c6e:	0209      	lsls	r1, r1, #8
 8009c70:	430a      	orrs	r2, r1
 8009c72:	7999      	ldrb	r1, [r3, #6]
 8009c74:	0409      	lsls	r1, r1, #16
 8009c76:	430a      	orrs	r2, r1
 8009c78:	79db      	ldrb	r3, [r3, #7]
 8009c7a:	061b      	lsls	r3, r3, #24
 8009c7c:	4313      	orrs	r3, r2
 8009c7e:	0018      	movs	r0, r3
 8009c80:	f7fa fd07 	bl	8004692 <lwip_ntohl>
 8009c84:	0003      	movs	r3, r0
 8009c86:	1ae3      	subs	r3, r4, r3
 8009c88:	d535      	bpl.n	8009cf6 <tcp_output+0x2e6>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	3370      	adds	r3, #112	; 0x70
 8009c8e:	617b      	str	r3, [r7, #20]
          while (*cur_seg &&
 8009c90:	e002      	b.n	8009c98 <tcp_output+0x288>
            TCP_SEQ_LT(ntohl((*cur_seg)->tcphdr->seqno), ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
 8009c92:	697b      	ldr	r3, [r7, #20]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	617b      	str	r3, [r7, #20]
          while (*cur_seg &&
 8009c98:	697b      	ldr	r3, [r7, #20]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d022      	beq.n	8009ce6 <tcp_output+0x2d6>
            TCP_SEQ_LT(ntohl((*cur_seg)->tcphdr->seqno), ntohl(seg->tcphdr->seqno))) {
 8009ca0:	697b      	ldr	r3, [r7, #20]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	68db      	ldr	r3, [r3, #12]
 8009ca6:	791a      	ldrb	r2, [r3, #4]
 8009ca8:	7959      	ldrb	r1, [r3, #5]
 8009caa:	0209      	lsls	r1, r1, #8
 8009cac:	430a      	orrs	r2, r1
 8009cae:	7999      	ldrb	r1, [r3, #6]
 8009cb0:	0409      	lsls	r1, r1, #16
 8009cb2:	430a      	orrs	r2, r1
 8009cb4:	79db      	ldrb	r3, [r3, #7]
 8009cb6:	061b      	lsls	r3, r3, #24
 8009cb8:	4313      	orrs	r3, r2
 8009cba:	0018      	movs	r0, r3
 8009cbc:	f7fa fce9 	bl	8004692 <lwip_ntohl>
 8009cc0:	0004      	movs	r4, r0
 8009cc2:	69fb      	ldr	r3, [r7, #28]
 8009cc4:	68db      	ldr	r3, [r3, #12]
 8009cc6:	791a      	ldrb	r2, [r3, #4]
 8009cc8:	7959      	ldrb	r1, [r3, #5]
 8009cca:	0209      	lsls	r1, r1, #8
 8009ccc:	430a      	orrs	r2, r1
 8009cce:	7999      	ldrb	r1, [r3, #6]
 8009cd0:	0409      	lsls	r1, r1, #16
 8009cd2:	430a      	orrs	r2, r1
 8009cd4:	79db      	ldrb	r3, [r3, #7]
 8009cd6:	061b      	lsls	r3, r3, #24
 8009cd8:	4313      	orrs	r3, r2
 8009cda:	0018      	movs	r0, r3
 8009cdc:	f7fa fcd9 	bl	8004692 <lwip_ntohl>
 8009ce0:	0003      	movs	r3, r0
 8009ce2:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8009ce4:	d4d5      	bmi.n	8009c92 <tcp_output+0x282>
          }
          seg->next = (*cur_seg);
 8009ce6:	697b      	ldr	r3, [r7, #20]
 8009ce8:	681a      	ldr	r2, [r3, #0]
 8009cea:	69fb      	ldr	r3, [r7, #28]
 8009cec:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8009cee:	697b      	ldr	r3, [r7, #20]
 8009cf0:	69fa      	ldr	r2, [r7, #28]
 8009cf2:	601a      	str	r2, [r3, #0]
 8009cf4:	e00a      	b.n	8009d0c <tcp_output+0x2fc>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8009cf6:	69bb      	ldr	r3, [r7, #24]
 8009cf8:	69fa      	ldr	r2, [r7, #28]
 8009cfa:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8009cfc:	69bb      	ldr	r3, [r7, #24]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	61bb      	str	r3, [r7, #24]
 8009d02:	e003      	b.n	8009d0c <tcp_output+0x2fc>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8009d04:	69fb      	ldr	r3, [r7, #28]
 8009d06:	0018      	movs	r0, r3
 8009d08:	f7fc fd09 	bl	800671e <tcp_seg_free>
    }
    seg = pcb->unsent;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d10:	61fb      	str	r3, [r7, #28]
  while (seg != NULL &&
 8009d12:	69fb      	ldr	r3, [r7, #28]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d01e      	beq.n	8009d56 <tcp_output+0x346>
         ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8009d18:	69fb      	ldr	r3, [r7, #28]
 8009d1a:	68db      	ldr	r3, [r3, #12]
 8009d1c:	791a      	ldrb	r2, [r3, #4]
 8009d1e:	7959      	ldrb	r1, [r3, #5]
 8009d20:	0209      	lsls	r1, r1, #8
 8009d22:	430a      	orrs	r2, r1
 8009d24:	7999      	ldrb	r1, [r3, #6]
 8009d26:	0409      	lsls	r1, r1, #16
 8009d28:	430a      	orrs	r2, r1
 8009d2a:	79db      	ldrb	r3, [r3, #7]
 8009d2c:	061b      	lsls	r3, r3, #24
 8009d2e:	4313      	orrs	r3, r2
 8009d30:	0018      	movs	r0, r3
 8009d32:	f7fa fcae 	bl	8004692 <lwip_ntohl>
 8009d36:	0002      	movs	r2, r0
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d3c:	1ad3      	subs	r3, r2, r3
 8009d3e:	69fa      	ldr	r2, [r7, #28]
 8009d40:	8912      	ldrh	r2, [r2, #8]
 8009d42:	189b      	adds	r3, r3, r2
  while (seg != NULL &&
 8009d44:	693a      	ldr	r2, [r7, #16]
 8009d46:	429a      	cmp	r2, r3
 8009d48:	d300      	bcc.n	8009d4c <tcp_output+0x33c>
 8009d4a:	e6b7      	b.n	8009abc <tcp_output+0xac>
 8009d4c:	e003      	b.n	8009d56 <tcp_output+0x346>
 8009d4e:	46c0      	nop			; (mov r8, r8)
 8009d50:	2000328c 	.word	0x2000328c
      break;
 8009d54:	46c0      	nop			; (mov r8, r8)
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d103      	bne.n	8009d66 <tcp_output+0x356>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	226a      	movs	r2, #106	; 0x6a
 8009d62:	2100      	movs	r1, #0
 8009d64:	5299      	strh	r1, [r3, r2]
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	7f9b      	ldrb	r3, [r3, #30]
 8009d6a:	227f      	movs	r2, #127	; 0x7f
 8009d6c:	4013      	ands	r3, r2
 8009d6e:	b2da      	uxtb	r2, r3
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	779a      	strb	r2, [r3, #30]
  return ERR_OK;
 8009d74:	2300      	movs	r3, #0
}
 8009d76:	0018      	movs	r0, r3
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	b008      	add	sp, #32
 8009d7c:	bdb0      	pop	{r4, r5, r7, pc}
 8009d7e:	46c0      	nop			; (mov r8, r8)

08009d80 <tcp_output_segment>:
 * @param seg the tcp_seg to send
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 */
static void
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb)
{
 8009d80:	b5b0      	push	{r4, r5, r7, lr}
 8009d82:	b088      	sub	sp, #32
 8009d84:	af02      	add	r7, sp, #8
 8009d86:	6078      	str	r0, [r7, #4]
 8009d88:	6039      	str	r1, [r7, #0]
  /** @bug Exclude retransmitted segments from this count. */
  snmp_inc_tcpoutsegs();

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = htonl(pcb->rcv_nxt);
 8009d8a:	683b      	ldr	r3, [r7, #0]
 8009d8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	68dc      	ldr	r4, [r3, #12]
 8009d92:	0010      	movs	r0, r2
 8009d94:	f7fa fc64 	bl	8004660 <lwip_htonl>
 8009d98:	0003      	movs	r3, r0
 8009d9a:	22ff      	movs	r2, #255	; 0xff
 8009d9c:	401a      	ands	r2, r3
 8009d9e:	0010      	movs	r0, r2
 8009da0:	7a22      	ldrb	r2, [r4, #8]
 8009da2:	2100      	movs	r1, #0
 8009da4:	400a      	ands	r2, r1
 8009da6:	1c11      	adds	r1, r2, #0
 8009da8:	1c02      	adds	r2, r0, #0
 8009daa:	430a      	orrs	r2, r1
 8009dac:	7222      	strb	r2, [r4, #8]
 8009dae:	0a1a      	lsrs	r2, r3, #8
 8009db0:	21ff      	movs	r1, #255	; 0xff
 8009db2:	400a      	ands	r2, r1
 8009db4:	0010      	movs	r0, r2
 8009db6:	7a62      	ldrb	r2, [r4, #9]
 8009db8:	2100      	movs	r1, #0
 8009dba:	400a      	ands	r2, r1
 8009dbc:	1c11      	adds	r1, r2, #0
 8009dbe:	1c02      	adds	r2, r0, #0
 8009dc0:	430a      	orrs	r2, r1
 8009dc2:	7262      	strb	r2, [r4, #9]
 8009dc4:	0c1a      	lsrs	r2, r3, #16
 8009dc6:	21ff      	movs	r1, #255	; 0xff
 8009dc8:	400a      	ands	r2, r1
 8009dca:	0010      	movs	r0, r2
 8009dcc:	7aa2      	ldrb	r2, [r4, #10]
 8009dce:	2100      	movs	r1, #0
 8009dd0:	400a      	ands	r2, r1
 8009dd2:	1c11      	adds	r1, r2, #0
 8009dd4:	1c02      	adds	r2, r0, #0
 8009dd6:	430a      	orrs	r2, r1
 8009dd8:	72a2      	strb	r2, [r4, #10]
 8009dda:	0e19      	lsrs	r1, r3, #24
 8009ddc:	7ae3      	ldrb	r3, [r4, #11]
 8009dde:	2200      	movs	r2, #0
 8009de0:	4013      	ands	r3, r2
 8009de2:	1c1a      	adds	r2, r3, #0
 8009de4:	1c0b      	adds	r3, r1, #0
 8009de6:	4313      	orrs	r3, r2
 8009de8:	72e3      	strb	r3, [r4, #11]

  /* advertise our receive window size in this TCP segment */
  seg->tcphdr->wnd = htons(pcb->rcv_ann_wnd);
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	68dc      	ldr	r4, [r3, #12]
 8009df2:	0010      	movs	r0, r2
 8009df4:	f7fa fc0e 	bl	8004614 <lwip_htons>
 8009df8:	0003      	movs	r3, r0
 8009dfa:	22ff      	movs	r2, #255	; 0xff
 8009dfc:	401a      	ands	r2, r3
 8009dfe:	0010      	movs	r0, r2
 8009e00:	7ba2      	ldrb	r2, [r4, #14]
 8009e02:	2100      	movs	r1, #0
 8009e04:	400a      	ands	r2, r1
 8009e06:	1c11      	adds	r1, r2, #0
 8009e08:	1c02      	adds	r2, r0, #0
 8009e0a:	430a      	orrs	r2, r1
 8009e0c:	73a2      	strb	r2, [r4, #14]
 8009e0e:	0a1b      	lsrs	r3, r3, #8
 8009e10:	b299      	uxth	r1, r3
 8009e12:	7be3      	ldrb	r3, [r4, #15]
 8009e14:	2200      	movs	r2, #0
 8009e16:	4013      	ands	r3, r2
 8009e18:	1c1a      	adds	r2, r3, #0
 8009e1a:	1c0b      	adds	r3, r1, #0
 8009e1c:	4313      	orrs	r3, r2
 8009e1e:	73e3      	strb	r3, [r4, #15]

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8009e20:	683b      	ldr	r3, [r7, #0]
 8009e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e24:	683a      	ldr	r2, [r7, #0]
 8009e26:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 8009e28:	189a      	adds	r2, r3, r2
 8009e2a:	683b      	ldr	r3, [r7, #0]
 8009e2c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	68db      	ldr	r3, [r3, #12]
 8009e32:	3314      	adds	r3, #20
 8009e34:	617b      	str	r3, [r7, #20]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	7a9b      	ldrb	r3, [r3, #10]
 8009e3a:	001a      	movs	r2, r3
 8009e3c:	2301      	movs	r3, #1
 8009e3e:	4013      	ands	r3, r2
 8009e40:	d018      	beq.n	8009e74 <tcp_output_segment+0xf4>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->remote_ip);
 8009e42:	683b      	ldr	r3, [r7, #0]
 8009e44:	3304      	adds	r3, #4
 8009e46:	2512      	movs	r5, #18
 8009e48:	197c      	adds	r4, r7, r5
 8009e4a:	4a5d      	ldr	r2, [pc, #372]	; (8009fc0 <tcp_output_segment+0x240>)
 8009e4c:	0019      	movs	r1, r3
 8009e4e:	0010      	movs	r0, r2
 8009e50:	f7fc fe92 	bl	8006b78 <tcp_eff_send_mss>
 8009e54:	0003      	movs	r3, r0
 8009e56:	8023      	strh	r3, [r4, #0]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8009e58:	197b      	adds	r3, r7, r5
 8009e5a:	881b      	ldrh	r3, [r3, #0]
 8009e5c:	2281      	movs	r2, #129	; 0x81
 8009e5e:	0492      	lsls	r2, r2, #18
 8009e60:	4313      	orrs	r3, r2
 8009e62:	0018      	movs	r0, r3
 8009e64:	f7fa fbfc 	bl	8004660 <lwip_htonl>
 8009e68:	0002      	movs	r2, r0
 8009e6a:	697b      	ldr	r3, [r7, #20]
 8009e6c:	601a      	str	r2, [r3, #0]
    opts += 1;
 8009e6e:	697b      	ldr	r3, [r7, #20]
 8009e70:	3304      	adds	r3, #4
 8009e72:	617b      	str	r3, [r7, #20]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled 
     This must be set before checking the route. */
  if (pcb->rtime == -1) {
 8009e74:	683b      	ldr	r3, [r7, #0]
 8009e76:	2234      	movs	r2, #52	; 0x34
 8009e78:	5e9b      	ldrsh	r3, [r3, r2]
 8009e7a:	3301      	adds	r3, #1
 8009e7c:	d102      	bne.n	8009e84 <tcp_output_segment+0x104>
    pcb->rtime = 0;
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	2200      	movs	r2, #0
 8009e82:	869a      	strh	r2, [r3, #52]	; 0x34
  }

  /* If we don't have a local IP address, we get one by
     calling ip_route(). */
  if (ip_addr_isany(&(pcb->local_ip))) {
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d003      	beq.n	8009e92 <tcp_output_segment+0x112>
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d10e      	bne.n	8009eb0 <tcp_output_segment+0x130>
    netif = ip_route(&(pcb->remote_ip));
 8009e92:	683b      	ldr	r3, [r7, #0]
 8009e94:	3304      	adds	r3, #4
 8009e96:	0018      	movs	r0, r3
 8009e98:	f001 fcd6 	bl	800b848 <ip_route>
 8009e9c:	0003      	movs	r3, r0
 8009e9e:	60fb      	str	r3, [r7, #12]
    if (netif == NULL) {
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d100      	bne.n	8009ea8 <tcp_output_segment+0x128>
 8009ea6:	e086      	b.n	8009fb6 <tcp_output_segment+0x236>
      return;
    }
    ip_addr_copy(pcb->local_ip, netif->ip_addr);
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	685a      	ldr	r2, [r3, #4]
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	601a      	str	r2, [r3, #0]
  }

  if (pcb->rttest == 0) {
 8009eb0:	683b      	ldr	r3, [r7, #0]
 8009eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d115      	bne.n	8009ee4 <tcp_output_segment+0x164>
    pcb->rttest = tcp_ticks;
 8009eb8:	4b42      	ldr	r3, [pc, #264]	; (8009fc4 <tcp_output_segment+0x244>)
 8009eba:	681a      	ldr	r2, [r3, #0]
 8009ebc:	683b      	ldr	r3, [r7, #0]
 8009ebe:	639a      	str	r2, [r3, #56]	; 0x38
    pcb->rtseq = ntohl(seg->tcphdr->seqno);
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	68db      	ldr	r3, [r3, #12]
 8009ec4:	791a      	ldrb	r2, [r3, #4]
 8009ec6:	7959      	ldrb	r1, [r3, #5]
 8009ec8:	0209      	lsls	r1, r1, #8
 8009eca:	430a      	orrs	r2, r1
 8009ecc:	7999      	ldrb	r1, [r3, #6]
 8009ece:	0409      	lsls	r1, r1, #16
 8009ed0:	430a      	orrs	r2, r1
 8009ed2:	79db      	ldrb	r3, [r3, #7]
 8009ed4:	061b      	lsls	r3, r3, #24
 8009ed6:	4313      	orrs	r3, r2
 8009ed8:	0018      	movs	r0, r3
 8009eda:	f7fa fbda 	bl	8004692 <lwip_ntohl>
 8009ede:	0002      	movs	r2, r0
 8009ee0:	683b      	ldr	r3, [r7, #0]
 8009ee2:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          htonl(seg->tcphdr->seqno), htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	68db      	ldr	r3, [r3, #12]
 8009ee8:	001a      	movs	r2, r3
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	685b      	ldr	r3, [r3, #4]
 8009eee:	685b      	ldr	r3, [r3, #4]
 8009ef0:	1ad2      	subs	r2, r2, r3
 8009ef2:	200a      	movs	r0, #10
 8009ef4:	183b      	adds	r3, r7, r0
 8009ef6:	801a      	strh	r2, [r3, #0]

  seg->p->len -= len;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	685b      	ldr	r3, [r3, #4]
 8009efc:	8959      	ldrh	r1, [r3, #10]
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	685b      	ldr	r3, [r3, #4]
 8009f02:	183a      	adds	r2, r7, r0
 8009f04:	8812      	ldrh	r2, [r2, #0]
 8009f06:	1a8a      	subs	r2, r1, r2
 8009f08:	b292      	uxth	r2, r2
 8009f0a:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	685b      	ldr	r3, [r3, #4]
 8009f10:	8919      	ldrh	r1, [r3, #8]
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	685b      	ldr	r3, [r3, #4]
 8009f16:	183a      	adds	r2, r7, r0
 8009f18:	8812      	ldrh	r2, [r2, #0]
 8009f1a:	1a8a      	subs	r2, r1, r2
 8009f1c:	b292      	uxth	r2, r2
 8009f1e:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	685b      	ldr	r3, [r3, #4]
 8009f24:	687a      	ldr	r2, [r7, #4]
 8009f26:	68d2      	ldr	r2, [r2, #12]
 8009f28:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	68db      	ldr	r3, [r3, #12]
 8009f2e:	7c1a      	ldrb	r2, [r3, #16]
 8009f30:	2100      	movs	r1, #0
 8009f32:	400a      	ands	r2, r1
 8009f34:	741a      	strb	r2, [r3, #16]
 8009f36:	7c5a      	ldrb	r2, [r3, #17]
 8009f38:	2100      	movs	r1, #0
 8009f3a:	400a      	ands	r2, r1
 8009f3c:	745a      	strb	r2, [r3, #17]
      seg->tcphdr->chksum = chksum_slow;
    }
#endif /* TCP_CHECKSUM_ON_COPY_SANITY_CHECK */
  }
#else /* TCP_CHECKSUM_ON_COPY */
  seg->tcphdr->chksum = inet_chksum_pseudo(seg->p, &(pcb->local_ip),
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	6858      	ldr	r0, [r3, #4]
 8009f42:	6839      	ldr	r1, [r7, #0]
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	1d1d      	adds	r5, r3, #4
         &(pcb->remote_ip),
         IP_PROTO_TCP, seg->p->tot_len);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	685b      	ldr	r3, [r3, #4]
  seg->tcphdr->chksum = inet_chksum_pseudo(seg->p, &(pcb->local_ip),
 8009f4c:	891a      	ldrh	r2, [r3, #8]
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	68dc      	ldr	r4, [r3, #12]
 8009f52:	9200      	str	r2, [sp, #0]
 8009f54:	2306      	movs	r3, #6
 8009f56:	002a      	movs	r2, r5
 8009f58:	f001 fb6f 	bl	800b63a <inet_chksum_pseudo>
 8009f5c:	0003      	movs	r3, r0
 8009f5e:	22ff      	movs	r2, #255	; 0xff
 8009f60:	401a      	ands	r2, r3
 8009f62:	0010      	movs	r0, r2
 8009f64:	7c22      	ldrb	r2, [r4, #16]
 8009f66:	2100      	movs	r1, #0
 8009f68:	400a      	ands	r2, r1
 8009f6a:	1c11      	adds	r1, r2, #0
 8009f6c:	1c02      	adds	r2, r0, #0
 8009f6e:	430a      	orrs	r2, r1
 8009f70:	7422      	strb	r2, [r4, #16]
 8009f72:	0a1b      	lsrs	r3, r3, #8
 8009f74:	b299      	uxth	r1, r3
 8009f76:	7c63      	ldrb	r3, [r4, #17]
 8009f78:	2200      	movs	r2, #0
 8009f7a:	4013      	ands	r3, r2
 8009f7c:	1c1a      	adds	r2, r3, #0
 8009f7e:	1c0b      	adds	r3, r1, #0
 8009f80:	4313      	orrs	r3, r2
 8009f82:	7463      	strb	r3, [r4, #17]
#endif /* TCP_CHECKSUM_ON_COPY */
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);
 8009f84:	4b10      	ldr	r3, [pc, #64]	; (8009fc8 <tcp_output_segment+0x248>)
 8009f86:	2290      	movs	r2, #144	; 0x90
 8009f88:	5a9b      	ldrh	r3, [r3, r2]
 8009f8a:	3301      	adds	r3, #1
 8009f8c:	b299      	uxth	r1, r3
 8009f8e:	4b0e      	ldr	r3, [pc, #56]	; (8009fc8 <tcp_output_segment+0x248>)
 8009f90:	2290      	movs	r2, #144	; 0x90
 8009f92:	5299      	strh	r1, [r3, r2]

#if LWIP_NETIF_HWADDRHINT
  ip_output_hinted(seg->p, &(pcb->local_ip), &(pcb->remote_ip), pcb->ttl, pcb->tos,
      IP_PROTO_TCP, &(pcb->addr_hint));
#else /* LWIP_NETIF_HWADDRHINT*/
  ip_output(seg->p, &(pcb->local_ip), &(pcb->remote_ip), pcb->ttl, pcb->tos,
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	6858      	ldr	r0, [r3, #4]
 8009f98:	6839      	ldr	r1, [r7, #0]
 8009f9a:	683b      	ldr	r3, [r7, #0]
 8009f9c:	1d1c      	adds	r4, r3, #4
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	7a9d      	ldrb	r5, [r3, #10]
 8009fa2:	683b      	ldr	r3, [r7, #0]
 8009fa4:	7a5b      	ldrb	r3, [r3, #9]
 8009fa6:	2206      	movs	r2, #6
 8009fa8:	9201      	str	r2, [sp, #4]
 8009faa:	9300      	str	r3, [sp, #0]
 8009fac:	002b      	movs	r3, r5
 8009fae:	0022      	movs	r2, r4
 8009fb0:	f002 f82e 	bl	800c010 <ip_output>
 8009fb4:	e000      	b.n	8009fb8 <tcp_output_segment+0x238>
      return;
 8009fb6:	46c0      	nop			; (mov r8, r8)
      IP_PROTO_TCP);
#endif /* LWIP_NETIF_HWADDRHINT*/
}
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	b006      	add	sp, #24
 8009fbc:	bdb0      	pop	{r4, r5, r7, pc}
 8009fbe:	46c0      	nop			; (mov r8, r8)
 8009fc0:	000005b4 	.word	0x000005b4
 8009fc4:	20003278 	.word	0x20003278
 8009fc8:	20003158 	.word	0x20003158

08009fcc <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  ip_addr_t *local_ip, ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 8009fcc:	b590      	push	{r4, r7, lr}
 8009fce:	b089      	sub	sp, #36	; 0x24
 8009fd0:	af02      	add	r7, sp, #8
 8009fd2:	60f8      	str	r0, [r7, #12]
 8009fd4:	60b9      	str	r1, [r7, #8]
 8009fd6:	607a      	str	r2, [r7, #4]
 8009fd8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 8009fda:	2200      	movs	r2, #0
 8009fdc:	2114      	movs	r1, #20
 8009fde:	2001      	movs	r0, #1
 8009fe0:	f7fb f8d4 	bl	800518c <pbuf_alloc>
 8009fe4:	0003      	movs	r3, r0
 8009fe6:	617b      	str	r3, [r7, #20]
  if (p == NULL) {
 8009fe8:	697b      	ldr	r3, [r7, #20]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d100      	bne.n	8009ff0 <tcp_rst+0x24>
 8009fee:	e108      	b.n	800a202 <tcp_rst+0x236>
      return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 8009ff0:	697b      	ldr	r3, [r7, #20]
 8009ff2:	685b      	ldr	r3, [r3, #4]
 8009ff4:	613b      	str	r3, [r7, #16]
  tcphdr->src = htons(local_port);
 8009ff6:	2328      	movs	r3, #40	; 0x28
 8009ff8:	18fb      	adds	r3, r7, r3
 8009ffa:	881b      	ldrh	r3, [r3, #0]
 8009ffc:	0018      	movs	r0, r3
 8009ffe:	f7fa fb09 	bl	8004614 <lwip_htons>
 800a002:	0003      	movs	r3, r0
 800a004:	001a      	movs	r2, r3
 800a006:	693b      	ldr	r3, [r7, #16]
 800a008:	21ff      	movs	r1, #255	; 0xff
 800a00a:	4011      	ands	r1, r2
 800a00c:	000c      	movs	r4, r1
 800a00e:	7819      	ldrb	r1, [r3, #0]
 800a010:	2000      	movs	r0, #0
 800a012:	4001      	ands	r1, r0
 800a014:	1c08      	adds	r0, r1, #0
 800a016:	1c21      	adds	r1, r4, #0
 800a018:	4301      	orrs	r1, r0
 800a01a:	7019      	strb	r1, [r3, #0]
 800a01c:	0a12      	lsrs	r2, r2, #8
 800a01e:	b290      	uxth	r0, r2
 800a020:	785a      	ldrb	r2, [r3, #1]
 800a022:	2100      	movs	r1, #0
 800a024:	400a      	ands	r2, r1
 800a026:	1c11      	adds	r1, r2, #0
 800a028:	1c02      	adds	r2, r0, #0
 800a02a:	430a      	orrs	r2, r1
 800a02c:	705a      	strb	r2, [r3, #1]
  tcphdr->dest = htons(remote_port);
 800a02e:	232c      	movs	r3, #44	; 0x2c
 800a030:	18fb      	adds	r3, r7, r3
 800a032:	881b      	ldrh	r3, [r3, #0]
 800a034:	0018      	movs	r0, r3
 800a036:	f7fa faed 	bl	8004614 <lwip_htons>
 800a03a:	0003      	movs	r3, r0
 800a03c:	001a      	movs	r2, r3
 800a03e:	693b      	ldr	r3, [r7, #16]
 800a040:	21ff      	movs	r1, #255	; 0xff
 800a042:	4011      	ands	r1, r2
 800a044:	000c      	movs	r4, r1
 800a046:	7899      	ldrb	r1, [r3, #2]
 800a048:	2000      	movs	r0, #0
 800a04a:	4001      	ands	r1, r0
 800a04c:	1c08      	adds	r0, r1, #0
 800a04e:	1c21      	adds	r1, r4, #0
 800a050:	4301      	orrs	r1, r0
 800a052:	7099      	strb	r1, [r3, #2]
 800a054:	0a12      	lsrs	r2, r2, #8
 800a056:	b290      	uxth	r0, r2
 800a058:	78da      	ldrb	r2, [r3, #3]
 800a05a:	2100      	movs	r1, #0
 800a05c:	400a      	ands	r2, r1
 800a05e:	1c11      	adds	r1, r2, #0
 800a060:	1c02      	adds	r2, r0, #0
 800a062:	430a      	orrs	r2, r1
 800a064:	70da      	strb	r2, [r3, #3]
  tcphdr->seqno = htonl(seqno);
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	0018      	movs	r0, r3
 800a06a:	f7fa faf9 	bl	8004660 <lwip_htonl>
 800a06e:	0002      	movs	r2, r0
 800a070:	693b      	ldr	r3, [r7, #16]
 800a072:	21ff      	movs	r1, #255	; 0xff
 800a074:	4011      	ands	r1, r2
 800a076:	000c      	movs	r4, r1
 800a078:	7919      	ldrb	r1, [r3, #4]
 800a07a:	2000      	movs	r0, #0
 800a07c:	4001      	ands	r1, r0
 800a07e:	1c08      	adds	r0, r1, #0
 800a080:	1c21      	adds	r1, r4, #0
 800a082:	4301      	orrs	r1, r0
 800a084:	7119      	strb	r1, [r3, #4]
 800a086:	0a11      	lsrs	r1, r2, #8
 800a088:	20ff      	movs	r0, #255	; 0xff
 800a08a:	4001      	ands	r1, r0
 800a08c:	000c      	movs	r4, r1
 800a08e:	7959      	ldrb	r1, [r3, #5]
 800a090:	2000      	movs	r0, #0
 800a092:	4001      	ands	r1, r0
 800a094:	1c08      	adds	r0, r1, #0
 800a096:	1c21      	adds	r1, r4, #0
 800a098:	4301      	orrs	r1, r0
 800a09a:	7159      	strb	r1, [r3, #5]
 800a09c:	0c11      	lsrs	r1, r2, #16
 800a09e:	20ff      	movs	r0, #255	; 0xff
 800a0a0:	4001      	ands	r1, r0
 800a0a2:	000c      	movs	r4, r1
 800a0a4:	7999      	ldrb	r1, [r3, #6]
 800a0a6:	2000      	movs	r0, #0
 800a0a8:	4001      	ands	r1, r0
 800a0aa:	1c08      	adds	r0, r1, #0
 800a0ac:	1c21      	adds	r1, r4, #0
 800a0ae:	4301      	orrs	r1, r0
 800a0b0:	7199      	strb	r1, [r3, #6]
 800a0b2:	0e10      	lsrs	r0, r2, #24
 800a0b4:	79da      	ldrb	r2, [r3, #7]
 800a0b6:	2100      	movs	r1, #0
 800a0b8:	400a      	ands	r2, r1
 800a0ba:	1c11      	adds	r1, r2, #0
 800a0bc:	1c02      	adds	r2, r0, #0
 800a0be:	430a      	orrs	r2, r1
 800a0c0:	71da      	strb	r2, [r3, #7]
  tcphdr->ackno = htonl(ackno);
 800a0c2:	68bb      	ldr	r3, [r7, #8]
 800a0c4:	0018      	movs	r0, r3
 800a0c6:	f7fa facb 	bl	8004660 <lwip_htonl>
 800a0ca:	0002      	movs	r2, r0
 800a0cc:	693b      	ldr	r3, [r7, #16]
 800a0ce:	21ff      	movs	r1, #255	; 0xff
 800a0d0:	4011      	ands	r1, r2
 800a0d2:	000c      	movs	r4, r1
 800a0d4:	7a19      	ldrb	r1, [r3, #8]
 800a0d6:	2000      	movs	r0, #0
 800a0d8:	4001      	ands	r1, r0
 800a0da:	1c08      	adds	r0, r1, #0
 800a0dc:	1c21      	adds	r1, r4, #0
 800a0de:	4301      	orrs	r1, r0
 800a0e0:	7219      	strb	r1, [r3, #8]
 800a0e2:	0a11      	lsrs	r1, r2, #8
 800a0e4:	20ff      	movs	r0, #255	; 0xff
 800a0e6:	4001      	ands	r1, r0
 800a0e8:	000c      	movs	r4, r1
 800a0ea:	7a59      	ldrb	r1, [r3, #9]
 800a0ec:	2000      	movs	r0, #0
 800a0ee:	4001      	ands	r1, r0
 800a0f0:	1c08      	adds	r0, r1, #0
 800a0f2:	1c21      	adds	r1, r4, #0
 800a0f4:	4301      	orrs	r1, r0
 800a0f6:	7259      	strb	r1, [r3, #9]
 800a0f8:	0c11      	lsrs	r1, r2, #16
 800a0fa:	20ff      	movs	r0, #255	; 0xff
 800a0fc:	4001      	ands	r1, r0
 800a0fe:	000c      	movs	r4, r1
 800a100:	7a99      	ldrb	r1, [r3, #10]
 800a102:	2000      	movs	r0, #0
 800a104:	4001      	ands	r1, r0
 800a106:	1c08      	adds	r0, r1, #0
 800a108:	1c21      	adds	r1, r4, #0
 800a10a:	4301      	orrs	r1, r0
 800a10c:	7299      	strb	r1, [r3, #10]
 800a10e:	0e10      	lsrs	r0, r2, #24
 800a110:	7ada      	ldrb	r2, [r3, #11]
 800a112:	2100      	movs	r1, #0
 800a114:	400a      	ands	r2, r1
 800a116:	1c11      	adds	r1, r2, #0
 800a118:	1c02      	adds	r2, r0, #0
 800a11a:	430a      	orrs	r2, r1
 800a11c:	72da      	strb	r2, [r3, #11]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 800a11e:	4b3b      	ldr	r3, [pc, #236]	; (800a20c <tcp_rst+0x240>)
 800a120:	0018      	movs	r0, r3
 800a122:	f7fa fa77 	bl	8004614 <lwip_htons>
 800a126:	0003      	movs	r3, r0
 800a128:	001a      	movs	r2, r3
 800a12a:	693b      	ldr	r3, [r7, #16]
 800a12c:	21ff      	movs	r1, #255	; 0xff
 800a12e:	4011      	ands	r1, r2
 800a130:	000c      	movs	r4, r1
 800a132:	7b19      	ldrb	r1, [r3, #12]
 800a134:	2000      	movs	r0, #0
 800a136:	4001      	ands	r1, r0
 800a138:	1c08      	adds	r0, r1, #0
 800a13a:	1c21      	adds	r1, r4, #0
 800a13c:	4301      	orrs	r1, r0
 800a13e:	7319      	strb	r1, [r3, #12]
 800a140:	0a12      	lsrs	r2, r2, #8
 800a142:	b290      	uxth	r0, r2
 800a144:	7b5a      	ldrb	r2, [r3, #13]
 800a146:	2100      	movs	r1, #0
 800a148:	400a      	ands	r2, r1
 800a14a:	1c11      	adds	r1, r2, #0
 800a14c:	1c02      	adds	r2, r0, #0
 800a14e:	430a      	orrs	r2, r1
 800a150:	735a      	strb	r2, [r3, #13]
  tcphdr->wnd = PP_HTONS(TCP_WND);
 800a152:	693b      	ldr	r3, [r7, #16]
 800a154:	7b9a      	ldrb	r2, [r3, #14]
 800a156:	2100      	movs	r1, #0
 800a158:	400a      	ands	r2, r1
 800a15a:	1c11      	adds	r1, r2, #0
 800a15c:	2216      	movs	r2, #22
 800a15e:	430a      	orrs	r2, r1
 800a160:	739a      	strb	r2, [r3, #14]
 800a162:	7bda      	ldrb	r2, [r3, #15]
 800a164:	2100      	movs	r1, #0
 800a166:	400a      	ands	r2, r1
 800a168:	1c11      	adds	r1, r2, #0
 800a16a:	2230      	movs	r2, #48	; 0x30
 800a16c:	4252      	negs	r2, r2
 800a16e:	430a      	orrs	r2, r1
 800a170:	73da      	strb	r2, [r3, #15]
  tcphdr->chksum = 0;
 800a172:	693b      	ldr	r3, [r7, #16]
 800a174:	7c1a      	ldrb	r2, [r3, #16]
 800a176:	2100      	movs	r1, #0
 800a178:	400a      	ands	r2, r1
 800a17a:	741a      	strb	r2, [r3, #16]
 800a17c:	7c5a      	ldrb	r2, [r3, #17]
 800a17e:	2100      	movs	r1, #0
 800a180:	400a      	ands	r2, r1
 800a182:	745a      	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
 800a184:	693b      	ldr	r3, [r7, #16]
 800a186:	7c9a      	ldrb	r2, [r3, #18]
 800a188:	2100      	movs	r1, #0
 800a18a:	400a      	ands	r2, r1
 800a18c:	749a      	strb	r2, [r3, #18]
 800a18e:	7cda      	ldrb	r2, [r3, #19]
 800a190:	2100      	movs	r1, #0
 800a192:	400a      	ands	r2, r1
 800a194:	74da      	strb	r2, [r3, #19]

#if CHECKSUM_GEN_TCP
  tcphdr->chksum = inet_chksum_pseudo(p, local_ip, remote_ip,
 800a196:	697b      	ldr	r3, [r7, #20]
 800a198:	891b      	ldrh	r3, [r3, #8]
 800a19a:	683a      	ldr	r2, [r7, #0]
 800a19c:	6879      	ldr	r1, [r7, #4]
 800a19e:	6978      	ldr	r0, [r7, #20]
 800a1a0:	9300      	str	r3, [sp, #0]
 800a1a2:	2306      	movs	r3, #6
 800a1a4:	f001 fa49 	bl	800b63a <inet_chksum_pseudo>
 800a1a8:	0003      	movs	r3, r0
 800a1aa:	001a      	movs	r2, r3
 800a1ac:	693b      	ldr	r3, [r7, #16]
 800a1ae:	21ff      	movs	r1, #255	; 0xff
 800a1b0:	4011      	ands	r1, r2
 800a1b2:	000c      	movs	r4, r1
 800a1b4:	7c19      	ldrb	r1, [r3, #16]
 800a1b6:	2000      	movs	r0, #0
 800a1b8:	4001      	ands	r1, r0
 800a1ba:	1c08      	adds	r0, r1, #0
 800a1bc:	1c21      	adds	r1, r4, #0
 800a1be:	4301      	orrs	r1, r0
 800a1c0:	7419      	strb	r1, [r3, #16]
 800a1c2:	0a12      	lsrs	r2, r2, #8
 800a1c4:	b290      	uxth	r0, r2
 800a1c6:	7c5a      	ldrb	r2, [r3, #17]
 800a1c8:	2100      	movs	r1, #0
 800a1ca:	400a      	ands	r2, r1
 800a1cc:	1c11      	adds	r1, r2, #0
 800a1ce:	1c02      	adds	r2, r0, #0
 800a1d0:	430a      	orrs	r2, r1
 800a1d2:	745a      	strb	r2, [r3, #17]
              IP_PROTO_TCP, p->tot_len);
#endif
  TCP_STATS_INC(tcp.xmit);
 800a1d4:	4b0e      	ldr	r3, [pc, #56]	; (800a210 <tcp_rst+0x244>)
 800a1d6:	2290      	movs	r2, #144	; 0x90
 800a1d8:	5a9b      	ldrh	r3, [r3, r2]
 800a1da:	3301      	adds	r3, #1
 800a1dc:	b299      	uxth	r1, r3
 800a1de:	4b0c      	ldr	r3, [pc, #48]	; (800a210 <tcp_rst+0x244>)
 800a1e0:	2290      	movs	r2, #144	; 0x90
 800a1e2:	5299      	strh	r1, [r3, r2]
  snmp_inc_tcpoutrsts();
   /* Send output with hardcoded TTL since we have no access to the pcb */
  ip_output(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP);
 800a1e4:	683a      	ldr	r2, [r7, #0]
 800a1e6:	6879      	ldr	r1, [r7, #4]
 800a1e8:	6978      	ldr	r0, [r7, #20]
 800a1ea:	2306      	movs	r3, #6
 800a1ec:	9301      	str	r3, [sp, #4]
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	9300      	str	r3, [sp, #0]
 800a1f2:	23ff      	movs	r3, #255	; 0xff
 800a1f4:	f001 ff0c 	bl	800c010 <ip_output>
  pbuf_free(p);
 800a1f8:	697b      	ldr	r3, [r7, #20]
 800a1fa:	0018      	movs	r0, r3
 800a1fc:	f7fb fa52 	bl	80056a4 <pbuf_free>
 800a200:	e000      	b.n	800a204 <tcp_rst+0x238>
      return;
 800a202:	46c0      	nop			; (mov r8, r8)
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800a204:	46bd      	mov	sp, r7
 800a206:	b007      	add	sp, #28
 800a208:	bd90      	pop	{r4, r7, pc}
 800a20a:	46c0      	nop			; (mov r8, r8)
 800a20c:	00005014 	.word	0x00005014
 800a210:	20003158 	.word	0x20003158

0800a214 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800a214:	b580      	push	{r7, lr}
 800a216:	b084      	sub	sp, #16
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a220:	2b00      	cmp	r3, #0
 800a222:	d025      	beq.n	800a270 <tcp_rexmit_rto+0x5c>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a228:	60fb      	str	r3, [r7, #12]
 800a22a:	e002      	b.n	800a232 <tcp_rexmit_rto+0x1e>
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	60fb      	str	r3, [r7, #12]
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d1f8      	bne.n	800a22c <tcp_rexmit_rto+0x18>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	601a      	str	r2, [r3, #0]
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	2200      	movs	r2, #0
 800a24e:	671a      	str	r2, [r3, #112]	; 0x70
  /* last unsent hasn't changed, no need to reset unsent_oversize */

  /* increment number of retransmissions */
  ++pcb->nrtx;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	2246      	movs	r2, #70	; 0x46
 800a254:	5c9b      	ldrb	r3, [r3, r2]
 800a256:	3301      	adds	r3, #1
 800a258:	b2d9      	uxtb	r1, r3
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	2246      	movs	r2, #70	; 0x46
 800a25e:	5499      	strb	r1, [r3, r2]

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	2200      	movs	r2, #0
 800a264:	639a      	str	r2, [r3, #56]	; 0x38

  /* Do the actual retransmission */
  tcp_output(pcb);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	0018      	movs	r0, r3
 800a26a:	f7ff fbd1 	bl	8009a10 <tcp_output>
 800a26e:	e000      	b.n	800a272 <tcp_rexmit_rto+0x5e>
    return;
 800a270:	46c0      	nop			; (mov r8, r8)
}
 800a272:	46bd      	mov	sp, r7
 800a274:	b004      	add	sp, #16
 800a276:	bd80      	pop	{r7, pc}

0800a278 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 800a278:	b590      	push	{r4, r7, lr}
 800a27a:	b085      	sub	sp, #20
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a284:	2b00      	cmp	r3, #0
 800a286:	d04f      	beq.n	800a328 <tcp_rexmit+0xb0>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a28c:	60bb      	str	r3, [r7, #8]
  pcb->unacked = seg->next;
 800a28e:	68bb      	ldr	r3, [r7, #8]
 800a290:	681a      	ldr	r2, [r3, #0]
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	336c      	adds	r3, #108	; 0x6c
 800a29a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800a29c:	e002      	b.n	800a2a4 <tcp_rexmit+0x2c>
    TCP_SEQ_LT(ntohl((*cur_seg)->tcphdr->seqno), ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d022      	beq.n	800a2f2 <tcp_rexmit+0x7a>
    TCP_SEQ_LT(ntohl((*cur_seg)->tcphdr->seqno), ntohl(seg->tcphdr->seqno))) {
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	68db      	ldr	r3, [r3, #12]
 800a2b2:	791a      	ldrb	r2, [r3, #4]
 800a2b4:	7959      	ldrb	r1, [r3, #5]
 800a2b6:	0209      	lsls	r1, r1, #8
 800a2b8:	430a      	orrs	r2, r1
 800a2ba:	7999      	ldrb	r1, [r3, #6]
 800a2bc:	0409      	lsls	r1, r1, #16
 800a2be:	430a      	orrs	r2, r1
 800a2c0:	79db      	ldrb	r3, [r3, #7]
 800a2c2:	061b      	lsls	r3, r3, #24
 800a2c4:	4313      	orrs	r3, r2
 800a2c6:	0018      	movs	r0, r3
 800a2c8:	f7fa f9e3 	bl	8004692 <lwip_ntohl>
 800a2cc:	0004      	movs	r4, r0
 800a2ce:	68bb      	ldr	r3, [r7, #8]
 800a2d0:	68db      	ldr	r3, [r3, #12]
 800a2d2:	791a      	ldrb	r2, [r3, #4]
 800a2d4:	7959      	ldrb	r1, [r3, #5]
 800a2d6:	0209      	lsls	r1, r1, #8
 800a2d8:	430a      	orrs	r2, r1
 800a2da:	7999      	ldrb	r1, [r3, #6]
 800a2dc:	0409      	lsls	r1, r1, #16
 800a2de:	430a      	orrs	r2, r1
 800a2e0:	79db      	ldrb	r3, [r3, #7]
 800a2e2:	061b      	lsls	r3, r3, #24
 800a2e4:	4313      	orrs	r3, r2
 800a2e6:	0018      	movs	r0, r3
 800a2e8:	f7fa f9d3 	bl	8004692 <lwip_ntohl>
 800a2ec:	0003      	movs	r3, r0
 800a2ee:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800a2f0:	d4d5      	bmi.n	800a29e <tcp_rexmit+0x26>
  }
  seg->next = *cur_seg;
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	681a      	ldr	r2, [r3, #0]
 800a2f6:	68bb      	ldr	r3, [r7, #8]
 800a2f8:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	68ba      	ldr	r2, [r7, #8]
 800a2fe:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800a300:	68bb      	ldr	r3, [r7, #8]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d103      	bne.n	800a310 <tcp_rexmit+0x98>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	226a      	movs	r2, #106	; 0x6a
 800a30c:	2100      	movs	r1, #0
 800a30e:	5299      	strh	r1, [r3, r2]
  }
#endif /* TCP_OVERSIZE */

  ++pcb->nrtx;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	2246      	movs	r2, #70	; 0x46
 800a314:	5c9b      	ldrb	r3, [r3, r2]
 800a316:	3301      	adds	r3, #1
 800a318:	b2d9      	uxtb	r1, r3
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	2246      	movs	r2, #70	; 0x46
 800a31e:	5499      	strb	r1, [r3, r2]

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	2200      	movs	r2, #0
 800a324:	639a      	str	r2, [r3, #56]	; 0x38
 800a326:	e000      	b.n	800a32a <tcp_rexmit+0xb2>
    return;
 800a328:	46c0      	nop			; (mov r8, r8)

  /* Do the actual retransmission. */
  snmp_inc_tcpretranssegs();
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 800a32a:	46bd      	mov	sp, r7
 800a32c:	b005      	add	sp, #20
 800a32e:	bd90      	pop	{r4, r7, pc}

0800a330 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void 
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800a330:	b580      	push	{r7, lr}
 800a332:	b082      	sub	sp, #8
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d048      	beq.n	800a3d2 <tcp_rexmit_fast+0xa2>
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	7f9b      	ldrb	r3, [r3, #30]
 800a344:	001a      	movs	r2, r3
 800a346:	2304      	movs	r3, #4
 800a348:	4013      	ands	r3, r2
 800a34a:	d142      	bne.n	800a3d2 <tcp_rexmit_fast+0xa2>
    LWIP_DEBUGF(TCP_FR_DEBUG, 
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	0018      	movs	r0, r3
 800a350:	f7ff ff92 	bl	800a278 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    if (pcb->cwnd > pcb->snd_wnd) {
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	224c      	movs	r2, #76	; 0x4c
 800a358:	5a9a      	ldrh	r2, [r3, r2]
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	2160      	movs	r1, #96	; 0x60
 800a35e:	5a5b      	ldrh	r3, [r3, r1]
 800a360:	429a      	cmp	r2, r3
 800a362:	d908      	bls.n	800a376 <tcp_rexmit_fast+0x46>
      pcb->ssthresh = pcb->snd_wnd / 2;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	2260      	movs	r2, #96	; 0x60
 800a368:	5a9b      	ldrh	r3, [r3, r2]
 800a36a:	085b      	lsrs	r3, r3, #1
 800a36c:	b299      	uxth	r1, r3
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	224e      	movs	r2, #78	; 0x4e
 800a372:	5299      	strh	r1, [r3, r2]
 800a374:	e007      	b.n	800a386 <tcp_rexmit_fast+0x56>
    } else {
      pcb->ssthresh = pcb->cwnd / 2;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	224c      	movs	r2, #76	; 0x4c
 800a37a:	5a9b      	ldrh	r3, [r3, r2]
 800a37c:	085b      	lsrs	r3, r3, #1
 800a37e:	b299      	uxth	r1, r3
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	224e      	movs	r2, #78	; 0x4e
 800a384:	5299      	strh	r1, [r3, r2]
    }
    
    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < 2*pcb->mss) {
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	224e      	movs	r2, #78	; 0x4e
 800a38a:	5a9b      	ldrh	r3, [r3, r2]
 800a38c:	001a      	movs	r2, r3
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a392:	005b      	lsls	r3, r3, #1
 800a394:	429a      	cmp	r2, r3
 800a396:	da06      	bge.n	800a3a6 <tcp_rexmit_fast+0x76>
      LWIP_DEBUGF(TCP_FR_DEBUG, 
                  ("tcp_receive: The minimum value for ssthresh %"U16_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, 2*pcb->mss));
      pcb->ssthresh = 2*pcb->mss;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a39c:	18db      	adds	r3, r3, r3
 800a39e:	b299      	uxth	r1, r3
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	224e      	movs	r2, #78	; 0x4e
 800a3a4:	5299      	strh	r1, [r3, r2]
    }
    
    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	224e      	movs	r2, #78	; 0x4e
 800a3aa:	5a9a      	ldrh	r2, [r3, r2]
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a3b0:	1c19      	adds	r1, r3, #0
 800a3b2:	1c0b      	adds	r3, r1, #0
 800a3b4:	18db      	adds	r3, r3, r3
 800a3b6:	185b      	adds	r3, r3, r1
 800a3b8:	b29b      	uxth	r3, r3
 800a3ba:	18d3      	adds	r3, r2, r3
 800a3bc:	b299      	uxth	r1, r3
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	224c      	movs	r2, #76	; 0x4c
 800a3c2:	5299      	strh	r1, [r3, r2]
    pcb->flags |= TF_INFR;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	7f9b      	ldrb	r3, [r3, #30]
 800a3c8:	2204      	movs	r2, #4
 800a3ca:	4313      	orrs	r3, r2
 800a3cc:	b2da      	uxtb	r2, r3
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	779a      	strb	r2, [r3, #30]
  } 
}
 800a3d2:	46c0      	nop			; (mov r8, r8)
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	b002      	add	sp, #8
 800a3d8:	bd80      	pop	{r7, pc}
	...

0800a3dc <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
void
tcp_keepalive(struct tcp_pcb *pcb)
{
 800a3dc:	b590      	push	{r4, r7, lr}
 800a3de:	b087      	sub	sp, #28
 800a3e0:	af02      	add	r7, sp, #8
 800a3e2:	6078      	str	r0, [r7, #4]
                          ip4_addr3_16(&pcb->remote_ip), ip4_addr4_16(&pcb->remote_ip)));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n", 
                          tcp_ticks, pcb->tmr, pcb->keep_cnt_sent));
   
  p = tcp_output_alloc_header(pcb, 0, 0, htonl(pcb->snd_nxt - 1));
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a3e8:	3b01      	subs	r3, #1
 800a3ea:	0018      	movs	r0, r3
 800a3ec:	f7fa f938 	bl	8004660 <lwip_htonl>
 800a3f0:	0003      	movs	r3, r0
 800a3f2:	6878      	ldr	r0, [r7, #4]
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	2100      	movs	r1, #0
 800a3f8:	f7fe ff54 	bl	80092a4 <tcp_output_alloc_header>
 800a3fc:	0003      	movs	r3, r0
 800a3fe:	60fb      	str	r3, [r7, #12]
  if(p == NULL) {
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d03c      	beq.n	800a480 <tcp_keepalive+0xa4>
    LWIP_DEBUGF(TCP_DEBUG, 
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	685b      	ldr	r3, [r3, #4]
 800a40a:	60bb      	str	r3, [r7, #8]

#if CHECKSUM_GEN_TCP
  tcphdr->chksum = inet_chksum_pseudo(p, &pcb->local_ip, &pcb->remote_ip,
 800a40c:	6879      	ldr	r1, [r7, #4]
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	1d1a      	adds	r2, r3, #4
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	891b      	ldrh	r3, [r3, #8]
 800a416:	68f8      	ldr	r0, [r7, #12]
 800a418:	9300      	str	r3, [sp, #0]
 800a41a:	2306      	movs	r3, #6
 800a41c:	f001 f90d 	bl	800b63a <inet_chksum_pseudo>
 800a420:	0003      	movs	r3, r0
 800a422:	001a      	movs	r2, r3
 800a424:	68bb      	ldr	r3, [r7, #8]
 800a426:	21ff      	movs	r1, #255	; 0xff
 800a428:	4011      	ands	r1, r2
 800a42a:	000c      	movs	r4, r1
 800a42c:	7c19      	ldrb	r1, [r3, #16]
 800a42e:	2000      	movs	r0, #0
 800a430:	4001      	ands	r1, r0
 800a432:	1c08      	adds	r0, r1, #0
 800a434:	1c21      	adds	r1, r4, #0
 800a436:	4301      	orrs	r1, r0
 800a438:	7419      	strb	r1, [r3, #16]
 800a43a:	0a12      	lsrs	r2, r2, #8
 800a43c:	b290      	uxth	r0, r2
 800a43e:	7c5a      	ldrb	r2, [r3, #17]
 800a440:	2100      	movs	r1, #0
 800a442:	400a      	ands	r2, r1
 800a444:	1c11      	adds	r1, r2, #0
 800a446:	1c02      	adds	r2, r0, #0
 800a448:	430a      	orrs	r2, r1
 800a44a:	745a      	strb	r2, [r3, #17]
                                      IP_PROTO_TCP, p->tot_len);
#endif
  TCP_STATS_INC(tcp.xmit);
 800a44c:	4b0e      	ldr	r3, [pc, #56]	; (800a488 <tcp_keepalive+0xac>)
 800a44e:	2290      	movs	r2, #144	; 0x90
 800a450:	5a9b      	ldrh	r3, [r3, r2]
 800a452:	3301      	adds	r3, #1
 800a454:	b299      	uxth	r1, r3
 800a456:	4b0c      	ldr	r3, [pc, #48]	; (800a488 <tcp_keepalive+0xac>)
 800a458:	2290      	movs	r2, #144	; 0x90
 800a45a:	5299      	strh	r1, [r3, r2]
  /* Send output to IP */
#if LWIP_NETIF_HWADDRHINT
  ip_output_hinted(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP,
    &(pcb->addr_hint));
#else /* LWIP_NETIF_HWADDRHINT*/
  ip_output(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP);
 800a45c:	6879      	ldr	r1, [r7, #4]
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	1d1a      	adds	r2, r3, #4
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	7a9c      	ldrb	r4, [r3, #10]
 800a466:	68f8      	ldr	r0, [r7, #12]
 800a468:	2306      	movs	r3, #6
 800a46a:	9301      	str	r3, [sp, #4]
 800a46c:	2300      	movs	r3, #0
 800a46e:	9300      	str	r3, [sp, #0]
 800a470:	0023      	movs	r3, r4
 800a472:	f001 fdcd 	bl	800c010 <ip_output>
#endif /* LWIP_NETIF_HWADDRHINT*/

  pbuf_free(p);
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	0018      	movs	r0, r3
 800a47a:	f7fb f913 	bl	80056a4 <pbuf_free>
 800a47e:	e000      	b.n	800a482 <tcp_keepalive+0xa6>
    return;
 800a480:	46c0      	nop			; (mov r8, r8)

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F".\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt));
}
 800a482:	46bd      	mov	sp, r7
 800a484:	b005      	add	sp, #20
 800a486:	bd90      	pop	{r4, r7, pc}
 800a488:	20003158 	.word	0x20003158

0800a48c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
void
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800a48c:	b590      	push	{r4, r7, lr}
 800a48e:	b08b      	sub	sp, #44	; 0x2c
 800a490:	af02      	add	r7, sp, #8
 800a492:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, 
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n", 
               tcp_ticks, pcb->tmr, pcb->keep_cnt_sent));

  seg = pcb->unacked;
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a498:	61fb      	str	r3, [r7, #28]

  if(seg == NULL) {
 800a49a:	69fb      	ldr	r3, [r7, #28]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d102      	bne.n	800a4a6 <tcp_zero_window_probe+0x1a>
    seg = pcb->unsent;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a4a4:	61fb      	str	r3, [r7, #28]
  }
  if(seg == NULL) {
 800a4a6:	69fb      	ldr	r3, [r7, #28]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d100      	bne.n	800a4ae <tcp_zero_window_probe+0x22>
 800a4ac:	e0b4      	b.n	800a618 <tcp_zero_window_probe+0x18c>
    return;
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800a4ae:	69fb      	ldr	r3, [r7, #28]
 800a4b0:	68db      	ldr	r3, [r3, #12]
 800a4b2:	7b1a      	ldrb	r2, [r3, #12]
 800a4b4:	7b5b      	ldrb	r3, [r3, #13]
 800a4b6:	021b      	lsls	r3, r3, #8
 800a4b8:	4313      	orrs	r3, r2
 800a4ba:	b29b      	uxth	r3, r3
 800a4bc:	0018      	movs	r0, r3
 800a4be:	f7fa f8bf 	bl	8004640 <lwip_ntohs>
 800a4c2:	0003      	movs	r3, r0
 800a4c4:	001a      	movs	r2, r3
 800a4c6:	2301      	movs	r3, #1
 800a4c8:	4013      	ands	r3, r2
 800a4ca:	d005      	beq.n	800a4d8 <tcp_zero_window_probe+0x4c>
 800a4cc:	69fb      	ldr	r3, [r7, #28]
 800a4ce:	891b      	ldrh	r3, [r3, #8]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d101      	bne.n	800a4d8 <tcp_zero_window_probe+0x4c>
 800a4d4:	2201      	movs	r2, #1
 800a4d6:	e000      	b.n	800a4da <tcp_zero_window_probe+0x4e>
 800a4d8:	2200      	movs	r2, #0
 800a4da:	211b      	movs	r1, #27
 800a4dc:	187b      	adds	r3, r7, r1
 800a4de:	701a      	strb	r2, [r3, #0]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800a4e0:	187b      	adds	r3, r7, r1
 800a4e2:	781b      	ldrb	r3, [r3, #0]
 800a4e4:	425a      	negs	r2, r3
 800a4e6:	4153      	adcs	r3, r2
 800a4e8:	b2da      	uxtb	r2, r3
 800a4ea:	2018      	movs	r0, #24
 800a4ec:	183b      	adds	r3, r7, r0
 800a4ee:	801a      	strh	r2, [r3, #0]

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 800a4f0:	69fb      	ldr	r3, [r7, #28]
 800a4f2:	68db      	ldr	r3, [r3, #12]
 800a4f4:	791a      	ldrb	r2, [r3, #4]
 800a4f6:	7959      	ldrb	r1, [r3, #5]
 800a4f8:	0209      	lsls	r1, r1, #8
 800a4fa:	430a      	orrs	r2, r1
 800a4fc:	7999      	ldrb	r1, [r3, #6]
 800a4fe:	0409      	lsls	r1, r1, #16
 800a500:	430a      	orrs	r2, r1
 800a502:	79db      	ldrb	r3, [r3, #7]
 800a504:	061b      	lsls	r3, r3, #24
 800a506:	4313      	orrs	r3, r2
 800a508:	0019      	movs	r1, r3
 800a50a:	183b      	adds	r3, r7, r0
 800a50c:	881a      	ldrh	r2, [r3, #0]
 800a50e:	6878      	ldr	r0, [r7, #4]
 800a510:	000b      	movs	r3, r1
 800a512:	2100      	movs	r1, #0
 800a514:	f7fe fec6 	bl	80092a4 <tcp_output_alloc_header>
 800a518:	0003      	movs	r3, r0
 800a51a:	617b      	str	r3, [r7, #20]
  if(p == NULL) {
 800a51c:	697b      	ldr	r3, [r7, #20]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d100      	bne.n	800a524 <tcp_zero_window_probe+0x98>
 800a522:	e07b      	b.n	800a61c <tcp_zero_window_probe+0x190>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800a524:	697b      	ldr	r3, [r7, #20]
 800a526:	685b      	ldr	r3, [r3, #4]
 800a528:	613b      	str	r3, [r7, #16]

  if (is_fin) {
 800a52a:	231b      	movs	r3, #27
 800a52c:	18fb      	adds	r3, r7, r3
 800a52e:	781b      	ldrb	r3, [r3, #0]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d026      	beq.n	800a582 <tcp_zero_window_probe+0xf6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800a534:	693b      	ldr	r3, [r7, #16]
 800a536:	7b1a      	ldrb	r2, [r3, #12]
 800a538:	7b5b      	ldrb	r3, [r3, #13]
 800a53a:	021b      	lsls	r3, r3, #8
 800a53c:	4313      	orrs	r3, r2
 800a53e:	b29b      	uxth	r3, r3
 800a540:	b21b      	sxth	r3, r3
 800a542:	4a38      	ldr	r2, [pc, #224]	; (800a624 <tcp_zero_window_probe+0x198>)
 800a544:	4013      	ands	r3, r2
 800a546:	b21c      	sxth	r4, r3
 800a548:	2011      	movs	r0, #17
 800a54a:	f7fa f863 	bl	8004614 <lwip_htons>
 800a54e:	0003      	movs	r3, r0
 800a550:	b21b      	sxth	r3, r3
 800a552:	4323      	orrs	r3, r4
 800a554:	b21b      	sxth	r3, r3
 800a556:	b29a      	uxth	r2, r3
 800a558:	693b      	ldr	r3, [r7, #16]
 800a55a:	21ff      	movs	r1, #255	; 0xff
 800a55c:	4011      	ands	r1, r2
 800a55e:	000c      	movs	r4, r1
 800a560:	7b19      	ldrb	r1, [r3, #12]
 800a562:	2000      	movs	r0, #0
 800a564:	4001      	ands	r1, r0
 800a566:	1c08      	adds	r0, r1, #0
 800a568:	1c21      	adds	r1, r4, #0
 800a56a:	4301      	orrs	r1, r0
 800a56c:	7319      	strb	r1, [r3, #12]
 800a56e:	0a12      	lsrs	r2, r2, #8
 800a570:	b290      	uxth	r0, r2
 800a572:	7b5a      	ldrb	r2, [r3, #13]
 800a574:	2100      	movs	r1, #0
 800a576:	400a      	ands	r2, r1
 800a578:	1c11      	adds	r1, r2, #0
 800a57a:	1c02      	adds	r2, r0, #0
 800a57c:	430a      	orrs	r2, r1
 800a57e:	735a      	strb	r2, [r3, #13]
 800a580:	e010      	b.n	800a5a4 <tcp_zero_window_probe+0x118>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800a582:	697b      	ldr	r3, [r7, #20]
 800a584:	685b      	ldr	r3, [r3, #4]
 800a586:	3314      	adds	r3, #20
 800a588:	60fb      	str	r3, [r7, #12]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800a58a:	69fb      	ldr	r3, [r7, #28]
 800a58c:	6858      	ldr	r0, [r3, #4]
 800a58e:	69fb      	ldr	r3, [r7, #28]
 800a590:	685b      	ldr	r3, [r3, #4]
 800a592:	891a      	ldrh	r2, [r3, #8]
 800a594:	69fb      	ldr	r3, [r7, #28]
 800a596:	891b      	ldrh	r3, [r3, #8]
 800a598:	1ad3      	subs	r3, r2, r3
 800a59a:	b29b      	uxth	r3, r3
 800a59c:	68f9      	ldr	r1, [r7, #12]
 800a59e:	2201      	movs	r2, #1
 800a5a0:	f7fb fa0c 	bl	80059bc <pbuf_copy_partial>
  }

#if CHECKSUM_GEN_TCP
  tcphdr->chksum = inet_chksum_pseudo(p, &pcb->local_ip, &pcb->remote_ip,
 800a5a4:	6879      	ldr	r1, [r7, #4]
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	1d1a      	adds	r2, r3, #4
 800a5aa:	697b      	ldr	r3, [r7, #20]
 800a5ac:	891b      	ldrh	r3, [r3, #8]
 800a5ae:	6978      	ldr	r0, [r7, #20]
 800a5b0:	9300      	str	r3, [sp, #0]
 800a5b2:	2306      	movs	r3, #6
 800a5b4:	f001 f841 	bl	800b63a <inet_chksum_pseudo>
 800a5b8:	0003      	movs	r3, r0
 800a5ba:	001a      	movs	r2, r3
 800a5bc:	693b      	ldr	r3, [r7, #16]
 800a5be:	21ff      	movs	r1, #255	; 0xff
 800a5c0:	4011      	ands	r1, r2
 800a5c2:	000c      	movs	r4, r1
 800a5c4:	7c19      	ldrb	r1, [r3, #16]
 800a5c6:	2000      	movs	r0, #0
 800a5c8:	4001      	ands	r1, r0
 800a5ca:	1c08      	adds	r0, r1, #0
 800a5cc:	1c21      	adds	r1, r4, #0
 800a5ce:	4301      	orrs	r1, r0
 800a5d0:	7419      	strb	r1, [r3, #16]
 800a5d2:	0a12      	lsrs	r2, r2, #8
 800a5d4:	b290      	uxth	r0, r2
 800a5d6:	7c5a      	ldrb	r2, [r3, #17]
 800a5d8:	2100      	movs	r1, #0
 800a5da:	400a      	ands	r2, r1
 800a5dc:	1c11      	adds	r1, r2, #0
 800a5de:	1c02      	adds	r2, r0, #0
 800a5e0:	430a      	orrs	r2, r1
 800a5e2:	745a      	strb	r2, [r3, #17]
                                      IP_PROTO_TCP, p->tot_len);
#endif
  TCP_STATS_INC(tcp.xmit);
 800a5e4:	4b10      	ldr	r3, [pc, #64]	; (800a628 <tcp_zero_window_probe+0x19c>)
 800a5e6:	2290      	movs	r2, #144	; 0x90
 800a5e8:	5a9b      	ldrh	r3, [r3, r2]
 800a5ea:	3301      	adds	r3, #1
 800a5ec:	b299      	uxth	r1, r3
 800a5ee:	4b0e      	ldr	r3, [pc, #56]	; (800a628 <tcp_zero_window_probe+0x19c>)
 800a5f0:	2290      	movs	r2, #144	; 0x90
 800a5f2:	5299      	strh	r1, [r3, r2]
  /* Send output to IP */
#if LWIP_NETIF_HWADDRHINT
  ip_output_hinted(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP,
    &(pcb->addr_hint));
#else /* LWIP_NETIF_HWADDRHINT*/
  ip_output(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP);
 800a5f4:	6879      	ldr	r1, [r7, #4]
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	1d1a      	adds	r2, r3, #4
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	7a9c      	ldrb	r4, [r3, #10]
 800a5fe:	6978      	ldr	r0, [r7, #20]
 800a600:	2306      	movs	r3, #6
 800a602:	9301      	str	r3, [sp, #4]
 800a604:	2300      	movs	r3, #0
 800a606:	9300      	str	r3, [sp, #0]
 800a608:	0023      	movs	r3, r4
 800a60a:	f001 fd01 	bl	800c010 <ip_output>
#endif /* LWIP_NETIF_HWADDRHINT*/

  pbuf_free(p);
 800a60e:	697b      	ldr	r3, [r7, #20]
 800a610:	0018      	movs	r0, r3
 800a612:	f7fb f847 	bl	80056a4 <pbuf_free>
 800a616:	e002      	b.n	800a61e <tcp_zero_window_probe+0x192>
    return;
 800a618:	46c0      	nop			; (mov r8, r8)
 800a61a:	e000      	b.n	800a61e <tcp_zero_window_probe+0x192>
    return;
 800a61c:	46c0      	nop			; (mov r8, r8)

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F".\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt));
}
 800a61e:	46bd      	mov	sp, r7
 800a620:	b009      	add	sp, #36	; 0x24
 800a622:	bd90      	pop	{r4, r7, pc}
 800a624:	ffffc0ff 	.word	0xffffc0ff
 800a628:	20003158 	.word	0x20003158

0800a62c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b082      	sub	sp, #8
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800a634:	f7fb fabe 	bl	8005bb4 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800a638:	4b0a      	ldr	r3, [pc, #40]	; (800a664 <tcpip_tcp_timer+0x38>)
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d103      	bne.n	800a648 <tcpip_tcp_timer+0x1c>
 800a640:	4b09      	ldr	r3, [pc, #36]	; (800a668 <tcpip_tcp_timer+0x3c>)
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	2b00      	cmp	r3, #0
 800a646:	d006      	beq.n	800a656 <tcpip_tcp_timer+0x2a>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800a648:	4b08      	ldr	r3, [pc, #32]	; (800a66c <tcpip_tcp_timer+0x40>)
 800a64a:	2200      	movs	r2, #0
 800a64c:	0019      	movs	r1, r3
 800a64e:	20fa      	movs	r0, #250	; 0xfa
 800a650:	f000 f87a 	bl	800a748 <sys_timeout>
 800a654:	e002      	b.n	800a65c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800a656:	4b06      	ldr	r3, [pc, #24]	; (800a670 <tcpip_tcp_timer+0x44>)
 800a658:	2200      	movs	r2, #0
 800a65a:	601a      	str	r2, [r3, #0]
  }
}
 800a65c:	46c0      	nop			; (mov r8, r8)
 800a65e:	46bd      	mov	sp, r7
 800a660:	b002      	add	sp, #8
 800a662:	bd80      	pop	{r7, pc}
 800a664:	20003274 	.word	0x20003274
 800a668:	20003288 	.word	0x20003288
 800a66c:	0800a62d 	.word	0x0800a62d
 800a670:	200022b0 	.word	0x200022b0

0800a674 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800a674:	b580      	push	{r7, lr}
 800a676:	af00      	add	r7, sp, #0
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800a678:	4b0b      	ldr	r3, [pc, #44]	; (800a6a8 <tcp_timer_needed+0x34>)
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d110      	bne.n	800a6a2 <tcp_timer_needed+0x2e>
 800a680:	4b0a      	ldr	r3, [pc, #40]	; (800a6ac <tcp_timer_needed+0x38>)
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	2b00      	cmp	r3, #0
 800a686:	d103      	bne.n	800a690 <tcp_timer_needed+0x1c>
 800a688:	4b09      	ldr	r3, [pc, #36]	; (800a6b0 <tcp_timer_needed+0x3c>)
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d008      	beq.n	800a6a2 <tcp_timer_needed+0x2e>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800a690:	4b05      	ldr	r3, [pc, #20]	; (800a6a8 <tcp_timer_needed+0x34>)
 800a692:	2201      	movs	r2, #1
 800a694:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800a696:	4b07      	ldr	r3, [pc, #28]	; (800a6b4 <tcp_timer_needed+0x40>)
 800a698:	2200      	movs	r2, #0
 800a69a:	0019      	movs	r1, r3
 800a69c:	20fa      	movs	r0, #250	; 0xfa
 800a69e:	f000 f853 	bl	800a748 <sys_timeout>
  }
}
 800a6a2:	46c0      	nop			; (mov r8, r8)
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	bd80      	pop	{r7, pc}
 800a6a8:	200022b0 	.word	0x200022b0
 800a6ac:	20003274 	.word	0x20003274
 800a6b0:	20003288 	.word	0x20003288
 800a6b4:	0800a62d 	.word	0x0800a62d

0800a6b8 <ip_reass_timer>:
 *
 * @param arg unused argument
 */
static void
ip_reass_timer(void *arg)
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b082      	sub	sp, #8
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: ip_reass_tmr()\n"));
  ip_reass_tmr();
 800a6c0:	f001 fd14 	bl	800c0ec <ip_reass_tmr>
  sys_timeout(IP_TMR_INTERVAL, ip_reass_timer, NULL);
 800a6c4:	4905      	ldr	r1, [pc, #20]	; (800a6dc <ip_reass_timer+0x24>)
 800a6c6:	23fa      	movs	r3, #250	; 0xfa
 800a6c8:	009b      	lsls	r3, r3, #2
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	0018      	movs	r0, r3
 800a6ce:	f000 f83b 	bl	800a748 <sys_timeout>
}
 800a6d2:	46c0      	nop			; (mov r8, r8)
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	b002      	add	sp, #8
 800a6d8:	bd80      	pop	{r7, pc}
 800a6da:	46c0      	nop			; (mov r8, r8)
 800a6dc:	0800a6b9 	.word	0x0800a6b9

0800a6e0 <arp_timer>:
 *
 * @param arg unused argument
 */
static void
arp_timer(void *arg)
{
 800a6e0:	b580      	push	{r7, lr}
 800a6e2:	b082      	sub	sp, #8
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: etharp_tmr()\n"));
  etharp_tmr();
 800a6e8:	f002 fc58 	bl	800cf9c <etharp_tmr>
  sys_timeout(ARP_TMR_INTERVAL, arp_timer, NULL);
 800a6ec:	4b04      	ldr	r3, [pc, #16]	; (800a700 <arp_timer+0x20>)
 800a6ee:	4805      	ldr	r0, [pc, #20]	; (800a704 <arp_timer+0x24>)
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	0019      	movs	r1, r3
 800a6f4:	f000 f828 	bl	800a748 <sys_timeout>
}
 800a6f8:	46c0      	nop			; (mov r8, r8)
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	b002      	add	sp, #8
 800a6fe:	bd80      	pop	{r7, pc}
 800a700:	0800a6e1 	.word	0x0800a6e1
 800a704:	00001388 	.word	0x00001388

0800a708 <sys_timeouts_init>:
}
#endif /* LWIP_DNS */

/** Initialize this module */
void sys_timeouts_init(void)
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	af00      	add	r7, sp, #0
#if IP_REASSEMBLY
  sys_timeout(IP_TMR_INTERVAL, ip_reass_timer, NULL);
 800a70c:	490a      	ldr	r1, [pc, #40]	; (800a738 <sys_timeouts_init+0x30>)
 800a70e:	23fa      	movs	r3, #250	; 0xfa
 800a710:	009b      	lsls	r3, r3, #2
 800a712:	2200      	movs	r2, #0
 800a714:	0018      	movs	r0, r3
 800a716:	f000 f817 	bl	800a748 <sys_timeout>
#endif /* IP_REASSEMBLY */
#if LWIP_ARP
  sys_timeout(ARP_TMR_INTERVAL, arp_timer, NULL);
 800a71a:	4b08      	ldr	r3, [pc, #32]	; (800a73c <sys_timeouts_init+0x34>)
 800a71c:	4808      	ldr	r0, [pc, #32]	; (800a740 <sys_timeouts_init+0x38>)
 800a71e:	2200      	movs	r2, #0
 800a720:	0019      	movs	r1, r3
 800a722:	f000 f811 	bl	800a748 <sys_timeout>
  sys_timeout(DNS_TMR_INTERVAL, dns_timer, NULL);
#endif /* LWIP_DNS */

#if NO_SYS
  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
 800a726:	f003 fc5b 	bl	800dfe0 <sys_now>
 800a72a:	0002      	movs	r2, r0
 800a72c:	4b05      	ldr	r3, [pc, #20]	; (800a744 <sys_timeouts_init+0x3c>)
 800a72e:	601a      	str	r2, [r3, #0]
#endif
}
 800a730:	46c0      	nop			; (mov r8, r8)
 800a732:	46bd      	mov	sp, r7
 800a734:	bd80      	pop	{r7, pc}
 800a736:	46c0      	nop			; (mov r8, r8)
 800a738:	0800a6b9 	.word	0x0800a6b9
 800a73c:	0800a6e1 	.word	0x0800a6e1
 800a740:	00001388 	.word	0x00001388
 800a744:	200022ac 	.word	0x200022ac

0800a748 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b086      	sub	sp, #24
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	60f8      	str	r0, [r7, #12]
 800a750:	60b9      	str	r1, [r7, #8]
 800a752:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800a754:	2007      	movs	r0, #7
 800a756:	f7fa fb5d 	bl	8004e14 <memp_malloc>
 800a75a:	0003      	movs	r3, r0
 800a75c:	613b      	str	r3, [r7, #16]
  if (timeout == NULL) {
 800a75e:	693b      	ldr	r3, [r7, #16]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d05b      	beq.n	800a81c <sys_timeout+0xd4>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
    return;
  }
  timeout->next = NULL;
 800a764:	693b      	ldr	r3, [r7, #16]
 800a766:	2200      	movs	r2, #0
 800a768:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800a76a:	693b      	ldr	r3, [r7, #16]
 800a76c:	68ba      	ldr	r2, [r7, #8]
 800a76e:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800a770:	693b      	ldr	r3, [r7, #16]
 800a772:	687a      	ldr	r2, [r7, #4]
 800a774:	60da      	str	r2, [r3, #12]
  timeout->time = msecs;
 800a776:	693b      	ldr	r3, [r7, #16]
 800a778:	68fa      	ldr	r2, [r7, #12]
 800a77a:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800a77c:	4b29      	ldr	r3, [pc, #164]	; (800a824 <sys_timeout+0xdc>)
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d103      	bne.n	800a78c <sys_timeout+0x44>
    next_timeout = timeout;
 800a784:	4b27      	ldr	r3, [pc, #156]	; (800a824 <sys_timeout+0xdc>)
 800a786:	693a      	ldr	r2, [r7, #16]
 800a788:	601a      	str	r2, [r3, #0]
    return;
 800a78a:	e048      	b.n	800a81e <sys_timeout+0xd6>
  }

  if (next_timeout->time > msecs) {
 800a78c:	4b25      	ldr	r3, [pc, #148]	; (800a824 <sys_timeout+0xdc>)
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	685b      	ldr	r3, [r3, #4]
 800a792:	68fa      	ldr	r2, [r7, #12]
 800a794:	429a      	cmp	r2, r3
 800a796:	d20f      	bcs.n	800a7b8 <sys_timeout+0x70>
    next_timeout->time -= msecs;
 800a798:	4b22      	ldr	r3, [pc, #136]	; (800a824 <sys_timeout+0xdc>)
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	6859      	ldr	r1, [r3, #4]
 800a79e:	4b21      	ldr	r3, [pc, #132]	; (800a824 <sys_timeout+0xdc>)
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	68fa      	ldr	r2, [r7, #12]
 800a7a4:	1a8a      	subs	r2, r1, r2
 800a7a6:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
 800a7a8:	4b1e      	ldr	r3, [pc, #120]	; (800a824 <sys_timeout+0xdc>)
 800a7aa:	681a      	ldr	r2, [r3, #0]
 800a7ac:	693b      	ldr	r3, [r7, #16]
 800a7ae:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800a7b0:	4b1c      	ldr	r3, [pc, #112]	; (800a824 <sys_timeout+0xdc>)
 800a7b2:	693a      	ldr	r2, [r7, #16]
 800a7b4:	601a      	str	r2, [r3, #0]
 800a7b6:	e032      	b.n	800a81e <sys_timeout+0xd6>
  } else {
    for(t = next_timeout; t != NULL; t = t->next) {
 800a7b8:	4b1a      	ldr	r3, [pc, #104]	; (800a824 <sys_timeout+0xdc>)
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	617b      	str	r3, [r7, #20]
 800a7be:	e029      	b.n	800a814 <sys_timeout+0xcc>
      timeout->time -= t->time;
 800a7c0:	693b      	ldr	r3, [r7, #16]
 800a7c2:	685a      	ldr	r2, [r3, #4]
 800a7c4:	697b      	ldr	r3, [r7, #20]
 800a7c6:	685b      	ldr	r3, [r3, #4]
 800a7c8:	1ad2      	subs	r2, r2, r3
 800a7ca:	693b      	ldr	r3, [r7, #16]
 800a7cc:	605a      	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 800a7ce:	697b      	ldr	r3, [r7, #20]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d006      	beq.n	800a7e4 <sys_timeout+0x9c>
 800a7d6:	697b      	ldr	r3, [r7, #20]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	685a      	ldr	r2, [r3, #4]
 800a7dc:	693b      	ldr	r3, [r7, #16]
 800a7de:	685b      	ldr	r3, [r3, #4]
 800a7e0:	429a      	cmp	r2, r3
 800a7e2:	d914      	bls.n	800a80e <sys_timeout+0xc6>
        if (t->next != NULL) {
 800a7e4:	697b      	ldr	r3, [r7, #20]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d008      	beq.n	800a7fe <sys_timeout+0xb6>
          t->next->time -= timeout->time;
 800a7ec:	697b      	ldr	r3, [r7, #20]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	6859      	ldr	r1, [r3, #4]
 800a7f2:	693b      	ldr	r3, [r7, #16]
 800a7f4:	685a      	ldr	r2, [r3, #4]
 800a7f6:	697b      	ldr	r3, [r7, #20]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	1a8a      	subs	r2, r1, r2
 800a7fc:	605a      	str	r2, [r3, #4]
        }
        timeout->next = t->next;
 800a7fe:	697b      	ldr	r3, [r7, #20]
 800a800:	681a      	ldr	r2, [r3, #0]
 800a802:	693b      	ldr	r3, [r7, #16]
 800a804:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800a806:	697b      	ldr	r3, [r7, #20]
 800a808:	693a      	ldr	r2, [r7, #16]
 800a80a:	601a      	str	r2, [r3, #0]
        break;
 800a80c:	e007      	b.n	800a81e <sys_timeout+0xd6>
    for(t = next_timeout; t != NULL; t = t->next) {
 800a80e:	697b      	ldr	r3, [r7, #20]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	617b      	str	r3, [r7, #20]
 800a814:	697b      	ldr	r3, [r7, #20]
 800a816:	2b00      	cmp	r3, #0
 800a818:	d1d2      	bne.n	800a7c0 <sys_timeout+0x78>
 800a81a:	e000      	b.n	800a81e <sys_timeout+0xd6>
    return;
 800a81c:	46c0      	nop			; (mov r8, r8)
      }
    }
  }
}
 800a81e:	46bd      	mov	sp, r7
 800a820:	b006      	add	sp, #24
 800a822:	bd80      	pop	{r7, pc}
 800a824:	200022a8 	.word	0x200022a8

0800a828 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800a828:	b580      	push	{r7, lr}
 800a82a:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 800a82c:	46c0      	nop			; (mov r8, r8)
 800a82e:	46bd      	mov	sp, r7
 800a830:	bd80      	pop	{r7, pc}
	...

0800a834 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800a834:	b580      	push	{r7, lr}
 800a836:	b082      	sub	sp, #8
 800a838:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800a83a:	1dbb      	adds	r3, r7, #6
 800a83c:	2200      	movs	r2, #0
 800a83e:	801a      	strh	r2, [r3, #0]
  struct udp_pcb *pcb;
  
again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800a840:	4b16      	ldr	r3, [pc, #88]	; (800a89c <udp_new_port+0x68>)
 800a842:	881b      	ldrh	r3, [r3, #0]
 800a844:	1c5a      	adds	r2, r3, #1
 800a846:	b291      	uxth	r1, r2
 800a848:	4a14      	ldr	r2, [pc, #80]	; (800a89c <udp_new_port+0x68>)
 800a84a:	8011      	strh	r1, [r2, #0]
 800a84c:	4a14      	ldr	r2, [pc, #80]	; (800a8a0 <udp_new_port+0x6c>)
 800a84e:	4293      	cmp	r3, r2
 800a850:	d102      	bne.n	800a858 <udp_new_port+0x24>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800a852:	4b12      	ldr	r3, [pc, #72]	; (800a89c <udp_new_port+0x68>)
 800a854:	4a13      	ldr	r2, [pc, #76]	; (800a8a4 <udp_new_port+0x70>)
 800a856:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for(pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800a858:	4b13      	ldr	r3, [pc, #76]	; (800a8a8 <udp_new_port+0x74>)
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	603b      	str	r3, [r7, #0]
 800a85e:	e014      	b.n	800a88a <udp_new_port+0x56>
    if (pcb->local_port == udp_port) {
 800a860:	683b      	ldr	r3, [r7, #0]
 800a862:	8a5a      	ldrh	r2, [r3, #18]
 800a864:	4b0d      	ldr	r3, [pc, #52]	; (800a89c <udp_new_port+0x68>)
 800a866:	881b      	ldrh	r3, [r3, #0]
 800a868:	429a      	cmp	r2, r3
 800a86a:	d10b      	bne.n	800a884 <udp_new_port+0x50>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800a86c:	1dbb      	adds	r3, r7, #6
 800a86e:	1dba      	adds	r2, r7, #6
 800a870:	8812      	ldrh	r2, [r2, #0]
 800a872:	3201      	adds	r2, #1
 800a874:	801a      	strh	r2, [r3, #0]
 800a876:	1dbb      	adds	r3, r7, #6
 800a878:	881b      	ldrh	r3, [r3, #0]
 800a87a:	4a0c      	ldr	r2, [pc, #48]	; (800a8ac <udp_new_port+0x78>)
 800a87c:	4293      	cmp	r3, r2
 800a87e:	d9df      	bls.n	800a840 <udp_new_port+0xc>
        return 0;
 800a880:	2300      	movs	r3, #0
 800a882:	e007      	b.n	800a894 <udp_new_port+0x60>
  for(pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800a884:	683b      	ldr	r3, [r7, #0]
 800a886:	68db      	ldr	r3, [r3, #12]
 800a888:	603b      	str	r3, [r7, #0]
 800a88a:	683b      	ldr	r3, [r7, #0]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d1e7      	bne.n	800a860 <udp_new_port+0x2c>
      }
      goto again;
    }
  }
  return udp_port;
 800a890:	4b02      	ldr	r3, [pc, #8]	; (800a89c <udp_new_port+0x68>)
 800a892:	881b      	ldrh	r3, [r3, #0]
  if (ipcb != NULL) {
    return 0;
  }
  return udp_port;
#endif
}
 800a894:	0018      	movs	r0, r3
 800a896:	46bd      	mov	sp, r7
 800a898:	b002      	add	sp, #8
 800a89a:	bd80      	pop	{r7, pc}
 800a89c:	20000014 	.word	0x20000014
 800a8a0:	0000ffff 	.word	0x0000ffff
 800a8a4:	ffffc000 	.word	0xffffc000
 800a8a8:	20003290 	.word	0x20003290
 800a8ac:	00003fff 	.word	0x00003fff

0800a8b0 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800a8b0:	b5b0      	push	{r4, r5, r7, lr}
 800a8b2:	b08c      	sub	sp, #48	; 0x30
 800a8b4:	af02      	add	r7, sp, #8
 800a8b6:	6078      	str	r0, [r7, #4]
 800a8b8:	6039      	str	r1, [r7, #0]
  u8_t local_match;
  u8_t broadcast;

  PERF_START;

  UDP_STATS_INC(udp.recv);
 800a8ba:	4bc4      	ldr	r3, [pc, #784]	; (800abcc <udp_input+0x31c>)
 800a8bc:	227a      	movs	r2, #122	; 0x7a
 800a8be:	5a9b      	ldrh	r3, [r3, r2]
 800a8c0:	3301      	adds	r3, #1
 800a8c2:	b299      	uxth	r1, r3
 800a8c4:	4bc1      	ldr	r3, [pc, #772]	; (800abcc <udp_input+0x31c>)
 800a8c6:	227a      	movs	r2, #122	; 0x7a
 800a8c8:	5299      	strh	r1, [r3, r2]

  iphdr = (struct ip_hdr *)p->payload;
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	685b      	ldr	r3, [r3, #4]
 800a8ce:	617b      	str	r3, [r7, #20]

  /* Check minimum length (IP header + UDP header)
   * and move payload pointer to UDP header */
  if (p->tot_len < (IPH_HL(iphdr) * 4 + UDP_HLEN) || pbuf_header(p, -(s16_t)(IPH_HL(iphdr) * 4))) {
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	891b      	ldrh	r3, [r3, #8]
 800a8d4:	001a      	movs	r2, r3
 800a8d6:	697b      	ldr	r3, [r7, #20]
 800a8d8:	781b      	ldrb	r3, [r3, #0]
 800a8da:	0019      	movs	r1, r3
 800a8dc:	230f      	movs	r3, #15
 800a8de:	400b      	ands	r3, r1
 800a8e0:	3302      	adds	r3, #2
 800a8e2:	009b      	lsls	r3, r3, #2
 800a8e4:	429a      	cmp	r2, r3
 800a8e6:	db11      	blt.n	800a90c <udp_input+0x5c>
 800a8e8:	697b      	ldr	r3, [r7, #20]
 800a8ea:	781b      	ldrb	r3, [r3, #0]
 800a8ec:	b29b      	uxth	r3, r3
 800a8ee:	220f      	movs	r2, #15
 800a8f0:	4013      	ands	r3, r2
 800a8f2:	b29b      	uxth	r3, r3
 800a8f4:	009b      	lsls	r3, r3, #2
 800a8f6:	b29b      	uxth	r3, r3
 800a8f8:	425b      	negs	r3, r3
 800a8fa:	b29b      	uxth	r3, r3
 800a8fc:	b21a      	sxth	r2, r3
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	0011      	movs	r1, r2
 800a902:	0018      	movs	r0, r3
 800a904:	f7fa fe47 	bl	8005596 <pbuf_header>
 800a908:	1e03      	subs	r3, r0, #0
 800a90a:	d014      	beq.n	800a936 <udp_input+0x86>
    /* drop short packets */
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
 800a90c:	4baf      	ldr	r3, [pc, #700]	; (800abcc <udp_input+0x31c>)
 800a90e:	2282      	movs	r2, #130	; 0x82
 800a910:	5a9b      	ldrh	r3, [r3, r2]
 800a912:	3301      	adds	r3, #1
 800a914:	b299      	uxth	r1, r3
 800a916:	4bad      	ldr	r3, [pc, #692]	; (800abcc <udp_input+0x31c>)
 800a918:	2282      	movs	r2, #130	; 0x82
 800a91a:	5299      	strh	r1, [r3, r2]
    UDP_STATS_INC(udp.drop);
 800a91c:	4bab      	ldr	r3, [pc, #684]	; (800abcc <udp_input+0x31c>)
 800a91e:	227e      	movs	r2, #126	; 0x7e
 800a920:	5a9b      	ldrh	r3, [r3, r2]
 800a922:	3301      	adds	r3, #1
 800a924:	b299      	uxth	r1, r3
 800a926:	4ba9      	ldr	r3, [pc, #676]	; (800abcc <udp_input+0x31c>)
 800a928:	227e      	movs	r2, #126	; 0x7e
 800a92a:	5299      	strh	r1, [r3, r2]
    snmp_inc_udpinerrors();
    pbuf_free(p);
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	0018      	movs	r0, r3
 800a930:	f7fa feb8 	bl	80056a4 <pbuf_free>
    goto end;
 800a934:	e156      	b.n	800abe4 <udp_input+0x334>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	685b      	ldr	r3, [r3, #4]
 800a93a:	613b      	str	r3, [r7, #16]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(&current_iphdr_dest, inp);
 800a93c:	4ba4      	ldr	r3, [pc, #656]	; (800abd0 <udp_input+0x320>)
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	220f      	movs	r2, #15
 800a942:	18bc      	adds	r4, r7, r2
 800a944:	683a      	ldr	r2, [r7, #0]
 800a946:	0011      	movs	r1, r2
 800a948:	0018      	movs	r0, r3
 800a94a:	f001 fb97 	bl	800c07c <ip4_addr_isbroadcast>
 800a94e:	0003      	movs	r3, r0
 800a950:	7023      	strb	r3, [r4, #0]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = ntohs(udphdr->src);
 800a952:	693b      	ldr	r3, [r7, #16]
 800a954:	781a      	ldrb	r2, [r3, #0]
 800a956:	785b      	ldrb	r3, [r3, #1]
 800a958:	021b      	lsls	r3, r3, #8
 800a95a:	4313      	orrs	r3, r2
 800a95c:	b29b      	uxth	r3, r3
 800a95e:	220c      	movs	r2, #12
 800a960:	18bc      	adds	r4, r7, r2
 800a962:	0018      	movs	r0, r3
 800a964:	f7f9 fe6c 	bl	8004640 <lwip_ntohs>
 800a968:	0003      	movs	r3, r0
 800a96a:	8023      	strh	r3, [r4, #0]
  dest = ntohs(udphdr->dest);
 800a96c:	693b      	ldr	r3, [r7, #16]
 800a96e:	789a      	ldrb	r2, [r3, #2]
 800a970:	78db      	ldrb	r3, [r3, #3]
 800a972:	021b      	lsls	r3, r3, #8
 800a974:	4313      	orrs	r3, r2
 800a976:	b29b      	uxth	r3, r3
 800a978:	220a      	movs	r2, #10
 800a97a:	18bc      	adds	r4, r7, r2
 800a97c:	0018      	movs	r0, r3
 800a97e:	f7f9 fe5f 	bl	8004640 <lwip_ntohs>
 800a982:	0003      	movs	r3, r0
 800a984:	8023      	strh	r3, [r4, #0]
      }
    }
  } else
#endif /* LWIP_DHCP */
  {
    prev = NULL;
 800a986:	2300      	movs	r3, #0
 800a988:	623b      	str	r3, [r7, #32]
    local_match = 0;
 800a98a:	231b      	movs	r3, #27
 800a98c:	18fb      	adds	r3, r7, r3
 800a98e:	2200      	movs	r2, #0
 800a990:	701a      	strb	r2, [r3, #0]
    uncon_pcb = NULL;
 800a992:	2300      	movs	r3, #0
 800a994:	61fb      	str	r3, [r7, #28]
    /* Iterate through the UDP pcb list for a matching pcb.
     * 'Perfect match' pcbs (connected to the remote port & ip address) are
     * preferred. If no perfect match is found, the first unconnected pcb that
     * matches the local port and ip address gets the datagram. */
    for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800a996:	4b8f      	ldr	r3, [pc, #572]	; (800abd4 <udp_input+0x324>)
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	627b      	str	r3, [r7, #36]	; 0x24
 800a99c:	e077      	b.n	800aa8e <udp_input+0x1de>
      local_match = 0;
 800a99e:	231b      	movs	r3, #27
 800a9a0:	18fb      	adds	r3, r7, r3
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	701a      	strb	r2, [r3, #0]
                   ip4_addr3_16(&pcb->local_ip), ip4_addr4_16(&pcb->local_ip), pcb->local_port,
                   ip4_addr1_16(&pcb->remote_ip), ip4_addr2_16(&pcb->remote_ip),
                   ip4_addr3_16(&pcb->remote_ip), ip4_addr4_16(&pcb->remote_ip), pcb->remote_port));

      /* compare PCB local addr+port to UDP destination addr+port */
      if (pcb->local_port == dest) {
 800a9a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9a8:	8a5b      	ldrh	r3, [r3, #18]
 800a9aa:	220a      	movs	r2, #10
 800a9ac:	18ba      	adds	r2, r7, r2
 800a9ae:	8812      	ldrh	r2, [r2, #0]
 800a9b0:	429a      	cmp	r2, r3
 800a9b2:	d135      	bne.n	800aa20 <udp_input+0x170>
        if (
 800a9b4:	230f      	movs	r3, #15
 800a9b6:	18fb      	adds	r3, r7, r3
 800a9b8:	781b      	ldrb	r3, [r3, #0]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d106      	bne.n	800a9cc <udp_input+0x11c>
           (!broadcast && ip_addr_isany(&pcb->local_ip)) ||
 800a9be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d01e      	beq.n	800aa02 <udp_input+0x152>
 800a9c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d01a      	beq.n	800aa02 <udp_input+0x152>
           ip_addr_cmp(&(pcb->local_ip), &current_iphdr_dest) ||
 800a9cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ce:	681a      	ldr	r2, [r3, #0]
 800a9d0:	4b7f      	ldr	r3, [pc, #508]	; (800abd0 <udp_input+0x320>)
 800a9d2:	681b      	ldr	r3, [r3, #0]
           (!broadcast && ip_addr_isany(&pcb->local_ip)) ||
 800a9d4:	429a      	cmp	r2, r3
 800a9d6:	d014      	beq.n	800aa02 <udp_input+0x152>
           ip_addr_cmp(&(pcb->local_ip), &current_iphdr_dest) ||
 800a9d8:	230f      	movs	r3, #15
 800a9da:	18fb      	adds	r3, r7, r3
 800a9dc:	781b      	ldrb	r3, [r3, #0]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d01e      	beq.n	800aa20 <udp_input+0x170>
            (broadcast && ip_get_option(pcb, SOF_BROADCAST) &&
             (ip_addr_isany(&pcb->local_ip) ||
              ip_addr_netcmp(&pcb->local_ip, ip_current_dest_addr(), &inp->netmask)))) {
#else /* IP_SOF_BROADCAST_RECV */
            (broadcast &&
             (ip_addr_isany(&pcb->local_ip) ||
 800a9e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
            (broadcast &&
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d00c      	beq.n	800aa02 <udp_input+0x152>
             (ip_addr_isany(&pcb->local_ip) ||
 800a9e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d008      	beq.n	800aa02 <udp_input+0x152>
              ip_addr_netcmp(&pcb->local_ip, ip_current_dest_addr(), &inp->netmask)))) {
 800a9f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9f2:	681a      	ldr	r2, [r3, #0]
 800a9f4:	4b76      	ldr	r3, [pc, #472]	; (800abd0 <udp_input+0x320>)
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	405a      	eors	r2, r3
 800a9fa:	683b      	ldr	r3, [r7, #0]
 800a9fc:	689b      	ldr	r3, [r3, #8]
 800a9fe:	4013      	ands	r3, r2
             (ip_addr_isany(&pcb->local_ip) ||
 800aa00:	d10e      	bne.n	800aa20 <udp_input+0x170>
#endif /* IP_SOF_BROADCAST_RECV */ 
          local_match = 1;
 800aa02:	231b      	movs	r3, #27
 800aa04:	18fb      	adds	r3, r7, r3
 800aa06:	2201      	movs	r2, #1
 800aa08:	701a      	strb	r2, [r3, #0]
          if ((uncon_pcb == NULL) && 
 800aa0a:	69fb      	ldr	r3, [r7, #28]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d107      	bne.n	800aa20 <udp_input+0x170>
              ((pcb->flags & UDP_FLAGS_CONNECTED) == 0)) {
 800aa10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa12:	7c1b      	ldrb	r3, [r3, #16]
 800aa14:	001a      	movs	r2, r3
 800aa16:	2304      	movs	r3, #4
 800aa18:	4013      	ands	r3, r2
          if ((uncon_pcb == NULL) && 
 800aa1a:	d101      	bne.n	800aa20 <udp_input+0x170>
            /* the first unconnected matching PCB */
            uncon_pcb = pcb;
 800aa1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa1e:	61fb      	str	r3, [r7, #28]
          }
        }
      }
      /* compare PCB remote addr+port to UDP source addr+port */
      if ((local_match != 0) &&
 800aa20:	231b      	movs	r3, #27
 800aa22:	18fb      	adds	r3, r7, r3
 800aa24:	781b      	ldrb	r3, [r3, #0]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d02c      	beq.n	800aa84 <udp_input+0x1d4>
          (pcb->remote_port == src) &&
 800aa2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa2c:	8a9b      	ldrh	r3, [r3, #20]
      if ((local_match != 0) &&
 800aa2e:	220c      	movs	r2, #12
 800aa30:	18ba      	adds	r2, r7, r2
 800aa32:	8812      	ldrh	r2, [r2, #0]
 800aa34:	429a      	cmp	r2, r3
 800aa36:	d125      	bne.n	800aa84 <udp_input+0x1d4>
          (ip_addr_isany(&pcb->remote_ip) ||
 800aa38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa3a:	3304      	adds	r3, #4
          (pcb->remote_port == src) &&
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d009      	beq.n	800aa54 <udp_input+0x1a4>
          (ip_addr_isany(&pcb->remote_ip) ||
 800aa40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa42:	685b      	ldr	r3, [r3, #4]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d005      	beq.n	800aa54 <udp_input+0x1a4>
           ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src))) {
 800aa48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa4a:	685a      	ldr	r2, [r3, #4]
 800aa4c:	4b62      	ldr	r3, [pc, #392]	; (800abd8 <udp_input+0x328>)
 800aa4e:	681b      	ldr	r3, [r3, #0]
          (ip_addr_isany(&pcb->remote_ip) ||
 800aa50:	429a      	cmp	r2, r3
 800aa52:	d117      	bne.n	800aa84 <udp_input+0x1d4>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800aa54:	6a3b      	ldr	r3, [r7, #32]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d00b      	beq.n	800aa72 <udp_input+0x1c2>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800aa5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa5c:	68da      	ldr	r2, [r3, #12]
 800aa5e:	6a3b      	ldr	r3, [r7, #32]
 800aa60:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800aa62:	4b5c      	ldr	r3, [pc, #368]	; (800abd4 <udp_input+0x324>)
 800aa64:	681a      	ldr	r2, [r3, #0]
 800aa66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa68:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800aa6a:	4b5a      	ldr	r3, [pc, #360]	; (800abd4 <udp_input+0x324>)
 800aa6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa6e:	601a      	str	r2, [r3, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800aa70:	e011      	b.n	800aa96 <udp_input+0x1e6>
          UDP_STATS_INC(udp.cachehit);
 800aa72:	4b56      	ldr	r3, [pc, #344]	; (800abcc <udp_input+0x31c>)
 800aa74:	228e      	movs	r2, #142	; 0x8e
 800aa76:	5a9b      	ldrh	r3, [r3, r2]
 800aa78:	3301      	adds	r3, #1
 800aa7a:	b299      	uxth	r1, r3
 800aa7c:	4b53      	ldr	r3, [pc, #332]	; (800abcc <udp_input+0x31c>)
 800aa7e:	228e      	movs	r2, #142	; 0x8e
 800aa80:	5299      	strh	r1, [r3, r2]
        break;
 800aa82:	e008      	b.n	800aa96 <udp_input+0x1e6>
      }
      prev = pcb;
 800aa84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa86:	623b      	str	r3, [r7, #32]
    for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800aa88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa8a:	68db      	ldr	r3, [r3, #12]
 800aa8c:	627b      	str	r3, [r7, #36]	; 0x24
 800aa8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d000      	beq.n	800aa96 <udp_input+0x1e6>
 800aa94:	e783      	b.n	800a99e <udp_input+0xee>
    }
    /* no fully matching pcb found? then look for an unconnected pcb */
    if (pcb == NULL) {
 800aa96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d101      	bne.n	800aaa0 <udp_input+0x1f0>
      pcb = uncon_pcb;
 800aa9c:	69fb      	ldr	r3, [r7, #28]
 800aa9e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL || ip_addr_cmp(&inp->ip_addr, &current_iphdr_dest)) {
 800aaa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d106      	bne.n	800aab4 <udp_input+0x204>
 800aaa6:	683b      	ldr	r3, [r7, #0]
 800aaa8:	685a      	ldr	r2, [r3, #4]
 800aaaa:	4b49      	ldr	r3, [pc, #292]	; (800abd0 <udp_input+0x320>)
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	429a      	cmp	r2, r3
 800aab0:	d000      	beq.n	800aab4 <udp_input+0x204>
 800aab2:	e093      	b.n	800abdc <udp_input+0x32c>
#endif /* CHECKSUM_CHECK_UDP */
    } else
#endif /* LWIP_UDPLITE */
    {
#if CHECKSUM_CHECK_UDP
      if (udphdr->chksum != 0) {
 800aab4:	693b      	ldr	r3, [r7, #16]
 800aab6:	799a      	ldrb	r2, [r3, #6]
 800aab8:	79db      	ldrb	r3, [r3, #7]
 800aaba:	021b      	lsls	r3, r3, #8
 800aabc:	4313      	orrs	r3, r2
 800aabe:	b29b      	uxth	r3, r3
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d01f      	beq.n	800ab04 <udp_input+0x254>
        if (inet_chksum_pseudo(p, ip_current_src_addr(), ip_current_dest_addr(),
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	891b      	ldrh	r3, [r3, #8]
 800aac8:	4a41      	ldr	r2, [pc, #260]	; (800abd0 <udp_input+0x320>)
 800aaca:	4943      	ldr	r1, [pc, #268]	; (800abd8 <udp_input+0x328>)
 800aacc:	6878      	ldr	r0, [r7, #4]
 800aace:	9300      	str	r3, [sp, #0]
 800aad0:	2311      	movs	r3, #17
 800aad2:	f000 fdb2 	bl	800b63a <inet_chksum_pseudo>
 800aad6:	1e03      	subs	r3, r0, #0
 800aad8:	d014      	beq.n	800ab04 <udp_input+0x254>
                               IP_PROTO_UDP, p->tot_len) != 0) {
          LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                      ("udp_input: UDP datagram discarded due to failing checksum\n"));
          UDP_STATS_INC(udp.chkerr);
 800aada:	4b3c      	ldr	r3, [pc, #240]	; (800abcc <udp_input+0x31c>)
 800aadc:	2280      	movs	r2, #128	; 0x80
 800aade:	5a9b      	ldrh	r3, [r3, r2]
 800aae0:	3301      	adds	r3, #1
 800aae2:	b299      	uxth	r1, r3
 800aae4:	4b39      	ldr	r3, [pc, #228]	; (800abcc <udp_input+0x31c>)
 800aae6:	2280      	movs	r2, #128	; 0x80
 800aae8:	5299      	strh	r1, [r3, r2]
          UDP_STATS_INC(udp.drop);
 800aaea:	4b38      	ldr	r3, [pc, #224]	; (800abcc <udp_input+0x31c>)
 800aaec:	227e      	movs	r2, #126	; 0x7e
 800aaee:	5a9b      	ldrh	r3, [r3, r2]
 800aaf0:	3301      	adds	r3, #1
 800aaf2:	b299      	uxth	r1, r3
 800aaf4:	4b35      	ldr	r3, [pc, #212]	; (800abcc <udp_input+0x31c>)
 800aaf6:	227e      	movs	r2, #126	; 0x7e
 800aaf8:	5299      	strh	r1, [r3, r2]
          snmp_inc_udpinerrors();
          pbuf_free(p);
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	0018      	movs	r0, r3
 800aafe:	f7fa fdd1 	bl	80056a4 <pbuf_free>
          goto end;
 800ab02:	e06f      	b.n	800abe4 <udp_input+0x334>
        }
      }
#endif /* CHECKSUM_CHECK_UDP */
    }
    if(pbuf_header(p, -UDP_HLEN)) {
 800ab04:	2308      	movs	r3, #8
 800ab06:	425a      	negs	r2, r3
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	0011      	movs	r1, r2
 800ab0c:	0018      	movs	r0, r3
 800ab0e:	f7fa fd42 	bl	8005596 <pbuf_header>
 800ab12:	1e03      	subs	r3, r0, #0
 800ab14:	d00c      	beq.n	800ab30 <udp_input+0x280>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
      UDP_STATS_INC(udp.drop);
 800ab16:	4b2d      	ldr	r3, [pc, #180]	; (800abcc <udp_input+0x31c>)
 800ab18:	227e      	movs	r2, #126	; 0x7e
 800ab1a:	5a9b      	ldrh	r3, [r3, r2]
 800ab1c:	3301      	adds	r3, #1
 800ab1e:	b299      	uxth	r1, r3
 800ab20:	4b2a      	ldr	r3, [pc, #168]	; (800abcc <udp_input+0x31c>)
 800ab22:	227e      	movs	r2, #126	; 0x7e
 800ab24:	5299      	strh	r1, [r3, r2]
      snmp_inc_udpinerrors();
      pbuf_free(p);
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	0018      	movs	r0, r3
 800ab2a:	f7fa fdbb 	bl	80056a4 <pbuf_free>
      goto end;
 800ab2e:	e059      	b.n	800abe4 <udp_input+0x334>
    }
    if (pcb != NULL) {
 800ab30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d016      	beq.n	800ab64 <udp_input+0x2b4>
          pbuf_header(p, -(s16_t)((IPH_HL(iphdr) * 4) + UDP_HLEN));
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800ab36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab38:	699b      	ldr	r3, [r3, #24]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d00d      	beq.n	800ab5a <udp_input+0x2aa>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800ab3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab40:	699c      	ldr	r4, [r3, #24]
 800ab42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab44:	69d8      	ldr	r0, [r3, #28]
 800ab46:	4d24      	ldr	r5, [pc, #144]	; (800abd8 <udp_input+0x328>)
 800ab48:	687a      	ldr	r2, [r7, #4]
 800ab4a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ab4c:	230c      	movs	r3, #12
 800ab4e:	18fb      	adds	r3, r7, r3
 800ab50:	881b      	ldrh	r3, [r3, #0]
 800ab52:	9300      	str	r3, [sp, #0]
 800ab54:	002b      	movs	r3, r5
 800ab56:	47a0      	blx	r4
    if (pcb != NULL) {
 800ab58:	e044      	b.n	800abe4 <udp_input+0x334>
      } else {
        /* no recv function registered? then we have to free the pbuf! */
        pbuf_free(p);
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	0018      	movs	r0, r3
 800ab5e:	f7fa fda1 	bl	80056a4 <pbuf_free>
        goto end;
 800ab62:	e03f      	b.n	800abe4 <udp_input+0x334>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_input: not for us.\n"));

#if LWIP_ICMP
      /* No match was found, send ICMP destination port unreachable unless
         destination address was broadcast/multicast. */
      if (!broadcast &&
 800ab64:	230f      	movs	r3, #15
 800ab66:	18fb      	adds	r3, r7, r3
 800ab68:	781b      	ldrb	r3, [r3, #0]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d119      	bne.n	800aba2 <udp_input+0x2f2>
          !ip_addr_ismulticast(&current_iphdr_dest)) {
 800ab6e:	4b18      	ldr	r3, [pc, #96]	; (800abd0 <udp_input+0x320>)
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	22f0      	movs	r2, #240	; 0xf0
 800ab74:	4013      	ands	r3, r2
      if (!broadcast &&
 800ab76:	2be0      	cmp	r3, #224	; 0xe0
 800ab78:	d013      	beq.n	800aba2 <udp_input+0x2f2>
        /* move payload pointer back to ip header */
        pbuf_header(p, (IPH_HL(iphdr) * 4) + UDP_HLEN);
 800ab7a:	697b      	ldr	r3, [r7, #20]
 800ab7c:	781b      	ldrb	r3, [r3, #0]
 800ab7e:	001a      	movs	r2, r3
 800ab80:	230f      	movs	r3, #15
 800ab82:	4013      	ands	r3, r2
 800ab84:	3302      	adds	r3, #2
 800ab86:	b29b      	uxth	r3, r3
 800ab88:	009b      	lsls	r3, r3, #2
 800ab8a:	b29b      	uxth	r3, r3
 800ab8c:	b21a      	sxth	r2, r3
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	0011      	movs	r1, r2
 800ab92:	0018      	movs	r0, r3
 800ab94:	f7fa fcff 	bl	8005596 <pbuf_header>
        LWIP_ASSERT("p->payload == iphdr", (p->payload == iphdr));
        icmp_dest_unreach(p, ICMP_DUR_PORT);
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	2103      	movs	r1, #3
 800ab9c:	0018      	movs	r0, r3
 800ab9e:	f000 fc35 	bl	800b40c <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      UDP_STATS_INC(udp.proterr);
 800aba2:	4b0a      	ldr	r3, [pc, #40]	; (800abcc <udp_input+0x31c>)
 800aba4:	2288      	movs	r2, #136	; 0x88
 800aba6:	5a9b      	ldrh	r3, [r3, r2]
 800aba8:	3301      	adds	r3, #1
 800abaa:	b299      	uxth	r1, r3
 800abac:	4b07      	ldr	r3, [pc, #28]	; (800abcc <udp_input+0x31c>)
 800abae:	2288      	movs	r2, #136	; 0x88
 800abb0:	5299      	strh	r1, [r3, r2]
      UDP_STATS_INC(udp.drop);
 800abb2:	4b06      	ldr	r3, [pc, #24]	; (800abcc <udp_input+0x31c>)
 800abb4:	227e      	movs	r2, #126	; 0x7e
 800abb6:	5a9b      	ldrh	r3, [r3, r2]
 800abb8:	3301      	adds	r3, #1
 800abba:	b299      	uxth	r1, r3
 800abbc:	4b03      	ldr	r3, [pc, #12]	; (800abcc <udp_input+0x31c>)
 800abbe:	227e      	movs	r2, #126	; 0x7e
 800abc0:	5299      	strh	r1, [r3, r2]
      snmp_inc_udpnoports();
      pbuf_free(p);
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	0018      	movs	r0, r3
 800abc6:	f7fa fd6d 	bl	80056a4 <pbuf_free>
    if (pcb != NULL) {
 800abca:	e00b      	b.n	800abe4 <udp_input+0x334>
 800abcc:	20003158 	.word	0x20003158
 800abd0:	2000329c 	.word	0x2000329c
 800abd4:	20003290 	.word	0x20003290
 800abd8:	20003294 	.word	0x20003294
    }
  } else {
    pbuf_free(p);
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	0018      	movs	r0, r3
 800abe0:	f7fa fd60 	bl	80056a4 <pbuf_free>
  }
end:
  PERF_STOP("udp_input");
}
 800abe4:	46c0      	nop			; (mov r8, r8)
 800abe6:	46bd      	mov	sp, r7
 800abe8:	b00a      	add	sp, #40	; 0x28
 800abea:	bdb0      	pop	{r4, r5, r7, pc}

0800abec <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
  ip_addr_t *dst_ip, u16_t dst_port)
{
 800abec:	b590      	push	{r4, r7, lr}
 800abee:	b089      	sub	sp, #36	; 0x24
 800abf0:	af02      	add	r7, sp, #8
 800abf2:	60f8      	str	r0, [r7, #12]
 800abf4:	60b9      	str	r1, [r7, #8]
 800abf6:	607a      	str	r2, [r7, #4]
 800abf8:	001a      	movs	r2, r3
 800abfa:	1cbb      	adds	r3, r7, #2
 800abfc:	801a      	strh	r2, [r3, #0]

  /* find the outgoing network interface for this packet */
#if LWIP_IGMP
  netif = ip_route((ip_addr_ismulticast(dst_ip))?(&(pcb->multicast_ip)):(dst_ip));
#else
  netif = ip_route(dst_ip);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	0018      	movs	r0, r3
 800ac02:	f000 fe21 	bl	800b848 <ip_route>
 800ac06:	0003      	movs	r3, r0
 800ac08:	617b      	str	r3, [r7, #20]
#endif /* LWIP_IGMP */

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 800ac0a:	697b      	ldr	r3, [r7, #20]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d10a      	bne.n	800ac26 <udp_sendto+0x3a>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dst_ip), ip4_addr2_16(dst_ip), ip4_addr3_16(dst_ip), ip4_addr4_16(dst_ip)));
    UDP_STATS_INC(udp.rterr);
 800ac10:	4b0c      	ldr	r3, [pc, #48]	; (800ac44 <udp_sendto+0x58>)
 800ac12:	2286      	movs	r2, #134	; 0x86
 800ac14:	5a9b      	ldrh	r3, [r3, r2]
 800ac16:	3301      	adds	r3, #1
 800ac18:	b299      	uxth	r1, r3
 800ac1a:	4b0a      	ldr	r3, [pc, #40]	; (800ac44 <udp_sendto+0x58>)
 800ac1c:	2286      	movs	r2, #134	; 0x86
 800ac1e:	5299      	strh	r1, [r3, r2]
    return ERR_RTE;
 800ac20:	2304      	movs	r3, #4
 800ac22:	425b      	negs	r3, r3
 800ac24:	e00a      	b.n	800ac3c <udp_sendto+0x50>
  }
#if LWIP_CHECKSUM_ON_COPY
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800ac26:	1cbb      	adds	r3, r7, #2
 800ac28:	881c      	ldrh	r4, [r3, #0]
 800ac2a:	687a      	ldr	r2, [r7, #4]
 800ac2c:	68b9      	ldr	r1, [r7, #8]
 800ac2e:	68f8      	ldr	r0, [r7, #12]
 800ac30:	697b      	ldr	r3, [r7, #20]
 800ac32:	9300      	str	r3, [sp, #0]
 800ac34:	0023      	movs	r3, r4
 800ac36:	f000 f807 	bl	800ac48 <udp_sendto_if>
 800ac3a:	0003      	movs	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY */
}
 800ac3c:	0018      	movs	r0, r3
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	b007      	add	sp, #28
 800ac42:	bd90      	pop	{r4, r7, pc}
 800ac44:	20003158 	.word	0x20003158

0800ac48 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
  ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800ac48:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac4a:	b08d      	sub	sp, #52	; 0x34
 800ac4c:	af04      	add	r7, sp, #16
 800ac4e:	60f8      	str	r0, [r7, #12]
 800ac50:	60b9      	str	r1, [r7, #8]
 800ac52:	607a      	str	r2, [r7, #4]
 800ac54:	001a      	movs	r2, r3
 800ac56:	1cbb      	adds	r3, r7, #2
 800ac58:	801a      	strh	r2, [r3, #0]
    return ERR_VAL;
  }
#endif /* IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	8a5b      	ldrh	r3, [r3, #18]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d114      	bne.n	800ac8c <udp_sendto_if+0x44>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800ac62:	68f9      	ldr	r1, [r7, #12]
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	8a5a      	ldrh	r2, [r3, #18]
 800ac68:	2515      	movs	r5, #21
 800ac6a:	197c      	adds	r4, r7, r5
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	0018      	movs	r0, r3
 800ac70:	f000 f90a 	bl	800ae88 <udp_bind>
 800ac74:	0003      	movs	r3, r0
 800ac76:	7023      	strb	r3, [r4, #0]
    if (err != ERR_OK) {
 800ac78:	197b      	adds	r3, r7, r5
 800ac7a:	781b      	ldrb	r3, [r3, #0]
 800ac7c:	b25b      	sxtb	r3, r3
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d004      	beq.n	800ac8c <udp_sendto_if+0x44>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800ac82:	2315      	movs	r3, #21
 800ac84:	18fb      	adds	r3, r7, r3
 800ac86:	781b      	ldrb	r3, [r3, #0]
 800ac88:	b25b      	sxtb	r3, r3
 800ac8a:	e0f6      	b.n	800ae7a <udp_sendto_if+0x232>
    }
  }

  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_header(p, UDP_HLEN)) {
 800ac8c:	68bb      	ldr	r3, [r7, #8]
 800ac8e:	2108      	movs	r1, #8
 800ac90:	0018      	movs	r0, r3
 800ac92:	f7fa fc80 	bl	8005596 <pbuf_header>
 800ac96:	1e03      	subs	r3, r0, #0
 800ac98:	d017      	beq.n	800acca <udp_sendto_if+0x82>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	2108      	movs	r1, #8
 800ac9e:	2001      	movs	r0, #1
 800aca0:	f7fa fa74 	bl	800518c <pbuf_alloc>
 800aca4:	0003      	movs	r3, r0
 800aca6:	61bb      	str	r3, [r7, #24]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800aca8:	69bb      	ldr	r3, [r7, #24]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d102      	bne.n	800acb4 <udp_sendto_if+0x6c>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800acae:	2301      	movs	r3, #1
 800acb0:	425b      	negs	r3, r3
 800acb2:	e0e2      	b.n	800ae7a <udp_sendto_if+0x232>
    }
    if (p->tot_len != 0) {
 800acb4:	68bb      	ldr	r3, [r7, #8]
 800acb6:	891b      	ldrh	r3, [r3, #8]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d008      	beq.n	800acce <udp_sendto_if+0x86>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800acbc:	68ba      	ldr	r2, [r7, #8]
 800acbe:	69bb      	ldr	r3, [r7, #24]
 800acc0:	0011      	movs	r1, r2
 800acc2:	0018      	movs	r0, r3
 800acc4:	f7fa fdba 	bl	800583c <pbuf_chain>
 800acc8:	e001      	b.n	800acce <udp_sendto_if+0x86>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800acca:	68bb      	ldr	r3, [r7, #8]
 800accc:	61bb      	str	r3, [r7, #24]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800acce:	69bb      	ldr	r3, [r7, #24]
 800acd0:	685b      	ldr	r3, [r3, #4]
 800acd2:	613b      	str	r3, [r7, #16]
  udphdr->src = htons(pcb->local_port);
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	8a5b      	ldrh	r3, [r3, #18]
 800acd8:	0018      	movs	r0, r3
 800acda:	f7f9 fc9b 	bl	8004614 <lwip_htons>
 800acde:	0003      	movs	r3, r0
 800ace0:	001a      	movs	r2, r3
 800ace2:	693b      	ldr	r3, [r7, #16]
 800ace4:	21ff      	movs	r1, #255	; 0xff
 800ace6:	4011      	ands	r1, r2
 800ace8:	000c      	movs	r4, r1
 800acea:	7819      	ldrb	r1, [r3, #0]
 800acec:	2000      	movs	r0, #0
 800acee:	4001      	ands	r1, r0
 800acf0:	1c08      	adds	r0, r1, #0
 800acf2:	1c21      	adds	r1, r4, #0
 800acf4:	4301      	orrs	r1, r0
 800acf6:	7019      	strb	r1, [r3, #0]
 800acf8:	0a12      	lsrs	r2, r2, #8
 800acfa:	b290      	uxth	r0, r2
 800acfc:	785a      	ldrb	r2, [r3, #1]
 800acfe:	2100      	movs	r1, #0
 800ad00:	400a      	ands	r2, r1
 800ad02:	1c11      	adds	r1, r2, #0
 800ad04:	1c02      	adds	r2, r0, #0
 800ad06:	430a      	orrs	r2, r1
 800ad08:	705a      	strb	r2, [r3, #1]
  udphdr->dest = htons(dst_port);
 800ad0a:	1cbb      	adds	r3, r7, #2
 800ad0c:	881b      	ldrh	r3, [r3, #0]
 800ad0e:	0018      	movs	r0, r3
 800ad10:	f7f9 fc80 	bl	8004614 <lwip_htons>
 800ad14:	0003      	movs	r3, r0
 800ad16:	001a      	movs	r2, r3
 800ad18:	693b      	ldr	r3, [r7, #16]
 800ad1a:	21ff      	movs	r1, #255	; 0xff
 800ad1c:	4011      	ands	r1, r2
 800ad1e:	000c      	movs	r4, r1
 800ad20:	7899      	ldrb	r1, [r3, #2]
 800ad22:	2000      	movs	r0, #0
 800ad24:	4001      	ands	r1, r0
 800ad26:	1c08      	adds	r0, r1, #0
 800ad28:	1c21      	adds	r1, r4, #0
 800ad2a:	4301      	orrs	r1, r0
 800ad2c:	7099      	strb	r1, [r3, #2]
 800ad2e:	0a12      	lsrs	r2, r2, #8
 800ad30:	b290      	uxth	r0, r2
 800ad32:	78da      	ldrb	r2, [r3, #3]
 800ad34:	2100      	movs	r1, #0
 800ad36:	400a      	ands	r2, r1
 800ad38:	1c11      	adds	r1, r2, #0
 800ad3a:	1c02      	adds	r2, r0, #0
 800ad3c:	430a      	orrs	r2, r1
 800ad3e:	70da      	strb	r2, [r3, #3]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000; 
 800ad40:	693b      	ldr	r3, [r7, #16]
 800ad42:	799a      	ldrb	r2, [r3, #6]
 800ad44:	2100      	movs	r1, #0
 800ad46:	400a      	ands	r2, r1
 800ad48:	719a      	strb	r2, [r3, #6]
 800ad4a:	79da      	ldrb	r2, [r3, #7]
 800ad4c:	2100      	movs	r1, #0
 800ad4e:	400a      	ands	r2, r1
 800ad50:	71da      	strb	r2, [r3, #7]
  }
#endif /* LWIP_IGMP */


  /* PCB local address is IP_ANY_ADDR? */
  if (ip_addr_isany(&pcb->local_ip)) {
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d003      	beq.n	800ad60 <udp_sendto_if+0x118>
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d103      	bne.n	800ad68 <udp_sendto_if+0x120>
    /* use outgoing network interface IP address as source address */
    src_ip = &(netif->ip_addr);
 800ad60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad62:	3304      	adds	r3, #4
 800ad64:	61fb      	str	r3, [r7, #28]
 800ad66:	e014      	b.n	800ad92 <udp_sendto_if+0x14a>
  } else {
    /* check if UDP PCB local IP address is correct
     * this could be an old address if netif->ip_addr has changed */
    if (!ip_addr_cmp(&(pcb->local_ip), &(netif->ip_addr))) {
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	681a      	ldr	r2, [r3, #0]
 800ad6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad6e:	685b      	ldr	r3, [r3, #4]
 800ad70:	429a      	cmp	r2, r3
 800ad72:	d00c      	beq.n	800ad8e <udp_sendto_if+0x146>
      /* local_ip doesn't match, drop the packet */
      if (q != p) {
 800ad74:	69ba      	ldr	r2, [r7, #24]
 800ad76:	68bb      	ldr	r3, [r7, #8]
 800ad78:	429a      	cmp	r2, r3
 800ad7a:	d005      	beq.n	800ad88 <udp_sendto_if+0x140>
        /* free the header pbuf */
        pbuf_free(q);
 800ad7c:	69bb      	ldr	r3, [r7, #24]
 800ad7e:	0018      	movs	r0, r3
 800ad80:	f7fa fc90 	bl	80056a4 <pbuf_free>
        q = NULL;
 800ad84:	2300      	movs	r3, #0
 800ad86:	61bb      	str	r3, [r7, #24]
        /* p is still referenced by the caller, and will live on */
      }
      return ERR_VAL;
 800ad88:	2306      	movs	r3, #6
 800ad8a:	425b      	negs	r3, r3
 800ad8c:	e075      	b.n	800ae7a <udp_sendto_if+0x232>
    }
    /* use UDP PCB local IP address as source address */
    src_ip = &(pcb->local_ip);
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	61fb      	str	r3, [r7, #28]
    NETIF_SET_HWADDRHINT(netif, NULL);
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = htons(q->tot_len);
 800ad92:	69bb      	ldr	r3, [r7, #24]
 800ad94:	891b      	ldrh	r3, [r3, #8]
 800ad96:	0018      	movs	r0, r3
 800ad98:	f7f9 fc3c 	bl	8004614 <lwip_htons>
 800ad9c:	0003      	movs	r3, r0
 800ad9e:	001a      	movs	r2, r3
 800ada0:	693b      	ldr	r3, [r7, #16]
 800ada2:	21ff      	movs	r1, #255	; 0xff
 800ada4:	4011      	ands	r1, r2
 800ada6:	000c      	movs	r4, r1
 800ada8:	7919      	ldrb	r1, [r3, #4]
 800adaa:	2000      	movs	r0, #0
 800adac:	4001      	ands	r1, r0
 800adae:	1c08      	adds	r0, r1, #0
 800adb0:	1c21      	adds	r1, r4, #0
 800adb2:	4301      	orrs	r1, r0
 800adb4:	7119      	strb	r1, [r3, #4]
 800adb6:	0a12      	lsrs	r2, r2, #8
 800adb8:	b290      	uxth	r0, r2
 800adba:	795a      	ldrb	r2, [r3, #5]
 800adbc:	2100      	movs	r1, #0
 800adbe:	400a      	ands	r2, r1
 800adc0:	1c11      	adds	r1, r2, #0
 800adc2:	1c02      	adds	r2, r0, #0
 800adc4:	430a      	orrs	r2, r1
 800adc6:	715a      	strb	r2, [r3, #5]
    /* calculate checksum */
#if CHECKSUM_GEN_UDP
    if ((pcb->flags & UDP_FLAGS_NOCHKSUM) == 0) {
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	7c1b      	ldrb	r3, [r3, #16]
 800adcc:	001a      	movs	r2, r3
 800adce:	2301      	movs	r3, #1
 800add0:	4013      	ands	r3, r2
 800add2:	d128      	bne.n	800ae26 <udp_sendto_if+0x1de>
        acc = udpchksum + (u16_t)~(chksum);
        udpchksum = FOLD_U32T(acc);
      } else
#endif /* LWIP_CHECKSUM_ON_COPY */
      {
        udpchksum = inet_chksum_pseudo(q, src_ip, dst_ip, IP_PROTO_UDP, q->tot_len);
 800add4:	69bb      	ldr	r3, [r7, #24]
 800add6:	891b      	ldrh	r3, [r3, #8]
 800add8:	2516      	movs	r5, #22
 800adda:	197c      	adds	r4, r7, r5
 800addc:	687a      	ldr	r2, [r7, #4]
 800adde:	69f9      	ldr	r1, [r7, #28]
 800ade0:	69b8      	ldr	r0, [r7, #24]
 800ade2:	9300      	str	r3, [sp, #0]
 800ade4:	2311      	movs	r3, #17
 800ade6:	f000 fc28 	bl	800b63a <inet_chksum_pseudo>
 800adea:	0003      	movs	r3, r0
 800adec:	8023      	strh	r3, [r4, #0]
      }

      /* chksum zero must become 0xffff, as zero means 'no checksum' */
      if (udpchksum == 0x0000) {
 800adee:	197b      	adds	r3, r7, r5
 800adf0:	881b      	ldrh	r3, [r3, #0]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d104      	bne.n	800ae00 <udp_sendto_if+0x1b8>
        udpchksum = 0xffff;
 800adf6:	2316      	movs	r3, #22
 800adf8:	18fb      	adds	r3, r7, r3
 800adfa:	2201      	movs	r2, #1
 800adfc:	4252      	negs	r2, r2
 800adfe:	801a      	strh	r2, [r3, #0]
      }
      udphdr->chksum = udpchksum;
 800ae00:	693b      	ldr	r3, [r7, #16]
 800ae02:	2216      	movs	r2, #22
 800ae04:	18ba      	adds	r2, r7, r2
 800ae06:	7814      	ldrb	r4, [r2, #0]
 800ae08:	7999      	ldrb	r1, [r3, #6]
 800ae0a:	2000      	movs	r0, #0
 800ae0c:	4001      	ands	r1, r0
 800ae0e:	1c08      	adds	r0, r1, #0
 800ae10:	1c21      	adds	r1, r4, #0
 800ae12:	4301      	orrs	r1, r0
 800ae14:	7199      	strb	r1, [r3, #6]
 800ae16:	7850      	ldrb	r0, [r2, #1]
 800ae18:	79da      	ldrb	r2, [r3, #7]
 800ae1a:	2100      	movs	r1, #0
 800ae1c:	400a      	ands	r2, r1
 800ae1e:	1c11      	adds	r1, r2, #0
 800ae20:	1c02      	adds	r2, r0, #0
 800ae22:	430a      	orrs	r2, r1
 800ae24:	71da      	strb	r2, [r3, #7]
#endif /* CHECKSUM_GEN_UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,IP_PROTO_UDP,)\n"));
    /* output to IP */
    NETIF_SET_HWADDRHINT(netif, &pcb->addr_hint);
    err = ip_output_if(q, src_ip, dst_ip, pcb->ttl, pcb->tos, IP_PROTO_UDP, netif);
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	7a9e      	ldrb	r6, [r3, #10]
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	7a5b      	ldrb	r3, [r3, #9]
 800ae2e:	2215      	movs	r2, #21
 800ae30:	18bc      	adds	r4, r7, r2
 800ae32:	687d      	ldr	r5, [r7, #4]
 800ae34:	69f9      	ldr	r1, [r7, #28]
 800ae36:	69b8      	ldr	r0, [r7, #24]
 800ae38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ae3a:	9202      	str	r2, [sp, #8]
 800ae3c:	2211      	movs	r2, #17
 800ae3e:	9201      	str	r2, [sp, #4]
 800ae40:	9300      	str	r3, [sp, #0]
 800ae42:	0033      	movs	r3, r6
 800ae44:	002a      	movs	r2, r5
 800ae46:	f000 ff0d 	bl	800bc64 <ip_output_if>
 800ae4a:	0003      	movs	r3, r0
 800ae4c:	7023      	strb	r3, [r4, #0]
  }
  /* TODO: must this be increased even if error occured? */
  snmp_inc_udpoutdatagrams();

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800ae4e:	69ba      	ldr	r2, [r7, #24]
 800ae50:	68bb      	ldr	r3, [r7, #8]
 800ae52:	429a      	cmp	r2, r3
 800ae54:	d005      	beq.n	800ae62 <udp_sendto_if+0x21a>
    /* free the header pbuf */
    pbuf_free(q);
 800ae56:	69bb      	ldr	r3, [r7, #24]
 800ae58:	0018      	movs	r0, r3
 800ae5a:	f7fa fc23 	bl	80056a4 <pbuf_free>
    q = NULL;
 800ae5e:	2300      	movs	r3, #0
 800ae60:	61bb      	str	r3, [r7, #24]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
 800ae62:	4b08      	ldr	r3, [pc, #32]	; (800ae84 <udp_sendto_if+0x23c>)
 800ae64:	2278      	movs	r2, #120	; 0x78
 800ae66:	5a9b      	ldrh	r3, [r3, r2]
 800ae68:	3301      	adds	r3, #1
 800ae6a:	b299      	uxth	r1, r3
 800ae6c:	4b05      	ldr	r3, [pc, #20]	; (800ae84 <udp_sendto_if+0x23c>)
 800ae6e:	2278      	movs	r2, #120	; 0x78
 800ae70:	5299      	strh	r1, [r3, r2]
  return err;
 800ae72:	2315      	movs	r3, #21
 800ae74:	18fb      	adds	r3, r7, r3
 800ae76:	781b      	ldrb	r3, [r3, #0]
 800ae78:	b25b      	sxtb	r3, r3
}
 800ae7a:	0018      	movs	r0, r3
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	b009      	add	sp, #36	; 0x24
 800ae80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae82:	46c0      	nop			; (mov r8, r8)
 800ae84:	20003158 	.word	0x20003158

0800ae88 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, ip_addr_t *ipaddr, u16_t port)
{
 800ae88:	b590      	push	{r4, r7, lr}
 800ae8a:	b087      	sub	sp, #28
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	60f8      	str	r0, [r7, #12]
 800ae90:	60b9      	str	r1, [r7, #8]
 800ae92:	1dbb      	adds	r3, r7, #6
 800ae94:	801a      	strh	r2, [r3, #0]

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800ae96:	2313      	movs	r3, #19
 800ae98:	18fb      	adds	r3, r7, r3
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	701a      	strb	r2, [r3, #0]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ae9e:	4b2f      	ldr	r3, [pc, #188]	; (800af5c <udp_bind+0xd4>)
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	617b      	str	r3, [r7, #20]
 800aea4:	e028      	b.n	800aef8 <udp_bind+0x70>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800aea6:	68fa      	ldr	r2, [r7, #12]
 800aea8:	697b      	ldr	r3, [r7, #20]
 800aeaa:	429a      	cmp	r2, r3
 800aeac:	d104      	bne.n	800aeb8 <udp_bind+0x30>
      /* pcb may occur at most once in active list */
      LWIP_ASSERT("rebind == 0", rebind == 0);
      /* pcb already in list, just rebind */
      rebind = 1;
 800aeae:	2313      	movs	r3, #19
 800aeb0:	18fb      	adds	r3, r7, r3
 800aeb2:	2201      	movs	r2, #1
 800aeb4:	701a      	strb	r2, [r3, #0]
 800aeb6:	e01c      	b.n	800aef2 <udp_bind+0x6a>
             !ip_get_option(ipcb, SOF_REUSEADDR)) {
#else /* SO_REUSE */
    /* port matches that of PCB in list and REUSEADDR not set -> reject */
    else {
#endif /* SO_REUSE */
      if ((ipcb->local_port == port) &&
 800aeb8:	697b      	ldr	r3, [r7, #20]
 800aeba:	8a5b      	ldrh	r3, [r3, #18]
 800aebc:	1dba      	adds	r2, r7, #6
 800aebe:	8812      	ldrh	r2, [r2, #0]
 800aec0:	429a      	cmp	r2, r3
 800aec2:	d116      	bne.n	800aef2 <udp_bind+0x6a>
          /* IP address matches, or one is IP_ADDR_ANY? */
          (ip_addr_isany(&(ipcb->local_ip)) ||
 800aec4:	697b      	ldr	r3, [r7, #20]
      if ((ipcb->local_port == port) &&
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d010      	beq.n	800aeec <udp_bind+0x64>
          (ip_addr_isany(&(ipcb->local_ip)) ||
 800aeca:	697b      	ldr	r3, [r7, #20]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d00c      	beq.n	800aeec <udp_bind+0x64>
 800aed2:	68bb      	ldr	r3, [r7, #8]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d009      	beq.n	800aeec <udp_bind+0x64>
           ip_addr_isany(ipaddr) ||
 800aed8:	68bb      	ldr	r3, [r7, #8]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d005      	beq.n	800aeec <udp_bind+0x64>
           ip_addr_cmp(&(ipcb->local_ip), ipaddr))) {
 800aee0:	697b      	ldr	r3, [r7, #20]
 800aee2:	681a      	ldr	r2, [r3, #0]
 800aee4:	68bb      	ldr	r3, [r7, #8]
 800aee6:	681b      	ldr	r3, [r3, #0]
           ip_addr_isany(ipaddr) ||
 800aee8:	429a      	cmp	r2, r3
 800aeea:	d102      	bne.n	800aef2 <udp_bind+0x6a>
        /* other PCB already binds to this local IP and port */
        LWIP_DEBUGF(UDP_DEBUG,
                    ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
        return ERR_USE;
 800aeec:	2308      	movs	r3, #8
 800aeee:	425b      	negs	r3, r3
 800aef0:	e02f      	b.n	800af52 <udp_bind+0xca>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800aef2:	697b      	ldr	r3, [r7, #20]
 800aef4:	68db      	ldr	r3, [r3, #12]
 800aef6:	617b      	str	r3, [r7, #20]
 800aef8:	697b      	ldr	r3, [r7, #20]
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d1d3      	bne.n	800aea6 <udp_bind+0x1e>
      }
    }
  }

  ip_addr_set(&pcb->local_ip, ipaddr);
 800aefe:	68bb      	ldr	r3, [r7, #8]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d002      	beq.n	800af0a <udp_bind+0x82>
 800af04:	68bb      	ldr	r3, [r7, #8]
 800af06:	681a      	ldr	r2, [r3, #0]
 800af08:	e000      	b.n	800af0c <udp_bind+0x84>
 800af0a:	2200      	movs	r2, #0
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	601a      	str	r2, [r3, #0]

  /* no port specified? */
  if (port == 0) {
 800af10:	1dbb      	adds	r3, r7, #6
 800af12:	881b      	ldrh	r3, [r3, #0]
 800af14:	2b00      	cmp	r3, #0
 800af16:	d10b      	bne.n	800af30 <udp_bind+0xa8>
    port = udp_new_port();
 800af18:	1dbc      	adds	r4, r7, #6
 800af1a:	f7ff fc8b 	bl	800a834 <udp_new_port>
 800af1e:	0003      	movs	r3, r0
 800af20:	8023      	strh	r3, [r4, #0]
    if (port == 0) {
 800af22:	1dbb      	adds	r3, r7, #6
 800af24:	881b      	ldrh	r3, [r3, #0]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d102      	bne.n	800af30 <udp_bind+0xa8>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800af2a:	2308      	movs	r3, #8
 800af2c:	425b      	negs	r3, r3
 800af2e:	e010      	b.n	800af52 <udp_bind+0xca>
    }
  }
  pcb->local_port = port;
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	1dba      	adds	r2, r7, #6
 800af34:	8812      	ldrh	r2, [r2, #0]
 800af36:	825a      	strh	r2, [r3, #18]
  snmp_insert_udpidx_tree(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800af38:	2313      	movs	r3, #19
 800af3a:	18fb      	adds	r3, r7, r3
 800af3c:	781b      	ldrb	r3, [r3, #0]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d106      	bne.n	800af50 <udp_bind+0xc8>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800af42:	4b06      	ldr	r3, [pc, #24]	; (800af5c <udp_bind+0xd4>)
 800af44:	681a      	ldr	r2, [r3, #0]
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800af4a:	4b04      	ldr	r3, [pc, #16]	; (800af5c <udp_bind+0xd4>)
 800af4c:	68fa      	ldr	r2, [r7, #12]
 800af4e:	601a      	str	r2, [r3, #0]
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
              ("udp_bind: bound to %"U16_F".%"U16_F".%"U16_F".%"U16_F", port %"U16_F"\n",
               ip4_addr1_16(&pcb->local_ip), ip4_addr2_16(&pcb->local_ip),
               ip4_addr3_16(&pcb->local_ip), ip4_addr4_16(&pcb->local_ip),
               pcb->local_port));
  return ERR_OK;
 800af50:	2300      	movs	r3, #0
}
 800af52:	0018      	movs	r0, r3
 800af54:	46bd      	mov	sp, r7
 800af56:	b007      	add	sp, #28
 800af58:	bd90      	pop	{r4, r7, pc}
 800af5a:	46c0      	nop			; (mov r8, r8)
 800af5c:	20003290 	.word	0x20003290

0800af60 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800af60:	b580      	push	{r7, lr}
 800af62:	b084      	sub	sp, #16
 800af64:	af00      	add	r7, sp, #0
 800af66:	60f8      	str	r0, [r7, #12]
 800af68:	60b9      	str	r1, [r7, #8]
 800af6a:	607a      	str	r2, [r7, #4]
  /* remember recv() callback and user data */
  pcb->recv = recv;
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	68ba      	ldr	r2, [r7, #8]
 800af70:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	687a      	ldr	r2, [r7, #4]
 800af76:	61da      	str	r2, [r3, #28]
}
 800af78:	46c0      	nop			; (mov r8, r8)
 800af7a:	46bd      	mov	sp, r7
 800af7c:	b004      	add	sp, #16
 800af7e:	bd80      	pop	{r7, pc}

0800af80 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800af80:	b580      	push	{r7, lr}
 800af82:	b084      	sub	sp, #16
 800af84:	af00      	add	r7, sp, #0
 800af86:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  snmp_delete_udpidx_tree(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800af88:	4b15      	ldr	r3, [pc, #84]	; (800afe0 <udp_remove+0x60>)
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	687a      	ldr	r2, [r7, #4]
 800af8e:	429a      	cmp	r2, r3
 800af90:	d105      	bne.n	800af9e <udp_remove+0x1e>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800af92:	4b13      	ldr	r3, [pc, #76]	; (800afe0 <udp_remove+0x60>)
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	68da      	ldr	r2, [r3, #12]
 800af98:	4b11      	ldr	r3, [pc, #68]	; (800afe0 <udp_remove+0x60>)
 800af9a:	601a      	str	r2, [r3, #0]
 800af9c:	e016      	b.n	800afcc <udp_remove+0x4c>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800af9e:	4b10      	ldr	r3, [pc, #64]	; (800afe0 <udp_remove+0x60>)
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	60fb      	str	r3, [r7, #12]
 800afa4:	e00f      	b.n	800afc6 <udp_remove+0x46>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	68db      	ldr	r3, [r3, #12]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d008      	beq.n	800afc0 <udp_remove+0x40>
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	68db      	ldr	r3, [r3, #12]
 800afb2:	687a      	ldr	r2, [r7, #4]
 800afb4:	429a      	cmp	r2, r3
 800afb6:	d103      	bne.n	800afc0 <udp_remove+0x40>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	68da      	ldr	r2, [r3, #12]
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	60da      	str	r2, [r3, #12]
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	68db      	ldr	r3, [r3, #12]
 800afc4:	60fb      	str	r3, [r7, #12]
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d1ec      	bne.n	800afa6 <udp_remove+0x26>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	0019      	movs	r1, r3
 800afd0:	2001      	movs	r0, #1
 800afd2:	f7f9 ffa5 	bl	8004f20 <memp_free>
}
 800afd6:	46c0      	nop			; (mov r8, r8)
 800afd8:	46bd      	mov	sp, r7
 800afda:	b004      	add	sp, #16
 800afdc:	bd80      	pop	{r7, pc}
 800afde:	46c0      	nop			; (mov r8, r8)
 800afe0:	20003290 	.word	0x20003290

0800afe4 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800afe4:	b580      	push	{r7, lr}
 800afe6:	b082      	sub	sp, #8
 800afe8:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800afea:	2001      	movs	r0, #1
 800afec:	f7f9 ff12 	bl	8004e14 <memp_malloc>
 800aff0:	0003      	movs	r3, r0
 800aff2:	607b      	str	r3, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d008      	beq.n	800b00c <udp_new+0x28>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	2220      	movs	r2, #32
 800affe:	2100      	movs	r1, #0
 800b000:	0018      	movs	r0, r3
 800b002:	f004 fe57 	bl	800fcb4 <memset>
    pcb->ttl = UDP_TTL;
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	22ff      	movs	r2, #255	; 0xff
 800b00a:	729a      	strb	r2, [r3, #10]
  }
  return pcb;
 800b00c:	687b      	ldr	r3, [r7, #4]
}
 800b00e:	0018      	movs	r0, r3
 800b010:	46bd      	mov	sp, r7
 800b012:	b002      	add	sp, #8
 800b014:	bd80      	pop	{r7, pc}
	...

0800b018 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the ip header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800b018:	b590      	push	{r4, r7, lr}
 800b01a:	b08d      	sub	sp, #52	; 0x34
 800b01c:	af04      	add	r7, sp, #16
 800b01e:	6078      	str	r0, [r7, #4]
 800b020:	6039      	str	r1, [r7, #0]
#endif /* LWIP_DEBUG */
  struct icmp_echo_hdr *iecho;
  struct ip_hdr *iphdr;
  s16_t hlen;

  ICMP_STATS_INC(icmp.recv);
 800b022:	4be1      	ldr	r3, [pc, #900]	; (800b3a8 <icmp_input+0x390>)
 800b024:	2262      	movs	r2, #98	; 0x62
 800b026:	5a9b      	ldrh	r3, [r3, r2]
 800b028:	3301      	adds	r3, #1
 800b02a:	b299      	uxth	r1, r3
 800b02c:	4bde      	ldr	r3, [pc, #888]	; (800b3a8 <icmp_input+0x390>)
 800b02e:	2262      	movs	r2, #98	; 0x62
 800b030:	5299      	strh	r1, [r3, r2]
  snmp_inc_icmpinmsgs();


  iphdr = (struct ip_hdr *)p->payload;
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	685b      	ldr	r3, [r3, #4]
 800b036:	61fb      	str	r3, [r7, #28]
  hlen = IPH_HL(iphdr) * 4;
 800b038:	69fb      	ldr	r3, [r7, #28]
 800b03a:	781b      	ldrb	r3, [r3, #0]
 800b03c:	b29b      	uxth	r3, r3
 800b03e:	220f      	movs	r2, #15
 800b040:	4013      	ands	r3, r2
 800b042:	b29b      	uxth	r3, r3
 800b044:	009b      	lsls	r3, r3, #2
 800b046:	b29a      	uxth	r2, r3
 800b048:	2116      	movs	r1, #22
 800b04a:	187b      	adds	r3, r7, r1
 800b04c:	801a      	strh	r2, [r3, #0]
  if (pbuf_header(p, -hlen) || (p->tot_len < sizeof(u16_t)*2)) {
 800b04e:	187b      	adds	r3, r7, r1
 800b050:	881b      	ldrh	r3, [r3, #0]
 800b052:	425b      	negs	r3, r3
 800b054:	b29b      	uxth	r3, r3
 800b056:	b21a      	sxth	r2, r3
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	0011      	movs	r1, r2
 800b05c:	0018      	movs	r0, r3
 800b05e:	f7fa fa9a 	bl	8005596 <pbuf_header>
 800b062:	1e03      	subs	r3, r0, #0
 800b064:	d000      	beq.n	800b068 <icmp_input+0x50>
 800b066:	e19c      	b.n	800b3a2 <icmp_input+0x38a>
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	891b      	ldrh	r3, [r3, #8]
 800b06c:	2b03      	cmp	r3, #3
 800b06e:	d800      	bhi.n	800b072 <icmp_input+0x5a>
 800b070:	e197      	b.n	800b3a2 <icmp_input+0x38a>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	685a      	ldr	r2, [r3, #4]
 800b076:	2115      	movs	r1, #21
 800b078:	187b      	adds	r3, r7, r1
 800b07a:	7812      	ldrb	r2, [r2, #0]
 800b07c:	701a      	strb	r2, [r3, #0]
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 800b07e:	187b      	adds	r3, r7, r1
 800b080:	781b      	ldrb	r3, [r3, #0]
 800b082:	2b00      	cmp	r3, #0
 800b084:	d100      	bne.n	800b088 <icmp_input+0x70>
 800b086:	e184      	b.n	800b392 <icmp_input+0x37a>
 800b088:	2b08      	cmp	r3, #8
 800b08a:	d000      	beq.n	800b08e <icmp_input+0x76>
 800b08c:	e170      	b.n	800b370 <icmp_input+0x358>
       (as obviously, an echo request has been sent, too). */
    break; 
  case ICMP_ECHO:
#if !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
    {
      int accepted = 1;
 800b08e:	2301      	movs	r3, #1
 800b090:	61bb      	str	r3, [r7, #24]
#if !LWIP_MULTICAST_PING
      /* multicast destination address? */
      if (ip_addr_ismulticast(&current_iphdr_dest)) {
 800b092:	4bc6      	ldr	r3, [pc, #792]	; (800b3ac <icmp_input+0x394>)
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	22f0      	movs	r2, #240	; 0xf0
 800b098:	4013      	ands	r3, r2
 800b09a:	2be0      	cmp	r3, #224	; 0xe0
 800b09c:	d101      	bne.n	800b0a2 <icmp_input+0x8a>
        accepted = 0;
 800b09e:	2300      	movs	r3, #0
 800b0a0:	61bb      	str	r3, [r7, #24]
      }
#endif /* LWIP_MULTICAST_PING */
#if !LWIP_BROADCAST_PING
      /* broadcast destination address? */
      if (ip_addr_isbroadcast(&current_iphdr_dest, inp)) {
 800b0a2:	4bc2      	ldr	r3, [pc, #776]	; (800b3ac <icmp_input+0x394>)
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	683a      	ldr	r2, [r7, #0]
 800b0a8:	0011      	movs	r1, r2
 800b0aa:	0018      	movs	r0, r3
 800b0ac:	f000 ffe6 	bl	800c07c <ip4_addr_isbroadcast>
 800b0b0:	1e03      	subs	r3, r0, #0
 800b0b2:	d001      	beq.n	800b0b8 <icmp_input+0xa0>
        accepted = 0;
 800b0b4:	2300      	movs	r3, #0
 800b0b6:	61bb      	str	r3, [r7, #24]
      }
#endif /* LWIP_BROADCAST_PING */
      /* broadcast or multicast destination address not acceptd? */
      if (!accepted) {
 800b0b8:	69bb      	ldr	r3, [r7, #24]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d10c      	bne.n	800b0d8 <icmp_input+0xc0>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast or broadcast pings\n"));
        ICMP_STATS_INC(icmp.err);
 800b0be:	4bba      	ldr	r3, [pc, #744]	; (800b3a8 <icmp_input+0x390>)
 800b0c0:	2274      	movs	r2, #116	; 0x74
 800b0c2:	5a9b      	ldrh	r3, [r3, r2]
 800b0c4:	3301      	adds	r3, #1
 800b0c6:	b299      	uxth	r1, r3
 800b0c8:	4bb7      	ldr	r3, [pc, #732]	; (800b3a8 <icmp_input+0x390>)
 800b0ca:	2274      	movs	r2, #116	; 0x74
 800b0cc:	5299      	strh	r1, [r3, r2]
        pbuf_free(p);
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	0018      	movs	r0, r3
 800b0d2:	f7fa fae7 	bl	80056a4 <pbuf_free>
        return;
 800b0d6:	e193      	b.n	800b400 <icmp_input+0x3e8>
      }
    }
#endif /* !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	891b      	ldrh	r3, [r3, #8]
 800b0dc:	2b07      	cmp	r3, #7
 800b0de:	d800      	bhi.n	800b0e2 <icmp_input+0xca>
 800b0e0:	e16a      	b.n	800b3b8 <icmp_input+0x3a0>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
      goto lenerr;
    }
    if (inet_chksum_pbuf(p) != 0) {
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	0018      	movs	r0, r3
 800b0e6:	f000 fb58 	bl	800b79a <inet_chksum_pbuf>
 800b0ea:	1e03      	subs	r3, r0, #0
 800b0ec:	d00c      	beq.n	800b108 <icmp_input+0xf0>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
      pbuf_free(p);
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	0018      	movs	r0, r3
 800b0f2:	f7fa fad7 	bl	80056a4 <pbuf_free>
      ICMP_STATS_INC(icmp.chkerr);
 800b0f6:	4bac      	ldr	r3, [pc, #688]	; (800b3a8 <icmp_input+0x390>)
 800b0f8:	2268      	movs	r2, #104	; 0x68
 800b0fa:	5a9b      	ldrh	r3, [r3, r2]
 800b0fc:	3301      	adds	r3, #1
 800b0fe:	b299      	uxth	r1, r3
 800b100:	4ba9      	ldr	r3, [pc, #676]	; (800b3a8 <icmp_input+0x390>)
 800b102:	2268      	movs	r2, #104	; 0x68
 800b104:	5299      	strh	r1, [r3, r2]
      snmp_inc_icmpinerrors();
      return;
 800b106:	e17b      	b.n	800b400 <icmp_input+0x3e8>
    }
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (PBUF_IP_HLEN + PBUF_LINK_HLEN))) {
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	2122      	movs	r1, #34	; 0x22
 800b10c:	0018      	movs	r0, r3
 800b10e:	f7fa fa42 	bl	8005596 <pbuf_header>
 800b112:	1e03      	subs	r3, r0, #0
 800b114:	d039      	beq.n	800b18a <icmp_input+0x172>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* switch p->payload to ip header */
      if (pbuf_header(p, hlen)) {
 800b116:	2316      	movs	r3, #22
 800b118:	18fb      	adds	r3, r7, r3
 800b11a:	2200      	movs	r2, #0
 800b11c:	5e9a      	ldrsh	r2, [r3, r2]
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	0011      	movs	r1, r2
 800b122:	0018      	movs	r0, r3
 800b124:	f7fa fa37 	bl	8005596 <pbuf_header>
 800b128:	1e03      	subs	r3, r0, #0
 800b12a:	d000      	beq.n	800b12e <icmp_input+0x116>
 800b12c:	e152      	b.n	800b3d4 <icmp_input+0x3bc>
        LWIP_ASSERT("icmp_input: moving p->payload to ip header failed\n", 0);
        goto memerr;
      }
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	891b      	ldrh	r3, [r3, #8]
 800b132:	2200      	movs	r2, #0
 800b134:	0019      	movs	r1, r3
 800b136:	2002      	movs	r0, #2
 800b138:	f7fa f828 	bl	800518c <pbuf_alloc>
 800b13c:	0003      	movs	r3, r0
 800b13e:	613b      	str	r3, [r7, #16]
      if (r == NULL) {
 800b140:	693b      	ldr	r3, [r7, #16]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d100      	bne.n	800b148 <icmp_input+0x130>
 800b146:	e147      	b.n	800b3d8 <icmp_input+0x3c0>
        goto memerr;
      }
      LWIP_ASSERT("check that first pbuf can hold struct the ICMP header",
                  (r->len >= hlen + sizeof(struct icmp_echo_hdr)));
      /* copy the whole packet including ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 800b148:	687a      	ldr	r2, [r7, #4]
 800b14a:	693b      	ldr	r3, [r7, #16]
 800b14c:	0011      	movs	r1, r2
 800b14e:	0018      	movs	r0, r3
 800b150:	f7fa fb87 	bl	8005862 <pbuf_copy>
 800b154:	1e03      	subs	r3, r0, #0
 800b156:	d000      	beq.n	800b15a <icmp_input+0x142>
 800b158:	e140      	b.n	800b3dc <icmp_input+0x3c4>
        LWIP_ASSERT("icmp_input: copying to new pbuf failed\n", 0);
        goto memerr;
      }
      iphdr = (struct ip_hdr *)r->payload;
 800b15a:	693b      	ldr	r3, [r7, #16]
 800b15c:	685b      	ldr	r3, [r3, #4]
 800b15e:	61fb      	str	r3, [r7, #28]
      /* switch r->payload back to icmp header */
      if (pbuf_header(r, -hlen)) {
 800b160:	2316      	movs	r3, #22
 800b162:	18fb      	adds	r3, r7, r3
 800b164:	881b      	ldrh	r3, [r3, #0]
 800b166:	425b      	negs	r3, r3
 800b168:	b29b      	uxth	r3, r3
 800b16a:	b21a      	sxth	r2, r3
 800b16c:	693b      	ldr	r3, [r7, #16]
 800b16e:	0011      	movs	r1, r2
 800b170:	0018      	movs	r0, r3
 800b172:	f7fa fa10 	bl	8005596 <pbuf_header>
 800b176:	1e03      	subs	r3, r0, #0
 800b178:	d000      	beq.n	800b17c <icmp_input+0x164>
 800b17a:	e131      	b.n	800b3e0 <icmp_input+0x3c8>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
        goto memerr;
      }
      /* free the original p */
      pbuf_free(p);
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	0018      	movs	r0, r3
 800b180:	f7fa fa90 	bl	80056a4 <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
 800b184:	693b      	ldr	r3, [r7, #16]
 800b186:	607b      	str	r3, [r7, #4]
 800b188:	e009      	b.n	800b19e <icmp_input+0x186>
    } else {
      /* restore p->payload to point to icmp header */
      if (pbuf_header(p, -(s16_t)(PBUF_IP_HLEN + PBUF_LINK_HLEN))) {
 800b18a:	2322      	movs	r3, #34	; 0x22
 800b18c:	425a      	negs	r2, r3
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	0011      	movs	r1, r2
 800b192:	0018      	movs	r0, r3
 800b194:	f7fa f9ff 	bl	8005596 <pbuf_header>
 800b198:	1e03      	subs	r3, r0, #0
 800b19a:	d000      	beq.n	800b19e <icmp_input+0x186>
 800b19c:	e122      	b.n	800b3e4 <icmp_input+0x3cc>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	685b      	ldr	r3, [r3, #4]
 800b1a2:	60fb      	str	r3, [r7, #12]
    ip_addr_copy(iphdr->src, *ip_current_dest_addr());
 800b1a4:	4b81      	ldr	r3, [pc, #516]	; (800b3ac <icmp_input+0x394>)
 800b1a6:	681a      	ldr	r2, [r3, #0]
 800b1a8:	69fb      	ldr	r3, [r7, #28]
 800b1aa:	21ff      	movs	r1, #255	; 0xff
 800b1ac:	4011      	ands	r1, r2
 800b1ae:	000c      	movs	r4, r1
 800b1b0:	7b19      	ldrb	r1, [r3, #12]
 800b1b2:	2000      	movs	r0, #0
 800b1b4:	4001      	ands	r1, r0
 800b1b6:	1c08      	adds	r0, r1, #0
 800b1b8:	1c21      	adds	r1, r4, #0
 800b1ba:	4301      	orrs	r1, r0
 800b1bc:	7319      	strb	r1, [r3, #12]
 800b1be:	0a11      	lsrs	r1, r2, #8
 800b1c0:	20ff      	movs	r0, #255	; 0xff
 800b1c2:	4001      	ands	r1, r0
 800b1c4:	000c      	movs	r4, r1
 800b1c6:	7b59      	ldrb	r1, [r3, #13]
 800b1c8:	2000      	movs	r0, #0
 800b1ca:	4001      	ands	r1, r0
 800b1cc:	1c08      	adds	r0, r1, #0
 800b1ce:	1c21      	adds	r1, r4, #0
 800b1d0:	4301      	orrs	r1, r0
 800b1d2:	7359      	strb	r1, [r3, #13]
 800b1d4:	0c11      	lsrs	r1, r2, #16
 800b1d6:	20ff      	movs	r0, #255	; 0xff
 800b1d8:	4001      	ands	r1, r0
 800b1da:	000c      	movs	r4, r1
 800b1dc:	7b99      	ldrb	r1, [r3, #14]
 800b1de:	2000      	movs	r0, #0
 800b1e0:	4001      	ands	r1, r0
 800b1e2:	1c08      	adds	r0, r1, #0
 800b1e4:	1c21      	adds	r1, r4, #0
 800b1e6:	4301      	orrs	r1, r0
 800b1e8:	7399      	strb	r1, [r3, #14]
 800b1ea:	0e10      	lsrs	r0, r2, #24
 800b1ec:	7bda      	ldrb	r2, [r3, #15]
 800b1ee:	2100      	movs	r1, #0
 800b1f0:	400a      	ands	r2, r1
 800b1f2:	1c11      	adds	r1, r2, #0
 800b1f4:	1c02      	adds	r2, r0, #0
 800b1f6:	430a      	orrs	r2, r1
 800b1f8:	73da      	strb	r2, [r3, #15]
    ip_addr_copy(iphdr->dest, *ip_current_src_addr());
 800b1fa:	4b6d      	ldr	r3, [pc, #436]	; (800b3b0 <icmp_input+0x398>)
 800b1fc:	681a      	ldr	r2, [r3, #0]
 800b1fe:	69fb      	ldr	r3, [r7, #28]
 800b200:	21ff      	movs	r1, #255	; 0xff
 800b202:	4011      	ands	r1, r2
 800b204:	000c      	movs	r4, r1
 800b206:	7c19      	ldrb	r1, [r3, #16]
 800b208:	2000      	movs	r0, #0
 800b20a:	4001      	ands	r1, r0
 800b20c:	1c08      	adds	r0, r1, #0
 800b20e:	1c21      	adds	r1, r4, #0
 800b210:	4301      	orrs	r1, r0
 800b212:	7419      	strb	r1, [r3, #16]
 800b214:	0a11      	lsrs	r1, r2, #8
 800b216:	20ff      	movs	r0, #255	; 0xff
 800b218:	4001      	ands	r1, r0
 800b21a:	000c      	movs	r4, r1
 800b21c:	7c59      	ldrb	r1, [r3, #17]
 800b21e:	2000      	movs	r0, #0
 800b220:	4001      	ands	r1, r0
 800b222:	1c08      	adds	r0, r1, #0
 800b224:	1c21      	adds	r1, r4, #0
 800b226:	4301      	orrs	r1, r0
 800b228:	7459      	strb	r1, [r3, #17]
 800b22a:	0c11      	lsrs	r1, r2, #16
 800b22c:	20ff      	movs	r0, #255	; 0xff
 800b22e:	4001      	ands	r1, r0
 800b230:	000c      	movs	r4, r1
 800b232:	7c99      	ldrb	r1, [r3, #18]
 800b234:	2000      	movs	r0, #0
 800b236:	4001      	ands	r1, r0
 800b238:	1c08      	adds	r0, r1, #0
 800b23a:	1c21      	adds	r1, r4, #0
 800b23c:	4301      	orrs	r1, r0
 800b23e:	7499      	strb	r1, [r3, #18]
 800b240:	0e10      	lsrs	r0, r2, #24
 800b242:	7cda      	ldrb	r2, [r3, #19]
 800b244:	2100      	movs	r1, #0
 800b246:	400a      	ands	r2, r1
 800b248:	1c11      	adds	r1, r2, #0
 800b24a:	1c02      	adds	r2, r0, #0
 800b24c:	430a      	orrs	r2, r1
 800b24e:	74da      	strb	r2, [r3, #19]
    ICMPH_TYPE_SET(iecho, ICMP_ER);
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	2200      	movs	r2, #0
 800b254:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
    /* adjust the checksum */
    if (iecho->chksum >= PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	789a      	ldrb	r2, [r3, #2]
 800b25a:	78db      	ldrb	r3, [r3, #3]
 800b25c:	021b      	lsls	r3, r3, #8
 800b25e:	4313      	orrs	r3, r2
 800b260:	b29b      	uxth	r3, r3
 800b262:	4a54      	ldr	r2, [pc, #336]	; (800b3b4 <icmp_input+0x39c>)
 800b264:	4293      	cmp	r3, r2
 800b266:	d91c      	bls.n	800b2a2 <icmp_input+0x28a>
      iecho->chksum += PP_HTONS(ICMP_ECHO << 8) + 1;
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	789a      	ldrb	r2, [r3, #2]
 800b26c:	78db      	ldrb	r3, [r3, #3]
 800b26e:	021b      	lsls	r3, r3, #8
 800b270:	4313      	orrs	r3, r2
 800b272:	b29b      	uxth	r3, r3
 800b274:	3309      	adds	r3, #9
 800b276:	b29a      	uxth	r2, r3
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	21ff      	movs	r1, #255	; 0xff
 800b27c:	4011      	ands	r1, r2
 800b27e:	000c      	movs	r4, r1
 800b280:	7899      	ldrb	r1, [r3, #2]
 800b282:	2000      	movs	r0, #0
 800b284:	4001      	ands	r1, r0
 800b286:	1c08      	adds	r0, r1, #0
 800b288:	1c21      	adds	r1, r4, #0
 800b28a:	4301      	orrs	r1, r0
 800b28c:	7099      	strb	r1, [r3, #2]
 800b28e:	0a12      	lsrs	r2, r2, #8
 800b290:	b290      	uxth	r0, r2
 800b292:	78da      	ldrb	r2, [r3, #3]
 800b294:	2100      	movs	r1, #0
 800b296:	400a      	ands	r2, r1
 800b298:	1c11      	adds	r1, r2, #0
 800b29a:	1c02      	adds	r2, r0, #0
 800b29c:	430a      	orrs	r2, r1
 800b29e:	70da      	strb	r2, [r3, #3]
 800b2a0:	e01b      	b.n	800b2da <icmp_input+0x2c2>
    } else {
      iecho->chksum += PP_HTONS(ICMP_ECHO << 8);
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	789a      	ldrb	r2, [r3, #2]
 800b2a6:	78db      	ldrb	r3, [r3, #3]
 800b2a8:	021b      	lsls	r3, r3, #8
 800b2aa:	4313      	orrs	r3, r2
 800b2ac:	b29b      	uxth	r3, r3
 800b2ae:	3308      	adds	r3, #8
 800b2b0:	b29a      	uxth	r2, r3
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	21ff      	movs	r1, #255	; 0xff
 800b2b6:	4011      	ands	r1, r2
 800b2b8:	000c      	movs	r4, r1
 800b2ba:	7899      	ldrb	r1, [r3, #2]
 800b2bc:	2000      	movs	r0, #0
 800b2be:	4001      	ands	r1, r0
 800b2c0:	1c08      	adds	r0, r1, #0
 800b2c2:	1c21      	adds	r1, r4, #0
 800b2c4:	4301      	orrs	r1, r0
 800b2c6:	7099      	strb	r1, [r3, #2]
 800b2c8:	0a12      	lsrs	r2, r2, #8
 800b2ca:	b290      	uxth	r0, r2
 800b2cc:	78da      	ldrb	r2, [r3, #3]
 800b2ce:	2100      	movs	r1, #0
 800b2d0:	400a      	ands	r2, r1
 800b2d2:	1c11      	adds	r1, r2, #0
 800b2d4:	1c02      	adds	r2, r0, #0
 800b2d6:	430a      	orrs	r2, r1
 800b2d8:	70da      	strb	r2, [r3, #3]
#else /* CHECKSUM_GEN_ICMP */
    iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

    /* Set the correct TTL and recalculate the header checksum. */
    IPH_TTL_SET(iphdr, ICMP_TTL);
 800b2da:	69fb      	ldr	r3, [r7, #28]
 800b2dc:	22ff      	movs	r2, #255	; 0xff
 800b2de:	721a      	strb	r2, [r3, #8]
    IPH_CHKSUM_SET(iphdr, 0);
 800b2e0:	69fb      	ldr	r3, [r7, #28]
 800b2e2:	7a9a      	ldrb	r2, [r3, #10]
 800b2e4:	2100      	movs	r1, #0
 800b2e6:	400a      	ands	r2, r1
 800b2e8:	729a      	strb	r2, [r3, #10]
 800b2ea:	7ada      	ldrb	r2, [r3, #11]
 800b2ec:	2100      	movs	r1, #0
 800b2ee:	400a      	ands	r2, r1
 800b2f0:	72da      	strb	r2, [r3, #11]
#if CHECKSUM_GEN_IP
    IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 800b2f2:	69fb      	ldr	r3, [r7, #28]
 800b2f4:	2114      	movs	r1, #20
 800b2f6:	0018      	movs	r0, r3
 800b2f8:	f000 fa3a 	bl	800b770 <inet_chksum>
 800b2fc:	0003      	movs	r3, r0
 800b2fe:	001a      	movs	r2, r3
 800b300:	69fb      	ldr	r3, [r7, #28]
 800b302:	21ff      	movs	r1, #255	; 0xff
 800b304:	4011      	ands	r1, r2
 800b306:	000c      	movs	r4, r1
 800b308:	7a99      	ldrb	r1, [r3, #10]
 800b30a:	2000      	movs	r0, #0
 800b30c:	4001      	ands	r1, r0
 800b30e:	1c08      	adds	r0, r1, #0
 800b310:	1c21      	adds	r1, r4, #0
 800b312:	4301      	orrs	r1, r0
 800b314:	7299      	strb	r1, [r3, #10]
 800b316:	0a12      	lsrs	r2, r2, #8
 800b318:	b290      	uxth	r0, r2
 800b31a:	7ada      	ldrb	r2, [r3, #11]
 800b31c:	2100      	movs	r1, #0
 800b31e:	400a      	ands	r2, r1
 800b320:	1c11      	adds	r1, r2, #0
 800b322:	1c02      	adds	r2, r0, #0
 800b324:	430a      	orrs	r2, r1
 800b326:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    ICMP_STATS_INC(icmp.xmit);
 800b328:	4b1f      	ldr	r3, [pc, #124]	; (800b3a8 <icmp_input+0x390>)
 800b32a:	2260      	movs	r2, #96	; 0x60
 800b32c:	5a9b      	ldrh	r3, [r3, r2]
 800b32e:	3301      	adds	r3, #1
 800b330:	b299      	uxth	r1, r3
 800b332:	4b1d      	ldr	r3, [pc, #116]	; (800b3a8 <icmp_input+0x390>)
 800b334:	2260      	movs	r2, #96	; 0x60
 800b336:	5299      	strh	r1, [r3, r2]
    /* increase number of messages attempted to send */
    snmp_inc_icmpoutmsgs();
    /* increase number of echo replies attempted to send */
    snmp_inc_icmpoutechoreps();

    if(pbuf_header(p, hlen)) {
 800b338:	2316      	movs	r3, #22
 800b33a:	18fb      	adds	r3, r7, r3
 800b33c:	2200      	movs	r2, #0
 800b33e:	5e9a      	ldrsh	r2, [r3, r2]
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	0011      	movs	r1, r2
 800b344:	0018      	movs	r0, r3
 800b346:	f7fa f926 	bl	8005596 <pbuf_header>
 800b34a:	1e03      	subs	r3, r0, #0
 800b34c:	d123      	bne.n	800b396 <icmp_input+0x37e>
      LWIP_ASSERT("Can't move over header in packet", 0);
    } else {
      err_t ret;
      /* send an ICMP packet, src addr is the dest addr of the curren packet */
      ret = ip_output_if(p, ip_current_dest_addr(), IP_HDRINCL,
 800b34e:	230b      	movs	r3, #11
 800b350:	18fc      	adds	r4, r7, r3
 800b352:	4916      	ldr	r1, [pc, #88]	; (800b3ac <icmp_input+0x394>)
 800b354:	6878      	ldr	r0, [r7, #4]
 800b356:	683b      	ldr	r3, [r7, #0]
 800b358:	9302      	str	r3, [sp, #8]
 800b35a:	2301      	movs	r3, #1
 800b35c:	9301      	str	r3, [sp, #4]
 800b35e:	2300      	movs	r3, #0
 800b360:	9300      	str	r3, [sp, #0]
 800b362:	23ff      	movs	r3, #255	; 0xff
 800b364:	2200      	movs	r2, #0
 800b366:	f000 fc7d 	bl	800bc64 <ip_output_if>
 800b36a:	0003      	movs	r3, r0
 800b36c:	7023      	strb	r3, [r4, #0]
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %c.\n", ret));
      }
    }
    break;
 800b36e:	e012      	b.n	800b396 <icmp_input+0x37e>
  default:
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n", 
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
 800b370:	4b0d      	ldr	r3, [pc, #52]	; (800b3a8 <icmp_input+0x390>)
 800b372:	2270      	movs	r2, #112	; 0x70
 800b374:	5a9b      	ldrh	r3, [r3, r2]
 800b376:	3301      	adds	r3, #1
 800b378:	b299      	uxth	r1, r3
 800b37a:	4b0b      	ldr	r3, [pc, #44]	; (800b3a8 <icmp_input+0x390>)
 800b37c:	2270      	movs	r2, #112	; 0x70
 800b37e:	5299      	strh	r1, [r3, r2]
    ICMP_STATS_INC(icmp.drop);
 800b380:	4b09      	ldr	r3, [pc, #36]	; (800b3a8 <icmp_input+0x390>)
 800b382:	2266      	movs	r2, #102	; 0x66
 800b384:	5a9b      	ldrh	r3, [r3, r2]
 800b386:	3301      	adds	r3, #1
 800b388:	b299      	uxth	r1, r3
 800b38a:	4b07      	ldr	r3, [pc, #28]	; (800b3a8 <icmp_input+0x390>)
 800b38c:	2266      	movs	r2, #102	; 0x66
 800b38e:	5299      	strh	r1, [r3, r2]
 800b390:	e002      	b.n	800b398 <icmp_input+0x380>
    break; 
 800b392:	46c0      	nop			; (mov r8, r8)
 800b394:	e000      	b.n	800b398 <icmp_input+0x380>
    break;
 800b396:	46c0      	nop			; (mov r8, r8)
  }
  pbuf_free(p);
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	0018      	movs	r0, r3
 800b39c:	f7fa f982 	bl	80056a4 <pbuf_free>
  return;
 800b3a0:	e02e      	b.n	800b400 <icmp_input+0x3e8>
lenerr:
 800b3a2:	46c0      	nop			; (mov r8, r8)
 800b3a4:	e009      	b.n	800b3ba <icmp_input+0x3a2>
 800b3a6:	46c0      	nop			; (mov r8, r8)
 800b3a8:	20003158 	.word	0x20003158
 800b3ac:	2000329c 	.word	0x2000329c
 800b3b0:	20003294 	.word	0x20003294
 800b3b4:	0000fff6 	.word	0x0000fff6
      goto lenerr;
 800b3b8:	46c0      	nop			; (mov r8, r8)
  pbuf_free(p);
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	0018      	movs	r0, r3
 800b3be:	f7fa f971 	bl	80056a4 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
 800b3c2:	4b11      	ldr	r3, [pc, #68]	; (800b408 <icmp_input+0x3f0>)
 800b3c4:	226a      	movs	r2, #106	; 0x6a
 800b3c6:	5a9b      	ldrh	r3, [r3, r2]
 800b3c8:	3301      	adds	r3, #1
 800b3ca:	b299      	uxth	r1, r3
 800b3cc:	4b0e      	ldr	r3, [pc, #56]	; (800b408 <icmp_input+0x3f0>)
 800b3ce:	226a      	movs	r2, #106	; 0x6a
 800b3d0:	5299      	strh	r1, [r3, r2]
  snmp_inc_icmpinerrors();
  return;
 800b3d2:	e015      	b.n	800b400 <icmp_input+0x3e8>
        goto memerr;
 800b3d4:	46c0      	nop			; (mov r8, r8)
 800b3d6:	e006      	b.n	800b3e6 <icmp_input+0x3ce>
        goto memerr;
 800b3d8:	46c0      	nop			; (mov r8, r8)
 800b3da:	e004      	b.n	800b3e6 <icmp_input+0x3ce>
        goto memerr;
 800b3dc:	46c0      	nop			; (mov r8, r8)
 800b3de:	e002      	b.n	800b3e6 <icmp_input+0x3ce>
        goto memerr;
 800b3e0:	46c0      	nop			; (mov r8, r8)
 800b3e2:	e000      	b.n	800b3e6 <icmp_input+0x3ce>
        goto memerr;
 800b3e4:	46c0      	nop			; (mov r8, r8)
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
memerr:
  pbuf_free(p);
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	0018      	movs	r0, r3
 800b3ea:	f7fa f95b 	bl	80056a4 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
 800b3ee:	4b06      	ldr	r3, [pc, #24]	; (800b408 <icmp_input+0x3f0>)
 800b3f0:	2274      	movs	r2, #116	; 0x74
 800b3f2:	5a9b      	ldrh	r3, [r3, r2]
 800b3f4:	3301      	adds	r3, #1
 800b3f6:	b299      	uxth	r1, r3
 800b3f8:	4b03      	ldr	r3, [pc, #12]	; (800b408 <icmp_input+0x3f0>)
 800b3fa:	2274      	movs	r2, #116	; 0x74
 800b3fc:	5299      	strh	r1, [r3, r2]
  snmp_inc_icmpinerrors();
  return;
 800b3fe:	46c0      	nop			; (mov r8, r8)
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
}
 800b400:	46bd      	mov	sp, r7
 800b402:	b009      	add	sp, #36	; 0x24
 800b404:	bd90      	pop	{r4, r7, pc}
 800b406:	46c0      	nop			; (mov r8, r8)
 800b408:	20003158 	.word	0x20003158

0800b40c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800b40c:	b580      	push	{r7, lr}
 800b40e:	b082      	sub	sp, #8
 800b410:	af00      	add	r7, sp, #0
 800b412:	6078      	str	r0, [r7, #4]
 800b414:	000a      	movs	r2, r1
 800b416:	1cfb      	adds	r3, r7, #3
 800b418:	701a      	strb	r2, [r3, #0]
  icmp_send_response(p, ICMP_DUR, t);
 800b41a:	1cfb      	adds	r3, r7, #3
 800b41c:	781a      	ldrb	r2, [r3, #0]
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	2103      	movs	r1, #3
 800b422:	0018      	movs	r0, r3
 800b424:	f000 f816 	bl	800b454 <icmp_send_response>
}
 800b428:	46c0      	nop			; (mov r8, r8)
 800b42a:	46bd      	mov	sp, r7
 800b42c:	b002      	add	sp, #8
 800b42e:	bd80      	pop	{r7, pc}

0800b430 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800b430:	b580      	push	{r7, lr}
 800b432:	b082      	sub	sp, #8
 800b434:	af00      	add	r7, sp, #0
 800b436:	6078      	str	r0, [r7, #4]
 800b438:	000a      	movs	r2, r1
 800b43a:	1cfb      	adds	r3, r7, #3
 800b43c:	701a      	strb	r2, [r3, #0]
  icmp_send_response(p, ICMP_TE, t);
 800b43e:	1cfb      	adds	r3, r7, #3
 800b440:	781a      	ldrb	r2, [r3, #0]
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	210b      	movs	r1, #11
 800b446:	0018      	movs	r0, r3
 800b448:	f000 f804 	bl	800b454 <icmp_send_response>
}
 800b44c:	46c0      	nop			; (mov r8, r8)
 800b44e:	46bd      	mov	sp, r7
 800b450:	b002      	add	sp, #8
 800b452:	bd80      	pop	{r7, pc}

0800b454 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800b454:	b590      	push	{r4, r7, lr}
 800b456:	b089      	sub	sp, #36	; 0x24
 800b458:	af02      	add	r7, sp, #8
 800b45a:	6078      	str	r0, [r7, #4]
 800b45c:	0008      	movs	r0, r1
 800b45e:	0011      	movs	r1, r2
 800b460:	1cfb      	adds	r3, r7, #3
 800b462:	1c02      	adds	r2, r0, #0
 800b464:	701a      	strb	r2, [r3, #0]
 800b466:	1cbb      	adds	r3, r7, #2
 800b468:	1c0a      	adds	r2, r1, #0
 800b46a:	701a      	strb	r2, [r3, #0]
  /* we can use the echo header here */
  struct icmp_echo_hdr *icmphdr;
  ip_addr_t iphdr_src;

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800b46c:	2200      	movs	r2, #0
 800b46e:	2124      	movs	r1, #36	; 0x24
 800b470:	2001      	movs	r0, #1
 800b472:	f7f9 fe8b 	bl	800518c <pbuf_alloc>
 800b476:	0003      	movs	r3, r0
 800b478:	617b      	str	r3, [r7, #20]
                 PBUF_RAM);
  if (q == NULL) {
 800b47a:	697b      	ldr	r3, [r7, #20]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d073      	beq.n	800b568 <icmp_send_response+0x114>
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	685b      	ldr	r3, [r3, #4]
 800b484:	613b      	str	r3, [r7, #16]
  ip_addr_debug_print(ICMP_DEBUG, &(iphdr->src));
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip_addr_debug_print(ICMP_DEBUG, &(iphdr->dest));
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800b486:	697b      	ldr	r3, [r7, #20]
 800b488:	685b      	ldr	r3, [r3, #4]
 800b48a:	60fb      	str	r3, [r7, #12]
  icmphdr->type = type;
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	1cfa      	adds	r2, r7, #3
 800b490:	7812      	ldrb	r2, [r2, #0]
 800b492:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	1cba      	adds	r2, r7, #2
 800b498:	7812      	ldrb	r2, [r2, #0]
 800b49a:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	791a      	ldrb	r2, [r3, #4]
 800b4a0:	2100      	movs	r1, #0
 800b4a2:	400a      	ands	r2, r1
 800b4a4:	711a      	strb	r2, [r3, #4]
 800b4a6:	795a      	ldrb	r2, [r3, #5]
 800b4a8:	2100      	movs	r1, #0
 800b4aa:	400a      	ands	r2, r1
 800b4ac:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	799a      	ldrb	r2, [r3, #6]
 800b4b2:	2100      	movs	r1, #0
 800b4b4:	400a      	ands	r2, r1
 800b4b6:	719a      	strb	r2, [r3, #6]
 800b4b8:	79da      	ldrb	r2, [r3, #7]
 800b4ba:	2100      	movs	r1, #0
 800b4bc:	400a      	ands	r2, r1
 800b4be:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800b4c0:	697b      	ldr	r3, [r7, #20]
 800b4c2:	685b      	ldr	r3, [r3, #4]
 800b4c4:	3308      	adds	r3, #8
 800b4c6:	0018      	movs	r0, r3
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	685b      	ldr	r3, [r3, #4]
 800b4cc:	221c      	movs	r2, #28
 800b4ce:	0019      	movs	r1, r3
 800b4d0:	f004 fbe7 	bl	800fca2 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  /* calculate checksum */
  icmphdr->chksum = 0;
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	789a      	ldrb	r2, [r3, #2]
 800b4d8:	2100      	movs	r1, #0
 800b4da:	400a      	ands	r2, r1
 800b4dc:	709a      	strb	r2, [r3, #2]
 800b4de:	78da      	ldrb	r2, [r3, #3]
 800b4e0:	2100      	movs	r1, #0
 800b4e2:	400a      	ands	r2, r1
 800b4e4:	70da      	strb	r2, [r3, #3]
  icmphdr->chksum = inet_chksum(icmphdr, q->len);
 800b4e6:	697b      	ldr	r3, [r7, #20]
 800b4e8:	895a      	ldrh	r2, [r3, #10]
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	0011      	movs	r1, r2
 800b4ee:	0018      	movs	r0, r3
 800b4f0:	f000 f93e 	bl	800b770 <inet_chksum>
 800b4f4:	0003      	movs	r3, r0
 800b4f6:	001a      	movs	r2, r3
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	21ff      	movs	r1, #255	; 0xff
 800b4fc:	4011      	ands	r1, r2
 800b4fe:	000c      	movs	r4, r1
 800b500:	7899      	ldrb	r1, [r3, #2]
 800b502:	2000      	movs	r0, #0
 800b504:	4001      	ands	r1, r0
 800b506:	1c08      	adds	r0, r1, #0
 800b508:	1c21      	adds	r1, r4, #0
 800b50a:	4301      	orrs	r1, r0
 800b50c:	7099      	strb	r1, [r3, #2]
 800b50e:	0a12      	lsrs	r2, r2, #8
 800b510:	b290      	uxth	r0, r2
 800b512:	78da      	ldrb	r2, [r3, #3]
 800b514:	2100      	movs	r1, #0
 800b516:	400a      	ands	r2, r1
 800b518:	1c11      	adds	r1, r2, #0
 800b51a:	1c02      	adds	r2, r0, #0
 800b51c:	430a      	orrs	r2, r1
 800b51e:	70da      	strb	r2, [r3, #3]
  ICMP_STATS_INC(icmp.xmit);
 800b520:	4b13      	ldr	r3, [pc, #76]	; (800b570 <icmp_send_response+0x11c>)
 800b522:	2260      	movs	r2, #96	; 0x60
 800b524:	5a9b      	ldrh	r3, [r3, r2]
 800b526:	3301      	adds	r3, #1
 800b528:	b299      	uxth	r1, r3
 800b52a:	4b11      	ldr	r3, [pc, #68]	; (800b570 <icmp_send_response+0x11c>)
 800b52c:	2260      	movs	r2, #96	; 0x60
 800b52e:	5299      	strh	r1, [r3, r2]
  /* increase number of messages attempted to send */
  snmp_inc_icmpoutmsgs();
  /* increase number of destination unreachable messages attempted to send */
  snmp_inc_icmpouttimeexcds();
  ip_addr_copy(iphdr_src, iphdr->src);
 800b530:	693b      	ldr	r3, [r7, #16]
 800b532:	7b1a      	ldrb	r2, [r3, #12]
 800b534:	7b59      	ldrb	r1, [r3, #13]
 800b536:	0209      	lsls	r1, r1, #8
 800b538:	430a      	orrs	r2, r1
 800b53a:	7b99      	ldrb	r1, [r3, #14]
 800b53c:	0409      	lsls	r1, r1, #16
 800b53e:	430a      	orrs	r2, r1
 800b540:	7bdb      	ldrb	r3, [r3, #15]
 800b542:	061b      	lsls	r3, r3, #24
 800b544:	4313      	orrs	r3, r2
 800b546:	60bb      	str	r3, [r7, #8]
  ip_output(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP);
 800b548:	2308      	movs	r3, #8
 800b54a:	18fa      	adds	r2, r7, r3
 800b54c:	6978      	ldr	r0, [r7, #20]
 800b54e:	2301      	movs	r3, #1
 800b550:	9301      	str	r3, [sp, #4]
 800b552:	2300      	movs	r3, #0
 800b554:	9300      	str	r3, [sp, #0]
 800b556:	23ff      	movs	r3, #255	; 0xff
 800b558:	2100      	movs	r1, #0
 800b55a:	f000 fd59 	bl	800c010 <ip_output>
  pbuf_free(q);
 800b55e:	697b      	ldr	r3, [r7, #20]
 800b560:	0018      	movs	r0, r3
 800b562:	f7fa f89f 	bl	80056a4 <pbuf_free>
 800b566:	e000      	b.n	800b56a <icmp_send_response+0x116>
    return;
 800b568:	46c0      	nop			; (mov r8, r8)
}
 800b56a:	46bd      	mov	sp, r7
 800b56c:	b007      	add	sp, #28
 800b56e:	bd90      	pop	{r4, r7, pc}
 800b570:	20003158 	.word	0x20003158

0800b574 <lwip_standard_chksum>:
 * @return host order (!) lwip checksum (non-inverted Internet sum) 
 */

static u16_t
lwip_standard_chksum(void *dataptr, int len)
{
 800b574:	b580      	push	{r7, lr}
 800b576:	b088      	sub	sp, #32
 800b578:	af00      	add	r7, sp, #0
 800b57a:	6078      	str	r0, [r7, #4]
 800b57c:	6039      	str	r1, [r7, #0]
  u8_t *pb = (u8_t *)dataptr;
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	61fb      	str	r3, [r7, #28]
  u16_t *ps, t = 0;
 800b582:	230e      	movs	r3, #14
 800b584:	18fb      	adds	r3, r7, r3
 800b586:	2200      	movs	r2, #0
 800b588:	801a      	strh	r2, [r3, #0]
  u32_t sum = 0;
 800b58a:	2300      	movs	r3, #0
 800b58c:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800b58e:	69fb      	ldr	r3, [r7, #28]
 800b590:	2201      	movs	r2, #1
 800b592:	4013      	ands	r3, r2
 800b594:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800b596:	693b      	ldr	r3, [r7, #16]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d00d      	beq.n	800b5b8 <lwip_standard_chksum+0x44>
 800b59c:	683b      	ldr	r3, [r7, #0]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	dd0a      	ble.n	800b5b8 <lwip_standard_chksum+0x44>
    ((u8_t *)&t)[1] = *pb++;
 800b5a2:	69fa      	ldr	r2, [r7, #28]
 800b5a4:	1c53      	adds	r3, r2, #1
 800b5a6:	61fb      	str	r3, [r7, #28]
 800b5a8:	230e      	movs	r3, #14
 800b5aa:	18fb      	adds	r3, r7, r3
 800b5ac:	3301      	adds	r3, #1
 800b5ae:	7812      	ldrb	r2, [r2, #0]
 800b5b0:	701a      	strb	r2, [r3, #0]
    len--;
 800b5b2:	683b      	ldr	r3, [r7, #0]
 800b5b4:	3b01      	subs	r3, #1
 800b5b6:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (u16_t *)(void *)pb;
 800b5b8:	69fb      	ldr	r3, [r7, #28]
 800b5ba:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800b5bc:	e00a      	b.n	800b5d4 <lwip_standard_chksum+0x60>
    sum += *ps++;
 800b5be:	69bb      	ldr	r3, [r7, #24]
 800b5c0:	1c9a      	adds	r2, r3, #2
 800b5c2:	61ba      	str	r2, [r7, #24]
 800b5c4:	881b      	ldrh	r3, [r3, #0]
 800b5c6:	001a      	movs	r2, r3
 800b5c8:	697b      	ldr	r3, [r7, #20]
 800b5ca:	189b      	adds	r3, r3, r2
 800b5cc:	617b      	str	r3, [r7, #20]
    len -= 2;
 800b5ce:	683b      	ldr	r3, [r7, #0]
 800b5d0:	3b02      	subs	r3, #2
 800b5d2:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800b5d4:	683b      	ldr	r3, [r7, #0]
 800b5d6:	2b01      	cmp	r3, #1
 800b5d8:	dcf1      	bgt.n	800b5be <lwip_standard_chksum+0x4a>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800b5da:	683b      	ldr	r3, [r7, #0]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	dd04      	ble.n	800b5ea <lwip_standard_chksum+0x76>
    ((u8_t *)&t)[0] = *(u8_t *)ps;
 800b5e0:	230e      	movs	r3, #14
 800b5e2:	18fb      	adds	r3, r7, r3
 800b5e4:	69ba      	ldr	r2, [r7, #24]
 800b5e6:	7812      	ldrb	r2, [r2, #0]
 800b5e8:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800b5ea:	230e      	movs	r3, #14
 800b5ec:	18fb      	adds	r3, r7, r3
 800b5ee:	881b      	ldrh	r3, [r3, #0]
 800b5f0:	001a      	movs	r2, r3
 800b5f2:	697b      	ldr	r3, [r7, #20]
 800b5f4:	189b      	adds	r3, r3, r2
 800b5f6:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is propably faster than if statements... */
  sum = FOLD_U32T(sum);
 800b5f8:	697b      	ldr	r3, [r7, #20]
 800b5fa:	0c1a      	lsrs	r2, r3, #16
 800b5fc:	697b      	ldr	r3, [r7, #20]
 800b5fe:	041b      	lsls	r3, r3, #16
 800b600:	0c1b      	lsrs	r3, r3, #16
 800b602:	18d3      	adds	r3, r2, r3
 800b604:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800b606:	697b      	ldr	r3, [r7, #20]
 800b608:	0c1a      	lsrs	r2, r3, #16
 800b60a:	697b      	ldr	r3, [r7, #20]
 800b60c:	041b      	lsls	r3, r3, #16
 800b60e:	0c1b      	lsrs	r3, r3, #16
 800b610:	18d3      	adds	r3, r2, r3
 800b612:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800b614:	693b      	ldr	r3, [r7, #16]
 800b616:	2b00      	cmp	r3, #0
 800b618:	d009      	beq.n	800b62e <lwip_standard_chksum+0xba>
    sum = SWAP_BYTES_IN_WORD(sum);
 800b61a:	697b      	ldr	r3, [r7, #20]
 800b61c:	021b      	lsls	r3, r3, #8
 800b61e:	041b      	lsls	r3, r3, #16
 800b620:	0c1a      	lsrs	r2, r3, #16
 800b622:	697b      	ldr	r3, [r7, #20]
 800b624:	0a1b      	lsrs	r3, r3, #8
 800b626:	21ff      	movs	r1, #255	; 0xff
 800b628:	400b      	ands	r3, r1
 800b62a:	4313      	orrs	r3, r2
 800b62c:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800b62e:	697b      	ldr	r3, [r7, #20]
 800b630:	b29b      	uxth	r3, r3
}
 800b632:	0018      	movs	r0, r3
 800b634:	46bd      	mov	sp, r7
 800b636:	b008      	add	sp, #32
 800b638:	bd80      	pop	{r7, pc}

0800b63a <inet_chksum_pseudo>:
 */
u16_t
inet_chksum_pseudo(struct pbuf *p,
       ip_addr_t *src, ip_addr_t *dest,
       u8_t proto, u16_t proto_len)
{
 800b63a:	b580      	push	{r7, lr}
 800b63c:	b088      	sub	sp, #32
 800b63e:	af00      	add	r7, sp, #0
 800b640:	60f8      	str	r0, [r7, #12]
 800b642:	60b9      	str	r1, [r7, #8]
 800b644:	607a      	str	r2, [r7, #4]
 800b646:	001a      	movs	r2, r3
 800b648:	1cfb      	adds	r3, r7, #3
 800b64a:	701a      	strb	r2, [r3, #0]
  u32_t acc;
  u32_t addr;
  struct pbuf *q;
  u8_t swapped;

  acc = 0;
 800b64c:	2300      	movs	r3, #0
 800b64e:	61fb      	str	r3, [r7, #28]
  swapped = 0;
 800b650:	2317      	movs	r3, #23
 800b652:	18fb      	adds	r3, r7, r3
 800b654:	2200      	movs	r2, #0
 800b656:	701a      	strb	r2, [r3, #0]
  /* iterate through all pbuf in chain */
  for(q = p; q != NULL; q = q->next) {
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	61bb      	str	r3, [r7, #24]
 800b65c:	e02e      	b.n	800b6bc <inet_chksum_pseudo+0x82>
    LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
      (void *)q, (void *)q->next));
    acc += LWIP_CHKSUM(q->payload, q->len);
 800b65e:	69bb      	ldr	r3, [r7, #24]
 800b660:	685a      	ldr	r2, [r3, #4]
 800b662:	69bb      	ldr	r3, [r7, #24]
 800b664:	895b      	ldrh	r3, [r3, #10]
 800b666:	0019      	movs	r1, r3
 800b668:	0010      	movs	r0, r2
 800b66a:	f7ff ff83 	bl	800b574 <lwip_standard_chksum>
 800b66e:	0003      	movs	r3, r0
 800b670:	001a      	movs	r2, r3
 800b672:	69fb      	ldr	r3, [r7, #28]
 800b674:	189b      	adds	r3, r3, r2
 800b676:	61fb      	str	r3, [r7, #28]
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
    /* just executing this next line is probably faster that the if statement needed
       to check whether we really need to execute it, and does no harm */
    acc = FOLD_U32T(acc);
 800b678:	69fb      	ldr	r3, [r7, #28]
 800b67a:	0c1a      	lsrs	r2, r3, #16
 800b67c:	69fb      	ldr	r3, [r7, #28]
 800b67e:	041b      	lsls	r3, r3, #16
 800b680:	0c1b      	lsrs	r3, r3, #16
 800b682:	18d3      	adds	r3, r2, r3
 800b684:	61fb      	str	r3, [r7, #28]
    if (q->len % 2 != 0) {
 800b686:	69bb      	ldr	r3, [r7, #24]
 800b688:	895b      	ldrh	r3, [r3, #10]
 800b68a:	2201      	movs	r2, #1
 800b68c:	4013      	ands	r3, r2
 800b68e:	b29b      	uxth	r3, r3
 800b690:	2b00      	cmp	r3, #0
 800b692:	d010      	beq.n	800b6b6 <inet_chksum_pseudo+0x7c>
      swapped = 1 - swapped;
 800b694:	2217      	movs	r2, #23
 800b696:	18bb      	adds	r3, r7, r2
 800b698:	18ba      	adds	r2, r7, r2
 800b69a:	7812      	ldrb	r2, [r2, #0]
 800b69c:	2101      	movs	r1, #1
 800b69e:	1a8a      	subs	r2, r1, r2
 800b6a0:	701a      	strb	r2, [r3, #0]
      acc = SWAP_BYTES_IN_WORD(acc);
 800b6a2:	69fb      	ldr	r3, [r7, #28]
 800b6a4:	021b      	lsls	r3, r3, #8
 800b6a6:	041b      	lsls	r3, r3, #16
 800b6a8:	0c1a      	lsrs	r2, r3, #16
 800b6aa:	69fb      	ldr	r3, [r7, #28]
 800b6ac:	0a1b      	lsrs	r3, r3, #8
 800b6ae:	21ff      	movs	r1, #255	; 0xff
 800b6b0:	400b      	ands	r3, r1
 800b6b2:	4313      	orrs	r3, r2
 800b6b4:	61fb      	str	r3, [r7, #28]
  for(q = p; q != NULL; q = q->next) {
 800b6b6:	69bb      	ldr	r3, [r7, #24]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	61bb      	str	r3, [r7, #24]
 800b6bc:	69bb      	ldr	r3, [r7, #24]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d1cd      	bne.n	800b65e <inet_chksum_pseudo+0x24>
    }
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
  }

  if (swapped) {
 800b6c2:	2317      	movs	r3, #23
 800b6c4:	18fb      	adds	r3, r7, r3
 800b6c6:	781b      	ldrb	r3, [r3, #0]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d009      	beq.n	800b6e0 <inet_chksum_pseudo+0xa6>
    acc = SWAP_BYTES_IN_WORD(acc);
 800b6cc:	69fb      	ldr	r3, [r7, #28]
 800b6ce:	021b      	lsls	r3, r3, #8
 800b6d0:	041b      	lsls	r3, r3, #16
 800b6d2:	0c1a      	lsrs	r2, r3, #16
 800b6d4:	69fb      	ldr	r3, [r7, #28]
 800b6d6:	0a1b      	lsrs	r3, r3, #8
 800b6d8:	21ff      	movs	r1, #255	; 0xff
 800b6da:	400b      	ands	r3, r1
 800b6dc:	4313      	orrs	r3, r2
 800b6de:	61fb      	str	r3, [r7, #28]
  }
  addr = ip4_addr_get_u32(src);
 800b6e0:	68bb      	ldr	r3, [r7, #8]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	613b      	str	r3, [r7, #16]
  acc += (addr & 0xffffUL);
 800b6e6:	693b      	ldr	r3, [r7, #16]
 800b6e8:	041b      	lsls	r3, r3, #16
 800b6ea:	0c1b      	lsrs	r3, r3, #16
 800b6ec:	69fa      	ldr	r2, [r7, #28]
 800b6ee:	18d3      	adds	r3, r2, r3
 800b6f0:	61fb      	str	r3, [r7, #28]
  acc += ((addr >> 16) & 0xffffUL);
 800b6f2:	693b      	ldr	r3, [r7, #16]
 800b6f4:	0c1b      	lsrs	r3, r3, #16
 800b6f6:	69fa      	ldr	r2, [r7, #28]
 800b6f8:	18d3      	adds	r3, r2, r3
 800b6fa:	61fb      	str	r3, [r7, #28]
  addr = ip4_addr_get_u32(dest);
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	613b      	str	r3, [r7, #16]
  acc += (addr & 0xffffUL);
 800b702:	693b      	ldr	r3, [r7, #16]
 800b704:	041b      	lsls	r3, r3, #16
 800b706:	0c1b      	lsrs	r3, r3, #16
 800b708:	69fa      	ldr	r2, [r7, #28]
 800b70a:	18d3      	adds	r3, r2, r3
 800b70c:	61fb      	str	r3, [r7, #28]
  acc += ((addr >> 16) & 0xffffUL);
 800b70e:	693b      	ldr	r3, [r7, #16]
 800b710:	0c1b      	lsrs	r3, r3, #16
 800b712:	69fa      	ldr	r2, [r7, #28]
 800b714:	18d3      	adds	r3, r2, r3
 800b716:	61fb      	str	r3, [r7, #28]
  acc += (u32_t)htons((u16_t)proto);
 800b718:	1cfb      	adds	r3, r7, #3
 800b71a:	781b      	ldrb	r3, [r3, #0]
 800b71c:	b29b      	uxth	r3, r3
 800b71e:	0018      	movs	r0, r3
 800b720:	f7f8 ff78 	bl	8004614 <lwip_htons>
 800b724:	0003      	movs	r3, r0
 800b726:	001a      	movs	r2, r3
 800b728:	69fb      	ldr	r3, [r7, #28]
 800b72a:	189b      	adds	r3, r3, r2
 800b72c:	61fb      	str	r3, [r7, #28]
  acc += (u32_t)htons(proto_len);
 800b72e:	2328      	movs	r3, #40	; 0x28
 800b730:	18fb      	adds	r3, r7, r3
 800b732:	881b      	ldrh	r3, [r3, #0]
 800b734:	0018      	movs	r0, r3
 800b736:	f7f8 ff6d 	bl	8004614 <lwip_htons>
 800b73a:	0003      	movs	r3, r0
 800b73c:	001a      	movs	r2, r3
 800b73e:	69fb      	ldr	r3, [r7, #28]
 800b740:	189b      	adds	r3, r3, r2
 800b742:	61fb      	str	r3, [r7, #28]

  /* Fold 32-bit sum to 16 bits
     calling this twice is propably faster than if statements... */
  acc = FOLD_U32T(acc);
 800b744:	69fb      	ldr	r3, [r7, #28]
 800b746:	0c1a      	lsrs	r2, r3, #16
 800b748:	69fb      	ldr	r3, [r7, #28]
 800b74a:	041b      	lsls	r3, r3, #16
 800b74c:	0c1b      	lsrs	r3, r3, #16
 800b74e:	18d3      	adds	r3, r2, r3
 800b750:	61fb      	str	r3, [r7, #28]
  acc = FOLD_U32T(acc);
 800b752:	69fb      	ldr	r3, [r7, #28]
 800b754:	0c1a      	lsrs	r2, r3, #16
 800b756:	69fb      	ldr	r3, [r7, #28]
 800b758:	041b      	lsls	r3, r3, #16
 800b75a:	0c1b      	lsrs	r3, r3, #16
 800b75c:	18d3      	adds	r3, r2, r3
 800b75e:	61fb      	str	r3, [r7, #28]
  LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
  return (u16_t)~(acc & 0xffffUL);
 800b760:	69fb      	ldr	r3, [r7, #28]
 800b762:	b29b      	uxth	r3, r3
 800b764:	43db      	mvns	r3, r3
 800b766:	b29b      	uxth	r3, r3
}
 800b768:	0018      	movs	r0, r3
 800b76a:	46bd      	mov	sp, r7
 800b76c:	b008      	add	sp, #32
 800b76e:	bd80      	pop	{r7, pc}

0800b770 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(void *dataptr, u16_t len)
{
 800b770:	b580      	push	{r7, lr}
 800b772:	b082      	sub	sp, #8
 800b774:	af00      	add	r7, sp, #0
 800b776:	6078      	str	r0, [r7, #4]
 800b778:	000a      	movs	r2, r1
 800b77a:	1cbb      	adds	r3, r7, #2
 800b77c:	801a      	strh	r2, [r3, #0]
  return ~LWIP_CHKSUM(dataptr, len);
 800b77e:	1cbb      	adds	r3, r7, #2
 800b780:	881a      	ldrh	r2, [r3, #0]
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	0011      	movs	r1, r2
 800b786:	0018      	movs	r0, r3
 800b788:	f7ff fef4 	bl	800b574 <lwip_standard_chksum>
 800b78c:	0003      	movs	r3, r0
 800b78e:	43db      	mvns	r3, r3
 800b790:	b29b      	uxth	r3, r3
}
 800b792:	0018      	movs	r0, r3
 800b794:	46bd      	mov	sp, r7
 800b796:	b002      	add	sp, #8
 800b798:	bd80      	pop	{r7, pc}

0800b79a <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800b79a:	b580      	push	{r7, lr}
 800b79c:	b086      	sub	sp, #24
 800b79e:	af00      	add	r7, sp, #0
 800b7a0:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  u8_t swapped;

  acc = 0;
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	617b      	str	r3, [r7, #20]
  swapped = 0;
 800b7a6:	230f      	movs	r3, #15
 800b7a8:	18fb      	adds	r3, r7, r3
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	701a      	strb	r2, [r3, #0]
  for(q = p; q != NULL; q = q->next) {
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	613b      	str	r3, [r7, #16]
 800b7b2:	e02e      	b.n	800b812 <inet_chksum_pbuf+0x78>
    acc += LWIP_CHKSUM(q->payload, q->len);
 800b7b4:	693b      	ldr	r3, [r7, #16]
 800b7b6:	685a      	ldr	r2, [r3, #4]
 800b7b8:	693b      	ldr	r3, [r7, #16]
 800b7ba:	895b      	ldrh	r3, [r3, #10]
 800b7bc:	0019      	movs	r1, r3
 800b7be:	0010      	movs	r0, r2
 800b7c0:	f7ff fed8 	bl	800b574 <lwip_standard_chksum>
 800b7c4:	0003      	movs	r3, r0
 800b7c6:	001a      	movs	r2, r3
 800b7c8:	697b      	ldr	r3, [r7, #20]
 800b7ca:	189b      	adds	r3, r3, r2
 800b7cc:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800b7ce:	697b      	ldr	r3, [r7, #20]
 800b7d0:	0c1a      	lsrs	r2, r3, #16
 800b7d2:	697b      	ldr	r3, [r7, #20]
 800b7d4:	041b      	lsls	r3, r3, #16
 800b7d6:	0c1b      	lsrs	r3, r3, #16
 800b7d8:	18d3      	adds	r3, r2, r3
 800b7da:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800b7dc:	693b      	ldr	r3, [r7, #16]
 800b7de:	895b      	ldrh	r3, [r3, #10]
 800b7e0:	2201      	movs	r2, #1
 800b7e2:	4013      	ands	r3, r2
 800b7e4:	b29b      	uxth	r3, r3
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d010      	beq.n	800b80c <inet_chksum_pbuf+0x72>
      swapped = 1 - swapped;
 800b7ea:	220f      	movs	r2, #15
 800b7ec:	18bb      	adds	r3, r7, r2
 800b7ee:	18ba      	adds	r2, r7, r2
 800b7f0:	7812      	ldrb	r2, [r2, #0]
 800b7f2:	2101      	movs	r1, #1
 800b7f4:	1a8a      	subs	r2, r1, r2
 800b7f6:	701a      	strb	r2, [r3, #0]
      acc = SWAP_BYTES_IN_WORD(acc);
 800b7f8:	697b      	ldr	r3, [r7, #20]
 800b7fa:	021b      	lsls	r3, r3, #8
 800b7fc:	041b      	lsls	r3, r3, #16
 800b7fe:	0c1a      	lsrs	r2, r3, #16
 800b800:	697b      	ldr	r3, [r7, #20]
 800b802:	0a1b      	lsrs	r3, r3, #8
 800b804:	21ff      	movs	r1, #255	; 0xff
 800b806:	400b      	ands	r3, r1
 800b808:	4313      	orrs	r3, r2
 800b80a:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next) {
 800b80c:	693b      	ldr	r3, [r7, #16]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	613b      	str	r3, [r7, #16]
 800b812:	693b      	ldr	r3, [r7, #16]
 800b814:	2b00      	cmp	r3, #0
 800b816:	d1cd      	bne.n	800b7b4 <inet_chksum_pbuf+0x1a>
    }
  }

  if (swapped) {
 800b818:	230f      	movs	r3, #15
 800b81a:	18fb      	adds	r3, r7, r3
 800b81c:	781b      	ldrb	r3, [r3, #0]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d009      	beq.n	800b836 <inet_chksum_pbuf+0x9c>
    acc = SWAP_BYTES_IN_WORD(acc);
 800b822:	697b      	ldr	r3, [r7, #20]
 800b824:	021b      	lsls	r3, r3, #8
 800b826:	041b      	lsls	r3, r3, #16
 800b828:	0c1a      	lsrs	r2, r3, #16
 800b82a:	697b      	ldr	r3, [r7, #20]
 800b82c:	0a1b      	lsrs	r3, r3, #8
 800b82e:	21ff      	movs	r1, #255	; 0xff
 800b830:	400b      	ands	r3, r1
 800b832:	4313      	orrs	r3, r2
 800b834:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 800b836:	697b      	ldr	r3, [r7, #20]
 800b838:	b29b      	uxth	r3, r3
 800b83a:	43db      	mvns	r3, r3
 800b83c:	b29b      	uxth	r3, r3
}
 800b83e:	0018      	movs	r0, r3
 800b840:	46bd      	mov	sp, r7
 800b842:	b006      	add	sp, #24
 800b844:	bd80      	pop	{r7, pc}
	...

0800b848 <ip_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip_route(ip_addr_t *dest)
{
 800b848:	b580      	push	{r7, lr}
 800b84a:	b084      	sub	sp, #16
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]
    return netif;
  }
#endif

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800b850:	4b1c      	ldr	r3, [pc, #112]	; (800b8c4 <ip_route+0x7c>)
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	60fb      	str	r3, [r7, #12]
 800b856:	e016      	b.n	800b886 <ip_route+0x3e>
    /* network mask matches? */
    if (netif_is_up(netif)) {
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	2229      	movs	r2, #41	; 0x29
 800b85c:	5c9b      	ldrb	r3, [r3, r2]
 800b85e:	1c1a      	adds	r2, r3, #0
 800b860:	2301      	movs	r3, #1
 800b862:	4013      	ands	r3, r2
 800b864:	b2db      	uxtb	r3, r3
 800b866:	2b00      	cmp	r3, #0
 800b868:	d00a      	beq.n	800b880 <ip_route+0x38>
      if (ip_addr_netcmp(dest, &(netif->ip_addr), &(netif->netmask))) {
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	681a      	ldr	r2, [r3, #0]
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	685b      	ldr	r3, [r3, #4]
 800b872:	405a      	eors	r2, r3
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	689b      	ldr	r3, [r3, #8]
 800b878:	4013      	ands	r3, r2
 800b87a:	d101      	bne.n	800b880 <ip_route+0x38>
        /* return netif on which to forward IP packet */
        return netif;
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	e01d      	b.n	800b8bc <ip_route+0x74>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	60fb      	str	r3, [r7, #12]
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d1e5      	bne.n	800b858 <ip_route+0x10>
      }
    }
  }
  if ((netif_default == NULL) || (!netif_is_up(netif_default))) {
 800b88c:	4b0e      	ldr	r3, [pc, #56]	; (800b8c8 <ip_route+0x80>)
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	2b00      	cmp	r3, #0
 800b892:	d007      	beq.n	800b8a4 <ip_route+0x5c>
 800b894:	4b0c      	ldr	r3, [pc, #48]	; (800b8c8 <ip_route+0x80>)
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	2229      	movs	r2, #41	; 0x29
 800b89a:	5c9b      	ldrb	r3, [r3, r2]
 800b89c:	001a      	movs	r2, r3
 800b89e:	2301      	movs	r3, #1
 800b8a0:	4013      	ands	r3, r2
 800b8a2:	d109      	bne.n	800b8b8 <ip_route+0x70>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
 800b8a4:	4b09      	ldr	r3, [pc, #36]	; (800b8cc <ip_route+0x84>)
 800b8a6:	2256      	movs	r2, #86	; 0x56
 800b8a8:	5a9b      	ldrh	r3, [r3, r2]
 800b8aa:	3301      	adds	r3, #1
 800b8ac:	b299      	uxth	r1, r3
 800b8ae:	4b07      	ldr	r3, [pc, #28]	; (800b8cc <ip_route+0x84>)
 800b8b0:	2256      	movs	r2, #86	; 0x56
 800b8b2:	5299      	strh	r1, [r3, r2]
    snmp_inc_ipoutnoroutes();
    return NULL;
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	e001      	b.n	800b8bc <ip_route+0x74>
  }
  /* no matching netif found, use default netif */
  return netif_default;
 800b8b8:	4b03      	ldr	r3, [pc, #12]	; (800b8c8 <ip_route+0x80>)
 800b8ba:	681b      	ldr	r3, [r3, #0]
}
 800b8bc:	0018      	movs	r0, r3
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	b004      	add	sp, #16
 800b8c2:	bd80      	pop	{r7, pc}
 800b8c4:	2000314c 	.word	0x2000314c
 800b8c8:	20003150 	.word	0x20003150
 800b8cc:	20003158 	.word	0x20003158

0800b8d0 <ip_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip_input(struct pbuf *p, struct netif *inp)
{
 800b8d0:	b5b0      	push	{r4, r5, r7, lr}
 800b8d2:	b088      	sub	sp, #32
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	6078      	str	r0, [r7, #4]
 800b8d8:	6039      	str	r1, [r7, #0]
  struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
  int check_ip_src=1;
 800b8da:	2301      	movs	r3, #1
 800b8dc:	617b      	str	r3, [r7, #20]
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  IP_STATS_INC(ip.recv);
 800b8de:	4bcd      	ldr	r3, [pc, #820]	; (800bc14 <ip_input+0x344>)
 800b8e0:	224a      	movs	r2, #74	; 0x4a
 800b8e2:	5a9b      	ldrh	r3, [r3, r2]
 800b8e4:	3301      	adds	r3, #1
 800b8e6:	b299      	uxth	r1, r3
 800b8e8:	4bca      	ldr	r3, [pc, #808]	; (800bc14 <ip_input+0x344>)
 800b8ea:	224a      	movs	r2, #74	; 0x4a
 800b8ec:	5299      	strh	r1, [r3, r2]
  snmp_inc_ipinreceives();

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	685b      	ldr	r3, [r3, #4]
 800b8f2:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 800b8f4:	69fb      	ldr	r3, [r7, #28]
 800b8f6:	781b      	ldrb	r3, [r3, #0]
 800b8f8:	091b      	lsrs	r3, r3, #4
 800b8fa:	b2db      	uxtb	r3, r3
 800b8fc:	2b04      	cmp	r3, #4
 800b8fe:	d015      	beq.n	800b92c <ip_input+0x5c>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", IPH_V(iphdr)));
    ip_debug_print(p);
    pbuf_free(p);
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	0018      	movs	r0, r3
 800b904:	f7f9 fece 	bl	80056a4 <pbuf_free>
    IP_STATS_INC(ip.err);
 800b908:	4bc2      	ldr	r3, [pc, #776]	; (800bc14 <ip_input+0x344>)
 800b90a:	225c      	movs	r2, #92	; 0x5c
 800b90c:	5a9b      	ldrh	r3, [r3, r2]
 800b90e:	3301      	adds	r3, #1
 800b910:	b299      	uxth	r1, r3
 800b912:	4bc0      	ldr	r3, [pc, #768]	; (800bc14 <ip_input+0x344>)
 800b914:	225c      	movs	r2, #92	; 0x5c
 800b916:	5299      	strh	r1, [r3, r2]
    IP_STATS_INC(ip.drop);
 800b918:	4bbe      	ldr	r3, [pc, #760]	; (800bc14 <ip_input+0x344>)
 800b91a:	224e      	movs	r2, #78	; 0x4e
 800b91c:	5a9b      	ldrh	r3, [r3, r2]
 800b91e:	3301      	adds	r3, #1
 800b920:	b299      	uxth	r1, r3
 800b922:	4bbc      	ldr	r3, [pc, #752]	; (800bc14 <ip_input+0x344>)
 800b924:	224e      	movs	r2, #78	; 0x4e
 800b926:	5299      	strh	r1, [r3, r2]
    snmp_inc_ipinhdrerrors();
    return ERR_OK;
 800b928:	2300      	movs	r3, #0
 800b92a:	e18f      	b.n	800bc4c <ip_input+0x37c>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 800b92c:	69fb      	ldr	r3, [r7, #28]
 800b92e:	781b      	ldrb	r3, [r3, #0]
 800b930:	b29a      	uxth	r2, r3
 800b932:	250e      	movs	r5, #14
 800b934:	197b      	adds	r3, r7, r5
 800b936:	210f      	movs	r1, #15
 800b938:	400a      	ands	r2, r1
 800b93a:	801a      	strh	r2, [r3, #0]
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 800b93c:	197b      	adds	r3, r7, r5
 800b93e:	197a      	adds	r2, r7, r5
 800b940:	8812      	ldrh	r2, [r2, #0]
 800b942:	0092      	lsls	r2, r2, #2
 800b944:	801a      	strh	r2, [r3, #0]
  /* obtain ip length in bytes */
  iphdr_len = ntohs(IPH_LEN(iphdr));
 800b946:	69fb      	ldr	r3, [r7, #28]
 800b948:	789a      	ldrb	r2, [r3, #2]
 800b94a:	78db      	ldrb	r3, [r3, #3]
 800b94c:	021b      	lsls	r3, r3, #8
 800b94e:	4313      	orrs	r3, r2
 800b950:	b29b      	uxth	r3, r3
 800b952:	220c      	movs	r2, #12
 800b954:	18bc      	adds	r4, r7, r2
 800b956:	0018      	movs	r0, r3
 800b958:	f7f8 fe72 	bl	8004640 <lwip_ntohs>
 800b95c:	0003      	movs	r3, r0
 800b95e:	8023      	strh	r3, [r4, #0]

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len)) {
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	895b      	ldrh	r3, [r3, #10]
 800b964:	197a      	adds	r2, r7, r5
 800b966:	8812      	ldrh	r2, [r2, #0]
 800b968:	429a      	cmp	r2, r3
 800b96a:	d806      	bhi.n	800b97a <ip_input+0xaa>
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	891b      	ldrh	r3, [r3, #8]
 800b970:	220c      	movs	r2, #12
 800b972:	18ba      	adds	r2, r7, r2
 800b974:	8812      	ldrh	r2, [r2, #0]
 800b976:	429a      	cmp	r2, r3
 800b978:	d915      	bls.n	800b9a6 <ip_input+0xd6>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	0018      	movs	r0, r3
 800b97e:	f7f9 fe91 	bl	80056a4 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
 800b982:	4ba4      	ldr	r3, [pc, #656]	; (800bc14 <ip_input+0x344>)
 800b984:	2252      	movs	r2, #82	; 0x52
 800b986:	5a9b      	ldrh	r3, [r3, r2]
 800b988:	3301      	adds	r3, #1
 800b98a:	b299      	uxth	r1, r3
 800b98c:	4ba1      	ldr	r3, [pc, #644]	; (800bc14 <ip_input+0x344>)
 800b98e:	2252      	movs	r2, #82	; 0x52
 800b990:	5299      	strh	r1, [r3, r2]
    IP_STATS_INC(ip.drop);
 800b992:	4ba0      	ldr	r3, [pc, #640]	; (800bc14 <ip_input+0x344>)
 800b994:	224e      	movs	r2, #78	; 0x4e
 800b996:	5a9b      	ldrh	r3, [r3, r2]
 800b998:	3301      	adds	r3, #1
 800b99a:	b299      	uxth	r1, r3
 800b99c:	4b9d      	ldr	r3, [pc, #628]	; (800bc14 <ip_input+0x344>)
 800b99e:	224e      	movs	r2, #78	; 0x4e
 800b9a0:	5299      	strh	r1, [r3, r2]
    snmp_inc_ipindiscards();
    return ERR_OK;
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	e152      	b.n	800bc4c <ip_input+0x37c>
  }

  /* verify checksum */
#if CHECKSUM_CHECK_IP
  if (inet_chksum(iphdr, iphdr_hlen) != 0) {
 800b9a6:	230e      	movs	r3, #14
 800b9a8:	18fb      	adds	r3, r7, r3
 800b9aa:	881a      	ldrh	r2, [r3, #0]
 800b9ac:	69fb      	ldr	r3, [r7, #28]
 800b9ae:	0011      	movs	r1, r2
 800b9b0:	0018      	movs	r0, r3
 800b9b2:	f7ff fedd 	bl	800b770 <inet_chksum>
 800b9b6:	1e03      	subs	r3, r0, #0
 800b9b8:	d015      	beq.n	800b9e6 <ip_input+0x116>

    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("Checksum (0x%"X16_F") failed, IP packet dropped.\n", inet_chksum(iphdr, iphdr_hlen)));
    ip_debug_print(p);
    pbuf_free(p);
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	0018      	movs	r0, r3
 800b9be:	f7f9 fe71 	bl	80056a4 <pbuf_free>
    IP_STATS_INC(ip.chkerr);
 800b9c2:	4b94      	ldr	r3, [pc, #592]	; (800bc14 <ip_input+0x344>)
 800b9c4:	2250      	movs	r2, #80	; 0x50
 800b9c6:	5a9b      	ldrh	r3, [r3, r2]
 800b9c8:	3301      	adds	r3, #1
 800b9ca:	b299      	uxth	r1, r3
 800b9cc:	4b91      	ldr	r3, [pc, #580]	; (800bc14 <ip_input+0x344>)
 800b9ce:	2250      	movs	r2, #80	; 0x50
 800b9d0:	5299      	strh	r1, [r3, r2]
    IP_STATS_INC(ip.drop);
 800b9d2:	4b90      	ldr	r3, [pc, #576]	; (800bc14 <ip_input+0x344>)
 800b9d4:	224e      	movs	r2, #78	; 0x4e
 800b9d6:	5a9b      	ldrh	r3, [r3, r2]
 800b9d8:	3301      	adds	r3, #1
 800b9da:	b299      	uxth	r1, r3
 800b9dc:	4b8d      	ldr	r3, [pc, #564]	; (800bc14 <ip_input+0x344>)
 800b9de:	224e      	movs	r2, #78	; 0x4e
 800b9e0:	5299      	strh	r1, [r3, r2]
    snmp_inc_ipinhdrerrors();
    return ERR_OK;
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	e132      	b.n	800bc4c <ip_input+0x37c>
  }
#endif

  /* Trim pbuf. This should have been done at the netif layer,
   * but we'll do it anyway just to be sure that its done. */
  pbuf_realloc(p, iphdr_len);
 800b9e6:	230c      	movs	r3, #12
 800b9e8:	18fb      	adds	r3, r7, r3
 800b9ea:	881a      	ldrh	r2, [r3, #0]
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	0011      	movs	r1, r2
 800b9f0:	0018      	movs	r0, r3
 800b9f2:	f7f9 fd5e 	bl	80054b2 <pbuf_realloc>

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy(current_iphdr_dest, iphdr->dest);
 800b9f6:	69fb      	ldr	r3, [r7, #28]
 800b9f8:	7c1a      	ldrb	r2, [r3, #16]
 800b9fa:	7c59      	ldrb	r1, [r3, #17]
 800b9fc:	0209      	lsls	r1, r1, #8
 800b9fe:	430a      	orrs	r2, r1
 800ba00:	7c99      	ldrb	r1, [r3, #18]
 800ba02:	0409      	lsls	r1, r1, #16
 800ba04:	430a      	orrs	r2, r1
 800ba06:	7cdb      	ldrb	r3, [r3, #19]
 800ba08:	061b      	lsls	r3, r3, #24
 800ba0a:	4313      	orrs	r3, r2
 800ba0c:	001a      	movs	r2, r3
 800ba0e:	4b82      	ldr	r3, [pc, #520]	; (800bc18 <ip_input+0x348>)
 800ba10:	601a      	str	r2, [r3, #0]
  ip_addr_copy(current_iphdr_src, iphdr->src);
 800ba12:	69fb      	ldr	r3, [r7, #28]
 800ba14:	7b1a      	ldrb	r2, [r3, #12]
 800ba16:	7b59      	ldrb	r1, [r3, #13]
 800ba18:	0209      	lsls	r1, r1, #8
 800ba1a:	430a      	orrs	r2, r1
 800ba1c:	7b99      	ldrb	r1, [r3, #14]
 800ba1e:	0409      	lsls	r1, r1, #16
 800ba20:	430a      	orrs	r2, r1
 800ba22:	7bdb      	ldrb	r3, [r3, #15]
 800ba24:	061b      	lsls	r3, r3, #24
 800ba26:	4313      	orrs	r3, r2
 800ba28:	001a      	movs	r2, r3
 800ba2a:	4b7c      	ldr	r3, [pc, #496]	; (800bc1c <ip_input+0x34c>)
 800ba2c:	601a      	str	r2, [r3, #0]
#endif /* LWIP_IGMP */
  {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 800ba2e:	2301      	movs	r3, #1
 800ba30:	613b      	str	r3, [r7, #16]
    netif = inp;
 800ba32:	683b      	ldr	r3, [r7, #0]
 800ba34:	61bb      	str	r3, [r7, #24]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(&netif->netmask),
          ip4_addr_get_u32(&netif->ip_addr) & ip4_addr_get_u32(&netif->netmask),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(&netif->netmask)));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip_addr_isany(&(netif->ip_addr)))) {
 800ba36:	69bb      	ldr	r3, [r7, #24]
 800ba38:	2229      	movs	r2, #41	; 0x29
 800ba3a:	5c9b      	ldrb	r3, [r3, r2]
 800ba3c:	1c1a      	adds	r2, r3, #0
 800ba3e:	2301      	movs	r3, #1
 800ba40:	4013      	ands	r3, r2
 800ba42:	b2db      	uxtb	r3, r3
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d016      	beq.n	800ba76 <ip_input+0x1a6>
 800ba48:	69bb      	ldr	r3, [r7, #24]
 800ba4a:	3304      	adds	r3, #4
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d012      	beq.n	800ba76 <ip_input+0x1a6>
 800ba50:	69bb      	ldr	r3, [r7, #24]
 800ba52:	685b      	ldr	r3, [r3, #4]
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d00e      	beq.n	800ba76 <ip_input+0x1a6>
        /* unicast to this interface address? */
        if (ip_addr_cmp(&current_iphdr_dest, &(netif->ip_addr)) ||
 800ba58:	4b6f      	ldr	r3, [pc, #444]	; (800bc18 <ip_input+0x348>)
 800ba5a:	681a      	ldr	r2, [r3, #0]
 800ba5c:	69bb      	ldr	r3, [r7, #24]
 800ba5e:	685b      	ldr	r3, [r3, #4]
 800ba60:	429a      	cmp	r2, r3
 800ba62:	d01e      	beq.n	800baa2 <ip_input+0x1d2>
            /* or broadcast on this interface network address? */
            ip_addr_isbroadcast(&current_iphdr_dest, netif)) {
 800ba64:	4b6c      	ldr	r3, [pc, #432]	; (800bc18 <ip_input+0x348>)
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	69ba      	ldr	r2, [r7, #24]
 800ba6a:	0011      	movs	r1, r2
 800ba6c:	0018      	movs	r0, r3
 800ba6e:	f000 fb05 	bl	800c07c <ip4_addr_isbroadcast>
 800ba72:	1e03      	subs	r3, r0, #0
        if (ip_addr_cmp(&current_iphdr_dest, &(netif->ip_addr)) ||
 800ba74:	d115      	bne.n	800baa2 <ip_input+0x1d2>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 800ba76:	693b      	ldr	r3, [r7, #16]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d005      	beq.n	800ba88 <ip_input+0x1b8>
        first = 0;
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	613b      	str	r3, [r7, #16]
        netif = netif_list;
 800ba80:	4b67      	ldr	r3, [pc, #412]	; (800bc20 <ip_input+0x350>)
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	61bb      	str	r3, [r7, #24]
 800ba86:	e002      	b.n	800ba8e <ip_input+0x1be>
      } else {
        netif = netif->next;
 800ba88:	69bb      	ldr	r3, [r7, #24]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	61bb      	str	r3, [r7, #24]
      }
      if (netif == inp) {
 800ba8e:	69ba      	ldr	r2, [r7, #24]
 800ba90:	683b      	ldr	r3, [r7, #0]
 800ba92:	429a      	cmp	r2, r3
 800ba94:	d102      	bne.n	800ba9c <ip_input+0x1cc>
        netif = netif->next;
 800ba96:	69bb      	ldr	r3, [r7, #24]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	61bb      	str	r3, [r7, #24]
      }
    } while(netif != NULL);
 800ba9c:	69bb      	ldr	r3, [r7, #24]
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d1c9      	bne.n	800ba36 <ip_input+0x166>
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 800baa2:	69bb      	ldr	r3, [r7, #24]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d117      	bne.n	800bad8 <ip_input+0x208>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 800baa8:	69fb      	ldr	r3, [r7, #28]
 800baaa:	7a5b      	ldrb	r3, [r3, #9]
 800baac:	2b11      	cmp	r3, #17
 800baae:	d113      	bne.n	800bad8 <ip_input+0x208>
      struct udp_hdr *udphdr = (struct udp_hdr *)((u8_t *)iphdr + iphdr_hlen);
 800bab0:	230e      	movs	r3, #14
 800bab2:	18fb      	adds	r3, r7, r3
 800bab4:	881b      	ldrh	r3, [r3, #0]
 800bab6:	69fa      	ldr	r2, [r7, #28]
 800bab8:	18d3      	adds	r3, r2, r3
 800baba:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip_input: UDP packet to DHCP client port %"U16_F"\n",
        ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 800babc:	68bb      	ldr	r3, [r7, #8]
 800babe:	789a      	ldrb	r2, [r3, #2]
 800bac0:	78db      	ldrb	r3, [r3, #3]
 800bac2:	021b      	lsls	r3, r3, #8
 800bac4:	4313      	orrs	r3, r2
 800bac6:	b29a      	uxth	r2, r3
 800bac8:	2386      	movs	r3, #134	; 0x86
 800baca:	01db      	lsls	r3, r3, #7
 800bacc:	429a      	cmp	r2, r3
 800bace:	d103      	bne.n	800bad8 <ip_input+0x208>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip_input: DHCP packet accepted.\n"));
        netif = inp;
 800bad0:	683b      	ldr	r3, [r7, #0]
 800bad2:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 800bad4:	2300      	movs	r3, #0
 800bad6:	617b      	str	r3, [r7, #20]
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
  /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
  if (check_ip_src && !ip_addr_isany(&current_iphdr_src))
 800bad8:	697b      	ldr	r3, [r7, #20]
 800bada:	2b00      	cmp	r3, #0
 800badc:	d020      	beq.n	800bb20 <ip_input+0x250>
 800bade:	4b4f      	ldr	r3, [pc, #316]	; (800bc1c <ip_input+0x34c>)
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d01c      	beq.n	800bb20 <ip_input+0x250>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {  if ((ip_addr_isbroadcast(&current_iphdr_src, inp)) ||
 800bae6:	4b4d      	ldr	r3, [pc, #308]	; (800bc1c <ip_input+0x34c>)
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	683a      	ldr	r2, [r7, #0]
 800baec:	0011      	movs	r1, r2
 800baee:	0018      	movs	r0, r3
 800baf0:	f000 fac4 	bl	800c07c <ip4_addr_isbroadcast>
 800baf4:	1e03      	subs	r3, r0, #0
 800baf6:	d105      	bne.n	800bb04 <ip_input+0x234>
         (ip_addr_ismulticast(&current_iphdr_src))) {
 800baf8:	4b48      	ldr	r3, [pc, #288]	; (800bc1c <ip_input+0x34c>)
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	22f0      	movs	r2, #240	; 0xf0
 800bafe:	4013      	ands	r3, r2
  {  if ((ip_addr_isbroadcast(&current_iphdr_src, inp)) ||
 800bb00:	2be0      	cmp	r3, #224	; 0xe0
 800bb02:	d10d      	bne.n	800bb20 <ip_input+0x250>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	0018      	movs	r0, r3
 800bb08:	f7f9 fdcc 	bl	80056a4 <pbuf_free>
      IP_STATS_INC(ip.drop);
 800bb0c:	4b41      	ldr	r3, [pc, #260]	; (800bc14 <ip_input+0x344>)
 800bb0e:	224e      	movs	r2, #78	; 0x4e
 800bb10:	5a9b      	ldrh	r3, [r3, r2]
 800bb12:	3301      	adds	r3, #1
 800bb14:	b299      	uxth	r1, r3
 800bb16:	4b3f      	ldr	r3, [pc, #252]	; (800bc14 <ip_input+0x344>)
 800bb18:	224e      	movs	r2, #78	; 0x4e
 800bb1a:	5299      	strh	r1, [r3, r2]
      snmp_inc_ipinaddrerrors();
      snmp_inc_ipindiscards();
      return ERR_OK;
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	e095      	b.n	800bc4c <ip_input+0x37c>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800bb20:	69bb      	ldr	r3, [r7, #24]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d105      	bne.n	800bb32 <ip_input+0x262>
#endif /* IP_FORWARD */
    {
      snmp_inc_ipinaddrerrors();
      snmp_inc_ipindiscards();
    }
    pbuf_free(p);
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	0018      	movs	r0, r3
 800bb2a:	f7f9 fdbb 	bl	80056a4 <pbuf_free>
    return ERR_OK;
 800bb2e:	2300      	movs	r3, #0
 800bb30:	e08c      	b.n	800bc4c <ip_input+0x37c>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800bb32:	69fb      	ldr	r3, [r7, #28]
 800bb34:	799a      	ldrb	r2, [r3, #6]
 800bb36:	79db      	ldrb	r3, [r3, #7]
 800bb38:	021b      	lsls	r3, r3, #8
 800bb3a:	4313      	orrs	r3, r2
 800bb3c:	b29b      	uxth	r3, r3
 800bb3e:	001a      	movs	r2, r3
 800bb40:	4b38      	ldr	r3, [pc, #224]	; (800bc24 <ip_input+0x354>)
 800bb42:	4013      	ands	r3, r2
 800bb44:	d00d      	beq.n	800bb62 <ip_input+0x292>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip_reass()\n",
      ntohs(IPH_ID(iphdr)), p->tot_len, ntohs(IPH_LEN(iphdr)), !!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8));
    /* reassemble the packet*/
    p = ip_reass(p);
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	0018      	movs	r0, r3
 800bb4a:	f000 fe51 	bl	800c7f0 <ip_reass>
 800bb4e:	0003      	movs	r3, r0
 800bb50:	607b      	str	r3, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d101      	bne.n	800bb5c <ip_input+0x28c>
      return ERR_OK;
 800bb58:	2300      	movs	r3, #0
 800bb5a:	e077      	b.n	800bc4c <ip_input+0x37c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	685b      	ldr	r3, [r3, #4]
 800bb60:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip_input: \n"));
  ip_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  current_netif = inp;
 800bb62:	4b31      	ldr	r3, [pc, #196]	; (800bc28 <ip_input+0x358>)
 800bb64:	683a      	ldr	r2, [r7, #0]
 800bb66:	601a      	str	r2, [r3, #0]
  current_header = iphdr;
 800bb68:	4b30      	ldr	r3, [pc, #192]	; (800bc2c <ip_input+0x35c>)
 800bb6a:	69fa      	ldr	r2, [r7, #28]
 800bb6c:	601a      	str	r2, [r3, #0]

#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
 800bb6e:	683a      	ldr	r2, [r7, #0]
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	0011      	movs	r1, r2
 800bb74:	0018      	movs	r0, r3
 800bb76:	f7f9 ffa9 	bl	8005acc <raw_input>
 800bb7a:	1e03      	subs	r3, r0, #0
 800bb7c:	d158      	bne.n	800bc30 <ip_input+0x360>
#endif /* LWIP_RAW */
  {
    switch (IPH_PROTO(iphdr)) {
 800bb7e:	69fb      	ldr	r3, [r7, #28]
 800bb80:	7a5b      	ldrb	r3, [r3, #9]
 800bb82:	2b06      	cmp	r3, #6
 800bb84:	d00b      	beq.n	800bb9e <ip_input+0x2ce>
 800bb86:	2b11      	cmp	r3, #17
 800bb88:	d002      	beq.n	800bb90 <ip_input+0x2c0>
 800bb8a:	2b01      	cmp	r3, #1
 800bb8c:	d00e      	beq.n	800bbac <ip_input+0x2dc>
 800bb8e:	e014      	b.n	800bbba <ip_input+0x2ea>
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      snmp_inc_ipindelivers();
      udp_input(p, inp);
 800bb90:	683a      	ldr	r2, [r7, #0]
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	0011      	movs	r1, r2
 800bb96:	0018      	movs	r0, r3
 800bb98:	f7fe fe8a 	bl	800a8b0 <udp_input>
      break;
 800bb9c:	e049      	b.n	800bc32 <ip_input+0x362>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      snmp_inc_ipindelivers();
      tcp_input(p, inp);
 800bb9e:	683a      	ldr	r2, [r7, #0]
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	0011      	movs	r1, r2
 800bba4:	0018      	movs	r0, r3
 800bba6:	f7fb f813 	bl	8006bd0 <tcp_input>
      break;
 800bbaa:	e042      	b.n	800bc32 <ip_input+0x362>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      snmp_inc_ipindelivers();
      icmp_input(p, inp);
 800bbac:	683a      	ldr	r2, [r7, #0]
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	0011      	movs	r1, r2
 800bbb2:	0018      	movs	r0, r3
 800bbb4:	f7ff fa30 	bl	800b018 <icmp_input>
      break;
 800bbb8:	e03b      	b.n	800bc32 <ip_input+0x362>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip_addr_isbroadcast(&current_iphdr_dest, inp) &&
 800bbba:	4b17      	ldr	r3, [pc, #92]	; (800bc18 <ip_input+0x348>)
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	683a      	ldr	r2, [r7, #0]
 800bbc0:	0011      	movs	r1, r2
 800bbc2:	0018      	movs	r0, r3
 800bbc4:	f000 fa5a 	bl	800c07c <ip4_addr_isbroadcast>
 800bbc8:	1e03      	subs	r3, r0, #0
 800bbca:	d10d      	bne.n	800bbe8 <ip_input+0x318>
          !ip_addr_ismulticast(&current_iphdr_dest)) {
 800bbcc:	4b12      	ldr	r3, [pc, #72]	; (800bc18 <ip_input+0x348>)
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	22f0      	movs	r2, #240	; 0xf0
 800bbd2:	4013      	ands	r3, r2
      if (!ip_addr_isbroadcast(&current_iphdr_dest, inp) &&
 800bbd4:	2be0      	cmp	r3, #224	; 0xe0
 800bbd6:	d007      	beq.n	800bbe8 <ip_input+0x318>
        p->payload = iphdr;
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	69fa      	ldr	r2, [r7, #28]
 800bbdc:	605a      	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	2102      	movs	r1, #2
 800bbe2:	0018      	movs	r0, r3
 800bbe4:	f7ff fc12 	bl	800b40c <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	0018      	movs	r0, r3
 800bbec:	f7f9 fd5a 	bl	80056a4 <pbuf_free>

      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Unsupported transport protocol %"U16_F"\n", IPH_PROTO(iphdr)));

      IP_STATS_INC(ip.proterr);
 800bbf0:	4b08      	ldr	r3, [pc, #32]	; (800bc14 <ip_input+0x344>)
 800bbf2:	2258      	movs	r2, #88	; 0x58
 800bbf4:	5a9b      	ldrh	r3, [r3, r2]
 800bbf6:	3301      	adds	r3, #1
 800bbf8:	b299      	uxth	r1, r3
 800bbfa:	4b06      	ldr	r3, [pc, #24]	; (800bc14 <ip_input+0x344>)
 800bbfc:	2258      	movs	r2, #88	; 0x58
 800bbfe:	5299      	strh	r1, [r3, r2]
      IP_STATS_INC(ip.drop);
 800bc00:	4b04      	ldr	r3, [pc, #16]	; (800bc14 <ip_input+0x344>)
 800bc02:	224e      	movs	r2, #78	; 0x4e
 800bc04:	5a9b      	ldrh	r3, [r3, r2]
 800bc06:	3301      	adds	r3, #1
 800bc08:	b299      	uxth	r1, r3
 800bc0a:	4b02      	ldr	r3, [pc, #8]	; (800bc14 <ip_input+0x344>)
 800bc0c:	224e      	movs	r2, #78	; 0x4e
 800bc0e:	5299      	strh	r1, [r3, r2]
 800bc10:	e00f      	b.n	800bc32 <ip_input+0x362>
 800bc12:	46c0      	nop			; (mov r8, r8)
 800bc14:	20003158 	.word	0x20003158
 800bc18:	2000329c 	.word	0x2000329c
 800bc1c:	20003294 	.word	0x20003294
 800bc20:	2000314c 	.word	0x2000314c
 800bc24:	0000ff3f 	.word	0x0000ff3f
 800bc28:	20003298 	.word	0x20003298
 800bc2c:	200032a0 	.word	0x200032a0
      snmp_inc_ipinunknownprotos();
    }
  }
 800bc30:	46c0      	nop			; (mov r8, r8)

  current_netif = NULL;
 800bc32:	4b08      	ldr	r3, [pc, #32]	; (800bc54 <ip_input+0x384>)
 800bc34:	2200      	movs	r2, #0
 800bc36:	601a      	str	r2, [r3, #0]
  current_header = NULL;
 800bc38:	4b07      	ldr	r3, [pc, #28]	; (800bc58 <ip_input+0x388>)
 800bc3a:	2200      	movs	r2, #0
 800bc3c:	601a      	str	r2, [r3, #0]
  ip_addr_set_any(&current_iphdr_src);
 800bc3e:	4b07      	ldr	r3, [pc, #28]	; (800bc5c <ip_input+0x38c>)
 800bc40:	2200      	movs	r2, #0
 800bc42:	601a      	str	r2, [r3, #0]
  ip_addr_set_any(&current_iphdr_dest);
 800bc44:	4b06      	ldr	r3, [pc, #24]	; (800bc60 <ip_input+0x390>)
 800bc46:	2200      	movs	r2, #0
 800bc48:	601a      	str	r2, [r3, #0]

  return ERR_OK;
 800bc4a:	2300      	movs	r3, #0
}
 800bc4c:	0018      	movs	r0, r3
 800bc4e:	46bd      	mov	sp, r7
 800bc50:	b008      	add	sp, #32
 800bc52:	bdb0      	pop	{r4, r5, r7, pc}
 800bc54:	20003298 	.word	0x20003298
 800bc58:	200032a0 	.word	0x200032a0
 800bc5c:	20003294 	.word	0x20003294
 800bc60:	2000329c 	.word	0x2000329c

0800bc64 <ip_output_if>:
 */
err_t
ip_output_if(struct pbuf *p, ip_addr_t *src, ip_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 800bc64:	b590      	push	{r4, r7, lr}
 800bc66:	b089      	sub	sp, #36	; 0x24
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	60f8      	str	r0, [r7, #12]
 800bc6c:	60b9      	str	r1, [r7, #8]
 800bc6e:	607a      	str	r2, [r7, #4]
 800bc70:	001a      	movs	r2, r3
 800bc72:	1cfb      	adds	r3, r7, #3
 800bc74:	701a      	strb	r2, [r3, #0]
{
#endif /* IP_OPTIONS_SEND */
  struct ip_hdr *iphdr;
  ip_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
 800bc76:	2300      	movs	r3, #0
 800bc78:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("p->ref == 1", p->ref == 1);

  snmp_inc_ipoutrequests();

  /* Should the IP header be generated or is it already included in p? */
  if (dest != IP_HDRINCL) {
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d100      	bne.n	800bc82 <ip_output_if+0x1e>
 800bc80:	e18b      	b.n	800bf9a <ip_output_if+0x336>
    u16_t ip_hlen = IP_HLEN;
 800bc82:	2316      	movs	r3, #22
 800bc84:	18fb      	adds	r3, r7, r3
 800bc86:	2214      	movs	r2, #20
 800bc88:	801a      	strh	r2, [r3, #0]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	2114      	movs	r1, #20
 800bc8e:	0018      	movs	r0, r3
 800bc90:	f7f9 fc81 	bl	8005596 <pbuf_header>
 800bc94:	1e03      	subs	r3, r0, #0
 800bc96:	d00a      	beq.n	800bcae <ip_output_if+0x4a>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
 800bc98:	4bdb      	ldr	r3, [pc, #876]	; (800c008 <ip_output_if+0x3a4>)
 800bc9a:	225c      	movs	r2, #92	; 0x5c
 800bc9c:	5a9b      	ldrh	r3, [r3, r2]
 800bc9e:	3301      	adds	r3, #1
 800bca0:	b299      	uxth	r1, r3
 800bca2:	4bd9      	ldr	r3, [pc, #868]	; (800c008 <ip_output_if+0x3a4>)
 800bca4:	225c      	movs	r2, #92	; 0x5c
 800bca6:	5299      	strh	r1, [r3, r2]
      snmp_inc_ipoutdiscards();
      return ERR_BUF;
 800bca8:	2302      	movs	r3, #2
 800bcaa:	425b      	negs	r3, r3
 800bcac:	e1a8      	b.n	800c000 <ip_output_if+0x39c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	685b      	ldr	r3, [r3, #4]
 800bcb2:	61bb      	str	r3, [r7, #24]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800bcb4:	69bb      	ldr	r3, [r7, #24]
 800bcb6:	1cfa      	adds	r2, r7, #3
 800bcb8:	7812      	ldrb	r2, [r2, #0]
 800bcba:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800bcbc:	69bb      	ldr	r3, [r7, #24]
 800bcbe:	2134      	movs	r1, #52	; 0x34
 800bcc0:	187a      	adds	r2, r7, r1
 800bcc2:	7812      	ldrb	r2, [r2, #0]
 800bcc4:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += LWIP_MAKE_U16(proto, ttl);
 800bcc6:	187b      	adds	r3, r7, r1
 800bcc8:	781b      	ldrb	r3, [r3, #0]
 800bcca:	021a      	lsls	r2, r3, #8
 800bccc:	1cfb      	adds	r3, r7, #3
 800bcce:	781b      	ldrb	r3, [r3, #0]
 800bcd0:	4313      	orrs	r3, r2
 800bcd2:	001a      	movs	r2, r3
 800bcd4:	69fb      	ldr	r3, [r7, #28]
 800bcd6:	189b      	adds	r3, r3, r2
 800bcd8:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip_addr_copy(iphdr->dest, *dest);
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	681a      	ldr	r2, [r3, #0]
 800bcde:	69bb      	ldr	r3, [r7, #24]
 800bce0:	21ff      	movs	r1, #255	; 0xff
 800bce2:	4011      	ands	r1, r2
 800bce4:	000c      	movs	r4, r1
 800bce6:	7c19      	ldrb	r1, [r3, #16]
 800bce8:	2000      	movs	r0, #0
 800bcea:	4001      	ands	r1, r0
 800bcec:	1c08      	adds	r0, r1, #0
 800bcee:	1c21      	adds	r1, r4, #0
 800bcf0:	4301      	orrs	r1, r0
 800bcf2:	7419      	strb	r1, [r3, #16]
 800bcf4:	0a11      	lsrs	r1, r2, #8
 800bcf6:	20ff      	movs	r0, #255	; 0xff
 800bcf8:	4001      	ands	r1, r0
 800bcfa:	000c      	movs	r4, r1
 800bcfc:	7c59      	ldrb	r1, [r3, #17]
 800bcfe:	2000      	movs	r0, #0
 800bd00:	4001      	ands	r1, r0
 800bd02:	1c08      	adds	r0, r1, #0
 800bd04:	1c21      	adds	r1, r4, #0
 800bd06:	4301      	orrs	r1, r0
 800bd08:	7459      	strb	r1, [r3, #17]
 800bd0a:	0c11      	lsrs	r1, r2, #16
 800bd0c:	20ff      	movs	r0, #255	; 0xff
 800bd0e:	4001      	ands	r1, r0
 800bd10:	000c      	movs	r4, r1
 800bd12:	7c99      	ldrb	r1, [r3, #18]
 800bd14:	2000      	movs	r0, #0
 800bd16:	4001      	ands	r1, r0
 800bd18:	1c08      	adds	r0, r1, #0
 800bd1a:	1c21      	adds	r1, r4, #0
 800bd1c:	4301      	orrs	r1, r0
 800bd1e:	7499      	strb	r1, [r3, #18]
 800bd20:	0e10      	lsrs	r0, r2, #24
 800bd22:	7cda      	ldrb	r2, [r3, #19]
 800bd24:	2100      	movs	r1, #0
 800bd26:	400a      	ands	r2, r1
 800bd28:	1c11      	adds	r1, r2, #0
 800bd2a:	1c02      	adds	r2, r0, #0
 800bd2c:	430a      	orrs	r2, r1
 800bd2e:	74da      	strb	r2, [r3, #19]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
 800bd30:	69bb      	ldr	r3, [r7, #24]
 800bd32:	7c1a      	ldrb	r2, [r3, #16]
 800bd34:	7c59      	ldrb	r1, [r3, #17]
 800bd36:	0209      	lsls	r1, r1, #8
 800bd38:	430a      	orrs	r2, r1
 800bd3a:	7c99      	ldrb	r1, [r3, #18]
 800bd3c:	0409      	lsls	r1, r1, #16
 800bd3e:	430a      	orrs	r2, r1
 800bd40:	7cdb      	ldrb	r3, [r3, #19]
 800bd42:	061b      	lsls	r3, r3, #24
 800bd44:	4313      	orrs	r3, r2
 800bd46:	041b      	lsls	r3, r3, #16
 800bd48:	0c1b      	lsrs	r3, r3, #16
 800bd4a:	69fa      	ldr	r2, [r7, #28]
 800bd4c:	18d3      	adds	r3, r2, r3
 800bd4e:	61fb      	str	r3, [r7, #28]
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
 800bd50:	69bb      	ldr	r3, [r7, #24]
 800bd52:	7c1a      	ldrb	r2, [r3, #16]
 800bd54:	7c59      	ldrb	r1, [r3, #17]
 800bd56:	0209      	lsls	r1, r1, #8
 800bd58:	430a      	orrs	r2, r1
 800bd5a:	7c99      	ldrb	r1, [r3, #18]
 800bd5c:	0409      	lsls	r1, r1, #16
 800bd5e:	430a      	orrs	r2, r1
 800bd60:	7cdb      	ldrb	r3, [r3, #19]
 800bd62:	061b      	lsls	r3, r3, #24
 800bd64:	4313      	orrs	r3, r2
 800bd66:	0c1b      	lsrs	r3, r3, #16
 800bd68:	69fa      	ldr	r2, [r7, #28]
 800bd6a:	18d3      	adds	r3, r2, r3
 800bd6c:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800bd6e:	2316      	movs	r3, #22
 800bd70:	18fb      	adds	r3, r7, r3
 800bd72:	881b      	ldrh	r3, [r3, #0]
 800bd74:	089b      	lsrs	r3, r3, #2
 800bd76:	b29b      	uxth	r3, r3
 800bd78:	b2db      	uxtb	r3, r3
 800bd7a:	2240      	movs	r2, #64	; 0x40
 800bd7c:	4313      	orrs	r3, r2
 800bd7e:	b2da      	uxtb	r2, r3
 800bd80:	69bb      	ldr	r3, [r7, #24]
 800bd82:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800bd84:	69bb      	ldr	r3, [r7, #24]
 800bd86:	2130      	movs	r1, #48	; 0x30
 800bd88:	187a      	adds	r2, r7, r1
 800bd8a:	7812      	ldrb	r2, [r2, #0]
 800bd8c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += LWIP_MAKE_U16(tos, iphdr->_v_hl);
 800bd8e:	187b      	adds	r3, r7, r1
 800bd90:	781b      	ldrb	r3, [r3, #0]
 800bd92:	021b      	lsls	r3, r3, #8
 800bd94:	69ba      	ldr	r2, [r7, #24]
 800bd96:	7812      	ldrb	r2, [r2, #0]
 800bd98:	4313      	orrs	r3, r2
 800bd9a:	001a      	movs	r2, r3
 800bd9c:	69fb      	ldr	r3, [r7, #28]
 800bd9e:	189b      	adds	r3, r3, r2
 800bda0:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, htons(p->tot_len));
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	891b      	ldrh	r3, [r3, #8]
 800bda6:	0018      	movs	r0, r3
 800bda8:	f7f8 fc34 	bl	8004614 <lwip_htons>
 800bdac:	0003      	movs	r3, r0
 800bdae:	001a      	movs	r2, r3
 800bdb0:	69bb      	ldr	r3, [r7, #24]
 800bdb2:	21ff      	movs	r1, #255	; 0xff
 800bdb4:	4011      	ands	r1, r2
 800bdb6:	000c      	movs	r4, r1
 800bdb8:	7899      	ldrb	r1, [r3, #2]
 800bdba:	2000      	movs	r0, #0
 800bdbc:	4001      	ands	r1, r0
 800bdbe:	1c08      	adds	r0, r1, #0
 800bdc0:	1c21      	adds	r1, r4, #0
 800bdc2:	4301      	orrs	r1, r0
 800bdc4:	7099      	strb	r1, [r3, #2]
 800bdc6:	0a12      	lsrs	r2, r2, #8
 800bdc8:	b290      	uxth	r0, r2
 800bdca:	78da      	ldrb	r2, [r3, #3]
 800bdcc:	2100      	movs	r1, #0
 800bdce:	400a      	ands	r2, r1
 800bdd0:	1c11      	adds	r1, r2, #0
 800bdd2:	1c02      	adds	r2, r0, #0
 800bdd4:	430a      	orrs	r2, r1
 800bdd6:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
 800bdd8:	69bb      	ldr	r3, [r7, #24]
 800bdda:	789a      	ldrb	r2, [r3, #2]
 800bddc:	78db      	ldrb	r3, [r3, #3]
 800bdde:	021b      	lsls	r3, r3, #8
 800bde0:	4313      	orrs	r3, r2
 800bde2:	b29b      	uxth	r3, r3
 800bde4:	001a      	movs	r2, r3
 800bde6:	69fb      	ldr	r3, [r7, #28]
 800bde8:	189b      	adds	r3, r3, r2
 800bdea:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800bdec:	69bb      	ldr	r3, [r7, #24]
 800bdee:	799a      	ldrb	r2, [r3, #6]
 800bdf0:	2100      	movs	r1, #0
 800bdf2:	400a      	ands	r2, r1
 800bdf4:	719a      	strb	r2, [r3, #6]
 800bdf6:	79da      	ldrb	r2, [r3, #7]
 800bdf8:	2100      	movs	r1, #0
 800bdfa:	400a      	ands	r2, r1
 800bdfc:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, htons(ip_id));
 800bdfe:	4b83      	ldr	r3, [pc, #524]	; (800c00c <ip_output_if+0x3a8>)
 800be00:	881b      	ldrh	r3, [r3, #0]
 800be02:	0018      	movs	r0, r3
 800be04:	f7f8 fc06 	bl	8004614 <lwip_htons>
 800be08:	0003      	movs	r3, r0
 800be0a:	001a      	movs	r2, r3
 800be0c:	69bb      	ldr	r3, [r7, #24]
 800be0e:	21ff      	movs	r1, #255	; 0xff
 800be10:	4011      	ands	r1, r2
 800be12:	000c      	movs	r4, r1
 800be14:	7919      	ldrb	r1, [r3, #4]
 800be16:	2000      	movs	r0, #0
 800be18:	4001      	ands	r1, r0
 800be1a:	1c08      	adds	r0, r1, #0
 800be1c:	1c21      	adds	r1, r4, #0
 800be1e:	4301      	orrs	r1, r0
 800be20:	7119      	strb	r1, [r3, #4]
 800be22:	0a12      	lsrs	r2, r2, #8
 800be24:	b290      	uxth	r0, r2
 800be26:	795a      	ldrb	r2, [r3, #5]
 800be28:	2100      	movs	r1, #0
 800be2a:	400a      	ands	r2, r1
 800be2c:	1c11      	adds	r1, r2, #0
 800be2e:	1c02      	adds	r2, r0, #0
 800be30:	430a      	orrs	r2, r1
 800be32:	715a      	strb	r2, [r3, #5]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
 800be34:	69bb      	ldr	r3, [r7, #24]
 800be36:	791a      	ldrb	r2, [r3, #4]
 800be38:	795b      	ldrb	r3, [r3, #5]
 800be3a:	021b      	lsls	r3, r3, #8
 800be3c:	4313      	orrs	r3, r2
 800be3e:	b29b      	uxth	r3, r3
 800be40:	001a      	movs	r2, r3
 800be42:	69fb      	ldr	r3, [r7, #28]
 800be44:	189b      	adds	r3, r3, r2
 800be46:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800be48:	4b70      	ldr	r3, [pc, #448]	; (800c00c <ip_output_if+0x3a8>)
 800be4a:	881b      	ldrh	r3, [r3, #0]
 800be4c:	3301      	adds	r3, #1
 800be4e:	b29a      	uxth	r2, r3
 800be50:	4b6e      	ldr	r3, [pc, #440]	; (800c00c <ip_output_if+0x3a8>)
 800be52:	801a      	strh	r2, [r3, #0]

    if (ip_addr_isany(src)) {
 800be54:	68bb      	ldr	r3, [r7, #8]
 800be56:	2b00      	cmp	r3, #0
 800be58:	d003      	beq.n	800be62 <ip_output_if+0x1fe>
 800be5a:	68bb      	ldr	r3, [r7, #8]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d12b      	bne.n	800beba <ip_output_if+0x256>
      ip_addr_copy(iphdr->src, netif->ip_addr);
 800be62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be64:	685a      	ldr	r2, [r3, #4]
 800be66:	69bb      	ldr	r3, [r7, #24]
 800be68:	21ff      	movs	r1, #255	; 0xff
 800be6a:	4011      	ands	r1, r2
 800be6c:	000c      	movs	r4, r1
 800be6e:	7b19      	ldrb	r1, [r3, #12]
 800be70:	2000      	movs	r0, #0
 800be72:	4001      	ands	r1, r0
 800be74:	1c08      	adds	r0, r1, #0
 800be76:	1c21      	adds	r1, r4, #0
 800be78:	4301      	orrs	r1, r0
 800be7a:	7319      	strb	r1, [r3, #12]
 800be7c:	0a11      	lsrs	r1, r2, #8
 800be7e:	20ff      	movs	r0, #255	; 0xff
 800be80:	4001      	ands	r1, r0
 800be82:	000c      	movs	r4, r1
 800be84:	7b59      	ldrb	r1, [r3, #13]
 800be86:	2000      	movs	r0, #0
 800be88:	4001      	ands	r1, r0
 800be8a:	1c08      	adds	r0, r1, #0
 800be8c:	1c21      	adds	r1, r4, #0
 800be8e:	4301      	orrs	r1, r0
 800be90:	7359      	strb	r1, [r3, #13]
 800be92:	0c11      	lsrs	r1, r2, #16
 800be94:	20ff      	movs	r0, #255	; 0xff
 800be96:	4001      	ands	r1, r0
 800be98:	000c      	movs	r4, r1
 800be9a:	7b99      	ldrb	r1, [r3, #14]
 800be9c:	2000      	movs	r0, #0
 800be9e:	4001      	ands	r1, r0
 800bea0:	1c08      	adds	r0, r1, #0
 800bea2:	1c21      	adds	r1, r4, #0
 800bea4:	4301      	orrs	r1, r0
 800bea6:	7399      	strb	r1, [r3, #14]
 800bea8:	0e10      	lsrs	r0, r2, #24
 800beaa:	7bda      	ldrb	r2, [r3, #15]
 800beac:	2100      	movs	r1, #0
 800beae:	400a      	ands	r2, r1
 800beb0:	1c11      	adds	r1, r2, #0
 800beb2:	1c02      	adds	r2, r0, #0
 800beb4:	430a      	orrs	r2, r1
 800beb6:	73da      	strb	r2, [r3, #15]
 800beb8:	e02a      	b.n	800bf10 <ip_output_if+0x2ac>
    } else {
      /* src cannot be NULL here */
      ip_addr_copy(iphdr->src, *src);
 800beba:	68bb      	ldr	r3, [r7, #8]
 800bebc:	681a      	ldr	r2, [r3, #0]
 800bebe:	69bb      	ldr	r3, [r7, #24]
 800bec0:	21ff      	movs	r1, #255	; 0xff
 800bec2:	4011      	ands	r1, r2
 800bec4:	000c      	movs	r4, r1
 800bec6:	7b19      	ldrb	r1, [r3, #12]
 800bec8:	2000      	movs	r0, #0
 800beca:	4001      	ands	r1, r0
 800becc:	1c08      	adds	r0, r1, #0
 800bece:	1c21      	adds	r1, r4, #0
 800bed0:	4301      	orrs	r1, r0
 800bed2:	7319      	strb	r1, [r3, #12]
 800bed4:	0a11      	lsrs	r1, r2, #8
 800bed6:	20ff      	movs	r0, #255	; 0xff
 800bed8:	4001      	ands	r1, r0
 800beda:	000c      	movs	r4, r1
 800bedc:	7b59      	ldrb	r1, [r3, #13]
 800bede:	2000      	movs	r0, #0
 800bee0:	4001      	ands	r1, r0
 800bee2:	1c08      	adds	r0, r1, #0
 800bee4:	1c21      	adds	r1, r4, #0
 800bee6:	4301      	orrs	r1, r0
 800bee8:	7359      	strb	r1, [r3, #13]
 800beea:	0c11      	lsrs	r1, r2, #16
 800beec:	20ff      	movs	r0, #255	; 0xff
 800beee:	4001      	ands	r1, r0
 800bef0:	000c      	movs	r4, r1
 800bef2:	7b99      	ldrb	r1, [r3, #14]
 800bef4:	2000      	movs	r0, #0
 800bef6:	4001      	ands	r1, r0
 800bef8:	1c08      	adds	r0, r1, #0
 800befa:	1c21      	adds	r1, r4, #0
 800befc:	4301      	orrs	r1, r0
 800befe:	7399      	strb	r1, [r3, #14]
 800bf00:	0e10      	lsrs	r0, r2, #24
 800bf02:	7bda      	ldrb	r2, [r3, #15]
 800bf04:	2100      	movs	r1, #0
 800bf06:	400a      	ands	r2, r1
 800bf08:	1c11      	adds	r1, r2, #0
 800bf0a:	1c02      	adds	r2, r0, #0
 800bf0c:	430a      	orrs	r2, r1
 800bf0e:	73da      	strb	r2, [r3, #15]
    }

#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->src) & 0xFFFF;
 800bf10:	69bb      	ldr	r3, [r7, #24]
 800bf12:	7b1a      	ldrb	r2, [r3, #12]
 800bf14:	7b59      	ldrb	r1, [r3, #13]
 800bf16:	0209      	lsls	r1, r1, #8
 800bf18:	430a      	orrs	r2, r1
 800bf1a:	7b99      	ldrb	r1, [r3, #14]
 800bf1c:	0409      	lsls	r1, r1, #16
 800bf1e:	430a      	orrs	r2, r1
 800bf20:	7bdb      	ldrb	r3, [r3, #15]
 800bf22:	061b      	lsls	r3, r3, #24
 800bf24:	4313      	orrs	r3, r2
 800bf26:	041b      	lsls	r3, r3, #16
 800bf28:	0c1b      	lsrs	r3, r3, #16
 800bf2a:	69fa      	ldr	r2, [r7, #28]
 800bf2c:	18d3      	adds	r3, r2, r3
 800bf2e:	61fb      	str	r3, [r7, #28]
    chk_sum += ip4_addr_get_u32(&iphdr->src) >> 16;
 800bf30:	69bb      	ldr	r3, [r7, #24]
 800bf32:	7b1a      	ldrb	r2, [r3, #12]
 800bf34:	7b59      	ldrb	r1, [r3, #13]
 800bf36:	0209      	lsls	r1, r1, #8
 800bf38:	430a      	orrs	r2, r1
 800bf3a:	7b99      	ldrb	r1, [r3, #14]
 800bf3c:	0409      	lsls	r1, r1, #16
 800bf3e:	430a      	orrs	r2, r1
 800bf40:	7bdb      	ldrb	r3, [r3, #15]
 800bf42:	061b      	lsls	r3, r3, #24
 800bf44:	4313      	orrs	r3, r2
 800bf46:	0c1b      	lsrs	r3, r3, #16
 800bf48:	69fa      	ldr	r2, [r7, #28]
 800bf4a:	18d3      	adds	r3, r2, r3
 800bf4c:	61fb      	str	r3, [r7, #28]
    chk_sum = (chk_sum >> 16) + (chk_sum & 0xFFFF);
 800bf4e:	69fb      	ldr	r3, [r7, #28]
 800bf50:	0c1a      	lsrs	r2, r3, #16
 800bf52:	69fb      	ldr	r3, [r7, #28]
 800bf54:	041b      	lsls	r3, r3, #16
 800bf56:	0c1b      	lsrs	r3, r3, #16
 800bf58:	18d3      	adds	r3, r2, r3
 800bf5a:	61fb      	str	r3, [r7, #28]
    chk_sum = (chk_sum >> 16) + chk_sum;
 800bf5c:	69fb      	ldr	r3, [r7, #28]
 800bf5e:	0c1b      	lsrs	r3, r3, #16
 800bf60:	69fa      	ldr	r2, [r7, #28]
 800bf62:	18d3      	adds	r3, r2, r3
 800bf64:	61fb      	str	r3, [r7, #28]
    chk_sum = ~chk_sum;
 800bf66:	69fb      	ldr	r3, [r7, #28]
 800bf68:	43db      	mvns	r3, r3
 800bf6a:	61fb      	str	r3, [r7, #28]
    iphdr->_chksum = chk_sum; /* network order */
 800bf6c:	69fb      	ldr	r3, [r7, #28]
 800bf6e:	b29a      	uxth	r2, r3
 800bf70:	69bb      	ldr	r3, [r7, #24]
 800bf72:	21ff      	movs	r1, #255	; 0xff
 800bf74:	4011      	ands	r1, r2
 800bf76:	000c      	movs	r4, r1
 800bf78:	7a99      	ldrb	r1, [r3, #10]
 800bf7a:	2000      	movs	r0, #0
 800bf7c:	4001      	ands	r1, r0
 800bf7e:	1c08      	adds	r0, r1, #0
 800bf80:	1c21      	adds	r1, r4, #0
 800bf82:	4301      	orrs	r1, r0
 800bf84:	7299      	strb	r1, [r3, #10]
 800bf86:	0a12      	lsrs	r2, r2, #8
 800bf88:	b290      	uxth	r0, r2
 800bf8a:	7ada      	ldrb	r2, [r3, #11]
 800bf8c:	2100      	movs	r1, #0
 800bf8e:	400a      	ands	r2, r1
 800bf90:	1c11      	adds	r1, r2, #0
 800bf92:	1c02      	adds	r2, r0, #0
 800bf94:	430a      	orrs	r2, r1
 800bf96:	72da      	strb	r2, [r3, #11]
 800bf98:	e011      	b.n	800bfbe <ip_output_if+0x35a>
    IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, ip_hlen));
#endif
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	685b      	ldr	r3, [r3, #4]
 800bf9e:	61bb      	str	r3, [r7, #24]
    ip_addr_copy(dest_addr, iphdr->dest);
 800bfa0:	69bb      	ldr	r3, [r7, #24]
 800bfa2:	7c1a      	ldrb	r2, [r3, #16]
 800bfa4:	7c59      	ldrb	r1, [r3, #17]
 800bfa6:	0209      	lsls	r1, r1, #8
 800bfa8:	430a      	orrs	r2, r1
 800bfaa:	7c99      	ldrb	r1, [r3, #18]
 800bfac:	0409      	lsls	r1, r1, #16
 800bfae:	430a      	orrs	r2, r1
 800bfb0:	7cdb      	ldrb	r3, [r3, #19]
 800bfb2:	061b      	lsls	r3, r3, #24
 800bfb4:	4313      	orrs	r3, r2
 800bfb6:	613b      	str	r3, [r7, #16]
    dest = &dest_addr;
 800bfb8:	2310      	movs	r3, #16
 800bfba:	18fb      	adds	r3, r7, r3
 800bfbc:	607b      	str	r3, [r7, #4]
  }

  IP_STATS_INC(ip.xmit);
 800bfbe:	4b12      	ldr	r3, [pc, #72]	; (800c008 <ip_output_if+0x3a4>)
 800bfc0:	2248      	movs	r2, #72	; 0x48
 800bfc2:	5a9b      	ldrh	r3, [r3, r2]
 800bfc4:	3301      	adds	r3, #1
 800bfc6:	b299      	uxth	r1, r3
 800bfc8:	4b0f      	ldr	r3, [pc, #60]	; (800c008 <ip_output_if+0x3a4>)
 800bfca:	2248      	movs	r2, #72	; 0x48
 800bfcc:	5299      	strh	r1, [r3, r2]
  }
#endif /* LWIP_IGMP */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800bfce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfd0:	8c1b      	ldrh	r3, [r3, #32]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d00d      	beq.n	800bff2 <ip_output_if+0x38e>
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	891a      	ldrh	r2, [r3, #8]
 800bfda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfdc:	8c1b      	ldrh	r3, [r3, #32]
 800bfde:	429a      	cmp	r2, r3
 800bfe0:	d907      	bls.n	800bff2 <ip_output_if+0x38e>
    return ip_frag(p, netif, dest);
 800bfe2:	687a      	ldr	r2, [r7, #4]
 800bfe4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	0018      	movs	r0, r3
 800bfea:	f000 fdf5 	bl	800cbd8 <ip_frag>
 800bfee:	0003      	movs	r3, r0
 800bff0:	e006      	b.n	800c000 <ip_output_if+0x39c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("netif->output()"));
  return netif->output(netif, p, dest);
 800bff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bff4:	695b      	ldr	r3, [r3, #20]
 800bff6:	687a      	ldr	r2, [r7, #4]
 800bff8:	68f9      	ldr	r1, [r7, #12]
 800bffa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bffc:	4798      	blx	r3
 800bffe:	0003      	movs	r3, r0
}
 800c000:	0018      	movs	r0, r3
 800c002:	46bd      	mov	sp, r7
 800c004:	b009      	add	sp, #36	; 0x24
 800c006:	bd90      	pop	{r4, r7, pc}
 800c008:	20003158 	.word	0x20003158
 800c00c:	200022b4 	.word	0x200022b4

0800c010 <ip_output>:
 *         see ip_output_if() for more return values
 */
err_t
ip_output(struct pbuf *p, ip_addr_t *src, ip_addr_t *dest,
          u8_t ttl, u8_t tos, u8_t proto)
{
 800c010:	b590      	push	{r4, r7, lr}
 800c012:	b08b      	sub	sp, #44	; 0x2c
 800c014:	af04      	add	r7, sp, #16
 800c016:	60f8      	str	r0, [r7, #12]
 800c018:	60b9      	str	r1, [r7, #8]
 800c01a:	607a      	str	r2, [r7, #4]
 800c01c:	001a      	movs	r2, r3
 800c01e:	1cfb      	adds	r3, r7, #3
 800c020:	701a      	strb	r2, [r3, #0]

  /* pbufs passed to IP must have a ref-count of 1 as their payload pointer
     gets altered as the packet is passed down the stack */
  LWIP_ASSERT("p->ref == 1", p->ref == 1);

  if ((netif = ip_route(dest)) == NULL) {
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	0018      	movs	r0, r3
 800c026:	f7ff fc0f 	bl	800b848 <ip_route>
 800c02a:	0003      	movs	r3, r0
 800c02c:	617b      	str	r3, [r7, #20]
 800c02e:	697b      	ldr	r3, [r7, #20]
 800c030:	2b00      	cmp	r3, #0
 800c032:	d10a      	bne.n	800c04a <ip_output+0x3a>
    LWIP_DEBUGF(IP_DEBUG, ("ip_output: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
 800c034:	4b10      	ldr	r3, [pc, #64]	; (800c078 <ip_output+0x68>)
 800c036:	2256      	movs	r2, #86	; 0x56
 800c038:	5a9b      	ldrh	r3, [r3, r2]
 800c03a:	3301      	adds	r3, #1
 800c03c:	b299      	uxth	r1, r3
 800c03e:	4b0e      	ldr	r3, [pc, #56]	; (800c078 <ip_output+0x68>)
 800c040:	2256      	movs	r2, #86	; 0x56
 800c042:	5299      	strh	r1, [r3, r2]
    return ERR_RTE;
 800c044:	2304      	movs	r3, #4
 800c046:	425b      	negs	r3, r3
 800c048:	e012      	b.n	800c070 <ip_output+0x60>
  }

  return ip_output_if(p, src, dest, ttl, tos, proto, netif);
 800c04a:	1cfb      	adds	r3, r7, #3
 800c04c:	781c      	ldrb	r4, [r3, #0]
 800c04e:	687a      	ldr	r2, [r7, #4]
 800c050:	68b9      	ldr	r1, [r7, #8]
 800c052:	68f8      	ldr	r0, [r7, #12]
 800c054:	697b      	ldr	r3, [r7, #20]
 800c056:	9302      	str	r3, [sp, #8]
 800c058:	232c      	movs	r3, #44	; 0x2c
 800c05a:	18fb      	adds	r3, r7, r3
 800c05c:	781b      	ldrb	r3, [r3, #0]
 800c05e:	9301      	str	r3, [sp, #4]
 800c060:	2328      	movs	r3, #40	; 0x28
 800c062:	18fb      	adds	r3, r7, r3
 800c064:	781b      	ldrb	r3, [r3, #0]
 800c066:	9300      	str	r3, [sp, #0]
 800c068:	0023      	movs	r3, r4
 800c06a:	f7ff fdfb 	bl	800bc64 <ip_output_if>
 800c06e:	0003      	movs	r3, r0
}
 800c070:	0018      	movs	r0, r3
 800c072:	46bd      	mov	sp, r7
 800c074:	b007      	add	sp, #28
 800c076:	bd90      	pop	{r4, r7, pc}
 800c078:	20003158 	.word	0x20003158

0800c07c <ip4_addr_isbroadcast>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast(u32_t addr, const struct netif *netif)
{
 800c07c:	b580      	push	{r7, lr}
 800c07e:	b084      	sub	sp, #16
 800c080:	af00      	add	r7, sp, #0
 800c082:	6078      	str	r0, [r7, #4]
 800c084:	6039      	str	r1, [r7, #0]
  ip_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	3301      	adds	r3, #1
 800c08e:	d002      	beq.n	800c096 <ip4_addr_isbroadcast+0x1a>
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	2b00      	cmp	r3, #0
 800c094:	d101      	bne.n	800c09a <ip4_addr_isbroadcast+0x1e>
      (addr == IPADDR_ANY)) {
    return 1;
 800c096:	2301      	movs	r3, #1
 800c098:	e024      	b.n	800c0e4 <ip4_addr_isbroadcast+0x68>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800c09a:	683b      	ldr	r3, [r7, #0]
 800c09c:	2229      	movs	r2, #41	; 0x29
 800c09e:	5c9b      	ldrb	r3, [r3, r2]
 800c0a0:	001a      	movs	r2, r3
 800c0a2:	2302      	movs	r3, #2
 800c0a4:	4013      	ands	r3, r2
 800c0a6:	d101      	bne.n	800c0ac <ip4_addr_isbroadcast+0x30>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800c0a8:	2300      	movs	r3, #0
 800c0aa:	e01b      	b.n	800c0e4 <ip4_addr_isbroadcast+0x68>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(&netif->ip_addr)) {
 800c0ac:	683b      	ldr	r3, [r7, #0]
 800c0ae:	685b      	ldr	r3, [r3, #4]
 800c0b0:	687a      	ldr	r2, [r7, #4]
 800c0b2:	429a      	cmp	r2, r3
 800c0b4:	d101      	bne.n	800c0ba <ip4_addr_isbroadcast+0x3e>
    return 0;
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	e014      	b.n	800c0e4 <ip4_addr_isbroadcast+0x68>
  /*  on the same (sub) network... */
  } else if (ip_addr_netcmp(&ipaddr, &(netif->ip_addr), &(netif->netmask))
 800c0ba:	68fa      	ldr	r2, [r7, #12]
 800c0bc:	683b      	ldr	r3, [r7, #0]
 800c0be:	685b      	ldr	r3, [r3, #4]
 800c0c0:	405a      	eors	r2, r3
 800c0c2:	683b      	ldr	r3, [r7, #0]
 800c0c4:	689b      	ldr	r3, [r3, #8]
 800c0c6:	4013      	ands	r3, r2
 800c0c8:	d10b      	bne.n	800c0e2 <ip4_addr_isbroadcast+0x66>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(&netif->netmask)) ==
 800c0ca:	683b      	ldr	r3, [r7, #0]
 800c0cc:	689b      	ldr	r3, [r3, #8]
 800c0ce:	43db      	mvns	r3, r3
 800c0d0:	687a      	ldr	r2, [r7, #4]
 800c0d2:	401a      	ands	r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(&netif->netmask)))) {
 800c0d4:	683b      	ldr	r3, [r7, #0]
 800c0d6:	689b      	ldr	r3, [r3, #8]
 800c0d8:	43db      	mvns	r3, r3
          && ((addr & ~ip4_addr_get_u32(&netif->netmask)) ==
 800c0da:	429a      	cmp	r2, r3
 800c0dc:	d101      	bne.n	800c0e2 <ip4_addr_isbroadcast+0x66>
    /* => network broadcast address */
    return 1;
 800c0de:	2301      	movs	r3, #1
 800c0e0:	e000      	b.n	800c0e4 <ip4_addr_isbroadcast+0x68>
  } else {
    return 0;
 800c0e2:	2300      	movs	r3, #0
  }
}
 800c0e4:	0018      	movs	r0, r3
 800c0e6:	46bd      	mov	sp, r7
 800c0e8:	b004      	add	sp, #16
 800c0ea:	bd80      	pop	{r7, pc}

0800c0ec <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800c0ec:	b580      	push	{r7, lr}
 800c0ee:	b084      	sub	sp, #16
 800c0f0:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800c0f6:	4b13      	ldr	r3, [pc, #76]	; (800c144 <ip_reass_tmr+0x58>)
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800c0fc:	e01a      	b.n	800c134 <ip_reass_tmr+0x48>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	7fdb      	ldrb	r3, [r3, #31]
 800c102:	2b00      	cmp	r3, #0
 800c104:	d00b      	beq.n	800c11e <ip_reass_tmr+0x32>
      r->timer--;
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	7fdb      	ldrb	r3, [r3, #31]
 800c10a:	3b01      	subs	r3, #1
 800c10c:	b2da      	uxtb	r2, r3
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	60fb      	str	r3, [r7, #12]
 800c11c:	e00a      	b.n	800c134 <ip_reass_tmr+0x48>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800c128:	68ba      	ldr	r2, [r7, #8]
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	0011      	movs	r1, r2
 800c12e:	0018      	movs	r0, r3
 800c130:	f000 f80a 	bl	800c148 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	2b00      	cmp	r3, #0
 800c138:	d1e1      	bne.n	800c0fe <ip_reass_tmr+0x12>
     }
   }
}
 800c13a:	46c0      	nop			; (mov r8, r8)
 800c13c:	46bd      	mov	sp, r7
 800c13e:	b004      	add	sp, #16
 800c140:	bd80      	pop	{r7, pc}
 800c142:	46c0      	nop			; (mov r8, r8)
 800c144:	200022b8 	.word	0x200022b8

0800c148 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800c148:	b5b0      	push	{r4, r5, r7, lr}
 800c14a:	b088      	sub	sp, #32
 800c14c:	af00      	add	r7, sp, #0
 800c14e:	6078      	str	r0, [r7, #4]
 800c150:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800c152:	231e      	movs	r3, #30
 800c154:	18fb      	adds	r3, r7, r3
 800c156:	2200      	movs	r2, #0
 800c158:	801a      	strh	r2, [r3, #0]
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
  }

  snmp_inc_ipreasmfails();
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	685b      	ldr	r3, [r3, #4]
 800c15e:	685b      	ldr	r3, [r3, #4]
 800c160:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800c162:	697b      	ldr	r3, [r7, #20]
 800c164:	791a      	ldrb	r2, [r3, #4]
 800c166:	795b      	ldrb	r3, [r3, #5]
 800c168:	021b      	lsls	r3, r3, #8
 800c16a:	4313      	orrs	r3, r2
 800c16c:	b29b      	uxth	r3, r3
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d132      	bne.n	800c1d8 <ip_reass_free_complete_datagram+0x90>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	685b      	ldr	r3, [r3, #4]
 800c176:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800c178:	697b      	ldr	r3, [r7, #20]
 800c17a:	781a      	ldrb	r2, [r3, #0]
 800c17c:	7859      	ldrb	r1, [r3, #1]
 800c17e:	0209      	lsls	r1, r1, #8
 800c180:	430a      	orrs	r2, r1
 800c182:	7899      	ldrb	r1, [r3, #2]
 800c184:	0409      	lsls	r1, r1, #16
 800c186:	430a      	orrs	r2, r1
 800c188:	78db      	ldrb	r3, [r3, #3]
 800c18a:	061b      	lsls	r3, r3, #24
 800c18c:	4313      	orrs	r3, r2
 800c18e:	001a      	movs	r2, r3
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800c194:	69bb      	ldr	r3, [r7, #24]
 800c196:	6858      	ldr	r0, [r3, #4]
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	3308      	adds	r3, #8
 800c19c:	2214      	movs	r2, #20
 800c19e:	0019      	movs	r1, r3
 800c1a0:	f003 fd7f 	bl	800fca2 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800c1a4:	69bb      	ldr	r3, [r7, #24]
 800c1a6:	2101      	movs	r1, #1
 800c1a8:	0018      	movs	r0, r3
 800c1aa:	f7ff f941 	bl	800b430 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800c1ae:	2513      	movs	r5, #19
 800c1b0:	197c      	adds	r4, r7, r5
 800c1b2:	69bb      	ldr	r3, [r7, #24]
 800c1b4:	0018      	movs	r0, r3
 800c1b6:	f7f9 fae7 	bl	8005788 <pbuf_clen>
 800c1ba:	0003      	movs	r3, r0
 800c1bc:	7023      	strb	r3, [r4, #0]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
    pbufs_freed += clen;
 800c1be:	197b      	adds	r3, r7, r5
 800c1c0:	781b      	ldrb	r3, [r3, #0]
 800c1c2:	b299      	uxth	r1, r3
 800c1c4:	221e      	movs	r2, #30
 800c1c6:	18bb      	adds	r3, r7, r2
 800c1c8:	18ba      	adds	r2, r7, r2
 800c1ca:	8812      	ldrh	r2, [r2, #0]
 800c1cc:	188a      	adds	r2, r1, r2
 800c1ce:	801a      	strh	r2, [r3, #0]
    pbuf_free(p);
 800c1d0:	69bb      	ldr	r3, [r7, #24]
 800c1d2:	0018      	movs	r0, r3
 800c1d4:	f7f9 fa66 	bl	80056a4 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released 
     separately as they have not yet been chained */
  p = ipr->p;
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	685b      	ldr	r3, [r3, #4]
 800c1dc:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800c1de:	e026      	b.n	800c22e <ip_reass_free_complete_datagram+0xe6>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800c1e0:	69bb      	ldr	r3, [r7, #24]
 800c1e2:	685b      	ldr	r3, [r3, #4]
 800c1e4:	617b      	str	r3, [r7, #20]
    pcur = p;
 800c1e6:	69bb      	ldr	r3, [r7, #24]
 800c1e8:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800c1ea:	697b      	ldr	r3, [r7, #20]
 800c1ec:	781a      	ldrb	r2, [r3, #0]
 800c1ee:	7859      	ldrb	r1, [r3, #1]
 800c1f0:	0209      	lsls	r1, r1, #8
 800c1f2:	430a      	orrs	r2, r1
 800c1f4:	7899      	ldrb	r1, [r3, #2]
 800c1f6:	0409      	lsls	r1, r1, #16
 800c1f8:	430a      	orrs	r2, r1
 800c1fa:	78db      	ldrb	r3, [r3, #3]
 800c1fc:	061b      	lsls	r3, r3, #24
 800c1fe:	4313      	orrs	r3, r2
 800c200:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800c202:	2313      	movs	r3, #19
 800c204:	18fc      	adds	r4, r7, r3
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	0018      	movs	r0, r3
 800c20a:	f7f9 fabd 	bl	8005788 <pbuf_clen>
 800c20e:	0003      	movs	r3, r0
 800c210:	7023      	strb	r3, [r4, #0]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
    pbufs_freed += clen;
 800c212:	2313      	movs	r3, #19
 800c214:	18fb      	adds	r3, r7, r3
 800c216:	781b      	ldrb	r3, [r3, #0]
 800c218:	b299      	uxth	r1, r3
 800c21a:	221e      	movs	r2, #30
 800c21c:	18bb      	adds	r3, r7, r2
 800c21e:	18ba      	adds	r2, r7, r2
 800c220:	8812      	ldrh	r2, [r2, #0]
 800c222:	188a      	adds	r2, r1, r2
 800c224:	801a      	strh	r2, [r3, #0]
    pbuf_free(pcur);
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	0018      	movs	r0, r3
 800c22a:	f7f9 fa3b 	bl	80056a4 <pbuf_free>
  while (p != NULL) {
 800c22e:	69bb      	ldr	r3, [r7, #24]
 800c230:	2b00      	cmp	r3, #0
 800c232:	d1d5      	bne.n	800c1e0 <ip_reass_free_complete_datagram+0x98>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800c234:	683a      	ldr	r2, [r7, #0]
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	0011      	movs	r1, r2
 800c23a:	0018      	movs	r0, r3
 800c23c:	f000 f8ce 	bl	800c3dc <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
  ip_reass_pbufcount -= pbufs_freed;
 800c240:	4b07      	ldr	r3, [pc, #28]	; (800c260 <ip_reass_free_complete_datagram+0x118>)
 800c242:	881a      	ldrh	r2, [r3, #0]
 800c244:	211e      	movs	r1, #30
 800c246:	187b      	adds	r3, r7, r1
 800c248:	881b      	ldrh	r3, [r3, #0]
 800c24a:	1ad3      	subs	r3, r2, r3
 800c24c:	b29a      	uxth	r2, r3
 800c24e:	4b04      	ldr	r3, [pc, #16]	; (800c260 <ip_reass_free_complete_datagram+0x118>)
 800c250:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800c252:	187b      	adds	r3, r7, r1
 800c254:	881b      	ldrh	r3, [r3, #0]
}
 800c256:	0018      	movs	r0, r3
 800c258:	46bd      	mov	sp, r7
 800c25a:	b008      	add	sp, #32
 800c25c:	bdb0      	pop	{r4, r5, r7, pc}
 800c25e:	46c0      	nop			; (mov r8, r8)
 800c260:	200022bc 	.word	0x200022bc

0800c264 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800c264:	b580      	push	{r7, lr}
 800c266:	b088      	sub	sp, #32
 800c268:	af00      	add	r7, sp, #0
 800c26a:	6078      	str	r0, [r7, #4]
 800c26c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800c26e:	2300      	movs	r3, #0
 800c270:	613b      	str	r3, [r7, #16]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800c272:	2300      	movs	r3, #0
 800c274:	61bb      	str	r3, [r7, #24]
    prev = NULL;
 800c276:	2300      	movs	r3, #0
 800c278:	617b      	str	r3, [r7, #20]
    other_datagrams = 0;
 800c27a:	2300      	movs	r3, #0
 800c27c:	60fb      	str	r3, [r7, #12]
    r = reassdatagrams;
 800c27e:	4b32      	ldr	r3, [pc, #200]	; (800c348 <ip_reass_remove_oldest_datagram+0xe4>)
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	61fb      	str	r3, [r7, #28]
    while (r != NULL) {
 800c284:	e041      	b.n	800c30a <ip_reass_remove_oldest_datagram+0xa6>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800c286:	69fb      	ldr	r3, [r7, #28]
 800c288:	695a      	ldr	r2, [r3, #20]
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	7b19      	ldrb	r1, [r3, #12]
 800c28e:	7b58      	ldrb	r0, [r3, #13]
 800c290:	0200      	lsls	r0, r0, #8
 800c292:	4301      	orrs	r1, r0
 800c294:	7b98      	ldrb	r0, [r3, #14]
 800c296:	0400      	lsls	r0, r0, #16
 800c298:	4301      	orrs	r1, r0
 800c29a:	7bdb      	ldrb	r3, [r3, #15]
 800c29c:	061b      	lsls	r3, r3, #24
 800c29e:	430b      	orrs	r3, r1
 800c2a0:	429a      	cmp	r2, r3
 800c2a2:	d118      	bne.n	800c2d6 <ip_reass_remove_oldest_datagram+0x72>
 800c2a4:	69fb      	ldr	r3, [r7, #28]
 800c2a6:	699a      	ldr	r2, [r3, #24]
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	7c19      	ldrb	r1, [r3, #16]
 800c2ac:	7c58      	ldrb	r0, [r3, #17]
 800c2ae:	0200      	lsls	r0, r0, #8
 800c2b0:	4301      	orrs	r1, r0
 800c2b2:	7c98      	ldrb	r0, [r3, #18]
 800c2b4:	0400      	lsls	r0, r0, #16
 800c2b6:	4301      	orrs	r1, r0
 800c2b8:	7cdb      	ldrb	r3, [r3, #19]
 800c2ba:	061b      	lsls	r3, r3, #24
 800c2bc:	430b      	orrs	r3, r1
 800c2be:	429a      	cmp	r2, r3
 800c2c0:	d109      	bne.n	800c2d6 <ip_reass_remove_oldest_datagram+0x72>
 800c2c2:	69fb      	ldr	r3, [r7, #28]
 800c2c4:	899a      	ldrh	r2, [r3, #12]
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	7919      	ldrb	r1, [r3, #4]
 800c2ca:	795b      	ldrb	r3, [r3, #5]
 800c2cc:	021b      	lsls	r3, r3, #8
 800c2ce:	430b      	orrs	r3, r1
 800c2d0:	b29b      	uxth	r3, r3
 800c2d2:	429a      	cmp	r2, r3
 800c2d4:	d010      	beq.n	800c2f8 <ip_reass_remove_oldest_datagram+0x94>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	3301      	adds	r3, #1
 800c2da:	60fb      	str	r3, [r7, #12]
        if (oldest == NULL) {
 800c2dc:	69bb      	ldr	r3, [r7, #24]
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d102      	bne.n	800c2e8 <ip_reass_remove_oldest_datagram+0x84>
          oldest = r;
 800c2e2:	69fb      	ldr	r3, [r7, #28]
 800c2e4:	61bb      	str	r3, [r7, #24]
 800c2e6:	e007      	b.n	800c2f8 <ip_reass_remove_oldest_datagram+0x94>
        } else if (r->timer <= oldest->timer) {
 800c2e8:	69fb      	ldr	r3, [r7, #28]
 800c2ea:	7fda      	ldrb	r2, [r3, #31]
 800c2ec:	69bb      	ldr	r3, [r7, #24]
 800c2ee:	7fdb      	ldrb	r3, [r3, #31]
 800c2f0:	429a      	cmp	r2, r3
 800c2f2:	d801      	bhi.n	800c2f8 <ip_reass_remove_oldest_datagram+0x94>
          /* older than the previous oldest */
          oldest = r;
 800c2f4:	69fb      	ldr	r3, [r7, #28]
 800c2f6:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800c2f8:	69fb      	ldr	r3, [r7, #28]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d001      	beq.n	800c304 <ip_reass_remove_oldest_datagram+0xa0>
        prev = r;
 800c300:	69fb      	ldr	r3, [r7, #28]
 800c302:	617b      	str	r3, [r7, #20]
      }
      r = r->next;
 800c304:	69fb      	ldr	r3, [r7, #28]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	61fb      	str	r3, [r7, #28]
    while (r != NULL) {
 800c30a:	69fb      	ldr	r3, [r7, #28]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d1ba      	bne.n	800c286 <ip_reass_remove_oldest_datagram+0x22>
    }
    if (oldest != NULL) {
 800c310:	69bb      	ldr	r3, [r7, #24]
 800c312:	2b00      	cmp	r3, #0
 800c314:	d00b      	beq.n	800c32e <ip_reass_remove_oldest_datagram+0xca>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, prev);
 800c316:	697a      	ldr	r2, [r7, #20]
 800c318:	69bb      	ldr	r3, [r7, #24]
 800c31a:	0011      	movs	r1, r2
 800c31c:	0018      	movs	r0, r3
 800c31e:	f7ff ff13 	bl	800c148 <ip_reass_free_complete_datagram>
 800c322:	0003      	movs	r3, r0
 800c324:	60bb      	str	r3, [r7, #8]
      pbufs_freed += pbufs_freed_current;
 800c326:	693a      	ldr	r2, [r7, #16]
 800c328:	68bb      	ldr	r3, [r7, #8]
 800c32a:	18d3      	adds	r3, r2, r3
 800c32c:	613b      	str	r3, [r7, #16]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800c32e:	693a      	ldr	r2, [r7, #16]
 800c330:	683b      	ldr	r3, [r7, #0]
 800c332:	429a      	cmp	r2, r3
 800c334:	da02      	bge.n	800c33c <ip_reass_remove_oldest_datagram+0xd8>
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	2b01      	cmp	r3, #1
 800c33a:	dc9a      	bgt.n	800c272 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800c33c:	693b      	ldr	r3, [r7, #16]
}
 800c33e:	0018      	movs	r0, r3
 800c340:	46bd      	mov	sp, r7
 800c342:	b008      	add	sp, #32
 800c344:	bd80      	pop	{r7, pc}
 800c346:	46c0      	nop			; (mov r8, r8)
 800c348:	200022b8 	.word	0x200022b8

0800c34c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800c34c:	b580      	push	{r7, lr}
 800c34e:	b084      	sub	sp, #16
 800c350:	af00      	add	r7, sp, #0
 800c352:	6078      	str	r0, [r7, #4]
 800c354:	6039      	str	r1, [r7, #0]
  struct ip_reassdata* ipr;
  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800c356:	2005      	movs	r0, #5
 800c358:	f7f8 fd5c 	bl	8004e14 <memp_malloc>
 800c35c:	0003      	movs	r3, r0
 800c35e:	60fb      	str	r3, [r7, #12]
  if (ipr == NULL) {
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	2b00      	cmp	r3, #0
 800c364:	d119      	bne.n	800c39a <ip_reass_enqueue_new_datagram+0x4e>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800c366:	683a      	ldr	r2, [r7, #0]
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	0011      	movs	r1, r2
 800c36c:	0018      	movs	r0, r3
 800c36e:	f7ff ff79 	bl	800c264 <ip_reass_remove_oldest_datagram>
 800c372:	0002      	movs	r2, r0
 800c374:	683b      	ldr	r3, [r7, #0]
 800c376:	4293      	cmp	r3, r2
 800c378:	dc04      	bgt.n	800c384 <ip_reass_enqueue_new_datagram+0x38>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800c37a:	2005      	movs	r0, #5
 800c37c:	f7f8 fd4a 	bl	8004e14 <memp_malloc>
 800c380:	0003      	movs	r3, r0
 800c382:	60fb      	str	r3, [r7, #12]
    }
    if (ipr == NULL)
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	2b00      	cmp	r3, #0
 800c388:	d107      	bne.n	800c39a <ip_reass_enqueue_new_datagram+0x4e>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
 800c38a:	4b12      	ldr	r3, [pc, #72]	; (800c3d4 <ip_reass_enqueue_new_datagram+0x88>)
 800c38c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800c38e:	3301      	adds	r3, #1
 800c390:	b29a      	uxth	r2, r3
 800c392:	4b10      	ldr	r3, [pc, #64]	; (800c3d4 <ip_reass_enqueue_new_datagram+0x88>)
 800c394:	879a      	strh	r2, [r3, #60]	; 0x3c
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
 800c396:	2300      	movs	r3, #0
 800c398:	e017      	b.n	800c3ca <ip_reass_enqueue_new_datagram+0x7e>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	2220      	movs	r2, #32
 800c39e:	2100      	movs	r1, #0
 800c3a0:	0018      	movs	r0, r3
 800c3a2:	f003 fc87 	bl	800fcb4 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	2203      	movs	r2, #3
 800c3aa:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800c3ac:	4b0a      	ldr	r3, [pc, #40]	; (800c3d8 <ip_reass_enqueue_new_datagram+0x8c>)
 800c3ae:	681a      	ldr	r2, [r3, #0]
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800c3b4:	4b08      	ldr	r3, [pc, #32]	; (800c3d8 <ip_reass_enqueue_new_datagram+0x8c>)
 800c3b6:	68fa      	ldr	r2, [r7, #12]
 800c3b8:	601a      	str	r2, [r3, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	3308      	adds	r3, #8
 800c3be:	6879      	ldr	r1, [r7, #4]
 800c3c0:	2214      	movs	r2, #20
 800c3c2:	0018      	movs	r0, r3
 800c3c4:	f003 fc6d 	bl	800fca2 <memcpy>
  return ipr;
 800c3c8:	68fb      	ldr	r3, [r7, #12]
}
 800c3ca:	0018      	movs	r0, r3
 800c3cc:	46bd      	mov	sp, r7
 800c3ce:	b004      	add	sp, #16
 800c3d0:	bd80      	pop	{r7, pc}
 800c3d2:	46c0      	nop			; (mov r8, r8)
 800c3d4:	20003158 	.word	0x20003158
 800c3d8:	200022b8 	.word	0x200022b8

0800c3dc <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800c3dc:	b580      	push	{r7, lr}
 800c3de:	b082      	sub	sp, #8
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	6078      	str	r0, [r7, #4]
 800c3e4:	6039      	str	r1, [r7, #0]
  
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800c3e6:	4b0b      	ldr	r3, [pc, #44]	; (800c414 <ip_reass_dequeue_datagram+0x38>)
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	687a      	ldr	r2, [r7, #4]
 800c3ec:	429a      	cmp	r2, r3
 800c3ee:	d104      	bne.n	800c3fa <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	681a      	ldr	r2, [r3, #0]
 800c3f4:	4b07      	ldr	r3, [pc, #28]	; (800c414 <ip_reass_dequeue_datagram+0x38>)
 800c3f6:	601a      	str	r2, [r3, #0]
 800c3f8:	e003      	b.n	800c402 <ip_reass_dequeue_datagram+0x26>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
    prev->next = ipr->next;
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	681a      	ldr	r2, [r3, #0]
 800c3fe:	683b      	ldr	r3, [r7, #0]
 800c400:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reass struct */
  memp_free(MEMP_REASSDATA, ipr);
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	0019      	movs	r1, r3
 800c406:	2005      	movs	r0, #5
 800c408:	f7f8 fd8a 	bl	8004f20 <memp_free>
}
 800c40c:	46c0      	nop			; (mov r8, r8)
 800c40e:	46bd      	mov	sp, r7
 800c410:	b002      	add	sp, #8
 800c412:	bd80      	pop	{r7, pc}
 800c414:	200022b8 	.word	0x200022b8

0800c418 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param new_p points to the pbuf for the current fragment
 * @return 0 if invalid, >0 otherwise
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p)
{
 800c418:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c41a:	b08b      	sub	sp, #44	; 0x2c
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	6078      	str	r0, [r7, #4]
 800c420:	6039      	str	r1, [r7, #0]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 800c422:	2300      	movs	r3, #0
 800c424:	623b      	str	r3, [r7, #32]
  struct pbuf *q;
  u16_t offset,len;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800c426:	2301      	movs	r3, #1
 800c428:	61bb      	str	r3, [r7, #24]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload; 
 800c42a:	683b      	ldr	r3, [r7, #0]
 800c42c:	685b      	ldr	r3, [r3, #4]
 800c42e:	617b      	str	r3, [r7, #20]
  len = ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800c430:	697b      	ldr	r3, [r7, #20]
 800c432:	789a      	ldrb	r2, [r3, #2]
 800c434:	78db      	ldrb	r3, [r3, #3]
 800c436:	021b      	lsls	r3, r3, #8
 800c438:	4313      	orrs	r3, r2
 800c43a:	b29b      	uxth	r3, r3
 800c43c:	0018      	movs	r0, r3
 800c43e:	f7f8 f8ff 	bl	8004640 <lwip_ntohs>
 800c442:	0003      	movs	r3, r0
 800c444:	0019      	movs	r1, r3
 800c446:	697b      	ldr	r3, [r7, #20]
 800c448:	781b      	ldrb	r3, [r3, #0]
 800c44a:	b29b      	uxth	r3, r3
 800c44c:	220f      	movs	r2, #15
 800c44e:	4013      	ands	r3, r2
 800c450:	b29b      	uxth	r3, r3
 800c452:	009b      	lsls	r3, r3, #2
 800c454:	b29a      	uxth	r2, r3
 800c456:	2612      	movs	r6, #18
 800c458:	19bb      	adds	r3, r7, r6
 800c45a:	1a8a      	subs	r2, r1, r2
 800c45c:	801a      	strh	r2, [r3, #0]
  offset = (ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800c45e:	697b      	ldr	r3, [r7, #20]
 800c460:	799a      	ldrb	r2, [r3, #6]
 800c462:	79db      	ldrb	r3, [r3, #7]
 800c464:	021b      	lsls	r3, r3, #8
 800c466:	4313      	orrs	r3, r2
 800c468:	b29b      	uxth	r3, r3
 800c46a:	0018      	movs	r0, r3
 800c46c:	f7f8 f8e8 	bl	8004640 <lwip_ntohs>
 800c470:	0003      	movs	r3, r0
 800c472:	04db      	lsls	r3, r3, #19
 800c474:	0cdb      	lsrs	r3, r3, #19
 800c476:	b29a      	uxth	r2, r3
 800c478:	2010      	movs	r0, #16
 800c47a:	183b      	adds	r3, r7, r0
 800c47c:	00d2      	lsls	r2, r2, #3
 800c47e:	801a      	strh	r2, [r3, #0]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
 800c480:	683b      	ldr	r3, [r7, #0]
 800c482:	685b      	ldr	r3, [r3, #4]
 800c484:	627b      	str	r3, [r7, #36]	; 0x24
  iprh->next_pbuf = NULL;
 800c486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c488:	781a      	ldrb	r2, [r3, #0]
 800c48a:	2100      	movs	r1, #0
 800c48c:	400a      	ands	r2, r1
 800c48e:	701a      	strb	r2, [r3, #0]
 800c490:	785a      	ldrb	r2, [r3, #1]
 800c492:	2100      	movs	r1, #0
 800c494:	400a      	ands	r2, r1
 800c496:	705a      	strb	r2, [r3, #1]
 800c498:	789a      	ldrb	r2, [r3, #2]
 800c49a:	2100      	movs	r1, #0
 800c49c:	400a      	ands	r2, r1
 800c49e:	709a      	strb	r2, [r3, #2]
 800c4a0:	78da      	ldrb	r2, [r3, #3]
 800c4a2:	2100      	movs	r1, #0
 800c4a4:	400a      	ands	r2, r1
 800c4a6:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800c4a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4aa:	0005      	movs	r5, r0
 800c4ac:	183a      	adds	r2, r7, r0
 800c4ae:	7814      	ldrb	r4, [r2, #0]
 800c4b0:	7919      	ldrb	r1, [r3, #4]
 800c4b2:	2000      	movs	r0, #0
 800c4b4:	4001      	ands	r1, r0
 800c4b6:	1c08      	adds	r0, r1, #0
 800c4b8:	1c21      	adds	r1, r4, #0
 800c4ba:	4301      	orrs	r1, r0
 800c4bc:	7119      	strb	r1, [r3, #4]
 800c4be:	7850      	ldrb	r0, [r2, #1]
 800c4c0:	795a      	ldrb	r2, [r3, #5]
 800c4c2:	2100      	movs	r1, #0
 800c4c4:	400a      	ands	r2, r1
 800c4c6:	1c11      	adds	r1, r2, #0
 800c4c8:	1c02      	adds	r2, r0, #0
 800c4ca:	430a      	orrs	r2, r1
 800c4cc:	715a      	strb	r2, [r3, #5]
  iprh->end = offset + len;
 800c4ce:	0028      	movs	r0, r5
 800c4d0:	183a      	adds	r2, r7, r0
 800c4d2:	19bb      	adds	r3, r7, r6
 800c4d4:	8812      	ldrh	r2, [r2, #0]
 800c4d6:	881b      	ldrh	r3, [r3, #0]
 800c4d8:	18d3      	adds	r3, r2, r3
 800c4da:	b29a      	uxth	r2, r3
 800c4dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4de:	21ff      	movs	r1, #255	; 0xff
 800c4e0:	4011      	ands	r1, r2
 800c4e2:	000c      	movs	r4, r1
 800c4e4:	7999      	ldrb	r1, [r3, #6]
 800c4e6:	2000      	movs	r0, #0
 800c4e8:	4001      	ands	r1, r0
 800c4ea:	1c08      	adds	r0, r1, #0
 800c4ec:	1c21      	adds	r1, r4, #0
 800c4ee:	4301      	orrs	r1, r0
 800c4f0:	7199      	strb	r1, [r3, #6]
 800c4f2:	0a12      	lsrs	r2, r2, #8
 800c4f4:	b290      	uxth	r0, r2
 800c4f6:	79da      	ldrb	r2, [r3, #7]
 800c4f8:	2100      	movs	r1, #0
 800c4fa:	400a      	ands	r2, r1
 800c4fc:	1c11      	adds	r1, r2, #0
 800c4fe:	1c02      	adds	r2, r0, #0
 800c500:	430a      	orrs	r2, r1
 800c502:	71da      	strb	r2, [r3, #7]

  /* Iterate through until we either get to the end of the list (append),
   * or we find on with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	685b      	ldr	r3, [r3, #4]
 800c508:	61fb      	str	r3, [r7, #28]
 800c50a:	e0c3      	b.n	800c694 <ip_reass_chain_frag_into_datagram_and_validate+0x27c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 800c50c:	69fb      	ldr	r3, [r7, #28]
 800c50e:	685b      	ldr	r3, [r3, #4]
 800c510:	60fb      	str	r3, [r7, #12]
    if (iprh->start < iprh_tmp->start) {
 800c512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c514:	791a      	ldrb	r2, [r3, #4]
 800c516:	795b      	ldrb	r3, [r3, #5]
 800c518:	021b      	lsls	r3, r3, #8
 800c51a:	4313      	orrs	r3, r2
 800c51c:	b29a      	uxth	r2, r3
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	7919      	ldrb	r1, [r3, #4]
 800c522:	795b      	ldrb	r3, [r3, #5]
 800c524:	021b      	lsls	r3, r3, #8
 800c526:	430b      	orrs	r3, r1
 800c528:	b29b      	uxth	r3, r3
 800c52a:	429a      	cmp	r2, r3
 800c52c:	d273      	bcs.n	800c616 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800c52e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c530:	221c      	movs	r2, #28
 800c532:	18ba      	adds	r2, r7, r2
 800c534:	7810      	ldrb	r0, [r2, #0]
 800c536:	781a      	ldrb	r2, [r3, #0]
 800c538:	2100      	movs	r1, #0
 800c53a:	400a      	ands	r2, r1
 800c53c:	1c11      	adds	r1, r2, #0
 800c53e:	1c02      	adds	r2, r0, #0
 800c540:	430a      	orrs	r2, r1
 800c542:	701a      	strb	r2, [r3, #0]
 800c544:	221d      	movs	r2, #29
 800c546:	18ba      	adds	r2, r7, r2
 800c548:	7810      	ldrb	r0, [r2, #0]
 800c54a:	785a      	ldrb	r2, [r3, #1]
 800c54c:	2100      	movs	r1, #0
 800c54e:	400a      	ands	r2, r1
 800c550:	1c11      	adds	r1, r2, #0
 800c552:	1c02      	adds	r2, r0, #0
 800c554:	430a      	orrs	r2, r1
 800c556:	705a      	strb	r2, [r3, #1]
 800c558:	221e      	movs	r2, #30
 800c55a:	18ba      	adds	r2, r7, r2
 800c55c:	7810      	ldrb	r0, [r2, #0]
 800c55e:	789a      	ldrb	r2, [r3, #2]
 800c560:	2100      	movs	r1, #0
 800c562:	400a      	ands	r2, r1
 800c564:	1c11      	adds	r1, r2, #0
 800c566:	1c02      	adds	r2, r0, #0
 800c568:	430a      	orrs	r2, r1
 800c56a:	709a      	strb	r2, [r3, #2]
 800c56c:	221f      	movs	r2, #31
 800c56e:	18ba      	adds	r2, r7, r2
 800c570:	7810      	ldrb	r0, [r2, #0]
 800c572:	78da      	ldrb	r2, [r3, #3]
 800c574:	2100      	movs	r1, #0
 800c576:	400a      	ands	r2, r1
 800c578:	1c11      	adds	r1, r2, #0
 800c57a:	1c02      	adds	r2, r0, #0
 800c57c:	430a      	orrs	r2, r1
 800c57e:	70da      	strb	r2, [r3, #3]
      if (iprh_prev != NULL) {
 800c580:	6a3b      	ldr	r3, [r7, #32]
 800c582:	2b00      	cmp	r3, #0
 800c584:	d043      	beq.n	800c60e <ip_reass_chain_frag_into_datagram_and_validate+0x1f6>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800c586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c588:	791a      	ldrb	r2, [r3, #4]
 800c58a:	795b      	ldrb	r3, [r3, #5]
 800c58c:	021b      	lsls	r3, r3, #8
 800c58e:	4313      	orrs	r3, r2
 800c590:	b29a      	uxth	r2, r3
 800c592:	6a3b      	ldr	r3, [r7, #32]
 800c594:	7999      	ldrb	r1, [r3, #6]
 800c596:	79db      	ldrb	r3, [r3, #7]
 800c598:	021b      	lsls	r3, r3, #8
 800c59a:	430b      	orrs	r3, r1
 800c59c:	b29b      	uxth	r3, r3
 800c59e:	429a      	cmp	r2, r3
 800c5a0:	d200      	bcs.n	800c5a4 <ip_reass_chain_frag_into_datagram_and_validate+0x18c>
 800c5a2:	e108      	b.n	800c7b6 <ip_reass_chain_frag_into_datagram_and_validate+0x39e>
 800c5a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5a6:	799a      	ldrb	r2, [r3, #6]
 800c5a8:	79db      	ldrb	r3, [r3, #7]
 800c5aa:	021b      	lsls	r3, r3, #8
 800c5ac:	4313      	orrs	r3, r2
 800c5ae:	b29a      	uxth	r2, r3
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	7919      	ldrb	r1, [r3, #4]
 800c5b4:	795b      	ldrb	r3, [r3, #5]
 800c5b6:	021b      	lsls	r3, r3, #8
 800c5b8:	430b      	orrs	r3, r1
 800c5ba:	b29b      	uxth	r3, r3
 800c5bc:	429a      	cmp	r2, r3
 800c5be:	d900      	bls.n	800c5c2 <ip_reass_chain_frag_into_datagram_and_validate+0x1aa>
 800c5c0:	e0f9      	b.n	800c7b6 <ip_reass_chain_frag_into_datagram_and_validate+0x39e>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800c5c2:	6a3b      	ldr	r3, [r7, #32]
 800c5c4:	003a      	movs	r2, r7
 800c5c6:	7810      	ldrb	r0, [r2, #0]
 800c5c8:	781a      	ldrb	r2, [r3, #0]
 800c5ca:	2100      	movs	r1, #0
 800c5cc:	400a      	ands	r2, r1
 800c5ce:	1c11      	adds	r1, r2, #0
 800c5d0:	1c02      	adds	r2, r0, #0
 800c5d2:	430a      	orrs	r2, r1
 800c5d4:	701a      	strb	r2, [r3, #0]
 800c5d6:	1c7a      	adds	r2, r7, #1
 800c5d8:	7810      	ldrb	r0, [r2, #0]
 800c5da:	785a      	ldrb	r2, [r3, #1]
 800c5dc:	2100      	movs	r1, #0
 800c5de:	400a      	ands	r2, r1
 800c5e0:	1c11      	adds	r1, r2, #0
 800c5e2:	1c02      	adds	r2, r0, #0
 800c5e4:	430a      	orrs	r2, r1
 800c5e6:	705a      	strb	r2, [r3, #1]
 800c5e8:	1cba      	adds	r2, r7, #2
 800c5ea:	7810      	ldrb	r0, [r2, #0]
 800c5ec:	789a      	ldrb	r2, [r3, #2]
 800c5ee:	2100      	movs	r1, #0
 800c5f0:	400a      	ands	r2, r1
 800c5f2:	1c11      	adds	r1, r2, #0
 800c5f4:	1c02      	adds	r2, r0, #0
 800c5f6:	430a      	orrs	r2, r1
 800c5f8:	709a      	strb	r2, [r3, #2]
 800c5fa:	1cfa      	adds	r2, r7, #3
 800c5fc:	7810      	ldrb	r0, [r2, #0]
 800c5fe:	78da      	ldrb	r2, [r3, #3]
 800c600:	2100      	movs	r1, #0
 800c602:	400a      	ands	r2, r1
 800c604:	1c11      	adds	r1, r2, #0
 800c606:	1c02      	adds	r2, r0, #0
 800c608:	430a      	orrs	r2, r1
 800c60a:	70da      	strb	r2, [r3, #3]
      } else {
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800c60c:	e046      	b.n	800c69c <ip_reass_chain_frag_into_datagram_and_validate+0x284>
        ipr->p = new_p;
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	683a      	ldr	r2, [r7, #0]
 800c612:	605a      	str	r2, [r3, #4]
      break;
 800c614:	e042      	b.n	800c69c <ip_reass_chain_frag_into_datagram_and_validate+0x284>
    } else if(iprh->start == iprh_tmp->start) {
 800c616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c618:	791a      	ldrb	r2, [r3, #4]
 800c61a:	795b      	ldrb	r3, [r3, #5]
 800c61c:	021b      	lsls	r3, r3, #8
 800c61e:	4313      	orrs	r3, r2
 800c620:	b29a      	uxth	r2, r3
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	7919      	ldrb	r1, [r3, #4]
 800c626:	795b      	ldrb	r3, [r3, #5]
 800c628:	021b      	lsls	r3, r3, #8
 800c62a:	430b      	orrs	r3, r1
 800c62c:	b29b      	uxth	r3, r3
 800c62e:	429a      	cmp	r2, r3
 800c630:	d100      	bne.n	800c634 <ip_reass_chain_frag_into_datagram_and_validate+0x21c>
 800c632:	e0c2      	b.n	800c7ba <ip_reass_chain_frag_into_datagram_and_validate+0x3a2>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if(iprh->start < iprh_tmp->end) {
 800c634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c636:	791a      	ldrb	r2, [r3, #4]
 800c638:	795b      	ldrb	r3, [r3, #5]
 800c63a:	021b      	lsls	r3, r3, #8
 800c63c:	4313      	orrs	r3, r2
 800c63e:	b29a      	uxth	r2, r3
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	7999      	ldrb	r1, [r3, #6]
 800c644:	79db      	ldrb	r3, [r3, #7]
 800c646:	021b      	lsls	r3, r3, #8
 800c648:	430b      	orrs	r3, r1
 800c64a:	b29b      	uxth	r3, r3
 800c64c:	429a      	cmp	r2, r3
 800c64e:	d200      	bcs.n	800c652 <ip_reass_chain_frag_into_datagram_and_validate+0x23a>
 800c650:	e0b5      	b.n	800c7be <ip_reass_chain_frag_into_datagram_and_validate+0x3a6>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no wholes. */
      if (iprh_prev != NULL) {
 800c652:	6a3b      	ldr	r3, [r7, #32]
 800c654:	2b00      	cmp	r3, #0
 800c656:	d00f      	beq.n	800c678 <ip_reass_chain_frag_into_datagram_and_validate+0x260>
        if (iprh_prev->end != iprh_tmp->start) {
 800c658:	6a3b      	ldr	r3, [r7, #32]
 800c65a:	799a      	ldrb	r2, [r3, #6]
 800c65c:	79db      	ldrb	r3, [r3, #7]
 800c65e:	021b      	lsls	r3, r3, #8
 800c660:	4313      	orrs	r3, r2
 800c662:	b29a      	uxth	r2, r3
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	7919      	ldrb	r1, [r3, #4]
 800c668:	795b      	ldrb	r3, [r3, #5]
 800c66a:	021b      	lsls	r3, r3, #8
 800c66c:	430b      	orrs	r3, r1
 800c66e:	b29b      	uxth	r3, r3
 800c670:	429a      	cmp	r2, r3
 800c672:	d001      	beq.n	800c678 <ip_reass_chain_frag_into_datagram_and_validate+0x260>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800c674:	2300      	movs	r3, #0
 800c676:	61bb      	str	r3, [r7, #24]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	781a      	ldrb	r2, [r3, #0]
 800c67c:	7859      	ldrb	r1, [r3, #1]
 800c67e:	0209      	lsls	r1, r1, #8
 800c680:	430a      	orrs	r2, r1
 800c682:	7899      	ldrb	r1, [r3, #2]
 800c684:	0409      	lsls	r1, r1, #16
 800c686:	430a      	orrs	r2, r1
 800c688:	78db      	ldrb	r3, [r3, #3]
 800c68a:	061b      	lsls	r3, r3, #24
 800c68c:	4313      	orrs	r3, r2
 800c68e:	61fb      	str	r3, [r7, #28]
    iprh_prev = iprh_tmp;
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	623b      	str	r3, [r7, #32]
  for (q = ipr->p; q != NULL;) {
 800c694:	69fb      	ldr	r3, [r7, #28]
 800c696:	2b00      	cmp	r3, #0
 800c698:	d000      	beq.n	800c69c <ip_reass_chain_frag_into_datagram_and_validate+0x284>
 800c69a:	e737      	b.n	800c50c <ip_reass_chain_frag_into_datagram_and_validate+0xf4>
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800c69c:	69fb      	ldr	r3, [r7, #28]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d13b      	bne.n	800c71a <ip_reass_chain_frag_into_datagram_and_validate+0x302>
    if (iprh_prev != NULL) {
 800c6a2:	6a3b      	ldr	r3, [r7, #32]
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d035      	beq.n	800c714 <ip_reass_chain_frag_into_datagram_and_validate+0x2fc>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800c6a8:	6a3b      	ldr	r3, [r7, #32]
 800c6aa:	003a      	movs	r2, r7
 800c6ac:	7810      	ldrb	r0, [r2, #0]
 800c6ae:	781a      	ldrb	r2, [r3, #0]
 800c6b0:	2100      	movs	r1, #0
 800c6b2:	400a      	ands	r2, r1
 800c6b4:	1c11      	adds	r1, r2, #0
 800c6b6:	1c02      	adds	r2, r0, #0
 800c6b8:	430a      	orrs	r2, r1
 800c6ba:	701a      	strb	r2, [r3, #0]
 800c6bc:	1c7a      	adds	r2, r7, #1
 800c6be:	7810      	ldrb	r0, [r2, #0]
 800c6c0:	785a      	ldrb	r2, [r3, #1]
 800c6c2:	2100      	movs	r1, #0
 800c6c4:	400a      	ands	r2, r1
 800c6c6:	1c11      	adds	r1, r2, #0
 800c6c8:	1c02      	adds	r2, r0, #0
 800c6ca:	430a      	orrs	r2, r1
 800c6cc:	705a      	strb	r2, [r3, #1]
 800c6ce:	1cba      	adds	r2, r7, #2
 800c6d0:	7810      	ldrb	r0, [r2, #0]
 800c6d2:	789a      	ldrb	r2, [r3, #2]
 800c6d4:	2100      	movs	r1, #0
 800c6d6:	400a      	ands	r2, r1
 800c6d8:	1c11      	adds	r1, r2, #0
 800c6da:	1c02      	adds	r2, r0, #0
 800c6dc:	430a      	orrs	r2, r1
 800c6de:	709a      	strb	r2, [r3, #2]
 800c6e0:	1cfa      	adds	r2, r7, #3
 800c6e2:	7810      	ldrb	r0, [r2, #0]
 800c6e4:	78da      	ldrb	r2, [r3, #3]
 800c6e6:	2100      	movs	r1, #0
 800c6e8:	400a      	ands	r2, r1
 800c6ea:	1c11      	adds	r1, r2, #0
 800c6ec:	1c02      	adds	r2, r0, #0
 800c6ee:	430a      	orrs	r2, r1
 800c6f0:	70da      	strb	r2, [r3, #3]
      if (iprh_prev->end != iprh->start) {
 800c6f2:	6a3b      	ldr	r3, [r7, #32]
 800c6f4:	799a      	ldrb	r2, [r3, #6]
 800c6f6:	79db      	ldrb	r3, [r3, #7]
 800c6f8:	021b      	lsls	r3, r3, #8
 800c6fa:	4313      	orrs	r3, r2
 800c6fc:	b29a      	uxth	r2, r3
 800c6fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c700:	7919      	ldrb	r1, [r3, #4]
 800c702:	795b      	ldrb	r3, [r3, #5]
 800c704:	021b      	lsls	r3, r3, #8
 800c706:	430b      	orrs	r3, r1
 800c708:	b29b      	uxth	r3, r3
 800c70a:	429a      	cmp	r2, r3
 800c70c:	d005      	beq.n	800c71a <ip_reass_chain_frag_into_datagram_and_validate+0x302>
        valid = 0;
 800c70e:	2300      	movs	r3, #0
 800c710:	61bb      	str	r3, [r7, #24]
 800c712:	e002      	b.n	800c71a <ip_reass_chain_frag_into_datagram_and_validate+0x302>
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	683a      	ldr	r2, [r7, #0]
 800c718:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0) {
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	7f9b      	ldrb	r3, [r3, #30]
 800c71e:	001a      	movs	r2, r3
 800c720:	2301      	movs	r3, #1
 800c722:	4013      	ands	r3, r2
 800c724:	d045      	beq.n	800c7b2 <ip_reass_chain_frag_into_datagram_and_validate+0x39a>
    /* and had no wholes so far */
    if (valid) {
 800c726:	69bb      	ldr	r3, [r7, #24]
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d040      	beq.n	800c7ae <ip_reass_chain_frag_into_datagram_and_validate+0x396>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if (((struct ip_reass_helper*)ipr->p->payload)->start != 0) {
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	685b      	ldr	r3, [r3, #4]
 800c730:	685b      	ldr	r3, [r3, #4]
 800c732:	791a      	ldrb	r2, [r3, #4]
 800c734:	795b      	ldrb	r3, [r3, #5]
 800c736:	021b      	lsls	r3, r3, #8
 800c738:	4313      	orrs	r3, r2
 800c73a:	b29b      	uxth	r3, r3
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d002      	beq.n	800c746 <ip_reass_chain_frag_into_datagram_and_validate+0x32e>
        valid = 0;
 800c740:	2300      	movs	r3, #0
 800c742:	61bb      	str	r3, [r7, #24]
 800c744:	e033      	b.n	800c7ae <ip_reass_chain_frag_into_datagram_and_validate+0x396>
      } else {
        /* and check that there are no wholes after this datagram */
        iprh_prev = iprh;
 800c746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c748:	623b      	str	r3, [r7, #32]
        q = iprh->next_pbuf;
 800c74a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c74c:	781a      	ldrb	r2, [r3, #0]
 800c74e:	7859      	ldrb	r1, [r3, #1]
 800c750:	0209      	lsls	r1, r1, #8
 800c752:	430a      	orrs	r2, r1
 800c754:	7899      	ldrb	r1, [r3, #2]
 800c756:	0409      	lsls	r1, r1, #16
 800c758:	430a      	orrs	r2, r1
 800c75a:	78db      	ldrb	r3, [r3, #3]
 800c75c:	061b      	lsls	r3, r3, #24
 800c75e:	4313      	orrs	r3, r2
 800c760:	61fb      	str	r3, [r7, #28]
        while (q != NULL) {
 800c762:	e021      	b.n	800c7a8 <ip_reass_chain_frag_into_datagram_and_validate+0x390>
          iprh = (struct ip_reass_helper*)q->payload;
 800c764:	69fb      	ldr	r3, [r7, #28]
 800c766:	685b      	ldr	r3, [r3, #4]
 800c768:	627b      	str	r3, [r7, #36]	; 0x24
          if (iprh_prev->end != iprh->start) {
 800c76a:	6a3b      	ldr	r3, [r7, #32]
 800c76c:	799a      	ldrb	r2, [r3, #6]
 800c76e:	79db      	ldrb	r3, [r3, #7]
 800c770:	021b      	lsls	r3, r3, #8
 800c772:	4313      	orrs	r3, r2
 800c774:	b29a      	uxth	r2, r3
 800c776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c778:	7919      	ldrb	r1, [r3, #4]
 800c77a:	795b      	ldrb	r3, [r3, #5]
 800c77c:	021b      	lsls	r3, r3, #8
 800c77e:	430b      	orrs	r3, r1
 800c780:	b29b      	uxth	r3, r3
 800c782:	429a      	cmp	r2, r3
 800c784:	d002      	beq.n	800c78c <ip_reass_chain_frag_into_datagram_and_validate+0x374>
            valid = 0;
 800c786:	2300      	movs	r3, #0
 800c788:	61bb      	str	r3, [r7, #24]
            break;
 800c78a:	e010      	b.n	800c7ae <ip_reass_chain_frag_into_datagram_and_validate+0x396>
          }
          iprh_prev = iprh;
 800c78c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c78e:	623b      	str	r3, [r7, #32]
          q = iprh->next_pbuf;
 800c790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c792:	781a      	ldrb	r2, [r3, #0]
 800c794:	7859      	ldrb	r1, [r3, #1]
 800c796:	0209      	lsls	r1, r1, #8
 800c798:	430a      	orrs	r2, r1
 800c79a:	7899      	ldrb	r1, [r3, #2]
 800c79c:	0409      	lsls	r1, r1, #16
 800c79e:	430a      	orrs	r2, r1
 800c7a0:	78db      	ldrb	r3, [r3, #3]
 800c7a2:	061b      	lsls	r3, r3, #24
 800c7a4:	4313      	orrs	r3, r2
 800c7a6:	61fb      	str	r3, [r7, #28]
        while (q != NULL) {
 800c7a8:	69fb      	ldr	r3, [r7, #28]
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d1da      	bne.n	800c764 <ip_reass_chain_frag_into_datagram_and_validate+0x34c>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid;
 800c7ae:	69bb      	ldr	r3, [r7, #24]
 800c7b0:	e018      	b.n	800c7e4 <ip_reass_chain_frag_into_datagram_and_validate+0x3cc>
  }
  /* If we come here, not all fragments were received, yet! */
  return 0; /* not yet valid! */
 800c7b2:	2300      	movs	r3, #0
 800c7b4:	e016      	b.n	800c7e4 <ip_reass_chain_frag_into_datagram_and_validate+0x3cc>
#if IP_REASS_CHECK_OVERLAP
freepbuf:
 800c7b6:	46c0      	nop			; (mov r8, r8)
 800c7b8:	e002      	b.n	800c7c0 <ip_reass_chain_frag_into_datagram_and_validate+0x3a8>
      goto freepbuf;
 800c7ba:	46c0      	nop			; (mov r8, r8)
 800c7bc:	e000      	b.n	800c7c0 <ip_reass_chain_frag_into_datagram_and_validate+0x3a8>
      goto freepbuf;
 800c7be:	46c0      	nop			; (mov r8, r8)
  ip_reass_pbufcount -= pbuf_clen(new_p);
 800c7c0:	683b      	ldr	r3, [r7, #0]
 800c7c2:	0018      	movs	r0, r3
 800c7c4:	f7f8 ffe0 	bl	8005788 <pbuf_clen>
 800c7c8:	0003      	movs	r3, r0
 800c7ca:	0019      	movs	r1, r3
 800c7cc:	4b07      	ldr	r3, [pc, #28]	; (800c7ec <ip_reass_chain_frag_into_datagram_and_validate+0x3d4>)
 800c7ce:	881a      	ldrh	r2, [r3, #0]
 800c7d0:	b28b      	uxth	r3, r1
 800c7d2:	1ad3      	subs	r3, r2, r3
 800c7d4:	b29a      	uxth	r2, r3
 800c7d6:	4b05      	ldr	r3, [pc, #20]	; (800c7ec <ip_reass_chain_frag_into_datagram_and_validate+0x3d4>)
 800c7d8:	801a      	strh	r2, [r3, #0]
  pbuf_free(new_p);
 800c7da:	683b      	ldr	r3, [r7, #0]
 800c7dc:	0018      	movs	r0, r3
 800c7de:	f7f8 ff61 	bl	80056a4 <pbuf_free>
  return 0;
 800c7e2:	2300      	movs	r3, #0
#endif /* IP_REASS_CHECK_OVERLAP */
}
 800c7e4:	0018      	movs	r0, r3
 800c7e6:	46bd      	mov	sp, r7
 800c7e8:	b00b      	add	sp, #44	; 0x2c
 800c7ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c7ec:	200022bc 	.word	0x200022bc

0800c7f0 <ip_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip_reass(struct pbuf *p)
{
 800c7f0:	b5b0      	push	{r4, r5, r7, lr}
 800c7f2:	b08a      	sub	sp, #40	; 0x28
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	6078      	str	r0, [r7, #4]
  struct ip_hdr *fraghdr;
  struct ip_reassdata *ipr;
  struct ip_reass_helper *iprh;
  u16_t offset, len;
  u8_t clen;
  struct ip_reassdata *ipr_prev = NULL;
 800c7f8:	2300      	movs	r3, #0
 800c7fa:	61fb      	str	r3, [r7, #28]

  IPFRAG_STATS_INC(ip_frag.recv);
 800c7fc:	4bd3      	ldr	r3, [pc, #844]	; (800cb4c <ip_reass+0x35c>)
 800c7fe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c800:	3301      	adds	r3, #1
 800c802:	b29a      	uxth	r2, r3
 800c804:	4bd1      	ldr	r3, [pc, #836]	; (800cb4c <ip_reass+0x35c>)
 800c806:	865a      	strh	r2, [r3, #50]	; 0x32
  snmp_inc_ipreasmreqds();

  fraghdr = (struct ip_hdr*)p->payload;
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	685b      	ldr	r3, [r3, #4]
 800c80c:	61bb      	str	r3, [r7, #24]

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 800c80e:	69bb      	ldr	r3, [r7, #24]
 800c810:	781b      	ldrb	r3, [r3, #0]
 800c812:	001a      	movs	r2, r3
 800c814:	230f      	movs	r3, #15
 800c816:	4013      	ands	r3, r2
 800c818:	009b      	lsls	r3, r3, #2
 800c81a:	2b14      	cmp	r3, #20
 800c81c:	d008      	beq.n	800c830 <ip_reass+0x40>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
 800c81e:	4bcb      	ldr	r3, [pc, #812]	; (800cb4c <ip_reass+0x35c>)
 800c820:	2244      	movs	r2, #68	; 0x44
 800c822:	5a9b      	ldrh	r3, [r3, r2]
 800c824:	3301      	adds	r3, #1
 800c826:	b299      	uxth	r1, r3
 800c828:	4bc8      	ldr	r3, [pc, #800]	; (800cb4c <ip_reass+0x35c>)
 800c82a:	2244      	movs	r2, #68	; 0x44
 800c82c:	5299      	strh	r1, [r3, r2]
    goto nullreturn;
 800c82e:	e193      	b.n	800cb58 <ip_reass+0x368>
  }

  offset = (ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800c830:	69bb      	ldr	r3, [r7, #24]
 800c832:	799a      	ldrb	r2, [r3, #6]
 800c834:	79db      	ldrb	r3, [r3, #7]
 800c836:	021b      	lsls	r3, r3, #8
 800c838:	4313      	orrs	r3, r2
 800c83a:	b29b      	uxth	r3, r3
 800c83c:	0018      	movs	r0, r3
 800c83e:	f7f7 feff 	bl	8004640 <lwip_ntohs>
 800c842:	0003      	movs	r3, r0
 800c844:	04db      	lsls	r3, r3, #19
 800c846:	0cdb      	lsrs	r3, r3, #19
 800c848:	b29a      	uxth	r2, r3
 800c84a:	2316      	movs	r3, #22
 800c84c:	18fb      	adds	r3, r7, r3
 800c84e:	00d2      	lsls	r2, r2, #3
 800c850:	801a      	strh	r2, [r3, #0]
  len = ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800c852:	69bb      	ldr	r3, [r7, #24]
 800c854:	789a      	ldrb	r2, [r3, #2]
 800c856:	78db      	ldrb	r3, [r3, #3]
 800c858:	021b      	lsls	r3, r3, #8
 800c85a:	4313      	orrs	r3, r2
 800c85c:	b29b      	uxth	r3, r3
 800c85e:	0018      	movs	r0, r3
 800c860:	f7f7 feee 	bl	8004640 <lwip_ntohs>
 800c864:	0003      	movs	r3, r0
 800c866:	0019      	movs	r1, r3
 800c868:	69bb      	ldr	r3, [r7, #24]
 800c86a:	781b      	ldrb	r3, [r3, #0]
 800c86c:	b29b      	uxth	r3, r3
 800c86e:	220f      	movs	r2, #15
 800c870:	4013      	ands	r3, r2
 800c872:	b29b      	uxth	r3, r3
 800c874:	009b      	lsls	r3, r3, #2
 800c876:	b29a      	uxth	r2, r3
 800c878:	2314      	movs	r3, #20
 800c87a:	18fb      	adds	r3, r7, r3
 800c87c:	1a8a      	subs	r2, r1, r2
 800c87e:	801a      	strh	r2, [r3, #0]

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800c880:	2513      	movs	r5, #19
 800c882:	197c      	adds	r4, r7, r5
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	0018      	movs	r0, r3
 800c888:	f7f8 ff7e 	bl	8005788 <pbuf_clen>
 800c88c:	0003      	movs	r3, r0
 800c88e:	7023      	strb	r3, [r4, #0]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800c890:	4baf      	ldr	r3, [pc, #700]	; (800cb50 <ip_reass+0x360>)
 800c892:	881b      	ldrh	r3, [r3, #0]
 800c894:	001a      	movs	r2, r3
 800c896:	197b      	adds	r3, r7, r5
 800c898:	781b      	ldrb	r3, [r3, #0]
 800c89a:	18d3      	adds	r3, r2, r3
 800c89c:	2b0a      	cmp	r3, #10
 800c89e:	dd19      	ble.n	800c8d4 <ip_reass+0xe4>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800c8a0:	2313      	movs	r3, #19
 800c8a2:	18fb      	adds	r3, r7, r3
 800c8a4:	781a      	ldrb	r2, [r3, #0]
 800c8a6:	69bb      	ldr	r3, [r7, #24]
 800c8a8:	0011      	movs	r1, r2
 800c8aa:	0018      	movs	r0, r3
 800c8ac:	f7ff fcda 	bl	800c264 <ip_reass_remove_oldest_datagram>
 800c8b0:	1e03      	subs	r3, r0, #0
 800c8b2:	d008      	beq.n	800c8c6 <ip_reass+0xd6>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800c8b4:	4ba6      	ldr	r3, [pc, #664]	; (800cb50 <ip_reass+0x360>)
 800c8b6:	881b      	ldrh	r3, [r3, #0]
 800c8b8:	001a      	movs	r2, r3
 800c8ba:	2313      	movs	r3, #19
 800c8bc:	18fb      	adds	r3, r7, r3
 800c8be:	781b      	ldrb	r3, [r3, #0]
 800c8c0:	18d3      	adds	r3, r2, r3
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800c8c2:	2b0a      	cmp	r3, #10
 800c8c4:	dd06      	ble.n	800c8d4 <ip_reass+0xe4>
#endif /* IP_REASS_FREE_OLDEST */
    {
      /* No datagram could be freed and still too many pbufs enqueued */
      LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass: Overflow condition: pbufct=%d, clen=%d, MAX=%d\n",
        ip_reass_pbufcount, clen, IP_REASS_MAX_PBUFS));
      IPFRAG_STATS_INC(ip_frag.memerr);
 800c8c6:	4ba1      	ldr	r3, [pc, #644]	; (800cb4c <ip_reass+0x35c>)
 800c8c8:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800c8ca:	3301      	adds	r3, #1
 800c8cc:	b29a      	uxth	r2, r3
 800c8ce:	4b9f      	ldr	r3, [pc, #636]	; (800cb4c <ip_reass+0x35c>)
 800c8d0:	879a      	strh	r2, [r3, #60]	; 0x3c
      /* @todo: send ICMP time exceeded here? */
      /* drop this pbuf */
      goto nullreturn;
 800c8d2:	e141      	b.n	800cb58 <ip_reass+0x368>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800c8d4:	4b9f      	ldr	r3, [pc, #636]	; (800cb54 <ip_reass+0x364>)
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	623b      	str	r3, [r7, #32]
 800c8da:	e035      	b.n	800c948 <ip_reass+0x158>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800c8dc:	6a3b      	ldr	r3, [r7, #32]
 800c8de:	695a      	ldr	r2, [r3, #20]
 800c8e0:	69bb      	ldr	r3, [r7, #24]
 800c8e2:	7b19      	ldrb	r1, [r3, #12]
 800c8e4:	7b58      	ldrb	r0, [r3, #13]
 800c8e6:	0200      	lsls	r0, r0, #8
 800c8e8:	4301      	orrs	r1, r0
 800c8ea:	7b98      	ldrb	r0, [r3, #14]
 800c8ec:	0400      	lsls	r0, r0, #16
 800c8ee:	4301      	orrs	r1, r0
 800c8f0:	7bdb      	ldrb	r3, [r3, #15]
 800c8f2:	061b      	lsls	r3, r3, #24
 800c8f4:	430b      	orrs	r3, r1
 800c8f6:	429a      	cmp	r2, r3
 800c8f8:	d121      	bne.n	800c93e <ip_reass+0x14e>
 800c8fa:	6a3b      	ldr	r3, [r7, #32]
 800c8fc:	699a      	ldr	r2, [r3, #24]
 800c8fe:	69bb      	ldr	r3, [r7, #24]
 800c900:	7c19      	ldrb	r1, [r3, #16]
 800c902:	7c58      	ldrb	r0, [r3, #17]
 800c904:	0200      	lsls	r0, r0, #8
 800c906:	4301      	orrs	r1, r0
 800c908:	7c98      	ldrb	r0, [r3, #18]
 800c90a:	0400      	lsls	r0, r0, #16
 800c90c:	4301      	orrs	r1, r0
 800c90e:	7cdb      	ldrb	r3, [r3, #19]
 800c910:	061b      	lsls	r3, r3, #24
 800c912:	430b      	orrs	r3, r1
 800c914:	429a      	cmp	r2, r3
 800c916:	d112      	bne.n	800c93e <ip_reass+0x14e>
 800c918:	6a3b      	ldr	r3, [r7, #32]
 800c91a:	899a      	ldrh	r2, [r3, #12]
 800c91c:	69bb      	ldr	r3, [r7, #24]
 800c91e:	7919      	ldrb	r1, [r3, #4]
 800c920:	795b      	ldrb	r3, [r3, #5]
 800c922:	021b      	lsls	r3, r3, #8
 800c924:	430b      	orrs	r3, r1
 800c926:	b29b      	uxth	r3, r3
 800c928:	429a      	cmp	r2, r3
 800c92a:	d108      	bne.n	800c93e <ip_reass+0x14e>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass: matching previous fragment ID=%"X16_F"\n",
        ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
 800c92c:	4b87      	ldr	r3, [pc, #540]	; (800cb4c <ip_reass+0x35c>)
 800c92e:	2246      	movs	r2, #70	; 0x46
 800c930:	5a9b      	ldrh	r3, [r3, r2]
 800c932:	3301      	adds	r3, #1
 800c934:	b299      	uxth	r1, r3
 800c936:	4b85      	ldr	r3, [pc, #532]	; (800cb4c <ip_reass+0x35c>)
 800c938:	2246      	movs	r2, #70	; 0x46
 800c93a:	5299      	strh	r1, [r3, r2]
      break;
 800c93c:	e007      	b.n	800c94e <ip_reass+0x15e>
    }
    ipr_prev = ipr;
 800c93e:	6a3b      	ldr	r3, [r7, #32]
 800c940:	61fb      	str	r3, [r7, #28]
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800c942:	6a3b      	ldr	r3, [r7, #32]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	623b      	str	r3, [r7, #32]
 800c948:	6a3b      	ldr	r3, [r7, #32]
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d1c6      	bne.n	800c8dc <ip_reass+0xec>
  }

  if (ipr == NULL) {
 800c94e:	6a3b      	ldr	r3, [r7, #32]
 800c950:	2b00      	cmp	r3, #0
 800c952:	d10d      	bne.n	800c970 <ip_reass+0x180>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800c954:	2313      	movs	r3, #19
 800c956:	18fb      	adds	r3, r7, r3
 800c958:	781a      	ldrb	r2, [r3, #0]
 800c95a:	69bb      	ldr	r3, [r7, #24]
 800c95c:	0011      	movs	r1, r2
 800c95e:	0018      	movs	r0, r3
 800c960:	f7ff fcf4 	bl	800c34c <ip_reass_enqueue_new_datagram>
 800c964:	0003      	movs	r3, r0
 800c966:	623b      	str	r3, [r7, #32]
    /* Bail if unable to enqueue */
    if(ipr == NULL) {
 800c968:	6a3b      	ldr	r3, [r7, #32]
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d11d      	bne.n	800c9aa <ip_reass+0x1ba>
      goto nullreturn;
 800c96e:	e0f3      	b.n	800cb58 <ip_reass+0x368>
    }
  } else {
    if (((ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) && 
 800c970:	69bb      	ldr	r3, [r7, #24]
 800c972:	799a      	ldrb	r2, [r3, #6]
 800c974:	79db      	ldrb	r3, [r3, #7]
 800c976:	021b      	lsls	r3, r3, #8
 800c978:	4313      	orrs	r3, r2
 800c97a:	b29b      	uxth	r3, r3
 800c97c:	0018      	movs	r0, r3
 800c97e:	f7f7 fe5f 	bl	8004640 <lwip_ntohs>
 800c982:	0003      	movs	r3, r0
 800c984:	04db      	lsls	r3, r3, #19
 800c986:	0cdb      	lsrs	r3, r3, #19
 800c988:	d10f      	bne.n	800c9aa <ip_reass+0x1ba>
      ((ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800c98a:	6a3b      	ldr	r3, [r7, #32]
 800c98c:	89db      	ldrh	r3, [r3, #14]
 800c98e:	0018      	movs	r0, r3
 800c990:	f7f7 fe56 	bl	8004640 <lwip_ntohs>
 800c994:	0003      	movs	r3, r0
 800c996:	04db      	lsls	r3, r3, #19
 800c998:	0cdb      	lsrs	r3, r3, #19
    if (((ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) && 
 800c99a:	d006      	beq.n	800c9aa <ip_reass+0x1ba>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800c99c:	6a3b      	ldr	r3, [r7, #32]
 800c99e:	3308      	adds	r3, #8
 800c9a0:	69b9      	ldr	r1, [r7, #24]
 800c9a2:	2214      	movs	r2, #20
 800c9a4:	0018      	movs	r0, r3
 800c9a6:	f003 f97c 	bl	800fca2 <memcpy>
    }
  }
  /* Track the current number of pbufs current 'in-flight', in order to limit 
  the number of fragments that may be enqueued at any one time */
  ip_reass_pbufcount += clen;
 800c9aa:	2313      	movs	r3, #19
 800c9ac:	18fb      	adds	r3, r7, r3
 800c9ae:	781b      	ldrb	r3, [r3, #0]
 800c9b0:	b29a      	uxth	r2, r3
 800c9b2:	4b67      	ldr	r3, [pc, #412]	; (800cb50 <ip_reass+0x360>)
 800c9b4:	881b      	ldrh	r3, [r3, #0]
 800c9b6:	18d3      	adds	r3, r2, r3
 800c9b8:	b29a      	uxth	r2, r3
 800c9ba:	4b65      	ldr	r3, [pc, #404]	; (800cb50 <ip_reass+0x360>)
 800c9bc:	801a      	strh	r2, [r3, #0]

  /* At this point, we have either created a new entry or pointing 
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  if ((IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0) {
 800c9be:	69bb      	ldr	r3, [r7, #24]
 800c9c0:	799a      	ldrb	r2, [r3, #6]
 800c9c2:	79db      	ldrb	r3, [r3, #7]
 800c9c4:	021b      	lsls	r3, r3, #8
 800c9c6:	4313      	orrs	r3, r2
 800c9c8:	b29b      	uxth	r3, r3
 800c9ca:	001a      	movs	r2, r3
 800c9cc:	2320      	movs	r3, #32
 800c9ce:	4013      	ands	r3, r2
 800c9d0:	d110      	bne.n	800c9f4 <ip_reass+0x204>
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800c9d2:	6a3b      	ldr	r3, [r7, #32]
 800c9d4:	7f9b      	ldrb	r3, [r3, #30]
 800c9d6:	2201      	movs	r2, #1
 800c9d8:	4313      	orrs	r3, r2
 800c9da:	b2da      	uxtb	r2, r3
 800c9dc:	6a3b      	ldr	r3, [r7, #32]
 800c9de:	779a      	strb	r2, [r3, #30]
    ipr->datagram_len = offset + len;
 800c9e0:	2316      	movs	r3, #22
 800c9e2:	18fa      	adds	r2, r7, r3
 800c9e4:	2314      	movs	r3, #20
 800c9e6:	18fb      	adds	r3, r7, r3
 800c9e8:	8812      	ldrh	r2, [r2, #0]
 800c9ea:	881b      	ldrh	r3, [r3, #0]
 800c9ec:	18d3      	adds	r3, r2, r3
 800c9ee:	b29a      	uxth	r2, r3
 800c9f0:	6a3b      	ldr	r3, [r7, #32]
 800c9f2:	839a      	strh	r2, [r3, #28]
     ("ip_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  if (ip_reass_chain_frag_into_datagram_and_validate(ipr, p)) {
 800c9f4:	687a      	ldr	r2, [r7, #4]
 800c9f6:	6a3b      	ldr	r3, [r7, #32]
 800c9f8:	0011      	movs	r1, r2
 800c9fa:	0018      	movs	r0, r3
 800c9fc:	f7ff fd0c 	bl	800c418 <ip_reass_chain_frag_into_datagram_and_validate>
 800ca00:	1e03      	subs	r3, r0, #0
 800ca02:	d100      	bne.n	800ca06 <ip_reass+0x216>
 800ca04:	e09f      	b.n	800cb46 <ip_reass+0x356>
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
 800ca06:	6a3b      	ldr	r3, [r7, #32]
 800ca08:	8b9b      	ldrh	r3, [r3, #28]
 800ca0a:	3314      	adds	r3, #20
 800ca0c:	b29a      	uxth	r2, r3
 800ca0e:	6a3b      	ldr	r3, [r7, #32]
 800ca10:	839a      	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 800ca12:	6a3b      	ldr	r3, [r7, #32]
 800ca14:	685b      	ldr	r3, [r3, #4]
 800ca16:	685b      	ldr	r3, [r3, #4]
 800ca18:	781a      	ldrb	r2, [r3, #0]
 800ca1a:	7859      	ldrb	r1, [r3, #1]
 800ca1c:	0209      	lsls	r1, r1, #8
 800ca1e:	430a      	orrs	r2, r1
 800ca20:	7899      	ldrb	r1, [r3, #2]
 800ca22:	0409      	lsls	r1, r1, #16
 800ca24:	430a      	orrs	r2, r1
 800ca26:	78db      	ldrb	r3, [r3, #3]
 800ca28:	061b      	lsls	r3, r3, #24
 800ca2a:	4313      	orrs	r3, r2
 800ca2c:	627b      	str	r3, [r7, #36]	; 0x24

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
 800ca2e:	6a3b      	ldr	r3, [r7, #32]
 800ca30:	685b      	ldr	r3, [r3, #4]
 800ca32:	685b      	ldr	r3, [r3, #4]
 800ca34:	61bb      	str	r3, [r7, #24]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800ca36:	6a3b      	ldr	r3, [r7, #32]
 800ca38:	3308      	adds	r3, #8
 800ca3a:	0019      	movs	r1, r3
 800ca3c:	69bb      	ldr	r3, [r7, #24]
 800ca3e:	2214      	movs	r2, #20
 800ca40:	0018      	movs	r0, r3
 800ca42:	f003 f92e 	bl	800fca2 <memcpy>
    IPH_LEN_SET(fraghdr, htons(ipr->datagram_len));
 800ca46:	6a3b      	ldr	r3, [r7, #32]
 800ca48:	8b9b      	ldrh	r3, [r3, #28]
 800ca4a:	0018      	movs	r0, r3
 800ca4c:	f7f7 fde2 	bl	8004614 <lwip_htons>
 800ca50:	0003      	movs	r3, r0
 800ca52:	001a      	movs	r2, r3
 800ca54:	69bb      	ldr	r3, [r7, #24]
 800ca56:	21ff      	movs	r1, #255	; 0xff
 800ca58:	4011      	ands	r1, r2
 800ca5a:	000c      	movs	r4, r1
 800ca5c:	7899      	ldrb	r1, [r3, #2]
 800ca5e:	2000      	movs	r0, #0
 800ca60:	4001      	ands	r1, r0
 800ca62:	1c08      	adds	r0, r1, #0
 800ca64:	1c21      	adds	r1, r4, #0
 800ca66:	4301      	orrs	r1, r0
 800ca68:	7099      	strb	r1, [r3, #2]
 800ca6a:	0a12      	lsrs	r2, r2, #8
 800ca6c:	b290      	uxth	r0, r2
 800ca6e:	78da      	ldrb	r2, [r3, #3]
 800ca70:	2100      	movs	r1, #0
 800ca72:	400a      	ands	r2, r1
 800ca74:	1c11      	adds	r1, r2, #0
 800ca76:	1c02      	adds	r2, r0, #0
 800ca78:	430a      	orrs	r2, r1
 800ca7a:	70da      	strb	r2, [r3, #3]
    IPH_OFFSET_SET(fraghdr, 0);
 800ca7c:	69bb      	ldr	r3, [r7, #24]
 800ca7e:	799a      	ldrb	r2, [r3, #6]
 800ca80:	2100      	movs	r1, #0
 800ca82:	400a      	ands	r2, r1
 800ca84:	719a      	strb	r2, [r3, #6]
 800ca86:	79da      	ldrb	r2, [r3, #7]
 800ca88:	2100      	movs	r1, #0
 800ca8a:	400a      	ands	r2, r1
 800ca8c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800ca8e:	69bb      	ldr	r3, [r7, #24]
 800ca90:	7a9a      	ldrb	r2, [r3, #10]
 800ca92:	2100      	movs	r1, #0
 800ca94:	400a      	ands	r2, r1
 800ca96:	729a      	strb	r2, [r3, #10]
 800ca98:	7ada      	ldrb	r2, [r3, #11]
 800ca9a:	2100      	movs	r1, #0
 800ca9c:	400a      	ands	r2, r1
 800ca9e:	72da      	strb	r2, [r3, #11]
    /* @todo: do we need to set calculate the correct checksum? */
    IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
 800caa0:	69bb      	ldr	r3, [r7, #24]
 800caa2:	2114      	movs	r1, #20
 800caa4:	0018      	movs	r0, r3
 800caa6:	f7fe fe63 	bl	800b770 <inet_chksum>
 800caaa:	0003      	movs	r3, r0
 800caac:	001a      	movs	r2, r3
 800caae:	69bb      	ldr	r3, [r7, #24]
 800cab0:	21ff      	movs	r1, #255	; 0xff
 800cab2:	4011      	ands	r1, r2
 800cab4:	000c      	movs	r4, r1
 800cab6:	7a99      	ldrb	r1, [r3, #10]
 800cab8:	2000      	movs	r0, #0
 800caba:	4001      	ands	r1, r0
 800cabc:	1c08      	adds	r0, r1, #0
 800cabe:	1c21      	adds	r1, r4, #0
 800cac0:	4301      	orrs	r1, r0
 800cac2:	7299      	strb	r1, [r3, #10]
 800cac4:	0a12      	lsrs	r2, r2, #8
 800cac6:	b290      	uxth	r0, r2
 800cac8:	7ada      	ldrb	r2, [r3, #11]
 800caca:	2100      	movs	r1, #0
 800cacc:	400a      	ands	r2, r1
 800cace:	1c11      	adds	r1, r2, #0
 800cad0:	1c02      	adds	r2, r0, #0
 800cad2:	430a      	orrs	r2, r1
 800cad4:	72da      	strb	r2, [r3, #11]

    p = ipr->p;
 800cad6:	6a3b      	ldr	r3, [r7, #32]
 800cad8:	685b      	ldr	r3, [r3, #4]
 800cada:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while(r != NULL) {
 800cadc:	e01b      	b.n	800cb16 <ip_reass+0x326>
      iprh = (struct ip_reass_helper*)r->payload;
 800cade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cae0:	685b      	ldr	r3, [r3, #4]
 800cae2:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeding fragment */
      pbuf_header(r, -IP_HLEN);
 800cae4:	2314      	movs	r3, #20
 800cae6:	425a      	negs	r2, r3
 800cae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caea:	0011      	movs	r1, r2
 800caec:	0018      	movs	r0, r3
 800caee:	f7f8 fd52 	bl	8005596 <pbuf_header>
      pbuf_cat(p, r);
 800caf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	0011      	movs	r1, r2
 800caf8:	0018      	movs	r0, r3
 800cafa:	f7f8 fe72 	bl	80057e2 <pbuf_cat>
      r = iprh->next_pbuf;
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	781a      	ldrb	r2, [r3, #0]
 800cb02:	7859      	ldrb	r1, [r3, #1]
 800cb04:	0209      	lsls	r1, r1, #8
 800cb06:	430a      	orrs	r2, r1
 800cb08:	7899      	ldrb	r1, [r3, #2]
 800cb0a:	0409      	lsls	r1, r1, #16
 800cb0c:	430a      	orrs	r2, r1
 800cb0e:	78db      	ldrb	r3, [r3, #3]
 800cb10:	061b      	lsls	r3, r3, #24
 800cb12:	4313      	orrs	r3, r2
 800cb14:	627b      	str	r3, [r7, #36]	; 0x24
    while(r != NULL) {
 800cb16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d1e0      	bne.n	800cade <ip_reass+0x2ee>
    }
    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800cb1c:	69fa      	ldr	r2, [r7, #28]
 800cb1e:	6a3b      	ldr	r3, [r7, #32]
 800cb20:	0011      	movs	r1, r2
 800cb22:	0018      	movs	r0, r3
 800cb24:	f7ff fc5a 	bl	800c3dc <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	0018      	movs	r0, r3
 800cb2c:	f7f8 fe2c 	bl	8005788 <pbuf_clen>
 800cb30:	0003      	movs	r3, r0
 800cb32:	0019      	movs	r1, r3
 800cb34:	4b06      	ldr	r3, [pc, #24]	; (800cb50 <ip_reass+0x360>)
 800cb36:	881a      	ldrh	r2, [r3, #0]
 800cb38:	b28b      	uxth	r3, r1
 800cb3a:	1ad3      	subs	r3, r2, r3
 800cb3c:	b29a      	uxth	r2, r3
 800cb3e:	4b04      	ldr	r3, [pc, #16]	; (800cb50 <ip_reass+0x360>)
 800cb40:	801a      	strh	r2, [r3, #0]

    /* Return the pbuf chain */
    return p;
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	e013      	b.n	800cb6e <ip_reass+0x37e>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800cb46:	2300      	movs	r3, #0
 800cb48:	e011      	b.n	800cb6e <ip_reass+0x37e>
 800cb4a:	46c0      	nop			; (mov r8, r8)
 800cb4c:	20003158 	.word	0x20003158
 800cb50:	200022bc 	.word	0x200022bc
 800cb54:	200022b8 	.word	0x200022b8

nullreturn:
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
 800cb58:	4b07      	ldr	r3, [pc, #28]	; (800cb78 <ip_reass+0x388>)
 800cb5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800cb5c:	3301      	adds	r3, #1
 800cb5e:	b29a      	uxth	r2, r3
 800cb60:	4b05      	ldr	r3, [pc, #20]	; (800cb78 <ip_reass+0x388>)
 800cb62:	86da      	strh	r2, [r3, #54]	; 0x36
  pbuf_free(p);
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	0018      	movs	r0, r3
 800cb68:	f7f8 fd9c 	bl	80056a4 <pbuf_free>
  return NULL;
 800cb6c:	2300      	movs	r3, #0
}
 800cb6e:	0018      	movs	r0, r3
 800cb70:	46bd      	mov	sp, r7
 800cb72:	b00a      	add	sp, #40	; 0x28
 800cb74:	bdb0      	pop	{r4, r5, r7, pc}
 800cb76:	46c0      	nop			; (mov r8, r8)
 800cb78:	20003158 	.word	0x20003158

0800cb7c <ip_frag_alloc_pbuf_custom_ref>:

#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
 800cb7c:	b580      	push	{r7, lr}
 800cb7e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 800cb80:	2006      	movs	r0, #6
 800cb82:	f7f8 f947 	bl	8004e14 <memp_malloc>
 800cb86:	0003      	movs	r3, r0
}
 800cb88:	0018      	movs	r0, r3
 800cb8a:	46bd      	mov	sp, r7
 800cb8c:	bd80      	pop	{r7, pc}

0800cb8e <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 800cb8e:	b580      	push	{r7, lr}
 800cb90:	b082      	sub	sp, #8
 800cb92:	af00      	add	r7, sp, #0
 800cb94:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
  memp_free(MEMP_FRAG_PBUF, p);
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	0019      	movs	r1, r3
 800cb9a:	2006      	movs	r0, #6
 800cb9c:	f7f8 f9c0 	bl	8004f20 <memp_free>
}
 800cba0:	46c0      	nop			; (mov r8, r8)
 800cba2:	46bd      	mov	sp, r7
 800cba4:	b002      	add	sp, #8
 800cba6:	bd80      	pop	{r7, pc}

0800cba8 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800cba8:	b580      	push	{r7, lr}
 800cbaa:	b084      	sub	sp, #16
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
  if (pcr->original != NULL) {
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	695b      	ldr	r3, [r3, #20]
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d004      	beq.n	800cbc6 <ipfrag_free_pbuf_custom+0x1e>
    pbuf_free(pcr->original);
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	695b      	ldr	r3, [r3, #20]
 800cbc0:	0018      	movs	r0, r3
 800cbc2:	f7f8 fd6f 	bl	80056a4 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	0018      	movs	r0, r3
 800cbca:	f7ff ffe0 	bl	800cb8e <ip_frag_free_pbuf_custom_ref>
}
 800cbce:	46c0      	nop			; (mov r8, r8)
 800cbd0:	46bd      	mov	sp, r7
 800cbd2:	b004      	add	sp, #16
 800cbd4:	bd80      	pop	{r7, pc}
	...

0800cbd8 <ip_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t 
ip_frag(struct pbuf *p, struct netif *netif, ip_addr_t *dest)
{
 800cbd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cbda:	b093      	sub	sp, #76	; 0x4c
 800cbdc:	af02      	add	r7, sp, #8
 800cbde:	60f8      	str	r0, [r7, #12]
 800cbe0:	60b9      	str	r1, [r7, #8]
 800cbe2:	607a      	str	r2, [r7, #4]
  struct ip_hdr *original_iphdr;
#endif
  struct ip_hdr *iphdr;
  u16_t nfb;
  u16_t left, cop;
  u16_t mtu = netif->mtu;
 800cbe4:	2632      	movs	r6, #50	; 0x32
 800cbe6:	19bb      	adds	r3, r7, r6
 800cbe8:	68ba      	ldr	r2, [r7, #8]
 800cbea:	8c12      	ldrh	r2, [r2, #32]
 800cbec:	801a      	strh	r2, [r3, #0]
  u16_t ofo, omf;
  u16_t last;
  u16_t poff = IP_HLEN;
 800cbee:	233a      	movs	r3, #58	; 0x3a
 800cbf0:	18fb      	adds	r3, r7, r3
 800cbf2:	2214      	movs	r2, #20
 800cbf4:	801a      	strh	r2, [r3, #0]
  u16_t tmp;
#if !IP_FRAG_USES_STATIC_BUF && !LWIP_NETIF_TX_SINGLE_PBUF
  u16_t newpbuflen = 0;
 800cbf6:	2336      	movs	r3, #54	; 0x36
 800cbf8:	18fb      	adds	r3, r7, r3
 800cbfa:	2200      	movs	r2, #0
 800cbfc:	801a      	strh	r2, [r3, #0]

  /* Copy the IP header in it */
  iphdr = (struct ip_hdr *)rambuf->payload;
  SMEMCPY(iphdr, p->payload, IP_HLEN);
#else /* IP_FRAG_USES_STATIC_BUF */
  original_iphdr = (struct ip_hdr *)p->payload;
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	685b      	ldr	r3, [r3, #4]
 800cc02:	62fb      	str	r3, [r7, #44]	; 0x2c
  iphdr = original_iphdr;
 800cc04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc06:	62bb      	str	r3, [r7, #40]	; 0x28
#endif /* IP_FRAG_USES_STATIC_BUF */

  /* Save original offset */
  tmp = ntohs(IPH_OFFSET(iphdr));
 800cc08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc0a:	799a      	ldrb	r2, [r3, #6]
 800cc0c:	79db      	ldrb	r3, [r3, #7]
 800cc0e:	021b      	lsls	r3, r3, #8
 800cc10:	4313      	orrs	r3, r2
 800cc12:	b29b      	uxth	r3, r3
 800cc14:	2138      	movs	r1, #56	; 0x38
 800cc16:	000d      	movs	r5, r1
 800cc18:	187c      	adds	r4, r7, r1
 800cc1a:	0018      	movs	r0, r3
 800cc1c:	f7f7 fd10 	bl	8004640 <lwip_ntohs>
 800cc20:	0003      	movs	r3, r0
 800cc22:	8023      	strh	r3, [r4, #0]
  ofo = tmp & IP_OFFMASK;
 800cc24:	233c      	movs	r3, #60	; 0x3c
 800cc26:	18fb      	adds	r3, r7, r3
 800cc28:	0029      	movs	r1, r5
 800cc2a:	187a      	adds	r2, r7, r1
 800cc2c:	8812      	ldrh	r2, [r2, #0]
 800cc2e:	04d2      	lsls	r2, r2, #19
 800cc30:	0cd2      	lsrs	r2, r2, #19
 800cc32:	801a      	strh	r2, [r3, #0]
  omf = tmp & IP_MF;
 800cc34:	2326      	movs	r3, #38	; 0x26
 800cc36:	18fb      	adds	r3, r7, r3
 800cc38:	187a      	adds	r2, r7, r1
 800cc3a:	8811      	ldrh	r1, [r2, #0]
 800cc3c:	2280      	movs	r2, #128	; 0x80
 800cc3e:	0192      	lsls	r2, r2, #6
 800cc40:	400a      	ands	r2, r1
 800cc42:	801a      	strh	r2, [r3, #0]

  left = p->tot_len - IP_HLEN;
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	891a      	ldrh	r2, [r3, #8]
 800cc48:	233e      	movs	r3, #62	; 0x3e
 800cc4a:	18fb      	adds	r3, r7, r3
 800cc4c:	3a14      	subs	r2, #20
 800cc4e:	801a      	strh	r2, [r3, #0]

  nfb = (mtu - IP_HLEN) / 8;
 800cc50:	19bb      	adds	r3, r7, r6
 800cc52:	881b      	ldrh	r3, [r3, #0]
 800cc54:	3b14      	subs	r3, #20
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	da00      	bge.n	800cc5c <ip_frag+0x84>
 800cc5a:	3307      	adds	r3, #7
 800cc5c:	10db      	asrs	r3, r3, #3
 800cc5e:	001a      	movs	r2, r3
 800cc60:	2324      	movs	r3, #36	; 0x24
 800cc62:	18fb      	adds	r3, r7, r3
 800cc64:	801a      	strh	r2, [r3, #0]

  while (left) {
 800cc66:	e15a      	b.n	800cf1e <ip_frag+0x346>
    last = (left <= mtu - IP_HLEN);
 800cc68:	233e      	movs	r3, #62	; 0x3e
 800cc6a:	18fb      	adds	r3, r7, r3
 800cc6c:	881b      	ldrh	r3, [r3, #0]
 800cc6e:	2232      	movs	r2, #50	; 0x32
 800cc70:	18ba      	adds	r2, r7, r2
 800cc72:	8812      	ldrh	r2, [r2, #0]
 800cc74:	3a14      	subs	r2, #20
 800cc76:	0fd8      	lsrs	r0, r3, #31
 800cc78:	17d1      	asrs	r1, r2, #31
 800cc7a:	429a      	cmp	r2, r3
 800cc7c:	4148      	adcs	r0, r1
 800cc7e:	0003      	movs	r3, r0
 800cc80:	b2da      	uxtb	r2, r3
 800cc82:	2022      	movs	r0, #34	; 0x22
 800cc84:	183b      	adds	r3, r7, r0
 800cc86:	801a      	strh	r2, [r3, #0]

    /* Set new offset and MF flag */
    tmp = omf | (IP_OFFMASK & (ofo));
 800cc88:	233c      	movs	r3, #60	; 0x3c
 800cc8a:	18fb      	adds	r3, r7, r3
 800cc8c:	881b      	ldrh	r3, [r3, #0]
 800cc8e:	04db      	lsls	r3, r3, #19
 800cc90:	0cdb      	lsrs	r3, r3, #19
 800cc92:	b299      	uxth	r1, r3
 800cc94:	2338      	movs	r3, #56	; 0x38
 800cc96:	18fb      	adds	r3, r7, r3
 800cc98:	2226      	movs	r2, #38	; 0x26
 800cc9a:	18ba      	adds	r2, r7, r2
 800cc9c:	8812      	ldrh	r2, [r2, #0]
 800cc9e:	430a      	orrs	r2, r1
 800cca0:	801a      	strh	r2, [r3, #0]
    if (!last) {
 800cca2:	183b      	adds	r3, r7, r0
 800cca4:	881b      	ldrh	r3, [r3, #0]
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d107      	bne.n	800ccba <ip_frag+0xe2>
      tmp = tmp | IP_MF;
 800ccaa:	2238      	movs	r2, #56	; 0x38
 800ccac:	18bb      	adds	r3, r7, r2
 800ccae:	18ba      	adds	r2, r7, r2
 800ccb0:	8812      	ldrh	r2, [r2, #0]
 800ccb2:	2180      	movs	r1, #128	; 0x80
 800ccb4:	0189      	lsls	r1, r1, #6
 800ccb6:	430a      	orrs	r2, r1
 800ccb8:	801a      	strh	r2, [r3, #0]
    }

    /* Fill this fragment */
    cop = last ? left : nfb * 8;
 800ccba:	2322      	movs	r3, #34	; 0x22
 800ccbc:	18fb      	adds	r3, r7, r3
 800ccbe:	881b      	ldrh	r3, [r3, #0]
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d105      	bne.n	800ccd0 <ip_frag+0xf8>
 800ccc4:	2324      	movs	r3, #36	; 0x24
 800ccc6:	18fb      	adds	r3, r7, r3
 800ccc8:	881b      	ldrh	r3, [r3, #0]
 800ccca:	00db      	lsls	r3, r3, #3
 800cccc:	b29b      	uxth	r3, r3
 800ccce:	e002      	b.n	800ccd6 <ip_frag+0xfe>
 800ccd0:	233e      	movs	r3, #62	; 0x3e
 800ccd2:	18fb      	adds	r3, r7, r3
 800ccd4:	881b      	ldrh	r3, [r3, #0]
 800ccd6:	2220      	movs	r2, #32
 800ccd8:	18ba      	adds	r2, r7, r2
 800ccda:	8013      	strh	r3, [r2, #0]
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800ccdc:	2200      	movs	r2, #0
 800ccde:	2114      	movs	r1, #20
 800cce0:	2002      	movs	r0, #2
 800cce2:	f7f8 fa53 	bl	800518c <pbuf_alloc>
 800cce6:	0003      	movs	r3, r0
 800cce8:	61fb      	str	r3, [r7, #28]
    if (rambuf == NULL) {
 800ccea:	69fb      	ldr	r3, [r7, #28]
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d102      	bne.n	800ccf6 <ip_frag+0x11e>
      return ERR_MEM;
 800ccf0:	2301      	movs	r3, #1
 800ccf2:	425b      	negs	r3, r3
 800ccf4:	e11a      	b.n	800cf2c <ip_frag+0x354>
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800ccf6:	69fb      	ldr	r3, [r7, #28]
 800ccf8:	685b      	ldr	r3, [r3, #4]
 800ccfa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ccfc:	2214      	movs	r2, #20
 800ccfe:	0018      	movs	r0, r3
 800cd00:	f002 ffcf 	bl	800fca2 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800cd04:	69fb      	ldr	r3, [r7, #28]
 800cd06:	685b      	ldr	r3, [r3, #4]
 800cd08:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Can just adjust p directly for needed offset. */
    p->payload = (u8_t *)p->payload + poff;
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	685a      	ldr	r2, [r3, #4]
 800cd0e:	213a      	movs	r1, #58	; 0x3a
 800cd10:	187b      	adds	r3, r7, r1
 800cd12:	881b      	ldrh	r3, [r3, #0]
 800cd14:	18d2      	adds	r2, r2, r3
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	605a      	str	r2, [r3, #4]
    p->len -= poff;
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	895a      	ldrh	r2, [r3, #10]
 800cd1e:	187b      	adds	r3, r7, r1
 800cd20:	881b      	ldrh	r3, [r3, #0]
 800cd22:	1ad3      	subs	r3, r2, r3
 800cd24:	b29a      	uxth	r2, r3
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	815a      	strh	r2, [r3, #10]

    left_to_copy = cop;
 800cd2a:	2334      	movs	r3, #52	; 0x34
 800cd2c:	18fb      	adds	r3, r7, r3
 800cd2e:	2220      	movs	r2, #32
 800cd30:	18ba      	adds	r2, r7, r2
 800cd32:	8812      	ldrh	r2, [r2, #0]
 800cd34:	801a      	strh	r2, [r3, #0]
    while (left_to_copy) {
 800cd36:	e068      	b.n	800ce0a <ip_frag+0x232>
      struct pbuf_custom_ref *pcr;
      newpbuflen = (left_to_copy < p->len) ? left_to_copy : p->len;
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	8959      	ldrh	r1, [r3, #10]
 800cd3c:	2336      	movs	r3, #54	; 0x36
 800cd3e:	18fa      	adds	r2, r7, r3
 800cd40:	2334      	movs	r3, #52	; 0x34
 800cd42:	18fb      	adds	r3, r7, r3
 800cd44:	1c0c      	adds	r4, r1, #0
 800cd46:	881b      	ldrh	r3, [r3, #0]
 800cd48:	b298      	uxth	r0, r3
 800cd4a:	b2a1      	uxth	r1, r4
 800cd4c:	4288      	cmp	r0, r1
 800cd4e:	d900      	bls.n	800cd52 <ip_frag+0x17a>
 800cd50:	1c23      	adds	r3, r4, #0
 800cd52:	8013      	strh	r3, [r2, #0]
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800cd54:	2336      	movs	r3, #54	; 0x36
 800cd56:	18fb      	adds	r3, r7, r3
 800cd58:	881b      	ldrh	r3, [r3, #0]
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d108      	bne.n	800cd70 <ip_frag+0x198>
        p = p->next;
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	60fb      	str	r3, [r7, #12]
 800cd64:	2234      	movs	r2, #52	; 0x34
 800cd66:	18bb      	adds	r3, r7, r2
 800cd68:	18ba      	adds	r2, r7, r2
 800cd6a:	8812      	ldrh	r2, [r2, #0]
 800cd6c:	801a      	strh	r2, [r3, #0]
        continue;
 800cd6e:	e04c      	b.n	800ce0a <ip_frag+0x232>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800cd70:	f7ff ff04 	bl	800cb7c <ip_frag_alloc_pbuf_custom_ref>
 800cd74:	0003      	movs	r3, r0
 800cd76:	61bb      	str	r3, [r7, #24]
      if (pcr == NULL) {
 800cd78:	69bb      	ldr	r3, [r7, #24]
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d106      	bne.n	800cd8c <ip_frag+0x1b4>
        pbuf_free(rambuf);
 800cd7e:	69fb      	ldr	r3, [r7, #28]
 800cd80:	0018      	movs	r0, r3
 800cd82:	f7f8 fc8f 	bl	80056a4 <pbuf_free>
        return ERR_MEM;
 800cd86:	2301      	movs	r3, #1
 800cd88:	425b      	negs	r3, r3
 800cd8a:	e0cf      	b.n	800cf2c <ip_frag+0x354>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc, p->payload, newpbuflen);
 800cd8c:	69b8      	ldr	r0, [r7, #24]
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	685b      	ldr	r3, [r3, #4]
 800cd92:	2436      	movs	r4, #54	; 0x36
 800cd94:	193a      	adds	r2, r7, r4
 800cd96:	8811      	ldrh	r1, [r2, #0]
 800cd98:	193a      	adds	r2, r7, r4
 800cd9a:	8812      	ldrh	r2, [r2, #0]
 800cd9c:	9201      	str	r2, [sp, #4]
 800cd9e:	9300      	str	r3, [sp, #0]
 800cda0:	0003      	movs	r3, r0
 800cda2:	2202      	movs	r2, #2
 800cda4:	2003      	movs	r0, #3
 800cda6:	f7f8 fb13 	bl	80053d0 <pbuf_alloced_custom>
 800cdaa:	0003      	movs	r3, r0
 800cdac:	617b      	str	r3, [r7, #20]
      if (newpbuf == NULL) {
 800cdae:	697b      	ldr	r3, [r7, #20]
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d10a      	bne.n	800cdca <ip_frag+0x1f2>
        ip_frag_free_pbuf_custom_ref(pcr);
 800cdb4:	69bb      	ldr	r3, [r7, #24]
 800cdb6:	0018      	movs	r0, r3
 800cdb8:	f7ff fee9 	bl	800cb8e <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800cdbc:	69fb      	ldr	r3, [r7, #28]
 800cdbe:	0018      	movs	r0, r3
 800cdc0:	f7f8 fc70 	bl	80056a4 <pbuf_free>
        return ERR_MEM;
 800cdc4:	2301      	movs	r3, #1
 800cdc6:	425b      	negs	r3, r3
 800cdc8:	e0b0      	b.n	800cf2c <ip_frag+0x354>
      }
      pbuf_ref(p);
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	0018      	movs	r0, r3
 800cdce:	f7f8 fcf7 	bl	80057c0 <pbuf_ref>
      pcr->original = p;
 800cdd2:	69bb      	ldr	r3, [r7, #24]
 800cdd4:	68fa      	ldr	r2, [r7, #12]
 800cdd6:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800cdd8:	69bb      	ldr	r3, [r7, #24]
 800cdda:	4a56      	ldr	r2, [pc, #344]	; (800cf34 <ip_frag+0x35c>)
 800cddc:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800cdde:	697a      	ldr	r2, [r7, #20]
 800cde0:	69fb      	ldr	r3, [r7, #28]
 800cde2:	0011      	movs	r1, r2
 800cde4:	0018      	movs	r0, r3
 800cde6:	f7f8 fcfc 	bl	80057e2 <pbuf_cat>
      left_to_copy -= newpbuflen;
 800cdea:	2034      	movs	r0, #52	; 0x34
 800cdec:	183b      	adds	r3, r7, r0
 800cdee:	1839      	adds	r1, r7, r0
 800cdf0:	2236      	movs	r2, #54	; 0x36
 800cdf2:	18ba      	adds	r2, r7, r2
 800cdf4:	8809      	ldrh	r1, [r1, #0]
 800cdf6:	8812      	ldrh	r2, [r2, #0]
 800cdf8:	1a8a      	subs	r2, r1, r2
 800cdfa:	801a      	strh	r2, [r3, #0]
      if (left_to_copy) {
 800cdfc:	183b      	adds	r3, r7, r0
 800cdfe:	881b      	ldrh	r3, [r3, #0]
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d002      	beq.n	800ce0a <ip_frag+0x232>
        p = p->next;
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800ce0a:	2334      	movs	r3, #52	; 0x34
 800ce0c:	18fb      	adds	r3, r7, r3
 800ce0e:	881b      	ldrh	r3, [r3, #0]
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d191      	bne.n	800cd38 <ip_frag+0x160>
      }
    }
    poff = newpbuflen;
 800ce14:	233a      	movs	r3, #58	; 0x3a
 800ce16:	18fb      	adds	r3, r7, r3
 800ce18:	2236      	movs	r2, #54	; 0x36
 800ce1a:	18ba      	adds	r2, r7, r2
 800ce1c:	8812      	ldrh	r2, [r2, #0]
 800ce1e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
#endif /* IP_FRAG_USES_STATIC_BUF */

    /* Correct header */
    IPH_OFFSET_SET(iphdr, htons(tmp));
 800ce20:	2338      	movs	r3, #56	; 0x38
 800ce22:	18fb      	adds	r3, r7, r3
 800ce24:	881b      	ldrh	r3, [r3, #0]
 800ce26:	0018      	movs	r0, r3
 800ce28:	f7f7 fbf4 	bl	8004614 <lwip_htons>
 800ce2c:	0003      	movs	r3, r0
 800ce2e:	001a      	movs	r2, r3
 800ce30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce32:	21ff      	movs	r1, #255	; 0xff
 800ce34:	4011      	ands	r1, r2
 800ce36:	000c      	movs	r4, r1
 800ce38:	7999      	ldrb	r1, [r3, #6]
 800ce3a:	2000      	movs	r0, #0
 800ce3c:	4001      	ands	r1, r0
 800ce3e:	1c08      	adds	r0, r1, #0
 800ce40:	1c21      	adds	r1, r4, #0
 800ce42:	4301      	orrs	r1, r0
 800ce44:	7199      	strb	r1, [r3, #6]
 800ce46:	0a12      	lsrs	r2, r2, #8
 800ce48:	b290      	uxth	r0, r2
 800ce4a:	79da      	ldrb	r2, [r3, #7]
 800ce4c:	2100      	movs	r1, #0
 800ce4e:	400a      	ands	r2, r1
 800ce50:	1c11      	adds	r1, r2, #0
 800ce52:	1c02      	adds	r2, r0, #0
 800ce54:	430a      	orrs	r2, r1
 800ce56:	71da      	strb	r2, [r3, #7]
    IPH_LEN_SET(iphdr, htons(cop + IP_HLEN));
 800ce58:	2520      	movs	r5, #32
 800ce5a:	197b      	adds	r3, r7, r5
 800ce5c:	881b      	ldrh	r3, [r3, #0]
 800ce5e:	3314      	adds	r3, #20
 800ce60:	b29b      	uxth	r3, r3
 800ce62:	0018      	movs	r0, r3
 800ce64:	f7f7 fbd6 	bl	8004614 <lwip_htons>
 800ce68:	0003      	movs	r3, r0
 800ce6a:	001a      	movs	r2, r3
 800ce6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce6e:	21ff      	movs	r1, #255	; 0xff
 800ce70:	4011      	ands	r1, r2
 800ce72:	000c      	movs	r4, r1
 800ce74:	7899      	ldrb	r1, [r3, #2]
 800ce76:	2000      	movs	r0, #0
 800ce78:	4001      	ands	r1, r0
 800ce7a:	1c08      	adds	r0, r1, #0
 800ce7c:	1c21      	adds	r1, r4, #0
 800ce7e:	4301      	orrs	r1, r0
 800ce80:	7099      	strb	r1, [r3, #2]
 800ce82:	0a12      	lsrs	r2, r2, #8
 800ce84:	b290      	uxth	r0, r2
 800ce86:	78da      	ldrb	r2, [r3, #3]
 800ce88:	2100      	movs	r1, #0
 800ce8a:	400a      	ands	r2, r1
 800ce8c:	1c11      	adds	r1, r2, #0
 800ce8e:	1c02      	adds	r2, r0, #0
 800ce90:	430a      	orrs	r2, r1
 800ce92:	70da      	strb	r2, [r3, #3]
    IPH_CHKSUM_SET(iphdr, 0);
 800ce94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce96:	7a9a      	ldrb	r2, [r3, #10]
 800ce98:	2100      	movs	r1, #0
 800ce9a:	400a      	ands	r2, r1
 800ce9c:	729a      	strb	r2, [r3, #10]
 800ce9e:	7ada      	ldrb	r2, [r3, #11]
 800cea0:	2100      	movs	r1, #0
 800cea2:	400a      	ands	r2, r1
 800cea4:	72da      	strb	r2, [r3, #11]
    IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 800cea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cea8:	2114      	movs	r1, #20
 800ceaa:	0018      	movs	r0, r3
 800ceac:	f7fe fc60 	bl	800b770 <inet_chksum>
 800ceb0:	0003      	movs	r3, r0
 800ceb2:	001a      	movs	r2, r3
 800ceb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceb6:	21ff      	movs	r1, #255	; 0xff
 800ceb8:	4011      	ands	r1, r2
 800ceba:	000c      	movs	r4, r1
 800cebc:	7a99      	ldrb	r1, [r3, #10]
 800cebe:	2000      	movs	r0, #0
 800cec0:	4001      	ands	r1, r0
 800cec2:	1c08      	adds	r0, r1, #0
 800cec4:	1c21      	adds	r1, r4, #0
 800cec6:	4301      	orrs	r1, r0
 800cec8:	7299      	strb	r1, [r3, #10]
 800ceca:	0a12      	lsrs	r2, r2, #8
 800cecc:	b290      	uxth	r0, r2
 800cece:	7ada      	ldrb	r2, [r3, #11]
 800ced0:	2100      	movs	r1, #0
 800ced2:	400a      	ands	r2, r1
 800ced4:	1c11      	adds	r1, r2, #0
 800ced6:	1c02      	adds	r2, r0, #0
 800ced8:	430a      	orrs	r2, r1
 800ceda:	72da      	strb	r2, [r3, #11]
    }
#else /* IP_FRAG_USES_STATIC_BUF */
    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800cedc:	68bb      	ldr	r3, [r7, #8]
 800cede:	695b      	ldr	r3, [r3, #20]
 800cee0:	687a      	ldr	r2, [r7, #4]
 800cee2:	69f9      	ldr	r1, [r7, #28]
 800cee4:	68b8      	ldr	r0, [r7, #8]
 800cee6:	4798      	blx	r3
    IPFRAG_STATS_INC(ip_frag.xmit);
 800cee8:	4b13      	ldr	r3, [pc, #76]	; (800cf38 <ip_frag+0x360>)
 800ceea:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800ceec:	3301      	adds	r3, #1
 800ceee:	b29a      	uxth	r2, r3
 800cef0:	4b11      	ldr	r3, [pc, #68]	; (800cf38 <ip_frag+0x360>)
 800cef2:	861a      	strh	r2, [r3, #48]	; 0x30
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */
    
    pbuf_free(rambuf);
 800cef4:	69fb      	ldr	r3, [r7, #28]
 800cef6:	0018      	movs	r0, r3
 800cef8:	f7f8 fbd4 	bl	80056a4 <pbuf_free>
#endif /* IP_FRAG_USES_STATIC_BUF */
    left -= cop;
 800cefc:	223e      	movs	r2, #62	; 0x3e
 800cefe:	18bb      	adds	r3, r7, r2
 800cf00:	18b9      	adds	r1, r7, r2
 800cf02:	197a      	adds	r2, r7, r5
 800cf04:	8809      	ldrh	r1, [r1, #0]
 800cf06:	8812      	ldrh	r2, [r2, #0]
 800cf08:	1a8a      	subs	r2, r1, r2
 800cf0a:	801a      	strh	r2, [r3, #0]
    ofo += nfb;
 800cf0c:	223c      	movs	r2, #60	; 0x3c
 800cf0e:	18bb      	adds	r3, r7, r2
 800cf10:	18b9      	adds	r1, r7, r2
 800cf12:	2224      	movs	r2, #36	; 0x24
 800cf14:	18ba      	adds	r2, r7, r2
 800cf16:	8809      	ldrh	r1, [r1, #0]
 800cf18:	8812      	ldrh	r2, [r2, #0]
 800cf1a:	188a      	adds	r2, r1, r2
 800cf1c:	801a      	strh	r2, [r3, #0]
  while (left) {
 800cf1e:	233e      	movs	r3, #62	; 0x3e
 800cf20:	18fb      	adds	r3, r7, r3
 800cf22:	881b      	ldrh	r3, [r3, #0]
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d000      	beq.n	800cf2a <ip_frag+0x352>
 800cf28:	e69e      	b.n	800cc68 <ip_frag+0x90>
  }
#if IP_FRAG_USES_STATIC_BUF
  pbuf_free(rambuf);
#endif /* IP_FRAG_USES_STATIC_BUF */
  snmp_inc_ipfragoks();
  return ERR_OK;
 800cf2a:	2300      	movs	r3, #0
}
 800cf2c:	0018      	movs	r0, r3
 800cf2e:	46bd      	mov	sp, r7
 800cf30:	b011      	add	sp, #68	; 0x44
 800cf32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf34:	0800cba9 	.word	0x0800cba9
 800cf38:	20003158 	.word	0x20003158

0800cf3c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800cf3c:	b580      	push	{r7, lr}
 800cf3e:	b082      	sub	sp, #8
 800cf40:	af00      	add	r7, sp, #0
 800cf42:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  snmp_delete_arpidx_tree(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800cf44:	4914      	ldr	r1, [pc, #80]	; (800cf98 <etharp_free_entry+0x5c>)
 800cf46:	687a      	ldr	r2, [r7, #4]
 800cf48:	0013      	movs	r3, r2
 800cf4a:	009b      	lsls	r3, r3, #2
 800cf4c:	189b      	adds	r3, r3, r2
 800cf4e:	009b      	lsls	r3, r3, #2
 800cf50:	585b      	ldr	r3, [r3, r1]
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d011      	beq.n	800cf7a <etharp_free_entry+0x3e>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800cf56:	4910      	ldr	r1, [pc, #64]	; (800cf98 <etharp_free_entry+0x5c>)
 800cf58:	687a      	ldr	r2, [r7, #4]
 800cf5a:	0013      	movs	r3, r2
 800cf5c:	009b      	lsls	r3, r3, #2
 800cf5e:	189b      	adds	r3, r3, r2
 800cf60:	009b      	lsls	r3, r3, #2
 800cf62:	585b      	ldr	r3, [r3, r1]
 800cf64:	0018      	movs	r0, r3
 800cf66:	f7f8 fb9d 	bl	80056a4 <pbuf_free>
    arp_table[i].q = NULL;
 800cf6a:	490b      	ldr	r1, [pc, #44]	; (800cf98 <etharp_free_entry+0x5c>)
 800cf6c:	687a      	ldr	r2, [r7, #4]
 800cf6e:	0013      	movs	r3, r2
 800cf70:	009b      	lsls	r3, r3, #2
 800cf72:	189b      	adds	r3, r3, r2
 800cf74:	009b      	lsls	r3, r3, #2
 800cf76:	2200      	movs	r2, #0
 800cf78:	505a      	str	r2, [r3, r1]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800cf7a:	4907      	ldr	r1, [pc, #28]	; (800cf98 <etharp_free_entry+0x5c>)
 800cf7c:	687a      	ldr	r2, [r7, #4]
 800cf7e:	0013      	movs	r3, r2
 800cf80:	009b      	lsls	r3, r3, #2
 800cf82:	189b      	adds	r3, r3, r2
 800cf84:	009b      	lsls	r3, r3, #2
 800cf86:	18cb      	adds	r3, r1, r3
 800cf88:	3312      	adds	r3, #18
 800cf8a:	2200      	movs	r2, #0
 800cf8c:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800cf8e:	46c0      	nop			; (mov r8, r8)
 800cf90:	46bd      	mov	sp, r7
 800cf92:	b002      	add	sp, #8
 800cf94:	bd80      	pop	{r7, pc}
 800cf96:	46c0      	nop			; (mov r8, r8)
 800cf98:	200022c0 	.word	0x200022c0

0800cf9c <etharp_tmr>:
 * This function should be called every ETHARP_TMR_INTERVAL milliseconds (5 seconds),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800cf9c:	b580      	push	{r7, lr}
 800cf9e:	b082      	sub	sp, #8
 800cfa0:	af00      	add	r7, sp, #0
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cfa2:	1dfb      	adds	r3, r7, #7
 800cfa4:	2200      	movs	r2, #0
 800cfa6:	701a      	strb	r2, [r3, #0]
 800cfa8:	e06e      	b.n	800d088 <etharp_tmr+0xec>
    u8_t state = arp_table[i].state;
 800cfaa:	1dfb      	adds	r3, r7, #7
 800cfac:	781a      	ldrb	r2, [r3, #0]
 800cfae:	1db9      	adds	r1, r7, #6
 800cfb0:	4839      	ldr	r0, [pc, #228]	; (800d098 <etharp_tmr+0xfc>)
 800cfb2:	0013      	movs	r3, r2
 800cfb4:	009b      	lsls	r3, r3, #2
 800cfb6:	189b      	adds	r3, r3, r2
 800cfb8:	009b      	lsls	r3, r3, #2
 800cfba:	18c3      	adds	r3, r0, r3
 800cfbc:	3312      	adds	r3, #18
 800cfbe:	781b      	ldrb	r3, [r3, #0]
 800cfc0:	700b      	strb	r3, [r1, #0]
    if (state != ETHARP_STATE_EMPTY
 800cfc2:	1dbb      	adds	r3, r7, #6
 800cfc4:	781b      	ldrb	r3, [r3, #0]
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d059      	beq.n	800d07e <etharp_tmr+0xe2>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
 800cfca:	1dbb      	adds	r3, r7, #6
 800cfcc:	781b      	ldrb	r3, [r3, #0]
 800cfce:	2b04      	cmp	r3, #4
 800cfd0:	d055      	beq.n	800d07e <etharp_tmr+0xe2>
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 800cfd2:	1dfb      	adds	r3, r7, #7
 800cfd4:	781a      	ldrb	r2, [r3, #0]
 800cfd6:	4930      	ldr	r1, [pc, #192]	; (800d098 <etharp_tmr+0xfc>)
 800cfd8:	0013      	movs	r3, r2
 800cfda:	009b      	lsls	r3, r3, #2
 800cfdc:	189b      	adds	r3, r3, r2
 800cfde:	009b      	lsls	r3, r3, #2
 800cfe0:	18cb      	adds	r3, r1, r3
 800cfe2:	3313      	adds	r3, #19
 800cfe4:	781b      	ldrb	r3, [r3, #0]
 800cfe6:	3301      	adds	r3, #1
 800cfe8:	b2d8      	uxtb	r0, r3
 800cfea:	492b      	ldr	r1, [pc, #172]	; (800d098 <etharp_tmr+0xfc>)
 800cfec:	0013      	movs	r3, r2
 800cfee:	009b      	lsls	r3, r3, #2
 800cff0:	189b      	adds	r3, r3, r2
 800cff2:	009b      	lsls	r3, r3, #2
 800cff4:	18cb      	adds	r3, r1, r3
 800cff6:	3313      	adds	r3, #19
 800cff8:	1c02      	adds	r2, r0, #0
 800cffa:	701a      	strb	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800cffc:	1dfb      	adds	r3, r7, #7
 800cffe:	781a      	ldrb	r2, [r3, #0]
 800d000:	4925      	ldr	r1, [pc, #148]	; (800d098 <etharp_tmr+0xfc>)
 800d002:	0013      	movs	r3, r2
 800d004:	009b      	lsls	r3, r3, #2
 800d006:	189b      	adds	r3, r3, r2
 800d008:	009b      	lsls	r3, r3, #2
 800d00a:	18cb      	adds	r3, r1, r3
 800d00c:	3313      	adds	r3, #19
 800d00e:	781b      	ldrb	r3, [r3, #0]
 800d010:	2bef      	cmp	r3, #239	; 0xef
 800d012:	d817      	bhi.n	800d044 <etharp_tmr+0xa8>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800d014:	1dfb      	adds	r3, r7, #7
 800d016:	781a      	ldrb	r2, [r3, #0]
 800d018:	491f      	ldr	r1, [pc, #124]	; (800d098 <etharp_tmr+0xfc>)
 800d01a:	0013      	movs	r3, r2
 800d01c:	009b      	lsls	r3, r3, #2
 800d01e:	189b      	adds	r3, r3, r2
 800d020:	009b      	lsls	r3, r3, #2
 800d022:	18cb      	adds	r3, r1, r3
 800d024:	3312      	adds	r3, #18
 800d026:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800d028:	2b01      	cmp	r3, #1
 800d02a:	d111      	bne.n	800d050 <etharp_tmr+0xb4>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800d02c:	1dfb      	adds	r3, r7, #7
 800d02e:	781a      	ldrb	r2, [r3, #0]
 800d030:	4919      	ldr	r1, [pc, #100]	; (800d098 <etharp_tmr+0xfc>)
 800d032:	0013      	movs	r3, r2
 800d034:	009b      	lsls	r3, r3, #2
 800d036:	189b      	adds	r3, r3, r2
 800d038:	009b      	lsls	r3, r3, #2
 800d03a:	18cb      	adds	r3, r1, r3
 800d03c:	3313      	adds	r3, #19
 800d03e:	781b      	ldrb	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800d040:	2b01      	cmp	r3, #1
 800d042:	d905      	bls.n	800d050 <etharp_tmr+0xb4>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800d044:	1dfb      	adds	r3, r7, #7
 800d046:	781b      	ldrb	r3, [r3, #0]
 800d048:	0018      	movs	r0, r3
 800d04a:	f7ff ff77 	bl	800cf3c <etharp_free_entry>
 800d04e:	e016      	b.n	800d07e <etharp_tmr+0xe2>
      }
      else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING) {
 800d050:	1dfb      	adds	r3, r7, #7
 800d052:	781a      	ldrb	r2, [r3, #0]
 800d054:	4910      	ldr	r1, [pc, #64]	; (800d098 <etharp_tmr+0xfc>)
 800d056:	0013      	movs	r3, r2
 800d058:	009b      	lsls	r3, r3, #2
 800d05a:	189b      	adds	r3, r3, r2
 800d05c:	009b      	lsls	r3, r3, #2
 800d05e:	18cb      	adds	r3, r1, r3
 800d060:	3312      	adds	r3, #18
 800d062:	781b      	ldrb	r3, [r3, #0]
 800d064:	2b03      	cmp	r3, #3
 800d066:	d10a      	bne.n	800d07e <etharp_tmr+0xe2>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800d068:	1dfb      	adds	r3, r7, #7
 800d06a:	781a      	ldrb	r2, [r3, #0]
 800d06c:	490a      	ldr	r1, [pc, #40]	; (800d098 <etharp_tmr+0xfc>)
 800d06e:	0013      	movs	r3, r2
 800d070:	009b      	lsls	r3, r3, #2
 800d072:	189b      	adds	r3, r3, r2
 800d074:	009b      	lsls	r3, r3, #2
 800d076:	18cb      	adds	r3, r1, r3
 800d078:	3312      	adds	r3, #18
 800d07a:	2202      	movs	r2, #2
 800d07c:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d07e:	1dfb      	adds	r3, r7, #7
 800d080:	1dfa      	adds	r2, r7, #7
 800d082:	7812      	ldrb	r2, [r2, #0]
 800d084:	3201      	adds	r2, #1
 800d086:	701a      	strb	r2, [r3, #0]
 800d088:	1dfb      	adds	r3, r7, #7
 800d08a:	781b      	ldrb	r3, [r3, #0]
 800d08c:	2b09      	cmp	r3, #9
 800d08e:	d98c      	bls.n	800cfaa <etharp_tmr+0xe>
        /* resend an ARP query here? */
      }
#endif /* ARP_QUEUEING */
    }
  }
}
 800d090:	46c0      	nop			; (mov r8, r8)
 800d092:	46bd      	mov	sp, r7
 800d094:	b002      	add	sp, #8
 800d096:	bd80      	pop	{r7, pc}
 800d098:	200022c0 	.word	0x200022c0

0800d09c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(ip_addr_t *ipaddr, u8_t flags)
{
 800d09c:	b580      	push	{r7, lr}
 800d09e:	b086      	sub	sp, #24
 800d0a0:	af00      	add	r7, sp, #0
 800d0a2:	6078      	str	r0, [r7, #4]
 800d0a4:	000a      	movs	r2, r1
 800d0a6:	1cfb      	adds	r3, r7, #3
 800d0a8:	701a      	strb	r2, [r3, #0]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800d0aa:	2317      	movs	r3, #23
 800d0ac:	18fb      	adds	r3, r7, r3
 800d0ae:	220a      	movs	r2, #10
 800d0b0:	701a      	strb	r2, [r3, #0]
 800d0b2:	2316      	movs	r3, #22
 800d0b4:	18fb      	adds	r3, r7, r3
 800d0b6:	220a      	movs	r2, #10
 800d0b8:	701a      	strb	r2, [r3, #0]
  s8_t empty = ARP_TABLE_SIZE;
 800d0ba:	2315      	movs	r3, #21
 800d0bc:	18fb      	adds	r3, r7, r3
 800d0be:	220a      	movs	r2, #10
 800d0c0:	701a      	strb	r2, [r3, #0]
  u8_t i = 0, age_pending = 0, age_stable = 0;
 800d0c2:	2114      	movs	r1, #20
 800d0c4:	187b      	adds	r3, r7, r1
 800d0c6:	2200      	movs	r2, #0
 800d0c8:	701a      	strb	r2, [r3, #0]
 800d0ca:	2313      	movs	r3, #19
 800d0cc:	18fb      	adds	r3, r7, r3
 800d0ce:	2200      	movs	r2, #0
 800d0d0:	701a      	strb	r2, [r3, #0]
 800d0d2:	2312      	movs	r3, #18
 800d0d4:	18fb      	adds	r3, r7, r3
 800d0d6:	2200      	movs	r2, #0
 800d0d8:	701a      	strb	r2, [r3, #0]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 800d0da:	2311      	movs	r3, #17
 800d0dc:	18fb      	adds	r3, r7, r3
 800d0de:	220a      	movs	r2, #10
 800d0e0:	701a      	strb	r2, [r3, #0]
  /* its age */
  u8_t age_queue = 0;
 800d0e2:	2310      	movs	r3, #16
 800d0e4:	18fb      	adds	r3, r7, r3
 800d0e6:	2200      	movs	r2, #0
 800d0e8:	701a      	strb	r2, [r3, #0]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d0ea:	187b      	adds	r3, r7, r1
 800d0ec:	2200      	movs	r2, #0
 800d0ee:	701a      	strb	r2, [r3, #0]
 800d0f0:	e0c7      	b.n	800d282 <etharp_find_entry+0x1e6>
    u8_t state = arp_table[i].state;
 800d0f2:	2314      	movs	r3, #20
 800d0f4:	18fb      	adds	r3, r7, r3
 800d0f6:	781a      	ldrb	r2, [r3, #0]
 800d0f8:	230f      	movs	r3, #15
 800d0fa:	18f9      	adds	r1, r7, r3
 800d0fc:	48a4      	ldr	r0, [pc, #656]	; (800d390 <etharp_find_entry+0x2f4>)
 800d0fe:	0013      	movs	r3, r2
 800d100:	009b      	lsls	r3, r3, #2
 800d102:	189b      	adds	r3, r3, r2
 800d104:	009b      	lsls	r3, r3, #2
 800d106:	18c3      	adds	r3, r0, r3
 800d108:	3312      	adds	r3, #18
 800d10a:	781b      	ldrb	r3, [r3, #0]
 800d10c:	700b      	strb	r3, [r1, #0]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800d10e:	2315      	movs	r3, #21
 800d110:	18fb      	adds	r3, r7, r3
 800d112:	781b      	ldrb	r3, [r3, #0]
 800d114:	b25b      	sxtb	r3, r3
 800d116:	2b0a      	cmp	r3, #10
 800d118:	d10b      	bne.n	800d132 <etharp_find_entry+0x96>
 800d11a:	230f      	movs	r3, #15
 800d11c:	18fb      	adds	r3, r7, r3
 800d11e:	781b      	ldrb	r3, [r3, #0]
 800d120:	2b00      	cmp	r3, #0
 800d122:	d106      	bne.n	800d132 <etharp_find_entry+0x96>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 800d124:	2315      	movs	r3, #21
 800d126:	18fb      	adds	r3, r7, r3
 800d128:	2214      	movs	r2, #20
 800d12a:	18ba      	adds	r2, r7, r2
 800d12c:	7812      	ldrb	r2, [r2, #0]
 800d12e:	701a      	strb	r2, [r3, #0]
 800d130:	e0a1      	b.n	800d276 <etharp_find_entry+0x1da>
    } else if (state != ETHARP_STATE_EMPTY) {
 800d132:	230f      	movs	r3, #15
 800d134:	18fb      	adds	r3, r7, r3
 800d136:	781b      	ldrb	r3, [r3, #0]
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d100      	bne.n	800d13e <etharp_find_entry+0xa2>
 800d13c:	e09b      	b.n	800d276 <etharp_find_entry+0x1da>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip_addr_cmp(ipaddr, &arp_table[i].ipaddr)) {
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	2b00      	cmp	r3, #0
 800d142:	d013      	beq.n	800d16c <etharp_find_entry+0xd0>
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	6819      	ldr	r1, [r3, #0]
 800d148:	2314      	movs	r3, #20
 800d14a:	18fb      	adds	r3, r7, r3
 800d14c:	781a      	ldrb	r2, [r3, #0]
 800d14e:	4890      	ldr	r0, [pc, #576]	; (800d390 <etharp_find_entry+0x2f4>)
 800d150:	0013      	movs	r3, r2
 800d152:	009b      	lsls	r3, r3, #2
 800d154:	189b      	adds	r3, r3, r2
 800d156:	009b      	lsls	r3, r3, #2
 800d158:	18c3      	adds	r3, r0, r3
 800d15a:	3304      	adds	r3, #4
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	4299      	cmp	r1, r3
 800d160:	d104      	bne.n	800d16c <etharp_find_entry+0xd0>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 800d162:	2314      	movs	r3, #20
 800d164:	18fb      	adds	r3, r7, r3
 800d166:	781b      	ldrb	r3, [r3, #0]
 800d168:	b25b      	sxtb	r3, r3
 800d16a:	e10c      	b.n	800d386 <etharp_find_entry+0x2ea>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800d16c:	230f      	movs	r3, #15
 800d16e:	18fb      	adds	r3, r7, r3
 800d170:	781b      	ldrb	r3, [r3, #0]
 800d172:	2b01      	cmp	r3, #1
 800d174:	d152      	bne.n	800d21c <etharp_find_entry+0x180>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800d176:	2314      	movs	r3, #20
 800d178:	18fb      	adds	r3, r7, r3
 800d17a:	781a      	ldrb	r2, [r3, #0]
 800d17c:	4984      	ldr	r1, [pc, #528]	; (800d390 <etharp_find_entry+0x2f4>)
 800d17e:	0013      	movs	r3, r2
 800d180:	009b      	lsls	r3, r3, #2
 800d182:	189b      	adds	r3, r3, r2
 800d184:	009b      	lsls	r3, r3, #2
 800d186:	585b      	ldr	r3, [r3, r1]
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d023      	beq.n	800d1d4 <etharp_find_entry+0x138>
          if (arp_table[i].ctime >= age_queue) {
 800d18c:	2314      	movs	r3, #20
 800d18e:	18fb      	adds	r3, r7, r3
 800d190:	781a      	ldrb	r2, [r3, #0]
 800d192:	497f      	ldr	r1, [pc, #508]	; (800d390 <etharp_find_entry+0x2f4>)
 800d194:	0013      	movs	r3, r2
 800d196:	009b      	lsls	r3, r3, #2
 800d198:	189b      	adds	r3, r3, r2
 800d19a:	009b      	lsls	r3, r3, #2
 800d19c:	18cb      	adds	r3, r1, r3
 800d19e:	3313      	adds	r3, #19
 800d1a0:	781b      	ldrb	r3, [r3, #0]
 800d1a2:	2210      	movs	r2, #16
 800d1a4:	18ba      	adds	r2, r7, r2
 800d1a6:	7812      	ldrb	r2, [r2, #0]
 800d1a8:	429a      	cmp	r2, r3
 800d1aa:	d864      	bhi.n	800d276 <etharp_find_entry+0x1da>
            old_queue = i;
 800d1ac:	2311      	movs	r3, #17
 800d1ae:	18fb      	adds	r3, r7, r3
 800d1b0:	2114      	movs	r1, #20
 800d1b2:	187a      	adds	r2, r7, r1
 800d1b4:	7812      	ldrb	r2, [r2, #0]
 800d1b6:	701a      	strb	r2, [r3, #0]
            age_queue = arp_table[i].ctime;
 800d1b8:	187b      	adds	r3, r7, r1
 800d1ba:	781a      	ldrb	r2, [r3, #0]
 800d1bc:	2310      	movs	r3, #16
 800d1be:	18f9      	adds	r1, r7, r3
 800d1c0:	4873      	ldr	r0, [pc, #460]	; (800d390 <etharp_find_entry+0x2f4>)
 800d1c2:	0013      	movs	r3, r2
 800d1c4:	009b      	lsls	r3, r3, #2
 800d1c6:	189b      	adds	r3, r3, r2
 800d1c8:	009b      	lsls	r3, r3, #2
 800d1ca:	18c3      	adds	r3, r0, r3
 800d1cc:	3313      	adds	r3, #19
 800d1ce:	781b      	ldrb	r3, [r3, #0]
 800d1d0:	700b      	strb	r3, [r1, #0]
 800d1d2:	e050      	b.n	800d276 <etharp_find_entry+0x1da>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800d1d4:	2314      	movs	r3, #20
 800d1d6:	18fb      	adds	r3, r7, r3
 800d1d8:	781a      	ldrb	r2, [r3, #0]
 800d1da:	496d      	ldr	r1, [pc, #436]	; (800d390 <etharp_find_entry+0x2f4>)
 800d1dc:	0013      	movs	r3, r2
 800d1de:	009b      	lsls	r3, r3, #2
 800d1e0:	189b      	adds	r3, r3, r2
 800d1e2:	009b      	lsls	r3, r3, #2
 800d1e4:	18cb      	adds	r3, r1, r3
 800d1e6:	3313      	adds	r3, #19
 800d1e8:	781b      	ldrb	r3, [r3, #0]
 800d1ea:	2213      	movs	r2, #19
 800d1ec:	18ba      	adds	r2, r7, r2
 800d1ee:	7812      	ldrb	r2, [r2, #0]
 800d1f0:	429a      	cmp	r2, r3
 800d1f2:	d840      	bhi.n	800d276 <etharp_find_entry+0x1da>
            old_pending = i;
 800d1f4:	2317      	movs	r3, #23
 800d1f6:	18fb      	adds	r3, r7, r3
 800d1f8:	2114      	movs	r1, #20
 800d1fa:	187a      	adds	r2, r7, r1
 800d1fc:	7812      	ldrb	r2, [r2, #0]
 800d1fe:	701a      	strb	r2, [r3, #0]
            age_pending = arp_table[i].ctime;
 800d200:	187b      	adds	r3, r7, r1
 800d202:	781a      	ldrb	r2, [r3, #0]
 800d204:	2313      	movs	r3, #19
 800d206:	18f9      	adds	r1, r7, r3
 800d208:	4861      	ldr	r0, [pc, #388]	; (800d390 <etharp_find_entry+0x2f4>)
 800d20a:	0013      	movs	r3, r2
 800d20c:	009b      	lsls	r3, r3, #2
 800d20e:	189b      	adds	r3, r3, r2
 800d210:	009b      	lsls	r3, r3, #2
 800d212:	18c3      	adds	r3, r0, r3
 800d214:	3313      	adds	r3, #19
 800d216:	781b      	ldrb	r3, [r3, #0]
 800d218:	700b      	strb	r3, [r1, #0]
 800d21a:	e02c      	b.n	800d276 <etharp_find_entry+0x1da>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800d21c:	230f      	movs	r3, #15
 800d21e:	18fb      	adds	r3, r7, r3
 800d220:	781b      	ldrb	r3, [r3, #0]
 800d222:	2b01      	cmp	r3, #1
 800d224:	d927      	bls.n	800d276 <etharp_find_entry+0x1da>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
 800d226:	230f      	movs	r3, #15
 800d228:	18fb      	adds	r3, r7, r3
 800d22a:	781b      	ldrb	r3, [r3, #0]
 800d22c:	2b03      	cmp	r3, #3
 800d22e:	d822      	bhi.n	800d276 <etharp_find_entry+0x1da>
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800d230:	2314      	movs	r3, #20
 800d232:	18fb      	adds	r3, r7, r3
 800d234:	781a      	ldrb	r2, [r3, #0]
 800d236:	4956      	ldr	r1, [pc, #344]	; (800d390 <etharp_find_entry+0x2f4>)
 800d238:	0013      	movs	r3, r2
 800d23a:	009b      	lsls	r3, r3, #2
 800d23c:	189b      	adds	r3, r3, r2
 800d23e:	009b      	lsls	r3, r3, #2
 800d240:	18cb      	adds	r3, r1, r3
 800d242:	3313      	adds	r3, #19
 800d244:	781b      	ldrb	r3, [r3, #0]
 800d246:	2212      	movs	r2, #18
 800d248:	18ba      	adds	r2, r7, r2
 800d24a:	7812      	ldrb	r2, [r2, #0]
 800d24c:	429a      	cmp	r2, r3
 800d24e:	d812      	bhi.n	800d276 <etharp_find_entry+0x1da>
            old_stable = i;
 800d250:	2316      	movs	r3, #22
 800d252:	18fb      	adds	r3, r7, r3
 800d254:	2114      	movs	r1, #20
 800d256:	187a      	adds	r2, r7, r1
 800d258:	7812      	ldrb	r2, [r2, #0]
 800d25a:	701a      	strb	r2, [r3, #0]
            age_stable = arp_table[i].ctime;
 800d25c:	187b      	adds	r3, r7, r1
 800d25e:	781a      	ldrb	r2, [r3, #0]
 800d260:	2312      	movs	r3, #18
 800d262:	18f9      	adds	r1, r7, r3
 800d264:	484a      	ldr	r0, [pc, #296]	; (800d390 <etharp_find_entry+0x2f4>)
 800d266:	0013      	movs	r3, r2
 800d268:	009b      	lsls	r3, r3, #2
 800d26a:	189b      	adds	r3, r3, r2
 800d26c:	009b      	lsls	r3, r3, #2
 800d26e:	18c3      	adds	r3, r0, r3
 800d270:	3313      	adds	r3, #19
 800d272:	781b      	ldrb	r3, [r3, #0]
 800d274:	700b      	strb	r3, [r1, #0]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d276:	2214      	movs	r2, #20
 800d278:	18bb      	adds	r3, r7, r2
 800d27a:	18ba      	adds	r2, r7, r2
 800d27c:	7812      	ldrb	r2, [r2, #0]
 800d27e:	3201      	adds	r2, #1
 800d280:	701a      	strb	r2, [r3, #0]
 800d282:	2314      	movs	r3, #20
 800d284:	18fb      	adds	r3, r7, r3
 800d286:	781b      	ldrb	r3, [r3, #0]
 800d288:	2b09      	cmp	r3, #9
 800d28a:	d800      	bhi.n	800d28e <etharp_find_entry+0x1f2>
 800d28c:	e731      	b.n	800d0f2 <etharp_find_entry+0x56>
    }
  }
  /* { we have no match } => try to create a new entry */
   
  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800d28e:	1cfb      	adds	r3, r7, #3
 800d290:	781b      	ldrb	r3, [r3, #0]
 800d292:	2202      	movs	r2, #2
 800d294:	4013      	ands	r3, r2
 800d296:	d10a      	bne.n	800d2ae <etharp_find_entry+0x212>
 800d298:	2315      	movs	r3, #21
 800d29a:	18fb      	adds	r3, r7, r3
 800d29c:	781b      	ldrb	r3, [r3, #0]
 800d29e:	b25b      	sxtb	r3, r3
 800d2a0:	2b0a      	cmp	r3, #10
 800d2a2:	d107      	bne.n	800d2b4 <etharp_find_entry+0x218>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800d2a4:	1cfb      	adds	r3, r7, #3
 800d2a6:	781b      	ldrb	r3, [r3, #0]
 800d2a8:	2201      	movs	r2, #1
 800d2aa:	4013      	ands	r3, r2
 800d2ac:	d102      	bne.n	800d2b4 <etharp_find_entry+0x218>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 800d2ae:	2301      	movs	r3, #1
 800d2b0:	425b      	negs	r3, r3
 800d2b2:	e068      	b.n	800d386 <etharp_find_entry+0x2ea>
   * 
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */ 

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800d2b4:	2315      	movs	r3, #21
 800d2b6:	18fb      	adds	r3, r7, r3
 800d2b8:	781b      	ldrb	r3, [r3, #0]
 800d2ba:	b25b      	sxtb	r3, r3
 800d2bc:	2b09      	cmp	r3, #9
 800d2be:	dc06      	bgt.n	800d2ce <etharp_find_entry+0x232>
    i = empty;
 800d2c0:	2314      	movs	r3, #20
 800d2c2:	18fb      	adds	r3, r7, r3
 800d2c4:	2215      	movs	r2, #21
 800d2c6:	18ba      	adds	r2, r7, r2
 800d2c8:	7812      	ldrb	r2, [r2, #0]
 800d2ca:	701a      	strb	r2, [r3, #0]
 800d2cc:	e035      	b.n	800d33a <etharp_find_entry+0x29e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800d2ce:	2316      	movs	r3, #22
 800d2d0:	18fb      	adds	r3, r7, r3
 800d2d2:	781b      	ldrb	r3, [r3, #0]
 800d2d4:	b25b      	sxtb	r3, r3
 800d2d6:	2b09      	cmp	r3, #9
 800d2d8:	dc0c      	bgt.n	800d2f4 <etharp_find_entry+0x258>
      /* recycle oldest stable*/
      i = old_stable;
 800d2da:	2114      	movs	r1, #20
 800d2dc:	187b      	adds	r3, r7, r1
 800d2de:	2216      	movs	r2, #22
 800d2e0:	18ba      	adds	r2, r7, r2
 800d2e2:	7812      	ldrb	r2, [r2, #0]
 800d2e4:	701a      	strb	r2, [r3, #0]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800d2e6:	187b      	adds	r3, r7, r1
 800d2e8:	781a      	ldrb	r2, [r3, #0]
 800d2ea:	0013      	movs	r3, r2
 800d2ec:	009b      	lsls	r3, r3, #2
 800d2ee:	189b      	adds	r3, r3, r2
 800d2f0:	009b      	lsls	r3, r3, #2
 800d2f2:	e01c      	b.n	800d32e <etharp_find_entry+0x292>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800d2f4:	2317      	movs	r3, #23
 800d2f6:	18fb      	adds	r3, r7, r3
 800d2f8:	781b      	ldrb	r3, [r3, #0]
 800d2fa:	b25b      	sxtb	r3, r3
 800d2fc:	2b09      	cmp	r3, #9
 800d2fe:	dc06      	bgt.n	800d30e <etharp_find_entry+0x272>
      /* recycle oldest pending */
      i = old_pending;
 800d300:	2314      	movs	r3, #20
 800d302:	18fb      	adds	r3, r7, r3
 800d304:	2217      	movs	r2, #23
 800d306:	18ba      	adds	r2, r7, r2
 800d308:	7812      	ldrb	r2, [r2, #0]
 800d30a:	701a      	strb	r2, [r3, #0]
 800d30c:	e00f      	b.n	800d32e <etharp_find_entry+0x292>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800d30e:	2311      	movs	r3, #17
 800d310:	18fb      	adds	r3, r7, r3
 800d312:	781b      	ldrb	r3, [r3, #0]
 800d314:	b25b      	sxtb	r3, r3
 800d316:	2b09      	cmp	r3, #9
 800d318:	dc06      	bgt.n	800d328 <etharp_find_entry+0x28c>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800d31a:	2314      	movs	r3, #20
 800d31c:	18fb      	adds	r3, r7, r3
 800d31e:	2211      	movs	r2, #17
 800d320:	18ba      	adds	r2, r7, r2
 800d322:	7812      	ldrb	r2, [r2, #0]
 800d324:	701a      	strb	r2, [r3, #0]
 800d326:	e002      	b.n	800d32e <etharp_find_entry+0x292>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
 800d328:	2301      	movs	r3, #1
 800d32a:	425b      	negs	r3, r3
 800d32c:	e02b      	b.n	800d386 <etharp_find_entry+0x2ea>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
    etharp_free_entry(i);
 800d32e:	2314      	movs	r3, #20
 800d330:	18fb      	adds	r3, r7, r3
 800d332:	781b      	ldrb	r3, [r3, #0]
 800d334:	0018      	movs	r0, r3
 800d336:	f7ff fe01 	bl	800cf3c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800d33a:	2314      	movs	r3, #20
 800d33c:	18fb      	adds	r3, r7, r3
 800d33e:	781a      	ldrb	r2, [r3, #0]
 800d340:	0013      	movs	r3, r2
 800d342:	009b      	lsls	r3, r3, #2
 800d344:	189b      	adds	r3, r3, r2
 800d346:	009b      	lsls	r3, r3, #2
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d00c      	beq.n	800d368 <etharp_find_entry+0x2cc>
    /* set IP address */
    ip_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800d34e:	2314      	movs	r3, #20
 800d350:	18fb      	adds	r3, r7, r3
 800d352:	781a      	ldrb	r2, [r3, #0]
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	6819      	ldr	r1, [r3, #0]
 800d358:	480d      	ldr	r0, [pc, #52]	; (800d390 <etharp_find_entry+0x2f4>)
 800d35a:	0013      	movs	r3, r2
 800d35c:	009b      	lsls	r3, r3, #2
 800d35e:	189b      	adds	r3, r3, r2
 800d360:	009b      	lsls	r3, r3, #2
 800d362:	18c3      	adds	r3, r0, r3
 800d364:	3304      	adds	r3, #4
 800d366:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800d368:	2014      	movs	r0, #20
 800d36a:	183b      	adds	r3, r7, r0
 800d36c:	781a      	ldrb	r2, [r3, #0]
 800d36e:	4908      	ldr	r1, [pc, #32]	; (800d390 <etharp_find_entry+0x2f4>)
 800d370:	0013      	movs	r3, r2
 800d372:	009b      	lsls	r3, r3, #2
 800d374:	189b      	adds	r3, r3, r2
 800d376:	009b      	lsls	r3, r3, #2
 800d378:	18cb      	adds	r3, r1, r3
 800d37a:	3313      	adds	r3, #19
 800d37c:	2200      	movs	r2, #0
 800d37e:	701a      	strb	r2, [r3, #0]
  return (err_t)i;
 800d380:	183b      	adds	r3, r7, r0
 800d382:	781b      	ldrb	r3, [r3, #0]
 800d384:	b25b      	sxtb	r3, r3
}
 800d386:	0018      	movs	r0, r3
 800d388:	46bd      	mov	sp, r7
 800d38a:	b006      	add	sp, #24
 800d38c:	bd80      	pop	{r7, pc}
 800d38e:	46c0      	nop			; (mov r8, r8)
 800d390:	200022c0 	.word	0x200022c0

0800d394 <etharp_send_ip>:
 * @params dst the destination MAC address to be copied into the ethernet header
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
static err_t
etharp_send_ip(struct netif *netif, struct pbuf *p, struct eth_addr *src, struct eth_addr *dst)
{
 800d394:	b580      	push	{r7, lr}
 800d396:	b086      	sub	sp, #24
 800d398:	af00      	add	r7, sp, #0
 800d39a:	60f8      	str	r0, [r7, #12]
 800d39c:	60b9      	str	r1, [r7, #8]
 800d39e:	607a      	str	r2, [r7, #4]
 800d3a0:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr = (struct eth_hdr *)p->payload;
 800d3a2:	68bb      	ldr	r3, [r7, #8]
 800d3a4:	685b      	ldr	r3, [r3, #4]
 800d3a6:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETHARP_HWADDR_LEN for etharp!",
              (netif->hwaddr_len == ETHARP_HWADDR_LEN));
  ETHADDR32_COPY(&ethhdr->dest, dst);
 800d3a8:	697b      	ldr	r3, [r7, #20]
 800d3aa:	6839      	ldr	r1, [r7, #0]
 800d3ac:	2206      	movs	r2, #6
 800d3ae:	0018      	movs	r0, r3
 800d3b0:	f002 fc77 	bl	800fca2 <memcpy>
  ETHADDR16_COPY(&ethhdr->src, src);
 800d3b4:	697b      	ldr	r3, [r7, #20]
 800d3b6:	3306      	adds	r3, #6
 800d3b8:	6879      	ldr	r1, [r7, #4]
 800d3ba:	2206      	movs	r2, #6
 800d3bc:	0018      	movs	r0, r3
 800d3be:	f002 fc70 	bl	800fca2 <memcpy>
  ethhdr->type = PP_HTONS(ETHTYPE_IP);
 800d3c2:	697b      	ldr	r3, [r7, #20]
 800d3c4:	7b1a      	ldrb	r2, [r3, #12]
 800d3c6:	2100      	movs	r1, #0
 800d3c8:	400a      	ands	r2, r1
 800d3ca:	1c11      	adds	r1, r2, #0
 800d3cc:	2208      	movs	r2, #8
 800d3ce:	430a      	orrs	r2, r1
 800d3d0:	731a      	strb	r2, [r3, #12]
 800d3d2:	7b5a      	ldrb	r2, [r3, #13]
 800d3d4:	2100      	movs	r1, #0
 800d3d6:	400a      	ands	r2, r1
 800d3d8:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_send_ip: sending packet %p\n", (void *)p));
  /* send the packet */
  return netif->linkoutput(netif, p);
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	699b      	ldr	r3, [r3, #24]
 800d3de:	68b9      	ldr	r1, [r7, #8]
 800d3e0:	68fa      	ldr	r2, [r7, #12]
 800d3e2:	0010      	movs	r0, r2
 800d3e4:	4798      	blx	r3
 800d3e6:	0003      	movs	r3, r0
}
 800d3e8:	0018      	movs	r0, r3
 800d3ea:	46bd      	mov	sp, r7
 800d3ec:	b006      	add	sp, #24
 800d3ee:	bd80      	pop	{r7, pc}

0800d3f0 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, ip_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800d3f0:	b5b0      	push	{r4, r5, r7, lr}
 800d3f2:	b086      	sub	sp, #24
 800d3f4:	af00      	add	r7, sp, #0
 800d3f6:	60f8      	str	r0, [r7, #12]
 800d3f8:	60b9      	str	r1, [r7, #8]
 800d3fa:	607a      	str	r2, [r7, #4]
 800d3fc:	001a      	movs	r2, r3
 800d3fe:	1cfb      	adds	r3, r7, #3
 800d400:	701a      	strb	r2, [r3, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    ethaddr->addr[0], ethaddr->addr[1], ethaddr->addr[2],
    ethaddr->addr[3], ethaddr->addr[4], ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip_addr_isany(ipaddr) ||
 800d402:	68bb      	ldr	r3, [r7, #8]
 800d404:	2b00      	cmp	r3, #0
 800d406:	d012      	beq.n	800d42e <etharp_update_arp_entry+0x3e>
 800d408:	68bb      	ldr	r3, [r7, #8]
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d00e      	beq.n	800d42e <etharp_update_arp_entry+0x3e>
      ip_addr_isbroadcast(ipaddr, netif) ||
 800d410:	68bb      	ldr	r3, [r7, #8]
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	68fa      	ldr	r2, [r7, #12]
 800d416:	0011      	movs	r1, r2
 800d418:	0018      	movs	r0, r3
 800d41a:	f7fe fe2f 	bl	800c07c <ip4_addr_isbroadcast>
 800d41e:	1e03      	subs	r3, r0, #0
  if (ip_addr_isany(ipaddr) ||
 800d420:	d105      	bne.n	800d42e <etharp_update_arp_entry+0x3e>
      ip_addr_ismulticast(ipaddr)) {
 800d422:	68bb      	ldr	r3, [r7, #8]
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	22f0      	movs	r2, #240	; 0xf0
 800d428:	4013      	ands	r3, r2
      ip_addr_isbroadcast(ipaddr, netif) ||
 800d42a:	2be0      	cmp	r3, #224	; 0xe0
 800d42c:	d102      	bne.n	800d434 <etharp_update_arp_entry+0x44>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800d42e:	230e      	movs	r3, #14
 800d430:	425b      	negs	r3, r3
 800d432:	e08a      	b.n	800d54a <etharp_update_arp_entry+0x15a>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags);
 800d434:	2517      	movs	r5, #23
 800d436:	197c      	adds	r4, r7, r5
 800d438:	1cfb      	adds	r3, r7, #3
 800d43a:	781a      	ldrb	r2, [r3, #0]
 800d43c:	68bb      	ldr	r3, [r7, #8]
 800d43e:	0011      	movs	r1, r2
 800d440:	0018      	movs	r0, r3
 800d442:	f7ff fe2b 	bl	800d09c <etharp_find_entry>
 800d446:	0003      	movs	r3, r0
 800d448:	7023      	strb	r3, [r4, #0]
  /* bail out if no entry could be found */
  if (i < 0) {
 800d44a:	197b      	adds	r3, r7, r5
 800d44c:	781b      	ldrb	r3, [r3, #0]
 800d44e:	2b7f      	cmp	r3, #127	; 0x7f
 800d450:	d904      	bls.n	800d45c <etharp_update_arp_entry+0x6c>
    return (err_t)i;
 800d452:	2317      	movs	r3, #23
 800d454:	18fb      	adds	r3, r7, r3
 800d456:	781b      	ldrb	r3, [r3, #0]
 800d458:	b25b      	sxtb	r3, r3
 800d45a:	e076      	b.n	800d54a <etharp_update_arp_entry+0x15a>
  }

#if ETHARP_SUPPORT_STATIC_ENTRIES
  if (flags & ETHARP_FLAG_STATIC_ENTRY) {
 800d45c:	1cfb      	adds	r3, r7, #3
 800d45e:	781b      	ldrb	r3, [r3, #0]
 800d460:	2204      	movs	r2, #4
 800d462:	4013      	ands	r3, r2
 800d464:	d00d      	beq.n	800d482 <etharp_update_arp_entry+0x92>
    /* record static type */
    arp_table[i].state = ETHARP_STATE_STATIC;
 800d466:	2317      	movs	r3, #23
 800d468:	18fb      	adds	r3, r7, r3
 800d46a:	2200      	movs	r2, #0
 800d46c:	569a      	ldrsb	r2, [r3, r2]
 800d46e:	4939      	ldr	r1, [pc, #228]	; (800d554 <etharp_update_arp_entry+0x164>)
 800d470:	0013      	movs	r3, r2
 800d472:	009b      	lsls	r3, r3, #2
 800d474:	189b      	adds	r3, r3, r2
 800d476:	009b      	lsls	r3, r3, #2
 800d478:	18cb      	adds	r3, r1, r3
 800d47a:	3312      	adds	r3, #18
 800d47c:	2204      	movs	r2, #4
 800d47e:	701a      	strb	r2, [r3, #0]
 800d480:	e00c      	b.n	800d49c <etharp_update_arp_entry+0xac>
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800d482:	2317      	movs	r3, #23
 800d484:	18fb      	adds	r3, r7, r3
 800d486:	2200      	movs	r2, #0
 800d488:	569a      	ldrsb	r2, [r3, r2]
 800d48a:	4932      	ldr	r1, [pc, #200]	; (800d554 <etharp_update_arp_entry+0x164>)
 800d48c:	0013      	movs	r3, r2
 800d48e:	009b      	lsls	r3, r3, #2
 800d490:	189b      	adds	r3, r3, r2
 800d492:	009b      	lsls	r3, r3, #2
 800d494:	18cb      	adds	r3, r1, r3
 800d496:	3312      	adds	r3, #18
 800d498:	2202      	movs	r2, #2
 800d49a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800d49c:	2417      	movs	r4, #23
 800d49e:	193b      	adds	r3, r7, r4
 800d4a0:	2200      	movs	r2, #0
 800d4a2:	569a      	ldrsb	r2, [r3, r2]
 800d4a4:	492b      	ldr	r1, [pc, #172]	; (800d554 <etharp_update_arp_entry+0x164>)
 800d4a6:	0013      	movs	r3, r2
 800d4a8:	009b      	lsls	r3, r3, #2
 800d4aa:	189b      	adds	r3, r3, r2
 800d4ac:	009b      	lsls	r3, r3, #2
 800d4ae:	18cb      	adds	r3, r1, r3
 800d4b0:	3308      	adds	r3, #8
 800d4b2:	68fa      	ldr	r2, [r7, #12]
 800d4b4:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  snmp_insert_arpidx_tree(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 800d4b6:	193b      	adds	r3, r7, r4
 800d4b8:	2200      	movs	r2, #0
 800d4ba:	569a      	ldrsb	r2, [r3, r2]
 800d4bc:	0013      	movs	r3, r2
 800d4be:	009b      	lsls	r3, r3, #2
 800d4c0:	189b      	adds	r3, r3, r2
 800d4c2:	009b      	lsls	r3, r3, #2
 800d4c4:	3308      	adds	r3, #8
 800d4c6:	001a      	movs	r2, r3
 800d4c8:	4b22      	ldr	r3, [pc, #136]	; (800d554 <etharp_update_arp_entry+0x164>)
 800d4ca:	18d3      	adds	r3, r2, r3
 800d4cc:	3304      	adds	r3, #4
 800d4ce:	6879      	ldr	r1, [r7, #4]
 800d4d0:	2206      	movs	r2, #6
 800d4d2:	0018      	movs	r0, r3
 800d4d4:	f002 fbe5 	bl	800fca2 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800d4d8:	193b      	adds	r3, r7, r4
 800d4da:	2200      	movs	r2, #0
 800d4dc:	569a      	ldrsb	r2, [r3, r2]
 800d4de:	491d      	ldr	r1, [pc, #116]	; (800d554 <etharp_update_arp_entry+0x164>)
 800d4e0:	0013      	movs	r3, r2
 800d4e2:	009b      	lsls	r3, r3, #2
 800d4e4:	189b      	adds	r3, r3, r2
 800d4e6:	009b      	lsls	r3, r3, #2
 800d4e8:	18cb      	adds	r3, r1, r3
 800d4ea:	3313      	adds	r3, #19
 800d4ec:	2200      	movs	r2, #0
 800d4ee:	701a      	strb	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800d4f0:	193b      	adds	r3, r7, r4
 800d4f2:	2200      	movs	r2, #0
 800d4f4:	569a      	ldrsb	r2, [r3, r2]
 800d4f6:	4917      	ldr	r1, [pc, #92]	; (800d554 <etharp_update_arp_entry+0x164>)
 800d4f8:	0013      	movs	r3, r2
 800d4fa:	009b      	lsls	r3, r3, #2
 800d4fc:	189b      	adds	r3, r3, r2
 800d4fe:	009b      	lsls	r3, r3, #2
 800d500:	585b      	ldr	r3, [r3, r1]
 800d502:	2b00      	cmp	r3, #0
 800d504:	d020      	beq.n	800d548 <etharp_update_arp_entry+0x158>
    struct pbuf *p = arp_table[i].q;
 800d506:	2017      	movs	r0, #23
 800d508:	183b      	adds	r3, r7, r0
 800d50a:	2200      	movs	r2, #0
 800d50c:	569a      	ldrsb	r2, [r3, r2]
 800d50e:	4911      	ldr	r1, [pc, #68]	; (800d554 <etharp_update_arp_entry+0x164>)
 800d510:	0013      	movs	r3, r2
 800d512:	009b      	lsls	r3, r3, #2
 800d514:	189b      	adds	r3, r3, r2
 800d516:	009b      	lsls	r3, r3, #2
 800d518:	585b      	ldr	r3, [r3, r1]
 800d51a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800d51c:	183b      	adds	r3, r7, r0
 800d51e:	2200      	movs	r2, #0
 800d520:	569a      	ldrsb	r2, [r3, r2]
 800d522:	490c      	ldr	r1, [pc, #48]	; (800d554 <etharp_update_arp_entry+0x164>)
 800d524:	0013      	movs	r3, r2
 800d526:	009b      	lsls	r3, r3, #2
 800d528:	189b      	adds	r3, r3, r2
 800d52a:	009b      	lsls	r3, r3, #2
 800d52c:	2200      	movs	r2, #0
 800d52e:	505a      	str	r2, [r3, r1]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    etharp_send_ip(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr);
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	3323      	adds	r3, #35	; 0x23
 800d534:	001a      	movs	r2, r3
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	6939      	ldr	r1, [r7, #16]
 800d53a:	68f8      	ldr	r0, [r7, #12]
 800d53c:	f7ff ff2a 	bl	800d394 <etharp_send_ip>
    /* free the queued IP packet */
    pbuf_free(p);
 800d540:	693b      	ldr	r3, [r7, #16]
 800d542:	0018      	movs	r0, r3
 800d544:	f7f8 f8ae 	bl	80056a4 <pbuf_free>
  }
  return ERR_OK;
 800d548:	2300      	movs	r3, #0
}
 800d54a:	0018      	movs	r0, r3
 800d54c:	46bd      	mov	sp, r7
 800d54e:	b006      	add	sp, #24
 800d550:	bdb0      	pop	{r4, r5, r7, pc}
 800d552:	46c0      	nop			; (mov r8, r8)
 800d554:	200022c0 	.word	0x200022c0

0800d558 <etharp_arp_input>:
 *
 * @see pbuf_free()
 */
static void
etharp_arp_input(struct netif *netif, struct eth_addr *ethaddr, struct pbuf *p)
{
 800d558:	b590      	push	{r4, r7, lr}
 800d55a:	b08b      	sub	sp, #44	; 0x2c
 800d55c:	af00      	add	r7, sp, #0
 800d55e:	60f8      	str	r0, [r7, #12]
 800d560:	60b9      	str	r1, [r7, #8]
 800d562:	607a      	str	r2, [r7, #4]
  u8_t for_us;
#if LWIP_AUTOIP
  const u8_t * ethdst_hwaddr;
#endif /* LWIP_AUTOIP */

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	2b00      	cmp	r3, #0
 800d568:	d100      	bne.n	800d56c <etharp_arp_input+0x14>
 800d56a:	e0f5      	b.n	800d758 <etharp_arp_input+0x200>

  /* drop short ARP packets: we have to check for p->len instead of p->tot_len here
     since a struct etharp_hdr is pointed to p->payload, so it musn't be chained! */
  if (p->len < SIZEOF_ETHARP_PACKET) {
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	895b      	ldrh	r3, [r3, #10]
 800d570:	2b29      	cmp	r3, #41	; 0x29
 800d572:	d810      	bhi.n	800d596 <etharp_arp_input+0x3e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_arp_input: packet dropped, too short (%"S16_F"/%"S16_F")\n", p->tot_len,
      (s16_t)SIZEOF_ETHARP_PACKET));
    ETHARP_STATS_INC(etharp.lenerr);
 800d574:	4b7a      	ldr	r3, [pc, #488]	; (800d760 <etharp_arp_input+0x208>)
 800d576:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800d578:	3301      	adds	r3, #1
 800d57a:	b29a      	uxth	r2, r3
 800d57c:	4b78      	ldr	r3, [pc, #480]	; (800d760 <etharp_arp_input+0x208>)
 800d57e:	845a      	strh	r2, [r3, #34]	; 0x22
    ETHARP_STATS_INC(etharp.drop);
 800d580:	4b77      	ldr	r3, [pc, #476]	; (800d760 <etharp_arp_input+0x208>)
 800d582:	8bdb      	ldrh	r3, [r3, #30]
 800d584:	3301      	adds	r3, #1
 800d586:	b29a      	uxth	r2, r3
 800d588:	4b75      	ldr	r3, [pc, #468]	; (800d760 <etharp_arp_input+0x208>)
 800d58a:	83da      	strh	r2, [r3, #30]
    pbuf_free(p);
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	0018      	movs	r0, r3
 800d590:	f7f8 f888 	bl	80056a4 <pbuf_free>
    return;
 800d594:	e0e1      	b.n	800d75a <etharp_arp_input+0x202>
  }

  ethhdr = (struct eth_hdr *)p->payload;
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	685b      	ldr	r3, [r3, #4]
 800d59a:	623b      	str	r3, [r7, #32]
  hdr = (struct etharp_hdr *)((u8_t*)ethhdr + SIZEOF_ETH_HDR);
 800d59c:	6a3b      	ldr	r3, [r7, #32]
 800d59e:	330e      	adds	r3, #14
 800d5a0:	61fb      	str	r3, [r7, #28]
    hdr = (struct etharp_hdr *)(((u8_t*)ethhdr) + SIZEOF_ETH_HDR + SIZEOF_VLAN_HDR);
  }
#endif /* ETHARP_SUPPORT_VLAN */

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 800d5a2:	69fb      	ldr	r3, [r7, #28]
 800d5a4:	781a      	ldrb	r2, [r3, #0]
 800d5a6:	785b      	ldrb	r3, [r3, #1]
 800d5a8:	021b      	lsls	r3, r3, #8
 800d5aa:	4313      	orrs	r3, r2
 800d5ac:	b29a      	uxth	r2, r3
 800d5ae:	2380      	movs	r3, #128	; 0x80
 800d5b0:	005b      	lsls	r3, r3, #1
 800d5b2:	429a      	cmp	r2, r3
 800d5b4:	d10f      	bne.n	800d5d6 <etharp_arp_input+0x7e>
      (hdr->hwlen != ETHARP_HWADDR_LEN) ||
 800d5b6:	69fb      	ldr	r3, [r7, #28]
 800d5b8:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 800d5ba:	2b06      	cmp	r3, #6
 800d5bc:	d10b      	bne.n	800d5d6 <etharp_arp_input+0x7e>
      (hdr->protolen != sizeof(ip_addr_t)) ||
 800d5be:	69fb      	ldr	r3, [r7, #28]
 800d5c0:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETHARP_HWADDR_LEN) ||
 800d5c2:	2b04      	cmp	r3, #4
 800d5c4:	d107      	bne.n	800d5d6 <etharp_arp_input+0x7e>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800d5c6:	69fb      	ldr	r3, [r7, #28]
 800d5c8:	789a      	ldrb	r2, [r3, #2]
 800d5ca:	78db      	ldrb	r3, [r3, #3]
 800d5cc:	021b      	lsls	r3, r3, #8
 800d5ce:	4313      	orrs	r3, r2
 800d5d0:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip_addr_t)) ||
 800d5d2:	2b08      	cmp	r3, #8
 800d5d4:	d010      	beq.n	800d5f8 <etharp_arp_input+0xa0>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_arp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, hdr->hwlen, hdr->proto, hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
 800d5d6:	4b62      	ldr	r3, [pc, #392]	; (800d760 <etharp_arp_input+0x208>)
 800d5d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d5da:	3301      	adds	r3, #1
 800d5dc:	b29a      	uxth	r2, r3
 800d5de:	4b60      	ldr	r3, [pc, #384]	; (800d760 <etharp_arp_input+0x208>)
 800d5e0:	851a      	strh	r2, [r3, #40]	; 0x28
    ETHARP_STATS_INC(etharp.drop);
 800d5e2:	4b5f      	ldr	r3, [pc, #380]	; (800d760 <etharp_arp_input+0x208>)
 800d5e4:	8bdb      	ldrh	r3, [r3, #30]
 800d5e6:	3301      	adds	r3, #1
 800d5e8:	b29a      	uxth	r2, r3
 800d5ea:	4b5d      	ldr	r3, [pc, #372]	; (800d760 <etharp_arp_input+0x208>)
 800d5ec:	83da      	strh	r2, [r3, #30]
    pbuf_free(p);
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	0018      	movs	r0, r3
 800d5f2:	f7f8 f857 	bl	80056a4 <pbuf_free>
    return;
 800d5f6:	e0b0      	b.n	800d75a <etharp_arp_input+0x202>
  }
  ETHARP_STATS_INC(etharp.recv);
 800d5f8:	4b59      	ldr	r3, [pc, #356]	; (800d760 <etharp_arp_input+0x208>)
 800d5fa:	8b5b      	ldrh	r3, [r3, #26]
 800d5fc:	3301      	adds	r3, #1
 800d5fe:	b29a      	uxth	r2, r3
 800d600:	4b57      	ldr	r3, [pc, #348]	; (800d760 <etharp_arp_input+0x208>)
 800d602:	835a      	strh	r2, [r3, #26]
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip_addr2 to aligned ip_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 800d604:	69fb      	ldr	r3, [r7, #28]
 800d606:	330e      	adds	r3, #14
 800d608:	0019      	movs	r1, r3
 800d60a:	2318      	movs	r3, #24
 800d60c:	18fb      	adds	r3, r7, r3
 800d60e:	2204      	movs	r2, #4
 800d610:	0018      	movs	r0, r3
 800d612:	f002 fb46 	bl	800fca2 <memcpy>
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 800d616:	69fb      	ldr	r3, [r7, #28]
 800d618:	3318      	adds	r3, #24
 800d61a:	0019      	movs	r1, r3
 800d61c:	2314      	movs	r3, #20
 800d61e:	18fb      	adds	r3, r7, r3
 800d620:	2204      	movs	r2, #4
 800d622:	0018      	movs	r0, r3
 800d624:	f002 fb3d 	bl	800fca2 <memcpy>

  /* this interface is not configured? */
  if (ip_addr_isany(&netif->ip_addr)) {
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	3304      	adds	r3, #4
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d003      	beq.n	800d638 <etharp_arp_input+0xe0>
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	685b      	ldr	r3, [r3, #4]
 800d634:	2b00      	cmp	r3, #0
 800d636:	d104      	bne.n	800d642 <etharp_arp_input+0xea>
    for_us = 0;
 800d638:	2327      	movs	r3, #39	; 0x27
 800d63a:	18fb      	adds	r3, r7, r3
 800d63c:	2200      	movs	r2, #0
 800d63e:	701a      	strb	r2, [r3, #0]
 800d640:	e009      	b.n	800d656 <etharp_arp_input+0xfe>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip_addr_cmp(&dipaddr, &(netif->ip_addr));
 800d642:	697a      	ldr	r2, [r7, #20]
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	685b      	ldr	r3, [r3, #4]
 800d648:	1ad3      	subs	r3, r2, r3
 800d64a:	425a      	negs	r2, r3
 800d64c:	4153      	adcs	r3, r2
 800d64e:	b2da      	uxtb	r2, r3
 800d650:	2327      	movs	r3, #39	; 0x27
 800d652:	18fb      	adds	r3, r7, r3
 800d654:	701a      	strb	r2, [r3, #0]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800d656:	69fb      	ldr	r3, [r7, #28]
 800d658:	3308      	adds	r3, #8
 800d65a:	001a      	movs	r2, r3
 800d65c:	2327      	movs	r3, #39	; 0x27
 800d65e:	18fb      	adds	r3, r7, r3
 800d660:	781b      	ldrb	r3, [r3, #0]
 800d662:	2b00      	cmp	r3, #0
 800d664:	d001      	beq.n	800d66a <etharp_arp_input+0x112>
 800d666:	2301      	movs	r3, #1
 800d668:	e000      	b.n	800d66c <etharp_arp_input+0x114>
 800d66a:	2302      	movs	r3, #2
 800d66c:	2118      	movs	r1, #24
 800d66e:	1879      	adds	r1, r7, r1
 800d670:	68f8      	ldr	r0, [r7, #12]
 800d672:	f7ff febd 	bl	800d3f0 <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800d676:	69fb      	ldr	r3, [r7, #28]
 800d678:	799a      	ldrb	r2, [r3, #6]
 800d67a:	79db      	ldrb	r3, [r3, #7]
 800d67c:	021b      	lsls	r3, r3, #8
 800d67e:	4313      	orrs	r3, r2
 800d680:	b29b      	uxth	r3, r3
 800d682:	2280      	movs	r2, #128	; 0x80
 800d684:	0052      	lsls	r2, r2, #1
 800d686:	4293      	cmp	r3, r2
 800d688:	d004      	beq.n	800d694 <etharp_arp_input+0x13c>
 800d68a:	2280      	movs	r2, #128	; 0x80
 800d68c:	0092      	lsls	r2, r2, #2
 800d68e:	4293      	cmp	r3, r2
 800d690:	d05c      	beq.n	800d74c <etharp_arp_input+0x1f4>
 800d692:	e054      	b.n	800d73e <etharp_arp_input+0x1e6>
     * reply. In any case, we time-stamp any existing ARP entry,
     * and possiby send out an IP packet that was queued on it. */

    LWIP_DEBUGF (ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_arp_input: incoming ARP request\n"));
    /* ARP request for our address? */
    if (for_us) {
 800d694:	2327      	movs	r3, #39	; 0x27
 800d696:	18fb      	adds	r3, r7, r3
 800d698:	781b      	ldrb	r3, [r3, #0]
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d057      	beq.n	800d74e <etharp_arp_input+0x1f6>

      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_arp_input: replying to ARP request for our IP address\n"));
      /* Re-use pbuf to send ARP reply.
         Since we are re-using an existing pbuf, we can't call etharp_raw since
         that would allocate a new pbuf. */
      hdr->opcode = htons(ARP_REPLY);
 800d69e:	2002      	movs	r0, #2
 800d6a0:	f7f6 ffb8 	bl	8004614 <lwip_htons>
 800d6a4:	0003      	movs	r3, r0
 800d6a6:	001a      	movs	r2, r3
 800d6a8:	69fb      	ldr	r3, [r7, #28]
 800d6aa:	21ff      	movs	r1, #255	; 0xff
 800d6ac:	4011      	ands	r1, r2
 800d6ae:	000c      	movs	r4, r1
 800d6b0:	7999      	ldrb	r1, [r3, #6]
 800d6b2:	2000      	movs	r0, #0
 800d6b4:	4001      	ands	r1, r0
 800d6b6:	1c08      	adds	r0, r1, #0
 800d6b8:	1c21      	adds	r1, r4, #0
 800d6ba:	4301      	orrs	r1, r0
 800d6bc:	7199      	strb	r1, [r3, #6]
 800d6be:	0a12      	lsrs	r2, r2, #8
 800d6c0:	b290      	uxth	r0, r2
 800d6c2:	79da      	ldrb	r2, [r3, #7]
 800d6c4:	2100      	movs	r1, #0
 800d6c6:	400a      	ands	r2, r1
 800d6c8:	1c11      	adds	r1, r2, #0
 800d6ca:	1c02      	adds	r2, r0, #0
 800d6cc:	430a      	orrs	r2, r1
 800d6ce:	71da      	strb	r2, [r3, #7]

      IPADDR2_COPY(&hdr->dipaddr, &hdr->sipaddr);
 800d6d0:	69fb      	ldr	r3, [r7, #28]
 800d6d2:	3318      	adds	r3, #24
 800d6d4:	0018      	movs	r0, r3
 800d6d6:	69fb      	ldr	r3, [r7, #28]
 800d6d8:	330e      	adds	r3, #14
 800d6da:	2204      	movs	r2, #4
 800d6dc:	0019      	movs	r1, r3
 800d6de:	f002 fae0 	bl	800fca2 <memcpy>
      IPADDR2_COPY(&hdr->sipaddr, &netif->ip_addr);
 800d6e2:	69fb      	ldr	r3, [r7, #28]
 800d6e4:	330e      	adds	r3, #14
 800d6e6:	0018      	movs	r0, r3
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	3304      	adds	r3, #4
 800d6ec:	2204      	movs	r2, #4
 800d6ee:	0019      	movs	r1, r3
 800d6f0:	f002 fad7 	bl	800fca2 <memcpy>
       * 'sender IP address' MUST be sent using link-layer broadcast instead of
       * link-layer unicast. (See RFC3927 Section 2.5, last paragraph) */
      ethdst_hwaddr = ip_addr_islinklocal(&netif->ip_addr) ? (u8_t*)(ethbroadcast.addr) : hdr->shwaddr.addr;
#endif /* LWIP_AUTOIP */

      ETHADDR16_COPY(&hdr->dhwaddr, &hdr->shwaddr);
 800d6f4:	69fb      	ldr	r3, [r7, #28]
 800d6f6:	3312      	adds	r3, #18
 800d6f8:	0018      	movs	r0, r3
 800d6fa:	69fb      	ldr	r3, [r7, #28]
 800d6fc:	3308      	adds	r3, #8
 800d6fe:	2206      	movs	r2, #6
 800d700:	0019      	movs	r1, r3
 800d702:	f002 face 	bl	800fca2 <memcpy>
#if LWIP_AUTOIP
      ETHADDR16_COPY(&ethhdr->dest, ethdst_hwaddr);
#else  /* LWIP_AUTOIP */
      ETHADDR16_COPY(&ethhdr->dest, &hdr->shwaddr);
 800d706:	6a38      	ldr	r0, [r7, #32]
 800d708:	69fb      	ldr	r3, [r7, #28]
 800d70a:	3308      	adds	r3, #8
 800d70c:	2206      	movs	r2, #6
 800d70e:	0019      	movs	r1, r3
 800d710:	f002 fac7 	bl	800fca2 <memcpy>
#endif /* LWIP_AUTOIP */
      ETHADDR16_COPY(&hdr->shwaddr, ethaddr);
 800d714:	69fb      	ldr	r3, [r7, #28]
 800d716:	3308      	adds	r3, #8
 800d718:	68b9      	ldr	r1, [r7, #8]
 800d71a:	2206      	movs	r2, #6
 800d71c:	0018      	movs	r0, r3
 800d71e:	f002 fac0 	bl	800fca2 <memcpy>
      ETHADDR16_COPY(&ethhdr->src, ethaddr);
 800d722:	6a3b      	ldr	r3, [r7, #32]
 800d724:	3306      	adds	r3, #6
 800d726:	68b9      	ldr	r1, [r7, #8]
 800d728:	2206      	movs	r2, #6
 800d72a:	0018      	movs	r0, r3
 800d72c:	f002 fab9 	bl	800fca2 <memcpy>

      /* hwtype, hwaddr_len, proto, protolen and the type in the ethernet header
         are already correct, we tested that before */

      /* return ARP reply */
      netif->linkoutput(netif, p);
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	699b      	ldr	r3, [r3, #24]
 800d734:	6879      	ldr	r1, [r7, #4]
 800d736:	68fa      	ldr	r2, [r7, #12]
 800d738:	0010      	movs	r0, r2
 800d73a:	4798      	blx	r3
    /* request was not directed to us */
    } else {
      /* { for_us == 0 and netif->ip_addr.addr != 0 } */
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_arp_input: ARP request was not for us.\n"));
    }
    break;
 800d73c:	e007      	b.n	800d74e <etharp_arp_input+0x1f6>
    dhcp_arp_reply(netif, &sipaddr);
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_arp_input: ARP unknown opcode type %"S16_F"\n", htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
 800d73e:	4b08      	ldr	r3, [pc, #32]	; (800d760 <etharp_arp_input+0x208>)
 800d740:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800d742:	3301      	adds	r3, #1
 800d744:	b29a      	uxth	r2, r3
 800d746:	4b06      	ldr	r3, [pc, #24]	; (800d760 <etharp_arp_input+0x208>)
 800d748:	859a      	strh	r2, [r3, #44]	; 0x2c
    break;
 800d74a:	e000      	b.n	800d74e <etharp_arp_input+0x1f6>
    break;
 800d74c:	46c0      	nop			; (mov r8, r8)
  }
  /* free ARP packet */
  pbuf_free(p);
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	0018      	movs	r0, r3
 800d752:	f7f7 ffa7 	bl	80056a4 <pbuf_free>
 800d756:	e000      	b.n	800d75a <etharp_arp_input+0x202>
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800d758:	46c0      	nop			; (mov r8, r8)
}
 800d75a:	46bd      	mov	sp, r7
 800d75c:	b00b      	add	sp, #44	; 0x2c
 800d75e:	bd90      	pop	{r4, r7, pc}
 800d760:	20003158 	.word	0x20003158

0800d764 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 800d764:	b590      	push	{r4, r7, lr}
 800d766:	b085      	sub	sp, #20
 800d768:	af00      	add	r7, sp, #0
 800d76a:	60f8      	str	r0, [r7, #12]
 800d76c:	60b9      	str	r1, [r7, #8]
 800d76e:	1dfb      	adds	r3, r7, #7
 800d770:	701a      	strb	r2, [r3, #0]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800d772:	1dfb      	adds	r3, r7, #7
 800d774:	781a      	ldrb	r2, [r3, #0]
 800d776:	0013      	movs	r3, r2
 800d778:	009b      	lsls	r3, r3, #2
 800d77a:	189b      	adds	r3, r3, r2
 800d77c:	009b      	lsls	r3, r3, #2
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if ((arp_table[arp_idx].state == ETHARP_STATE_STABLE) && 
 800d77e:	1dfb      	adds	r3, r7, #7
 800d780:	781a      	ldrb	r2, [r3, #0]
 800d782:	4924      	ldr	r1, [pc, #144]	; (800d814 <etharp_output_to_arp_index+0xb0>)
 800d784:	0013      	movs	r3, r2
 800d786:	009b      	lsls	r3, r3, #2
 800d788:	189b      	adds	r3, r3, r2
 800d78a:	009b      	lsls	r3, r3, #2
 800d78c:	18cb      	adds	r3, r1, r3
 800d78e:	3312      	adds	r3, #18
 800d790:	781b      	ldrb	r3, [r3, #0]
 800d792:	2b02      	cmp	r3, #2
 800d794:	d126      	bne.n	800d7e4 <etharp_output_to_arp_index+0x80>
      (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED)) {
 800d796:	1dfb      	adds	r3, r7, #7
 800d798:	781a      	ldrb	r2, [r3, #0]
 800d79a:	491e      	ldr	r1, [pc, #120]	; (800d814 <etharp_output_to_arp_index+0xb0>)
 800d79c:	0013      	movs	r3, r2
 800d79e:	009b      	lsls	r3, r3, #2
 800d7a0:	189b      	adds	r3, r3, r2
 800d7a2:	009b      	lsls	r3, r3, #2
 800d7a4:	18cb      	adds	r3, r1, r3
 800d7a6:	3313      	adds	r3, #19
 800d7a8:	781b      	ldrb	r3, [r3, #0]
  if ((arp_table[arp_idx].state == ETHARP_STATE_STABLE) && 
 800d7aa:	2be3      	cmp	r3, #227	; 0xe3
 800d7ac:	d91a      	bls.n	800d7e4 <etharp_output_to_arp_index+0x80>
    if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800d7ae:	1dfb      	adds	r3, r7, #7
 800d7b0:	781a      	ldrb	r2, [r3, #0]
 800d7b2:	0013      	movs	r3, r2
 800d7b4:	009b      	lsls	r3, r3, #2
 800d7b6:	189b      	adds	r3, r3, r2
 800d7b8:	009b      	lsls	r3, r3, #2
 800d7ba:	4a16      	ldr	r2, [pc, #88]	; (800d814 <etharp_output_to_arp_index+0xb0>)
 800d7bc:	189b      	adds	r3, r3, r2
 800d7be:	1d1a      	adds	r2, r3, #4
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	0011      	movs	r1, r2
 800d7c4:	0018      	movs	r0, r3
 800d7c6:	f000 fb15 	bl	800ddf4 <etharp_request>
 800d7ca:	1e03      	subs	r3, r0, #0
 800d7cc:	d10a      	bne.n	800d7e4 <etharp_output_to_arp_index+0x80>
      arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING;
 800d7ce:	1dfb      	adds	r3, r7, #7
 800d7d0:	781a      	ldrb	r2, [r3, #0]
 800d7d2:	4910      	ldr	r1, [pc, #64]	; (800d814 <etharp_output_to_arp_index+0xb0>)
 800d7d4:	0013      	movs	r3, r2
 800d7d6:	009b      	lsls	r3, r3, #2
 800d7d8:	189b      	adds	r3, r3, r2
 800d7da:	009b      	lsls	r3, r3, #2
 800d7dc:	18cb      	adds	r3, r1, r3
 800d7de:	3312      	adds	r3, #18
 800d7e0:	2203      	movs	r2, #3
 800d7e2:	701a      	strb	r2, [r3, #0]
    }
  }
  
  return etharp_send_ip(netif, q, (struct eth_addr*)(netif->hwaddr),
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	3323      	adds	r3, #35	; 0x23
 800d7e8:	001c      	movs	r4, r3
    &arp_table[arp_idx].ethaddr);
 800d7ea:	1dfb      	adds	r3, r7, #7
 800d7ec:	781a      	ldrb	r2, [r3, #0]
  return etharp_send_ip(netif, q, (struct eth_addr*)(netif->hwaddr),
 800d7ee:	0013      	movs	r3, r2
 800d7f0:	009b      	lsls	r3, r3, #2
 800d7f2:	189b      	adds	r3, r3, r2
 800d7f4:	009b      	lsls	r3, r3, #2
 800d7f6:	3308      	adds	r3, #8
 800d7f8:	001a      	movs	r2, r3
 800d7fa:	4b06      	ldr	r3, [pc, #24]	; (800d814 <etharp_output_to_arp_index+0xb0>)
 800d7fc:	18d3      	adds	r3, r2, r3
 800d7fe:	3304      	adds	r3, #4
 800d800:	68b9      	ldr	r1, [r7, #8]
 800d802:	68f8      	ldr	r0, [r7, #12]
 800d804:	0022      	movs	r2, r4
 800d806:	f7ff fdc5 	bl	800d394 <etharp_send_ip>
 800d80a:	0003      	movs	r3, r0
}
 800d80c:	0018      	movs	r0, r3
 800d80e:	46bd      	mov	sp, r7
 800d810:	b005      	add	sp, #20
 800d812:	bd90      	pop	{r4, r7, pc}
 800d814:	200022c0 	.word	0x200022c0

0800d818 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or etharp_send_ip().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, ip_addr_t *ipaddr)
{
 800d818:	b580      	push	{r7, lr}
 800d81a:	b088      	sub	sp, #32
 800d81c:	af00      	add	r7, sp, #0
 800d81e:	60f8      	str	r0, [r7, #12]
 800d820:	60b9      	str	r1, [r7, #8]
 800d822:	607a      	str	r2, [r7, #4]
  struct eth_addr *dest;
  struct eth_addr mcastaddr;
  ip_addr_t *dst_addr = ipaddr;
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	61bb      	str	r3, [r7, #24]
  LWIP_ASSERT("netif != NULL", netif != NULL);
  LWIP_ASSERT("q != NULL", q != NULL);
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);

  /* make room for Ethernet header - should not fail */
  if (pbuf_header(q, sizeof(struct eth_hdr)) != 0) {
 800d828:	68bb      	ldr	r3, [r7, #8]
 800d82a:	210e      	movs	r1, #14
 800d82c:	0018      	movs	r0, r3
 800d82e:	f7f7 feb2 	bl	8005596 <pbuf_header>
 800d832:	1e03      	subs	r3, r0, #0
 800d834:	d008      	beq.n	800d848 <etharp_output+0x30>
    /* bail out */
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_output: could not allocate room for header.\n"));
    LINK_STATS_INC(link.lenerr);
 800d836:	4b6b      	ldr	r3, [pc, #428]	; (800d9e4 <etharp_output+0x1cc>)
 800d838:	895b      	ldrh	r3, [r3, #10]
 800d83a:	3301      	adds	r3, #1
 800d83c:	b29a      	uxth	r2, r3
 800d83e:	4b69      	ldr	r3, [pc, #420]	; (800d9e4 <etharp_output+0x1cc>)
 800d840:	815a      	strh	r2, [r3, #10]
    return ERR_BUF;
 800d842:	2302      	movs	r3, #2
 800d844:	425b      	negs	r3, r3
 800d846:	e0c9      	b.n	800d9dc <etharp_output+0x1c4>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip_addr_isbroadcast(ipaddr, netif)) {
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	68fa      	ldr	r2, [r7, #12]
 800d84e:	0011      	movs	r1, r2
 800d850:	0018      	movs	r0, r3
 800d852:	f7fe fc13 	bl	800c07c <ip4_addr_isbroadcast>
 800d856:	1e03      	subs	r3, r0, #0
 800d858:	d002      	beq.n	800d860 <etharp_output+0x48>
    /* broadcast on Ethernet also */
    dest = (struct eth_addr *)&ethbroadcast;
 800d85a:	4b63      	ldr	r3, [pc, #396]	; (800d9e8 <etharp_output+0x1d0>)
 800d85c:	61fb      	str	r3, [r7, #28]
 800d85e:	e0b4      	b.n	800d9ca <etharp_output+0x1b2>
  /* multicast destination IP address? */
  } else if (ip_addr_ismulticast(ipaddr)) {
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	22f0      	movs	r2, #240	; 0xf0
 800d866:	4013      	ands	r3, r2
 800d868:	2be0      	cmp	r3, #224	; 0xe0
 800d86a:	d11c      	bne.n	800d8a6 <etharp_output+0x8e>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_MULTICAST_ADDR_0;
 800d86c:	2110      	movs	r1, #16
 800d86e:	187b      	adds	r3, r7, r1
 800d870:	2201      	movs	r2, #1
 800d872:	701a      	strb	r2, [r3, #0]
    mcastaddr.addr[1] = LL_MULTICAST_ADDR_1;
 800d874:	187b      	adds	r3, r7, r1
 800d876:	2200      	movs	r2, #0
 800d878:	705a      	strb	r2, [r3, #1]
    mcastaddr.addr[2] = LL_MULTICAST_ADDR_2;
 800d87a:	187b      	adds	r3, r7, r1
 800d87c:	225e      	movs	r2, #94	; 0x5e
 800d87e:	709a      	strb	r2, [r3, #2]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	3301      	adds	r3, #1
 800d884:	781b      	ldrb	r3, [r3, #0]
 800d886:	227f      	movs	r2, #127	; 0x7f
 800d888:	4013      	ands	r3, r2
 800d88a:	b2da      	uxtb	r2, r3
 800d88c:	187b      	adds	r3, r7, r1
 800d88e:	70da      	strb	r2, [r3, #3]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	789a      	ldrb	r2, [r3, #2]
 800d894:	187b      	adds	r3, r7, r1
 800d896:	711a      	strb	r2, [r3, #4]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	78da      	ldrb	r2, [r3, #3]
 800d89c:	187b      	adds	r3, r7, r1
 800d89e:	715a      	strb	r2, [r3, #5]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800d8a0:	187b      	adds	r3, r7, r1
 800d8a2:	61fb      	str	r3, [r7, #28]
 800d8a4:	e091      	b.n	800d9ca <etharp_output+0x1b2>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip_addr_netcmp(ipaddr, &(netif->ip_addr), &(netif->netmask)) &&
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	681a      	ldr	r2, [r3, #0]
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	685b      	ldr	r3, [r3, #4]
 800d8ae:	405a      	eors	r2, r3
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	689b      	ldr	r3, [r3, #8]
 800d8b4:	4013      	ands	r3, r2
 800d8b6:	d015      	beq.n	800d8e4 <etharp_output+0xcc>
        !ip_addr_islinklocal(ipaddr)) {
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	041b      	lsls	r3, r3, #16
 800d8be:	0c1b      	lsrs	r3, r3, #16
    if (!ip_addr_netcmp(ipaddr, &(netif->ip_addr), &(netif->netmask)) &&
 800d8c0:	4a4a      	ldr	r2, [pc, #296]	; (800d9ec <etharp_output+0x1d4>)
 800d8c2:	4293      	cmp	r3, r2
 800d8c4:	d00e      	beq.n	800d8e4 <etharp_output+0xcc>
         router for forwarding". */
      if (!ip_addr_islinklocal(&iphdr->src))
#endif /* LWIP_AUTOIP */
      {
        /* interface has default gateway? */
        if (!ip_addr_isany(&netif->gw)) {
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	330c      	adds	r3, #12
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d007      	beq.n	800d8de <etharp_output+0xc6>
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	68db      	ldr	r3, [r3, #12]
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d003      	beq.n	800d8de <etharp_output+0xc6>
          /* send to hardware address of default gateway IP address */
          dst_addr = &(netif->gw);
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	330c      	adds	r3, #12
 800d8da:	61bb      	str	r3, [r7, #24]
 800d8dc:	e002      	b.n	800d8e4 <etharp_output+0xcc>
        /* no default gateway available */
        } else {
          /* no route to destination error (default gateway missing) */
          return ERR_RTE;
 800d8de:	2304      	movs	r3, #4
 800d8e0:	425b      	negs	r3, r3
 800d8e2:	e07b      	b.n	800d9dc <etharp_output+0x1c4>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800d8e4:	4b42      	ldr	r3, [pc, #264]	; (800d9f0 <etharp_output+0x1d8>)
 800d8e6:	781b      	ldrb	r3, [r3, #0]
 800d8e8:	0019      	movs	r1, r3
 800d8ea:	4a42      	ldr	r2, [pc, #264]	; (800d9f4 <etharp_output+0x1dc>)
 800d8ec:	000b      	movs	r3, r1
 800d8ee:	009b      	lsls	r3, r3, #2
 800d8f0:	185b      	adds	r3, r3, r1
 800d8f2:	009b      	lsls	r3, r3, #2
 800d8f4:	18d3      	adds	r3, r2, r3
 800d8f6:	3312      	adds	r3, #18
 800d8f8:	781b      	ldrb	r3, [r3, #0]
 800d8fa:	2b01      	cmp	r3, #1
 800d8fc:	d91d      	bls.n	800d93a <etharp_output+0x122>
            (ip_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800d8fe:	69bb      	ldr	r3, [r7, #24]
 800d900:	681a      	ldr	r2, [r3, #0]
 800d902:	4b3b      	ldr	r3, [pc, #236]	; (800d9f0 <etharp_output+0x1d8>)
 800d904:	781b      	ldrb	r3, [r3, #0]
 800d906:	0018      	movs	r0, r3
 800d908:	493a      	ldr	r1, [pc, #232]	; (800d9f4 <etharp_output+0x1dc>)
 800d90a:	0003      	movs	r3, r0
 800d90c:	009b      	lsls	r3, r3, #2
 800d90e:	181b      	adds	r3, r3, r0
 800d910:	009b      	lsls	r3, r3, #2
 800d912:	18cb      	adds	r3, r1, r3
 800d914:	3304      	adds	r3, #4
 800d916:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800d918:	429a      	cmp	r2, r3
 800d91a:	d10e      	bne.n	800d93a <etharp_output+0x122>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
 800d91c:	4b31      	ldr	r3, [pc, #196]	; (800d9e4 <etharp_output+0x1cc>)
 800d91e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d920:	3301      	adds	r3, #1
 800d922:	b29a      	uxth	r2, r3
 800d924:	4b2f      	ldr	r3, [pc, #188]	; (800d9e4 <etharp_output+0x1cc>)
 800d926:	85da      	strh	r2, [r3, #46]	; 0x2e
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800d928:	4b31      	ldr	r3, [pc, #196]	; (800d9f0 <etharp_output+0x1d8>)
 800d92a:	781a      	ldrb	r2, [r3, #0]
 800d92c:	68b9      	ldr	r1, [r7, #8]
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	0018      	movs	r0, r3
 800d932:	f7ff ff17 	bl	800d764 <etharp_output_to_arp_index>
 800d936:	0003      	movs	r3, r0
 800d938:	e050      	b.n	800d9dc <etharp_output+0x1c4>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800d93a:	2317      	movs	r3, #23
 800d93c:	18fb      	adds	r3, r7, r3
 800d93e:	2200      	movs	r2, #0
 800d940:	701a      	strb	r2, [r3, #0]
 800d942:	e034      	b.n	800d9ae <etharp_output+0x196>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800d944:	2317      	movs	r3, #23
 800d946:	18fb      	adds	r3, r7, r3
 800d948:	2200      	movs	r2, #0
 800d94a:	569a      	ldrsb	r2, [r3, r2]
 800d94c:	4929      	ldr	r1, [pc, #164]	; (800d9f4 <etharp_output+0x1dc>)
 800d94e:	0013      	movs	r3, r2
 800d950:	009b      	lsls	r3, r3, #2
 800d952:	189b      	adds	r3, r3, r2
 800d954:	009b      	lsls	r3, r3, #2
 800d956:	18cb      	adds	r3, r1, r3
 800d958:	3312      	adds	r3, #18
 800d95a:	781b      	ldrb	r3, [r3, #0]
 800d95c:	2b01      	cmp	r3, #1
 800d95e:	d91d      	bls.n	800d99c <etharp_output+0x184>
          (ip_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800d960:	69bb      	ldr	r3, [r7, #24]
 800d962:	6819      	ldr	r1, [r3, #0]
 800d964:	2317      	movs	r3, #23
 800d966:	18fb      	adds	r3, r7, r3
 800d968:	2200      	movs	r2, #0
 800d96a:	569a      	ldrsb	r2, [r3, r2]
 800d96c:	4821      	ldr	r0, [pc, #132]	; (800d9f4 <etharp_output+0x1dc>)
 800d96e:	0013      	movs	r3, r2
 800d970:	009b      	lsls	r3, r3, #2
 800d972:	189b      	adds	r3, r3, r2
 800d974:	009b      	lsls	r3, r3, #2
 800d976:	18c3      	adds	r3, r0, r3
 800d978:	3304      	adds	r3, #4
 800d97a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800d97c:	4299      	cmp	r1, r3
 800d97e:	d10d      	bne.n	800d99c <etharp_output+0x184>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 800d980:	2117      	movs	r1, #23
 800d982:	187b      	adds	r3, r7, r1
 800d984:	781a      	ldrb	r2, [r3, #0]
 800d986:	4b1a      	ldr	r3, [pc, #104]	; (800d9f0 <etharp_output+0x1d8>)
 800d988:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800d98a:	187b      	adds	r3, r7, r1
 800d98c:	781a      	ldrb	r2, [r3, #0]
 800d98e:	68b9      	ldr	r1, [r7, #8]
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	0018      	movs	r0, r3
 800d994:	f7ff fee6 	bl	800d764 <etharp_output_to_arp_index>
 800d998:	0003      	movs	r3, r0
 800d99a:	e01f      	b.n	800d9dc <etharp_output+0x1c4>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800d99c:	2117      	movs	r1, #23
 800d99e:	187b      	adds	r3, r7, r1
 800d9a0:	781b      	ldrb	r3, [r3, #0]
 800d9a2:	b25b      	sxtb	r3, r3
 800d9a4:	b2db      	uxtb	r3, r3
 800d9a6:	3301      	adds	r3, #1
 800d9a8:	b2da      	uxtb	r2, r3
 800d9aa:	187b      	adds	r3, r7, r1
 800d9ac:	701a      	strb	r2, [r3, #0]
 800d9ae:	2317      	movs	r3, #23
 800d9b0:	18fb      	adds	r3, r7, r3
 800d9b2:	781b      	ldrb	r3, [r3, #0]
 800d9b4:	b25b      	sxtb	r3, r3
 800d9b6:	2b09      	cmp	r3, #9
 800d9b8:	ddc4      	ble.n	800d944 <etharp_output+0x12c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800d9ba:	68ba      	ldr	r2, [r7, #8]
 800d9bc:	69b9      	ldr	r1, [r7, #24]
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	0018      	movs	r0, r3
 800d9c2:	f000 f819 	bl	800d9f8 <etharp_query>
 800d9c6:	0003      	movs	r3, r0
 800d9c8:	e008      	b.n	800d9dc <etharp_output+0x1c4>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return etharp_send_ip(netif, q, (struct eth_addr*)(netif->hwaddr), dest);
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	3323      	adds	r3, #35	; 0x23
 800d9ce:	001a      	movs	r2, r3
 800d9d0:	69fb      	ldr	r3, [r7, #28]
 800d9d2:	68b9      	ldr	r1, [r7, #8]
 800d9d4:	68f8      	ldr	r0, [r7, #12]
 800d9d6:	f7ff fcdd 	bl	800d394 <etharp_send_ip>
 800d9da:	0003      	movs	r3, r0
}
 800d9dc:	0018      	movs	r0, r3
 800d9de:	46bd      	mov	sp, r7
 800d9e0:	b008      	add	sp, #32
 800d9e2:	bd80      	pop	{r7, pc}
 800d9e4:	20003158 	.word	0x20003158
 800d9e8:	0800fdc8 	.word	0x0800fdc8
 800d9ec:	0000fea9 	.word	0x0000fea9
 800d9f0:	20002388 	.word	0x20002388
 800d9f4:	200022c0 	.word	0x200022c0

0800d9f8 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, ip_addr_t *ipaddr, struct pbuf *q)
{
 800d9f8:	b5b0      	push	{r4, r5, r7, lr}
 800d9fa:	b08a      	sub	sp, #40	; 0x28
 800d9fc:	af00      	add	r7, sp, #0
 800d9fe:	60f8      	str	r0, [r7, #12]
 800da00:	60b9      	str	r1, [r7, #8]
 800da02:	607a      	str	r2, [r7, #4]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	3323      	adds	r3, #35	; 0x23
 800da08:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_MEM;
 800da0a:	2327      	movs	r3, #39	; 0x27
 800da0c:	18fb      	adds	r3, r7, r3
 800da0e:	22ff      	movs	r2, #255	; 0xff
 800da10:	701a      	strb	r2, [r3, #0]
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip_addr_isbroadcast(ipaddr, netif) ||
 800da12:	68bb      	ldr	r3, [r7, #8]
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	68fa      	ldr	r2, [r7, #12]
 800da18:	0011      	movs	r1, r2
 800da1a:	0018      	movs	r0, r3
 800da1c:	f7fe fb2e 	bl	800c07c <ip4_addr_isbroadcast>
 800da20:	1e03      	subs	r3, r0, #0
 800da22:	d10c      	bne.n	800da3e <etharp_query+0x46>
      ip_addr_ismulticast(ipaddr) ||
 800da24:	68bb      	ldr	r3, [r7, #8]
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	22f0      	movs	r2, #240	; 0xf0
 800da2a:	4013      	ands	r3, r2
  if (ip_addr_isbroadcast(ipaddr, netif) ||
 800da2c:	2be0      	cmp	r3, #224	; 0xe0
 800da2e:	d006      	beq.n	800da3e <etharp_query+0x46>
      ip_addr_ismulticast(ipaddr) ||
 800da30:	68bb      	ldr	r3, [r7, #8]
 800da32:	2b00      	cmp	r3, #0
 800da34:	d003      	beq.n	800da3e <etharp_query+0x46>
      ip_addr_isany(ipaddr)) {
 800da36:	68bb      	ldr	r3, [r7, #8]
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d102      	bne.n	800da44 <etharp_query+0x4c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800da3e:	230e      	movs	r3, #14
 800da40:	425b      	negs	r3, r3
 800da42:	e116      	b.n	800dc72 <etharp_query+0x27a>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD);
 800da44:	2517      	movs	r5, #23
 800da46:	197c      	adds	r4, r7, r5
 800da48:	68bb      	ldr	r3, [r7, #8]
 800da4a:	2101      	movs	r1, #1
 800da4c:	0018      	movs	r0, r3
 800da4e:	f7ff fb25 	bl	800d09c <etharp_find_entry>
 800da52:	0003      	movs	r3, r0
 800da54:	7023      	strb	r3, [r4, #0]

  /* could not find or create entry? */
  if (i < 0) {
 800da56:	197b      	adds	r3, r7, r5
 800da58:	781b      	ldrb	r3, [r3, #0]
 800da5a:	2b7f      	cmp	r3, #127	; 0x7f
 800da5c:	d90d      	bls.n	800da7a <etharp_query+0x82>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	2b00      	cmp	r3, #0
 800da62:	d005      	beq.n	800da70 <etharp_query+0x78>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
 800da64:	4b85      	ldr	r3, [pc, #532]	; (800dc7c <etharp_query+0x284>)
 800da66:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800da68:	3301      	adds	r3, #1
 800da6a:	b29a      	uxth	r2, r3
 800da6c:	4b83      	ldr	r3, [pc, #524]	; (800dc7c <etharp_query+0x284>)
 800da6e:	849a      	strh	r2, [r3, #36]	; 0x24
    }
    return (err_t)i;
 800da70:	2317      	movs	r3, #23
 800da72:	18fb      	adds	r3, r7, r3
 800da74:	781b      	ldrb	r3, [r3, #0]
 800da76:	b25b      	sxtb	r3, r3
 800da78:	e0fb      	b.n	800dc72 <etharp_query+0x27a>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800da7a:	2317      	movs	r3, #23
 800da7c:	18fb      	adds	r3, r7, r3
 800da7e:	2200      	movs	r2, #0
 800da80:	569a      	ldrsb	r2, [r3, r2]
 800da82:	497f      	ldr	r1, [pc, #508]	; (800dc80 <etharp_query+0x288>)
 800da84:	0013      	movs	r3, r2
 800da86:	009b      	lsls	r3, r3, #2
 800da88:	189b      	adds	r3, r3, r2
 800da8a:	009b      	lsls	r3, r3, #2
 800da8c:	18cb      	adds	r3, r1, r3
 800da8e:	3312      	adds	r3, #18
 800da90:	781b      	ldrb	r3, [r3, #0]
 800da92:	2b00      	cmp	r3, #0
 800da94:	d10c      	bne.n	800dab0 <etharp_query+0xb8>
    arp_table[i].state = ETHARP_STATE_PENDING;
 800da96:	2317      	movs	r3, #23
 800da98:	18fb      	adds	r3, r7, r3
 800da9a:	2200      	movs	r2, #0
 800da9c:	569a      	ldrsb	r2, [r3, r2]
 800da9e:	4978      	ldr	r1, [pc, #480]	; (800dc80 <etharp_query+0x288>)
 800daa0:	0013      	movs	r3, r2
 800daa2:	009b      	lsls	r3, r3, #2
 800daa4:	189b      	adds	r3, r3, r2
 800daa6:	009b      	lsls	r3, r3, #2
 800daa8:	18cb      	adds	r3, r1, r3
 800daaa:	3312      	adds	r3, #18
 800daac:	2201      	movs	r2, #1
 800daae:	701a      	strb	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800dab0:	2317      	movs	r3, #23
 800dab2:	18fb      	adds	r3, r7, r3
 800dab4:	2200      	movs	r2, #0
 800dab6:	569a      	ldrsb	r2, [r3, r2]
 800dab8:	4971      	ldr	r1, [pc, #452]	; (800dc80 <etharp_query+0x288>)
 800daba:	0013      	movs	r3, r2
 800dabc:	009b      	lsls	r3, r3, #2
 800dabe:	189b      	adds	r3, r3, r2
 800dac0:	009b      	lsls	r3, r3, #2
 800dac2:	18cb      	adds	r3, r1, r3
 800dac4:	3312      	adds	r3, #18
 800dac6:	781b      	ldrb	r3, [r3, #0]
 800dac8:	2b01      	cmp	r3, #1
 800daca:	d007      	beq.n	800dadc <etharp_query+0xe4>
 800dacc:	2317      	movs	r3, #23
 800dace:	18fb      	adds	r3, r7, r3
 800dad0:	2200      	movs	r2, #0
 800dad2:	569a      	ldrsb	r2, [r3, r2]
 800dad4:	0013      	movs	r3, r2
 800dad6:	009b      	lsls	r3, r3, #2
 800dad8:	189b      	adds	r3, r3, r2
 800dada:	009b      	lsls	r3, r3, #2
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a pending entry? or an implicit query request? */
  if ((arp_table[i].state == ETHARP_STATE_PENDING) || (q == NULL)) {
 800dadc:	2317      	movs	r3, #23
 800dade:	18fb      	adds	r3, r7, r3
 800dae0:	2200      	movs	r2, #0
 800dae2:	569a      	ldrsb	r2, [r3, r2]
 800dae4:	4966      	ldr	r1, [pc, #408]	; (800dc80 <etharp_query+0x288>)
 800dae6:	0013      	movs	r3, r2
 800dae8:	009b      	lsls	r3, r3, #2
 800daea:	189b      	adds	r3, r3, r2
 800daec:	009b      	lsls	r3, r3, #2
 800daee:	18cb      	adds	r3, r1, r3
 800daf0:	3312      	adds	r3, #18
 800daf2:	781b      	ldrb	r3, [r3, #0]
 800daf4:	2b01      	cmp	r3, #1
 800daf6:	d002      	beq.n	800dafe <etharp_query+0x106>
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d111      	bne.n	800db22 <etharp_query+0x12a>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800dafe:	2327      	movs	r3, #39	; 0x27
 800db00:	18fc      	adds	r4, r7, r3
 800db02:	68ba      	ldr	r2, [r7, #8]
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	0011      	movs	r1, r2
 800db08:	0018      	movs	r0, r3
 800db0a:	f000 f973 	bl	800ddf4 <etharp_request>
 800db0e:	0003      	movs	r3, r0
 800db10:	7023      	strb	r3, [r4, #0]
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	2b00      	cmp	r3, #0
 800db16:	d104      	bne.n	800db22 <etharp_query+0x12a>
      return result;
 800db18:	2327      	movs	r3, #39	; 0x27
 800db1a:	18fb      	adds	r3, r7, r3
 800db1c:	781b      	ldrb	r3, [r3, #0]
 800db1e:	b25b      	sxtb	r3, r3
 800db20:	e0a7      	b.n	800dc72 <etharp_query+0x27a>
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800db22:	2317      	movs	r3, #23
 800db24:	18fb      	adds	r3, r7, r3
 800db26:	2200      	movs	r2, #0
 800db28:	569a      	ldrsb	r2, [r3, r2]
 800db2a:	4955      	ldr	r1, [pc, #340]	; (800dc80 <etharp_query+0x288>)
 800db2c:	0013      	movs	r3, r2
 800db2e:	009b      	lsls	r3, r3, #2
 800db30:	189b      	adds	r3, r3, r2
 800db32:	009b      	lsls	r3, r3, #2
 800db34:	18cb      	adds	r3, r1, r3
 800db36:	3312      	adds	r3, #18
 800db38:	781b      	ldrb	r3, [r3, #0]
 800db3a:	2b01      	cmp	r3, #1
 800db3c:	d91a      	bls.n	800db74 <etharp_query+0x17c>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 800db3e:	2117      	movs	r1, #23
 800db40:	187b      	adds	r3, r7, r1
 800db42:	781a      	ldrb	r2, [r3, #0]
 800db44:	4b4f      	ldr	r3, [pc, #316]	; (800dc84 <etharp_query+0x28c>)
 800db46:	701a      	strb	r2, [r3, #0]
    /* send the packet */
    result = etharp_send_ip(netif, q, srcaddr, &(arp_table[i].ethaddr));
 800db48:	187b      	adds	r3, r7, r1
 800db4a:	2200      	movs	r2, #0
 800db4c:	569a      	ldrsb	r2, [r3, r2]
 800db4e:	0013      	movs	r3, r2
 800db50:	009b      	lsls	r3, r3, #2
 800db52:	189b      	adds	r3, r3, r2
 800db54:	009b      	lsls	r3, r3, #2
 800db56:	3308      	adds	r3, #8
 800db58:	001a      	movs	r2, r3
 800db5a:	4b49      	ldr	r3, [pc, #292]	; (800dc80 <etharp_query+0x288>)
 800db5c:	18d3      	adds	r3, r2, r3
 800db5e:	3304      	adds	r3, #4
 800db60:	2227      	movs	r2, #39	; 0x27
 800db62:	18bc      	adds	r4, r7, r2
 800db64:	69ba      	ldr	r2, [r7, #24]
 800db66:	6879      	ldr	r1, [r7, #4]
 800db68:	68f8      	ldr	r0, [r7, #12]
 800db6a:	f7ff fc13 	bl	800d394 <etharp_send_ip>
 800db6e:	0003      	movs	r3, r0
 800db70:	7023      	strb	r3, [r4, #0]
 800db72:	e07a      	b.n	800dc6a <etharp_query+0x272>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800db74:	2317      	movs	r3, #23
 800db76:	18fb      	adds	r3, r7, r3
 800db78:	2200      	movs	r2, #0
 800db7a:	569a      	ldrsb	r2, [r3, r2]
 800db7c:	4940      	ldr	r1, [pc, #256]	; (800dc80 <etharp_query+0x288>)
 800db7e:	0013      	movs	r3, r2
 800db80:	009b      	lsls	r3, r3, #2
 800db82:	189b      	adds	r3, r3, r2
 800db84:	009b      	lsls	r3, r3, #2
 800db86:	18cb      	adds	r3, r1, r3
 800db88:	3312      	adds	r3, #18
 800db8a:	781b      	ldrb	r3, [r3, #0]
 800db8c:	2b01      	cmp	r3, #1
 800db8e:	d000      	beq.n	800db92 <etharp_query+0x19a>
 800db90:	e06b      	b.n	800dc6a <etharp_query+0x272>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800db92:	2300      	movs	r3, #0
 800db94:	61fb      	str	r3, [r7, #28]
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400) 
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	623b      	str	r3, [r7, #32]
    while (p) {
 800db9a:	e009      	b.n	800dbb0 <etharp_query+0x1b8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
      if(p->type != PBUF_ROM) {
 800db9c:	6a3b      	ldr	r3, [r7, #32]
 800db9e:	7b1b      	ldrb	r3, [r3, #12]
 800dba0:	2b01      	cmp	r3, #1
 800dba2:	d002      	beq.n	800dbaa <etharp_query+0x1b2>
        copy_needed = 1;
 800dba4:	2301      	movs	r3, #1
 800dba6:	61fb      	str	r3, [r7, #28]
        break;
 800dba8:	e005      	b.n	800dbb6 <etharp_query+0x1be>
      }
      p = p->next;
 800dbaa:	6a3b      	ldr	r3, [r7, #32]
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	623b      	str	r3, [r7, #32]
    while (p) {
 800dbb0:	6a3b      	ldr	r3, [r7, #32]
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d1f2      	bne.n	800db9c <etharp_query+0x1a4>
    }
    if(copy_needed) {
 800dbb6:	69fb      	ldr	r3, [r7, #28]
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d01a      	beq.n	800dbf2 <etharp_query+0x1fa>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_RAW, p->tot_len, PBUF_RAM);
 800dbbc:	6a3b      	ldr	r3, [r7, #32]
 800dbbe:	891b      	ldrh	r3, [r3, #8]
 800dbc0:	2200      	movs	r2, #0
 800dbc2:	0019      	movs	r1, r3
 800dbc4:	2003      	movs	r0, #3
 800dbc6:	f7f7 fae1 	bl	800518c <pbuf_alloc>
 800dbca:	0003      	movs	r3, r0
 800dbcc:	623b      	str	r3, [r7, #32]
      if(p != NULL) {
 800dbce:	6a3b      	ldr	r3, [r7, #32]
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d014      	beq.n	800dbfe <etharp_query+0x206>
        if (pbuf_copy(p, q) != ERR_OK) {
 800dbd4:	687a      	ldr	r2, [r7, #4]
 800dbd6:	6a3b      	ldr	r3, [r7, #32]
 800dbd8:	0011      	movs	r1, r2
 800dbda:	0018      	movs	r0, r3
 800dbdc:	f7f7 fe41 	bl	8005862 <pbuf_copy>
 800dbe0:	1e03      	subs	r3, r0, #0
 800dbe2:	d00c      	beq.n	800dbfe <etharp_query+0x206>
          pbuf_free(p);
 800dbe4:	6a3b      	ldr	r3, [r7, #32]
 800dbe6:	0018      	movs	r0, r3
 800dbe8:	f7f7 fd5c 	bl	80056a4 <pbuf_free>
          p = NULL;
 800dbec:	2300      	movs	r3, #0
 800dbee:	623b      	str	r3, [r7, #32]
 800dbf0:	e005      	b.n	800dbfe <etharp_query+0x206>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	623b      	str	r3, [r7, #32]
      pbuf_ref(p);
 800dbf6:	6a3b      	ldr	r3, [r7, #32]
 800dbf8:	0018      	movs	r0, r3
 800dbfa:	f7f7 fde1 	bl	80057c0 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800dbfe:	6a3b      	ldr	r3, [r7, #32]
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d028      	beq.n	800dc56 <etharp_query+0x25e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800dc04:	2317      	movs	r3, #23
 800dc06:	18fb      	adds	r3, r7, r3
 800dc08:	2200      	movs	r2, #0
 800dc0a:	569a      	ldrsb	r2, [r3, r2]
 800dc0c:	491c      	ldr	r1, [pc, #112]	; (800dc80 <etharp_query+0x288>)
 800dc0e:	0013      	movs	r3, r2
 800dc10:	009b      	lsls	r3, r3, #2
 800dc12:	189b      	adds	r3, r3, r2
 800dc14:	009b      	lsls	r3, r3, #2
 800dc16:	585b      	ldr	r3, [r3, r1]
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d00c      	beq.n	800dc36 <etharp_query+0x23e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
 800dc1c:	2317      	movs	r3, #23
 800dc1e:	18fb      	adds	r3, r7, r3
 800dc20:	2200      	movs	r2, #0
 800dc22:	569a      	ldrsb	r2, [r3, r2]
 800dc24:	4916      	ldr	r1, [pc, #88]	; (800dc80 <etharp_query+0x288>)
 800dc26:	0013      	movs	r3, r2
 800dc28:	009b      	lsls	r3, r3, #2
 800dc2a:	189b      	adds	r3, r3, r2
 800dc2c:	009b      	lsls	r3, r3, #2
 800dc2e:	585b      	ldr	r3, [r3, r1]
 800dc30:	0018      	movs	r0, r3
 800dc32:	f7f7 fd37 	bl	80056a4 <pbuf_free>
      }
      arp_table[i].q = p;
 800dc36:	2317      	movs	r3, #23
 800dc38:	18fb      	adds	r3, r7, r3
 800dc3a:	2200      	movs	r2, #0
 800dc3c:	569a      	ldrsb	r2, [r3, r2]
 800dc3e:	4910      	ldr	r1, [pc, #64]	; (800dc80 <etharp_query+0x288>)
 800dc40:	0013      	movs	r3, r2
 800dc42:	009b      	lsls	r3, r3, #2
 800dc44:	189b      	adds	r3, r3, r2
 800dc46:	009b      	lsls	r3, r3, #2
 800dc48:	6a3a      	ldr	r2, [r7, #32]
 800dc4a:	505a      	str	r2, [r3, r1]
      result = ERR_OK;
 800dc4c:	2327      	movs	r3, #39	; 0x27
 800dc4e:	18fb      	adds	r3, r7, r3
 800dc50:	2200      	movs	r2, #0
 800dc52:	701a      	strb	r2, [r3, #0]
 800dc54:	e009      	b.n	800dc6a <etharp_query+0x272>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
 800dc56:	4b09      	ldr	r3, [pc, #36]	; (800dc7c <etharp_query+0x284>)
 800dc58:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800dc5a:	3301      	adds	r3, #1
 800dc5c:	b29a      	uxth	r2, r3
 800dc5e:	4b07      	ldr	r3, [pc, #28]	; (800dc7c <etharp_query+0x284>)
 800dc60:	849a      	strh	r2, [r3, #36]	; 0x24
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800dc62:	2327      	movs	r3, #39	; 0x27
 800dc64:	18fb      	adds	r3, r7, r3
 800dc66:	22ff      	movs	r2, #255	; 0xff
 800dc68:	701a      	strb	r2, [r3, #0]
    }
  }
  return result;
 800dc6a:	2327      	movs	r3, #39	; 0x27
 800dc6c:	18fb      	adds	r3, r7, r3
 800dc6e:	781b      	ldrb	r3, [r3, #0]
 800dc70:	b25b      	sxtb	r3, r3
}
 800dc72:	0018      	movs	r0, r3
 800dc74:	46bd      	mov	sp, r7
 800dc76:	b00a      	add	sp, #40	; 0x28
 800dc78:	bdb0      	pop	{r4, r5, r7, pc}
 800dc7a:	46c0      	nop			; (mov r8, r8)
 800dc7c:	20003158 	.word	0x20003158
 800dc80:	200022c0 	.word	0x200022c0
 800dc84:	20002388 	.word	0x20002388

0800dc88 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800dc88:	b5b0      	push	{r4, r5, r7, lr}
 800dc8a:	b088      	sub	sp, #32
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	60f8      	str	r0, [r7, #12]
 800dc90:	60b9      	str	r1, [r7, #8]
 800dc92:	607a      	str	r2, [r7, #4]
 800dc94:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800dc96:	231f      	movs	r3, #31
 800dc98:	18fb      	adds	r3, r7, r3
 800dc9a:	2200      	movs	r2, #0
 800dc9c:	701a      	strb	r2, [r3, #0]
#endif /* LWIP_AUTOIP */

  LWIP_ASSERT("netif != NULL", netif != NULL);

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_RAW, SIZEOF_ETHARP_PACKET, PBUF_RAM);
 800dc9e:	2200      	movs	r2, #0
 800dca0:	212a      	movs	r1, #42	; 0x2a
 800dca2:	2003      	movs	r0, #3
 800dca4:	f7f7 fa72 	bl	800518c <pbuf_alloc>
 800dca8:	0003      	movs	r3, r0
 800dcaa:	61bb      	str	r3, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800dcac:	69bb      	ldr	r3, [r7, #24]
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d108      	bne.n	800dcc4 <etharp_raw+0x3c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
 800dcb2:	4b4f      	ldr	r3, [pc, #316]	; (800ddf0 <etharp_raw+0x168>)
 800dcb4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800dcb6:	3301      	adds	r3, #1
 800dcb8:	b29a      	uxth	r2, r3
 800dcba:	4b4d      	ldr	r3, [pc, #308]	; (800ddf0 <etharp_raw+0x168>)
 800dcbc:	849a      	strh	r2, [r3, #36]	; 0x24
    return ERR_MEM;
 800dcbe:	2301      	movs	r3, #1
 800dcc0:	425b      	negs	r3, r3
 800dcc2:	e090      	b.n	800dde6 <etharp_raw+0x15e>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
              (p->len >= SIZEOF_ETHARP_PACKET));

  ethhdr = (struct eth_hdr *)p->payload;
 800dcc4:	69bb      	ldr	r3, [r7, #24]
 800dcc6:	685b      	ldr	r3, [r3, #4]
 800dcc8:	617b      	str	r3, [r7, #20]
  hdr = (struct etharp_hdr *)((u8_t*)ethhdr + SIZEOF_ETH_HDR);
 800dcca:	697b      	ldr	r3, [r7, #20]
 800dccc:	330e      	adds	r3, #14
 800dcce:	613b      	str	r3, [r7, #16]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = htons(opcode);
 800dcd0:	233c      	movs	r3, #60	; 0x3c
 800dcd2:	18fb      	adds	r3, r7, r3
 800dcd4:	881b      	ldrh	r3, [r3, #0]
 800dcd6:	0018      	movs	r0, r3
 800dcd8:	f7f6 fc9c 	bl	8004614 <lwip_htons>
 800dcdc:	0003      	movs	r3, r0
 800dcde:	001a      	movs	r2, r3
 800dce0:	693b      	ldr	r3, [r7, #16]
 800dce2:	21ff      	movs	r1, #255	; 0xff
 800dce4:	4011      	ands	r1, r2
 800dce6:	000c      	movs	r4, r1
 800dce8:	7999      	ldrb	r1, [r3, #6]
 800dcea:	2000      	movs	r0, #0
 800dcec:	4001      	ands	r1, r0
 800dcee:	1c08      	adds	r0, r1, #0
 800dcf0:	1c21      	adds	r1, r4, #0
 800dcf2:	4301      	orrs	r1, r0
 800dcf4:	7199      	strb	r1, [r3, #6]
 800dcf6:	0a12      	lsrs	r2, r2, #8
 800dcf8:	b290      	uxth	r0, r2
 800dcfa:	79da      	ldrb	r2, [r3, #7]
 800dcfc:	2100      	movs	r1, #0
 800dcfe:	400a      	ands	r2, r1
 800dd00:	1c11      	adds	r1, r2, #0
 800dd02:	1c02      	adds	r2, r0, #0
 800dd04:	430a      	orrs	r2, r1
 800dd06:	71da      	strb	r2, [r3, #7]
   * 'sender IP address' MUST be sent using link-layer broadcast instead of
   * link-layer unicast. (See RFC3927 Section 2.5, last paragraph) */
  ethdst_hwaddr = ip_addr_islinklocal(ipsrc_addr) ? (u8_t*)(ethbroadcast.addr) : ethdst_addr->addr;
#endif /* LWIP_AUTOIP */
  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 800dd08:	693b      	ldr	r3, [r7, #16]
 800dd0a:	3308      	adds	r3, #8
 800dd0c:	6839      	ldr	r1, [r7, #0]
 800dd0e:	2206      	movs	r2, #6
 800dd10:	0018      	movs	r0, r3
 800dd12:	f001 ffc6 	bl	800fca2 <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 800dd16:	693b      	ldr	r3, [r7, #16]
 800dd18:	3312      	adds	r3, #18
 800dd1a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800dd1c:	2206      	movs	r2, #6
 800dd1e:	0018      	movs	r0, r3
 800dd20:	f001 ffbf 	bl	800fca2 <memcpy>
  /* Write the Ethernet MAC-Addresses */
#if LWIP_AUTOIP
  ETHADDR16_COPY(&ethhdr->dest, ethdst_hwaddr);
#else  /* LWIP_AUTOIP */
  ETHADDR16_COPY(&ethhdr->dest, ethdst_addr);
 800dd24:	697b      	ldr	r3, [r7, #20]
 800dd26:	6879      	ldr	r1, [r7, #4]
 800dd28:	2206      	movs	r2, #6
 800dd2a:	0018      	movs	r0, r3
 800dd2c:	f001 ffb9 	bl	800fca2 <memcpy>
#endif /* LWIP_AUTOIP */
  ETHADDR16_COPY(&ethhdr->src, ethsrc_addr);
 800dd30:	697b      	ldr	r3, [r7, #20]
 800dd32:	3306      	adds	r3, #6
 800dd34:	68b9      	ldr	r1, [r7, #8]
 800dd36:	2206      	movs	r2, #6
 800dd38:	0018      	movs	r0, r3
 800dd3a:	f001 ffb2 	bl	800fca2 <memcpy>
  /* Copy struct ip_addr2 to aligned ip_addr, to support compilers without
   * structure packing. */ 
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 800dd3e:	693b      	ldr	r3, [r7, #16]
 800dd40:	330e      	adds	r3, #14
 800dd42:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800dd44:	2204      	movs	r2, #4
 800dd46:	0018      	movs	r0, r3
 800dd48:	f001 ffab 	bl	800fca2 <memcpy>
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 800dd4c:	693b      	ldr	r3, [r7, #16]
 800dd4e:	3318      	adds	r3, #24
 800dd50:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800dd52:	2204      	movs	r2, #4
 800dd54:	0018      	movs	r0, r3
 800dd56:	f001 ffa4 	bl	800fca2 <memcpy>

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 800dd5a:	693b      	ldr	r3, [r7, #16]
 800dd5c:	781a      	ldrb	r2, [r3, #0]
 800dd5e:	2100      	movs	r1, #0
 800dd60:	400a      	ands	r2, r1
 800dd62:	701a      	strb	r2, [r3, #0]
 800dd64:	785a      	ldrb	r2, [r3, #1]
 800dd66:	2100      	movs	r1, #0
 800dd68:	400a      	ands	r2, r1
 800dd6a:	1c11      	adds	r1, r2, #0
 800dd6c:	2201      	movs	r2, #1
 800dd6e:	430a      	orrs	r2, r1
 800dd70:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800dd72:	693b      	ldr	r3, [r7, #16]
 800dd74:	789a      	ldrb	r2, [r3, #2]
 800dd76:	2100      	movs	r1, #0
 800dd78:	400a      	ands	r2, r1
 800dd7a:	1c11      	adds	r1, r2, #0
 800dd7c:	2208      	movs	r2, #8
 800dd7e:	430a      	orrs	r2, r1
 800dd80:	709a      	strb	r2, [r3, #2]
 800dd82:	78da      	ldrb	r2, [r3, #3]
 800dd84:	2100      	movs	r1, #0
 800dd86:	400a      	ands	r2, r1
 800dd88:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETHARP_HWADDR_LEN;
 800dd8a:	693b      	ldr	r3, [r7, #16]
 800dd8c:	2206      	movs	r2, #6
 800dd8e:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip_addr_t);
 800dd90:	693b      	ldr	r3, [r7, #16]
 800dd92:	2204      	movs	r2, #4
 800dd94:	715a      	strb	r2, [r3, #5]

  ethhdr->type = PP_HTONS(ETHTYPE_ARP);
 800dd96:	697b      	ldr	r3, [r7, #20]
 800dd98:	7b1a      	ldrb	r2, [r3, #12]
 800dd9a:	2100      	movs	r1, #0
 800dd9c:	400a      	ands	r2, r1
 800dd9e:	1c11      	adds	r1, r2, #0
 800dda0:	2208      	movs	r2, #8
 800dda2:	430a      	orrs	r2, r1
 800dda4:	731a      	strb	r2, [r3, #12]
 800dda6:	7b5a      	ldrb	r2, [r3, #13]
 800dda8:	2100      	movs	r1, #0
 800ddaa:	400a      	ands	r2, r1
 800ddac:	1c11      	adds	r1, r2, #0
 800ddae:	2206      	movs	r2, #6
 800ddb0:	430a      	orrs	r2, r1
 800ddb2:	735a      	strb	r2, [r3, #13]
  /* send ARP query */
  result = netif->linkoutput(netif, p);
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	699b      	ldr	r3, [r3, #24]
 800ddb8:	251f      	movs	r5, #31
 800ddba:	197c      	adds	r4, r7, r5
 800ddbc:	69b9      	ldr	r1, [r7, #24]
 800ddbe:	68fa      	ldr	r2, [r7, #12]
 800ddc0:	0010      	movs	r0, r2
 800ddc2:	4798      	blx	r3
 800ddc4:	0003      	movs	r3, r0
 800ddc6:	7023      	strb	r3, [r4, #0]
  ETHARP_STATS_INC(etharp.xmit);
 800ddc8:	4b09      	ldr	r3, [pc, #36]	; (800ddf0 <etharp_raw+0x168>)
 800ddca:	8b1b      	ldrh	r3, [r3, #24]
 800ddcc:	3301      	adds	r3, #1
 800ddce:	b29a      	uxth	r2, r3
 800ddd0:	4b07      	ldr	r3, [pc, #28]	; (800ddf0 <etharp_raw+0x168>)
 800ddd2:	831a      	strh	r2, [r3, #24]
  /* free ARP query packet */
  pbuf_free(p);
 800ddd4:	69bb      	ldr	r3, [r7, #24]
 800ddd6:	0018      	movs	r0, r3
 800ddd8:	f7f7 fc64 	bl	80056a4 <pbuf_free>
  p = NULL;
 800dddc:	2300      	movs	r3, #0
 800ddde:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800dde0:	197b      	adds	r3, r7, r5
 800dde2:	781b      	ldrb	r3, [r3, #0]
 800dde4:	b25b      	sxtb	r3, r3
}
 800dde6:	0018      	movs	r0, r3
 800dde8:	46bd      	mov	sp, r7
 800ddea:	b008      	add	sp, #32
 800ddec:	bdb0      	pop	{r4, r5, r7, pc}
 800ddee:	46c0      	nop			; (mov r8, r8)
 800ddf0:	20003158 	.word	0x20003158

0800ddf4 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, ip_addr_t *ipaddr)
{
 800ddf4:	b5b0      	push	{r4, r5, r7, lr}
 800ddf6:	b086      	sub	sp, #24
 800ddf8:	af04      	add	r7, sp, #16
 800ddfa:	6078      	str	r0, [r7, #4]
 800ddfc:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, &ethbroadcast,
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	3323      	adds	r3, #35	; 0x23
 800de02:	0019      	movs	r1, r3
                    (struct eth_addr *)netif->hwaddr, &netif->ip_addr, &ethzero,
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	3323      	adds	r3, #35	; 0x23
 800de08:	001d      	movs	r5, r3
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, &ethbroadcast,
 800de0e:	4c09      	ldr	r4, [pc, #36]	; (800de34 <etharp_request+0x40>)
 800de10:	6878      	ldr	r0, [r7, #4]
 800de12:	2201      	movs	r2, #1
 800de14:	9203      	str	r2, [sp, #12]
 800de16:	683a      	ldr	r2, [r7, #0]
 800de18:	9202      	str	r2, [sp, #8]
 800de1a:	4a07      	ldr	r2, [pc, #28]	; (800de38 <etharp_request+0x44>)
 800de1c:	9201      	str	r2, [sp, #4]
 800de1e:	9300      	str	r3, [sp, #0]
 800de20:	002b      	movs	r3, r5
 800de22:	0022      	movs	r2, r4
 800de24:	f7ff ff30 	bl	800dc88 <etharp_raw>
 800de28:	0003      	movs	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800de2a:	0018      	movs	r0, r3
 800de2c:	46bd      	mov	sp, r7
 800de2e:	b002      	add	sp, #8
 800de30:	bdb0      	pop	{r4, r5, r7, pc}
 800de32:	46c0      	nop			; (mov r8, r8)
 800de34:	0800fdc8 	.word	0x0800fdc8
 800de38:	0800fdd0 	.word	0x0800fdd0

0800de3c <ethernet_input>:
 * @param p the recevied packet, p->payload pointing to the ethernet header
 * @param netif the network interface on which the packet was received
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800de3c:	b580      	push	{r7, lr}
 800de3e:	b086      	sub	sp, #24
 800de40:	af00      	add	r7, sp, #0
 800de42:	6078      	str	r0, [r7, #4]
 800de44:	6039      	str	r1, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
 800de46:	2316      	movs	r3, #22
 800de48:	18fb      	adds	r3, r7, r3
 800de4a:	220e      	movs	r2, #14
 800de4c:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	895b      	ldrh	r3, [r3, #10]
 800de52:	2b0e      	cmp	r3, #14
 800de54:	d80c      	bhi.n	800de70 <ethernet_input+0x34>
    /* a packet with only an ethernet header (or less) is not valid for us */
    ETHARP_STATS_INC(etharp.proterr);
 800de56:	4b49      	ldr	r3, [pc, #292]	; (800df7c <ethernet_input+0x140>)
 800de58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800de5a:	3301      	adds	r3, #1
 800de5c:	b29a      	uxth	r2, r3
 800de5e:	4b47      	ldr	r3, [pc, #284]	; (800df7c <ethernet_input+0x140>)
 800de60:	851a      	strh	r2, [r3, #40]	; 0x28
    ETHARP_STATS_INC(etharp.drop);
 800de62:	4b46      	ldr	r3, [pc, #280]	; (800df7c <ethernet_input+0x140>)
 800de64:	8bdb      	ldrh	r3, [r3, #30]
 800de66:	3301      	adds	r3, #1
 800de68:	b29a      	uxth	r2, r3
 800de6a:	4b44      	ldr	r3, [pc, #272]	; (800df7c <ethernet_input+0x140>)
 800de6c:	83da      	strh	r2, [r3, #30]
    goto free_and_return;
 800de6e:	e07c      	b.n	800df6a <ethernet_input+0x12e>
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	685b      	ldr	r3, [r3, #4]
 800de74:	613b      	str	r3, [r7, #16]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0], (unsigned)ethhdr->src.addr[1], (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3], (unsigned)ethhdr->src.addr[4], (unsigned)ethhdr->src.addr[5],
     (unsigned)htons(ethhdr->type)));

  type = ethhdr->type;
 800de76:	230e      	movs	r3, #14
 800de78:	18fa      	adds	r2, r7, r3
 800de7a:	693b      	ldr	r3, [r7, #16]
 800de7c:	7b19      	ldrb	r1, [r3, #12]
 800de7e:	7b5b      	ldrb	r3, [r3, #13]
 800de80:	021b      	lsls	r3, r3, #8
 800de82:	430b      	orrs	r3, r1
 800de84:	8013      	strh	r3, [r2, #0]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800de86:	693b      	ldr	r3, [r7, #16]
 800de88:	781b      	ldrb	r3, [r3, #0]
 800de8a:	001a      	movs	r2, r3
 800de8c:	2301      	movs	r3, #1
 800de8e:	4013      	ands	r3, r2
 800de90:	d022      	beq.n	800ded8 <ethernet_input+0x9c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_MULTICAST_ADDR_0) {
 800de92:	693b      	ldr	r3, [r7, #16]
 800de94:	781b      	ldrb	r3, [r3, #0]
 800de96:	2b01      	cmp	r3, #1
 800de98:	d10f      	bne.n	800deba <ethernet_input+0x7e>
      if ((ethhdr->dest.addr[1] == LL_MULTICAST_ADDR_1) &&
 800de9a:	693b      	ldr	r3, [r7, #16]
 800de9c:	785b      	ldrb	r3, [r3, #1]
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d11a      	bne.n	800ded8 <ethernet_input+0x9c>
          (ethhdr->dest.addr[2] == LL_MULTICAST_ADDR_2)) {
 800dea2:	693b      	ldr	r3, [r7, #16]
 800dea4:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_MULTICAST_ADDR_1) &&
 800dea6:	2b5e      	cmp	r3, #94	; 0x5e
 800dea8:	d116      	bne.n	800ded8 <ethernet_input+0x9c>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	7b5b      	ldrb	r3, [r3, #13]
 800deae:	2210      	movs	r2, #16
 800deb0:	4313      	orrs	r3, r2
 800deb2:	b2da      	uxtb	r2, r3
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	735a      	strb	r2, [r3, #13]
 800deb8:	e00e      	b.n	800ded8 <ethernet_input+0x9c>
      }
    } else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800deba:	693b      	ldr	r3, [r7, #16]
 800debc:	4930      	ldr	r1, [pc, #192]	; (800df80 <ethernet_input+0x144>)
 800debe:	2206      	movs	r2, #6
 800dec0:	0018      	movs	r0, r3
 800dec2:	f001 fedf 	bl	800fc84 <memcmp>
 800dec6:	1e03      	subs	r3, r0, #0
 800dec8:	d106      	bne.n	800ded8 <ethernet_input+0x9c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	7b5b      	ldrb	r3, [r3, #13]
 800dece:	2208      	movs	r2, #8
 800ded0:	4313      	orrs	r3, r2
 800ded2:	b2da      	uxtb	r2, r3
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800ded8:	230e      	movs	r3, #14
 800deda:	18fb      	adds	r3, r7, r3
 800dedc:	881b      	ldrh	r3, [r3, #0]
 800dede:	2b08      	cmp	r3, #8
 800dee0:	d004      	beq.n	800deec <ethernet_input+0xb0>
 800dee2:	22c1      	movs	r2, #193	; 0xc1
 800dee4:	00d2      	lsls	r2, r2, #3
 800dee6:	4293      	cmp	r3, r2
 800dee8:	d01b      	beq.n	800df22 <ethernet_input+0xe6>
 800deea:	e02a      	b.n	800df42 <ethernet_input+0x106>
#if LWIP_ARP
    /* IP packet? */
    case PP_HTONS(ETHTYPE_IP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800deec:	683b      	ldr	r3, [r7, #0]
 800deee:	2229      	movs	r2, #41	; 0x29
 800def0:	5c9b      	ldrb	r3, [r3, r2]
 800def2:	001a      	movs	r2, r3
 800def4:	2320      	movs	r3, #32
 800def6:	4013      	ands	r3, r2
 800def8:	d032      	beq.n	800df60 <ethernet_input+0x124>
#if ETHARP_TRUST_IP_MAC
      /* update ARP table */
      etharp_ip_input(netif, p);
#endif /* ETHARP_TRUST_IP_MAC */
      /* skip Ethernet header */
      if(pbuf_header(p, -ip_hdr_offset)) {
 800defa:	2316      	movs	r3, #22
 800defc:	18fb      	adds	r3, r7, r3
 800defe:	881b      	ldrh	r3, [r3, #0]
 800df00:	425b      	negs	r3, r3
 800df02:	b29b      	uxth	r3, r3
 800df04:	b21a      	sxth	r2, r3
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	0011      	movs	r1, r2
 800df0a:	0018      	movs	r0, r3
 800df0c:	f7f7 fb43 	bl	8005596 <pbuf_header>
 800df10:	1e03      	subs	r3, r0, #0
 800df12:	d127      	bne.n	800df64 <ethernet_input+0x128>
        LWIP_ASSERT("Can't move over header in packet", 0);
        goto free_and_return;
      } else {
        /* pass to IP layer */
        ip_input(p, netif);
 800df14:	683a      	ldr	r2, [r7, #0]
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	0011      	movs	r1, r2
 800df1a:	0018      	movs	r0, r3
 800df1c:	f7fd fcd8 	bl	800b8d0 <ip_input>
      }
      break;
 800df20:	e01c      	b.n	800df5c <ethernet_input+0x120>
      
    case PP_HTONS(ETHTYPE_ARP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800df22:	683b      	ldr	r3, [r7, #0]
 800df24:	2229      	movs	r2, #41	; 0x29
 800df26:	5c9b      	ldrb	r3, [r3, r2]
 800df28:	001a      	movs	r2, r3
 800df2a:	2320      	movs	r3, #32
 800df2c:	4013      	ands	r3, r2
 800df2e:	d01b      	beq.n	800df68 <ethernet_input+0x12c>
        goto free_and_return;
      }
      /* pass p to ARP module */
      etharp_arp_input(netif, (struct eth_addr*)(netif->hwaddr), p);
 800df30:	683b      	ldr	r3, [r7, #0]
 800df32:	3323      	adds	r3, #35	; 0x23
 800df34:	0019      	movs	r1, r3
 800df36:	687a      	ldr	r2, [r7, #4]
 800df38:	683b      	ldr	r3, [r7, #0]
 800df3a:	0018      	movs	r0, r3
 800df3c:	f7ff fb0c 	bl	800d558 <etharp_arp_input>
      break;
 800df40:	e00c      	b.n	800df5c <ethernet_input+0x120>
      pppoe_data_input(netif, p);
      break;
#endif /* PPPOE_SUPPORT */

    default:
      ETHARP_STATS_INC(etharp.proterr);
 800df42:	4b0e      	ldr	r3, [pc, #56]	; (800df7c <ethernet_input+0x140>)
 800df44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800df46:	3301      	adds	r3, #1
 800df48:	b29a      	uxth	r2, r3
 800df4a:	4b0c      	ldr	r3, [pc, #48]	; (800df7c <ethernet_input+0x140>)
 800df4c:	851a      	strh	r2, [r3, #40]	; 0x28
      ETHARP_STATS_INC(etharp.drop);
 800df4e:	4b0b      	ldr	r3, [pc, #44]	; (800df7c <ethernet_input+0x140>)
 800df50:	8bdb      	ldrh	r3, [r3, #30]
 800df52:	3301      	adds	r3, #1
 800df54:	b29a      	uxth	r2, r3
 800df56:	4b09      	ldr	r3, [pc, #36]	; (800df7c <ethernet_input+0x140>)
 800df58:	83da      	strh	r2, [r3, #30]
      goto free_and_return;
 800df5a:	e006      	b.n	800df6a <ethernet_input+0x12e>
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800df5c:	2300      	movs	r3, #0
 800df5e:	e009      	b.n	800df74 <ethernet_input+0x138>
        goto free_and_return;
 800df60:	46c0      	nop			; (mov r8, r8)
 800df62:	e002      	b.n	800df6a <ethernet_input+0x12e>
        goto free_and_return;
 800df64:	46c0      	nop			; (mov r8, r8)
 800df66:	e000      	b.n	800df6a <ethernet_input+0x12e>
        goto free_and_return;
 800df68:	46c0      	nop			; (mov r8, r8)

free_and_return:
  pbuf_free(p);
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	0018      	movs	r0, r3
 800df6e:	f7f7 fb99 	bl	80056a4 <pbuf_free>
  return ERR_OK;
 800df72:	2300      	movs	r3, #0
}
 800df74:	0018      	movs	r0, r3
 800df76:	46bd      	mov	sp, r7
 800df78:	b006      	add	sp, #24
 800df7a:	bd80      	pop	{r7, pc}
 800df7c:	20003158 	.word	0x20003158
 800df80:	0800fdc8 	.word	0x0800fdc8

0800df84 <usb_ecm_recv_callback>:
    entries               /* entries */
};

/* this function is called by usbd_ecm.c during an ISR; it must not block */
void usb_ecm_recv_callback(const uint8_t *data, int size)
{
 800df84:	b580      	push	{r7, lr}
 800df86:	b082      	sub	sp, #8
 800df88:	af00      	add	r7, sp, #0
 800df8a:	6078      	str	r0, [r7, #4]
 800df8c:	6039      	str	r1, [r7, #0]
  if (received_frame)
 800df8e:	4b13      	ldr	r3, [pc, #76]	; (800dfdc <usb_ecm_recv_callback+0x58>)
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	2b00      	cmp	r3, #0
 800df94:	d11e      	bne.n	800dfd4 <usb_ecm_recv_callback+0x50>
    return;

  received_frame = pbuf_alloc(PBUF_RAW, size, PBUF_POOL);
 800df96:	683b      	ldr	r3, [r7, #0]
 800df98:	b29b      	uxth	r3, r3
 800df9a:	2203      	movs	r2, #3
 800df9c:	0019      	movs	r1, r3
 800df9e:	2003      	movs	r0, #3
 800dfa0:	f7f7 f8f4 	bl	800518c <pbuf_alloc>
 800dfa4:	0002      	movs	r2, r0
 800dfa6:	4b0d      	ldr	r3, [pc, #52]	; (800dfdc <usb_ecm_recv_callback+0x58>)
 800dfa8:	601a      	str	r2, [r3, #0]
  if (!received_frame)
 800dfaa:	4b0c      	ldr	r3, [pc, #48]	; (800dfdc <usb_ecm_recv_callback+0x58>)
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d102      	bne.n	800dfb8 <usb_ecm_recv_callback+0x34>
  {
    usb_ecm_recv_renew();
 800dfb2:	f001 fbb9 	bl	800f728 <usb_ecm_recv_renew>
    return;
 800dfb6:	e00e      	b.n	800dfd6 <usb_ecm_recv_callback+0x52>
  }

  memcpy(received_frame->payload, data, size);
 800dfb8:	4b08      	ldr	r3, [pc, #32]	; (800dfdc <usb_ecm_recv_callback+0x58>)
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	685b      	ldr	r3, [r3, #4]
 800dfbe:	683a      	ldr	r2, [r7, #0]
 800dfc0:	6879      	ldr	r1, [r7, #4]
 800dfc2:	0018      	movs	r0, r3
 800dfc4:	f001 fe6d 	bl	800fca2 <memcpy>
  received_frame->len = size;
 800dfc8:	4b04      	ldr	r3, [pc, #16]	; (800dfdc <usb_ecm_recv_callback+0x58>)
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	683a      	ldr	r2, [r7, #0]
 800dfce:	b292      	uxth	r2, r2
 800dfd0:	815a      	strh	r2, [r3, #10]
 800dfd2:	e000      	b.n	800dfd6 <usb_ecm_recv_callback+0x52>
    return;
 800dfd4:	46c0      	nop			; (mov r8, r8)
}
 800dfd6:	46bd      	mov	sp, r7
 800dfd8:	b002      	add	sp, #8
 800dfda:	bd80      	pop	{r7, pc}
 800dfdc:	200023c0 	.word	0x200023c0

0800dfe0 <sys_now>:

uint32_t sys_now()
{
 800dfe0:	b580      	push	{r7, lr}
 800dfe2:	af00      	add	r7, sp, #0
    return (uint32_t)mtime();
 800dfe4:	f000 f92a 	bl	800e23c <mtime>
 800dfe8:	0003      	movs	r3, r0
}
 800dfea:	0018      	movs	r0, r3
 800dfec:	46bd      	mov	sp, r7
 800dfee:	bd80      	pop	{r7, pc}

0800dff0 <tcp_timer_proc>:

TIMER_PROC(tcp_timer, TCP_TMR_INTERVAL, 1, NULL)
{
 800dff0:	b580      	push	{r7, lr}
 800dff2:	b082      	sub	sp, #8
 800dff4:	af00      	add	r7, sp, #0
 800dff6:	6078      	str	r0, [r7, #4]
    tcp_tmr();
 800dff8:	f7f7 fddc 	bl	8005bb4 <tcp_tmr>
}
 800dffc:	46c0      	nop			; (mov r8, r8)
 800dffe:	46bd      	mov	sp, r7
 800e000:	b002      	add	sp, #8
 800e002:	bd80      	pop	{r7, pc}

0800e004 <output_fn>:

err_t output_fn(struct netif *netif, struct pbuf *p, ip_addr_t *ipaddr)
{
 800e004:	b580      	push	{r7, lr}
 800e006:	b084      	sub	sp, #16
 800e008:	af00      	add	r7, sp, #0
 800e00a:	60f8      	str	r0, [r7, #12]
 800e00c:	60b9      	str	r1, [r7, #8]
 800e00e:	607a      	str	r2, [r7, #4]
    return etharp_output(netif, p, ipaddr);
 800e010:	687a      	ldr	r2, [r7, #4]
 800e012:	68b9      	ldr	r1, [r7, #8]
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	0018      	movs	r0, r3
 800e018:	f7ff fbfe 	bl	800d818 <etharp_output>
 800e01c:	0003      	movs	r3, r0
}
 800e01e:	0018      	movs	r0, r3
 800e020:	46bd      	mov	sp, r7
 800e022:	b004      	add	sp, #16
 800e024:	bd80      	pop	{r7, pc}

0800e026 <linkoutput_fn>:

err_t linkoutput_fn(struct netif *netif, struct pbuf *p)
{
 800e026:	b580      	push	{r7, lr}
 800e028:	b084      	sub	sp, #16
 800e02a:	af00      	add	r7, sp, #0
 800e02c:	6078      	str	r0, [r7, #4]
 800e02e:	6039      	str	r1, [r7, #0]
    int i;
    for (i = 0; i < 200; i++)
 800e030:	2300      	movs	r3, #0
 800e032:	60fb      	str	r3, [r7, #12]
 800e034:	e009      	b.n	800e04a <linkoutput_fn+0x24>
    {
        if (usb_ecm_can_xmit()) goto ready;
 800e036:	f001 fd31 	bl	800fa9c <usb_ecm_can_xmit>
 800e03a:	1e03      	subs	r3, r0, #0
 800e03c:	d10b      	bne.n	800e056 <linkoutput_fn+0x30>
        msleep(1);
 800e03e:	2001      	movs	r0, #1
 800e040:	f000 f904 	bl	800e24c <msleep>
    for (i = 0; i < 200; i++)
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	3301      	adds	r3, #1
 800e048:	60fb      	str	r3, [r7, #12]
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	2bc7      	cmp	r3, #199	; 0xc7
 800e04e:	ddf2      	ble.n	800e036 <linkoutput_fn+0x10>
    }
    return ERR_USE;
 800e050:	2308      	movs	r3, #8
 800e052:	425b      	negs	r3, r3
 800e054:	e005      	b.n	800e062 <linkoutput_fn+0x3c>
        if (usb_ecm_can_xmit()) goto ready;
 800e056:	46c0      	nop			; (mov r8, r8)
ready:
    usb_ecm_xmit_packet(p);
 800e058:	683b      	ldr	r3, [r7, #0]
 800e05a:	0018      	movs	r0, r3
 800e05c:	f001 fd30 	bl	800fac0 <usb_ecm_xmit_packet>
    return ERR_OK;
 800e060:	2300      	movs	r3, #0
}
 800e062:	0018      	movs	r0, r3
 800e064:	46bd      	mov	sp, r7
 800e066:	b004      	add	sp, #16
 800e068:	bd80      	pop	{r7, pc}
	...

0800e06c <netif_init_cb>:

err_t netif_init_cb(struct netif *netif)
{
 800e06c:	b580      	push	{r7, lr}
 800e06e:	b082      	sub	sp, #8
 800e070:	af00      	add	r7, sp, #0
 800e072:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("netif != NULL", (netif != NULL));
    netif->mtu = ECM_MTU;
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	22fa      	movs	r2, #250	; 0xfa
 800e078:	0052      	lsls	r2, r2, #1
 800e07a:	841a      	strh	r2, [r3, #32]
    netif->flags = NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP | NETIF_FLAG_LINK_UP | NETIF_FLAG_UP;
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	2229      	movs	r2, #41	; 0x29
 800e080:	2133      	movs	r1, #51	; 0x33
 800e082:	5499      	strb	r1, [r3, r2]
    netif->state = NULL;
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	2200      	movs	r2, #0
 800e088:	61da      	str	r2, [r3, #28]
    netif->name[0] = 'E';
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	222a      	movs	r2, #42	; 0x2a
 800e08e:	2145      	movs	r1, #69	; 0x45
 800e090:	5499      	strb	r1, [r3, r2]
    netif->name[1] = 'X';
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	222b      	movs	r2, #43	; 0x2b
 800e096:	2158      	movs	r1, #88	; 0x58
 800e098:	5499      	strb	r1, [r3, r2]
    netif->linkoutput = linkoutput_fn;
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	4a04      	ldr	r2, [pc, #16]	; (800e0b0 <netif_init_cb+0x44>)
 800e09e:	619a      	str	r2, [r3, #24]
    netif->output = output_fn;
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	4a04      	ldr	r2, [pc, #16]	; (800e0b4 <netif_init_cb+0x48>)
 800e0a4:	615a      	str	r2, [r3, #20]
    return ERR_OK;
 800e0a6:	2300      	movs	r3, #0
}
 800e0a8:	0018      	movs	r0, r3
 800e0aa:	46bd      	mov	sp, r7
 800e0ac:	b002      	add	sp, #8
 800e0ae:	bd80      	pop	{r7, pc}
 800e0b0:	0800e027 	.word	0x0800e027
 800e0b4:	0800e005 	.word	0x0800e005

0800e0b8 <init_lwip>:

#define PADDR(ptr) ((ip_addr_t *)ptr)

static void init_lwip()
{
 800e0b8:	b590      	push	{r4, r7, lr}
 800e0ba:	b087      	sub	sp, #28
 800e0bc:	af04      	add	r7, sp, #16
    struct netif  *netif = &netif_data;
 800e0be:	4b16      	ldr	r3, [pc, #88]	; (800e118 <init_lwip+0x60>)
 800e0c0:	607b      	str	r3, [r7, #4]

    lwip_init();
 800e0c2:	f7f6 faf3 	bl	80046ac <lwip_init>
    netif->hwaddr_len = 6;
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	2222      	movs	r2, #34	; 0x22
 800e0ca:	2106      	movs	r1, #6
 800e0cc:	5499      	strb	r1, [r3, r2]
    memcpy(netif->hwaddr, hwaddr, 6);
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	3323      	adds	r3, #35	; 0x23
 800e0d2:	001a      	movs	r2, r3
 800e0d4:	4b11      	ldr	r3, [pc, #68]	; (800e11c <init_lwip+0x64>)
 800e0d6:	0010      	movs	r0, r2
 800e0d8:	0019      	movs	r1, r3
 800e0da:	2306      	movs	r3, #6
 800e0dc:	001a      	movs	r2, r3
 800e0de:	f001 fde0 	bl	800fca2 <memcpy>

    netif = netif_add(netif, PADDR(ipaddr), PADDR(netmask), PADDR(gateway), NULL, netif_init_cb, ip_input);
 800e0e2:	4c0f      	ldr	r4, [pc, #60]	; (800e120 <init_lwip+0x68>)
 800e0e4:	4a0f      	ldr	r2, [pc, #60]	; (800e124 <init_lwip+0x6c>)
 800e0e6:	4910      	ldr	r1, [pc, #64]	; (800e128 <init_lwip+0x70>)
 800e0e8:	6878      	ldr	r0, [r7, #4]
 800e0ea:	4b10      	ldr	r3, [pc, #64]	; (800e12c <init_lwip+0x74>)
 800e0ec:	9302      	str	r3, [sp, #8]
 800e0ee:	4b10      	ldr	r3, [pc, #64]	; (800e130 <init_lwip+0x78>)
 800e0f0:	9301      	str	r3, [sp, #4]
 800e0f2:	2300      	movs	r3, #0
 800e0f4:	9300      	str	r3, [sp, #0]
 800e0f6:	0023      	movs	r3, r4
 800e0f8:	f7f6 ff52 	bl	8004fa0 <netif_add>
 800e0fc:	0003      	movs	r3, r0
 800e0fe:	607b      	str	r3, [r7, #4]
    netif_set_default(netif);
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	0018      	movs	r0, r3
 800e104:	f7f7 f82a 	bl	800515c <netif_set_default>

    stmr_add(&tcp_timer);
 800e108:	4b0a      	ldr	r3, [pc, #40]	; (800e134 <init_lwip+0x7c>)
 800e10a:	0018      	movs	r0, r3
 800e10c:	f000 f8f2 	bl	800e2f4 <stmr_add>
}
 800e110:	46c0      	nop			; (mov r8, r8)
 800e112:	46bd      	mov	sp, r7
 800e114:	b003      	add	sp, #12
 800e116:	bd90      	pop	{r4, r7, pc}
 800e118:	2000238c 	.word	0x2000238c
 800e11c:	20000018 	.word	0x20000018
 800e120:	200023bc 	.word	0x200023bc
 800e124:	20000024 	.word	0x20000024
 800e128:	20000020 	.word	0x20000020
 800e12c:	0800b8d1 	.word	0x0800b8d1
 800e130:	0800e06d 	.word	0x0800e06d
 800e134:	2000007c 	.word	0x2000007c

0800e138 <dns_query_proc>:


bool dns_query_proc(const char *name, ip_addr_t *addr)
{
 800e138:	b580      	push	{r7, lr}
 800e13a:	b082      	sub	sp, #8
 800e13c:	af00      	add	r7, sp, #0
 800e13e:	6078      	str	r0, [r7, #4]
 800e140:	6039      	str	r1, [r7, #0]
    if (strcmp(name, "run.stm") == 0 || strcmp(name, "www.run.stm") == 0)
 800e142:	4a0d      	ldr	r2, [pc, #52]	; (800e178 <dns_query_proc+0x40>)
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	0011      	movs	r1, r2
 800e148:	0018      	movs	r0, r3
 800e14a:	f7f1 ffdd 	bl	8000108 <strcmp>
 800e14e:	1e03      	subs	r3, r0, #0
 800e150:	d007      	beq.n	800e162 <dns_query_proc+0x2a>
 800e152:	4a0a      	ldr	r2, [pc, #40]	; (800e17c <dns_query_proc+0x44>)
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	0011      	movs	r1, r2
 800e158:	0018      	movs	r0, r3
 800e15a:	f7f1 ffd5 	bl	8000108 <strcmp>
 800e15e:	1e03      	subs	r3, r0, #0
 800e160:	d105      	bne.n	800e16e <dns_query_proc+0x36>
    {
        addr->addr = *(uint32_t *)ipaddr;
 800e162:	4b07      	ldr	r3, [pc, #28]	; (800e180 <dns_query_proc+0x48>)
 800e164:	681a      	ldr	r2, [r3, #0]
 800e166:	683b      	ldr	r3, [r7, #0]
 800e168:	601a      	str	r2, [r3, #0]
        return true;
 800e16a:	2301      	movs	r3, #1
 800e16c:	e000      	b.n	800e170 <dns_query_proc+0x38>
    }
    return false;
 800e16e:	2300      	movs	r3, #0
}
 800e170:	0018      	movs	r0, r3
 800e172:	46bd      	mov	sp, r7
 800e174:	b002      	add	sp, #8
 800e176:	bd80      	pop	{r7, pc}
 800e178:	0800fd08 	.word	0x0800fd08
 800e17c:	0800fd10 	.word	0x0800fd10
 800e180:	20000020 	.word	0x20000020

0800e184 <service_traffic>:

//    return res;
//}

static void service_traffic(void)
{
 800e184:	b580      	push	{r7, lr}
 800e186:	b082      	sub	sp, #8
 800e188:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800e18a:	b672      	cpsid	i
  struct pbuf *frame;

  /* retrieve and clear var set by usb_ecm_recv_callback() in ISR */
  __disable_irq();
  frame = received_frame;
 800e18c:	4b0d      	ldr	r3, [pc, #52]	; (800e1c4 <service_traffic+0x40>)
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	607b      	str	r3, [r7, #4]
  received_frame = NULL;
 800e192:	4b0c      	ldr	r3, [pc, #48]	; (800e1c4 <service_traffic+0x40>)
 800e194:	2200      	movs	r2, #0
 800e196:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800e198:	b662      	cpsie	i
  __enable_irq();

  if (!frame)
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d00c      	beq.n	800e1ba <service_traffic+0x36>
    return; /* no packet was received */

  /* packet was received, so handle it */
  ethernet_input(frame, &netif_data);
 800e1a0:	4a09      	ldr	r2, [pc, #36]	; (800e1c8 <service_traffic+0x44>)
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	0011      	movs	r1, r2
 800e1a6:	0018      	movs	r0, r3
 800e1a8:	f7ff fe48 	bl	800de3c <ethernet_input>
  pbuf_free(frame);
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	0018      	movs	r0, r3
 800e1b0:	f7f7 fa78 	bl	80056a4 <pbuf_free>

  /* tell usbd_ecm.c it is OK to receive another packet */
  usb_ecm_recv_renew();
 800e1b4:	f001 fab8 	bl	800f728 <usb_ecm_recv_renew>
 800e1b8:	e000      	b.n	800e1bc <service_traffic+0x38>
    return; /* no packet was received */
 800e1ba:	46c0      	nop			; (mov r8, r8)
}
 800e1bc:	46bd      	mov	sp, r7
 800e1be:	b002      	add	sp, #8
 800e1c0:	bd80      	pop	{r7, pc}
 800e1c2:	46c0      	nop			; (mov r8, r8)
 800e1c4:	200023c0 	.word	0x200023c0
 800e1c8:	2000238c 	.word	0x2000238c

0800e1cc <ecm_main_init>:

void ecm_main_init()
{
 800e1cc:	b580      	push	{r7, lr}
 800e1ce:	af00      	add	r7, sp, #0
	  time_init();
 800e1d0:	f000 f82f 	bl	800e232 <time_init>
	  init_lwip();
 800e1d4:	f7ff ff70 	bl	800e0b8 <init_lwip>

	  while (!netif_is_up(&netif_data));
 800e1d8:	46c0      	nop			; (mov r8, r8)
 800e1da:	4b0d      	ldr	r3, [pc, #52]	; (800e210 <ecm_main_init+0x44>)
 800e1dc:	2229      	movs	r2, #41	; 0x29
 800e1de:	5c9b      	ldrb	r3, [r3, r2]
 800e1e0:	001a      	movs	r2, r3
 800e1e2:	2301      	movs	r3, #1
 800e1e4:	4013      	ands	r3, r2
 800e1e6:	d0f8      	beq.n	800e1da <ecm_main_init+0xe>

	  while (dhserv_init(&dhcp_config) != ERR_OK);
 800e1e8:	46c0      	nop			; (mov r8, r8)
 800e1ea:	4b0a      	ldr	r3, [pc, #40]	; (800e214 <ecm_main_init+0x48>)
 800e1ec:	0018      	movs	r0, r3
 800e1ee:	f7f5 ff57 	bl	80040a0 <dhserv_init>
 800e1f2:	1e03      	subs	r3, r0, #0
 800e1f4:	d1f9      	bne.n	800e1ea <ecm_main_init+0x1e>

	  while (dnserv_init(PADDR(ipaddr), 53, dns_query_proc) != ERR_OK);
 800e1f6:	46c0      	nop			; (mov r8, r8)
 800e1f8:	4a07      	ldr	r2, [pc, #28]	; (800e218 <ecm_main_init+0x4c>)
 800e1fa:	4b08      	ldr	r3, [pc, #32]	; (800e21c <ecm_main_init+0x50>)
 800e1fc:	2135      	movs	r1, #53	; 0x35
 800e1fe:	0018      	movs	r0, r3
 800e200:	f7f6 f9ac 	bl	800455c <dnserv_init>
 800e204:	1e03      	subs	r3, r0, #0
 800e206:	d1f7      	bne.n	800e1f8 <ecm_main_init+0x2c>

	  //http_set_cgi_handlers(cgi_uri_table, sizeof(cgi_uri_table) / sizeof(*cgi_uri_table));
	  //http_set_ssi_handler(ssi_handler, ssi_tags_table, sizeof(ssi_tags_table) / sizeof(*ssi_tags_table));
	 // httpd_init();
}
 800e208:	46c0      	nop			; (mov r8, r8)
 800e20a:	46bd      	mov	sp, r7
 800e20c:	bd80      	pop	{r7, pc}
 800e20e:	46c0      	nop			; (mov r8, r8)
 800e210:	2000238c 	.word	0x2000238c
 800e214:	20000064 	.word	0x20000064
 800e218:	0800e139 	.word	0x0800e139
 800e21c:	20000020 	.word	0x20000020

0800e220 <ecm_main_loop>:

void ecm_main_loop()
{
 800e220:	b580      	push	{r7, lr}
 800e222:	af00      	add	r7, sp, #0
	service_traffic();
 800e224:	f7ff ffae 	bl	800e184 <service_traffic>
	stmr();
 800e228:	f000 f82e 	bl	800e288 <stmr>
}
 800e22c:	46c0      	nop			; (mov r8, r8)
 800e22e:	46bd      	mov	sp, r7
 800e230:	bd80      	pop	{r7, pc}

0800e232 <time_init>:

volatile uint32_t sysTimeTicks;
volatile uint32_t sysTimeDelayCounter;

void time_init(void)
{
 800e232:	b580      	push	{r7, lr}
 800e234:	af00      	add	r7, sp, #0
//    if (SysTick_Config(SystemCoreClock / 1000))
//        while (1) {} /* Capture error */
}
 800e236:	46c0      	nop			; (mov r8, r8)
 800e238:	46bd      	mov	sp, r7
 800e23a:	bd80      	pop	{r7, pc}

0800e23c <mtime>:
  //  msAddition++; /* +1 ms */
//}


uint32_t mtime(void)
{
 800e23c:	b580      	push	{r7, lr}
 800e23e:	af00      	add	r7, sp, #0
    res = msAddition;
    ctrl = SysTick->CTRL;
    if (ctrl & SysTick_CTRL_COUNTFLAG_Msk)
        goto read;
	*/
    return HAL_GetTick();
 800e240:	f7f2 fa40 	bl	80006c4 <HAL_GetTick>
 800e244:	0003      	movs	r3, r0
}
 800e246:	0018      	movs	r0, r3
 800e248:	46bd      	mov	sp, r7
 800e24a:	bd80      	pop	{r7, pc}

0800e24c <msleep>:

void msleep(int ms)
{
 800e24c:	b580      	push	{r7, lr}
 800e24e:	b084      	sub	sp, #16
 800e250:	af00      	add	r7, sp, #0
 800e252:	6078      	str	r0, [r7, #4]
    uint32_t t = mtime();
 800e254:	f7ff fff2 	bl	800e23c <mtime>
 800e258:	0003      	movs	r3, r0
 800e25a:	60fb      	str	r3, [r7, #12]
    while (true)
    {
        uint32_t t1 = mtime();
 800e25c:	f7ff ffee 	bl	800e23c <mtime>
 800e260:	0003      	movs	r3, r0
 800e262:	60bb      	str	r3, [r7, #8]
        if (t1 - t >= ms) break;
 800e264:	68ba      	ldr	r2, [r7, #8]
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	1ad2      	subs	r2, r2, r3
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	429a      	cmp	r2, r3
 800e26e:	d204      	bcs.n	800e27a <msleep+0x2e>
        if (t1 < t) break; /* overflow */
 800e270:	68ba      	ldr	r2, [r7, #8]
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	429a      	cmp	r2, r3
 800e276:	d302      	bcc.n	800e27e <msleep+0x32>
    {
 800e278:	e7f0      	b.n	800e25c <msleep+0x10>
        if (t1 - t >= ms) break;
 800e27a:	46c0      	nop			; (mov r8, r8)
 800e27c:	e000      	b.n	800e280 <msleep+0x34>
        if (t1 < t) break; /* overflow */
 800e27e:	46c0      	nop			; (mov r8, r8)
    }
}
 800e280:	46c0      	nop			; (mov r8, r8)
 800e282:	46bd      	mov	sp, r7
 800e284:	b004      	add	sp, #16
 800e286:	bd80      	pop	{r7, pc}

0800e288 <stmr>:

static stmr_t *stmrs = NULL;

void stmr(void)
{
 800e288:	b580      	push	{r7, lr}
 800e28a:	b084      	sub	sp, #16
 800e28c:	af00      	add	r7, sp, #0
    stmr_t *tmr;
    uint32_t time;
    time = mtime();
 800e28e:	f7ff ffd5 	bl	800e23c <mtime>
 800e292:	0003      	movs	r3, r0
 800e294:	60bb      	str	r3, [r7, #8]
    tmr = stmrs;
 800e296:	4b16      	ldr	r3, [pc, #88]	; (800e2f0 <stmr+0x68>)
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	60fb      	str	r3, [r7, #12]
    while (tmr != NULL)
 800e29c:	e021      	b.n	800e2e2 <stmr+0x5a>
    {
        stmr_t *t;
        uint32_t elapsed;
        t = tmr;
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	607b      	str	r3, [r7, #4]
        tmr = tmr->next;
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	695b      	ldr	r3, [r3, #20]
 800e2a6:	60fb      	str	r3, [r7, #12]
        if ((t->flags & STMR_ACTIVE) == 0)
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	689b      	ldr	r3, [r3, #8]
 800e2ac:	2201      	movs	r2, #1
 800e2ae:	4013      	ands	r3, r2
 800e2b0:	d100      	bne.n	800e2b4 <stmr+0x2c>
            continue;
 800e2b2:	e016      	b.n	800e2e2 <stmr+0x5a>
        elapsed = time;
 800e2b4:	68bb      	ldr	r3, [r7, #8]
 800e2b6:	603b      	str	r3, [r7, #0]
        elapsed -= t->event;
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	685b      	ldr	r3, [r3, #4]
 800e2bc:	683a      	ldr	r2, [r7, #0]
 800e2be:	1ad3      	subs	r3, r2, r3
 800e2c0:	603b      	str	r3, [r7, #0]
        if (elapsed < t->period)
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	683a      	ldr	r2, [r7, #0]
 800e2c8:	429a      	cmp	r2, r3
 800e2ca:	d200      	bcs.n	800e2ce <stmr+0x46>
            continue;
 800e2cc:	e009      	b.n	800e2e2 <stmr+0x5a>
        t->proc(t);
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	691b      	ldr	r3, [r3, #16]
 800e2d2:	687a      	ldr	r2, [r7, #4]
 800e2d4:	0010      	movs	r0, r2
 800e2d6:	4798      	blx	r3
        t->event = mtime();
 800e2d8:	f7ff ffb0 	bl	800e23c <mtime>
 800e2dc:	0002      	movs	r2, r0
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	605a      	str	r2, [r3, #4]
    while (tmr != NULL)
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d1da      	bne.n	800e29e <stmr+0x16>
    }
}
 800e2e8:	46c0      	nop			; (mov r8, r8)
 800e2ea:	46bd      	mov	sp, r7
 800e2ec:	b004      	add	sp, #16
 800e2ee:	bd80      	pop	{r7, pc}
 800e2f0:	200023c4 	.word	0x200023c4

0800e2f4 <stmr_add>:
    tmr->next = stmrs;
    stmrs = tmr;
}

void stmr_add(stmr_t *tmr)
{
 800e2f4:	b580      	push	{r7, lr}
 800e2f6:	b082      	sub	sp, #8
 800e2f8:	af00      	add	r7, sp, #0
 800e2fa:	6078      	str	r0, [r7, #4]
    tmr->next = stmrs;
 800e2fc:	4b05      	ldr	r3, [pc, #20]	; (800e314 <stmr_add+0x20>)
 800e2fe:	681a      	ldr	r2, [r3, #0]
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	615a      	str	r2, [r3, #20]
    stmrs = tmr;
 800e304:	4b03      	ldr	r3, [pc, #12]	; (800e314 <stmr_add+0x20>)
 800e306:	687a      	ldr	r2, [r7, #4]
 800e308:	601a      	str	r2, [r3, #0]
}
 800e30a:	46c0      	nop			; (mov r8, r8)
 800e30c:	46bd      	mov	sp, r7
 800e30e:	b002      	add	sp, #8
 800e310:	bd80      	pop	{r7, pc}
 800e312:	46c0      	nop			; (mov r8, r8)
 800e314:	200023c4 	.word	0x200023c4

0800e318 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800e318:	b580      	push	{r7, lr}
 800e31a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &VCP_Desc, 0) != USBD_OK)
 800e31c:	4913      	ldr	r1, [pc, #76]	; (800e36c <MX_USB_DEVICE_Init+0x54>)
 800e31e:	4b14      	ldr	r3, [pc, #80]	; (800e370 <MX_USB_DEVICE_Init+0x58>)
 800e320:	2200      	movs	r2, #0
 800e322:	0018      	movs	r0, r3
 800e324:	f000 fa5b 	bl	800e7de <USBD_Init>
 800e328:	1e03      	subs	r3, r0, #0
 800e32a:	d001      	beq.n	800e330 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800e32c:	f7f2 f8f0 	bl	8000510 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_ECM) != USBD_OK)
 800e330:	4a10      	ldr	r2, [pc, #64]	; (800e374 <MX_USB_DEVICE_Init+0x5c>)
 800e332:	4b0f      	ldr	r3, [pc, #60]	; (800e370 <MX_USB_DEVICE_Init+0x58>)
 800e334:	0011      	movs	r1, r2
 800e336:	0018      	movs	r0, r3
 800e338:	f000 fa82 	bl	800e840 <USBD_RegisterClass>
 800e33c:	1e03      	subs	r3, r0, #0
 800e33e:	d001      	beq.n	800e344 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 800e340:	f7f2 f8e6 	bl	8000510 <Error_Handler>
  }
  if (USBD_ECM_RegisterInterface(&hUsbDeviceFS) != USBD_OK)
 800e344:	4b0a      	ldr	r3, [pc, #40]	; (800e370 <MX_USB_DEVICE_Init+0x58>)
 800e346:	0018      	movs	r0, r3
 800e348:	f001 fb6e 	bl	800fa28 <USBD_ECM_RegisterInterface>
 800e34c:	1e03      	subs	r3, r0, #0
 800e34e:	d001      	beq.n	800e354 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800e350:	f7f2 f8de 	bl	8000510 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800e354:	4b06      	ldr	r3, [pc, #24]	; (800e370 <MX_USB_DEVICE_Init+0x58>)
 800e356:	0018      	movs	r0, r3
 800e358:	f000 fa93 	bl	800e882 <USBD_Start>
 800e35c:	1e03      	subs	r3, r0, #0
 800e35e:	d001      	beq.n	800e364 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800e360:	f7f2 f8d6 	bl	8000510 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e364:	46c0      	nop			; (mov r8, r8)
 800e366:	46bd      	mov	sp, r7
 800e368:	bd80      	pop	{r7, pc}
 800e36a:	46c0      	nop			; (mov r8, r8)
 800e36c:	0800fe00 	.word	0x0800fe00
 800e370:	200032a4 	.word	0x200032a4
 800e374:	0800fe7c 	.word	0x0800fe7c

0800e378 <HAL_PCD_MspInit>:
  */
#ifndef GPIO_SPEED_HIGH
#define GPIO_SPEED_HIGH GPIO_SPEED_FREQ_HIGH
#endif
void HAL_PCD_MspInit(PCD_HandleTypeDef *hpcd)
{
 800e378:	b580      	push	{r7, lr}
 800e37a:	b08a      	sub	sp, #40	; 0x28
 800e37c:	af00      	add	r7, sp, #0
 800e37e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIOA clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800e380:	4b1f      	ldr	r3, [pc, #124]	; (800e400 <HAL_PCD_MspInit+0x88>)
 800e382:	695a      	ldr	r2, [r3, #20]
 800e384:	4b1e      	ldr	r3, [pc, #120]	; (800e400 <HAL_PCD_MspInit+0x88>)
 800e386:	2180      	movs	r1, #128	; 0x80
 800e388:	0289      	lsls	r1, r1, #10
 800e38a:	430a      	orrs	r2, r1
 800e38c:	615a      	str	r2, [r3, #20]
 800e38e:	4b1c      	ldr	r3, [pc, #112]	; (800e400 <HAL_PCD_MspInit+0x88>)
 800e390:	695a      	ldr	r2, [r3, #20]
 800e392:	2380      	movs	r3, #128	; 0x80
 800e394:	029b      	lsls	r3, r3, #10
 800e396:	4013      	ands	r3, r2
 800e398:	613b      	str	r3, [r7, #16]
 800e39a:	693b      	ldr	r3, [r7, #16]
  
  /* Configure USB DM and DP pins.
     This is optional, and maintained only for user guidance. */
  GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
 800e39c:	2114      	movs	r1, #20
 800e39e:	187b      	adds	r3, r7, r1
 800e3a0:	22c0      	movs	r2, #192	; 0xc0
 800e3a2:	0152      	lsls	r2, r2, #5
 800e3a4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e3a6:	187b      	adds	r3, r7, r1
 800e3a8:	2202      	movs	r2, #2
 800e3aa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e3ac:	187b      	adds	r3, r7, r1
 800e3ae:	2200      	movs	r2, #0
 800e3b0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e3b2:	187b      	adds	r3, r7, r1
 800e3b4:	2203      	movs	r2, #3
 800e3b6:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF2_USB;
 800e3b8:	187b      	adds	r3, r7, r1
 800e3ba:	2202      	movs	r2, #2
 800e3bc:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 800e3be:	187a      	adds	r2, r7, r1
 800e3c0:	2390      	movs	r3, #144	; 0x90
 800e3c2:	05db      	lsls	r3, r3, #23
 800e3c4:	0011      	movs	r1, r2
 800e3c6:	0018      	movs	r0, r3
 800e3c8:	f7f2 fa64 	bl	8000894 <HAL_GPIO_Init>
  
  /* Enable USB FS Clock */
  __HAL_RCC_USB_CLK_ENABLE();
 800e3cc:	4b0c      	ldr	r3, [pc, #48]	; (800e400 <HAL_PCD_MspInit+0x88>)
 800e3ce:	69da      	ldr	r2, [r3, #28]
 800e3d0:	4b0b      	ldr	r3, [pc, #44]	; (800e400 <HAL_PCD_MspInit+0x88>)
 800e3d2:	2180      	movs	r1, #128	; 0x80
 800e3d4:	0409      	lsls	r1, r1, #16
 800e3d6:	430a      	orrs	r2, r1
 800e3d8:	61da      	str	r2, [r3, #28]
 800e3da:	4b09      	ldr	r3, [pc, #36]	; (800e400 <HAL_PCD_MspInit+0x88>)
 800e3dc:	69da      	ldr	r2, [r3, #28]
 800e3de:	2380      	movs	r3, #128	; 0x80
 800e3e0:	041b      	lsls	r3, r3, #16
 800e3e2:	4013      	ands	r3, r2
 800e3e4:	60fb      	str	r3, [r7, #12]
 800e3e6:	68fb      	ldr	r3, [r7, #12]
  
  /* Set USB FS Interrupt priority */
  HAL_NVIC_SetPriority(USB_IRQn, 3 /* hard-coded: customize if needed */, 0);
 800e3e8:	2200      	movs	r2, #0
 800e3ea:	2103      	movs	r1, #3
 800e3ec:	201f      	movs	r0, #31
 800e3ee:	f7f2 fa1f 	bl	8000830 <HAL_NVIC_SetPriority>
  
  /* Enable USB FS Interrupt */
  HAL_NVIC_EnableIRQ(USB_IRQn);
 800e3f2:	201f      	movs	r0, #31
 800e3f4:	f7f2 fa31 	bl	800085a <HAL_NVIC_EnableIRQ>
}
 800e3f8:	46c0      	nop			; (mov r8, r8)
 800e3fa:	46bd      	mov	sp, r7
 800e3fc:	b00a      	add	sp, #40	; 0x28
 800e3fe:	bd80      	pop	{r7, pc}
 800e400:	40021000 	.word	0x40021000

0800e404 <HAL_PCD_SetupStageCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 800e404:	b580      	push	{r7, lr}
 800e406:	b082      	sub	sp, #8
 800e408:	af00      	add	r7, sp, #0
 800e40a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage(hpcd->pData, (uint8_t *)hpcd->Setup);
 800e40c:	687a      	ldr	r2, [r7, #4]
 800e40e:	239c      	movs	r3, #156	; 0x9c
 800e410:	009b      	lsls	r3, r3, #2
 800e412:	58d2      	ldr	r2, [r2, r3]
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	218c      	movs	r1, #140	; 0x8c
 800e418:	0089      	lsls	r1, r1, #2
 800e41a:	468c      	mov	ip, r1
 800e41c:	4463      	add	r3, ip
 800e41e:	0019      	movs	r1, r3
 800e420:	0010      	movs	r0, r2
 800e422:	f000 fa79 	bl	800e918 <USBD_LL_SetupStage>
}
 800e426:	46c0      	nop			; (mov r8, r8)
 800e428:	46bd      	mov	sp, r7
 800e42a:	b002      	add	sp, #8
 800e42c:	bd80      	pop	{r7, pc}

0800e42e <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800e42e:	b580      	push	{r7, lr}
 800e430:	b082      	sub	sp, #8
 800e432:	af00      	add	r7, sp, #0
 800e434:	6078      	str	r0, [r7, #4]
 800e436:	000a      	movs	r2, r1
 800e438:	1cfb      	adds	r3, r7, #3
 800e43a:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage(hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e43c:	687a      	ldr	r2, [r7, #4]
 800e43e:	239c      	movs	r3, #156	; 0x9c
 800e440:	009b      	lsls	r3, r3, #2
 800e442:	58d0      	ldr	r0, [r2, r3]
 800e444:	1cfb      	adds	r3, r7, #3
 800e446:	781a      	ldrb	r2, [r3, #0]
 800e448:	6879      	ldr	r1, [r7, #4]
 800e44a:	239e      	movs	r3, #158	; 0x9e
 800e44c:	005b      	lsls	r3, r3, #1
 800e44e:	0152      	lsls	r2, r2, #5
 800e450:	188a      	adds	r2, r1, r2
 800e452:	18d3      	adds	r3, r2, r3
 800e454:	681a      	ldr	r2, [r3, #0]
 800e456:	1cfb      	adds	r3, r7, #3
 800e458:	781b      	ldrb	r3, [r3, #0]
 800e45a:	0019      	movs	r1, r3
 800e45c:	f000 fab8 	bl	800e9d0 <USBD_LL_DataOutStage>
}
 800e460:	46c0      	nop			; (mov r8, r8)
 800e462:	46bd      	mov	sp, r7
 800e464:	b002      	add	sp, #8
 800e466:	bd80      	pop	{r7, pc}

0800e468 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800e468:	b580      	push	{r7, lr}
 800e46a:	b082      	sub	sp, #8
 800e46c:	af00      	add	r7, sp, #0
 800e46e:	6078      	str	r0, [r7, #4]
 800e470:	000a      	movs	r2, r1
 800e472:	1cfb      	adds	r3, r7, #3
 800e474:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage(hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e476:	687a      	ldr	r2, [r7, #4]
 800e478:	239c      	movs	r3, #156	; 0x9c
 800e47a:	009b      	lsls	r3, r3, #2
 800e47c:	58d0      	ldr	r0, [r2, r3]
 800e47e:	1cfb      	adds	r3, r7, #3
 800e480:	781b      	ldrb	r3, [r3, #0]
 800e482:	687a      	ldr	r2, [r7, #4]
 800e484:	015b      	lsls	r3, r3, #5
 800e486:	18d3      	adds	r3, r2, r3
 800e488:	333c      	adds	r3, #60	; 0x3c
 800e48a:	681a      	ldr	r2, [r3, #0]
 800e48c:	1cfb      	adds	r3, r7, #3
 800e48e:	781b      	ldrb	r3, [r3, #0]
 800e490:	0019      	movs	r1, r3
 800e492:	f000 fb06 	bl	800eaa2 <USBD_LL_DataInStage>
}
 800e496:	46c0      	nop			; (mov r8, r8)
 800e498:	46bd      	mov	sp, r7
 800e49a:	b002      	add	sp, #8
 800e49c:	bd80      	pop	{r7, pc}

0800e49e <HAL_PCD_SOFCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 800e49e:	b580      	push	{r7, lr}
 800e4a0:	b082      	sub	sp, #8
 800e4a2:	af00      	add	r7, sp, #0
 800e4a4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF(hpcd->pData);
 800e4a6:	687a      	ldr	r2, [r7, #4]
 800e4a8:	239c      	movs	r3, #156	; 0x9c
 800e4aa:	009b      	lsls	r3, r3, #2
 800e4ac:	58d3      	ldr	r3, [r2, r3]
 800e4ae:	0018      	movs	r0, r3
 800e4b0:	f000 fbc1 	bl	800ec36 <USBD_LL_SOF>
}
 800e4b4:	46c0      	nop			; (mov r8, r8)
 800e4b6:	46bd      	mov	sp, r7
 800e4b8:	b002      	add	sp, #8
 800e4ba:	bd80      	pop	{r7, pc}

0800e4bc <HAL_PCD_ResetCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{   
 800e4bc:	b580      	push	{r7, lr}
 800e4be:	b082      	sub	sp, #8
 800e4c0:	af00      	add	r7, sp, #0
 800e4c2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetSpeed(hpcd->pData, USBD_SPEED_FULL);
 800e4c4:	687a      	ldr	r2, [r7, #4]
 800e4c6:	239c      	movs	r3, #156	; 0x9c
 800e4c8:	009b      	lsls	r3, r3, #2
 800e4ca:	58d3      	ldr	r3, [r2, r3]
 800e4cc:	2101      	movs	r1, #1
 800e4ce:	0018      	movs	r0, r3
 800e4d0:	f000 fba1 	bl	800ec16 <USBD_LL_SetSpeed>
  /* Reset Device */
  USBD_LL_Reset(hpcd->pData);
 800e4d4:	687a      	ldr	r2, [r7, #4]
 800e4d6:	239c      	movs	r3, #156	; 0x9c
 800e4d8:	009b      	lsls	r3, r3, #2
 800e4da:	58d3      	ldr	r3, [r2, r3]
 800e4dc:	0018      	movs	r0, r3
 800e4de:	f000 fb67 	bl	800ebb0 <USBD_LL_Reset>
}
 800e4e2:	46c0      	nop			; (mov r8, r8)
 800e4e4:	46bd      	mov	sp, r7
 800e4e6:	b002      	add	sp, #8
 800e4e8:	bd80      	pop	{r7, pc}

0800e4ea <HAL_PCD_SuspendCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 800e4ea:	b580      	push	{r7, lr}
 800e4ec:	b082      	sub	sp, #8
 800e4ee:	af00      	add	r7, sp, #0
 800e4f0:	6078      	str	r0, [r7, #4]
}
 800e4f2:	46c0      	nop			; (mov r8, r8)
 800e4f4:	46bd      	mov	sp, r7
 800e4f6:	b002      	add	sp, #8
 800e4f8:	bd80      	pop	{r7, pc}

0800e4fa <HAL_PCD_ResumeCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 800e4fa:	b580      	push	{r7, lr}
 800e4fc:	b082      	sub	sp, #8
 800e4fe:	af00      	add	r7, sp, #0
 800e500:	6078      	str	r0, [r7, #4]
}
 800e502:	46c0      	nop			; (mov r8, r8)
 800e504:	46bd      	mov	sp, r7
 800e506:	b002      	add	sp, #8
 800e508:	bd80      	pop	{r7, pc}
	...

0800e50c <USBD_LL_Init>:
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e50c:	b580      	push	{r7, lr}
 800e50e:	b084      	sub	sp, #16
 800e510:	af00      	add	r7, sp, #0
 800e512:	6078      	str	r0, [r7, #4]
  uint32_t pma_address;

  /* Set LL Driver parameters */
  hpcd.Instance = USB;
 800e514:	4b21      	ldr	r3, [pc, #132]	; (800e59c <USBD_LL_Init+0x90>)
 800e516:	4a22      	ldr	r2, [pc, #136]	; (800e5a0 <USBD_LL_Init+0x94>)
 800e518:	601a      	str	r2, [r3, #0]
  hpcd.Init.ep0_mps = 0x40;
 800e51a:	4b20      	ldr	r3, [pc, #128]	; (800e59c <USBD_LL_Init+0x90>)
 800e51c:	2240      	movs	r2, #64	; 0x40
 800e51e:	60da      	str	r2, [r3, #12]
  hpcd.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e520:	4b1e      	ldr	r3, [pc, #120]	; (800e59c <USBD_LL_Init+0x90>)
 800e522:	2202      	movs	r2, #2
 800e524:	611a      	str	r2, [r3, #16]
  hpcd.Init.speed = PCD_SPEED_FULL;
 800e526:	4b1d      	ldr	r3, [pc, #116]	; (800e59c <USBD_LL_Init+0x90>)
 800e528:	2202      	movs	r2, #2
 800e52a:	609a      	str	r2, [r3, #8]
  /* Link The driver to the stack */
  hpcd.pData = pdev;
 800e52c:	4a1b      	ldr	r2, [pc, #108]	; (800e59c <USBD_LL_Init+0x90>)
 800e52e:	239c      	movs	r3, #156	; 0x9c
 800e530:	009b      	lsls	r3, r3, #2
 800e532:	6879      	ldr	r1, [r7, #4]
 800e534:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd;
 800e536:	687a      	ldr	r2, [r7, #4]
 800e538:	2387      	movs	r3, #135	; 0x87
 800e53a:	009b      	lsls	r3, r3, #2
 800e53c:	4917      	ldr	r1, [pc, #92]	; (800e59c <USBD_LL_Init+0x90>)
 800e53e:	50d1      	str	r1, [r2, r3]
  /* Initialize LL Driver */
  HAL_PCD_Init(pdev->pData);
 800e540:	687a      	ldr	r2, [r7, #4]
 800e542:	2387      	movs	r3, #135	; 0x87
 800e544:	009b      	lsls	r3, r3, #2
 800e546:	58d3      	ldr	r3, [r2, r3]
 800e548:	0018      	movs	r0, r3
 800e54a:	f7f2 fb1b 	bl	8000b84 <HAL_PCD_Init>
  /*
  start address for PMA allocation:
  ST's USB stack forces a BTABLE_ADDRESS at the start of PMA memory.  The BTABLE occupied 8 bytes per endpoint.
  we position the EP buffers starting immediately after this
  */
  pma_address = 8 * MAX((sizeof(hpcd.IN_ep) / sizeof(*hpcd.IN_ep)), (sizeof(hpcd.OUT_ep) / sizeof(*hpcd.OUT_ep)));
 800e54e:	2340      	movs	r3, #64	; 0x40
 800e550:	60fb      	str	r3, [r7, #12]

  /* PMA allocation for EP0 */
  HAL_PCDEx_PMAConfig(pdev->pData, 0x00, PCD_SNG_BUF, pma_address =+ USB_MAX_EP0_SIZE);
 800e552:	687a      	ldr	r2, [r7, #4]
 800e554:	2387      	movs	r3, #135	; 0x87
 800e556:	009b      	lsls	r3, r3, #2
 800e558:	58d0      	ldr	r0, [r2, r3]
 800e55a:	2340      	movs	r3, #64	; 0x40
 800e55c:	60fb      	str	r3, [r7, #12]
 800e55e:	68fb      	ldr	r3, [r7, #12]
 800e560:	2200      	movs	r2, #0
 800e562:	2100      	movs	r1, #0
 800e564:	f7f3 fab0 	bl	8001ac8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig(pdev->pData, 0x80, PCD_SNG_BUF, pma_address =+ USB_MAX_EP0_SIZE);
 800e568:	687a      	ldr	r2, [r7, #4]
 800e56a:	2387      	movs	r3, #135	; 0x87
 800e56c:	009b      	lsls	r3, r3, #2
 800e56e:	58d0      	ldr	r0, [r2, r3]
 800e570:	2340      	movs	r3, #64	; 0x40
 800e572:	60fb      	str	r3, [r7, #12]
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	2200      	movs	r2, #0
 800e578:	2180      	movs	r1, #128	; 0x80
 800e57a:	f7f3 faa5 	bl	8001ac8 <HAL_PCDEx_PMAConfig>

  /* PMA allocation for other endpoints */
  USBD_ECM_PMAConfig(pdev->pData, &pma_address);
 800e57e:	687a      	ldr	r2, [r7, #4]
 800e580:	2387      	movs	r3, #135	; 0x87
 800e582:	009b      	lsls	r3, r3, #2
 800e584:	58d3      	ldr	r3, [r2, r3]
 800e586:	220c      	movs	r2, #12
 800e588:	18ba      	adds	r2, r7, r2
 800e58a:	0011      	movs	r1, r2
 800e58c:	0018      	movs	r0, r3
 800e58e:	f001 fa54 	bl	800fa3a <USBD_ECM_PMAConfig>

  return USBD_OK;
 800e592:	2300      	movs	r3, #0
}
 800e594:	0018      	movs	r0, r3
 800e596:	46bd      	mov	sp, r7
 800e598:	b004      	add	sp, #16
 800e59a:	bd80      	pop	{r7, pc}
 800e59c:	200034c4 	.word	0x200034c4
 800e5a0:	40005c00 	.word	0x40005c00

0800e5a4 <USBD_LL_Start>:
  * @brief  Starts the Low Level portion of the Device driver. 
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e5a4:	b580      	push	{r7, lr}
 800e5a6:	b082      	sub	sp, #8
 800e5a8:	af00      	add	r7, sp, #0
 800e5aa:	6078      	str	r0, [r7, #4]
  HAL_PCD_Start(pdev->pData);
 800e5ac:	687a      	ldr	r2, [r7, #4]
 800e5ae:	2387      	movs	r3, #135	; 0x87
 800e5b0:	009b      	lsls	r3, r3, #2
 800e5b2:	58d3      	ldr	r3, [r2, r3]
 800e5b4:	0018      	movs	r0, r3
 800e5b6:	f7f2 fbc9 	bl	8000d4c <HAL_PCD_Start>
  return USBD_OK;
 800e5ba:	2300      	movs	r3, #0
}
 800e5bc:	0018      	movs	r0, r3
 800e5be:	46bd      	mov	sp, r7
 800e5c0:	b002      	add	sp, #8
 800e5c2:	bd80      	pop	{r7, pc}

0800e5c4 <USBD_LL_OpenEP>:
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev,
                                  uint8_t ep_addr,
                                  uint8_t ep_type,
                                  uint16_t ep_mps)
{
 800e5c4:	b590      	push	{r4, r7, lr}
 800e5c6:	b083      	sub	sp, #12
 800e5c8:	af00      	add	r7, sp, #0
 800e5ca:	6078      	str	r0, [r7, #4]
 800e5cc:	000c      	movs	r4, r1
 800e5ce:	0010      	movs	r0, r2
 800e5d0:	0019      	movs	r1, r3
 800e5d2:	1cfb      	adds	r3, r7, #3
 800e5d4:	1c22      	adds	r2, r4, #0
 800e5d6:	701a      	strb	r2, [r3, #0]
 800e5d8:	1cbb      	adds	r3, r7, #2
 800e5da:	1c02      	adds	r2, r0, #0
 800e5dc:	701a      	strb	r2, [r3, #0]
 800e5de:	003b      	movs	r3, r7
 800e5e0:	1c0a      	adds	r2, r1, #0
 800e5e2:	801a      	strh	r2, [r3, #0]
  HAL_PCD_EP_Open(pdev->pData,
 800e5e4:	687a      	ldr	r2, [r7, #4]
 800e5e6:	2387      	movs	r3, #135	; 0x87
 800e5e8:	009b      	lsls	r3, r3, #2
 800e5ea:	58d0      	ldr	r0, [r2, r3]
 800e5ec:	1cbb      	adds	r3, r7, #2
 800e5ee:	781c      	ldrb	r4, [r3, #0]
 800e5f0:	003b      	movs	r3, r7
 800e5f2:	881a      	ldrh	r2, [r3, #0]
 800e5f4:	1cfb      	adds	r3, r7, #3
 800e5f6:	7819      	ldrb	r1, [r3, #0]
 800e5f8:	0023      	movs	r3, r4
 800e5fa:	f7f2 fd80 	bl	80010fe <HAL_PCD_EP_Open>
                  ep_addr,
                  ep_mps,
                  ep_type);
  
  return USBD_OK;
 800e5fe:	2300      	movs	r3, #0
}
 800e600:	0018      	movs	r0, r3
 800e602:	46bd      	mov	sp, r7
 800e604:	b003      	add	sp, #12
 800e606:	bd90      	pop	{r4, r7, pc}

0800e608 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e608:	b580      	push	{r7, lr}
 800e60a:	b082      	sub	sp, #8
 800e60c:	af00      	add	r7, sp, #0
 800e60e:	6078      	str	r0, [r7, #4]
 800e610:	000a      	movs	r2, r1
 800e612:	1cfb      	adds	r3, r7, #3
 800e614:	701a      	strb	r2, [r3, #0]
  HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e616:	687a      	ldr	r2, [r7, #4]
 800e618:	2387      	movs	r3, #135	; 0x87
 800e61a:	009b      	lsls	r3, r3, #2
 800e61c:	58d2      	ldr	r2, [r2, r3]
 800e61e:	1cfb      	adds	r3, r7, #3
 800e620:	781b      	ldrb	r3, [r3, #0]
 800e622:	0019      	movs	r1, r3
 800e624:	0010      	movs	r0, r2
 800e626:	f7f2 fddc 	bl	80011e2 <HAL_PCD_EP_Close>
  return USBD_OK;
 800e62a:	2300      	movs	r3, #0
}
 800e62c:	0018      	movs	r0, r3
 800e62e:	46bd      	mov	sp, r7
 800e630:	b002      	add	sp, #8
 800e632:	bd80      	pop	{r7, pc}

0800e634 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e634:	b580      	push	{r7, lr}
 800e636:	b082      	sub	sp, #8
 800e638:	af00      	add	r7, sp, #0
 800e63a:	6078      	str	r0, [r7, #4]
 800e63c:	000a      	movs	r2, r1
 800e63e:	1cfb      	adds	r3, r7, #3
 800e640:	701a      	strb	r2, [r3, #0]
  HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e642:	687a      	ldr	r2, [r7, #4]
 800e644:	2387      	movs	r3, #135	; 0x87
 800e646:	009b      	lsls	r3, r3, #2
 800e648:	58d2      	ldr	r2, [r2, r3]
 800e64a:	1cfb      	adds	r3, r7, #3
 800e64c:	781b      	ldrb	r3, [r3, #0]
 800e64e:	0019      	movs	r1, r3
 800e650:	0010      	movs	r0, r2
 800e652:	f7f2 fea7 	bl	80013a4 <HAL_PCD_EP_SetStall>
  return USBD_OK;
 800e656:	2300      	movs	r3, #0
}
 800e658:	0018      	movs	r0, r3
 800e65a:	46bd      	mov	sp, r7
 800e65c:	b002      	add	sp, #8
 800e65e:	bd80      	pop	{r7, pc}

0800e660 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e660:	b580      	push	{r7, lr}
 800e662:	b082      	sub	sp, #8
 800e664:	af00      	add	r7, sp, #0
 800e666:	6078      	str	r0, [r7, #4]
 800e668:	000a      	movs	r2, r1
 800e66a:	1cfb      	adds	r3, r7, #3
 800e66c:	701a      	strb	r2, [r3, #0]
  HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e66e:	687a      	ldr	r2, [r7, #4]
 800e670:	2387      	movs	r3, #135	; 0x87
 800e672:	009b      	lsls	r3, r3, #2
 800e674:	58d2      	ldr	r2, [r2, r3]
 800e676:	1cfb      	adds	r3, r7, #3
 800e678:	781b      	ldrb	r3, [r3, #0]
 800e67a:	0019      	movs	r1, r3
 800e67c:	0010      	movs	r0, r2
 800e67e:	f7f2 fef7 	bl	8001470 <HAL_PCD_EP_ClrStall>
  return USBD_OK; 
 800e682:	2300      	movs	r3, #0
}
 800e684:	0018      	movs	r0, r3
 800e686:	46bd      	mov	sp, r7
 800e688:	b002      	add	sp, #8
 800e68a:	bd80      	pop	{r7, pc}

0800e68c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e68c:	b580      	push	{r7, lr}
 800e68e:	b084      	sub	sp, #16
 800e690:	af00      	add	r7, sp, #0
 800e692:	6078      	str	r0, [r7, #4]
 800e694:	000a      	movs	r2, r1
 800e696:	1cfb      	adds	r3, r7, #3
 800e698:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800e69a:	687a      	ldr	r2, [r7, #4]
 800e69c:	2387      	movs	r3, #135	; 0x87
 800e69e:	009b      	lsls	r3, r3, #2
 800e6a0:	58d3      	ldr	r3, [r2, r3]
 800e6a2:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800e6a4:	1cfb      	adds	r3, r7, #3
 800e6a6:	781b      	ldrb	r3, [r3, #0]
 800e6a8:	b25b      	sxtb	r3, r3
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	da0a      	bge.n	800e6c4 <USBD_LL_IsStallEP+0x38>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e6ae:	1cfb      	adds	r3, r7, #3
 800e6b0:	781b      	ldrb	r3, [r3, #0]
 800e6b2:	227f      	movs	r2, #127	; 0x7f
 800e6b4:	4013      	ands	r3, r2
 800e6b6:	68fa      	ldr	r2, [r7, #12]
 800e6b8:	212a      	movs	r1, #42	; 0x2a
 800e6ba:	015b      	lsls	r3, r3, #5
 800e6bc:	18d3      	adds	r3, r2, r3
 800e6be:	185b      	adds	r3, r3, r1
 800e6c0:	781b      	ldrb	r3, [r3, #0]
 800e6c2:	e00a      	b.n	800e6da <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e6c4:	1cfb      	adds	r3, r7, #3
 800e6c6:	781b      	ldrb	r3, [r3, #0]
 800e6c8:	227f      	movs	r2, #127	; 0x7f
 800e6ca:	401a      	ands	r2, r3
 800e6cc:	68f9      	ldr	r1, [r7, #12]
 800e6ce:	2395      	movs	r3, #149	; 0x95
 800e6d0:	005b      	lsls	r3, r3, #1
 800e6d2:	0152      	lsls	r2, r2, #5
 800e6d4:	188a      	adds	r2, r1, r2
 800e6d6:	18d3      	adds	r3, r2, r3
 800e6d8:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e6da:	0018      	movs	r0, r3
 800e6dc:	46bd      	mov	sp, r7
 800e6de:	b004      	add	sp, #16
 800e6e0:	bd80      	pop	{r7, pc}

0800e6e2 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e6e2:	b580      	push	{r7, lr}
 800e6e4:	b082      	sub	sp, #8
 800e6e6:	af00      	add	r7, sp, #0
 800e6e8:	6078      	str	r0, [r7, #4]
 800e6ea:	000a      	movs	r2, r1
 800e6ec:	1cfb      	adds	r3, r7, #3
 800e6ee:	701a      	strb	r2, [r3, #0]
  HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e6f0:	687a      	ldr	r2, [r7, #4]
 800e6f2:	2387      	movs	r3, #135	; 0x87
 800e6f4:	009b      	lsls	r3, r3, #2
 800e6f6:	58d2      	ldr	r2, [r2, r3]
 800e6f8:	1cfb      	adds	r3, r7, #3
 800e6fa:	781b      	ldrb	r3, [r3, #0]
 800e6fc:	0019      	movs	r1, r3
 800e6fe:	0010      	movs	r0, r2
 800e700:	f7f2 fcd2 	bl	80010a8 <HAL_PCD_SetAddress>
  return USBD_OK; 
 800e704:	2300      	movs	r3, #0
}
 800e706:	0018      	movs	r0, r3
 800e708:	46bd      	mov	sp, r7
 800e70a:	b002      	add	sp, #8
 800e70c:	bd80      	pop	{r7, pc}

0800e70e <USBD_LL_Transmit>:
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, 
                                    uint8_t ep_addr,
                                    uint8_t *pbuf,
                                    uint16_t size)
{
 800e70e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e710:	b087      	sub	sp, #28
 800e712:	af00      	add	r7, sp, #0
 800e714:	60f8      	str	r0, [r7, #12]
 800e716:	0008      	movs	r0, r1
 800e718:	607a      	str	r2, [r7, #4]
 800e71a:	0019      	movs	r1, r3
 800e71c:	260b      	movs	r6, #11
 800e71e:	19bb      	adds	r3, r7, r6
 800e720:	1c02      	adds	r2, r0, #0
 800e722:	701a      	strb	r2, [r3, #0]
 800e724:	2408      	movs	r4, #8
 800e726:	193b      	adds	r3, r7, r4
 800e728:	1c0a      	adds	r2, r1, #0
 800e72a:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef outcome;
  outcome = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e72c:	68fa      	ldr	r2, [r7, #12]
 800e72e:	2387      	movs	r3, #135	; 0x87
 800e730:	009b      	lsls	r3, r3, #2
 800e732:	58d0      	ldr	r0, [r2, r3]
 800e734:	193b      	adds	r3, r7, r4
 800e736:	881d      	ldrh	r5, [r3, #0]
 800e738:	2317      	movs	r3, #23
 800e73a:	18fc      	adds	r4, r7, r3
 800e73c:	687a      	ldr	r2, [r7, #4]
 800e73e:	19bb      	adds	r3, r7, r6
 800e740:	7819      	ldrb	r1, [r3, #0]
 800e742:	002b      	movs	r3, r5
 800e744:	f7f2 fdee 	bl	8001324 <HAL_PCD_EP_Transmit>
 800e748:	0003      	movs	r3, r0
 800e74a:	7023      	strb	r3, [r4, #0]
  return (HAL_OK == outcome) ? USBD_OK : USBD_BUSY;
 800e74c:	2317      	movs	r3, #23
 800e74e:	18fb      	adds	r3, r7, r3
 800e750:	781b      	ldrb	r3, [r3, #0]
 800e752:	1e5a      	subs	r2, r3, #1
 800e754:	4193      	sbcs	r3, r2
 800e756:	b2db      	uxtb	r3, r3
}
 800e758:	0018      	movs	r0, r3
 800e75a:	46bd      	mov	sp, r7
 800e75c:	b007      	add	sp, #28
 800e75e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e760 <USBD_LL_PrepareReceive>:
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, 
                                          uint8_t ep_addr,
                                          uint8_t *pbuf,
                                          uint16_t size)
{
 800e760:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e762:	b087      	sub	sp, #28
 800e764:	af00      	add	r7, sp, #0
 800e766:	60f8      	str	r0, [r7, #12]
 800e768:	0008      	movs	r0, r1
 800e76a:	607a      	str	r2, [r7, #4]
 800e76c:	0019      	movs	r1, r3
 800e76e:	260b      	movs	r6, #11
 800e770:	19bb      	adds	r3, r7, r6
 800e772:	1c02      	adds	r2, r0, #0
 800e774:	701a      	strb	r2, [r3, #0]
 800e776:	2408      	movs	r4, #8
 800e778:	193b      	adds	r3, r7, r4
 800e77a:	1c0a      	adds	r2, r1, #0
 800e77c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef outcome;
  outcome = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e77e:	68fa      	ldr	r2, [r7, #12]
 800e780:	2387      	movs	r3, #135	; 0x87
 800e782:	009b      	lsls	r3, r3, #2
 800e784:	58d0      	ldr	r0, [r2, r3]
 800e786:	193b      	adds	r3, r7, r4
 800e788:	881d      	ldrh	r5, [r3, #0]
 800e78a:	2317      	movs	r3, #23
 800e78c:	18fc      	adds	r4, r7, r3
 800e78e:	687a      	ldr	r2, [r7, #4]
 800e790:	19bb      	adds	r3, r7, r6
 800e792:	7819      	ldrb	r1, [r3, #0]
 800e794:	002b      	movs	r3, r5
 800e796:	f7f2 fd6f 	bl	8001278 <HAL_PCD_EP_Receive>
 800e79a:	0003      	movs	r3, r0
 800e79c:	7023      	strb	r3, [r4, #0]
  return (HAL_OK == outcome) ? USBD_OK : USBD_BUSY;
 800e79e:	2317      	movs	r3, #23
 800e7a0:	18fb      	adds	r3, r7, r3
 800e7a2:	781b      	ldrb	r3, [r3, #0]
 800e7a4:	1e5a      	subs	r2, r3, #1
 800e7a6:	4193      	sbcs	r3, r2
 800e7a8:	b2db      	uxtb	r3, r3
}
 800e7aa:	0018      	movs	r0, r3
 800e7ac:	46bd      	mov	sp, r7
 800e7ae:	b007      	add	sp, #28
 800e7b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e7b2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e7b2:	b580      	push	{r7, lr}
 800e7b4:	b082      	sub	sp, #8
 800e7b6:	af00      	add	r7, sp, #0
 800e7b8:	6078      	str	r0, [r7, #4]
 800e7ba:	000a      	movs	r2, r1
 800e7bc:	1cfb      	adds	r3, r7, #3
 800e7be:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount(pdev->pData, ep_addr);
 800e7c0:	687a      	ldr	r2, [r7, #4]
 800e7c2:	2387      	movs	r3, #135	; 0x87
 800e7c4:	009b      	lsls	r3, r3, #2
 800e7c6:	58d2      	ldr	r2, [r2, r3]
 800e7c8:	1cfb      	adds	r3, r7, #3
 800e7ca:	781b      	ldrb	r3, [r3, #0]
 800e7cc:	0019      	movs	r1, r3
 800e7ce:	0010      	movs	r0, r2
 800e7d0:	f7f2 fd93 	bl	80012fa <HAL_PCD_EP_GetRxCount>
 800e7d4:	0003      	movs	r3, r0
}
 800e7d6:	0018      	movs	r0, r3
 800e7d8:	46bd      	mov	sp, r7
 800e7da:	b002      	add	sp, #8
 800e7dc:	bd80      	pop	{r7, pc}

0800e7de <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, const USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800e7de:	b580      	push	{r7, lr}
 800e7e0:	b084      	sub	sp, #16
 800e7e2:	af00      	add	r7, sp, #0
 800e7e4:	60f8      	str	r0, [r7, #12]
 800e7e6:	60b9      	str	r1, [r7, #8]
 800e7e8:	1dfb      	adds	r3, r7, #7
 800e7ea:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d101      	bne.n	800e7f6 <USBD_Init+0x18>
  {
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
 800e7f2:	2302      	movs	r3, #2
 800e7f4:	e020      	b.n	800e838 <USBD_Init+0x5a>
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800e7f6:	68fa      	ldr	r2, [r7, #12]
 800e7f8:	2384      	movs	r3, #132	; 0x84
 800e7fa:	009b      	lsls	r3, r3, #2
 800e7fc:	58d3      	ldr	r3, [r2, r3]
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d004      	beq.n	800e80c <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 800e802:	68fa      	ldr	r2, [r7, #12]
 800e804:	2384      	movs	r3, #132	; 0x84
 800e806:	009b      	lsls	r3, r3, #2
 800e808:	2100      	movs	r1, #0
 800e80a:	50d1      	str	r1, [r2, r3]
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800e80c:	68bb      	ldr	r3, [r7, #8]
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d004      	beq.n	800e81c <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800e812:	68fa      	ldr	r2, [r7, #12]
 800e814:	2383      	movs	r3, #131	; 0x83
 800e816:	009b      	lsls	r3, r3, #2
 800e818:	68b9      	ldr	r1, [r7, #8]
 800e81a:	50d1      	str	r1, [r2, r3]
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800e81c:	68fa      	ldr	r2, [r7, #12]
 800e81e:	23fe      	movs	r3, #254	; 0xfe
 800e820:	005b      	lsls	r3, r3, #1
 800e822:	2101      	movs	r1, #1
 800e824:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	1dfa      	adds	r2, r7, #7
 800e82a:	7812      	ldrb	r2, [r2, #0]
 800e82c:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800e82e:	68fb      	ldr	r3, [r7, #12]
 800e830:	0018      	movs	r0, r3
 800e832:	f7ff fe6b 	bl	800e50c <USBD_LL_Init>
  
  return USBD_OK; 
 800e836:	2300      	movs	r3, #0
}
 800e838:	0018      	movs	r0, r3
 800e83a:	46bd      	mov	sp, r7
 800e83c:	b004      	add	sp, #16
 800e83e:	bd80      	pop	{r7, pc}

0800e840 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, const USBD_ClassTypeDef *pclass)
{
 800e840:	b580      	push	{r7, lr}
 800e842:	b084      	sub	sp, #16
 800e844:	af00      	add	r7, sp, #0
 800e846:	6078      	str	r0, [r7, #4]
 800e848:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 800e84a:	230f      	movs	r3, #15
 800e84c:	18fb      	adds	r3, r7, r3
 800e84e:	2200      	movs	r2, #0
 800e850:	701a      	strb	r2, [r3, #0]
  if(pclass != 0)
 800e852:	683b      	ldr	r3, [r7, #0]
 800e854:	2b00      	cmp	r3, #0
 800e856:	d009      	beq.n	800e86c <USBD_RegisterClass+0x2c>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800e858:	687a      	ldr	r2, [r7, #4]
 800e85a:	2384      	movs	r3, #132	; 0x84
 800e85c:	009b      	lsls	r3, r3, #2
 800e85e:	6839      	ldr	r1, [r7, #0]
 800e860:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 800e862:	230f      	movs	r3, #15
 800e864:	18fb      	adds	r3, r7, r3
 800e866:	2200      	movs	r2, #0
 800e868:	701a      	strb	r2, [r3, #0]
 800e86a:	e003      	b.n	800e874 <USBD_RegisterClass+0x34>
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 800e86c:	230f      	movs	r3, #15
 800e86e:	18fb      	adds	r3, r7, r3
 800e870:	2202      	movs	r2, #2
 800e872:	701a      	strb	r2, [r3, #0]
  }
  
  return status;
 800e874:	230f      	movs	r3, #15
 800e876:	18fb      	adds	r3, r7, r3
 800e878:	781b      	ldrb	r3, [r3, #0]
}
 800e87a:	0018      	movs	r0, r3
 800e87c:	46bd      	mov	sp, r7
 800e87e:	b004      	add	sp, #16
 800e880:	bd80      	pop	{r7, pc}

0800e882 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800e882:	b580      	push	{r7, lr}
 800e884:	b082      	sub	sp, #8
 800e886:	af00      	add	r7, sp, #0
 800e888:	6078      	str	r0, [r7, #4]
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	0018      	movs	r0, r3
 800e88e:	f7ff fe89 	bl	800e5a4 <USBD_LL_Start>
  
  return USBD_OK;  
 800e892:	2300      	movs	r3, #0
}
 800e894:	0018      	movs	r0, r3
 800e896:	46bd      	mov	sp, r7
 800e898:	b002      	add	sp, #8
 800e89a:	bd80      	pop	{r7, pc}

0800e89c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800e89c:	b580      	push	{r7, lr}
 800e89e:	b084      	sub	sp, #16
 800e8a0:	af00      	add	r7, sp, #0
 800e8a2:	6078      	str	r0, [r7, #4]
 800e8a4:	000a      	movs	r2, r1
 800e8a6:	1cfb      	adds	r3, r7, #3
 800e8a8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800e8aa:	230f      	movs	r3, #15
 800e8ac:	18fb      	adds	r3, r7, r3
 800e8ae:	2202      	movs	r2, #2
 800e8b0:	701a      	strb	r2, [r3, #0]
  
  if(pdev->pClass != NULL)
 800e8b2:	687a      	ldr	r2, [r7, #4]
 800e8b4:	2384      	movs	r3, #132	; 0x84
 800e8b6:	009b      	lsls	r3, r3, #2
 800e8b8:	58d3      	ldr	r3, [r2, r3]
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d00f      	beq.n	800e8de <USBD_SetClassConfig+0x42>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 800e8be:	687a      	ldr	r2, [r7, #4]
 800e8c0:	2384      	movs	r3, #132	; 0x84
 800e8c2:	009b      	lsls	r3, r3, #2
 800e8c4:	58d3      	ldr	r3, [r2, r3]
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	1cfa      	adds	r2, r7, #3
 800e8ca:	7811      	ldrb	r1, [r2, #0]
 800e8cc:	687a      	ldr	r2, [r7, #4]
 800e8ce:	0010      	movs	r0, r2
 800e8d0:	4798      	blx	r3
 800e8d2:	1e03      	subs	r3, r0, #0
 800e8d4:	d103      	bne.n	800e8de <USBD_SetClassConfig+0x42>
    {
      ret = USBD_OK;
 800e8d6:	230f      	movs	r3, #15
 800e8d8:	18fb      	adds	r3, r7, r3
 800e8da:	2200      	movs	r2, #0
 800e8dc:	701a      	strb	r2, [r3, #0]
    }
  }
  return ret; 
 800e8de:	230f      	movs	r3, #15
 800e8e0:	18fb      	adds	r3, r7, r3
 800e8e2:	781b      	ldrb	r3, [r3, #0]
}
 800e8e4:	0018      	movs	r0, r3
 800e8e6:	46bd      	mov	sp, r7
 800e8e8:	b004      	add	sp, #16
 800e8ea:	bd80      	pop	{r7, pc}

0800e8ec <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800e8ec:	b580      	push	{r7, lr}
 800e8ee:	b082      	sub	sp, #8
 800e8f0:	af00      	add	r7, sp, #0
 800e8f2:	6078      	str	r0, [r7, #4]
 800e8f4:	000a      	movs	r2, r1
 800e8f6:	1cfb      	adds	r3, r7, #3
 800e8f8:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 800e8fa:	687a      	ldr	r2, [r7, #4]
 800e8fc:	2384      	movs	r3, #132	; 0x84
 800e8fe:	009b      	lsls	r3, r3, #2
 800e900:	58d3      	ldr	r3, [r2, r3]
 800e902:	685b      	ldr	r3, [r3, #4]
 800e904:	1cfa      	adds	r2, r7, #3
 800e906:	7811      	ldrb	r1, [r2, #0]
 800e908:	687a      	ldr	r2, [r7, #4]
 800e90a:	0010      	movs	r0, r2
 800e90c:	4798      	blx	r3
  return USBD_OK;
 800e90e:	2300      	movs	r3, #0
}
 800e910:	0018      	movs	r0, r3
 800e912:	46bd      	mov	sp, r7
 800e914:	b002      	add	sp, #8
 800e916:	bd80      	pop	{r7, pc}

0800e918 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800e918:	b580      	push	{r7, lr}
 800e91a:	b082      	sub	sp, #8
 800e91c:	af00      	add	r7, sp, #0
 800e91e:	6078      	str	r0, [r7, #4]
 800e920:	6039      	str	r1, [r7, #0]

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	2281      	movs	r2, #129	; 0x81
 800e926:	0092      	lsls	r2, r2, #2
 800e928:	4694      	mov	ip, r2
 800e92a:	4463      	add	r3, ip
 800e92c:	683a      	ldr	r2, [r7, #0]
 800e92e:	0011      	movs	r1, r2
 800e930:	0018      	movs	r0, r3
 800e932:	f000 fd76 	bl	800f422 <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 800e936:	687a      	ldr	r2, [r7, #4]
 800e938:	23fa      	movs	r3, #250	; 0xfa
 800e93a:	005b      	lsls	r3, r3, #1
 800e93c:	2101      	movs	r1, #1
 800e93e:	50d1      	str	r1, [r2, r3]
  pdev->ep0_data_len = pdev->request.wLength;
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	4a22      	ldr	r2, [pc, #136]	; (800e9cc <USBD_LL_SetupStage+0xb4>)
 800e944:	5a9b      	ldrh	r3, [r3, r2]
 800e946:	0019      	movs	r1, r3
 800e948:	687a      	ldr	r2, [r7, #4]
 800e94a:	23fc      	movs	r3, #252	; 0xfc
 800e94c:	005b      	lsls	r3, r3, #1
 800e94e:	50d1      	str	r1, [r2, r3]
  
  switch (pdev->request.bmRequest & 0x1F) 
 800e950:	687a      	ldr	r2, [r7, #4]
 800e952:	2381      	movs	r3, #129	; 0x81
 800e954:	009b      	lsls	r3, r3, #2
 800e956:	5cd3      	ldrb	r3, [r2, r3]
 800e958:	001a      	movs	r2, r3
 800e95a:	231f      	movs	r3, #31
 800e95c:	4013      	ands	r3, r2
 800e95e:	2b01      	cmp	r3, #1
 800e960:	d00d      	beq.n	800e97e <USBD_LL_SetupStage+0x66>
 800e962:	2b02      	cmp	r3, #2
 800e964:	d015      	beq.n	800e992 <USBD_LL_SetupStage+0x7a>
 800e966:	2b00      	cmp	r3, #0
 800e968:	d11d      	bne.n	800e9a6 <USBD_LL_SetupStage+0x8e>
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &pdev->request);
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	2281      	movs	r2, #129	; 0x81
 800e96e:	0092      	lsls	r2, r2, #2
 800e970:	189a      	adds	r2, r3, r2
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	0011      	movs	r1, r2
 800e976:	0018      	movs	r0, r3
 800e978:	f000 f97c 	bl	800ec74 <USBD_StdDevReq>
    break;
 800e97c:	e020      	b.n	800e9c0 <USBD_LL_SetupStage+0xa8>
    
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &pdev->request);
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	2281      	movs	r2, #129	; 0x81
 800e982:	0092      	lsls	r2, r2, #2
 800e984:	189a      	adds	r2, r3, r2
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	0011      	movs	r1, r2
 800e98a:	0018      	movs	r0, r3
 800e98c:	f000 f9c6 	bl	800ed1c <USBD_StdItfReq>
    break;
 800e990:	e016      	b.n	800e9c0 <USBD_LL_SetupStage+0xa8>
    
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	2281      	movs	r2, #129	; 0x81
 800e996:	0092      	lsls	r2, r2, #2
 800e998:	189a      	adds	r2, r3, r2
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	0011      	movs	r1, r2
 800e99e:	0018      	movs	r0, r3
 800e9a0:	f000 f9fb 	bl	800ed9a <USBD_StdEPReq>
    break;
 800e9a4:	e00c      	b.n	800e9c0 <USBD_LL_SetupStage+0xa8>
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 800e9a6:	687a      	ldr	r2, [r7, #4]
 800e9a8:	2381      	movs	r3, #129	; 0x81
 800e9aa:	009b      	lsls	r3, r3, #2
 800e9ac:	5cd3      	ldrb	r3, [r2, r3]
 800e9ae:	227f      	movs	r2, #127	; 0x7f
 800e9b0:	4393      	bics	r3, r2
 800e9b2:	b2da      	uxtb	r2, r3
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	0011      	movs	r1, r2
 800e9b8:	0018      	movs	r0, r3
 800e9ba:	f7ff fe3b 	bl	800e634 <USBD_LL_StallEP>
    break;
 800e9be:	46c0      	nop			; (mov r8, r8)
  }  
  return USBD_OK;  
 800e9c0:	2300      	movs	r3, #0
}
 800e9c2:	0018      	movs	r0, r3
 800e9c4:	46bd      	mov	sp, r7
 800e9c6:	b002      	add	sp, #8
 800e9c8:	bd80      	pop	{r7, pc}
 800e9ca:	46c0      	nop			; (mov r8, r8)
 800e9cc:	0000020a 	.word	0x0000020a

0800e9d0 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 800e9d0:	b580      	push	{r7, lr}
 800e9d2:	b086      	sub	sp, #24
 800e9d4:	af00      	add	r7, sp, #0
 800e9d6:	60f8      	str	r0, [r7, #12]
 800e9d8:	607a      	str	r2, [r7, #4]
 800e9da:	200b      	movs	r0, #11
 800e9dc:	183b      	adds	r3, r7, r0
 800e9de:	1c0a      	adds	r2, r1, #0
 800e9e0:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 800e9e2:	183b      	adds	r3, r7, r0
 800e9e4:	781b      	ldrb	r3, [r3, #0]
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d13e      	bne.n	800ea68 <USBD_LL_DataOutStage+0x98>
  {
    pep = &pdev->ep_out[0];
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	3305      	adds	r3, #5
 800e9ee:	33ff      	adds	r3, #255	; 0xff
 800e9f0:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800e9f2:	68fa      	ldr	r2, [r7, #12]
 800e9f4:	23fa      	movs	r3, #250	; 0xfa
 800e9f6:	005b      	lsls	r3, r3, #1
 800e9f8:	58d3      	ldr	r3, [r2, r3]
 800e9fa:	2b03      	cmp	r3, #3
 800e9fc:	d14c      	bne.n	800ea98 <USBD_LL_DataOutStage+0xc8>
    {
      if(pep->rem_length > pep->maxpacket)
 800e9fe:	697b      	ldr	r3, [r7, #20]
 800ea00:	689a      	ldr	r2, [r3, #8]
 800ea02:	697b      	ldr	r3, [r7, #20]
 800ea04:	68db      	ldr	r3, [r3, #12]
 800ea06:	429a      	cmp	r2, r3
 800ea08:	d914      	bls.n	800ea34 <USBD_LL_DataOutStage+0x64>
      {
        pep->rem_length -=  pep->maxpacket;
 800ea0a:	697b      	ldr	r3, [r7, #20]
 800ea0c:	689a      	ldr	r2, [r3, #8]
 800ea0e:	697b      	ldr	r3, [r7, #20]
 800ea10:	68db      	ldr	r3, [r3, #12]
 800ea12:	1ad2      	subs	r2, r2, r3
 800ea14:	697b      	ldr	r3, [r7, #20]
 800ea16:	609a      	str	r2, [r3, #8]
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 800ea18:	697b      	ldr	r3, [r7, #20]
 800ea1a:	68da      	ldr	r2, [r3, #12]
 800ea1c:	697b      	ldr	r3, [r7, #20]
 800ea1e:	689b      	ldr	r3, [r3, #8]
 800ea20:	429a      	cmp	r2, r3
 800ea22:	d900      	bls.n	800ea26 <USBD_LL_DataOutStage+0x56>
 800ea24:	001a      	movs	r2, r3
        USBD_CtlContinueRx (pdev, 
 800ea26:	b292      	uxth	r2, r2
 800ea28:	6879      	ldr	r1, [r7, #4]
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	0018      	movs	r0, r3
 800ea2e:	f001 f8ca 	bl	800fbc6 <USBD_CtlContinueRx>
 800ea32:	e031      	b.n	800ea98 <USBD_LL_DataOutStage+0xc8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800ea34:	68fa      	ldr	r2, [r7, #12]
 800ea36:	2384      	movs	r3, #132	; 0x84
 800ea38:	009b      	lsls	r3, r3, #2
 800ea3a:	58d3      	ldr	r3, [r2, r3]
 800ea3c:	691b      	ldr	r3, [r3, #16]
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d00d      	beq.n	800ea5e <USBD_LL_DataOutStage+0x8e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ea42:	68fa      	ldr	r2, [r7, #12]
 800ea44:	23fe      	movs	r3, #254	; 0xfe
 800ea46:	005b      	lsls	r3, r3, #1
 800ea48:	5cd3      	ldrb	r3, [r2, r3]
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800ea4a:	2b03      	cmp	r3, #3
 800ea4c:	d107      	bne.n	800ea5e <USBD_LL_DataOutStage+0x8e>
        {
          pdev->pClass->EP0_RxReady(pdev); 
 800ea4e:	68fa      	ldr	r2, [r7, #12]
 800ea50:	2384      	movs	r3, #132	; 0x84
 800ea52:	009b      	lsls	r3, r3, #2
 800ea54:	58d3      	ldr	r3, [r2, r3]
 800ea56:	691b      	ldr	r3, [r3, #16]
 800ea58:	68fa      	ldr	r2, [r7, #12]
 800ea5a:	0010      	movs	r0, r2
 800ea5c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	0018      	movs	r0, r3
 800ea62:	f001 f8c3 	bl	800fbec <USBD_CtlSendStatus>
 800ea66:	e017      	b.n	800ea98 <USBD_LL_DataOutStage+0xc8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL)&&
 800ea68:	68fa      	ldr	r2, [r7, #12]
 800ea6a:	2384      	movs	r3, #132	; 0x84
 800ea6c:	009b      	lsls	r3, r3, #2
 800ea6e:	58d3      	ldr	r3, [r2, r3]
 800ea70:	699b      	ldr	r3, [r3, #24]
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d010      	beq.n	800ea98 <USBD_LL_DataOutStage+0xc8>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ea76:	68fa      	ldr	r2, [r7, #12]
 800ea78:	23fe      	movs	r3, #254	; 0xfe
 800ea7a:	005b      	lsls	r3, r3, #1
 800ea7c:	5cd3      	ldrb	r3, [r2, r3]
  else if((pdev->pClass->DataOut != NULL)&&
 800ea7e:	2b03      	cmp	r3, #3
 800ea80:	d10a      	bne.n	800ea98 <USBD_LL_DataOutStage+0xc8>
  {
    pdev->pClass->DataOut(pdev, epnum); 
 800ea82:	68fa      	ldr	r2, [r7, #12]
 800ea84:	2384      	movs	r3, #132	; 0x84
 800ea86:	009b      	lsls	r3, r3, #2
 800ea88:	58d3      	ldr	r3, [r2, r3]
 800ea8a:	699b      	ldr	r3, [r3, #24]
 800ea8c:	220b      	movs	r2, #11
 800ea8e:	18ba      	adds	r2, r7, r2
 800ea90:	7811      	ldrb	r1, [r2, #0]
 800ea92:	68fa      	ldr	r2, [r7, #12]
 800ea94:	0010      	movs	r0, r2
 800ea96:	4798      	blx	r3
  }  
  return USBD_OK;
 800ea98:	2300      	movs	r3, #0
}
 800ea9a:	0018      	movs	r0, r3
 800ea9c:	46bd      	mov	sp, r7
 800ea9e:	b006      	add	sp, #24
 800eaa0:	bd80      	pop	{r7, pc}

0800eaa2 <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 800eaa2:	b580      	push	{r7, lr}
 800eaa4:	b086      	sub	sp, #24
 800eaa6:	af00      	add	r7, sp, #0
 800eaa8:	60f8      	str	r0, [r7, #12]
 800eaaa:	607a      	str	r2, [r7, #4]
 800eaac:	200b      	movs	r0, #11
 800eaae:	183b      	adds	r3, r7, r0
 800eab0:	1c0a      	adds	r2, r1, #0
 800eab2:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 800eab4:	183b      	adds	r3, r7, r0
 800eab6:	781b      	ldrb	r3, [r3, #0]
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d15c      	bne.n	800eb76 <USBD_LL_DataInStage+0xd4>
  {
    pep = &pdev->ep_in[0];
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	3314      	adds	r3, #20
 800eac0:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800eac2:	68fa      	ldr	r2, [r7, #12]
 800eac4:	23fa      	movs	r3, #250	; 0xfa
 800eac6:	005b      	lsls	r3, r3, #1
 800eac8:	58d3      	ldr	r3, [r2, r3]
 800eaca:	2b02      	cmp	r3, #2
 800eacc:	d16b      	bne.n	800eba6 <USBD_LL_DataInStage+0x104>
    {
      if(pep->rem_length > pep->maxpacket)
 800eace:	697b      	ldr	r3, [r7, #20]
 800ead0:	689a      	ldr	r2, [r3, #8]
 800ead2:	697b      	ldr	r3, [r7, #20]
 800ead4:	68db      	ldr	r3, [r3, #12]
 800ead6:	429a      	cmp	r2, r3
 800ead8:	d90f      	bls.n	800eafa <USBD_LL_DataInStage+0x58>
      {
        pep->rem_length -=  pep->maxpacket;
 800eada:	697b      	ldr	r3, [r7, #20]
 800eadc:	689a      	ldr	r2, [r3, #8]
 800eade:	697b      	ldr	r3, [r7, #20]
 800eae0:	68db      	ldr	r3, [r3, #12]
 800eae2:	1ad2      	subs	r2, r2, r3
 800eae4:	697b      	ldr	r3, [r7, #20]
 800eae6:	609a      	str	r2, [r3, #8]
        
        USBD_CtlContinueSendData (pdev, 
                                  pdata, 
                                  pep->rem_length);
 800eae8:	697b      	ldr	r3, [r7, #20]
 800eaea:	689b      	ldr	r3, [r3, #8]
        USBD_CtlContinueSendData (pdev, 
 800eaec:	b29a      	uxth	r2, r3
 800eaee:	6879      	ldr	r1, [r7, #4]
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	0018      	movs	r0, r3
 800eaf4:	f001 f854 	bl	800fba0 <USBD_CtlContinueSendData>
 800eaf8:	e055      	b.n	800eba6 <USBD_LL_DataInStage+0x104>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0) &&
 800eafa:	697b      	ldr	r3, [r7, #20]
 800eafc:	685a      	ldr	r2, [r3, #4]
 800eafe:	697b      	ldr	r3, [r7, #20]
 800eb00:	68db      	ldr	r3, [r3, #12]
 800eb02:	0019      	movs	r1, r3
 800eb04:	0010      	movs	r0, r2
 800eb06:	f7f1 fb97 	bl	8000238 <__aeabi_uidivmod>
 800eb0a:	1e0b      	subs	r3, r1, #0
 800eb0c:	d119      	bne.n	800eb42 <USBD_LL_DataInStage+0xa0>
           (pep->total_length >= pep->maxpacket) &&
 800eb0e:	697b      	ldr	r3, [r7, #20]
 800eb10:	685a      	ldr	r2, [r3, #4]
 800eb12:	697b      	ldr	r3, [r7, #20]
 800eb14:	68db      	ldr	r3, [r3, #12]
        if((pep->total_length % pep->maxpacket == 0) &&
 800eb16:	429a      	cmp	r2, r3
 800eb18:	d313      	bcc.n	800eb42 <USBD_LL_DataInStage+0xa0>
             (pep->total_length < pdev->ep0_data_len ))
 800eb1a:	697b      	ldr	r3, [r7, #20]
 800eb1c:	685a      	ldr	r2, [r3, #4]
 800eb1e:	68f9      	ldr	r1, [r7, #12]
 800eb20:	23fc      	movs	r3, #252	; 0xfc
 800eb22:	005b      	lsls	r3, r3, #1
 800eb24:	58cb      	ldr	r3, [r1, r3]
           (pep->total_length >= pep->maxpacket) &&
 800eb26:	429a      	cmp	r2, r3
 800eb28:	d20b      	bcs.n	800eb42 <USBD_LL_DataInStage+0xa0>
        {
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	2200      	movs	r2, #0
 800eb2e:	2100      	movs	r1, #0
 800eb30:	0018      	movs	r0, r3
 800eb32:	f001 f835 	bl	800fba0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 800eb36:	68fa      	ldr	r2, [r7, #12]
 800eb38:	23fc      	movs	r3, #252	; 0xfc
 800eb3a:	005b      	lsls	r3, r3, #1
 800eb3c:	2100      	movs	r1, #0
 800eb3e:	50d1      	str	r1, [r2, r3]
 800eb40:	e031      	b.n	800eba6 <USBD_LL_DataInStage+0x104>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800eb42:	68fa      	ldr	r2, [r7, #12]
 800eb44:	2384      	movs	r3, #132	; 0x84
 800eb46:	009b      	lsls	r3, r3, #2
 800eb48:	58d3      	ldr	r3, [r2, r3]
 800eb4a:	68db      	ldr	r3, [r3, #12]
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d00d      	beq.n	800eb6c <USBD_LL_DataInStage+0xca>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 800eb50:	68fa      	ldr	r2, [r7, #12]
 800eb52:	23fe      	movs	r3, #254	; 0xfe
 800eb54:	005b      	lsls	r3, r3, #1
 800eb56:	5cd3      	ldrb	r3, [r2, r3]
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800eb58:	2b03      	cmp	r3, #3
 800eb5a:	d107      	bne.n	800eb6c <USBD_LL_DataInStage+0xca>
          {
            pdev->pClass->EP0_TxSent(pdev); 
 800eb5c:	68fa      	ldr	r2, [r7, #12]
 800eb5e:	2384      	movs	r3, #132	; 0x84
 800eb60:	009b      	lsls	r3, r3, #2
 800eb62:	58d3      	ldr	r3, [r2, r3]
 800eb64:	68db      	ldr	r3, [r3, #12]
 800eb66:	68fa      	ldr	r2, [r7, #12]
 800eb68:	0010      	movs	r0, r2
 800eb6a:	4798      	blx	r3
          }          
          USBD_CtlReceiveStatus(pdev);
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	0018      	movs	r0, r3
 800eb70:	f001 f850 	bl	800fc14 <USBD_CtlReceiveStatus>
 800eb74:	e017      	b.n	800eba6 <USBD_LL_DataInStage+0x104>
        }
      }
    }
  }
  else if((pdev->pClass->DataIn != NULL)&& 
 800eb76:	68fa      	ldr	r2, [r7, #12]
 800eb78:	2384      	movs	r3, #132	; 0x84
 800eb7a:	009b      	lsls	r3, r3, #2
 800eb7c:	58d3      	ldr	r3, [r2, r3]
 800eb7e:	695b      	ldr	r3, [r3, #20]
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d010      	beq.n	800eba6 <USBD_LL_DataInStage+0x104>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800eb84:	68fa      	ldr	r2, [r7, #12]
 800eb86:	23fe      	movs	r3, #254	; 0xfe
 800eb88:	005b      	lsls	r3, r3, #1
 800eb8a:	5cd3      	ldrb	r3, [r2, r3]
  else if((pdev->pClass->DataIn != NULL)&& 
 800eb8c:	2b03      	cmp	r3, #3
 800eb8e:	d10a      	bne.n	800eba6 <USBD_LL_DataInStage+0x104>
  {
    pdev->pClass->DataIn(pdev, epnum); 
 800eb90:	68fa      	ldr	r2, [r7, #12]
 800eb92:	2384      	movs	r3, #132	; 0x84
 800eb94:	009b      	lsls	r3, r3, #2
 800eb96:	58d3      	ldr	r3, [r2, r3]
 800eb98:	695b      	ldr	r3, [r3, #20]
 800eb9a:	220b      	movs	r2, #11
 800eb9c:	18ba      	adds	r2, r7, r2
 800eb9e:	7811      	ldrb	r1, [r2, #0]
 800eba0:	68fa      	ldr	r2, [r7, #12]
 800eba2:	0010      	movs	r0, r2
 800eba4:	4798      	blx	r3
  }  
  return USBD_OK;
 800eba6:	2300      	movs	r3, #0
}
 800eba8:	0018      	movs	r0, r3
 800ebaa:	46bd      	mov	sp, r7
 800ebac:	b006      	add	sp, #24
 800ebae:	bd80      	pop	{r7, pc}

0800ebb0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800ebb0:	b580      	push	{r7, lr}
 800ebb2:	b082      	sub	sp, #8
 800ebb4:	af00      	add	r7, sp, #0
 800ebb6:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 800ebb8:	6878      	ldr	r0, [r7, #4]
 800ebba:	2340      	movs	r3, #64	; 0x40
 800ebbc:	2200      	movs	r2, #0
 800ebbe:	2100      	movs	r1, #0
 800ebc0:	f7ff fd00 	bl	800e5c4 <USBD_LL_OpenEP>
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ebc4:	687a      	ldr	r2, [r7, #4]
 800ebc6:	2388      	movs	r3, #136	; 0x88
 800ebc8:	005b      	lsls	r3, r3, #1
 800ebca:	2140      	movs	r1, #64	; 0x40
 800ebcc:	50d1      	str	r1, [r2, r3]
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 800ebce:	6878      	ldr	r0, [r7, #4]
 800ebd0:	2340      	movs	r3, #64	; 0x40
 800ebd2:	2200      	movs	r2, #0
 800ebd4:	2180      	movs	r1, #128	; 0x80
 800ebd6:	f7ff fcf5 	bl	800e5c4 <USBD_LL_OpenEP>
              0x80,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	2240      	movs	r2, #64	; 0x40
 800ebde:	621a      	str	r2, [r3, #32]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ebe0:	687a      	ldr	r2, [r7, #4]
 800ebe2:	23fe      	movs	r3, #254	; 0xfe
 800ebe4:	005b      	lsls	r3, r3, #1
 800ebe6:	2101      	movs	r1, #1
 800ebe8:	54d1      	strb	r1, [r2, r3]
  
  if (pdev->pClassData) 
 800ebea:	687a      	ldr	r2, [r7, #4]
 800ebec:	2385      	movs	r3, #133	; 0x85
 800ebee:	009b      	lsls	r3, r3, #2
 800ebf0:	58d3      	ldr	r3, [r2, r3]
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d00a      	beq.n	800ec0c <USBD_LL_Reset+0x5c>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 800ebf6:	687a      	ldr	r2, [r7, #4]
 800ebf8:	2384      	movs	r3, #132	; 0x84
 800ebfa:	009b      	lsls	r3, r3, #2
 800ebfc:	58d3      	ldr	r3, [r2, r3]
 800ebfe:	685a      	ldr	r2, [r3, #4]
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	685b      	ldr	r3, [r3, #4]
 800ec04:	b2d9      	uxtb	r1, r3
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	0018      	movs	r0, r3
 800ec0a:	4790      	blx	r2
 
  
  return USBD_OK;
 800ec0c:	2300      	movs	r3, #0
}
 800ec0e:	0018      	movs	r0, r3
 800ec10:	46bd      	mov	sp, r7
 800ec12:	b002      	add	sp, #8
 800ec14:	bd80      	pop	{r7, pc}

0800ec16 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 800ec16:	b580      	push	{r7, lr}
 800ec18:	b082      	sub	sp, #8
 800ec1a:	af00      	add	r7, sp, #0
 800ec1c:	6078      	str	r0, [r7, #4]
 800ec1e:	000a      	movs	r2, r1
 800ec20:	1cfb      	adds	r3, r7, #3
 800ec22:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	1cfa      	adds	r2, r7, #3
 800ec28:	7812      	ldrb	r2, [r2, #0]
 800ec2a:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 800ec2c:	2300      	movs	r3, #0
}
 800ec2e:	0018      	movs	r0, r3
 800ec30:	46bd      	mov	sp, r7
 800ec32:	b002      	add	sp, #8
 800ec34:	bd80      	pop	{r7, pc}

0800ec36 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800ec36:	b580      	push	{r7, lr}
 800ec38:	b082      	sub	sp, #8
 800ec3a:	af00      	add	r7, sp, #0
 800ec3c:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800ec3e:	687a      	ldr	r2, [r7, #4]
 800ec40:	23fe      	movs	r3, #254	; 0xfe
 800ec42:	005b      	lsls	r3, r3, #1
 800ec44:	5cd3      	ldrb	r3, [r2, r3]
 800ec46:	2b03      	cmp	r3, #3
 800ec48:	d10e      	bne.n	800ec68 <USBD_LL_SOF+0x32>
  {
    if(pdev->pClass->SOF != NULL)
 800ec4a:	687a      	ldr	r2, [r7, #4]
 800ec4c:	2384      	movs	r3, #132	; 0x84
 800ec4e:	009b      	lsls	r3, r3, #2
 800ec50:	58d3      	ldr	r3, [r2, r3]
 800ec52:	69db      	ldr	r3, [r3, #28]
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d007      	beq.n	800ec68 <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 800ec58:	687a      	ldr	r2, [r7, #4]
 800ec5a:	2384      	movs	r3, #132	; 0x84
 800ec5c:	009b      	lsls	r3, r3, #2
 800ec5e:	58d3      	ldr	r3, [r2, r3]
 800ec60:	69db      	ldr	r3, [r3, #28]
 800ec62:	687a      	ldr	r2, [r7, #4]
 800ec64:	0010      	movs	r0, r2
 800ec66:	4798      	blx	r3
    }
  }
  return USBD_OK;
 800ec68:	2300      	movs	r3, #0
}
 800ec6a:	0018      	movs	r0, r3
 800ec6c:	46bd      	mov	sp, r7
 800ec6e:	b002      	add	sp, #8
 800ec70:	bd80      	pop	{r7, pc}
	...

0800ec74 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800ec74:	b580      	push	{r7, lr}
 800ec76:	b084      	sub	sp, #16
 800ec78:	af00      	add	r7, sp, #0
 800ec7a:	6078      	str	r0, [r7, #4]
 800ec7c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;  
 800ec7e:	230f      	movs	r3, #15
 800ec80:	18fb      	adds	r3, r7, r3
 800ec82:	2200      	movs	r2, #0
 800ec84:	701a      	strb	r2, [r3, #0]
  
  switch (req->bRequest) 
 800ec86:	683b      	ldr	r3, [r7, #0]
 800ec88:	785b      	ldrb	r3, [r3, #1]
 800ec8a:	2b09      	cmp	r3, #9
 800ec8c:	d835      	bhi.n	800ecfa <USBD_StdDevReq+0x86>
 800ec8e:	009a      	lsls	r2, r3, #2
 800ec90:	4b21      	ldr	r3, [pc, #132]	; (800ed18 <USBD_StdDevReq+0xa4>)
 800ec92:	18d3      	adds	r3, r2, r3
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	469f      	mov	pc, r3
  {
  case USB_REQ_GET_DESCRIPTOR: 
    
    USBD_GetDescriptor (pdev, req) ;
 800ec98:	683a      	ldr	r2, [r7, #0]
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	0011      	movs	r1, r2
 800ec9e:	0018      	movs	r0, r3
 800eca0:	f000 f97f 	bl	800efa2 <USBD_GetDescriptor>
    break;
 800eca4:	e030      	b.n	800ed08 <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_ADDRESS:                      
    USBD_SetAddress(pdev, req);
 800eca6:	683a      	ldr	r2, [r7, #0]
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	0011      	movs	r1, r2
 800ecac:	0018      	movs	r0, r3
 800ecae:	f000 fa19 	bl	800f0e4 <USBD_SetAddress>
    break;
 800ecb2:	e029      	b.n	800ed08 <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_CONFIGURATION:                    
    USBD_SetConfig (pdev , req);
 800ecb4:	683a      	ldr	r2, [r7, #0]
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	0011      	movs	r1, r2
 800ecba:	0018      	movs	r0, r3
 800ecbc:	f000 fa60 	bl	800f180 <USBD_SetConfig>
    break;
 800ecc0:	e022      	b.n	800ed08 <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_CONFIGURATION:                 
    USBD_GetConfig (pdev , req);
 800ecc2:	683a      	ldr	r2, [r7, #0]
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	0011      	movs	r1, r2
 800ecc8:	0018      	movs	r0, r3
 800ecca:	f000 faf5 	bl	800f2b8 <USBD_GetConfig>
    break;
 800ecce:	e01b      	b.n	800ed08 <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_STATUS:                                  
    USBD_GetStatus (pdev , req);
 800ecd0:	683a      	ldr	r2, [r7, #0]
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	0011      	movs	r1, r2
 800ecd6:	0018      	movs	r0, r3
 800ecd8:	f000 fb26 	bl	800f328 <USBD_GetStatus>
    break;
 800ecdc:	e014      	b.n	800ed08 <USBD_StdDevReq+0x94>
    
    
  case USB_REQ_SET_FEATURE:   
    USBD_SetFeature (pdev , req);    
 800ecde:	683a      	ldr	r2, [r7, #0]
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	0011      	movs	r1, r2
 800ece4:	0018      	movs	r0, r3
 800ece6:	f000 fb4e 	bl	800f386 <USBD_SetFeature>
    break;
 800ecea:	e00d      	b.n	800ed08 <USBD_StdDevReq+0x94>
    
  case USB_REQ_CLEAR_FEATURE:                                   
    USBD_ClrFeature (pdev , req);
 800ecec:	683a      	ldr	r2, [r7, #0]
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	0011      	movs	r1, r2
 800ecf2:	0018      	movs	r0, r3
 800ecf4:	f000 fb66 	bl	800f3c4 <USBD_ClrFeature>
    break;
 800ecf8:	e006      	b.n	800ed08 <USBD_StdDevReq+0x94>
    
  default:  
    USBD_CtlError(pdev , req);
 800ecfa:	683a      	ldr	r2, [r7, #0]
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	0011      	movs	r1, r2
 800ed00:	0018      	movs	r0, r3
 800ed02:	f000 fbc9 	bl	800f498 <USBD_CtlError>
    break;
 800ed06:	46c0      	nop			; (mov r8, r8)
  }
  
  return ret;
 800ed08:	230f      	movs	r3, #15
 800ed0a:	18fb      	adds	r3, r7, r3
 800ed0c:	781b      	ldrb	r3, [r3, #0]
}
 800ed0e:	0018      	movs	r0, r3
 800ed10:	46bd      	mov	sp, r7
 800ed12:	b004      	add	sp, #16
 800ed14:	bd80      	pop	{r7, pc}
 800ed16:	46c0      	nop			; (mov r8, r8)
 800ed18:	0800fdd8 	.word	0x0800fdd8

0800ed1c <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800ed1c:	b580      	push	{r7, lr}
 800ed1e:	b084      	sub	sp, #16
 800ed20:	af00      	add	r7, sp, #0
 800ed22:	6078      	str	r0, [r7, #4]
 800ed24:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK; 
 800ed26:	230f      	movs	r3, #15
 800ed28:	18fb      	adds	r3, r7, r3
 800ed2a:	2200      	movs	r2, #0
 800ed2c:	701a      	strb	r2, [r3, #0]
  
  switch (pdev->dev_state) 
 800ed2e:	687a      	ldr	r2, [r7, #4]
 800ed30:	23fe      	movs	r3, #254	; 0xfe
 800ed32:	005b      	lsls	r3, r3, #1
 800ed34:	5cd3      	ldrb	r3, [r2, r3]
 800ed36:	2b03      	cmp	r3, #3
 800ed38:	d122      	bne.n	800ed80 <USBD_StdItfReq+0x64>
  {
  case USBD_STATE_CONFIGURED:
    
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 800ed3a:	683b      	ldr	r3, [r7, #0]
 800ed3c:	889b      	ldrh	r3, [r3, #4]
 800ed3e:	b2db      	uxtb	r3, r3
 800ed40:	2b02      	cmp	r3, #2
 800ed42:	d816      	bhi.n	800ed72 <USBD_StdItfReq+0x56>
    {
      pdev->pClass->Setup (pdev, req); 
 800ed44:	687a      	ldr	r2, [r7, #4]
 800ed46:	2384      	movs	r3, #132	; 0x84
 800ed48:	009b      	lsls	r3, r3, #2
 800ed4a:	58d3      	ldr	r3, [r2, r3]
 800ed4c:	689b      	ldr	r3, [r3, #8]
 800ed4e:	6839      	ldr	r1, [r7, #0]
 800ed50:	687a      	ldr	r2, [r7, #4]
 800ed52:	0010      	movs	r0, r2
 800ed54:	4798      	blx	r3
      
      if((req->wLength == 0)&& (ret == USBD_OK))
 800ed56:	683b      	ldr	r3, [r7, #0]
 800ed58:	88db      	ldrh	r3, [r3, #6]
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d117      	bne.n	800ed8e <USBD_StdItfReq+0x72>
 800ed5e:	230f      	movs	r3, #15
 800ed60:	18fb      	adds	r3, r7, r3
 800ed62:	781b      	ldrb	r3, [r3, #0]
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d112      	bne.n	800ed8e <USBD_StdItfReq+0x72>
      {
         USBD_CtlSendStatus(pdev);
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	0018      	movs	r0, r3
 800ed6c:	f000 ff3e 	bl	800fbec <USBD_CtlSendStatus>
    } 
    else 
    {                                               
       USBD_CtlError(pdev , req);
    }
    break;
 800ed70:	e00d      	b.n	800ed8e <USBD_StdItfReq+0x72>
       USBD_CtlError(pdev , req);
 800ed72:	683a      	ldr	r2, [r7, #0]
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	0011      	movs	r1, r2
 800ed78:	0018      	movs	r0, r3
 800ed7a:	f000 fb8d 	bl	800f498 <USBD_CtlError>
    break;
 800ed7e:	e006      	b.n	800ed8e <USBD_StdItfReq+0x72>
    
  default:
     USBD_CtlError(pdev , req);
 800ed80:	683a      	ldr	r2, [r7, #0]
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	0011      	movs	r1, r2
 800ed86:	0018      	movs	r0, r3
 800ed88:	f000 fb86 	bl	800f498 <USBD_CtlError>
    break;
 800ed8c:	e000      	b.n	800ed90 <USBD_StdItfReq+0x74>
    break;
 800ed8e:	46c0      	nop			; (mov r8, r8)
  }
  return USBD_OK;
 800ed90:	2300      	movs	r3, #0
}
 800ed92:	0018      	movs	r0, r3
 800ed94:	46bd      	mov	sp, r7
 800ed96:	b004      	add	sp, #16
 800ed98:	bd80      	pop	{r7, pc}

0800ed9a <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800ed9a:	b580      	push	{r7, lr}
 800ed9c:	b084      	sub	sp, #16
 800ed9e:	af00      	add	r7, sp, #0
 800eda0:	6078      	str	r0, [r7, #4]
 800eda2:	6039      	str	r1, [r7, #0]
  
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
 800eda4:	230f      	movs	r3, #15
 800eda6:	18fb      	adds	r3, r7, r3
 800eda8:	2200      	movs	r2, #0
 800edaa:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
 800edac:	683b      	ldr	r3, [r7, #0]
 800edae:	889a      	ldrh	r2, [r3, #4]
 800edb0:	230e      	movs	r3, #14
 800edb2:	18fb      	adds	r3, r7, r3
 800edb4:	701a      	strb	r2, [r3, #0]
  
  switch (req->bRequest) 
 800edb6:	683b      	ldr	r3, [r7, #0]
 800edb8:	785b      	ldrb	r3, [r3, #1]
 800edba:	2b01      	cmp	r3, #1
 800edbc:	d04e      	beq.n	800ee5c <USBD_StdEPReq+0xc2>
 800edbe:	2b03      	cmp	r3, #3
 800edc0:	d003      	beq.n	800edca <USBD_StdEPReq+0x30>
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d100      	bne.n	800edc8 <USBD_StdEPReq+0x2e>
 800edc6:	e090      	b.n	800eeea <USBD_StdEPReq+0x150>
      break;
    }
    break;
    
  default:
    break;
 800edc8:	e0e4      	b.n	800ef94 <USBD_StdEPReq+0x1fa>
    switch (pdev->dev_state) 
 800edca:	687a      	ldr	r2, [r7, #4]
 800edcc:	23fe      	movs	r3, #254	; 0xfe
 800edce:	005b      	lsls	r3, r3, #1
 800edd0:	5cd3      	ldrb	r3, [r2, r3]
 800edd2:	2b02      	cmp	r3, #2
 800edd4:	d002      	beq.n	800eddc <USBD_StdEPReq+0x42>
 800edd6:	2b03      	cmp	r3, #3
 800edd8:	d013      	beq.n	800ee02 <USBD_StdEPReq+0x68>
 800edda:	e036      	b.n	800ee4a <USBD_StdEPReq+0xb0>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800eddc:	230e      	movs	r3, #14
 800edde:	18fb      	adds	r3, r7, r3
 800ede0:	781b      	ldrb	r3, [r3, #0]
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d038      	beq.n	800ee58 <USBD_StdEPReq+0xbe>
 800ede6:	230e      	movs	r3, #14
 800ede8:	18fb      	adds	r3, r7, r3
 800edea:	781b      	ldrb	r3, [r3, #0]
 800edec:	2b80      	cmp	r3, #128	; 0x80
 800edee:	d033      	beq.n	800ee58 <USBD_StdEPReq+0xbe>
        USBD_LL_StallEP(pdev , ep_addr);
 800edf0:	230e      	movs	r3, #14
 800edf2:	18fb      	adds	r3, r7, r3
 800edf4:	781a      	ldrb	r2, [r3, #0]
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	0011      	movs	r1, r2
 800edfa:	0018      	movs	r0, r3
 800edfc:	f7ff fc1a 	bl	800e634 <USBD_LL_StallEP>
      break;	
 800ee00:	e02a      	b.n	800ee58 <USBD_StdEPReq+0xbe>
      if (req->wValue == USB_FEATURE_EP_HALT)
 800ee02:	683b      	ldr	r3, [r7, #0]
 800ee04:	885b      	ldrh	r3, [r3, #2]
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d111      	bne.n	800ee2e <USBD_StdEPReq+0x94>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800ee0a:	230e      	movs	r3, #14
 800ee0c:	18fb      	adds	r3, r7, r3
 800ee0e:	781b      	ldrb	r3, [r3, #0]
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	d00c      	beq.n	800ee2e <USBD_StdEPReq+0x94>
 800ee14:	230e      	movs	r3, #14
 800ee16:	18fb      	adds	r3, r7, r3
 800ee18:	781b      	ldrb	r3, [r3, #0]
 800ee1a:	2b80      	cmp	r3, #128	; 0x80
 800ee1c:	d007      	beq.n	800ee2e <USBD_StdEPReq+0x94>
          USBD_LL_StallEP(pdev , ep_addr);
 800ee1e:	230e      	movs	r3, #14
 800ee20:	18fb      	adds	r3, r7, r3
 800ee22:	781a      	ldrb	r2, [r3, #0]
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	0011      	movs	r1, r2
 800ee28:	0018      	movs	r0, r3
 800ee2a:	f7ff fc03 	bl	800e634 <USBD_LL_StallEP>
      pdev->pClass->Setup (pdev, req);   
 800ee2e:	687a      	ldr	r2, [r7, #4]
 800ee30:	2384      	movs	r3, #132	; 0x84
 800ee32:	009b      	lsls	r3, r3, #2
 800ee34:	58d3      	ldr	r3, [r2, r3]
 800ee36:	689b      	ldr	r3, [r3, #8]
 800ee38:	6839      	ldr	r1, [r7, #0]
 800ee3a:	687a      	ldr	r2, [r7, #4]
 800ee3c:	0010      	movs	r0, r2
 800ee3e:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	0018      	movs	r0, r3
 800ee44:	f000 fed2 	bl	800fbec <USBD_CtlSendStatus>
      break;
 800ee48:	e007      	b.n	800ee5a <USBD_StdEPReq+0xc0>
      USBD_CtlError(pdev , req);
 800ee4a:	683a      	ldr	r2, [r7, #0]
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	0011      	movs	r1, r2
 800ee50:	0018      	movs	r0, r3
 800ee52:	f000 fb21 	bl	800f498 <USBD_CtlError>
      break;    
 800ee56:	e000      	b.n	800ee5a <USBD_StdEPReq+0xc0>
      break;	
 800ee58:	46c0      	nop			; (mov r8, r8)
    break;
 800ee5a:	e09b      	b.n	800ef94 <USBD_StdEPReq+0x1fa>
    switch (pdev->dev_state) 
 800ee5c:	687a      	ldr	r2, [r7, #4]
 800ee5e:	23fe      	movs	r3, #254	; 0xfe
 800ee60:	005b      	lsls	r3, r3, #1
 800ee62:	5cd3      	ldrb	r3, [r2, r3]
 800ee64:	2b02      	cmp	r3, #2
 800ee66:	d002      	beq.n	800ee6e <USBD_StdEPReq+0xd4>
 800ee68:	2b03      	cmp	r3, #3
 800ee6a:	d013      	beq.n	800ee94 <USBD_StdEPReq+0xfa>
 800ee6c:	e032      	b.n	800eed4 <USBD_StdEPReq+0x13a>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800ee6e:	230e      	movs	r3, #14
 800ee70:	18fb      	adds	r3, r7, r3
 800ee72:	781b      	ldrb	r3, [r3, #0]
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d034      	beq.n	800eee2 <USBD_StdEPReq+0x148>
 800ee78:	230e      	movs	r3, #14
 800ee7a:	18fb      	adds	r3, r7, r3
 800ee7c:	781b      	ldrb	r3, [r3, #0]
 800ee7e:	2b80      	cmp	r3, #128	; 0x80
 800ee80:	d02f      	beq.n	800eee2 <USBD_StdEPReq+0x148>
        USBD_LL_StallEP(pdev , ep_addr);
 800ee82:	230e      	movs	r3, #14
 800ee84:	18fb      	adds	r3, r7, r3
 800ee86:	781a      	ldrb	r2, [r3, #0]
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	0011      	movs	r1, r2
 800ee8c:	0018      	movs	r0, r3
 800ee8e:	f7ff fbd1 	bl	800e634 <USBD_LL_StallEP>
      break;	
 800ee92:	e026      	b.n	800eee2 <USBD_StdEPReq+0x148>
      if (req->wValue == USB_FEATURE_EP_HALT)
 800ee94:	683b      	ldr	r3, [r7, #0]
 800ee96:	885b      	ldrh	r3, [r3, #2]
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d124      	bne.n	800eee6 <USBD_StdEPReq+0x14c>
        if ((ep_addr & 0x7F) != 0x00) 
 800ee9c:	230e      	movs	r3, #14
 800ee9e:	18fb      	adds	r3, r7, r3
 800eea0:	781b      	ldrb	r3, [r3, #0]
 800eea2:	227f      	movs	r2, #127	; 0x7f
 800eea4:	4013      	ands	r3, r2
 800eea6:	d010      	beq.n	800eeca <USBD_StdEPReq+0x130>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 800eea8:	230e      	movs	r3, #14
 800eeaa:	18fb      	adds	r3, r7, r3
 800eeac:	781a      	ldrb	r2, [r3, #0]
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	0011      	movs	r1, r2
 800eeb2:	0018      	movs	r0, r3
 800eeb4:	f7ff fbd4 	bl	800e660 <USBD_LL_ClearStallEP>
          pdev->pClass->Setup (pdev, req);
 800eeb8:	687a      	ldr	r2, [r7, #4]
 800eeba:	2384      	movs	r3, #132	; 0x84
 800eebc:	009b      	lsls	r3, r3, #2
 800eebe:	58d3      	ldr	r3, [r2, r3]
 800eec0:	689b      	ldr	r3, [r3, #8]
 800eec2:	6839      	ldr	r1, [r7, #0]
 800eec4:	687a      	ldr	r2, [r7, #4]
 800eec6:	0010      	movs	r0, r2
 800eec8:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	0018      	movs	r0, r3
 800eece:	f000 fe8d 	bl	800fbec <USBD_CtlSendStatus>
      break;
 800eed2:	e008      	b.n	800eee6 <USBD_StdEPReq+0x14c>
      USBD_CtlError(pdev , req);
 800eed4:	683a      	ldr	r2, [r7, #0]
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	0011      	movs	r1, r2
 800eeda:	0018      	movs	r0, r3
 800eedc:	f000 fadc 	bl	800f498 <USBD_CtlError>
      break;    
 800eee0:	e002      	b.n	800eee8 <USBD_StdEPReq+0x14e>
      break;	
 800eee2:	46c0      	nop			; (mov r8, r8)
 800eee4:	e056      	b.n	800ef94 <USBD_StdEPReq+0x1fa>
      break;
 800eee6:	46c0      	nop			; (mov r8, r8)
    break;
 800eee8:	e054      	b.n	800ef94 <USBD_StdEPReq+0x1fa>
    switch (pdev->dev_state) 
 800eeea:	687a      	ldr	r2, [r7, #4]
 800eeec:	23fe      	movs	r3, #254	; 0xfe
 800eeee:	005b      	lsls	r3, r3, #1
 800eef0:	5cd3      	ldrb	r3, [r2, r3]
 800eef2:	2b02      	cmp	r3, #2
 800eef4:	d002      	beq.n	800eefc <USBD_StdEPReq+0x162>
 800eef6:	2b03      	cmp	r3, #3
 800eef8:	d00f      	beq.n	800ef1a <USBD_StdEPReq+0x180>
 800eefa:	e042      	b.n	800ef82 <USBD_StdEPReq+0x1e8>
      if ((ep_addr & 0x7F) != 0x00) 
 800eefc:	230e      	movs	r3, #14
 800eefe:	18fb      	adds	r3, r7, r3
 800ef00:	781b      	ldrb	r3, [r3, #0]
 800ef02:	227f      	movs	r2, #127	; 0x7f
 800ef04:	4013      	ands	r3, r2
 800ef06:	d043      	beq.n	800ef90 <USBD_StdEPReq+0x1f6>
        USBD_LL_StallEP(pdev , ep_addr);
 800ef08:	230e      	movs	r3, #14
 800ef0a:	18fb      	adds	r3, r7, r3
 800ef0c:	781a      	ldrb	r2, [r3, #0]
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	0011      	movs	r1, r2
 800ef12:	0018      	movs	r0, r3
 800ef14:	f7ff fb8e 	bl	800e634 <USBD_LL_StallEP>
      break;	
 800ef18:	e03a      	b.n	800ef90 <USBD_StdEPReq+0x1f6>
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 800ef1a:	230e      	movs	r3, #14
 800ef1c:	18fb      	adds	r3, r7, r3
 800ef1e:	781b      	ldrb	r3, [r3, #0]
 800ef20:	b25b      	sxtb	r3, r3
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	da0a      	bge.n	800ef3c <USBD_StdEPReq+0x1a2>
 800ef26:	230e      	movs	r3, #14
 800ef28:	18fb      	adds	r3, r7, r3
 800ef2a:	781b      	ldrb	r3, [r3, #0]
 800ef2c:	227f      	movs	r2, #127	; 0x7f
 800ef2e:	4013      	ands	r3, r2
 800ef30:	3301      	adds	r3, #1
 800ef32:	011b      	lsls	r3, r3, #4
 800ef34:	687a      	ldr	r2, [r7, #4]
 800ef36:	18d3      	adds	r3, r2, r3
 800ef38:	3304      	adds	r3, #4
 800ef3a:	e009      	b.n	800ef50 <USBD_StdEPReq+0x1b6>
                                         &pdev->ep_out[ep_addr & 0x7F];
 800ef3c:	230e      	movs	r3, #14
 800ef3e:	18fb      	adds	r3, r7, r3
 800ef40:	781b      	ldrb	r3, [r3, #0]
 800ef42:	227f      	movs	r2, #127	; 0x7f
 800ef44:	4013      	ands	r3, r2
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 800ef46:	3310      	adds	r3, #16
 800ef48:	011b      	lsls	r3, r3, #4
 800ef4a:	687a      	ldr	r2, [r7, #4]
 800ef4c:	18d3      	adds	r3, r2, r3
 800ef4e:	3304      	adds	r3, #4
 800ef50:	60bb      	str	r3, [r7, #8]
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 800ef52:	230e      	movs	r3, #14
 800ef54:	18fb      	adds	r3, r7, r3
 800ef56:	781a      	ldrb	r2, [r3, #0]
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	0011      	movs	r1, r2
 800ef5c:	0018      	movs	r0, r3
 800ef5e:	f7ff fb95 	bl	800e68c <USBD_LL_IsStallEP>
 800ef62:	1e03      	subs	r3, r0, #0
 800ef64:	d003      	beq.n	800ef6e <USBD_StdEPReq+0x1d4>
        pep->status = 0x0001;     
 800ef66:	68bb      	ldr	r3, [r7, #8]
 800ef68:	2201      	movs	r2, #1
 800ef6a:	601a      	str	r2, [r3, #0]
 800ef6c:	e002      	b.n	800ef74 <USBD_StdEPReq+0x1da>
        pep->status = 0x0000;  
 800ef6e:	68bb      	ldr	r3, [r7, #8]
 800ef70:	2200      	movs	r2, #0
 800ef72:	601a      	str	r2, [r3, #0]
                        (uint8_t *)&pep->status,
 800ef74:	68b9      	ldr	r1, [r7, #8]
      USBD_CtlSendData (pdev,
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	2202      	movs	r2, #2
 800ef7a:	0018      	movs	r0, r3
 800ef7c:	f000 fdf0 	bl	800fb60 <USBD_CtlSendData>
      break;
 800ef80:	e007      	b.n	800ef92 <USBD_StdEPReq+0x1f8>
      USBD_CtlError(pdev , req);
 800ef82:	683a      	ldr	r2, [r7, #0]
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	0011      	movs	r1, r2
 800ef88:	0018      	movs	r0, r3
 800ef8a:	f000 fa85 	bl	800f498 <USBD_CtlError>
      break;
 800ef8e:	e000      	b.n	800ef92 <USBD_StdEPReq+0x1f8>
      break;	
 800ef90:	46c0      	nop			; (mov r8, r8)
    break;
 800ef92:	46c0      	nop			; (mov r8, r8)
  }
  return ret;
 800ef94:	230f      	movs	r3, #15
 800ef96:	18fb      	adds	r3, r7, r3
 800ef98:	781b      	ldrb	r3, [r3, #0]
}
 800ef9a:	0018      	movs	r0, r3
 800ef9c:	46bd      	mov	sp, r7
 800ef9e:	b004      	add	sp, #16
 800efa0:	bd80      	pop	{r7, pc}

0800efa2 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev , 
                               USBD_SetupReqTypedef *req)
{
 800efa2:	b580      	push	{r7, lr}
 800efa4:	b084      	sub	sp, #16
 800efa6:	af00      	add	r7, sp, #0
 800efa8:	6078      	str	r0, [r7, #4]
 800efaa:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;
  
    
  switch (req->wValue >> 8)
 800efac:	683b      	ldr	r3, [r7, #0]
 800efae:	885b      	ldrh	r3, [r3, #2]
 800efb0:	0a1b      	lsrs	r3, r3, #8
 800efb2:	b29b      	uxth	r3, r3
 800efb4:	2b02      	cmp	r3, #2
 800efb6:	d011      	beq.n	800efdc <USBD_GetDescriptor+0x3a>
 800efb8:	2b03      	cmp	r3, #3
 800efba:	d01b      	beq.n	800eff4 <USBD_GetDescriptor+0x52>
 800efbc:	2b01      	cmp	r3, #1
 800efbe:	d167      	bne.n	800f090 <USBD_GetDescriptor+0xee>
  {
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800efc0:	687a      	ldr	r2, [r7, #4]
 800efc2:	2383      	movs	r3, #131	; 0x83
 800efc4:	009b      	lsls	r3, r3, #2
 800efc6:	58d3      	ldr	r3, [r2, r3]
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	687a      	ldr	r2, [r7, #4]
 800efcc:	7c12      	ldrb	r2, [r2, #16]
 800efce:	210a      	movs	r1, #10
 800efd0:	1879      	adds	r1, r7, r1
 800efd2:	0010      	movs	r0, r2
 800efd4:	4798      	blx	r3
 800efd6:	0003      	movs	r3, r0
 800efd8:	60fb      	str	r3, [r7, #12]
    break;
 800efda:	e060      	b.n	800f09e <USBD_GetDescriptor+0xfc>
    
  case USB_DESC_TYPE_CONFIGURATION:     
    pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800efdc:	687a      	ldr	r2, [r7, #4]
 800efde:	2384      	movs	r3, #132	; 0x84
 800efe0:	009b      	lsls	r3, r3, #2
 800efe2:	58d3      	ldr	r3, [r2, r3]
 800efe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800efe6:	220a      	movs	r2, #10
 800efe8:	18ba      	adds	r2, r7, r2
 800efea:	0010      	movs	r0, r2
 800efec:	4798      	blx	r3
 800efee:	0003      	movs	r3, r0
 800eff0:	60fb      	str	r3, [r7, #12]
    break;
 800eff2:	e054      	b.n	800f09e <USBD_GetDescriptor+0xfc>
    
  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800eff4:	683b      	ldr	r3, [r7, #0]
 800eff6:	885b      	ldrh	r3, [r3, #2]
 800eff8:	b2db      	uxtb	r3, r3
 800effa:	2b01      	cmp	r3, #1
 800effc:	d016      	beq.n	800f02c <USBD_GetDescriptor+0x8a>
 800effe:	dc02      	bgt.n	800f006 <USBD_GetDescriptor+0x64>
 800f000:	2b00      	cmp	r3, #0
 800f002:	d005      	beq.n	800f010 <USBD_GetDescriptor+0x6e>
 800f004:	e03c      	b.n	800f080 <USBD_GetDescriptor+0xde>
 800f006:	2b02      	cmp	r3, #2
 800f008:	d01e      	beq.n	800f048 <USBD_GetDescriptor+0xa6>
 800f00a:	2b03      	cmp	r3, #3
 800f00c:	d02a      	beq.n	800f064 <USBD_GetDescriptor+0xc2>
 800f00e:	e037      	b.n	800f080 <USBD_GetDescriptor+0xde>
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 800f010:	687a      	ldr	r2, [r7, #4]
 800f012:	2383      	movs	r3, #131	; 0x83
 800f014:	009b      	lsls	r3, r3, #2
 800f016:	58d3      	ldr	r3, [r2, r3]
 800f018:	685b      	ldr	r3, [r3, #4]
 800f01a:	687a      	ldr	r2, [r7, #4]
 800f01c:	7c12      	ldrb	r2, [r2, #16]
 800f01e:	210a      	movs	r1, #10
 800f020:	1879      	adds	r1, r7, r1
 800f022:	0010      	movs	r0, r2
 800f024:	4798      	blx	r3
 800f026:	0003      	movs	r3, r0
 800f028:	60fb      	str	r3, [r7, #12]
      break;
 800f02a:	e030      	b.n	800f08e <USBD_GetDescriptor+0xec>
      
    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800f02c:	687a      	ldr	r2, [r7, #4]
 800f02e:	2383      	movs	r3, #131	; 0x83
 800f030:	009b      	lsls	r3, r3, #2
 800f032:	58d3      	ldr	r3, [r2, r3]
 800f034:	689b      	ldr	r3, [r3, #8]
 800f036:	687a      	ldr	r2, [r7, #4]
 800f038:	7c12      	ldrb	r2, [r2, #16]
 800f03a:	210a      	movs	r1, #10
 800f03c:	1879      	adds	r1, r7, r1
 800f03e:	0010      	movs	r0, r2
 800f040:	4798      	blx	r3
 800f042:	0003      	movs	r3, r0
 800f044:	60fb      	str	r3, [r7, #12]
      break;
 800f046:	e022      	b.n	800f08e <USBD_GetDescriptor+0xec>
      
    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800f048:	687a      	ldr	r2, [r7, #4]
 800f04a:	2383      	movs	r3, #131	; 0x83
 800f04c:	009b      	lsls	r3, r3, #2
 800f04e:	58d3      	ldr	r3, [r2, r3]
 800f050:	68db      	ldr	r3, [r3, #12]
 800f052:	687a      	ldr	r2, [r7, #4]
 800f054:	7c12      	ldrb	r2, [r2, #16]
 800f056:	210a      	movs	r1, #10
 800f058:	1879      	adds	r1, r7, r1
 800f05a:	0010      	movs	r0, r2
 800f05c:	4798      	blx	r3
 800f05e:	0003      	movs	r3, r0
 800f060:	60fb      	str	r3, [r7, #12]
      break;
 800f062:	e014      	b.n	800f08e <USBD_GetDescriptor+0xec>
      
    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800f064:	687a      	ldr	r2, [r7, #4]
 800f066:	2383      	movs	r3, #131	; 0x83
 800f068:	009b      	lsls	r3, r3, #2
 800f06a:	58d3      	ldr	r3, [r2, r3]
 800f06c:	691b      	ldr	r3, [r3, #16]
 800f06e:	687a      	ldr	r2, [r7, #4]
 800f070:	7c12      	ldrb	r2, [r2, #16]
 800f072:	210a      	movs	r1, #10
 800f074:	1879      	adds	r1, r7, r1
 800f076:	0010      	movs	r0, r2
 800f078:	4798      	blx	r3
 800f07a:	0003      	movs	r3, r0
 800f07c:	60fb      	str	r3, [r7, #12]
      break;
 800f07e:	e006      	b.n	800f08e <USBD_GetDescriptor+0xec>
      
    default:
       USBD_CtlError(pdev , req);
 800f080:	683a      	ldr	r2, [r7, #0]
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	0011      	movs	r1, r2
 800f086:	0018      	movs	r0, r3
 800f088:	f000 fa06 	bl	800f498 <USBD_CtlError>
      return;
 800f08c:	e027      	b.n	800f0de <USBD_GetDescriptor+0x13c>
    }
    break;
 800f08e:	e006      	b.n	800f09e <USBD_GetDescriptor+0xfc>

  default: 
     USBD_CtlError(pdev , req);
 800f090:	683a      	ldr	r2, [r7, #0]
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	0011      	movs	r1, r2
 800f096:	0018      	movs	r0, r3
 800f098:	f000 f9fe 	bl	800f498 <USBD_CtlError>
    return;
 800f09c:	e01f      	b.n	800f0de <USBD_GetDescriptor+0x13c>
  }
  
  if((len != 0)&& (req->wLength != 0))
 800f09e:	230a      	movs	r3, #10
 800f0a0:	18fb      	adds	r3, r7, r3
 800f0a2:	881b      	ldrh	r3, [r3, #0]
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d01a      	beq.n	800f0de <USBD_GetDescriptor+0x13c>
 800f0a8:	683b      	ldr	r3, [r7, #0]
 800f0aa:	88db      	ldrh	r3, [r3, #6]
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d016      	beq.n	800f0de <USBD_GetDescriptor+0x13c>
  {
    
    len = MIN(len , req->wLength);
 800f0b0:	683b      	ldr	r3, [r7, #0]
 800f0b2:	88da      	ldrh	r2, [r3, #6]
 800f0b4:	230a      	movs	r3, #10
 800f0b6:	18fb      	adds	r3, r7, r3
 800f0b8:	881b      	ldrh	r3, [r3, #0]
 800f0ba:	1c18      	adds	r0, r3, #0
 800f0bc:	1c11      	adds	r1, r2, #0
 800f0be:	b28a      	uxth	r2, r1
 800f0c0:	b283      	uxth	r3, r0
 800f0c2:	429a      	cmp	r2, r3
 800f0c4:	d900      	bls.n	800f0c8 <USBD_GetDescriptor+0x126>
 800f0c6:	1c01      	adds	r1, r0, #0
 800f0c8:	b28a      	uxth	r2, r1
 800f0ca:	210a      	movs	r1, #10
 800f0cc:	187b      	adds	r3, r7, r1
 800f0ce:	801a      	strh	r2, [r3, #0]
    
    USBD_CtlSendData (pdev, 
 800f0d0:	187b      	adds	r3, r7, r1
 800f0d2:	881a      	ldrh	r2, [r3, #0]
 800f0d4:	68f9      	ldr	r1, [r7, #12]
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	0018      	movs	r0, r3
 800f0da:	f000 fd41 	bl	800fb60 <USBD_CtlSendData>
                      pbuf,
                      len);
  }
  
}
 800f0de:	46bd      	mov	sp, r7
 800f0e0:	b004      	add	sp, #16
 800f0e2:	bd80      	pop	{r7, pc}

0800f0e4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 800f0e4:	b590      	push	{r4, r7, lr}
 800f0e6:	b085      	sub	sp, #20
 800f0e8:	af00      	add	r7, sp, #0
 800f0ea:	6078      	str	r0, [r7, #4]
 800f0ec:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 800f0ee:	683b      	ldr	r3, [r7, #0]
 800f0f0:	889b      	ldrh	r3, [r3, #4]
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d13a      	bne.n	800f16c <USBD_SetAddress+0x88>
 800f0f6:	683b      	ldr	r3, [r7, #0]
 800f0f8:	88db      	ldrh	r3, [r3, #6]
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d136      	bne.n	800f16c <USBD_SetAddress+0x88>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 800f0fe:	683b      	ldr	r3, [r7, #0]
 800f100:	885b      	ldrh	r3, [r3, #2]
 800f102:	b2da      	uxtb	r2, r3
 800f104:	230f      	movs	r3, #15
 800f106:	18fb      	adds	r3, r7, r3
 800f108:	217f      	movs	r1, #127	; 0x7f
 800f10a:	400a      	ands	r2, r1
 800f10c:	701a      	strb	r2, [r3, #0]
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800f10e:	687a      	ldr	r2, [r7, #4]
 800f110:	23fe      	movs	r3, #254	; 0xfe
 800f112:	005b      	lsls	r3, r3, #1
 800f114:	5cd3      	ldrb	r3, [r2, r3]
 800f116:	2b03      	cmp	r3, #3
 800f118:	d106      	bne.n	800f128 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev , req);
 800f11a:	683a      	ldr	r2, [r7, #0]
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	0011      	movs	r1, r2
 800f120:	0018      	movs	r0, r3
 800f122:	f000 f9b9 	bl	800f498 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800f126:	e027      	b.n	800f178 <USBD_SetAddress+0x94>
    } 
    else 
    {
      pdev->dev_address = dev_addr;
 800f128:	687a      	ldr	r2, [r7, #4]
 800f12a:	240f      	movs	r4, #15
 800f12c:	1939      	adds	r1, r7, r4
 800f12e:	23ff      	movs	r3, #255	; 0xff
 800f130:	005b      	lsls	r3, r3, #1
 800f132:	7809      	ldrb	r1, [r1, #0]
 800f134:	54d1      	strb	r1, [r2, r3]
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 800f136:	193b      	adds	r3, r7, r4
 800f138:	781a      	ldrb	r2, [r3, #0]
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	0011      	movs	r1, r2
 800f13e:	0018      	movs	r0, r3
 800f140:	f7ff facf 	bl	800e6e2 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	0018      	movs	r0, r3
 800f148:	f000 fd50 	bl	800fbec <USBD_CtlSendStatus>
      
      if (dev_addr != 0) 
 800f14c:	193b      	adds	r3, r7, r4
 800f14e:	781b      	ldrb	r3, [r3, #0]
 800f150:	2b00      	cmp	r3, #0
 800f152:	d005      	beq.n	800f160 <USBD_SetAddress+0x7c>
      {
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 800f154:	687a      	ldr	r2, [r7, #4]
 800f156:	23fe      	movs	r3, #254	; 0xfe
 800f158:	005b      	lsls	r3, r3, #1
 800f15a:	2102      	movs	r1, #2
 800f15c:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800f15e:	e00b      	b.n	800f178 <USBD_SetAddress+0x94>
      } 
      else 
      {
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 800f160:	687a      	ldr	r2, [r7, #4]
 800f162:	23fe      	movs	r3, #254	; 0xfe
 800f164:	005b      	lsls	r3, r3, #1
 800f166:	2101      	movs	r1, #1
 800f168:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800f16a:	e005      	b.n	800f178 <USBD_SetAddress+0x94>
      }
    }
  } 
  else 
  {
     USBD_CtlError(pdev , req);                        
 800f16c:	683a      	ldr	r2, [r7, #0]
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	0011      	movs	r1, r2
 800f172:	0018      	movs	r0, r3
 800f174:	f000 f990 	bl	800f498 <USBD_CtlError>
  } 
}
 800f178:	46c0      	nop			; (mov r8, r8)
 800f17a:	46bd      	mov	sp, r7
 800f17c:	b005      	add	sp, #20
 800f17e:	bd90      	pop	{r4, r7, pc}

0800f180 <USBD_SetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 800f180:	b580      	push	{r7, lr}
 800f182:	b082      	sub	sp, #8
 800f184:	af00      	add	r7, sp, #0
 800f186:	6078      	str	r0, [r7, #4]
 800f188:	6039      	str	r1, [r7, #0]
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 800f18a:	683b      	ldr	r3, [r7, #0]
 800f18c:	885b      	ldrh	r3, [r3, #2]
 800f18e:	b2da      	uxtb	r2, r3
 800f190:	4b48      	ldr	r3, [pc, #288]	; (800f2b4 <USBD_SetConfig+0x134>)
 800f192:	701a      	strb	r2, [r3, #0]
  
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 800f194:	4b47      	ldr	r3, [pc, #284]	; (800f2b4 <USBD_SetConfig+0x134>)
 800f196:	781b      	ldrb	r3, [r3, #0]
 800f198:	2b01      	cmp	r3, #1
 800f19a:	d906      	bls.n	800f1aa <USBD_SetConfig+0x2a>
  {            
     USBD_CtlError(pdev , req);                              
 800f19c:	683a      	ldr	r2, [r7, #0]
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	0011      	movs	r1, r2
 800f1a2:	0018      	movs	r0, r3
 800f1a4:	f000 f978 	bl	800f498 <USBD_CtlError>
 800f1a8:	e081      	b.n	800f2ae <USBD_SetConfig+0x12e>
  } 
  else 
  {
    switch (pdev->dev_state) 
 800f1aa:	687a      	ldr	r2, [r7, #4]
 800f1ac:	23fe      	movs	r3, #254	; 0xfe
 800f1ae:	005b      	lsls	r3, r3, #1
 800f1b0:	5cd3      	ldrb	r3, [r2, r3]
 800f1b2:	2b02      	cmp	r3, #2
 800f1b4:	d002      	beq.n	800f1bc <USBD_SetConfig+0x3c>
 800f1b6:	2b03      	cmp	r3, #3
 800f1b8:	d029      	beq.n	800f20e <USBD_SetConfig+0x8e>
 800f1ba:	e071      	b.n	800f2a0 <USBD_SetConfig+0x120>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx) 
 800f1bc:	4b3d      	ldr	r3, [pc, #244]	; (800f2b4 <USBD_SetConfig+0x134>)
 800f1be:	781b      	ldrb	r3, [r3, #0]
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d01f      	beq.n	800f204 <USBD_SetConfig+0x84>
      {                                			   							   							   				
        pdev->dev_config = cfgidx;
 800f1c4:	4b3b      	ldr	r3, [pc, #236]	; (800f2b4 <USBD_SetConfig+0x134>)
 800f1c6:	781b      	ldrb	r3, [r3, #0]
 800f1c8:	001a      	movs	r2, r3
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800f1ce:	687a      	ldr	r2, [r7, #4]
 800f1d0:	23fe      	movs	r3, #254	; 0xfe
 800f1d2:	005b      	lsls	r3, r3, #1
 800f1d4:	2103      	movs	r1, #3
 800f1d6:	54d1      	strb	r1, [r2, r3]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 800f1d8:	4b36      	ldr	r3, [pc, #216]	; (800f2b4 <USBD_SetConfig+0x134>)
 800f1da:	781a      	ldrb	r2, [r3, #0]
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	0011      	movs	r1, r2
 800f1e0:	0018      	movs	r0, r3
 800f1e2:	f7ff fb5b 	bl	800e89c <USBD_SetClassConfig>
 800f1e6:	0003      	movs	r3, r0
 800f1e8:	2b02      	cmp	r3, #2
 800f1ea:	d106      	bne.n	800f1fa <USBD_SetConfig+0x7a>
        {
          USBD_CtlError(pdev , req);  
 800f1ec:	683a      	ldr	r2, [r7, #0]
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	0011      	movs	r1, r2
 800f1f2:	0018      	movs	r0, r3
 800f1f4:	f000 f950 	bl	800f498 <USBD_CtlError>
          return;
 800f1f8:	e059      	b.n	800f2ae <USBD_SetConfig+0x12e>
        }
        USBD_CtlSendStatus(pdev);
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	0018      	movs	r0, r3
 800f1fe:	f000 fcf5 	bl	800fbec <USBD_CtlSendStatus>
      }
      else 
      {
         USBD_CtlSendStatus(pdev);
      }
      break;
 800f202:	e054      	b.n	800f2ae <USBD_SetConfig+0x12e>
         USBD_CtlSendStatus(pdev);
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	0018      	movs	r0, r3
 800f208:	f000 fcf0 	bl	800fbec <USBD_CtlSendStatus>
      break;
 800f20c:	e04f      	b.n	800f2ae <USBD_SetConfig+0x12e>
      
    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0) 
 800f20e:	4b29      	ldr	r3, [pc, #164]	; (800f2b4 <USBD_SetConfig+0x134>)
 800f210:	781b      	ldrb	r3, [r3, #0]
 800f212:	2b00      	cmp	r3, #0
 800f214:	d115      	bne.n	800f242 <USBD_SetConfig+0xc2>
      {                           
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f216:	687a      	ldr	r2, [r7, #4]
 800f218:	23fe      	movs	r3, #254	; 0xfe
 800f21a:	005b      	lsls	r3, r3, #1
 800f21c:	2102      	movs	r1, #2
 800f21e:	54d1      	strb	r1, [r2, r3]
        pdev->dev_config = cfgidx;          
 800f220:	4b24      	ldr	r3, [pc, #144]	; (800f2b4 <USBD_SetConfig+0x134>)
 800f222:	781b      	ldrb	r3, [r3, #0]
 800f224:	001a      	movs	r2, r3
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 800f22a:	4b22      	ldr	r3, [pc, #136]	; (800f2b4 <USBD_SetConfig+0x134>)
 800f22c:	781a      	ldrb	r2, [r3, #0]
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	0011      	movs	r1, r2
 800f232:	0018      	movs	r0, r3
 800f234:	f7ff fb5a 	bl	800e8ec <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	0018      	movs	r0, r3
 800f23c:	f000 fcd6 	bl	800fbec <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800f240:	e035      	b.n	800f2ae <USBD_SetConfig+0x12e>
      else  if (cfgidx != pdev->dev_config) 
 800f242:	4b1c      	ldr	r3, [pc, #112]	; (800f2b4 <USBD_SetConfig+0x134>)
 800f244:	781b      	ldrb	r3, [r3, #0]
 800f246:	001a      	movs	r2, r3
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	685b      	ldr	r3, [r3, #4]
 800f24c:	429a      	cmp	r2, r3
 800f24e:	d022      	beq.n	800f296 <USBD_SetConfig+0x116>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	685b      	ldr	r3, [r3, #4]
 800f254:	b2da      	uxtb	r2, r3
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	0011      	movs	r1, r2
 800f25a:	0018      	movs	r0, r3
 800f25c:	f7ff fb46 	bl	800e8ec <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800f260:	4b14      	ldr	r3, [pc, #80]	; (800f2b4 <USBD_SetConfig+0x134>)
 800f262:	781b      	ldrb	r3, [r3, #0]
 800f264:	001a      	movs	r2, r3
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 800f26a:	4b12      	ldr	r3, [pc, #72]	; (800f2b4 <USBD_SetConfig+0x134>)
 800f26c:	781a      	ldrb	r2, [r3, #0]
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	0011      	movs	r1, r2
 800f272:	0018      	movs	r0, r3
 800f274:	f7ff fb12 	bl	800e89c <USBD_SetClassConfig>
 800f278:	0003      	movs	r3, r0
 800f27a:	2b02      	cmp	r3, #2
 800f27c:	d106      	bne.n	800f28c <USBD_SetConfig+0x10c>
          USBD_CtlError(pdev , req);  
 800f27e:	683a      	ldr	r2, [r7, #0]
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	0011      	movs	r1, r2
 800f284:	0018      	movs	r0, r3
 800f286:	f000 f907 	bl	800f498 <USBD_CtlError>
          return;
 800f28a:	e010      	b.n	800f2ae <USBD_SetConfig+0x12e>
        USBD_CtlSendStatus(pdev);
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	0018      	movs	r0, r3
 800f290:	f000 fcac 	bl	800fbec <USBD_CtlSendStatus>
      break;
 800f294:	e00b      	b.n	800f2ae <USBD_SetConfig+0x12e>
        USBD_CtlSendStatus(pdev);
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	0018      	movs	r0, r3
 800f29a:	f000 fca7 	bl	800fbec <USBD_CtlSendStatus>
      break;
 800f29e:	e006      	b.n	800f2ae <USBD_SetConfig+0x12e>
      
    default:					
       USBD_CtlError(pdev , req);                     
 800f2a0:	683a      	ldr	r2, [r7, #0]
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	0011      	movs	r1, r2
 800f2a6:	0018      	movs	r0, r3
 800f2a8:	f000 f8f6 	bl	800f498 <USBD_CtlError>
      break;
 800f2ac:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 800f2ae:	46bd      	mov	sp, r7
 800f2b0:	b002      	add	sp, #8
 800f2b2:	bd80      	pop	{r7, pc}
 800f2b4:	200023c8 	.word	0x200023c8

0800f2b8 <USBD_GetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 800f2b8:	b580      	push	{r7, lr}
 800f2ba:	b082      	sub	sp, #8
 800f2bc:	af00      	add	r7, sp, #0
 800f2be:	6078      	str	r0, [r7, #4]
 800f2c0:	6039      	str	r1, [r7, #0]

  if (req->wLength != 1) 
 800f2c2:	683b      	ldr	r3, [r7, #0]
 800f2c4:	88db      	ldrh	r3, [r3, #6]
 800f2c6:	2b01      	cmp	r3, #1
 800f2c8:	d006      	beq.n	800f2d8 <USBD_GetConfig+0x20>
  {                   
     USBD_CtlError(pdev , req);
 800f2ca:	683a      	ldr	r2, [r7, #0]
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	0011      	movs	r1, r2
 800f2d0:	0018      	movs	r0, r3
 800f2d2:	f000 f8e1 	bl	800f498 <USBD_CtlError>
    default:
       USBD_CtlError(pdev , req);
      break;
    }
  }
}
 800f2d6:	e023      	b.n	800f320 <USBD_GetConfig+0x68>
    switch (pdev->dev_state )  
 800f2d8:	687a      	ldr	r2, [r7, #4]
 800f2da:	23fe      	movs	r3, #254	; 0xfe
 800f2dc:	005b      	lsls	r3, r3, #1
 800f2de:	5cd3      	ldrb	r3, [r2, r3]
 800f2e0:	2b02      	cmp	r3, #2
 800f2e2:	d002      	beq.n	800f2ea <USBD_GetConfig+0x32>
 800f2e4:	2b03      	cmp	r3, #3
 800f2e6:	d00c      	beq.n	800f302 <USBD_GetConfig+0x4a>
 800f2e8:	e013      	b.n	800f312 <USBD_GetConfig+0x5a>
      pdev->dev_default_config = 0;
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	2200      	movs	r2, #0
 800f2ee:	609a      	str	r2, [r3, #8]
                        (uint8_t *)&pdev->dev_default_config,
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	3308      	adds	r3, #8
 800f2f4:	0019      	movs	r1, r3
      USBD_CtlSendData (pdev, 
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	2201      	movs	r2, #1
 800f2fa:	0018      	movs	r0, r3
 800f2fc:	f000 fc30 	bl	800fb60 <USBD_CtlSendData>
      break;
 800f300:	e00e      	b.n	800f320 <USBD_GetConfig+0x68>
                        (uint8_t *)&pdev->dev_config,
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	1d19      	adds	r1, r3, #4
      USBD_CtlSendData (pdev, 
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	2201      	movs	r2, #1
 800f30a:	0018      	movs	r0, r3
 800f30c:	f000 fc28 	bl	800fb60 <USBD_CtlSendData>
      break;
 800f310:	e006      	b.n	800f320 <USBD_GetConfig+0x68>
       USBD_CtlError(pdev , req);
 800f312:	683a      	ldr	r2, [r7, #0]
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	0011      	movs	r1, r2
 800f318:	0018      	movs	r0, r3
 800f31a:	f000 f8bd 	bl	800f498 <USBD_CtlError>
      break;
 800f31e:	46c0      	nop			; (mov r8, r8)
}
 800f320:	46c0      	nop			; (mov r8, r8)
 800f322:	46bd      	mov	sp, r7
 800f324:	b002      	add	sp, #8
 800f326:	bd80      	pop	{r7, pc}

0800f328 <USBD_GetStatus>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 800f328:	b580      	push	{r7, lr}
 800f32a:	b082      	sub	sp, #8
 800f32c:	af00      	add	r7, sp, #0
 800f32e:	6078      	str	r0, [r7, #4]
 800f330:	6039      	str	r1, [r7, #0]
  
    
  switch (pdev->dev_state) 
 800f332:	687a      	ldr	r2, [r7, #4]
 800f334:	23fe      	movs	r3, #254	; 0xfe
 800f336:	005b      	lsls	r3, r3, #1
 800f338:	5cd3      	ldrb	r3, [r2, r3]
 800f33a:	3b02      	subs	r3, #2
 800f33c:	2b01      	cmp	r3, #1
 800f33e:	d817      	bhi.n	800f370 <USBD_GetStatus+0x48>
  case USBD_STATE_CONFIGURED:
    
#if ( USBD_SELF_POWERED == 1)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
#else
    pdev->dev_config_status = 0;                                   
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	2200      	movs	r2, #0
 800f344:	60da      	str	r2, [r3, #12]
#endif
                      
    if (pdev->dev_remote_wakeup) 
 800f346:	687a      	ldr	r2, [r7, #4]
 800f348:	2380      	movs	r3, #128	; 0x80
 800f34a:	009b      	lsls	r3, r3, #2
 800f34c:	58d3      	ldr	r3, [r2, r3]
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d005      	beq.n	800f35e <USBD_GetStatus+0x36>
    {
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	68db      	ldr	r3, [r3, #12]
 800f356:	2202      	movs	r2, #2
 800f358:	431a      	orrs	r2, r3
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	60da      	str	r2, [r3, #12]
    }
    
    USBD_CtlSendData (pdev, 
                      (uint8_t *)& pdev->dev_config_status,
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	330c      	adds	r3, #12
 800f362:	0019      	movs	r1, r3
    USBD_CtlSendData (pdev, 
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	2202      	movs	r2, #2
 800f368:	0018      	movs	r0, r3
 800f36a:	f000 fbf9 	bl	800fb60 <USBD_CtlSendData>
                      2);
    break;
 800f36e:	e006      	b.n	800f37e <USBD_GetStatus+0x56>
    
  default :
    USBD_CtlError(pdev , req);                        
 800f370:	683a      	ldr	r2, [r7, #0]
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	0011      	movs	r1, r2
 800f376:	0018      	movs	r0, r3
 800f378:	f000 f88e 	bl	800f498 <USBD_CtlError>
    break;
 800f37c:	46c0      	nop			; (mov r8, r8)
  }
}
 800f37e:	46c0      	nop			; (mov r8, r8)
 800f380:	46bd      	mov	sp, r7
 800f382:	b002      	add	sp, #8
 800f384:	bd80      	pop	{r7, pc}

0800f386 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 800f386:	b580      	push	{r7, lr}
 800f388:	b082      	sub	sp, #8
 800f38a:	af00      	add	r7, sp, #0
 800f38c:	6078      	str	r0, [r7, #4]
 800f38e:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f390:	683b      	ldr	r3, [r7, #0]
 800f392:	885b      	ldrh	r3, [r3, #2]
 800f394:	2b01      	cmp	r3, #1
 800f396:	d111      	bne.n	800f3bc <USBD_SetFeature+0x36>
  {
    pdev->dev_remote_wakeup = 1;  
 800f398:	687a      	ldr	r2, [r7, #4]
 800f39a:	2380      	movs	r3, #128	; 0x80
 800f39c:	009b      	lsls	r3, r3, #2
 800f39e:	2101      	movs	r1, #1
 800f3a0:	50d1      	str	r1, [r2, r3]
    pdev->pClass->Setup (pdev, req);   
 800f3a2:	687a      	ldr	r2, [r7, #4]
 800f3a4:	2384      	movs	r3, #132	; 0x84
 800f3a6:	009b      	lsls	r3, r3, #2
 800f3a8:	58d3      	ldr	r3, [r2, r3]
 800f3aa:	689b      	ldr	r3, [r3, #8]
 800f3ac:	6839      	ldr	r1, [r7, #0]
 800f3ae:	687a      	ldr	r2, [r7, #4]
 800f3b0:	0010      	movs	r0, r2
 800f3b2:	4798      	blx	r3
    USBD_CtlSendStatus(pdev);
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	0018      	movs	r0, r3
 800f3b8:	f000 fc18 	bl	800fbec <USBD_CtlSendStatus>
  }

}
 800f3bc:	46c0      	nop			; (mov r8, r8)
 800f3be:	46bd      	mov	sp, r7
 800f3c0:	b002      	add	sp, #8
 800f3c2:	bd80      	pop	{r7, pc}

0800f3c4 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 800f3c4:	b580      	push	{r7, lr}
 800f3c6:	b082      	sub	sp, #8
 800f3c8:	af00      	add	r7, sp, #0
 800f3ca:	6078      	str	r0, [r7, #4]
 800f3cc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f3ce:	687a      	ldr	r2, [r7, #4]
 800f3d0:	23fe      	movs	r3, #254	; 0xfe
 800f3d2:	005b      	lsls	r3, r3, #1
 800f3d4:	5cd3      	ldrb	r3, [r2, r3]
 800f3d6:	3b02      	subs	r3, #2
 800f3d8:	2b01      	cmp	r3, #1
 800f3da:	d816      	bhi.n	800f40a <USBD_ClrFeature+0x46>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 800f3dc:	683b      	ldr	r3, [r7, #0]
 800f3de:	885b      	ldrh	r3, [r3, #2]
 800f3e0:	2b01      	cmp	r3, #1
 800f3e2:	d119      	bne.n	800f418 <USBD_ClrFeature+0x54>
    {
      pdev->dev_remote_wakeup = 0; 
 800f3e4:	687a      	ldr	r2, [r7, #4]
 800f3e6:	2380      	movs	r3, #128	; 0x80
 800f3e8:	009b      	lsls	r3, r3, #2
 800f3ea:	2100      	movs	r1, #0
 800f3ec:	50d1      	str	r1, [r2, r3]
      pdev->pClass->Setup (pdev, req);   
 800f3ee:	687a      	ldr	r2, [r7, #4]
 800f3f0:	2384      	movs	r3, #132	; 0x84
 800f3f2:	009b      	lsls	r3, r3, #2
 800f3f4:	58d3      	ldr	r3, [r2, r3]
 800f3f6:	689b      	ldr	r3, [r3, #8]
 800f3f8:	6839      	ldr	r1, [r7, #0]
 800f3fa:	687a      	ldr	r2, [r7, #4]
 800f3fc:	0010      	movs	r0, r2
 800f3fe:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	0018      	movs	r0, r3
 800f404:	f000 fbf2 	bl	800fbec <USBD_CtlSendStatus>
    }
    break;
 800f408:	e006      	b.n	800f418 <USBD_ClrFeature+0x54>
    
  default :
     USBD_CtlError(pdev , req);
 800f40a:	683a      	ldr	r2, [r7, #0]
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	0011      	movs	r1, r2
 800f410:	0018      	movs	r0, r3
 800f412:	f000 f841 	bl	800f498 <USBD_CtlError>
    break;
 800f416:	e000      	b.n	800f41a <USBD_ClrFeature+0x56>
    break;
 800f418:	46c0      	nop			; (mov r8, r8)
  }
}
 800f41a:	46c0      	nop			; (mov r8, r8)
 800f41c:	46bd      	mov	sp, r7
 800f41e:	b002      	add	sp, #8
 800f420:	bd80      	pop	{r7, pc}

0800f422 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800f422:	b580      	push	{r7, lr}
 800f424:	b082      	sub	sp, #8
 800f426:	af00      	add	r7, sp, #0
 800f428:	6078      	str	r0, [r7, #4]
 800f42a:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 800f42c:	683b      	ldr	r3, [r7, #0]
 800f42e:	781a      	ldrb	r2, [r3, #0]
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800f434:	683b      	ldr	r3, [r7, #0]
 800f436:	785a      	ldrb	r2, [r3, #1]
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800f43c:	683b      	ldr	r3, [r7, #0]
 800f43e:	3302      	adds	r3, #2
 800f440:	781b      	ldrb	r3, [r3, #0]
 800f442:	b29a      	uxth	r2, r3
 800f444:	683b      	ldr	r3, [r7, #0]
 800f446:	3303      	adds	r3, #3
 800f448:	781b      	ldrb	r3, [r3, #0]
 800f44a:	b29b      	uxth	r3, r3
 800f44c:	021b      	lsls	r3, r3, #8
 800f44e:	b29b      	uxth	r3, r3
 800f450:	18d3      	adds	r3, r2, r3
 800f452:	b29a      	uxth	r2, r3
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800f458:	683b      	ldr	r3, [r7, #0]
 800f45a:	3304      	adds	r3, #4
 800f45c:	781b      	ldrb	r3, [r3, #0]
 800f45e:	b29a      	uxth	r2, r3
 800f460:	683b      	ldr	r3, [r7, #0]
 800f462:	3305      	adds	r3, #5
 800f464:	781b      	ldrb	r3, [r3, #0]
 800f466:	b29b      	uxth	r3, r3
 800f468:	021b      	lsls	r3, r3, #8
 800f46a:	b29b      	uxth	r3, r3
 800f46c:	18d3      	adds	r3, r2, r3
 800f46e:	b29a      	uxth	r2, r3
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800f474:	683b      	ldr	r3, [r7, #0]
 800f476:	3306      	adds	r3, #6
 800f478:	781b      	ldrb	r3, [r3, #0]
 800f47a:	b29a      	uxth	r2, r3
 800f47c:	683b      	ldr	r3, [r7, #0]
 800f47e:	3307      	adds	r3, #7
 800f480:	781b      	ldrb	r3, [r3, #0]
 800f482:	b29b      	uxth	r3, r3
 800f484:	021b      	lsls	r3, r3, #8
 800f486:	b29b      	uxth	r3, r3
 800f488:	18d3      	adds	r3, r2, r3
 800f48a:	b29a      	uxth	r2, r3
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	80da      	strh	r2, [r3, #6]

}
 800f490:	46c0      	nop			; (mov r8, r8)
 800f492:	46bd      	mov	sp, r7
 800f494:	b002      	add	sp, #8
 800f496:	bd80      	pop	{r7, pc}

0800f498 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800f498:	b580      	push	{r7, lr}
 800f49a:	b082      	sub	sp, #8
 800f49c:	af00      	add	r7, sp, #0
 800f49e:	6078      	str	r0, [r7, #4]
 800f4a0:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80);
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	2180      	movs	r1, #128	; 0x80
 800f4a6:	0018      	movs	r0, r3
 800f4a8:	f7ff f8c4 	bl	800e634 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	2100      	movs	r1, #0
 800f4b0:	0018      	movs	r0, r3
 800f4b2:	f7ff f8bf 	bl	800e634 <USBD_LL_StallEP>
}
 800f4b6:	46c0      	nop			; (mov r8, r8)
 800f4b8:	46bd      	mov	sp, r7
 800f4ba:	b002      	add	sp, #8
 800f4bc:	bd80      	pop	{r7, pc}

0800f4be <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800f4be:	b590      	push	{r4, r7, lr}
 800f4c0:	b087      	sub	sp, #28
 800f4c2:	af00      	add	r7, sp, #0
 800f4c4:	60f8      	str	r0, [r7, #12]
 800f4c6:	60b9      	str	r1, [r7, #8]
 800f4c8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0;
 800f4ca:	2317      	movs	r3, #23
 800f4cc:	18fb      	adds	r3, r7, r3
 800f4ce:	2200      	movs	r2, #0
 800f4d0:	701a      	strb	r2, [r3, #0]
  
  if (desc != NULL) 
 800f4d2:	68fb      	ldr	r3, [r7, #12]
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d03e      	beq.n	800f556 <USBD_GetString+0x98>
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
 800f4d8:	68fb      	ldr	r3, [r7, #12]
 800f4da:	0018      	movs	r0, r3
 800f4dc:	f000 f83f 	bl	800f55e <USBD_GetLen>
 800f4e0:	0003      	movs	r3, r0
 800f4e2:	3301      	adds	r3, #1
 800f4e4:	b29b      	uxth	r3, r3
 800f4e6:	18db      	adds	r3, r3, r3
 800f4e8:	b29a      	uxth	r2, r3
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *len;
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	8819      	ldrh	r1, [r3, #0]
 800f4f2:	2417      	movs	r4, #23
 800f4f4:	193b      	adds	r3, r7, r4
 800f4f6:	781b      	ldrb	r3, [r3, #0]
 800f4f8:	193a      	adds	r2, r7, r4
 800f4fa:	1c58      	adds	r0, r3, #1
 800f4fc:	7010      	strb	r0, [r2, #0]
 800f4fe:	001a      	movs	r2, r3
 800f500:	68bb      	ldr	r3, [r7, #8]
 800f502:	189b      	adds	r3, r3, r2
 800f504:	b2ca      	uxtb	r2, r1
 800f506:	701a      	strb	r2, [r3, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 800f508:	193b      	adds	r3, r7, r4
 800f50a:	781b      	ldrb	r3, [r3, #0]
 800f50c:	193a      	adds	r2, r7, r4
 800f50e:	1c59      	adds	r1, r3, #1
 800f510:	7011      	strb	r1, [r2, #0]
 800f512:	001a      	movs	r2, r3
 800f514:	68bb      	ldr	r3, [r7, #8]
 800f516:	189b      	adds	r3, r3, r2
 800f518:	2203      	movs	r2, #3
 800f51a:	701a      	strb	r2, [r3, #0]
    
    while (*desc != '\0') 
 800f51c:	e017      	b.n	800f54e <USBD_GetString+0x90>
    {
      unicode[idx++] = *desc++;
 800f51e:	68fb      	ldr	r3, [r7, #12]
 800f520:	1c5a      	adds	r2, r3, #1
 800f522:	60fa      	str	r2, [r7, #12]
 800f524:	2417      	movs	r4, #23
 800f526:	193a      	adds	r2, r7, r4
 800f528:	7812      	ldrb	r2, [r2, #0]
 800f52a:	1939      	adds	r1, r7, r4
 800f52c:	1c50      	adds	r0, r2, #1
 800f52e:	7008      	strb	r0, [r1, #0]
 800f530:	0011      	movs	r1, r2
 800f532:	68ba      	ldr	r2, [r7, #8]
 800f534:	1852      	adds	r2, r2, r1
 800f536:	781b      	ldrb	r3, [r3, #0]
 800f538:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0x00;
 800f53a:	193b      	adds	r3, r7, r4
 800f53c:	781b      	ldrb	r3, [r3, #0]
 800f53e:	193a      	adds	r2, r7, r4
 800f540:	1c59      	adds	r1, r3, #1
 800f542:	7011      	strb	r1, [r2, #0]
 800f544:	001a      	movs	r2, r3
 800f546:	68bb      	ldr	r3, [r7, #8]
 800f548:	189b      	adds	r3, r3, r2
 800f54a:	2200      	movs	r2, #0
 800f54c:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0') 
 800f54e:	68fb      	ldr	r3, [r7, #12]
 800f550:	781b      	ldrb	r3, [r3, #0]
 800f552:	2b00      	cmp	r3, #0
 800f554:	d1e3      	bne.n	800f51e <USBD_GetString+0x60>
    }
  } 
}
 800f556:	46c0      	nop			; (mov r8, r8)
 800f558:	46bd      	mov	sp, r7
 800f55a:	b007      	add	sp, #28
 800f55c:	bd90      	pop	{r4, r7, pc}

0800f55e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800f55e:	b580      	push	{r7, lr}
 800f560:	b084      	sub	sp, #16
 800f562:	af00      	add	r7, sp, #0
 800f564:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0;
 800f566:	230f      	movs	r3, #15
 800f568:	18fb      	adds	r3, r7, r3
 800f56a:	2200      	movs	r2, #0
 800f56c:	701a      	strb	r2, [r3, #0]

    while (*buf != '\0') 
 800f56e:	e008      	b.n	800f582 <USBD_GetLen+0x24>
    {
        len++;
 800f570:	210f      	movs	r1, #15
 800f572:	187b      	adds	r3, r7, r1
 800f574:	781a      	ldrb	r2, [r3, #0]
 800f576:	187b      	adds	r3, r7, r1
 800f578:	3201      	adds	r2, #1
 800f57a:	701a      	strb	r2, [r3, #0]
        buf++;
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	3301      	adds	r3, #1
 800f580:	607b      	str	r3, [r7, #4]
    while (*buf != '\0') 
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	781b      	ldrb	r3, [r3, #0]
 800f586:	2b00      	cmp	r3, #0
 800f588:	d1f2      	bne.n	800f570 <USBD_GetLen+0x12>
    }

    return len;
 800f58a:	230f      	movs	r3, #15
 800f58c:	18fb      	adds	r3, r7, r3
 800f58e:	781b      	ldrb	r3, [r3, #0]
}
 800f590:	0018      	movs	r0, r3
 800f592:	46bd      	mov	sp, r7
 800f594:	b004      	add	sp, #16
 800f596:	bd80      	pop	{r7, pc}

0800f598 <USBD_VCP_DeviceDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
static uint8_t *USBD_VCP_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f598:	b580      	push	{r7, lr}
 800f59a:	b082      	sub	sp, #8
 800f59c:	af00      	add	r7, sp, #0
 800f59e:	0002      	movs	r2, r0
 800f5a0:	6039      	str	r1, [r7, #0]
 800f5a2:	1dfb      	adds	r3, r7, #7
 800f5a4:	701a      	strb	r2, [r3, #0]
  *length = sizeof(hUSBDDeviceDesc);
 800f5a6:	683b      	ldr	r3, [r7, #0]
 800f5a8:	2212      	movs	r2, #18
 800f5aa:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)&hUSBDDeviceDesc;
 800f5ac:	4b02      	ldr	r3, [pc, #8]	; (800f5b8 <USBD_VCP_DeviceDescriptor+0x20>)
}
 800f5ae:	0018      	movs	r0, r3
 800f5b0:	46bd      	mov	sp, r7
 800f5b2:	b002      	add	sp, #8
 800f5b4:	bd80      	pop	{r7, pc}
 800f5b6:	46c0      	nop			; (mov r8, r8)
 800f5b8:	0800fe14 	.word	0x0800fe14

0800f5bc <USBD_VCP_LangIDStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
static uint8_t *USBD_VCP_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f5bc:	b580      	push	{r7, lr}
 800f5be:	b082      	sub	sp, #8
 800f5c0:	af00      	add	r7, sp, #0
 800f5c2:	0002      	movs	r2, r0
 800f5c4:	6039      	str	r1, [r7, #0]
 800f5c6:	1dfb      	adds	r3, r7, #7
 800f5c8:	701a      	strb	r2, [r3, #0]
  *length = sizeof(USBD_LangIDDesc);  
 800f5ca:	683b      	ldr	r3, [r7, #0]
 800f5cc:	2204      	movs	r2, #4
 800f5ce:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_LangIDDesc;
 800f5d0:	4b02      	ldr	r3, [pc, #8]	; (800f5dc <USBD_VCP_LangIDStrDescriptor+0x20>)
}
 800f5d2:	0018      	movs	r0, r3
 800f5d4:	46bd      	mov	sp, r7
 800f5d6:	b002      	add	sp, #8
 800f5d8:	bd80      	pop	{r7, pc}
 800f5da:	46c0      	nop			; (mov r8, r8)
 800f5dc:	0800fe78 	.word	0x0800fe78

0800f5e0 <USBD_VCP_ProductStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
static uint8_t *USBD_VCP_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f5e0:	b580      	push	{r7, lr}
 800f5e2:	b082      	sub	sp, #8
 800f5e4:	af00      	add	r7, sp, #0
 800f5e6:	0002      	movs	r2, r0
 800f5e8:	6039      	str	r1, [r7, #0]
 800f5ea:	1dfb      	adds	r3, r7, #7
 800f5ec:	701a      	strb	r2, [r3, #0]
  USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);    
 800f5ee:	683a      	ldr	r2, [r7, #0]
 800f5f0:	4904      	ldr	r1, [pc, #16]	; (800f604 <USBD_VCP_ProductStrDescriptor+0x24>)
 800f5f2:	4b05      	ldr	r3, [pc, #20]	; (800f608 <USBD_VCP_ProductStrDescriptor+0x28>)
 800f5f4:	0018      	movs	r0, r3
 800f5f6:	f7ff ff62 	bl	800f4be <USBD_GetString>
  return USBD_StrDesc;
 800f5fa:	4b02      	ldr	r3, [pc, #8]	; (800f604 <USBD_VCP_ProductStrDescriptor+0x24>)
}
 800f5fc:	0018      	movs	r0, r3
 800f5fe:	46bd      	mov	sp, r7
 800f600:	b002      	add	sp, #8
 800f602:	bd80      	pop	{r7, pc}
 800f604:	200023cc 	.word	0x200023cc
 800f608:	0800fd1c 	.word	0x0800fd1c

0800f60c <USBD_VCP_ManufacturerStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
static uint8_t *USBD_VCP_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f60c:	b580      	push	{r7, lr}
 800f60e:	b082      	sub	sp, #8
 800f610:	af00      	add	r7, sp, #0
 800f612:	0002      	movs	r2, r0
 800f614:	6039      	str	r1, [r7, #0]
 800f616:	1dfb      	adds	r3, r7, #7
 800f618:	701a      	strb	r2, [r3, #0]
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f61a:	683a      	ldr	r2, [r7, #0]
 800f61c:	4904      	ldr	r1, [pc, #16]	; (800f630 <USBD_VCP_ManufacturerStrDescriptor+0x24>)
 800f61e:	4b05      	ldr	r3, [pc, #20]	; (800f634 <USBD_VCP_ManufacturerStrDescriptor+0x28>)
 800f620:	0018      	movs	r0, r3
 800f622:	f7ff ff4c 	bl	800f4be <USBD_GetString>
  return USBD_StrDesc;
 800f626:	4b02      	ldr	r3, [pc, #8]	; (800f630 <USBD_VCP_ManufacturerStrDescriptor+0x24>)
}
 800f628:	0018      	movs	r0, r3
 800f62a:	46bd      	mov	sp, r7
 800f62c:	b002      	add	sp, #8
 800f62e:	bd80      	pop	{r7, pc}
 800f630:	200023cc 	.word	0x200023cc
 800f634:	0800fd20 	.word	0x0800fd20

0800f638 <USBD_VCP_SerialStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
static uint8_t *USBD_VCP_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f638:	b580      	push	{r7, lr}
 800f63a:	b084      	sub	sp, #16
 800f63c:	af00      	add	r7, sp, #0
 800f63e:	0002      	movs	r2, r0
 800f640:	6039      	str	r1, [r7, #0]
 800f642:	1dfb      	adds	r3, r7, #7
 800f644:	701a      	strb	r2, [r3, #0]
  
  /*
  for some peculiar reason, ST doesn't define the unique ID registers in the HAL include files
  the DEVICE_ID registers are documented in Chapter 33 of the RM0091 Reference Manual
  */
  deviceserial = *(uint32_t*)(0x1FFFF7B0); /*DEVICE_ID2*/
 800f646:	4b0e      	ldr	r3, [pc, #56]	; (800f680 <USBD_VCP_SerialStrDescriptor+0x48>)
 800f648:	681b      	ldr	r3, [r3, #0]
 800f64a:	60fb      	str	r3, [r7, #12]
  
  USBD_StrDesc[0] = *length = 2 + 8*2 + 4*2;
 800f64c:	683b      	ldr	r3, [r7, #0]
 800f64e:	221a      	movs	r2, #26
 800f650:	801a      	strh	r2, [r3, #0]
 800f652:	4b0c      	ldr	r3, [pc, #48]	; (800f684 <USBD_VCP_SerialStrDescriptor+0x4c>)
 800f654:	221a      	movs	r2, #26
 800f656:	701a      	strb	r2, [r3, #0]
  USBD_StrDesc[1] = USB_DESC_TYPE_STRING;
 800f658:	4b0a      	ldr	r3, [pc, #40]	; (800f684 <USBD_VCP_SerialStrDescriptor+0x4c>)
 800f65a:	2203      	movs	r2, #3
 800f65c:	705a      	strb	r2, [r3, #1]
  /* set upper bits to ensure classification as locally administered */
  IntToUnicode (0x02020000, &USBD_StrDesc[2], 4);
 800f65e:	4b0a      	ldr	r3, [pc, #40]	; (800f688 <USBD_VCP_SerialStrDescriptor+0x50>)
 800f660:	480a      	ldr	r0, [pc, #40]	; (800f68c <USBD_VCP_SerialStrDescriptor+0x54>)
 800f662:	2204      	movs	r2, #4
 800f664:	0019      	movs	r1, r3
 800f666:	f000 f815 	bl	800f694 <IntToUnicode>
  /* set lower 32-bits using silicon serial number */
  IntToUnicode (deviceserial, &USBD_StrDesc[10], 8);
 800f66a:	4909      	ldr	r1, [pc, #36]	; (800f690 <USBD_VCP_SerialStrDescriptor+0x58>)
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	2208      	movs	r2, #8
 800f670:	0018      	movs	r0, r3
 800f672:	f000 f80f 	bl	800f694 <IntToUnicode>
  return USBD_StrDesc;  
 800f676:	4b03      	ldr	r3, [pc, #12]	; (800f684 <USBD_VCP_SerialStrDescriptor+0x4c>)
}
 800f678:	0018      	movs	r0, r3
 800f67a:	46bd      	mov	sp, r7
 800f67c:	b004      	add	sp, #16
 800f67e:	bd80      	pop	{r7, pc}
 800f680:	1ffff7b0 	.word	0x1ffff7b0
 800f684:	200023cc 	.word	0x200023cc
 800f688:	200023ce 	.word	0x200023ce
 800f68c:	02020000 	.word	0x02020000
 800f690:	200023d6 	.word	0x200023d6

0800f694 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode (uint32_t value, uint8_t *pbuf, uint8_t len)
{
 800f694:	b580      	push	{r7, lr}
 800f696:	b086      	sub	sp, #24
 800f698:	af00      	add	r7, sp, #0
 800f69a:	60f8      	str	r0, [r7, #12]
 800f69c:	60b9      	str	r1, [r7, #8]
 800f69e:	1dfb      	adds	r3, r7, #7
 800f6a0:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 800f6a2:	2117      	movs	r1, #23
 800f6a4:	187b      	adds	r3, r7, r1
 800f6a6:	2200      	movs	r2, #0
 800f6a8:	701a      	strb	r2, [r3, #0]
  
  for( idx = 0 ; idx < len ; idx ++)
 800f6aa:	187b      	adds	r3, r7, r1
 800f6ac:	2200      	movs	r2, #0
 800f6ae:	701a      	strb	r2, [r3, #0]
 800f6b0:	e02f      	b.n	800f712 <IntToUnicode+0x7e>
  {
    if( ((value >> 28)) < 0xA )
 800f6b2:	68fb      	ldr	r3, [r7, #12]
 800f6b4:	0f1b      	lsrs	r3, r3, #28
 800f6b6:	2b09      	cmp	r3, #9
 800f6b8:	d80d      	bhi.n	800f6d6 <IntToUnicode+0x42>
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
 800f6ba:	68fb      	ldr	r3, [r7, #12]
 800f6bc:	0f1b      	lsrs	r3, r3, #28
 800f6be:	b2da      	uxtb	r2, r3
 800f6c0:	2317      	movs	r3, #23
 800f6c2:	18fb      	adds	r3, r7, r3
 800f6c4:	781b      	ldrb	r3, [r3, #0]
 800f6c6:	005b      	lsls	r3, r3, #1
 800f6c8:	0019      	movs	r1, r3
 800f6ca:	68bb      	ldr	r3, [r7, #8]
 800f6cc:	185b      	adds	r3, r3, r1
 800f6ce:	3230      	adds	r2, #48	; 0x30
 800f6d0:	b2d2      	uxtb	r2, r2
 800f6d2:	701a      	strb	r2, [r3, #0]
 800f6d4:	e00c      	b.n	800f6f0 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 800f6d6:	68fb      	ldr	r3, [r7, #12]
 800f6d8:	0f1b      	lsrs	r3, r3, #28
 800f6da:	b2da      	uxtb	r2, r3
 800f6dc:	2317      	movs	r3, #23
 800f6de:	18fb      	adds	r3, r7, r3
 800f6e0:	781b      	ldrb	r3, [r3, #0]
 800f6e2:	005b      	lsls	r3, r3, #1
 800f6e4:	0019      	movs	r1, r3
 800f6e6:	68bb      	ldr	r3, [r7, #8]
 800f6e8:	185b      	adds	r3, r3, r1
 800f6ea:	3237      	adds	r2, #55	; 0x37
 800f6ec:	b2d2      	uxtb	r2, r2
 800f6ee:	701a      	strb	r2, [r3, #0]
    }
    
    value = value << 4;
 800f6f0:	68fb      	ldr	r3, [r7, #12]
 800f6f2:	011b      	lsls	r3, r3, #4
 800f6f4:	60fb      	str	r3, [r7, #12]
    
    pbuf[ 2* idx + 1] = 0;
 800f6f6:	2117      	movs	r1, #23
 800f6f8:	187b      	adds	r3, r7, r1
 800f6fa:	781b      	ldrb	r3, [r3, #0]
 800f6fc:	005b      	lsls	r3, r3, #1
 800f6fe:	3301      	adds	r3, #1
 800f700:	68ba      	ldr	r2, [r7, #8]
 800f702:	18d3      	adds	r3, r2, r3
 800f704:	2200      	movs	r2, #0
 800f706:	701a      	strb	r2, [r3, #0]
  for( idx = 0 ; idx < len ; idx ++)
 800f708:	187b      	adds	r3, r7, r1
 800f70a:	781a      	ldrb	r2, [r3, #0]
 800f70c:	187b      	adds	r3, r7, r1
 800f70e:	3201      	adds	r2, #1
 800f710:	701a      	strb	r2, [r3, #0]
 800f712:	2317      	movs	r3, #23
 800f714:	18fa      	adds	r2, r7, r3
 800f716:	1dfb      	adds	r3, r7, #7
 800f718:	7812      	ldrb	r2, [r2, #0]
 800f71a:	781b      	ldrb	r3, [r3, #0]
 800f71c:	429a      	cmp	r2, r3
 800f71e:	d3c8      	bcc.n	800f6b2 <IntToUnicode+0x1e>
  }
}
 800f720:	46c0      	nop			; (mov r8, r8)
 800f722:	46bd      	mov	sp, r7
 800f724:	b006      	add	sp, #24
 800f726:	bd80      	pop	{r7, pc}

0800f728 <usb_ecm_recv_renew>:
static int ecm_tx_remaining;
static int ecm_tx_busy;
static int copy_length;

void usb_ecm_recv_renew(void)
{
 800f728:	b590      	push	{r4, r7, lr}
 800f72a:	b083      	sub	sp, #12
 800f72c:	af00      	add	r7, sp, #0
  USBD_StatusTypeDef outcome;

  outcome = USBD_LL_PrepareReceive(registered_pdev, ECM_DATA_OUT_EP, ecm_rx_buffer + ecm_rx_index, ECM_DATA_OUT_SZ);
 800f72e:	4b0c      	ldr	r3, [pc, #48]	; (800f760 <usb_ecm_recv_renew+0x38>)
 800f730:	6818      	ldr	r0, [r3, #0]
 800f732:	4b0c      	ldr	r3, [pc, #48]	; (800f764 <usb_ecm_recv_renew+0x3c>)
 800f734:	681b      	ldr	r3, [r3, #0]
 800f736:	001a      	movs	r2, r3
 800f738:	4b0b      	ldr	r3, [pc, #44]	; (800f768 <usb_ecm_recv_renew+0x40>)
 800f73a:	18d2      	adds	r2, r2, r3
 800f73c:	1dfc      	adds	r4, r7, #7
 800f73e:	2340      	movs	r3, #64	; 0x40
 800f740:	2103      	movs	r1, #3
 800f742:	f7ff f80d 	bl	800e760 <USBD_LL_PrepareReceive>
 800f746:	0003      	movs	r3, r0
 800f748:	7023      	strb	r3, [r4, #0]

  OutboundTransferNeedsRenewal = (USBD_OK != outcome); /* set if the HAL was busy so that we know to retry it */
 800f74a:	1dfb      	adds	r3, r7, #7
 800f74c:	781b      	ldrb	r3, [r3, #0]
 800f74e:	1e5a      	subs	r2, r3, #1
 800f750:	4193      	sbcs	r3, r2
 800f752:	b2da      	uxtb	r2, r3
 800f754:	4b05      	ldr	r3, [pc, #20]	; (800f76c <usb_ecm_recv_renew+0x44>)
 800f756:	701a      	strb	r2, [r3, #0]
}
 800f758:	46c0      	nop			; (mov r8, r8)
 800f75a:	46bd      	mov	sp, r7
 800f75c:	b003      	add	sp, #12
 800f75e:	bd90      	pop	{r4, r7, pc}
 800f760:	200024cc 	.word	0x200024cc
 800f764:	200028d8 	.word	0x200028d8
 800f768:	200024d0 	.word	0x200024d0
 800f76c:	200028dd 	.word	0x200028dd

0800f770 <USBD_ECM_Init>:

static uint8_t USBD_ECM_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f770:	b580      	push	{r7, lr}
 800f772:	b082      	sub	sp, #8
 800f774:	af00      	add	r7, sp, #0
 800f776:	6078      	str	r0, [r7, #4]
 800f778:	000a      	movs	r2, r1
 800f77a:	1cfb      	adds	r3, r7, #3
 800f77c:	701a      	strb	r2, [r3, #0]
  registered_pdev = pdev;
 800f77e:	4b14      	ldr	r3, [pc, #80]	; (800f7d0 <USBD_ECM_Init+0x60>)
 800f780:	687a      	ldr	r2, [r7, #4]
 800f782:	601a      	str	r2, [r3, #0]

  /* Open EP IN */
  USBD_LL_OpenEP(pdev, ECM_DATA_IN_EP, USBD_EP_TYPE_BULK, ECM_DATA_IN_SZ);
 800f784:	6878      	ldr	r0, [r7, #4]
 800f786:	2340      	movs	r3, #64	; 0x40
 800f788:	2202      	movs	r2, #2
 800f78a:	2182      	movs	r1, #130	; 0x82
 800f78c:	f7fe ff1a 	bl	800e5c4 <USBD_LL_OpenEP>
  
  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, ECM_DATA_OUT_EP, USBD_EP_TYPE_BULK, ECM_DATA_OUT_SZ);
 800f790:	6878      	ldr	r0, [r7, #4]
 800f792:	2340      	movs	r3, #64	; 0x40
 800f794:	2202      	movs	r2, #2
 800f796:	2103      	movs	r1, #3
 800f798:	f7fe ff14 	bl	800e5c4 <USBD_LL_OpenEP>

  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, ECM_NOTIFICATION_IN_EP, USBD_EP_TYPE_INTR, ECM_NOTIFICATION_IN_SZ);
 800f79c:	6878      	ldr	r0, [r7, #4]
 800f79e:	2340      	movs	r3, #64	; 0x40
 800f7a0:	2203      	movs	r2, #3
 800f7a2:	2181      	movs	r1, #129	; 0x81
 800f7a4:	f7fe ff0e 	bl	800e5c4 <USBD_LL_OpenEP>

  usb_ecm_recv_renew();
 800f7a8:	f7ff ffbe 	bl	800f728 <usb_ecm_recv_renew>
  can_xmit = true;
 800f7ac:	4b09      	ldr	r3, [pc, #36]	; (800f7d4 <USBD_ECM_Init+0x64>)
 800f7ae:	2201      	movs	r2, #1
 800f7b0:	701a      	strb	r2, [r3, #0]
  OutboundTransferNeedsRenewal = false;
 800f7b2:	4b09      	ldr	r3, [pc, #36]	; (800f7d8 <USBD_ECM_Init+0x68>)
 800f7b4:	2200      	movs	r2, #0
 800f7b6:	701a      	strb	r2, [r3, #0]
  ecm_tx_busy = 0;
 800f7b8:	4b08      	ldr	r3, [pc, #32]	; (800f7dc <USBD_ECM_Init+0x6c>)
 800f7ba:	2200      	movs	r2, #0
 800f7bc:	601a      	str	r2, [r3, #0]
  ecm_tx_remaining = 0;
 800f7be:	4b08      	ldr	r3, [pc, #32]	; (800f7e0 <USBD_ECM_Init+0x70>)
 800f7c0:	2200      	movs	r2, #0
 800f7c2:	601a      	str	r2, [r3, #0]

  return USBD_OK;
 800f7c4:	2300      	movs	r3, #0
}
 800f7c6:	0018      	movs	r0, r3
 800f7c8:	46bd      	mov	sp, r7
 800f7ca:	b002      	add	sp, #8
 800f7cc:	bd80      	pop	{r7, pc}
 800f7ce:	46c0      	nop			; (mov r8, r8)
 800f7d0:	200024cc 	.word	0x200024cc
 800f7d4:	200028dc 	.word	0x200028dc
 800f7d8:	200028dd 	.word	0x200028dd
 800f7dc:	200028e8 	.word	0x200028e8
 800f7e0:	200028e4 	.word	0x200028e4

0800f7e4 <USBD_ECM_DeInit>:

static uint8_t USBD_ECM_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f7e4:	b580      	push	{r7, lr}
 800f7e6:	b082      	sub	sp, #8
 800f7e8:	af00      	add	r7, sp, #0
 800f7ea:	6078      	str	r0, [r7, #4]
 800f7ec:	000a      	movs	r2, r1
 800f7ee:	1cfb      	adds	r3, r7, #3
 800f7f0:	701a      	strb	r2, [r3, #0]
  registered_pdev = NULL;
 800f7f2:	4b0d      	ldr	r3, [pc, #52]	; (800f828 <USBD_ECM_DeInit+0x44>)
 800f7f4:	2200      	movs	r2, #0
 800f7f6:	601a      	str	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, ECM_DATA_IN_EP);
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	2182      	movs	r1, #130	; 0x82
 800f7fc:	0018      	movs	r0, r3
 800f7fe:	f7fe ff03 	bl	800e608 <USBD_LL_CloseEP>

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, ECM_DATA_OUT_EP);
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	2103      	movs	r1, #3
 800f806:	0018      	movs	r0, r3
 800f808:	f7fe fefe 	bl	800e608 <USBD_LL_CloseEP>

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, ECM_NOTIFICATION_IN_EP);
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	2181      	movs	r1, #129	; 0x81
 800f810:	0018      	movs	r0, r3
 800f812:	f7fe fef9 	bl	800e608 <USBD_LL_CloseEP>

  can_xmit = false;
 800f816:	4b05      	ldr	r3, [pc, #20]	; (800f82c <USBD_ECM_DeInit+0x48>)
 800f818:	2200      	movs	r2, #0
 800f81a:	701a      	strb	r2, [r3, #0]

  return USBD_OK;
 800f81c:	2300      	movs	r3, #0
}
 800f81e:	0018      	movs	r0, r3
 800f820:	46bd      	mov	sp, r7
 800f822:	b002      	add	sp, #8
 800f824:	bd80      	pop	{r7, pc}
 800f826:	46c0      	nop			; (mov r8, r8)
 800f828:	200024cc 	.word	0x200024cc
 800f82c:	200028dc 	.word	0x200028dc

0800f830 <USBD_ECM_Setup>:

static uint8_t USBD_ECM_Setup (USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f830:	b580      	push	{r7, lr}
 800f832:	b082      	sub	sp, #8
 800f834:	af00      	add	r7, sp, #0
 800f836:	6078      	str	r0, [r7, #4]
 800f838:	6039      	str	r1, [r7, #0]
  if (0x43 /* SET_ETHERNET_PACKET_FILTER */ == req->bRequest)
 800f83a:	683b      	ldr	r3, [r7, #0]
 800f83c:	785b      	ldrb	r3, [r3, #1]
 800f83e:	2b43      	cmp	r3, #67	; 0x43
 800f840:	d109      	bne.n	800f856 <USBD_ECM_Setup+0x26>
  {
    notify.wIndex = req->wIndex;
 800f842:	683b      	ldr	r3, [r7, #0]
 800f844:	889a      	ldrh	r2, [r3, #4]
 800f846:	4b06      	ldr	r3, [pc, #24]	; (800f860 <USBD_ECM_Setup+0x30>)
 800f848:	809a      	strh	r2, [r3, #4]
    USBD_LL_Transmit(pdev, ECM_NOTIFICATION_IN_EP, (uint8_t *)&notify, sizeof(notify));
 800f84a:	4a05      	ldr	r2, [pc, #20]	; (800f860 <USBD_ECM_Setup+0x30>)
 800f84c:	6878      	ldr	r0, [r7, #4]
 800f84e:	2308      	movs	r3, #8
 800f850:	2181      	movs	r1, #129	; 0x81
 800f852:	f7fe ff5c 	bl	800e70e <USBD_LL_Transmit>
  }

  return USBD_OK;
 800f856:	2300      	movs	r3, #0
}
 800f858:	0018      	movs	r0, r3
 800f85a:	46bd      	mov	sp, r7
 800f85c:	b002      	add	sp, #8
 800f85e:	bd80      	pop	{r7, pc}
 800f860:	20000094 	.word	0x20000094

0800f864 <ecm_incoming_attempt>:

static void ecm_incoming_attempt(void)
{
 800f864:	b580      	push	{r7, lr}
 800f866:	b082      	sub	sp, #8
 800f868:	af00      	add	r7, sp, #0
  int chunk_size;

  if (!ecm_tx_remaining || ecm_tx_busy)
 800f86a:	4b16      	ldr	r3, [pc, #88]	; (800f8c4 <ecm_incoming_attempt+0x60>)
 800f86c:	681b      	ldr	r3, [r3, #0]
 800f86e:	2b00      	cmp	r3, #0
 800f870:	d024      	beq.n	800f8bc <ecm_incoming_attempt+0x58>
 800f872:	4b15      	ldr	r3, [pc, #84]	; (800f8c8 <ecm_incoming_attempt+0x64>)
 800f874:	681b      	ldr	r3, [r3, #0]
 800f876:	2b00      	cmp	r3, #0
 800f878:	d120      	bne.n	800f8bc <ecm_incoming_attempt+0x58>
    return;

  chunk_size = ecm_tx_remaining;
 800f87a:	4b12      	ldr	r3, [pc, #72]	; (800f8c4 <ecm_incoming_attempt+0x60>)
 800f87c:	681b      	ldr	r3, [r3, #0]
 800f87e:	607b      	str	r3, [r7, #4]
  if (chunk_size > ECM_DATA_IN_SZ)
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	2b40      	cmp	r3, #64	; 0x40
 800f884:	dd01      	ble.n	800f88a <ecm_incoming_attempt+0x26>
    chunk_size = ECM_DATA_IN_SZ;
 800f886:	2340      	movs	r3, #64	; 0x40
 800f888:	607b      	str	r3, [r7, #4]

  /* ST stack always returns a success code, so reading the return value is pointless */
  USBD_LL_Transmit(registered_pdev, ECM_DATA_IN_EP, ecm_tx_ptr, chunk_size);
 800f88a:	4b10      	ldr	r3, [pc, #64]	; (800f8cc <ecm_incoming_attempt+0x68>)
 800f88c:	6818      	ldr	r0, [r3, #0]
 800f88e:	4b10      	ldr	r3, [pc, #64]	; (800f8d0 <ecm_incoming_attempt+0x6c>)
 800f890:	681a      	ldr	r2, [r3, #0]
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	b29b      	uxth	r3, r3
 800f896:	2182      	movs	r1, #130	; 0x82
 800f898:	f7fe ff39 	bl	800e70e <USBD_LL_Transmit>

  ecm_tx_ptr += chunk_size;
 800f89c:	4b0c      	ldr	r3, [pc, #48]	; (800f8d0 <ecm_incoming_attempt+0x6c>)
 800f89e:	681a      	ldr	r2, [r3, #0]
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	18d2      	adds	r2, r2, r3
 800f8a4:	4b0a      	ldr	r3, [pc, #40]	; (800f8d0 <ecm_incoming_attempt+0x6c>)
 800f8a6:	601a      	str	r2, [r3, #0]
  ecm_tx_remaining -= chunk_size;
 800f8a8:	4b06      	ldr	r3, [pc, #24]	; (800f8c4 <ecm_incoming_attempt+0x60>)
 800f8aa:	681a      	ldr	r2, [r3, #0]
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	1ad2      	subs	r2, r2, r3
 800f8b0:	4b04      	ldr	r3, [pc, #16]	; (800f8c4 <ecm_incoming_attempt+0x60>)
 800f8b2:	601a      	str	r2, [r3, #0]
  ecm_tx_busy = 1;
 800f8b4:	4b04      	ldr	r3, [pc, #16]	; (800f8c8 <ecm_incoming_attempt+0x64>)
 800f8b6:	2201      	movs	r2, #1
 800f8b8:	601a      	str	r2, [r3, #0]
 800f8ba:	e000      	b.n	800f8be <ecm_incoming_attempt+0x5a>
    return;
 800f8bc:	46c0      	nop			; (mov r8, r8)
}
 800f8be:	46bd      	mov	sp, r7
 800f8c0:	b002      	add	sp, #8
 800f8c2:	bd80      	pop	{r7, pc}
 800f8c4:	200028e4 	.word	0x200028e4
 800f8c8:	200028e8 	.word	0x200028e8
 800f8cc:	200024cc 	.word	0x200024cc
 800f8d0:	200028e0 	.word	0x200028e0

0800f8d4 <USBD_ECM_DataIn>:

static uint8_t USBD_ECM_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f8d4:	b580      	push	{r7, lr}
 800f8d6:	b082      	sub	sp, #8
 800f8d8:	af00      	add	r7, sp, #0
 800f8da:	6078      	str	r0, [r7, #4]
 800f8dc:	000a      	movs	r2, r1
 800f8de:	1cfb      	adds	r3, r7, #3
 800f8e0:	701a      	strb	r2, [r3, #0]
  if (ECM_DATA_IN_EP == (epnum | 0x80))
 800f8e2:	1cfb      	adds	r3, r7, #3
 800f8e4:	781b      	ldrb	r3, [r3, #0]
 800f8e6:	2280      	movs	r2, #128	; 0x80
 800f8e8:	4252      	negs	r2, r2
 800f8ea:	4313      	orrs	r3, r2
 800f8ec:	b2db      	uxtb	r3, r3
 800f8ee:	2b82      	cmp	r3, #130	; 0x82
 800f8f0:	d10b      	bne.n	800f90a <USBD_ECM_DataIn+0x36>
  {
    ecm_tx_busy = 0;
 800f8f2:	4b08      	ldr	r3, [pc, #32]	; (800f914 <USBD_ECM_DataIn+0x40>)
 800f8f4:	2200      	movs	r2, #0
 800f8f6:	601a      	str	r2, [r3, #0]
    if (0 == ecm_tx_remaining)
 800f8f8:	4b07      	ldr	r3, [pc, #28]	; (800f918 <USBD_ECM_DataIn+0x44>)
 800f8fa:	681b      	ldr	r3, [r3, #0]
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	d102      	bne.n	800f906 <USBD_ECM_DataIn+0x32>
      can_xmit = true;
 800f900:	4b06      	ldr	r3, [pc, #24]	; (800f91c <USBD_ECM_DataIn+0x48>)
 800f902:	2201      	movs	r2, #1
 800f904:	701a      	strb	r2, [r3, #0]
    ecm_incoming_attempt();
 800f906:	f7ff ffad 	bl	800f864 <ecm_incoming_attempt>
  }

  return USBD_OK;
 800f90a:	2300      	movs	r3, #0
}
 800f90c:	0018      	movs	r0, r3
 800f90e:	46bd      	mov	sp, r7
 800f910:	b002      	add	sp, #8
 800f912:	bd80      	pop	{r7, pc}
 800f914:	200028e8 	.word	0x200028e8
 800f918:	200028e4 	.word	0x200028e4
 800f91c:	200028dc 	.word	0x200028dc

0800f920 <USBD_ECM_DataOut>:

static uint8_t USBD_ECM_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{      
 800f920:	b580      	push	{r7, lr}
 800f922:	b084      	sub	sp, #16
 800f924:	af00      	add	r7, sp, #0
 800f926:	6078      	str	r0, [r7, #4]
 800f928:	000a      	movs	r2, r1
 800f92a:	1cfb      	adds	r3, r7, #3
 800f92c:	701a      	strb	r2, [r3, #0]
  uint32_t RxLength;

  if (ECM_DATA_OUT_EP != epnum)
 800f92e:	1cfb      	adds	r3, r7, #3
 800f930:	781b      	ldrb	r3, [r3, #0]
 800f932:	2b03      	cmp	r3, #3
 800f934:	d001      	beq.n	800f93a <USBD_ECM_DataOut+0x1a>
    return USBD_OK;
 800f936:	2300      	movs	r3, #0
 800f938:	e021      	b.n	800f97e <USBD_ECM_DataOut+0x5e>

  /* Get the received data length */
  RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800f93a:	1cfb      	adds	r3, r7, #3
 800f93c:	781a      	ldrb	r2, [r3, #0]
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	0011      	movs	r1, r2
 800f942:	0018      	movs	r0, r3
 800f944:	f7fe ff35 	bl	800e7b2 <USBD_LL_GetRxDataSize>
 800f948:	0003      	movs	r3, r0
 800f94a:	60fb      	str	r3, [r7, #12]

  ecm_rx_index += RxLength;
 800f94c:	4b0e      	ldr	r3, [pc, #56]	; (800f988 <USBD_ECM_DataOut+0x68>)
 800f94e:	681b      	ldr	r3, [r3, #0]
 800f950:	001a      	movs	r2, r3
 800f952:	68fb      	ldr	r3, [r7, #12]
 800f954:	18d3      	adds	r3, r2, r3
 800f956:	001a      	movs	r2, r3
 800f958:	4b0b      	ldr	r3, [pc, #44]	; (800f988 <USBD_ECM_DataOut+0x68>)
 800f95a:	601a      	str	r2, [r3, #0]

  if (RxLength < ECM_DATA_OUT_SZ)
 800f95c:	68fb      	ldr	r3, [r7, #12]
 800f95e:	2b3f      	cmp	r3, #63	; 0x3f
 800f960:	d80a      	bhi.n	800f978 <USBD_ECM_DataOut+0x58>
  {
    usb_ecm_recv_callback(ecm_rx_buffer, ecm_rx_index);
 800f962:	4b09      	ldr	r3, [pc, #36]	; (800f988 <USBD_ECM_DataOut+0x68>)
 800f964:	681a      	ldr	r2, [r3, #0]
 800f966:	4b09      	ldr	r3, [pc, #36]	; (800f98c <USBD_ECM_DataOut+0x6c>)
 800f968:	0011      	movs	r1, r2
 800f96a:	0018      	movs	r0, r3
 800f96c:	f7fe fb0a 	bl	800df84 <usb_ecm_recv_callback>
    ecm_rx_index = 0;
 800f970:	4b05      	ldr	r3, [pc, #20]	; (800f988 <USBD_ECM_DataOut+0x68>)
 800f972:	2200      	movs	r2, #0
 800f974:	601a      	str	r2, [r3, #0]
 800f976:	e001      	b.n	800f97c <USBD_ECM_DataOut+0x5c>
  }
  else
  {
    /* Initiate next USB packet transfer */
    usb_ecm_recv_renew();
 800f978:	f7ff fed6 	bl	800f728 <usb_ecm_recv_renew>
  }

  return USBD_OK;
 800f97c:	2300      	movs	r3, #0
}
 800f97e:	0018      	movs	r0, r3
 800f980:	46bd      	mov	sp, r7
 800f982:	b004      	add	sp, #16
 800f984:	bd80      	pop	{r7, pc}
 800f986:	46c0      	nop			; (mov r8, r8)
 800f988:	200028d8 	.word	0x200028d8
 800f98c:	200024d0 	.word	0x200024d0

0800f990 <USBD_ECM_SOF>:

static uint8_t USBD_ECM_SOF (USBD_HandleTypeDef *pdev)
{
 800f990:	b580      	push	{r7, lr}
 800f992:	b082      	sub	sp, #8
 800f994:	af00      	add	r7, sp, #0
 800f996:	6078      	str	r0, [r7, #4]
  /* mop up for any failed USBD_LL_PrepareReceive() call */
  if (OutboundTransferNeedsRenewal)
 800f998:	4b11      	ldr	r3, [pc, #68]	; (800f9e0 <USBD_ECM_SOF+0x50>)
 800f99a:	781b      	ldrb	r3, [r3, #0]
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	d001      	beq.n	800f9a4 <USBD_ECM_SOF+0x14>
    usb_ecm_recv_renew();
 800f9a0:	f7ff fec2 	bl	800f728 <usb_ecm_recv_renew>

  if (ecm_tx_busy)
 800f9a4:	4b0f      	ldr	r3, [pc, #60]	; (800f9e4 <USBD_ECM_SOF+0x54>)
 800f9a6:	681b      	ldr	r3, [r3, #0]
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	d012      	beq.n	800f9d2 <USBD_ECM_SOF+0x42>
  {
    /* ugly hack for ST stack sometimes not providing the DataOut callback */
    if (++ecm_tx_busy > 32)
 800f9ac:	4b0d      	ldr	r3, [pc, #52]	; (800f9e4 <USBD_ECM_SOF+0x54>)
 800f9ae:	681b      	ldr	r3, [r3, #0]
 800f9b0:	1c5a      	adds	r2, r3, #1
 800f9b2:	4b0c      	ldr	r3, [pc, #48]	; (800f9e4 <USBD_ECM_SOF+0x54>)
 800f9b4:	601a      	str	r2, [r3, #0]
 800f9b6:	4b0b      	ldr	r3, [pc, #44]	; (800f9e4 <USBD_ECM_SOF+0x54>)
 800f9b8:	681b      	ldr	r3, [r3, #0]
 800f9ba:	2b20      	cmp	r3, #32
 800f9bc:	dd09      	ble.n	800f9d2 <USBD_ECM_SOF+0x42>
    {
      ecm_tx_busy = 0;
 800f9be:	4b09      	ldr	r3, [pc, #36]	; (800f9e4 <USBD_ECM_SOF+0x54>)
 800f9c0:	2200      	movs	r2, #0
 800f9c2:	601a      	str	r2, [r3, #0]
      if (0 == ecm_tx_remaining)
 800f9c4:	4b08      	ldr	r3, [pc, #32]	; (800f9e8 <USBD_ECM_SOF+0x58>)
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d102      	bne.n	800f9d2 <USBD_ECM_SOF+0x42>
        can_xmit = true;
 800f9cc:	4b07      	ldr	r3, [pc, #28]	; (800f9ec <USBD_ECM_SOF+0x5c>)
 800f9ce:	2201      	movs	r2, #1
 800f9d0:	701a      	strb	r2, [r3, #0]
    }
  }

  ecm_incoming_attempt();
 800f9d2:	f7ff ff47 	bl	800f864 <ecm_incoming_attempt>

  return USBD_OK;
 800f9d6:	2300      	movs	r3, #0
}
 800f9d8:	0018      	movs	r0, r3
 800f9da:	46bd      	mov	sp, r7
 800f9dc:	b002      	add	sp, #8
 800f9de:	bd80      	pop	{r7, pc}
 800f9e0:	200028dd 	.word	0x200028dd
 800f9e4:	200028e8 	.word	0x200028e8
 800f9e8:	200028e4 	.word	0x200028e4
 800f9ec:	200028dc 	.word	0x200028dc

0800f9f0 <USBD_ECM_EP0_RxReady>:

static uint8_t USBD_ECM_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
 800f9f0:	b580      	push	{r7, lr}
 800f9f2:	b082      	sub	sp, #8
 800f9f4:	af00      	add	r7, sp, #0
 800f9f6:	6078      	str	r0, [r7, #4]
  return USBD_OK;
 800f9f8:	2300      	movs	r3, #0
}
 800f9fa:	0018      	movs	r0, r3
 800f9fc:	46bd      	mov	sp, r7
 800f9fe:	b002      	add	sp, #8
 800fa00:	bd80      	pop	{r7, pc}
	...

0800fa04 <USBD_ECM_GetFSCfgDesc>:

static const uint8_t *USBD_ECM_GetFSCfgDesc (uint16_t *length)
{
 800fa04:	b580      	push	{r7, lr}
 800fa06:	b082      	sub	sp, #8
 800fa08:	af00      	add	r7, sp, #0
 800fa0a:	6078      	str	r0, [r7, #4]
  *length = USBD_CfgFSDesc_len;
 800fa0c:	4b04      	ldr	r3, [pc, #16]	; (800fa20 <USBD_ECM_GetFSCfgDesc+0x1c>)
 800fa0e:	881a      	ldrh	r2, [r3, #0]
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	801a      	strh	r2, [r3, #0]
  return USBD_CfgFSDesc_pnt;
 800fa14:	4b03      	ldr	r3, [pc, #12]	; (800fa24 <USBD_ECM_GetFSCfgDesc+0x20>)
 800fa16:	681b      	ldr	r3, [r3, #0]
}
 800fa18:	0018      	movs	r0, r3
 800fa1a:	46bd      	mov	sp, r7
 800fa1c:	b002      	add	sp, #8
 800fa1e:	bd80      	pop	{r7, pc}
 800fa20:	0800fe74 	.word	0x0800fe74
 800fa24:	0800fe70 	.word	0x0800fe70

0800fa28 <USBD_ECM_RegisterInterface>:

uint8_t USBD_ECM_RegisterInterface(USBD_HandleTypeDef *pdev)
{
 800fa28:	b580      	push	{r7, lr}
 800fa2a:	b082      	sub	sp, #8
 800fa2c:	af00      	add	r7, sp, #0
 800fa2e:	6078      	str	r0, [r7, #4]
  unsigned index;

  return USBD_OK;
 800fa30:	2300      	movs	r3, #0
}
 800fa32:	0018      	movs	r0, r3
 800fa34:	46bd      	mov	sp, r7
 800fa36:	b002      	add	sp, #8
 800fa38:	bd80      	pop	{r7, pc}

0800fa3a <USBD_ECM_PMAConfig>:

void USBD_ECM_PMAConfig(PCD_HandleTypeDef *hpcd, uint32_t *pma_address)
{
 800fa3a:	b580      	push	{r7, lr}
 800fa3c:	b082      	sub	sp, #8
 800fa3e:	af00      	add	r7, sp, #0
 800fa40:	6078      	str	r0, [r7, #4]
 800fa42:	6039      	str	r1, [r7, #0]
  /* allocate PMA memory for all endpoints associated with ECM */
  HAL_PCDEx_PMAConfig(hpcd, ECM_DATA_IN_EP,  PCD_SNG_BUF, *pma_address);
 800fa44:	683b      	ldr	r3, [r7, #0]
 800fa46:	681b      	ldr	r3, [r3, #0]
 800fa48:	6878      	ldr	r0, [r7, #4]
 800fa4a:	2200      	movs	r2, #0
 800fa4c:	2182      	movs	r1, #130	; 0x82
 800fa4e:	f7f2 f83b 	bl	8001ac8 <HAL_PCDEx_PMAConfig>
  *pma_address += ECM_DATA_IN_SZ;
 800fa52:	683b      	ldr	r3, [r7, #0]
 800fa54:	681b      	ldr	r3, [r3, #0]
 800fa56:	3340      	adds	r3, #64	; 0x40
 800fa58:	001a      	movs	r2, r3
 800fa5a:	683b      	ldr	r3, [r7, #0]
 800fa5c:	601a      	str	r2, [r3, #0]
  HAL_PCDEx_PMAConfig(hpcd, ECM_DATA_OUT_EP, PCD_SNG_BUF, *pma_address);
 800fa5e:	683b      	ldr	r3, [r7, #0]
 800fa60:	681b      	ldr	r3, [r3, #0]
 800fa62:	6878      	ldr	r0, [r7, #4]
 800fa64:	2200      	movs	r2, #0
 800fa66:	2103      	movs	r1, #3
 800fa68:	f7f2 f82e 	bl	8001ac8 <HAL_PCDEx_PMAConfig>
  *pma_address += ECM_DATA_OUT_SZ;
 800fa6c:	683b      	ldr	r3, [r7, #0]
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	3340      	adds	r3, #64	; 0x40
 800fa72:	001a      	movs	r2, r3
 800fa74:	683b      	ldr	r3, [r7, #0]
 800fa76:	601a      	str	r2, [r3, #0]
  HAL_PCDEx_PMAConfig(hpcd, ECM_NOTIFICATION_IN_EP,  PCD_SNG_BUF, *pma_address);
 800fa78:	683b      	ldr	r3, [r7, #0]
 800fa7a:	681b      	ldr	r3, [r3, #0]
 800fa7c:	6878      	ldr	r0, [r7, #4]
 800fa7e:	2200      	movs	r2, #0
 800fa80:	2181      	movs	r1, #129	; 0x81
 800fa82:	f7f2 f821 	bl	8001ac8 <HAL_PCDEx_PMAConfig>
  *pma_address += ECM_NOTIFICATION_IN_SZ;
 800fa86:	683b      	ldr	r3, [r7, #0]
 800fa88:	681b      	ldr	r3, [r3, #0]
 800fa8a:	3340      	adds	r3, #64	; 0x40
 800fa8c:	001a      	movs	r2, r3
 800fa8e:	683b      	ldr	r3, [r7, #0]
 800fa90:	601a      	str	r2, [r3, #0]
}
 800fa92:	46c0      	nop			; (mov r8, r8)
 800fa94:	46bd      	mov	sp, r7
 800fa96:	b002      	add	sp, #8
 800fa98:	bd80      	pop	{r7, pc}
	...

0800fa9c <usb_ecm_can_xmit>:

bool usb_ecm_can_xmit(void)
{
 800fa9c:	b580      	push	{r7, lr}
 800fa9e:	b082      	sub	sp, #8
 800faa0:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800faa2:	b672      	cpsid	i
  bool outcome;

  __disable_irq();
  outcome = can_xmit;
 800faa4:	1dfb      	adds	r3, r7, #7
 800faa6:	4a05      	ldr	r2, [pc, #20]	; (800fabc <usb_ecm_can_xmit+0x20>)
 800faa8:	7812      	ldrb	r2, [r2, #0]
 800faaa:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800faac:	b662      	cpsie	i
  __enable_irq();

  return outcome;
 800faae:	1dfb      	adds	r3, r7, #7
 800fab0:	781b      	ldrb	r3, [r3, #0]
}
 800fab2:	0018      	movs	r0, r3
 800fab4:	46bd      	mov	sp, r7
 800fab6:	b002      	add	sp, #8
 800fab8:	bd80      	pop	{r7, pc}
 800faba:	46c0      	nop			; (mov r8, r8)
 800fabc:	200028dc 	.word	0x200028dc

0800fac0 <usb_ecm_xmit_packet>:

void usb_ecm_xmit_packet(struct pbuf *p)
{
 800fac0:	b580      	push	{r7, lr}
 800fac2:	b086      	sub	sp, #24
 800fac4:	af00      	add	r7, sp, #0
 800fac6:	6078      	str	r0, [r7, #4]
  struct pbuf *q;
  int packet_size;
  uint8_t *data;

  if (!registered_pdev || !can_xmit)
 800fac8:	4b1f      	ldr	r3, [pc, #124]	; (800fb48 <usb_ecm_xmit_packet+0x88>)
 800faca:	681b      	ldr	r3, [r3, #0]
 800facc:	2b00      	cmp	r3, #0
 800face:	d037      	beq.n	800fb40 <usb_ecm_xmit_packet+0x80>
 800fad0:	4b1e      	ldr	r3, [pc, #120]	; (800fb4c <usb_ecm_xmit_packet+0x8c>)
 800fad2:	781b      	ldrb	r3, [r3, #0]
 800fad4:	2201      	movs	r2, #1
 800fad6:	4053      	eors	r3, r2
 800fad8:	b2db      	uxtb	r3, r3
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d130      	bne.n	800fb40 <usb_ecm_xmit_packet+0x80>
    return;

  data = ecm_tx_buffer;
 800fade:	4b1c      	ldr	r3, [pc, #112]	; (800fb50 <usb_ecm_xmit_packet+0x90>)
 800fae0:	60fb      	str	r3, [r7, #12]
  packet_size = 0;
 800fae2:	2300      	movs	r3, #0
 800fae4:	613b      	str	r3, [r7, #16]
  for(q = p; q != NULL; q = q->next)
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	617b      	str	r3, [r7, #20]
 800faea:	e017      	b.n	800fb1c <usb_ecm_xmit_packet+0x5c>
  {
      memcpy(data, q->payload, q->len);
 800faec:	697b      	ldr	r3, [r7, #20]
 800faee:	6859      	ldr	r1, [r3, #4]
 800faf0:	697b      	ldr	r3, [r7, #20]
 800faf2:	895b      	ldrh	r3, [r3, #10]
 800faf4:	001a      	movs	r2, r3
 800faf6:	68fb      	ldr	r3, [r7, #12]
 800faf8:	0018      	movs	r0, r3
 800fafa:	f000 f8d2 	bl	800fca2 <memcpy>
      data += q->len;
 800fafe:	697b      	ldr	r3, [r7, #20]
 800fb00:	895b      	ldrh	r3, [r3, #10]
 800fb02:	001a      	movs	r2, r3
 800fb04:	68fb      	ldr	r3, [r7, #12]
 800fb06:	189b      	adds	r3, r3, r2
 800fb08:	60fb      	str	r3, [r7, #12]
      packet_size += q->len;
 800fb0a:	697b      	ldr	r3, [r7, #20]
 800fb0c:	895b      	ldrh	r3, [r3, #10]
 800fb0e:	001a      	movs	r2, r3
 800fb10:	693b      	ldr	r3, [r7, #16]
 800fb12:	189b      	adds	r3, r3, r2
 800fb14:	613b      	str	r3, [r7, #16]
  for(q = p; q != NULL; q = q->next)
 800fb16:	697b      	ldr	r3, [r7, #20]
 800fb18:	681b      	ldr	r3, [r3, #0]
 800fb1a:	617b      	str	r3, [r7, #20]
 800fb1c:	697b      	ldr	r3, [r7, #20]
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	d1e4      	bne.n	800faec <usb_ecm_xmit_packet+0x2c>
  __ASM volatile ("cpsid i" : : : "memory");
 800fb22:	b672      	cpsid	i
  }

  __disable_irq();
  can_xmit = false;
 800fb24:	4b09      	ldr	r3, [pc, #36]	; (800fb4c <usb_ecm_xmit_packet+0x8c>)
 800fb26:	2200      	movs	r2, #0
 800fb28:	701a      	strb	r2, [r3, #0]
  ecm_tx_ptr = ecm_tx_buffer;
 800fb2a:	4b0a      	ldr	r3, [pc, #40]	; (800fb54 <usb_ecm_xmit_packet+0x94>)
 800fb2c:	4a08      	ldr	r2, [pc, #32]	; (800fb50 <usb_ecm_xmit_packet+0x90>)
 800fb2e:	601a      	str	r2, [r3, #0]
  ecm_tx_remaining = packet_size;
 800fb30:	4b09      	ldr	r3, [pc, #36]	; (800fb58 <usb_ecm_xmit_packet+0x98>)
 800fb32:	693a      	ldr	r2, [r7, #16]
 800fb34:	601a      	str	r2, [r3, #0]
  copy_length = packet_size;
 800fb36:	4b09      	ldr	r3, [pc, #36]	; (800fb5c <usb_ecm_xmit_packet+0x9c>)
 800fb38:	693a      	ldr	r2, [r7, #16]
 800fb3a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800fb3c:	b662      	cpsie	i
 800fb3e:	e000      	b.n	800fb42 <usb_ecm_xmit_packet+0x82>
    return;
 800fb40:	46c0      	nop			; (mov r8, r8)
  __enable_irq();
}
 800fb42:	46bd      	mov	sp, r7
 800fb44:	b006      	add	sp, #24
 800fb46:	bd80      	pop	{r7, pc}
 800fb48:	200024cc 	.word	0x200024cc
 800fb4c:	200028dc 	.word	0x200028dc
 800fb50:	200026d4 	.word	0x200026d4
 800fb54:	200028e0 	.word	0x200028e0
 800fb58:	200028e4 	.word	0x200028e4
 800fb5c:	200028ec 	.word	0x200028ec

0800fb60 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 800fb60:	b580      	push	{r7, lr}
 800fb62:	b084      	sub	sp, #16
 800fb64:	af00      	add	r7, sp, #0
 800fb66:	60f8      	str	r0, [r7, #12]
 800fb68:	60b9      	str	r1, [r7, #8]
 800fb6a:	1dbb      	adds	r3, r7, #6
 800fb6c:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 800fb6e:	68fa      	ldr	r2, [r7, #12]
 800fb70:	23fa      	movs	r3, #250	; 0xfa
 800fb72:	005b      	lsls	r3, r3, #1
 800fb74:	2102      	movs	r1, #2
 800fb76:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 800fb78:	1dbb      	adds	r3, r7, #6
 800fb7a:	881a      	ldrh	r2, [r3, #0]
 800fb7c:	68fb      	ldr	r3, [r7, #12]
 800fb7e:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length   = len;
 800fb80:	1dbb      	adds	r3, r7, #6
 800fb82:	881a      	ldrh	r2, [r3, #0]
 800fb84:	68fb      	ldr	r3, [r7, #12]
 800fb86:	61da      	str	r2, [r3, #28]
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 800fb88:	1dbb      	adds	r3, r7, #6
 800fb8a:	881b      	ldrh	r3, [r3, #0]
 800fb8c:	68ba      	ldr	r2, [r7, #8]
 800fb8e:	68f8      	ldr	r0, [r7, #12]
 800fb90:	2100      	movs	r1, #0
 800fb92:	f7fe fdbc 	bl	800e70e <USBD_LL_Transmit>
  
  return USBD_OK;
 800fb96:	2300      	movs	r3, #0
}
 800fb98:	0018      	movs	r0, r3
 800fb9a:	46bd      	mov	sp, r7
 800fb9c:	b004      	add	sp, #16
 800fb9e:	bd80      	pop	{r7, pc}

0800fba0 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 800fba0:	b580      	push	{r7, lr}
 800fba2:	b084      	sub	sp, #16
 800fba4:	af00      	add	r7, sp, #0
 800fba6:	60f8      	str	r0, [r7, #12]
 800fba8:	60b9      	str	r1, [r7, #8]
 800fbaa:	1dbb      	adds	r3, r7, #6
 800fbac:	801a      	strh	r2, [r3, #0]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 800fbae:	1dbb      	adds	r3, r7, #6
 800fbb0:	881b      	ldrh	r3, [r3, #0]
 800fbb2:	68ba      	ldr	r2, [r7, #8]
 800fbb4:	68f8      	ldr	r0, [r7, #12]
 800fbb6:	2100      	movs	r1, #0
 800fbb8:	f7fe fda9 	bl	800e70e <USBD_LL_Transmit>
  
  return USBD_OK;
 800fbbc:	2300      	movs	r3, #0
}
 800fbbe:	0018      	movs	r0, r3
 800fbc0:	46bd      	mov	sp, r7
 800fbc2:	b004      	add	sp, #16
 800fbc4:	bd80      	pop	{r7, pc}

0800fbc6 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 800fbc6:	b580      	push	{r7, lr}
 800fbc8:	b084      	sub	sp, #16
 800fbca:	af00      	add	r7, sp, #0
 800fbcc:	60f8      	str	r0, [r7, #12]
 800fbce:	60b9      	str	r1, [r7, #8]
 800fbd0:	1dbb      	adds	r3, r7, #6
 800fbd2:	801a      	strh	r2, [r3, #0]

  USBD_LL_PrepareReceive (pdev,
 800fbd4:	1dbb      	adds	r3, r7, #6
 800fbd6:	881b      	ldrh	r3, [r3, #0]
 800fbd8:	68ba      	ldr	r2, [r7, #8]
 800fbda:	68f8      	ldr	r0, [r7, #12]
 800fbdc:	2100      	movs	r1, #0
 800fbde:	f7fe fdbf 	bl	800e760 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
 800fbe2:	2300      	movs	r3, #0
}
 800fbe4:	0018      	movs	r0, r3
 800fbe6:	46bd      	mov	sp, r7
 800fbe8:	b004      	add	sp, #16
 800fbea:	bd80      	pop	{r7, pc}

0800fbec <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 800fbec:	b580      	push	{r7, lr}
 800fbee:	b082      	sub	sp, #8
 800fbf0:	af00      	add	r7, sp, #0
 800fbf2:	6078      	str	r0, [r7, #4]

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800fbf4:	687a      	ldr	r2, [r7, #4]
 800fbf6:	23fa      	movs	r3, #250	; 0xfa
 800fbf8:	005b      	lsls	r3, r3, #1
 800fbfa:	2104      	movs	r1, #4
 800fbfc:	50d1      	str	r1, [r2, r3]
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 800fbfe:	6878      	ldr	r0, [r7, #4]
 800fc00:	2300      	movs	r3, #0
 800fc02:	2200      	movs	r2, #0
 800fc04:	2100      	movs	r1, #0
 800fc06:	f7fe fd82 	bl	800e70e <USBD_LL_Transmit>
  
  return USBD_OK;
 800fc0a:	2300      	movs	r3, #0
}
 800fc0c:	0018      	movs	r0, r3
 800fc0e:	46bd      	mov	sp, r7
 800fc10:	b002      	add	sp, #8
 800fc12:	bd80      	pop	{r7, pc}

0800fc14 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 800fc14:	b580      	push	{r7, lr}
 800fc16:	b082      	sub	sp, #8
 800fc18:	af00      	add	r7, sp, #0
 800fc1a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 800fc1c:	687a      	ldr	r2, [r7, #4]
 800fc1e:	23fa      	movs	r3, #250	; 0xfa
 800fc20:	005b      	lsls	r3, r3, #1
 800fc22:	2105      	movs	r1, #5
 800fc24:	50d1      	str	r1, [r2, r3]
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 800fc26:	6878      	ldr	r0, [r7, #4]
 800fc28:	2300      	movs	r3, #0
 800fc2a:	2200      	movs	r2, #0
 800fc2c:	2100      	movs	r1, #0
 800fc2e:	f7fe fd97 	bl	800e760 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
 800fc32:	2300      	movs	r3, #0
}
 800fc34:	0018      	movs	r0, r3
 800fc36:	46bd      	mov	sp, r7
 800fc38:	b002      	add	sp, #8
 800fc3a:	bd80      	pop	{r7, pc}

0800fc3c <__libc_init_array>:
 800fc3c:	b570      	push	{r4, r5, r6, lr}
 800fc3e:	2600      	movs	r6, #0
 800fc40:	4d0c      	ldr	r5, [pc, #48]	; (800fc74 <__libc_init_array+0x38>)
 800fc42:	4c0d      	ldr	r4, [pc, #52]	; (800fc78 <__libc_init_array+0x3c>)
 800fc44:	1b64      	subs	r4, r4, r5
 800fc46:	10a4      	asrs	r4, r4, #2
 800fc48:	42a6      	cmp	r6, r4
 800fc4a:	d109      	bne.n	800fc60 <__libc_init_array+0x24>
 800fc4c:	2600      	movs	r6, #0
 800fc4e:	f000 f839 	bl	800fcc4 <_init>
 800fc52:	4d0a      	ldr	r5, [pc, #40]	; (800fc7c <__libc_init_array+0x40>)
 800fc54:	4c0a      	ldr	r4, [pc, #40]	; (800fc80 <__libc_init_array+0x44>)
 800fc56:	1b64      	subs	r4, r4, r5
 800fc58:	10a4      	asrs	r4, r4, #2
 800fc5a:	42a6      	cmp	r6, r4
 800fc5c:	d105      	bne.n	800fc6a <__libc_init_array+0x2e>
 800fc5e:	bd70      	pop	{r4, r5, r6, pc}
 800fc60:	00b3      	lsls	r3, r6, #2
 800fc62:	58eb      	ldr	r3, [r5, r3]
 800fc64:	4798      	blx	r3
 800fc66:	3601      	adds	r6, #1
 800fc68:	e7ee      	b.n	800fc48 <__libc_init_array+0xc>
 800fc6a:	00b3      	lsls	r3, r6, #2
 800fc6c:	58eb      	ldr	r3, [r5, r3]
 800fc6e:	4798      	blx	r3
 800fc70:	3601      	adds	r6, #1
 800fc72:	e7f2      	b.n	800fc5a <__libc_init_array+0x1e>
 800fc74:	0800fea8 	.word	0x0800fea8
 800fc78:	0800fea8 	.word	0x0800fea8
 800fc7c:	0800fea8 	.word	0x0800fea8
 800fc80:	0800feac 	.word	0x0800feac

0800fc84 <memcmp>:
 800fc84:	b530      	push	{r4, r5, lr}
 800fc86:	2400      	movs	r4, #0
 800fc88:	42a2      	cmp	r2, r4
 800fc8a:	d101      	bne.n	800fc90 <memcmp+0xc>
 800fc8c:	2000      	movs	r0, #0
 800fc8e:	e005      	b.n	800fc9c <memcmp+0x18>
 800fc90:	5d03      	ldrb	r3, [r0, r4]
 800fc92:	1c65      	adds	r5, r4, #1
 800fc94:	5d0c      	ldrb	r4, [r1, r4]
 800fc96:	42a3      	cmp	r3, r4
 800fc98:	d001      	beq.n	800fc9e <memcmp+0x1a>
 800fc9a:	1b18      	subs	r0, r3, r4
 800fc9c:	bd30      	pop	{r4, r5, pc}
 800fc9e:	002c      	movs	r4, r5
 800fca0:	e7f2      	b.n	800fc88 <memcmp+0x4>

0800fca2 <memcpy>:
 800fca2:	2300      	movs	r3, #0
 800fca4:	b510      	push	{r4, lr}
 800fca6:	429a      	cmp	r2, r3
 800fca8:	d100      	bne.n	800fcac <memcpy+0xa>
 800fcaa:	bd10      	pop	{r4, pc}
 800fcac:	5ccc      	ldrb	r4, [r1, r3]
 800fcae:	54c4      	strb	r4, [r0, r3]
 800fcb0:	3301      	adds	r3, #1
 800fcb2:	e7f8      	b.n	800fca6 <memcpy+0x4>

0800fcb4 <memset>:
 800fcb4:	0003      	movs	r3, r0
 800fcb6:	1812      	adds	r2, r2, r0
 800fcb8:	4293      	cmp	r3, r2
 800fcba:	d100      	bne.n	800fcbe <memset+0xa>
 800fcbc:	4770      	bx	lr
 800fcbe:	7019      	strb	r1, [r3, #0]
 800fcc0:	3301      	adds	r3, #1
 800fcc2:	e7f9      	b.n	800fcb8 <memset+0x4>

0800fcc4 <_init>:
 800fcc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fcc6:	46c0      	nop			; (mov r8, r8)
 800fcc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fcca:	bc08      	pop	{r3}
 800fccc:	469e      	mov	lr, r3
 800fcce:	4770      	bx	lr

0800fcd0 <_fini>:
 800fcd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fcd2:	46c0      	nop			; (mov r8, r8)
 800fcd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fcd6:	bc08      	pop	{r3}
 800fcd8:	469e      	mov	lr, r3
 800fcda:	4770      	bx	lr
